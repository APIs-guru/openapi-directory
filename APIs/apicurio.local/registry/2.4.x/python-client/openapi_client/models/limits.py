# coding: utf-8

"""
    Apicurio Registry API [v2]

    Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 

    The version of the OpenAPI document: 2.4.x
    Contact: apicurio@lists.jboss.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Limits(BaseModel):
    """
    List of limitations on used resources, that are applied on the current instance of Registry. Keys represent the resource type and are suffixed by the corresponding unit. Values are integers. Only non-negative values are allowed, with the exception of -1, which means that the limit is not applied.
    """ # noqa: E501
    max_artifact_description_length_chars: Optional[StrictInt] = Field(default=None, alias="maxArtifactDescriptionLengthChars")
    max_artifact_labels_count: Optional[StrictInt] = Field(default=None, alias="maxArtifactLabelsCount")
    max_artifact_name_length_chars: Optional[StrictInt] = Field(default=None, alias="maxArtifactNameLengthChars")
    max_artifact_properties_count: Optional[StrictInt] = Field(default=None, alias="maxArtifactPropertiesCount")
    max_artifacts_count: Optional[StrictInt] = Field(default=None, alias="maxArtifactsCount")
    max_label_size_bytes: Optional[StrictInt] = Field(default=None, alias="maxLabelSizeBytes")
    max_property_key_size_bytes: Optional[StrictInt] = Field(default=None, alias="maxPropertyKeySizeBytes")
    max_property_value_size_bytes: Optional[StrictInt] = Field(default=None, alias="maxPropertyValueSizeBytes")
    max_requests_per_second_count: Optional[StrictInt] = Field(default=None, alias="maxRequestsPerSecondCount")
    max_schema_size_bytes: Optional[StrictInt] = Field(default=None, alias="maxSchemaSizeBytes")
    max_total_schemas_count: Optional[StrictInt] = Field(default=None, alias="maxTotalSchemasCount")
    max_versions_per_artifact_count: Optional[StrictInt] = Field(default=None, alias="maxVersionsPerArtifactCount")
    __properties: ClassVar[List[str]] = ["maxArtifactDescriptionLengthChars", "maxArtifactLabelsCount", "maxArtifactNameLengthChars", "maxArtifactPropertiesCount", "maxArtifactsCount", "maxLabelSizeBytes", "maxPropertyKeySizeBytes", "maxPropertyValueSizeBytes", "maxRequestsPerSecondCount", "maxSchemaSizeBytes", "maxTotalSchemasCount", "maxVersionsPerArtifactCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Limits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Limits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxArtifactDescriptionLengthChars": obj.get("maxArtifactDescriptionLengthChars"),
            "maxArtifactLabelsCount": obj.get("maxArtifactLabelsCount"),
            "maxArtifactNameLengthChars": obj.get("maxArtifactNameLengthChars"),
            "maxArtifactPropertiesCount": obj.get("maxArtifactPropertiesCount"),
            "maxArtifactsCount": obj.get("maxArtifactsCount"),
            "maxLabelSizeBytes": obj.get("maxLabelSizeBytes"),
            "maxPropertyKeySizeBytes": obj.get("maxPropertyKeySizeBytes"),
            "maxPropertyValueSizeBytes": obj.get("maxPropertyValueSizeBytes"),
            "maxRequestsPerSecondCount": obj.get("maxRequestsPerSecondCount"),
            "maxSchemaSizeBytes": obj.get("maxSchemaSizeBytes"),
            "maxTotalSchemasCount": obj.get("maxTotalSchemasCount"),
            "maxVersionsPerArtifactCount": obj.get("maxVersionsPerArtifactCount")
        })
        return _obj



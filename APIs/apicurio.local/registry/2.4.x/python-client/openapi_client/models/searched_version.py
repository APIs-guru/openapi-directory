# coding: utf-8

"""
    Apicurio Registry API [v2]

    Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 

    The version of the OpenAPI document: 2.4.x
    Contact: apicurio@lists.jboss.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.artifact_reference import ArtifactReference
from openapi_client.models.artifact_state import ArtifactState
from typing import Optional, Set
from typing_extensions import Self

class SearchedVersion(BaseModel):
    """
    Models a single artifact from the result set returned when searching for artifacts.
    """ # noqa: E501
    content_id: StrictInt = Field(alias="contentId")
    created_by: StrictStr = Field(alias="createdBy")
    created_on: datetime = Field(alias="createdOn")
    description: Optional[StrictStr] = None
    global_id: StrictInt = Field(alias="globalId")
    labels: Optional[List[StrictStr]] = None
    name: Optional[StrictStr] = None
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-defined name-value pairs. Name and value must be strings.")
    references: List[ArtifactReference]
    state: ArtifactState
    type: StrictStr
    version: StrictStr
    __properties: ClassVar[List[str]] = ["contentId", "createdBy", "createdOn", "description", "globalId", "labels", "name", "properties", "references", "state", "type", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchedVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in references (list)
        _items = []
        if self.references:
            for _item_references in self.references:
                if _item_references:
                    _items.append(_item_references.to_dict())
            _dict['references'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchedVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentId": obj.get("contentId"),
            "createdBy": obj.get("createdBy"),
            "createdOn": obj.get("createdOn"),
            "description": obj.get("description"),
            "globalId": obj.get("globalId"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "properties": obj.get("properties"),
            "references": [ArtifactReference.from_dict(_item) for _item in obj["references"]] if obj.get("references") is not None else None,
            "state": obj.get("state"),
            "type": obj.get("type"),
            "version": obj.get("version")
        })
        return _obj



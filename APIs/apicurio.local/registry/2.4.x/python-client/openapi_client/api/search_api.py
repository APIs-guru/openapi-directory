# coding: utf-8

"""
    Apicurio Registry API [v2]

    Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 

    The version of the OpenAPI document: 2.4.x
    Contact: apicurio@lists.jboss.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import List, Optional, Tuple, Union
from typing_extensions import Annotated
from openapi_client.models.artifact_search_results import ArtifactSearchResults
from openapi_client.models.sort_by import SortBy
from openapi_client.models.sort_order import SortOrder

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_artifacts(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Filter by artifact name.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The number of artifacts to skip before starting to collect the result set.  Defaults to 0.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of artifacts to return.  Defaults to 20.")] = None,
        order: Annotated[Optional[SortOrder], Field(description="Sort order, ascending (`asc`) or descending (`desc`).")] = None,
        orderby: Annotated[Optional[SortBy], Field(description="The field to sort by.  Can be one of:  * `name` * `createdOn` ")] = None,
        labels: Annotated[Optional[List[StrictStr]], Field(description="Filter by label.  Include one or more label to only return artifacts containing all of the specified labels.")] = None,
        properties: Annotated[Optional[List[StrictStr]], Field(description="Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example `properties=foo:bar` will return only artifacts with a custom property named `foo` and value `bar`.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Filter by description.")] = None,
        group: Annotated[Optional[StrictStr], Field(description="Filter by artifact group.")] = None,
        global_id: Annotated[Optional[StrictInt], Field(description="Filter by globalId.")] = None,
        content_id: Annotated[Optional[StrictInt], Field(description="Filter by contentId.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ArtifactSearchResults:
        """Search for artifacts

        Returns a paginated list of all artifacts that match the provided filter criteria. 

        :param name: Filter by artifact name.
        :type name: str
        :param offset: The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
        :type offset: int
        :param limit: The number of artifacts to return.  Defaults to 20.
        :type limit: int
        :param order: Sort order, ascending (`asc`) or descending (`desc`).
        :type order: SortOrder
        :param orderby: The field to sort by.  Can be one of:  * `name` * `createdOn` 
        :type orderby: SortBy
        :param labels: Filter by label.  Include one or more label to only return artifacts containing all of the specified labels.
        :type labels: List[str]
        :param properties: Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example `properties=foo:bar` will return only artifacts with a custom property named `foo` and value `bar`.
        :type properties: List[str]
        :param description: Filter by description.
        :type description: str
        :param group: Filter by artifact group.
        :type group: str
        :param global_id: Filter by globalId.
        :type global_id: int
        :param content_id: Filter by contentId.
        :type content_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_artifacts_serialize(
            name=name,
            offset=offset,
            limit=limit,
            order=order,
            orderby=orderby,
            labels=labels,
            properties=properties,
            description=description,
            group=group,
            global_id=global_id,
            content_id=content_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactSearchResults",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_artifacts_with_http_info(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Filter by artifact name.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The number of artifacts to skip before starting to collect the result set.  Defaults to 0.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of artifacts to return.  Defaults to 20.")] = None,
        order: Annotated[Optional[SortOrder], Field(description="Sort order, ascending (`asc`) or descending (`desc`).")] = None,
        orderby: Annotated[Optional[SortBy], Field(description="The field to sort by.  Can be one of:  * `name` * `createdOn` ")] = None,
        labels: Annotated[Optional[List[StrictStr]], Field(description="Filter by label.  Include one or more label to only return artifacts containing all of the specified labels.")] = None,
        properties: Annotated[Optional[List[StrictStr]], Field(description="Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example `properties=foo:bar` will return only artifacts with a custom property named `foo` and value `bar`.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Filter by description.")] = None,
        group: Annotated[Optional[StrictStr], Field(description="Filter by artifact group.")] = None,
        global_id: Annotated[Optional[StrictInt], Field(description="Filter by globalId.")] = None,
        content_id: Annotated[Optional[StrictInt], Field(description="Filter by contentId.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ArtifactSearchResults]:
        """Search for artifacts

        Returns a paginated list of all artifacts that match the provided filter criteria. 

        :param name: Filter by artifact name.
        :type name: str
        :param offset: The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
        :type offset: int
        :param limit: The number of artifacts to return.  Defaults to 20.
        :type limit: int
        :param order: Sort order, ascending (`asc`) or descending (`desc`).
        :type order: SortOrder
        :param orderby: The field to sort by.  Can be one of:  * `name` * `createdOn` 
        :type orderby: SortBy
        :param labels: Filter by label.  Include one or more label to only return artifacts containing all of the specified labels.
        :type labels: List[str]
        :param properties: Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example `properties=foo:bar` will return only artifacts with a custom property named `foo` and value `bar`.
        :type properties: List[str]
        :param description: Filter by description.
        :type description: str
        :param group: Filter by artifact group.
        :type group: str
        :param global_id: Filter by globalId.
        :type global_id: int
        :param content_id: Filter by contentId.
        :type content_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_artifacts_serialize(
            name=name,
            offset=offset,
            limit=limit,
            order=order,
            orderby=orderby,
            labels=labels,
            properties=properties,
            description=description,
            group=group,
            global_id=global_id,
            content_id=content_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactSearchResults",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_artifacts_without_preload_content(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Filter by artifact name.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The number of artifacts to skip before starting to collect the result set.  Defaults to 0.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of artifacts to return.  Defaults to 20.")] = None,
        order: Annotated[Optional[SortOrder], Field(description="Sort order, ascending (`asc`) or descending (`desc`).")] = None,
        orderby: Annotated[Optional[SortBy], Field(description="The field to sort by.  Can be one of:  * `name` * `createdOn` ")] = None,
        labels: Annotated[Optional[List[StrictStr]], Field(description="Filter by label.  Include one or more label to only return artifacts containing all of the specified labels.")] = None,
        properties: Annotated[Optional[List[StrictStr]], Field(description="Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example `properties=foo:bar` will return only artifacts with a custom property named `foo` and value `bar`.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Filter by description.")] = None,
        group: Annotated[Optional[StrictStr], Field(description="Filter by artifact group.")] = None,
        global_id: Annotated[Optional[StrictInt], Field(description="Filter by globalId.")] = None,
        content_id: Annotated[Optional[StrictInt], Field(description="Filter by contentId.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for artifacts

        Returns a paginated list of all artifacts that match the provided filter criteria. 

        :param name: Filter by artifact name.
        :type name: str
        :param offset: The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
        :type offset: int
        :param limit: The number of artifacts to return.  Defaults to 20.
        :type limit: int
        :param order: Sort order, ascending (`asc`) or descending (`desc`).
        :type order: SortOrder
        :param orderby: The field to sort by.  Can be one of:  * `name` * `createdOn` 
        :type orderby: SortBy
        :param labels: Filter by label.  Include one or more label to only return artifacts containing all of the specified labels.
        :type labels: List[str]
        :param properties: Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example `properties=foo:bar` will return only artifacts with a custom property named `foo` and value `bar`.
        :type properties: List[str]
        :param description: Filter by description.
        :type description: str
        :param group: Filter by artifact group.
        :type group: str
        :param global_id: Filter by globalId.
        :type global_id: int
        :param content_id: Filter by contentId.
        :type content_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_artifacts_serialize(
            name=name,
            offset=offset,
            limit=limit,
            order=order,
            orderby=orderby,
            labels=labels,
            properties=properties,
            description=description,
            group=group,
            global_id=global_id,
            content_id=content_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactSearchResults",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_artifacts_serialize(
        self,
        name,
        offset,
        limit,
        order,
        orderby,
        labels,
        properties,
        description,
        group,
        global_id,
        content_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'labels': 'multi',
            'properties': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if order is not None:
            
            _query_params.append(('order', order.value))
            
        if orderby is not None:
            
            _query_params.append(('orderby', orderby.value))
            
        if labels is not None:
            
            _query_params.append(('labels', labels))
            
        if properties is not None:
            
            _query_params.append(('properties', properties))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if group is not None:
            
            _query_params.append(('group', group))
            
        if global_id is not None:
            
            _query_params.append(('globalId', global_id))
            
        if content_id is not None:
            
            _query_params.append(('contentId', content_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/artifacts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_artifacts_by_content(
        self,
        body: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The content to search for.")],
        canonical: Annotated[Optional[StrictBool], Field(description="Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.")] = None,
        artifact_type: Annotated[Optional[StrictStr], Field(description="Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The number of artifacts to skip before starting to collect the result set.  Defaults to 0.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of artifacts to return.  Defaults to 20.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order, ascending (`asc`) or descending (`desc`).")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The field to sort by.  Can be one of:  * `name` * `createdOn` ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ArtifactSearchResults:
        """Search for artifacts by content

        Returns a paginated list of all artifacts with at least one version that matches the posted content. 

        :param body: The content to search for. (required)
        :type body: bytearray
        :param canonical: Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.
        :type canonical: bool
        :param artifact_type: Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.
        :type artifact_type: str
        :param offset: The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
        :type offset: int
        :param limit: The number of artifacts to return.  Defaults to 20.
        :type limit: int
        :param order: Sort order, ascending (`asc`) or descending (`desc`).
        :type order: str
        :param orderby: The field to sort by.  Can be one of:  * `name` * `createdOn` 
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_artifacts_by_content_serialize(
            body=body,
            canonical=canonical,
            artifact_type=artifact_type,
            offset=offset,
            limit=limit,
            order=order,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactSearchResults",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_artifacts_by_content_with_http_info(
        self,
        body: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The content to search for.")],
        canonical: Annotated[Optional[StrictBool], Field(description="Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.")] = None,
        artifact_type: Annotated[Optional[StrictStr], Field(description="Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The number of artifacts to skip before starting to collect the result set.  Defaults to 0.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of artifacts to return.  Defaults to 20.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order, ascending (`asc`) or descending (`desc`).")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The field to sort by.  Can be one of:  * `name` * `createdOn` ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ArtifactSearchResults]:
        """Search for artifacts by content

        Returns a paginated list of all artifacts with at least one version that matches the posted content. 

        :param body: The content to search for. (required)
        :type body: bytearray
        :param canonical: Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.
        :type canonical: bool
        :param artifact_type: Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.
        :type artifact_type: str
        :param offset: The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
        :type offset: int
        :param limit: The number of artifacts to return.  Defaults to 20.
        :type limit: int
        :param order: Sort order, ascending (`asc`) or descending (`desc`).
        :type order: str
        :param orderby: The field to sort by.  Can be one of:  * `name` * `createdOn` 
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_artifacts_by_content_serialize(
            body=body,
            canonical=canonical,
            artifact_type=artifact_type,
            offset=offset,
            limit=limit,
            order=order,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactSearchResults",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_artifacts_by_content_without_preload_content(
        self,
        body: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The content to search for.")],
        canonical: Annotated[Optional[StrictBool], Field(description="Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.")] = None,
        artifact_type: Annotated[Optional[StrictStr], Field(description="Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The number of artifacts to skip before starting to collect the result set.  Defaults to 0.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of artifacts to return.  Defaults to 20.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort order, ascending (`asc`) or descending (`desc`).")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The field to sort by.  Can be one of:  * `name` * `createdOn` ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for artifacts by content

        Returns a paginated list of all artifacts with at least one version that matches the posted content. 

        :param body: The content to search for. (required)
        :type body: bytearray
        :param canonical: Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.
        :type canonical: bool
        :param artifact_type: Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.
        :type artifact_type: str
        :param offset: The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
        :type offset: int
        :param limit: The number of artifacts to return.  Defaults to 20.
        :type limit: int
        :param order: Sort order, ascending (`asc`) or descending (`desc`).
        :type order: str
        :param orderby: The field to sort by.  Can be one of:  * `name` * `createdOn` 
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_artifacts_by_content_serialize(
            body=body,
            canonical=canonical,
            artifact_type=artifact_type,
            offset=offset,
            limit=limit,
            order=order,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactSearchResults",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_artifacts_by_content_serialize(
        self,
        body,
        canonical,
        artifact_type,
        offset,
        limit,
        order,
        orderby,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if canonical is not None:
            
            _query_params.append(('canonical', canonical))
            
        if artifact_type is not None:
            
            _query_params.append(('artifactType', artifact_type))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if orderby is not None:
            
            _query_params.append(('orderby', orderby))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            elif isinstance(body, tuple):
                # drop the filename from the tuple
                _body_params = body[1]
            else:
                _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search/artifacts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Apicurio Registry API [v2]

    Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 

    The version of the OpenAPI document: 2.4.x
    Contact: apicurio@lists.jboss.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.admin_api import AdminApi


class TestAdminApi(unittest.TestCase):
    """AdminApi unit test stubs"""

    def setUp(self) -> None:
        self.api = AdminApi()

    def tearDown(self) -> None:
        pass

    def test_create_global_rule_0(self) -> None:
        """Test case for create_global_rule_0

        Create global rule
        """
        pass

    def test_create_role_mapping(self) -> None:
        """Test case for create_role_mapping

        Create a new role mapping
        """
        pass

    def test_delete_all_global_rules_0(self) -> None:
        """Test case for delete_all_global_rules_0

        Delete all global rules
        """
        pass

    def test_delete_global_rule_0(self) -> None:
        """Test case for delete_global_rule_0

        Delete global rule
        """
        pass

    def test_delete_role_mapping(self) -> None:
        """Test case for delete_role_mapping

        Delete a role mapping
        """
        pass

    def test_export_data(self) -> None:
        """Test case for export_data

        Export registry data
        """
        pass

    def test_get_config_property(self) -> None:
        """Test case for get_config_property

        Get configuration property value
        """
        pass

    def test_get_global_rule_config_0(self) -> None:
        """Test case for get_global_rule_config_0

        Get global rule configuration
        """
        pass

    def test_get_log_configuration(self) -> None:
        """Test case for get_log_configuration

        Get a single logger configuration
        """
        pass

    def test_get_role_mapping(self) -> None:
        """Test case for get_role_mapping

        Return a single role mapping
        """
        pass

    def test_import_data(self) -> None:
        """Test case for import_data

        Import registry data
        """
        pass

    def test_list_artifact_types_0(self) -> None:
        """Test case for list_artifact_types_0

        List artifact types
        """
        pass

    def test_list_config_properties(self) -> None:
        """Test case for list_config_properties

        List all configuration properties
        """
        pass

    def test_list_global_rules_0(self) -> None:
        """Test case for list_global_rules_0

        List global rules
        """
        pass

    def test_list_log_configurations(self) -> None:
        """Test case for list_log_configurations

        List logging configurations
        """
        pass

    def test_list_role_mappings(self) -> None:
        """Test case for list_role_mappings

        List all role mappings
        """
        pass

    def test_remove_log_configuration(self) -> None:
        """Test case for remove_log_configuration

        Removes logger configuration
        """
        pass

    def test_reset_config_property(self) -> None:
        """Test case for reset_config_property

        Reset a configuration property
        """
        pass

    def test_set_log_configuration(self) -> None:
        """Test case for set_log_configuration

        Set a logger's configuration
        """
        pass

    def test_update_config_property(self) -> None:
        """Test case for update_config_property

        Update a configuration property
        """
        pass

    def test_update_global_rule_config_0(self) -> None:
        """Test case for update_global_rule_config_0

        Update global rule configuration
        """
        pass

    def test_update_role_mapping(self) -> None:
        """Test case for update_role_mapping

        Update a role mapping
        """
        pass


if __name__ == '__main__':
    unittest.main()

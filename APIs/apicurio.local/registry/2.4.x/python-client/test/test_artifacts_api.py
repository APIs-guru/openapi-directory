# coding: utf-8

"""
    Apicurio Registry API [v2]

    Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 

    The version of the OpenAPI document: 2.4.x
    Contact: apicurio@lists.jboss.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.artifacts_api import ArtifactsApi


class TestArtifactsApi(unittest.TestCase):
    """ArtifactsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ArtifactsApi()

    def tearDown(self) -> None:
        pass

    def test_create_artifact(self) -> None:
        """Test case for create_artifact

        Create artifact
        """
        pass

    def test_delete_artifact(self) -> None:
        """Test case for delete_artifact

        Delete artifact
        """
        pass

    def test_delete_artifacts_in_group(self) -> None:
        """Test case for delete_artifacts_in_group

        Delete artifacts in group
        """
        pass

    def test_get_content_by_global_id(self) -> None:
        """Test case for get_content_by_global_id

        Get artifact by global ID
        """
        pass

    def test_get_content_by_hash(self) -> None:
        """Test case for get_content_by_hash

        Get artifact content by SHA-256 hash
        """
        pass

    def test_get_content_by_id(self) -> None:
        """Test case for get_content_by_id

        Get artifact content by ID
        """
        pass

    def test_get_latest_artifact(self) -> None:
        """Test case for get_latest_artifact

        Get latest artifact
        """
        pass

    def test_list_artifacts_in_group(self) -> None:
        """Test case for list_artifacts_in_group

        List artifacts in group
        """
        pass

    def test_references_by_content_hash(self) -> None:
        """Test case for references_by_content_hash

        List artifact references by hash
        """
        pass

    def test_references_by_content_id(self) -> None:
        """Test case for references_by_content_id

        List artifact references by content ID
        """
        pass

    def test_references_by_global_id(self) -> None:
        """Test case for references_by_global_id

        List artifact references by global ID
        """
        pass

    def test_search_artifacts_0(self) -> None:
        """Test case for search_artifacts_0

        Search for artifacts
        """
        pass

    def test_search_artifacts_by_content_0(self) -> None:
        """Test case for search_artifacts_by_content_0

        Search for artifacts by content
        """
        pass

    def test_update_artifact(self) -> None:
        """Test case for update_artifact

        Update artifact
        """
        pass

    def test_update_artifact_state(self) -> None:
        """Test case for update_artifact_state

        Update artifact state
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.feature import Feature

class TestFeature(unittest.TestCase):
    """Feature unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Feature:
        """Test Feature
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Feature`
        """
        model = Feature()
        if include_optional:
            return Feature(
                detailed_mode = openapi_client.models.feature_detailed_mode_section.FeatureDetailedModeSection(
                    auto_categories = True, 
                    entity_mentions = True, 
                    entity_opinions = True, 
                    entity_relations = True, 
                    entity_themes = True, 
                    intentions = True, 
                    language_detection = True, 
                    model_sentiment = True, 
                    named_entities = True, 
                    pos_tagging = True, 
                    queries = True, 
                    sentiment = True, 
                    sentiment_phrases = True, 
                    summarization = True, 
                    taxonomy = True, 
                    theme_mentions = True, 
                    themes = True, 
                    user_categories = True, 
                    user_entities = True, ),
                discovery_mode = openapi_client.models.feature_discovery_mode_section.FeatureDiscoveryModeSection(
                    entity_mentions = True, 
                    facet_attributes = True, 
                    facet_mentioins = True, 
                    facets = True, 
                    named_entities = True, 
                    queries = True, 
                    taxonomy = True, 
                    theme_mentions = True, 
                    themes = True, 
                    user_categories = True, 
                    user_entities = True, ),
                html_processing = True,
                id = '',
                language = '',
                one_sentence_mode = True,
                settings = openapi_client.models.feature_settings_section.FeatureSettingsSection(
                    blacklist = True, 
                    queries = True, 
                    sentiment_phrases = True, 
                    taxonomy = True, 
                    user_categories = True, 
                    user_entities = True, ),
                templates = openapi_client.models.feature_template_section.FeatureTemplateSection(
                    config_id = '', 
                    description = '', 
                    id = '', 
                    is_free = True, 
                    language = '', 
                    name = '', 
                    type = 'language-default', 
                    version = '', )
            )
        else:
            return Feature(
                detailed_mode = openapi_client.models.feature_detailed_mode_section.FeatureDetailedModeSection(
                    auto_categories = True, 
                    entity_mentions = True, 
                    entity_opinions = True, 
                    entity_relations = True, 
                    entity_themes = True, 
                    intentions = True, 
                    language_detection = True, 
                    model_sentiment = True, 
                    named_entities = True, 
                    pos_tagging = True, 
                    queries = True, 
                    sentiment = True, 
                    sentiment_phrases = True, 
                    summarization = True, 
                    taxonomy = True, 
                    theme_mentions = True, 
                    themes = True, 
                    user_categories = True, 
                    user_entities = True, ),
                discovery_mode = openapi_client.models.feature_discovery_mode_section.FeatureDiscoveryModeSection(
                    entity_mentions = True, 
                    facet_attributes = True, 
                    facet_mentioins = True, 
                    facets = True, 
                    named_entities = True, 
                    queries = True, 
                    taxonomy = True, 
                    theme_mentions = True, 
                    themes = True, 
                    user_categories = True, 
                    user_entities = True, ),
                html_processing = True,
                id = '',
                language = '',
                one_sentence_mode = True,
                settings = openapi_client.models.feature_settings_section.FeatureSettingsSection(
                    blacklist = True, 
                    queries = True, 
                    sentiment_phrases = True, 
                    taxonomy = True, 
                    user_categories = True, 
                    user_entities = True, ),
                templates = openapi_client.models.feature_template_section.FeatureTemplateSection(
                    config_id = '', 
                    description = '', 
                    id = '', 
                    is_free = True, 
                    language = '', 
                    name = '', 
                    type = 'language-default', 
                    version = '', ),
        )
        """

    def testFeature(self):
        """Test Feature"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

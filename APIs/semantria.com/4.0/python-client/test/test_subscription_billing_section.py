# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.subscription_billing_section import SubscriptionBillingSection

class TestSubscriptionBillingSection(unittest.TestCase):
    """SubscriptionBillingSection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionBillingSection:
        """Test SubscriptionBillingSection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionBillingSection`
        """
        model = SubscriptionBillingSection()
        if include_optional:
            return SubscriptionBillingSection(
                app_seats_allocated = 0,
                app_seats_permitted = 0,
                data_calls_balance = 0,
                data_calls_limit = 0,
                data_calls_limit_interval = 0,
                docs_balance = 0,
                docs_limit = 0,
                docs_limit_interval = 0,
                docs_suggested = 0,
                docs_suggested_interval = 0,
                expiration_date = '',
                limit_type = '',
                polling_calls_balance = 0,
                polling_calls_limit = 0,
                polling_calls_limit_interval = 0,
                priority = '',
                settings_calls_balance = 0,
                settings_calls_limit = 0,
                settings_calls_limit_interval = 0
            )
        else:
            return SubscriptionBillingSection(
                app_seats_allocated = 0,
                app_seats_permitted = 0,
                data_calls_balance = 0,
                data_calls_limit = 0,
                data_calls_limit_interval = 0,
                docs_balance = 0,
                docs_limit = 0,
                docs_limit_interval = 0,
                docs_suggested = 0,
                docs_suggested_interval = 0,
                expiration_date = '',
                limit_type = '',
                polling_calls_balance = 0,
                polling_calls_limit = 0,
                polling_calls_limit_interval = 0,
                priority = '',
                settings_calls_balance = 0,
                settings_calls_limit = 0,
                settings_calls_limit_interval = 0,
        )
        """

    def testSubscriptionBillingSection(self):
        """Test SubscriptionBillingSection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

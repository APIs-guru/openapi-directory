# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.document_analytic_data import DocumentAnalyticData

class TestDocumentAnalyticData(unittest.TestCase):
    """DocumentAnalyticData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentAnalyticData:
        """Test DocumentAnalyticData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DocumentAnalyticData`
        """
        model = DocumentAnalyticData()
        if include_optional:
            return DocumentAnalyticData(
                auto_categories = [
                    openapi_client.models.auto_category.AutoCategory(
                        categories = [
                            openapi_client.models.sub_category.SubCategory(
                                strength_score = 1.337, 
                                title = '', 
                                type = '', )
                            ], 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        strength_score = 1.337, 
                        title = '', 
                        type = '', )
                    ],
                config_id = '',
                details = [
                    openapi_client.models.details.Details(
                        is_imperative = True, 
                        is_polar = True, 
                        words = [
                            openapi_client.models.word.Word(
                                is_negated = True, 
                                sentiment_score = 1.337, 
                                stemmed = '', 
                                tag = '', 
                                title = '', 
                                type = '', )
                            ], )
                    ],
                entities = [
                    openapi_client.models.entity.Entity(
                        count = 0, 
                        entity_type = '', 
                        label = '', 
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        negative_count = 0, 
                        neutral_count = 0, 
                        positive_count = 0, 
                        title = '', 
                        type = 'named', )
                    ],
                id = '',
                intentions = [
                    openapi_client.models.intention.Intention(
                        evidence_phrase = '', 
                        type = '', 
                        what = '', 
                        who = '', )
                    ],
                job_id = '',
                language = '',
                language_score = 1.337,
                model_sentiment = openapi_client.models.model_sentiment.ModelSentiment(
                    mixed_score = 1.337, 
                    model_name = '', 
                    negative_score = 1.337, 
                    neutral_score = 1.337, 
                    positive_score = 1.337, 
                    sentiment_polarity = 'negative', ),
                opinions = [
                    openapi_client.models.opinion.Opinion(
                        quotation = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        speaker = 1.337, 
                        topic = '', 
                        type = 'named', )
                    ],
                phrases = [
                    openapi_client.models.phrase.Phrase(
                        intensifying_phrase = '', 
                        is_intensified = True, 
                        is_negated = True, 
                        negating_phrase = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = '', )
                    ],
                relations = [
                    openapi_client.models.relation.Relation(
                        confidence_score = 1.337, 
                        entities = [
                            openapi_client.models.relation_entity.RelationEntity(
                                entity_type = '', 
                                title = '', )
                            ], 
                        extra = '', 
                        relation_type = '', 
                        type = 'named', )
                    ],
                sentiment_polarity = 'negative',
                sentiment_score = 1.337,
                source_text = '',
                status = 'queued',
                summary = '',
                taxonomy = [
                    openapi_client.models.topic.Topic(
                        hitcount = 0, 
                        id = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = 'concept', )
                    ],
                themes = [
                    openapi_client.models.theme.Theme(
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        normalized = '', 
                        phrases_count = 0, 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        stemmed = '', 
                        themes_count = 0, 
                        title = '', )
                    ],
                topics = [
                    openapi_client.models.topic.Topic(
                        hitcount = 0, 
                        id = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = 'concept', )
                    ]
            )
        else:
            return DocumentAnalyticData(
                auto_categories = [
                    openapi_client.models.auto_category.AutoCategory(
                        categories = [
                            openapi_client.models.sub_category.SubCategory(
                                strength_score = 1.337, 
                                title = '', 
                                type = '', )
                            ], 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        strength_score = 1.337, 
                        title = '', 
                        type = '', )
                    ],
                config_id = '',
                details = [
                    openapi_client.models.details.Details(
                        is_imperative = True, 
                        is_polar = True, 
                        words = [
                            openapi_client.models.word.Word(
                                is_negated = True, 
                                sentiment_score = 1.337, 
                                stemmed = '', 
                                tag = '', 
                                title = '', 
                                type = '', )
                            ], )
                    ],
                entities = [
                    openapi_client.models.entity.Entity(
                        count = 0, 
                        entity_type = '', 
                        label = '', 
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        negative_count = 0, 
                        neutral_count = 0, 
                        positive_count = 0, 
                        title = '', 
                        type = 'named', )
                    ],
                id = '',
                intentions = [
                    openapi_client.models.intention.Intention(
                        evidence_phrase = '', 
                        type = '', 
                        what = '', 
                        who = '', )
                    ],
                job_id = '',
                language = '',
                language_score = 1.337,
                model_sentiment = openapi_client.models.model_sentiment.ModelSentiment(
                    mixed_score = 1.337, 
                    model_name = '', 
                    negative_score = 1.337, 
                    neutral_score = 1.337, 
                    positive_score = 1.337, 
                    sentiment_polarity = 'negative', ),
                opinions = [
                    openapi_client.models.opinion.Opinion(
                        quotation = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        speaker = 1.337, 
                        topic = '', 
                        type = 'named', )
                    ],
                phrases = [
                    openapi_client.models.phrase.Phrase(
                        intensifying_phrase = '', 
                        is_intensified = True, 
                        is_negated = True, 
                        negating_phrase = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = '', )
                    ],
                relations = [
                    openapi_client.models.relation.Relation(
                        confidence_score = 1.337, 
                        entities = [
                            openapi_client.models.relation_entity.RelationEntity(
                                entity_type = '', 
                                title = '', )
                            ], 
                        extra = '', 
                        relation_type = '', 
                        type = 'named', )
                    ],
                sentiment_polarity = 'negative',
                sentiment_score = 1.337,
                source_text = '',
                status = 'queued',
                summary = '',
                taxonomy = [
                    openapi_client.models.topic.Topic(
                        hitcount = 0, 
                        id = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = 'concept', )
                    ],
                themes = [
                    openapi_client.models.theme.Theme(
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        normalized = '', 
                        phrases_count = 0, 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        stemmed = '', 
                        themes_count = 0, 
                        title = '', )
                    ],
                topics = [
                    openapi_client.models.topic.Topic(
                        hitcount = 0, 
                        id = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = 'concept', )
                    ],
        )
        """

    def testDocumentAnalyticData(self):
        """Test DocumentAnalyticData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.collection_analytic_data import CollectionAnalyticData

class TestCollectionAnalyticData(unittest.TestCase):
    """CollectionAnalyticData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CollectionAnalyticData:
        """Test CollectionAnalyticData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CollectionAnalyticData`
        """
        model = CollectionAnalyticData()
        if include_optional:
            return CollectionAnalyticData(
                config_id = '',
                entities = [
                    openapi_client.models.entity.Entity(
                        count = 0, 
                        entity_type = '', 
                        label = '', 
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        negative_count = 0, 
                        neutral_count = 0, 
                        positive_count = 0, 
                        title = '', 
                        type = 'named', )
                    ],
                facets = [
                    openapi_client.models.facet.Facet(
                        attributes = [
                            openapi_client.models.attribute.Attribute(
                                count = 0, 
                                label = '', 
                                mentions = [
                                    openapi_client.models.mention.Mention(
                                        is_negated = True, 
                                        label = '', 
                                        locations = [
                                            openapi_client.models.location.Location(
                                                index = 56, 
                                                length = 56, 
                                                offset = 56, )
                                            ], 
                                        negating_phrase = '', )
                                    ], )
                            ], 
                        count = 0, 
                        label = '', 
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        negative_count = 0, 
                        neutral_count = 0, 
                        positive_count = 0, )
                    ],
                id = '',
                job_id = '',
                status = 'queued',
                tag = '',
                taxonomy = [
                    openapi_client.models.topic.Topic(
                        hitcount = 0, 
                        id = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = 'concept', )
                    ],
                themes = [
                    openapi_client.models.theme.Theme(
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        normalized = '', 
                        phrases_count = 0, 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        stemmed = '', 
                        themes_count = 0, 
                        title = '', )
                    ],
                topics = [
                    openapi_client.models.topic.Topic(
                        hitcount = 0, 
                        id = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = 'concept', )
                    ]
            )
        else:
            return CollectionAnalyticData(
                config_id = '',
                entities = [
                    openapi_client.models.entity.Entity(
                        count = 0, 
                        entity_type = '', 
                        label = '', 
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        negative_count = 0, 
                        neutral_count = 0, 
                        positive_count = 0, 
                        title = '', 
                        type = 'named', )
                    ],
                facets = [
                    openapi_client.models.facet.Facet(
                        attributes = [
                            openapi_client.models.attribute.Attribute(
                                count = 0, 
                                label = '', 
                                mentions = [
                                    openapi_client.models.mention.Mention(
                                        is_negated = True, 
                                        label = '', 
                                        locations = [
                                            openapi_client.models.location.Location(
                                                index = 56, 
                                                length = 56, 
                                                offset = 56, )
                                            ], 
                                        negating_phrase = '', )
                                    ], )
                            ], 
                        count = 0, 
                        label = '', 
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        negative_count = 0, 
                        neutral_count = 0, 
                        positive_count = 0, )
                    ],
                id = '',
                job_id = '',
                status = 'queued',
                tag = '',
                taxonomy = [
                    openapi_client.models.topic.Topic(
                        hitcount = 0, 
                        id = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = 'concept', )
                    ],
                themes = [
                    openapi_client.models.theme.Theme(
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], 
                        normalized = '', 
                        phrases_count = 0, 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        stemmed = '', 
                        themes_count = 0, 
                        title = '', )
                    ],
                topics = [
                    openapi_client.models.topic.Topic(
                        hitcount = 0, 
                        id = '', 
                        sentiment_polarity = 'negative', 
                        sentiment_score = 1.337, 
                        title = '', 
                        type = 'concept', )
                    ],
        )
        """

    def testCollectionAnalyticData(self):
        """Test CollectionAnalyticData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

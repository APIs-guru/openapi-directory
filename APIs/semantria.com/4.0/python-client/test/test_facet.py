# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.facet import Facet

class TestFacet(unittest.TestCase):
    """Facet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Facet:
        """Test Facet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Facet`
        """
        model = Facet()
        if include_optional:
            return Facet(
                attributes = [
                    openapi_client.models.attribute.Attribute(
                        count = 0, 
                        label = '', 
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], )
                    ],
                count = 0,
                label = '',
                mentions = [
                    openapi_client.models.mention.Mention(
                        is_negated = True, 
                        label = '', 
                        locations = [
                            openapi_client.models.location.Location(
                                index = 56, 
                                length = 56, 
                                offset = 56, )
                            ], 
                        negating_phrase = '', )
                    ],
                negative_count = 0,
                neutral_count = 0,
                positive_count = 0
            )
        else:
            return Facet(
                attributes = [
                    openapi_client.models.attribute.Attribute(
                        count = 0, 
                        label = '', 
                        mentions = [
                            openapi_client.models.mention.Mention(
                                is_negated = True, 
                                label = '', 
                                locations = [
                                    openapi_client.models.location.Location(
                                        index = 56, 
                                        length = 56, 
                                        offset = 56, )
                                    ], 
                                negating_phrase = '', )
                            ], )
                    ],
                count = 0,
                label = '',
                mentions = [
                    openapi_client.models.mention.Mention(
                        is_negated = True, 
                        label = '', 
                        locations = [
                            openapi_client.models.location.Location(
                                index = 56, 
                                length = 56, 
                                offset = 56, )
                            ], 
                        negating_phrase = '', )
                    ],
                negative_count = 0,
                neutral_count = 0,
                positive_count = 0,
        )
        """

    def testFacet(self):
        """Test Facet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.statistic_configuration import StatisticConfiguration
from typing import Optional, Set
from typing_extensions import Self

class Statistic(BaseModel):
    """
    Statistic
    """ # noqa: E501
    calls_data: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of data API calls made. These affect you API balance")
    calls_polling: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of polling API calls made. These do not affect API balance")
    calls_settings: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of settings API calls made. These do not affect API balance")
    colls_documents: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of documents that have been queued into collections")
    colls_failed: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of collections that have failed to be processed")
    colls_processed: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total numbers of collections that have been successfully processed")
    colls_responded: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of successfully processed collections that have been returned")
    configurations: List[StatisticConfiguration] = Field(description="Includes statistics per specific configuration")
    docs_failed: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of documents that have failed to be processed")
    docs_processed: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of documents that have been successfully processed")
    docs_responded: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of successfully processed documents that have been returned")
    latest_used_app: StrictStr = Field(description="The latest application that used the API on this account")
    name: StrictStr = Field(description="Semantria subscriber name. Usually email")
    overall_batches: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of queued batches of texts processed")
    overall_calls: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of API calls made")
    overall_docs: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of documents that have been queued")
    overall_exceeded: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of documents that have exceeded the favorable (suggested) limit")
    overall_texts: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of texts processed")
    overcall_colls: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total numbers of collections that have been queued")
    status: StrictStr = Field(description="Semantria subscriber status. Can be active, expired, disabled, etc")
    used_apps: StrictStr = Field(description="A list of all the applications that have used the API on this account")
    __properties: ClassVar[List[str]] = ["calls_data", "calls_polling", "calls_settings", "colls_documents", "colls_failed", "colls_processed", "colls_responded", "configurations", "docs_failed", "docs_processed", "docs_responded", "latest_used_app", "name", "overall_batches", "overall_calls", "overall_docs", "overall_exceeded", "overall_texts", "overcall_colls", "status", "used_apps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Statistic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in configurations (list)
        _items = []
        if self.configurations:
            for _item_configurations in self.configurations:
                if _item_configurations:
                    _items.append(_item_configurations.to_dict())
            _dict['configurations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Statistic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calls_data": obj.get("calls_data"),
            "calls_polling": obj.get("calls_polling"),
            "calls_settings": obj.get("calls_settings"),
            "colls_documents": obj.get("colls_documents"),
            "colls_failed": obj.get("colls_failed"),
            "colls_processed": obj.get("colls_processed"),
            "colls_responded": obj.get("colls_responded"),
            "configurations": [StatisticConfiguration.from_dict(_item) for _item in obj["configurations"]] if obj.get("configurations") is not None else None,
            "docs_failed": obj.get("docs_failed"),
            "docs_processed": obj.get("docs_processed"),
            "docs_responded": obj.get("docs_responded"),
            "latest_used_app": obj.get("latest_used_app"),
            "name": obj.get("name"),
            "overall_batches": obj.get("overall_batches"),
            "overall_calls": obj.get("overall_calls"),
            "overall_docs": obj.get("overall_docs"),
            "overall_exceeded": obj.get("overall_exceeded"),
            "overall_texts": obj.get("overall_texts"),
            "overcall_colls": obj.get("overcall_colls"),
            "status": obj.get("status"),
            "used_apps": obj.get("used_apps")
        })
        return _obj



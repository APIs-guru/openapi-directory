# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionBillingSection(BaseModel):
    """
    SubscriptionBillingSection
    """ # noqa: E501
    app_seats_allocated: Annotated[int, Field(strict=True, ge=0)] = Field(description="Number of allocated application cells permitted to work with the API")
    app_seats_permitted: Annotated[int, Field(strict=True, ge=0)] = Field(description="Number of permitted application to work with the same API account")
    data_calls_balance: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents actual value of remained data API calls")
    data_calls_limit: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents the limit of data API calls per \"data_calls_limit_interval\" value")
    data_calls_limit_interval: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents an interval for the \"data_calls_limit\" value of current subscription")
    docs_balance: Annotated[int, Field(strict=True, ge=0)] = Field(description="Current transaction balance. Applicable for pay-as-you-go subscriptions only")
    docs_limit: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents the transactions limit per \"docs_limit_interval\" value")
    docs_limit_interval: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents the timeframe for the \"docs_limit\" value of current subscription")
    docs_suggested: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents the amount of favorable documents suggested for throughput subscriptions")
    docs_suggested_interval: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents the timeframe for the “docs_suggested” value of the current subscription")
    expiration_date: StrictStr = Field(description="Expiration date of current subscription. Defined as a Unix time stamp")
    limit_type: StrictStr = Field(description="Subscription type can have either pay-as-you-go or throughput value")
    polling_calls_balance: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents actual value of remained polling API calls")
    polling_calls_limit: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents the limit of polling API calls per \"polling_calls_limit_interval\" value")
    polling_calls_limit_interval: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents an interval for the \"polling_calls_limit\" value of current subscription")
    priority: StrictStr = Field(description="Processing priority of current subscriber. Can have low, normal or high value")
    settings_calls_balance: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents actual value of remained settings API calls")
    settings_calls_limit: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents the limit of settings API calls per \"settings_calls_limit_interval\" value")
    settings_calls_limit_interval: Annotated[int, Field(strict=True, ge=0)] = Field(description="Represents an interval for the \"settings_calls_limit\" value of current subscription")
    __properties: ClassVar[List[str]] = ["app_seats_allocated", "app_seats_permitted", "data_calls_balance", "data_calls_limit", "data_calls_limit_interval", "docs_balance", "docs_limit", "docs_limit_interval", "docs_suggested", "docs_suggested_interval", "expiration_date", "limit_type", "polling_calls_balance", "polling_calls_limit", "polling_calls_limit_interval", "priority", "settings_calls_balance", "settings_calls_limit", "settings_calls_limit_interval"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionBillingSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionBillingSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_seats_allocated": obj.get("app_seats_allocated"),
            "app_seats_permitted": obj.get("app_seats_permitted"),
            "data_calls_balance": obj.get("data_calls_balance"),
            "data_calls_limit": obj.get("data_calls_limit"),
            "data_calls_limit_interval": obj.get("data_calls_limit_interval"),
            "docs_balance": obj.get("docs_balance"),
            "docs_limit": obj.get("docs_limit"),
            "docs_limit_interval": obj.get("docs_limit_interval"),
            "docs_suggested": obj.get("docs_suggested"),
            "docs_suggested_interval": obj.get("docs_suggested_interval"),
            "expiration_date": obj.get("expiration_date"),
            "limit_type": obj.get("limit_type"),
            "polling_calls_balance": obj.get("polling_calls_balance"),
            "polling_calls_limit": obj.get("polling_calls_limit"),
            "polling_calls_limit_interval": obj.get("polling_calls_limit_interval"),
            "priority": obj.get("priority"),
            "settings_calls_balance": obj.get("settings_calls_balance"),
            "settings_calls_limit": obj.get("settings_calls_limit"),
            "settings_calls_limit_interval": obj.get("settings_calls_limit_interval")
        })
        return _obj



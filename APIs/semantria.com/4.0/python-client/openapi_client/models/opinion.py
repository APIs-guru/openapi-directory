# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class Opinion(BaseModel):
    """
    Opinion
    """ # noqa: E501
    quotation: StrictStr = Field(description="The text of the expressed opinion")
    sentiment_polarity: StrictStr = Field(description="Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"")
    sentiment_score: Union[StrictFloat, StrictInt] = Field(description="The sentiment score associated with the opinion")
    speaker: Union[StrictFloat, StrictInt] = Field(description="An entity title identifying the author of the opinion")
    topic: StrictStr = Field(description="An entity title identifying the subject of the opinion, if applicable")
    type: StrictStr = Field(description="Type of opinion according to extracted entity")
    __properties: ClassVar[List[str]] = ["quotation", "sentiment_polarity", "sentiment_score", "speaker", "topic", "type"]

    @field_validator('sentiment_polarity')
    def sentiment_polarity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['negative', 'positive', 'neutral']):
            raise ValueError("must be one of enum values ('negative', 'positive', 'neutral')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['named', 'user']):
            raise ValueError("must be one of enum values ('named', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Opinion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Opinion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quotation": obj.get("quotation"),
            "sentiment_polarity": obj.get("sentiment_polarity"),
            "sentiment_score": obj.get("sentiment_score"),
            "speaker": obj.get("speaker"),
            "topic": obj.get("topic"),
            "type": obj.get("type")
        })
        return _obj



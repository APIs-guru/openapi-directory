# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.auto_category import AutoCategory
from openapi_client.models.details import Details
from openapi_client.models.entity import Entity
from openapi_client.models.intention import Intention
from openapi_client.models.model_sentiment import ModelSentiment
from openapi_client.models.opinion import Opinion
from openapi_client.models.phrase import Phrase
from openapi_client.models.relation import Relation
from openapi_client.models.theme import Theme
from openapi_client.models.topic import Topic
from typing import Optional, Set
from typing_extensions import Self

class DocumentAnalyticData(BaseModel):
    """
    DocumentAnalyticData
    """ # noqa: E501
    auto_categories: List[AutoCategory] = Field(description="Auto-generated categories applicable for the document")
    config_id: StrictStr = Field(description="Unique configuration identifier. Usually 36 alphanumeric characters")
    details: List[Details] = Field(description="Returns sentences from the original document with POS tags within")
    entities: List[Entity] = Field(description="Returns the named entities and user defined entities from the text")
    id: StrictStr = Field(description="Unique document identifier. Can be up to 36 alphanumeric characters")
    intentions: List[Intention] = Field(description="Returns intentions list detected by the engine")
    job_id: StrictStr = Field(description="Specific marker of a job document belongs to, can be used for documents ordering on client side")
    language: StrictStr = Field(description="Determined language of source text")
    language_score: Union[StrictFloat, StrictInt] = Field(description="The percentage score of the best match of language among detected languages")
    model_sentiment: ModelSentiment
    opinions: List[Opinion] = Field(description="Returns the list of opinions extracted from the source text")
    phrases: List[Phrase] = Field(description="Returns sentiment-bearing phrases of the document")
    relations: List[Relation] = Field(description="Returns relations which represent a connection between one or more Entity objects")
    sentiment_polarity: StrictStr = Field(description="Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"")
    sentiment_score: Union[StrictFloat, StrictInt] = Field(description="A sentiment analysis of the document text")
    source_text: StrictStr = Field(description="Original source text passed by client for this document")
    status: StrictStr = Field(description="Status of the document")
    summary: StrictStr = Field(description="A summary of the document text")
    taxonomy: List[Topic] = Field(description="Returns the taxonomy determined for the text")
    themes: List[Theme] = Field(description="Returns themes of the document")
    topics: List[Topic] = Field(description="Returns the concept and query defined topics determined for the text")
    __properties: ClassVar[List[str]] = ["auto_categories", "config_id", "details", "entities", "id", "intentions", "job_id", "language", "language_score", "model_sentiment", "opinions", "phrases", "relations", "sentiment_polarity", "sentiment_score", "source_text", "status", "summary", "taxonomy", "themes", "topics"]

    @field_validator('sentiment_polarity')
    def sentiment_polarity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['negative', 'positive', 'neutral']):
            raise ValueError("must be one of enum values ('negative', 'positive', 'neutral')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['queued', 'processed', 'failed']):
            raise ValueError("must be one of enum values ('queued', 'processed', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentAnalyticData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in auto_categories (list)
        _items = []
        if self.auto_categories:
            for _item_auto_categories in self.auto_categories:
                if _item_auto_categories:
                    _items.append(_item_auto_categories.to_dict())
            _dict['auto_categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item_details in self.details:
                if _item_details:
                    _items.append(_item_details.to_dict())
            _dict['details'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in intentions (list)
        _items = []
        if self.intentions:
            for _item_intentions in self.intentions:
                if _item_intentions:
                    _items.append(_item_intentions.to_dict())
            _dict['intentions'] = _items
        # override the default output from pydantic by calling `to_dict()` of model_sentiment
        if self.model_sentiment:
            _dict['model_sentiment'] = self.model_sentiment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in opinions (list)
        _items = []
        if self.opinions:
            for _item_opinions in self.opinions:
                if _item_opinions:
                    _items.append(_item_opinions.to_dict())
            _dict['opinions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phrases (list)
        _items = []
        if self.phrases:
            for _item_phrases in self.phrases:
                if _item_phrases:
                    _items.append(_item_phrases.to_dict())
            _dict['phrases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relations (list)
        _items = []
        if self.relations:
            for _item_relations in self.relations:
                if _item_relations:
                    _items.append(_item_relations.to_dict())
            _dict['relations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taxonomy (list)
        _items = []
        if self.taxonomy:
            for _item_taxonomy in self.taxonomy:
                if _item_taxonomy:
                    _items.append(_item_taxonomy.to_dict())
            _dict['taxonomy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in themes (list)
        _items = []
        if self.themes:
            for _item_themes in self.themes:
                if _item_themes:
                    _items.append(_item_themes.to_dict())
            _dict['themes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in topics (list)
        _items = []
        if self.topics:
            for _item_topics in self.topics:
                if _item_topics:
                    _items.append(_item_topics.to_dict())
            _dict['topics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentAnalyticData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_categories": [AutoCategory.from_dict(_item) for _item in obj["auto_categories"]] if obj.get("auto_categories") is not None else None,
            "config_id": obj.get("config_id"),
            "details": [Details.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None,
            "entities": [Entity.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "id": obj.get("id"),
            "intentions": [Intention.from_dict(_item) for _item in obj["intentions"]] if obj.get("intentions") is not None else None,
            "job_id": obj.get("job_id"),
            "language": obj.get("language"),
            "language_score": obj.get("language_score"),
            "model_sentiment": ModelSentiment.from_dict(obj["model_sentiment"]) if obj.get("model_sentiment") is not None else None,
            "opinions": [Opinion.from_dict(_item) for _item in obj["opinions"]] if obj.get("opinions") is not None else None,
            "phrases": [Phrase.from_dict(_item) for _item in obj["phrases"]] if obj.get("phrases") is not None else None,
            "relations": [Relation.from_dict(_item) for _item in obj["relations"]] if obj.get("relations") is not None else None,
            "sentiment_polarity": obj.get("sentiment_polarity"),
            "sentiment_score": obj.get("sentiment_score"),
            "source_text": obj.get("source_text"),
            "status": obj.get("status"),
            "summary": obj.get("summary"),
            "taxonomy": [Topic.from_dict(_item) for _item in obj["taxonomy"]] if obj.get("taxonomy") is not None else None,
            "themes": [Theme.from_dict(_item) for _item in obj["themes"]] if obj.get("themes") is not None else None,
            "topics": [Topic.from_dict(_item) for _item in obj["topics"]] if obj.get("topics") is not None else None
        })
        return _obj



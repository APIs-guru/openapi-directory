# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionFeatureSectionDocument(BaseModel):
    """
    SubscriptionFeatureSectionDocument
    """ # noqa: E501
    auto_categories: StrictBool = Field(description="Indicates whether auto categories feature is allowed or not")
    concept_topics: StrictBool = Field(description="Indicates whether concept topics are allowed or not")
    entity_themes: StrictBool = Field(description="Indicates whether entity themes feature is allowed or not")
    intentions: StrictBool = Field(description="Indicates whether intentions feature is allowed or not.")
    language_detection: StrictBool = Field(description="Indicates whether language detection feature is allowed or not")
    mentions: StrictBool = Field(description="Indicates whether mentions for entities and themes are allowed or not")
    model_sentiment: StrictBool = Field(description="Indicates whether model-based sentiment feature is allowed or not")
    named_entities: StrictBool = Field(description="Indicates whether named entities feature is allowed or not")
    named_relations: StrictBool = Field(description="Indicates whether relations for named entities are allowed or not")
    opinions: StrictBool = Field(description="Indicates whether opinions feature is allowed or not")
    phrases_detection: StrictBool = Field(description="Indicates whether possible phrases detection feature is allowed or not")
    pos_tagging: StrictBool = Field(description="Indicates whether part of speech tagging feature is allowed or not")
    query_topics: StrictBool = Field(description="Indicates whether query defined topics are allowed or not")
    sentiment_phrases: StrictBool = Field(description="Indicates whether sentiment-bearing phrases output is allowed or not")
    summary: StrictBool = Field(description="Indicates whether summarization feature is allowed or not")
    themes: StrictBool = Field(description="Indicates whether document themes feature is allowed or not")
    user_entities: StrictBool = Field(description="Indicates whether user entities feature is allowed or not")
    user_relations: StrictBool = Field(description="Indicates whether relations for user entities are allowed or not")
    __properties: ClassVar[List[str]] = ["auto_categories", "concept_topics", "entity_themes", "intentions", "language_detection", "mentions", "model_sentiment", "named_entities", "named_relations", "opinions", "phrases_detection", "pos_tagging", "query_topics", "sentiment_phrases", "summary", "themes", "user_entities", "user_relations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionFeatureSectionDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionFeatureSectionDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_categories": obj.get("auto_categories"),
            "concept_topics": obj.get("concept_topics"),
            "entity_themes": obj.get("entity_themes"),
            "intentions": obj.get("intentions"),
            "language_detection": obj.get("language_detection"),
            "mentions": obj.get("mentions"),
            "model_sentiment": obj.get("model_sentiment"),
            "named_entities": obj.get("named_entities"),
            "named_relations": obj.get("named_relations"),
            "opinions": obj.get("opinions"),
            "phrases_detection": obj.get("phrases_detection"),
            "pos_tagging": obj.get("pos_tagging"),
            "query_topics": obj.get("query_topics"),
            "sentiment_phrases": obj.get("sentiment_phrases"),
            "summary": obj.get("summary"),
            "themes": obj.get("themes"),
            "user_entities": obj.get("user_entities"),
            "user_relations": obj.get("user_relations")
        })
        return _obj



# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from openapi_client.models.configuration_collection_section import ConfigurationCollectionSection
from openapi_client.models.configuration_document_section import ConfigurationDocumentSection
from typing import Optional, Set
from typing_extensions import Self

class ConfigurationInsertVersion(BaseModel):
    """
    ConfigurationInsertVersion
    """ # noqa: E501
    auto_response: StrictBool = Field(description="Defines whether or not the service should respond with processed results automatically. Default: false")
    callback: StrictStr = Field(description="Defines a callback URL for automatic data responding")
    categories_threshold: Union[StrictFloat, StrictInt] = Field(description="Defines low threshold for strength score of user categories to be reported in the output. Default: 0.45")
    chars_threshold: Annotated[int, Field(le=100, strict=True, ge=0)] = Field(description="Defines the threshold for alphanumeric characters in the text in percent. Default: 80")
    collection: ConfigurationCollectionSection
    document: ConfigurationDocumentSection
    entities_threshold: StrictInt = Field(description="Defines low threshold for evidence score of named and user entities to be reported in the output.")
    is_primary: StrictBool = Field(description="Identifies whether the current configuration is primary or not. Default: false")
    language: StrictStr = Field(description="Defines target language that will be used for task processing. Default: English")
    name: StrictStr = Field(description="Configuration name")
    one_sentence: StrictBool = Field(description="Leads the service to consider the entire document as single sentence. Default: false")
    process_html: StrictBool = Field(description="Leads the service to clean HTML tags before processing. Default: false")
    __properties: ClassVar[List[str]] = ["auto_response", "callback", "categories_threshold", "chars_threshold", "collection", "document", "entities_threshold", "is_primary", "language", "name", "one_sentence", "process_html"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigurationInsertVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of collection
        if self.collection:
            _dict['collection'] = self.collection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document
        if self.document:
            _dict['document'] = self.document.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigurationInsertVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_response": obj.get("auto_response"),
            "callback": obj.get("callback"),
            "categories_threshold": obj.get("categories_threshold"),
            "chars_threshold": obj.get("chars_threshold"),
            "collection": ConfigurationCollectionSection.from_dict(obj["collection"]) if obj.get("collection") is not None else None,
            "document": ConfigurationDocumentSection.from_dict(obj["document"]) if obj.get("document") is not None else None,
            "entities_threshold": obj.get("entities_threshold"),
            "is_primary": obj.get("is_primary"),
            "language": obj.get("language"),
            "name": obj.get("name"),
            "one_sentence": obj.get("one_sentence"),
            "process_html": obj.get("process_html")
        })
        return _obj



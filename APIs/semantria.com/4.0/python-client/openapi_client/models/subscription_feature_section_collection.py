# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionFeatureSectionCollection(BaseModel):
    """
    SubscriptionFeatureSectionCollection
    """ # noqa: E501
    concept_topics: StrictBool = Field(description="Indicates whether concept topics are allowed or not")
    facets: StrictBool = Field(description="Indicates whether facets extraction feature is allowed or not")
    mentions: StrictBool = Field(description="Indicates whether mentions are allowed for facets and attributes or not")
    named_entities: StrictBool = Field(description="Indicates whether named entities feature is allowed or not")
    query_topics: StrictBool = Field(description="Indicates whether query defined topics are allowed or not")
    themes: StrictBool = Field(description="Indicates whether themes extraction feature is allowed or not")
    user_entities: StrictBool = Field(description="Indicates whether user entities feature is allowed or not")
    __properties: ClassVar[List[str]] = ["concept_topics", "facets", "mentions", "named_entities", "query_topics", "themes", "user_entities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionFeatureSectionCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionFeatureSectionCollection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "concept_topics": obj.get("concept_topics"),
            "facets": obj.get("facets"),
            "mentions": obj.get("mentions"),
            "named_entities": obj.get("named_entities"),
            "query_topics": obj.get("query_topics"),
            "themes": obj.get("themes"),
            "user_entities": obj.get("user_entities")
        })
        return _obj



# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class FeatureDetailedModeSection(BaseModel):
    """
    FeatureDetailedModeSection
    """ # noqa: E501
    auto_categories: StrictBool = Field(description="Represents whether auto-categories of entities supported for certain language or not")
    entity_mentions: StrictBool = Field(description="Represents whether mentions of entities supported for certain language or not")
    entity_opinions: StrictBool = Field(description="Represents whether opinions of entities supported for certain language or not")
    entity_relations: StrictBool = Field(description="Represents whether relations of entities supported for certain language or not")
    entity_themes: StrictBool = Field(description="Represents whether themes of entities supported for certain language or not")
    intentions: StrictBool = Field(description="Represents whether intentions detection supported for certain language or not")
    language_detection: StrictBool = Field(description="Represents whether language detection feature supported or not")
    model_sentiment: StrictBool = Field(description="Represents whether model-based sentiment supported for certain language or not")
    named_entities: StrictBool = Field(description="Represents whether named entities extraction supported for certain language or not")
    pos_tagging: StrictBool = Field(description="Represents whether POS tagging supported for certain language or not")
    queries: StrictBool = Field(description="Represents whether queries of entities supported for certain language or not")
    sentiment: StrictBool = Field(description="Represents whether sentiment detection supported for certain language or not")
    sentiment_phrases: StrictBool = Field(description="Represents whether sentiment phrases detection supported for certain language or not")
    summarization: StrictBool = Field(description="Represents whether summarization supported for certain language or not")
    taxonomy: StrictBool = Field(description="Represents whether taxonomy feature supported for certain language or not")
    theme_mentions: StrictBool = Field(description="Represents whether mentions of themes supported for certain language or not")
    themes: StrictBool = Field(description="Represents whether themes extraction supported for certain language or not")
    user_categories: StrictBool = Field(description="Represents whether user categories of entities supported for certain language or not")
    user_entities: StrictBool = Field(description="Represents whether user entities extraction supported for certain language or not")
    __properties: ClassVar[List[str]] = ["auto_categories", "entity_mentions", "entity_opinions", "entity_relations", "entity_themes", "intentions", "language_detection", "model_sentiment", "named_entities", "pos_tagging", "queries", "sentiment", "sentiment_phrases", "summarization", "taxonomy", "theme_mentions", "themes", "user_categories", "user_entities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureDetailedModeSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureDetailedModeSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_categories": obj.get("auto_categories"),
            "entity_mentions": obj.get("entity_mentions"),
            "entity_opinions": obj.get("entity_opinions"),
            "entity_relations": obj.get("entity_relations"),
            "entity_themes": obj.get("entity_themes"),
            "intentions": obj.get("intentions"),
            "language_detection": obj.get("language_detection"),
            "model_sentiment": obj.get("model_sentiment"),
            "named_entities": obj.get("named_entities"),
            "pos_tagging": obj.get("pos_tagging"),
            "queries": obj.get("queries"),
            "sentiment": obj.get("sentiment"),
            "sentiment_phrases": obj.get("sentiment_phrases"),
            "summarization": obj.get("summarization"),
            "taxonomy": obj.get("taxonomy"),
            "theme_mentions": obj.get("theme_mentions"),
            "themes": obj.get("themes"),
            "user_categories": obj.get("user_categories"),
            "user_entities": obj.get("user_entities")
        })
        return _obj



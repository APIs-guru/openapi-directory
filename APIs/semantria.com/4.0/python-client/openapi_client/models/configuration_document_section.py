# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ConfigurationDocumentSection(BaseModel):
    """
    ConfigurationDocumentSection
    """ # noqa: E501
    auto_categories_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of auto categories the service responds. Default: 5")
    concept_topics_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of concept topics the service responds. Default: 5")
    detect_language: StrictBool = Field(description="Switches on language detection feature. Default: true")
    entity_themes_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of entity themes the service responds. Default: 0")
    intentions: StrictBool = Field(description="Switches on intentions detection feature. Default: false")
    model_sentiment: StrictBool = Field(description="Switches on/off model-based sentiment feature. Default: false")
    named_entities_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of named entities the service responds. Default: 5")
    named_mentions_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of named entity related mentions. Default: 0")
    named_opinions_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of named entity opinions the service responds. Default: 0")
    named_relations_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of named entity relations the service responds. Default: 0")
    phrases_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of responded sentiment-bearing phrases for document. Default: 0")
    pos_types: StrictStr = Field(description="Defines parts-of-speech which will be responded by the server")
    possible_phrases_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of responded possible phrases which may affect on sentiment score extraction. Default: 0")
    query_topics_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of query topics the service responds. Default: 5")
    summary_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of sentences for the document summary feature. Default: 3")
    theme_mentions_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of document and entity related theme mentions. Default: 0")
    themes_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of document themes the service responds. Default: 0")
    user_entities_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of user entities the service responds. Default: 5")
    user_mentions_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of user entity related mentions. Default: 0")
    user_opinions_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of concept topics the service responds. Default: 0")
    user_relations_limit: Annotated[int, Field(le=20, strict=True, ge=0)] = Field(description="Limits the number of user entity relations the service responds. Default: 0")
    __properties: ClassVar[List[str]] = ["auto_categories_limit", "concept_topics_limit", "detect_language", "entity_themes_limit", "intentions", "model_sentiment", "named_entities_limit", "named_mentions_limit", "named_opinions_limit", "named_relations_limit", "phrases_limit", "pos_types", "possible_phrases_limit", "query_topics_limit", "summary_limit", "theme_mentions_limit", "themes_limit", "user_entities_limit", "user_mentions_limit", "user_opinions_limit", "user_relations_limit"]

    @field_validator('pos_types')
    def pos_types_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['All', 'Noun', 'Verb', 'Adjective', 'Determiner', 'Misc', 'Twitter', 'Chinese']):
            raise ValueError("must be one of enum values ('All', 'Noun', 'Verb', 'Adjective', 'Determiner', 'Misc', 'Twitter', 'Chinese')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigurationDocumentSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigurationDocumentSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_categories_limit": obj.get("auto_categories_limit"),
            "concept_topics_limit": obj.get("concept_topics_limit"),
            "detect_language": obj.get("detect_language"),
            "entity_themes_limit": obj.get("entity_themes_limit"),
            "intentions": obj.get("intentions"),
            "model_sentiment": obj.get("model_sentiment"),
            "named_entities_limit": obj.get("named_entities_limit"),
            "named_mentions_limit": obj.get("named_mentions_limit"),
            "named_opinions_limit": obj.get("named_opinions_limit"),
            "named_relations_limit": obj.get("named_relations_limit"),
            "phrases_limit": obj.get("phrases_limit"),
            "pos_types": obj.get("pos_types"),
            "possible_phrases_limit": obj.get("possible_phrases_limit"),
            "query_topics_limit": obj.get("query_topics_limit"),
            "summary_limit": obj.get("summary_limit"),
            "theme_mentions_limit": obj.get("theme_mentions_limit"),
            "themes_limit": obj.get("themes_limit"),
            "user_entities_limit": obj.get("user_entities_limit"),
            "user_mentions_limit": obj.get("user_mentions_limit"),
            "user_opinions_limit": obj.get("user_opinions_limit"),
            "user_relations_limit": obj.get("user_relations_limit")
        })
        return _obj



# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from openapi_client.models.mention import Mention
from typing import Optional, Set
from typing_extensions import Self

class Theme(BaseModel):
    """
    Theme
    """ # noqa: E501
    mentions: List[Mention] = Field(description="Returns the concept and query defined topics determined for the text")
    normalized: StrictStr = Field(description="The normalized form of the theme")
    phrases_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Count of sentiment-bearing phrases was used in calculating theme's sentiment")
    sentiment_polarity: StrictStr = Field(description="Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"")
    sentiment_score: Union[StrictFloat, StrictInt] = Field(description="Sentiment score for themeâ€™s sentences across the documents")
    stemmed: StrictStr = Field(description="The stemmed form of the theme")
    themes_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Count of themes across the documents that got rolled into this one")
    title: StrictStr = Field(description="The text of the theme across the documents")
    __properties: ClassVar[List[str]] = ["mentions", "normalized", "phrases_count", "sentiment_polarity", "sentiment_score", "stemmed", "themes_count", "title"]

    @field_validator('sentiment_polarity')
    def sentiment_polarity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['negative', 'positive', 'neutral']):
            raise ValueError("must be one of enum values ('negative', 'positive', 'neutral')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Theme from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mentions (list)
        _items = []
        if self.mentions:
            for _item_mentions in self.mentions:
                if _item_mentions:
                    _items.append(_item_mentions.to_dict())
            _dict['mentions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Theme from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mentions": [Mention.from_dict(_item) for _item in obj["mentions"]] if obj.get("mentions") is not None else None,
            "normalized": obj.get("normalized"),
            "phrases_count": obj.get("phrases_count"),
            "sentiment_polarity": obj.get("sentiment_polarity"),
            "sentiment_score": obj.get("sentiment_score"),
            "stemmed": obj.get("stemmed"),
            "themes_count": obj.get("themes_count"),
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from openapi_client.models.entity import Entity
from openapi_client.models.facet import Facet
from openapi_client.models.theme import Theme
from openapi_client.models.topic import Topic
from typing import Optional, Set
from typing_extensions import Self

class CollectionAnalyticData(BaseModel):
    """
    CollectionAnalyticData
    """ # noqa: E501
    config_id: StrictStr = Field(description="Unique configuration identifier. Usually 36 alphanumeric characters")
    entities: List[Entity] = Field(description="Returns the named entities and user defined entities from the text")
    facets: List[Facet] = Field(description="Returns the facets extracted across all documents in the collection")
    id: StrictStr = Field(description="Unique collection identifier. Can be up to 36 alphanumeric characters")
    job_id: StrictStr = Field(description="Specific marker of a job collection belongs to, can be used for collections ordering on client side.")
    status: StrictStr = Field(description="Status of the collection")
    tag: StrictStr = Field(description="Any text of up to 50 characters used like marker")
    taxonomy: List[Topic] = Field(description="Returns the taxonomy determined for the text")
    themes: List[Theme] = Field(description="Returns themes across the documents")
    topics: List[Topic] = Field(description="Returns the concept and query defined topics determined for the text")
    __properties: ClassVar[List[str]] = ["config_id", "entities", "facets", "id", "job_id", "status", "tag", "taxonomy", "themes", "topics"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['queued', 'processed', 'failed']):
            raise ValueError("must be one of enum values ('queued', 'processed', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectionAnalyticData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facets (list)
        _items = []
        if self.facets:
            for _item_facets in self.facets:
                if _item_facets:
                    _items.append(_item_facets.to_dict())
            _dict['facets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taxonomy (list)
        _items = []
        if self.taxonomy:
            for _item_taxonomy in self.taxonomy:
                if _item_taxonomy:
                    _items.append(_item_taxonomy.to_dict())
            _dict['taxonomy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in themes (list)
        _items = []
        if self.themes:
            for _item_themes in self.themes:
                if _item_themes:
                    _items.append(_item_themes.to_dict())
            _dict['themes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in topics (list)
        _items = []
        if self.topics:
            for _item_topics in self.topics:
                if _item_topics:
                    _items.append(_item_topics.to_dict())
            _dict['topics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectionAnalyticData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config_id": obj.get("config_id"),
            "entities": [Entity.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "facets": [Facet.from_dict(_item) for _item in obj["facets"]] if obj.get("facets") is not None else None,
            "id": obj.get("id"),
            "job_id": obj.get("job_id"),
            "status": obj.get("status"),
            "tag": obj.get("tag"),
            "taxonomy": [Topic.from_dict(_item) for _item in obj["taxonomy"]] if obj.get("taxonomy") is not None else None,
            "themes": [Theme.from_dict(_item) for _item in obj["themes"]] if obj.get("themes") is not None else None,
            "topics": [Topic.from_dict(_item) for _item in obj["topics"]] if obj.get("topics") is not None else None
        })
        return _obj



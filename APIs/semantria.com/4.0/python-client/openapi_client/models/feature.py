# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.feature_detailed_mode_section import FeatureDetailedModeSection
from openapi_client.models.feature_discovery_mode_section import FeatureDiscoveryModeSection
from openapi_client.models.feature_settings_section import FeatureSettingsSection
from openapi_client.models.feature_template_section import FeatureTemplateSection
from typing import Optional, Set
from typing_extensions import Self

class Feature(BaseModel):
    """
    Feature
    """ # noqa: E501
    detailed_mode: FeatureDetailedModeSection
    discovery_mode: FeatureDiscoveryModeSection
    html_processing: StrictBool = Field(description="Represents whether HTML processing supported for certain language or not")
    id: StrictStr = Field(description="Unique language identifier")
    language: StrictStr = Field(description="Represents language following options relevant to")
    one_sentence_mode: StrictBool = Field(description="Considers entire text as one sentence and uses optimized chunker for short content like tweets.")
    settings: FeatureSettingsSection
    templates: FeatureTemplateSection
    __properties: ClassVar[List[str]] = ["detailed_mode", "discovery_mode", "html_processing", "id", "language", "one_sentence_mode", "settings", "templates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Feature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detailed_mode
        if self.detailed_mode:
            _dict['detailed_mode'] = self.detailed_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discovery_mode
        if self.discovery_mode:
            _dict['discovery_mode'] = self.discovery_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of templates
        if self.templates:
            _dict['templates'] = self.templates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Feature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detailed_mode": FeatureDetailedModeSection.from_dict(obj["detailed_mode"]) if obj.get("detailed_mode") is not None else None,
            "discovery_mode": FeatureDiscoveryModeSection.from_dict(obj["discovery_mode"]) if obj.get("discovery_mode") is not None else None,
            "html_processing": obj.get("html_processing"),
            "id": obj.get("id"),
            "language": obj.get("language"),
            "one_sentence_mode": obj.get("one_sentence_mode"),
            "settings": FeatureSettingsSection.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "templates": FeatureTemplateSection.from_dict(obj["templates"]) if obj.get("templates") is not None else None
        })
        return _obj



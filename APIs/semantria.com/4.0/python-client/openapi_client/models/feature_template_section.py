# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class FeatureTemplateSection(BaseModel):
    """
    FeatureTemplateSection
    """ # noqa: E501
    config_id: StrictStr = Field(description="Unique identifier of configuration associated with the vertical pack. Required for cloning")
    description: StrictStr = Field(description="Verbal description of template features, belonging to domain area, etc.")
    id: StrictStr = Field(description="Unique document identifier. Can be up to 36 alphanumeric characters")
    is_free: StrictBool = Field(description="Shows whether Vertical pack is free or requires subscription")
    language: StrictStr = Field(description="The language supported by the vertical pack")
    name: StrictStr = Field(description="Name of the vertical pack")
    type: StrictStr = Field(description="The type of the vertical pack, can be either \"vertical-pack\" or \"language-default\"")
    version: StrictStr = Field(description="Version of the vertical pack, for versioning purposes.")
    __properties: ClassVar[List[str]] = ["config_id", "description", "id", "is_free", "language", "name", "type", "version"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['language-default', 'vertical-pack']):
            raise ValueError("must be one of enum values ('language-default', 'vertical-pack')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureTemplateSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureTemplateSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config_id": obj.get("config_id"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "is_free": obj.get("is_free"),
            "language": obj.get("language"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "version": obj.get("version")
        })
        return _obj



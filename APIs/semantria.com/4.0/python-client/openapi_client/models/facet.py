# coding: utf-8

"""
    Semantria

    Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.attribute import Attribute
from openapi_client.models.mention import Mention
from typing import Optional, Set
from typing_extensions import Self

class Facet(BaseModel):
    """
    Facet
    """ # noqa: E501
    attributes: List[Attribute] = Field(description="Returns the attributes associated with this facet")
    count: Annotated[int, Field(strict=True, ge=0)] = Field(description="The count of occurrences of the facet in the text")
    label: StrictStr = Field(description="The text of the facet")
    mentions: List[Mention] = Field(description="Returns genuine forms of facet mentioned across the documents")
    negative_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="The count of negative occurrences of the facet across the documents")
    neutral_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="The count of neutral occurrences of the facet across the documents")
    positive_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="The count of positive occurrences of the facet across the documents")
    __properties: ClassVar[List[str]] = ["attributes", "count", "label", "mentions", "negative_count", "neutral_count", "positive_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Facet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mentions (list)
        _items = []
        if self.mentions:
            for _item_mentions in self.mentions:
                if _item_mentions:
                    _items.append(_item_mentions.to_dict())
            _dict['mentions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Facet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": [Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "count": obj.get("count"),
            "label": obj.get("label"),
            "mentions": [Mention.from_dict(_item) for _item in obj["mentions"]] if obj.get("mentions") is not None else None,
            "negative_count": obj.get("negative_count"),
            "neutral_count": obj.get("neutral_count"),
            "positive_count": obj.get("positive_count")
        })
        return _obj



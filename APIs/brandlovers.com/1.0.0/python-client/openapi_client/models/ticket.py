# coding: utf-8

"""
    BrandLovers Marketplace API V1

    Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.customer_reference import CustomerReference
from openapi_client.models.metadata import Metadata
from typing import Optional, Set
from typing_extensions import Self

class Ticket(BaseModel):
    """
    Ticket
    """ # noqa: E501
    closed_at: Optional[datetime] = Field(default=None, description="Date-time when ticket was closed", alias="closedAt")
    created_at: Optional[datetime] = Field(default=None, description="Date time that ticket was created", alias="createdAt")
    customer: Optional[CustomerReference] = None
    description: Optional[StrictStr] = Field(default=None, description="Trouble ticked brief description")
    metadata: Optional[List[Metadata]] = None
    priority: Optional[StrictStr] = Field(default=None, description="Trouble ticket priority")
    sla: Optional[datetime] = Field(default=None, description="Date-time with a promisse for the customer when this ticket will be resolved")
    status: Optional[StrictStr] = Field(default=None, description="Trouble Ticket status. 'OPEN','CLOSED','REOPENED'")
    subject: Optional[StrictStr] = Field(default=None, description="Short one line title describing ticket.")
    ticket_id: Optional[StrictStr] = Field(default=None, description="Trouble Ticket unique identification Id", alias="ticketId")
    type: Optional[StrictStr] = Field(default=None, description="Trouble ticket type.")
    updated_at: Optional[datetime] = Field(default=None, description="Date-time with last update of this ticket", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["closedAt", "createdAt", "customer", "description", "metadata", "priority", "sla", "status", "subject", "ticketId", "type", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ticket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ticket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "closedAt": obj.get("closedAt"),
            "createdAt": obj.get("createdAt"),
            "customer": CustomerReference.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "description": obj.get("description"),
            "metadata": [Metadata.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "priority": obj.get("priority"),
            "sla": obj.get("sla"),
            "status": obj.get("status"),
            "subject": obj.get("subject"),
            "ticketId": obj.get("ticketId"),
            "type": obj.get("type"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



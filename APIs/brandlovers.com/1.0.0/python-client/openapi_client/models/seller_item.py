# coding: utf-8

"""
    BrandLovers Marketplace API V1

    Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.controlled_stock import ControlledStock
from openapi_client.models.dimensions import Dimensions
from openapi_client.models.gift_wrap import GiftWrap
from openapi_client.models.image import Image
from openapi_client.models.product_attribute import ProductAttribute
from openapi_client.models.product_price import ProductPrice
from openapi_client.models.product_reference import ProductReference
from openapi_client.models.product_site_reference import ProductSiteReference
from openapi_client.models.seller_item_status import SellerItemStatus
from typing import Optional, Set
from typing_extensions import Self

class SellerItem(BaseModel):
    """
    SellerItem
    """ # noqa: E501
    attributes: List[ProductAttribute]
    brand: StrictStr = Field(description="Brand name")
    dimensions: Dimensions
    gift_wrap: Optional[GiftWrap] = Field(default=None, alias="giftWrap")
    gtin: Optional[List[StrictStr]] = Field(default=None, description="Array of product EAN and/or ISBN and/or ASIN codes")
    images: List[Image] = Field(description="List of valid Product image URLs.")
    prices: List[ProductPrice] = Field(description="Price information for each marketplace that this product is listed")
    product: ProductReference
    sku_seller_id: StrictStr = Field(description="Unique Product Id (SKU) in the seller system", alias="skuSellerId")
    status: List[SellerItemStatus] = Field(description="Product status for each marketplace that this product is listed")
    stocks: List[ControlledStock] = Field(description="Invetory information for each marketplace that this product is listed")
    title: StrictStr = Field(description="Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace")
    urls: Optional[List[ProductSiteReference]] = Field(default=None, description="List of URLs where the product is listed for sale")
    __properties: ClassVar[List[str]] = ["attributes", "brand", "dimensions", "giftWrap", "gtin", "images", "prices", "product", "skuSellerId", "status", "stocks", "title", "urls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SellerItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift_wrap
        if self.gift_wrap:
            _dict['giftWrap'] = self.gift_wrap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item_prices in self.prices:
                if _item_prices:
                    _items.append(_item_prices.to_dict())
            _dict['prices'] = _items
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in status (list)
        _items = []
        if self.status:
            for _item_status in self.status:
                if _item_status:
                    _items.append(_item_status.to_dict())
            _dict['status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stocks (list)
        _items = []
        if self.stocks:
            for _item_stocks in self.stocks:
                if _item_stocks:
                    _items.append(_item_stocks.to_dict())
            _dict['stocks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in urls (list)
        _items = []
        if self.urls:
            for _item_urls in self.urls:
                if _item_urls:
                    _items.append(_item_urls.to_dict())
            _dict['urls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SellerItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": [ProductAttribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "brand": obj.get("brand"),
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "giftWrap": GiftWrap.from_dict(obj["giftWrap"]) if obj.get("giftWrap") is not None else None,
            "gtin": obj.get("gtin"),
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "prices": [ProductPrice.from_dict(_item) for _item in obj["prices"]] if obj.get("prices") is not None else None,
            "product": ProductReference.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "skuSellerId": obj.get("skuSellerId"),
            "status": [SellerItemStatus.from_dict(_item) for _item in obj["status"]] if obj.get("status") is not None else None,
            "stocks": [ControlledStock.from_dict(_item) for _item in obj["stocks"]] if obj.get("stocks") is not None else None,
            "title": obj.get("title"),
            "urls": [ProductSiteReference.from_dict(_item) for _item in obj["urls"]] if obj.get("urls") is not None else None
        })
        return _obj



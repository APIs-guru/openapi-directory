# coding: utf-8

"""
    BrandLovers Marketplace API V1

    Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Freight(BaseModel):
    """
    Freight
    """ # noqa: E501
    eta: Optional[datetime] = Field(default=None, description="Estimated time of arrival", alias="ETA")
    additional_info: StrictStr = Field(description="Aditional information for the courier", alias="additionalInfo")
    charged_amount: StrictInt = Field(description="Shipment cost. Must be informed in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. Same as $1,2345.67 must be informed solely as 1234567", alias="chargedAmount")
    cross_docking_time: StrictInt = Field(description="Time it will take to manufacture, prepare or setup this product. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer", alias="crossDockingTime")
    default_amount: StrictInt = Field(description="Default value of this shippment.", alias="defaultAmount")
    scheduled_period: Optional[StrictStr] = Field(default=None, description="Scheduled period", alias="scheduledPeriod")
    transit_time: StrictInt = Field(description="Deliver time in seconds. Time must be provided in seconds. For example 1 day should be informed as 86400. This time will be included in the product ETA informed to the customer", alias="transitTime")
    type: Optional[StrictStr] = Field(default=None, description="Freight type")
    __properties: ClassVar[List[str]] = ["ETA", "additionalInfo", "chargedAmount", "crossDockingTime", "defaultAmount", "scheduledPeriod", "transitTime", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Freight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Freight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ETA": obj.get("ETA"),
            "additionalInfo": obj.get("additionalInfo"),
            "chargedAmount": obj.get("chargedAmount"),
            "crossDockingTime": obj.get("crossDockingTime"),
            "defaultAmount": obj.get("defaultAmount"),
            "scheduledPeriod": obj.get("scheduledPeriod"),
            "transitTime": obj.get("transitTime"),
            "type": obj.get("type")
        })
        return _obj



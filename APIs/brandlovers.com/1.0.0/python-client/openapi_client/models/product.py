# coding: utf-8

"""
    BrandLovers Marketplace API V1

    Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimensions import Dimensions
from openapi_client.models.gift_wrap import GiftWrap
from openapi_client.models.product_attribute import ProductAttribute
from openapi_client.models.product_price import ProductPrice
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    Product
    """ # noqa: E501
    attributes: List[ProductAttribute] = Field(description="List of `key` `value` attributes of this product. This is very important for search and SEO optmization. Include all relevant information")
    brand: StrictStr = Field(description="Brand name")
    categories: List[StrictStr] = Field(description="Array of categories associated with this product")
    description: StrictStr = Field(description="Product description.")
    dimensions: Optional[Dimensions] = None
    gift_wrap: Optional[GiftWrap] = Field(default=None, alias="giftWrap")
    gtin: Optional[List[StrictStr]] = Field(default=None, description="Array of product EAN and/or ISBN and/or ASIN codes")
    images: List[StrictStr] = Field(description="List of valid Product image URLs. HTTP or HTTPS are valid. HTTPS is prefered.")
    price: ProductPrice
    product_group_id: Optional[StrictStr] = Field(default=None, description="Unique Product Group ID. Products with the same `productGroupId` will be grouped and displayed as a unique entry. Use `productGroupId` to group diferent SKUs that represent diferent colors, sizes, capacities, etc..", alias="productGroupId")
    product_id: Optional[StrictStr] = Field(default=None, description="Brand Lovers Product ID. Use this to suggest a product association. This field is optional.", alias="productId")
    sku_seller_id: StrictStr = Field(description="Unique Product Id (SKU) in the seller system", alias="skuSellerId")
    stock: StrictInt = Field(description="Number of products availble for sale from the seller. Each new successfull order will automatically reduce the number of products available.")
    title: StrictStr = Field(description="Product name as advertised by manufacturer. This how the product will be displayed in the Marketplace")
    videos: Optional[List[StrictStr]] = Field(default=None, description="List of videos de URLs associated with this product. HTTP or HTTPS are valid. HTTPS is prefered.")
    __properties: ClassVar[List[str]] = ["attributes", "brand", "categories", "description", "dimensions", "giftWrap", "gtin", "images", "price", "productGroupId", "productId", "skuSellerId", "stock", "title", "videos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift_wrap
        if self.gift_wrap:
            _dict['giftWrap'] = self.gift_wrap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": [ProductAttribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "brand": obj.get("brand"),
            "categories": obj.get("categories"),
            "description": obj.get("description"),
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "giftWrap": GiftWrap.from_dict(obj["giftWrap"]) if obj.get("giftWrap") is not None else None,
            "gtin": obj.get("gtin"),
            "images": obj.get("images"),
            "price": ProductPrice.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "productGroupId": obj.get("productGroupId"),
            "productId": obj.get("productId"),
            "skuSellerId": obj.get("skuSellerId"),
            "stock": obj.get("stock"),
            "title": obj.get("title"),
            "videos": obj.get("videos")
        })
        return _obj



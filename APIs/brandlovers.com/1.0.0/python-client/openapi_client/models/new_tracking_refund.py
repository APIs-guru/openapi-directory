# coding: utf-8

"""
    BrandLovers Marketplace API V1

    Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.courier import Courier
from openapi_client.models.order_item_reference import OrderItemReference
from typing import Optional, Set
from typing_extensions import Self

class NewTrackingRefund(BaseModel):
    """
    NewTrackingRefund
    """ # noqa: E501
    courier: Optional[Courier] = None
    cte: Optional[StrictStr] = Field(default=None, description="Conhecimento do Transporte EletrÃ´nico")
    info: StrictStr = Field(description="Aditional information about this shippment")
    items: List[OrderItemReference]
    number: Optional[StrictStr] = Field(default=None, description="Tracking Id in the courier")
    occurred_at: Optional[datetime] = Field(default=None, description="Date time that this was created", alias="occurredAt")
    seller_shipment_id: Optional[StrictStr] = Field(default=None, description="Unique Seller shipment Id. This must be unique across all orders and shipments", alias="sellerShipmentId")
    trancking_url: Optional[StrictStr] = Field(default=None, description="Courier tracking URL", alias="tranckingUrl")
    __properties: ClassVar[List[str]] = ["courier", "cte", "info", "items", "number", "occurredAt", "sellerShipmentId", "tranckingUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewTrackingRefund from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of courier
        if self.courier:
            _dict['courier'] = self.courier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewTrackingRefund from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "courier": Courier.from_dict(obj["courier"]) if obj.get("courier") is not None else None,
            "cte": obj.get("cte"),
            "info": obj.get("info"),
            "items": [OrderItemReference.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "number": obj.get("number"),
            "occurredAt": obj.get("occurredAt"),
            "sellerShipmentId": obj.get("sellerShipmentId"),
            "tranckingUrl": obj.get("tranckingUrl")
        })
        return _obj



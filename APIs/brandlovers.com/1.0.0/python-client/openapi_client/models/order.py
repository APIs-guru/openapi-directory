# coding: utf-8

"""
    BrandLovers Marketplace API V1

    Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.customer import Customer
from openapi_client.models.freight import Freight
from openapi_client.models.order_item import OrderItem
from openapi_client.models.seller import Seller
from openapi_client.models.shippment import Shippment
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    approved_at: Optional[datetime] = Field(default=None, description="Date that this order was approved for fullfilment", alias="approvedAt")
    billing_address: Address = Field(alias="billingAddress")
    created_at: datetime = Field(description="Date that this order was created", alias="createdAt")
    customer: Customer
    freight: Freight
    items: List[OrderItem]
    order_id: StrictStr = Field(description="Unique order Id (related to this seller)", alias="orderId")
    order_marketplace_id: StrictStr = Field(description="Unique Order Id that will be displayed to the customer. This Id is not the same as `orderId`", alias="orderMarketplaceId")
    seller: Optional[Seller] = None
    shipments: List[Shippment]
    shipping_address: Address = Field(alias="shippingAddress")
    status: StrictStr = Field(description="Order status")
    total_amount: StrictInt = Field(description="Order total in cents, this is what the customer will be charged for. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567", alias="totalAmount")
    total_discount_amount: StrictInt = Field(description="Total order discounts in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567", alias="totalDiscountAmount")
    total_items_amount: StrictInt = Field(description="Order items total amount in cents. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567", alias="totalItemsAmount")
    total_shipping_amount: StrictInt = Field(description="Total shipments amount items. No commas or periods are accepeted. For example one dollar should be informed as 100. $1,2345.67 should be informed solely as 1234567", alias="totalShippingAmount")
    updated_at: datetime = Field(description="Last update data of this order", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["approvedAt", "billingAddress", "createdAt", "customer", "freight", "items", "orderId", "orderMarketplaceId", "seller", "shipments", "shippingAddress", "status", "totalAmount", "totalDiscountAmount", "totalItemsAmount", "totalShippingAmount", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billingAddress'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of freight
        if self.freight:
            _dict['freight'] = self.freight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of seller
        if self.seller:
            _dict['seller'] = self.seller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipments (list)
        _items = []
        if self.shipments:
            for _item_shipments in self.shipments:
                if _item_shipments:
                    _items.append(_item_shipments.to_dict())
            _dict['shipments'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approvedAt": obj.get("approvedAt"),
            "billingAddress": Address.from_dict(obj["billingAddress"]) if obj.get("billingAddress") is not None else None,
            "createdAt": obj.get("createdAt"),
            "customer": Customer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "freight": Freight.from_dict(obj["freight"]) if obj.get("freight") is not None else None,
            "items": [OrderItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "orderId": obj.get("orderId"),
            "orderMarketplaceId": obj.get("orderMarketplaceId"),
            "seller": Seller.from_dict(obj["seller"]) if obj.get("seller") is not None else None,
            "shipments": [Shippment.from_dict(_item) for _item in obj["shipments"]] if obj.get("shipments") is not None else None,
            "shippingAddress": Address.from_dict(obj["shippingAddress"]) if obj.get("shippingAddress") is not None else None,
            "status": obj.get("status"),
            "totalAmount": obj.get("totalAmount"),
            "totalDiscountAmount": obj.get("totalDiscountAmount"),
            "totalItemsAmount": obj.get("totalItemsAmount"),
            "totalShippingAmount": obj.get("totalShippingAmount"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



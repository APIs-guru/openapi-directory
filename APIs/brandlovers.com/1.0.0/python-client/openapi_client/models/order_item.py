# coding: utf-8

"""
    BrandLovers Marketplace API V1

    Allows sellers to: 1) Load products definitions to the BrandLovers marktplace. 2) Receive and update orders status. 3) Receive and update shipping information. 4) Receive and update customer tickets. All requests consume and return application/json content. All request must be authenticated and use HTTPS.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.freight import Freight
from openapi_client.models.order_gift_wrap import OrderGiftWrap
from openapi_client.models.promotion import Promotion
from typing import Optional, Set
from typing_extensions import Self

class OrderItem(BaseModel):
    """
    OrderItem
    """ # noqa: E501
    freight: Freight
    gift_wrap: Optional[OrderGiftWrap] = Field(default=None, alias="giftWrap")
    id: StrictStr = Field(description="Unique Id representing this item")
    name: StrictStr = Field(description="Product name")
    promotions: Optional[List[Promotion]] = Field(default=None, description="Promotions array")
    sale_price: StrictInt = Field(description="Product unit price", alias="salePrice")
    sent: StrictBool = Field(description="Flag if product was already shipped")
    sku_seller_id: StrictStr = Field(description="Unique Product Id (SKU) in the seller system", alias="skuSellerId")
    __properties: ClassVar[List[str]] = ["freight", "giftWrap", "id", "name", "promotions", "salePrice", "sent", "skuSellerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of freight
        if self.freight:
            _dict['freight'] = self.freight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift_wrap
        if self.gift_wrap:
            _dict['giftWrap'] = self.gift_wrap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in promotions (list)
        _items = []
        if self.promotions:
            for _item_promotions in self.promotions:
                if _item_promotions:
                    _items.append(_item_promotions.to_dict())
            _dict['promotions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "freight": Freight.from_dict(obj["freight"]) if obj.get("freight") is not None else None,
            "giftWrap": OrderGiftWrap.from_dict(obj["giftWrap"]) if obj.get("giftWrap") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "promotions": [Promotion.from_dict(_item) for _item in obj["promotions"]] if obj.get("promotions") is not None else None,
            "salePrice": obj.get("salePrice"),
            "sent": obj.get("sent"),
            "skuSellerId": obj.get("skuSellerId")
        })
        return _obj



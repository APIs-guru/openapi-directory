# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

    The version of the OpenAPI document: 2.0.24
    Contact: contact@namsor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FirstLastNameUSRaceEthnicityOut(BaseModel):
    """
    Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="The first name (also known as given name)", alias="firstName")
    id: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = Field(default=None, description="The last name (also known as family name, or surname)", alias="lastName")
    probability_alt_calibrated: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=-1)], Annotated[int, Field(le=1, strict=True, ge=-1)]]] = Field(default=None, description="The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 = still calibrating. ", alias="probabilityAltCalibrated")
    probability_calibrated: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=-1)], Annotated[int, Field(le=1, strict=True, ge=-1)]]] = Field(default=None, description="The calibrated probability for raceEthnicity to have been guessed correctly. -1 = still calibrating. ", alias="probabilityCalibrated")
    race_ethnicities_top: Optional[List[StrictStr]] = Field(default=None, description="List 'race'/ethnicities", alias="raceEthnicitiesTop")
    race_ethnicity: Optional[StrictStr] = Field(default=None, description="Most likely US 'race'/ethnicity", alias="raceEthnicity")
    race_ethnicity_alt: Optional[StrictStr] = Field(default=None, description="Second most likely US 'race'/ethnicity", alias="raceEthnicityAlt")
    score: Optional[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="Higher score is better, but score is not normalized. Use calibratedProbability if available. ")
    script: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["firstName", "id", "lastName", "probabilityAltCalibrated", "probabilityCalibrated", "raceEthnicitiesTop", "raceEthnicity", "raceEthnicityAlt", "score", "script"]

    @field_validator('race_ethnicity')
    def race_ethnicity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['W_NL', 'HL', 'A', 'B_NL', 'AI_AN', 'PI']):
            raise ValueError("must be one of enum values ('W_NL', 'HL', 'A', 'B_NL', 'AI_AN', 'PI')")
        return value

    @field_validator('race_ethnicity_alt')
    def race_ethnicity_alt_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['W_NL', 'HL', 'A', 'B_NL', 'AI_AN', 'PI']):
            raise ValueError("must be one of enum values ('W_NL', 'HL', 'A', 'B_NL', 'AI_AN', 'PI')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirstLastNameUSRaceEthnicityOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirstLastNameUSRaceEthnicityOut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": obj.get("firstName"),
            "id": obj.get("id"),
            "lastName": obj.get("lastName"),
            "probabilityAltCalibrated": obj.get("probabilityAltCalibrated"),
            "probabilityCalibrated": obj.get("probabilityCalibrated"),
            "raceEthnicitiesTop": obj.get("raceEthnicitiesTop"),
            "raceEthnicity": obj.get("raceEthnicity"),
            "raceEthnicityAlt": obj.get("raceEthnicityAlt"),
            "score": obj.get("score"),
            "script": obj.get("script")
        })
        return _obj



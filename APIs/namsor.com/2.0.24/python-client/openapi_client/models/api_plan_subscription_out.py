# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

    The version of the OpenAPI document: 2.0.24
    Contact: contact@namsor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class APIPlanSubscriptionOut(BaseModel):
    """
    The API Plan governing the subscription.
    """ # noqa: E501
    api_key: Optional[StrictStr] = Field(default=None, description="User API Key.", alias="apiKey")
    currency: Optional[StrictStr] = Field(default=None, description="Current plan Currency for prices.")
    currency_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For USD, GBP, EUR - the factor is 1.", alias="currencyFactor")
    plan_base_fees_key: Optional[StrictStr] = Field(default=None, description="Current plan key (as in Stripe product).", alias="planBaseFeesKey")
    plan_ended: Optional[StrictInt] = Field(default=None, description="Datetime when the user ended the plan.", alias="planEnded")
    plan_name: Optional[StrictStr] = Field(default=None, description="Current plan name.", alias="planName")
    plan_quota: Optional[StrictInt] = Field(default=None, description="Current plan quota in quantity of units (NB: some API use several units per name).", alias="planQuota")
    plan_started: Optional[StrictInt] = Field(default=None, description="Datetime when the user subscribed to the current plan.", alias="planStarted")
    plan_status: Optional[StrictStr] = Field(default=None, description="Plan status.", alias="planStatus")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current plan price for overages expressed in Currency (extra price per unit above the free quota).")
    price_overage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current plan price for overages expressed in Currency (extra price per unit above the free quota).", alias="priceOverage")
    price_overage_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current plan price for overages expressed in USD (extra price per unit above the free quota).", alias="priceOverageUSD")
    price_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current plan monthly price expressed in USD (includes a free quota).", alias="priceUSD")
    prior_plan_started: Optional[StrictInt] = Field(default=None, description="Datetime when the user subscribed to the prior plan.", alias="priorPlanStarted")
    stripe_customer_id: Optional[StrictStr] = Field(default=None, description="Stripe customer identifier.", alias="stripeCustomerId")
    stripe_status: Optional[StrictStr] = Field(default=None, description="Stripe status ex active.", alias="stripeStatus")
    stripe_subscription: Optional[StrictStr] = Field(default=None, description="Stripe subscription identifier.", alias="stripeSubscription")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Applicable tax rate for the plan.", alias="taxRate")
    user_id: Optional[StrictStr] = Field(default=None, description="Internal user identifier.", alias="userId")
    __properties: ClassVar[List[str]] = ["apiKey", "currency", "currencyFactor", "planBaseFeesKey", "planEnded", "planName", "planQuota", "planStarted", "planStatus", "price", "priceOverage", "priceOverageUSD", "priceUSD", "priorPlanStarted", "stripeCustomerId", "stripeStatus", "stripeSubscription", "taxRate", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIPlanSubscriptionOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIPlanSubscriptionOut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiKey": obj.get("apiKey"),
            "currency": obj.get("currency"),
            "currencyFactor": obj.get("currencyFactor"),
            "planBaseFeesKey": obj.get("planBaseFeesKey"),
            "planEnded": obj.get("planEnded"),
            "planName": obj.get("planName"),
            "planQuota": obj.get("planQuota"),
            "planStarted": obj.get("planStarted"),
            "planStatus": obj.get("planStatus"),
            "price": obj.get("price"),
            "priceOverage": obj.get("priceOverage"),
            "priceOverageUSD": obj.get("priceOverageUSD"),
            "priceUSD": obj.get("priceUSD"),
            "priorPlanStarted": obj.get("priorPlanStarted"),
            "stripeCustomerId": obj.get("stripeCustomerId"),
            "stripeStatus": obj.get("stripeStatus"),
            "stripeSubscription": obj.get("stripeSubscription"),
            "taxRate": obj.get("taxRate"),
            "userId": obj.get("userId")
        })
        return _obj



# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

    The version of the OpenAPI document: 2.0.24
    Contact: contact@namsor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.indian_api import IndianApi


class TestIndianApi(unittest.TestCase):
    """IndianApi unit test stubs"""

    def setUp(self) -> None:
        self.api = IndianApi()

    def tearDown(self) -> None:
        pass

    def test_castegroup_indian_full(self) -> None:
        """Test case for castegroup_indian_full

        [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
        """
        pass

    def test_castegroup_indian_full_batch(self) -> None:
        """Test case for castegroup_indian_full_batch

        [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
        """
        pass

    def test_religion(self) -> None:
        """Test case for religion

        [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        """
        pass

    def test_religion_indian_full_batch(self) -> None:
        """Test case for religion_indian_full_batch

        [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        """
        pass

    def test_subclassification_indian(self) -> None:
        """Test case for subclassification_indian

        [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        """
        pass

    def test_subclassification_indian_batch(self) -> None:
        """Test case for subclassification_indian_batch

        [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        """
        pass

    def test_subclassification_indian_full(self) -> None:
        """Test case for subclassification_indian_full

        [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        """
        pass

    def test_subclassification_indian_full_batch(self) -> None:
        """Test case for subclassification_indian_full_batch

        [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Daymet Single Pixel Extraction Tool API

    Welcome to the Daymet Single Pixel Extraction Tool API. You can use this API to download daily surface data within the Daymet database in a `csv` or `json` format for a single point. This API allows users to query a single geographic point by latitude and longitude in decimal degrees. A routine is executed that translates the (lon, lat) coordinates into projected Daymet (x,y) Lambert Conformal Coordinates. These coordinates are used to access the Daymet database of daily interpolated surface weather variables. Daily data from the nearest 1 km x 1 km Daymet grid cell are extracted from the database.  If you would like to learn how to automate the download of multiple locations for the Daymet Single Pixel Extraction Tool, click [here](https://github.com/ornldaac/daymet-single-pixel-batch).

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_data_get(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download Daymet Data

        Returns a csv or json of the requested data to local machine

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_data_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_data_get_with_http_info(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download Daymet Data

        Returns a csv or json of the requested data to local machine

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_data_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_data_get_without_preload_content(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download Daymet Data

        Returns a csv or json of the requested data to local machine

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_data_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_data_get_serialize(
        self,
        lat,
        lon,
        format,
        vars,
        years,
        start,
        end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'vars': 'csv',
            'years': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if vars is not None:
            
            _query_params.append(('vars', vars))
            
        if years is not None:
            
            _query_params.append(('years', years))
            
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/data',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def preview_get(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Preview Daymet Data in a web browser

        Returns a table to the browser displaying requested data

        :param lat: Latitude component of location (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._preview_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def preview_get_with_http_info(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Preview Daymet Data in a web browser

        Returns a table to the browser displaying requested data

        :param lat: Latitude component of location (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._preview_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def preview_get_without_preload_content(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Preview Daymet Data in a web browser

        Returns a table to the browser displaying requested data

        :param lat: Latitude component of location (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._preview_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _preview_get_serialize(
        self,
        lat,
        lon,
        format,
        vars,
        years,
        start,
        end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'vars': 'csv',
            'years': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if vars is not None:
            
            _query_params.append(('vars', vars))
            
        if years is not None:
            
            _query_params.append(('years', years))
            
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/preview',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def send_save_data_get(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download Daymet Data

        Returns a csv or json of the requested data to local machine

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_save_data_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_save_data_get_with_http_info(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download Daymet Data

        Returns a csv or json of the requested data to local machine

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_save_data_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_save_data_get_without_preload_content(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download Daymet Data

        Returns a csv or json of the requested data to local machine

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_save_data_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_save_data_get_serialize(
        self,
        lat,
        lon,
        format,
        vars,
        years,
        start,
        end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'vars': 'csv',
            'years': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if vars is not None:
            
            _query_params.append(('vars', vars))
            
        if years is not None:
            
            _query_params.append(('years', years))
            
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/send/saveData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def visualize_get(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Visualize Daymet Data in a web browser

        Returns plots to a web browser of requested data using Plotly

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def visualize_get_with_http_info(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Visualize Daymet Data in a web browser

        Returns plots to a web browser of requested data using Plotly

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def visualize_get_without_preload_content(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Latitude component of location.")],
        lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Longitude component of location.")],
        format: Annotated[StrictStr, Field(description="Specify a format for data retrieval.")],
        vars: Annotated[Optional[List[StrictStr]], Field(description="Daymet Daily weather estimates.")] = None,
        years: Annotated[Optional[List[StrictStr]], Field(description="Subset on years [1980..2019].")] = None,
        start: Annotated[Optional[date], Field(description="Subset on dates (start date).")] = None,
        end: Annotated[Optional[date], Field(description="Subset on dates (end date).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Visualize Daymet Data in a web browser

        Returns plots to a web browser of requested data using Plotly

        :param lat: Latitude component of location. (required)
        :type lat: float
        :param lon: Longitude component of location. (required)
        :type lon: float
        :param format: Specify a format for data retrieval. (required)
        :type format: str
        :param vars: Daymet Daily weather estimates.
        :type vars: List[str]
        :param years: Subset on years [1980..2019].
        :type years: List[str]
        :param start: Subset on dates (start date).
        :type start: date
        :param end: Subset on dates (end date).
        :type end: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._visualize_get_serialize(
            lat=lat,
            lon=lon,
            format=format,
            vars=vars,
            years=years,
            start=start,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _visualize_get_serialize(
        self,
        lat,
        lon,
        format,
        vars,
        years,
        start,
        end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'vars': 'csv',
            'years': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if vars is not None:
            
            _query_params.append(('vars', vars))
            
        if years is not None:
            
            _query_params.append(('years', years))
            
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/visualize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



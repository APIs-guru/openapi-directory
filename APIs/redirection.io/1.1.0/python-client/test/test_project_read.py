# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.project_read import ProjectRead

class TestProjectRead(unittest.TestCase):
    """ProjectRead unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProjectRead:
        """Test ProjectRead
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProjectRead`
        """
        model = ProjectRead()
        if include_optional:
            return ProjectRead(
                complex_rules_count = 56,
                complex_rules_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                configuration = [
                    ''
                    ],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                current_version = openapi_client.models.rule_set_version_read.RuleSetVersion-Read(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    current = True, 
                    id = '', 
                    is_snapshot = True, 
                    merged_rules_count = 56, 
                    name = '', 
                    published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    working = True, ),
                id = '',
                ignore_project_types = [
                    ''
                    ],
                is_publishing = True,
                name = '',
                onboarding_completed_demos = [
                    ''
                    ],
                organization = openapi_client.models.organization_read.Organization-Read(
                    id = '', 
                    name = '', 
                    slug = '', ),
                plan = 56,
                rules_hash = '',
                slug = '',
                straight_rules_count = 56,
                straight_rules_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                token = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user_projects = [
                    openapi_client.models.user_project_read.UserProject-Read(
                        functional_roles = [
                            ''
                            ], 
                        id = '', 
                        user = '', )
                    ],
                users_flattened = [
                    openapi_client.models.user_project_flattened_read.UserProjectFlattened-Read(
                        functional_roles = [
                            ''
                            ], 
                        user = '', )
                    ],
                working_version = openapi_client.models.rule_set_version_read.RuleSetVersion-Read(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    current = True, 
                    id = '', 
                    is_snapshot = True, 
                    merged_rules_count = 56, 
                    name = '', 
                    published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    working = True, )
            )
        else:
            return ProjectRead(
                name = '',
        )
        """

    def testProjectRead(self):
        """Test ProjectRead"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

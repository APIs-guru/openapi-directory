# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.organization import Organization

class TestOrganization(unittest.TestCase):
    """Organization unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Organization:
        """Test Organization
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Organization`
        """
        model = Organization()
        if include_optional:
            return Organization(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                name = '',
                projects = [
                    openapi_client.models.project.Project(
                        complex_rules_count = 56, 
                        complex_rules_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        configuration = [
                            ''
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        current_version = openapi_client.models.rule_set_version.RuleSetVersion(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            current = True, 
                            id = '', 
                            is_snapshot = True, 
                            merged_rules_count = 56, 
                            name = '', 
                            published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            working = True, ), 
                        id = '', 
                        ignore_project_types = [
                            ''
                            ], 
                        is_publishing = True, 
                        name = '', 
                        onboarding_completed_demos = [
                            ''
                            ], 
                        organization = openapi_client.models.organization.Organization(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            id = '', 
                            name = '', 
                            slug = '', 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            user_organizations = [
                                openapi_client.models.user_organization.UserOrganization(
                                    functional_roles = [
                                        ''
                                        ], 
                                    id = '', 
                                    user = '', )
                                ], ), 
                        plan = 56, 
                        rules_hash = '', 
                        slug = '', 
                        straight_rules_count = 56, 
                        straight_rules_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        token = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        user_projects = [
                            openapi_client.models.user_project.UserProject(
                                functional_roles = [
                                    ''
                                    ], 
                                id = '', 
                                project = '', 
                                user = '', )
                            ], 
                        users_flattened = [
                            openapi_client.models.user_project_flattened.UserProjectFlattened(
                                project = '', 
                                user = '', )
                            ], 
                        working_version = openapi_client.models.rule_set_version.RuleSetVersion(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            current = True, 
                            id = '', 
                            is_snapshot = True, 
                            merged_rules_count = 56, 
                            name = '', 
                            published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            working = True, ), )
                    ],
                slug = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user_organizations = [
                    openapi_client.models.user_organization.UserOrganization(
                        functional_roles = [
                            ''
                            ], 
                        id = '', 
                        organization = '', 
                        user = '', )
                    ]
            )
        else:
            return Organization(
                name = '',
        )
        """

    def testOrganization(self):
        """Test Organization"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

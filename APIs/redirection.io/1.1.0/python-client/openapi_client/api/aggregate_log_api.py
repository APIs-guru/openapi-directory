# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.aggregate_log_read import AggregateLogRead

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AggregateLogApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_aggregate_log_collection(
        self,
        page: Annotated[Optional[StrictInt], Field(description="The collection page number")] = None,
        project_id: Optional[StrictStr] = None,
        created_at: Optional[StrictStr] = None,
        source: Optional[StrictStr] = None,
        target: Optional[StrictStr] = None,
        status_code: Optional[StrictStr] = None,
        referrer: Optional[StrictStr] = None,
        user_agent: Optional[StrictStr] = None,
        user_agent_type: Optional[StrictStr] = None,
        simplified_user_agent: Optional[StrictStr] = None,
        rule_id: Optional[StrictStr] = None,
        instance_name: Optional[StrictStr] = None,
        exclude_urls: Optional[StrictStr] = None,
        exclude_empty_referrer: Optional[StrictStr] = None,
        created_at_gt: Optional[StrictStr] = None,
        created_at_gte: Optional[StrictStr] = None,
        created_at_lt: Optional[StrictStr] = None,
        created_at_lte: Optional[StrictStr] = None,
        status_code_gt: Optional[StrictStr] = None,
        status_code_gte: Optional[StrictStr] = None,
        status_code_lt: Optional[StrictStr] = None,
        status_code_lte: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AggregateLogRead]:
        """Retrieves the collection of AggregateLog resources.


        :param page: The collection page number
        :type page: int
        :param project_id:
        :type project_id: str
        :param created_at:
        :type created_at: str
        :param source:
        :type source: str
        :param target:
        :type target: str
        :param status_code:
        :type status_code: str
        :param referrer:
        :type referrer: str
        :param user_agent:
        :type user_agent: str
        :param user_agent_type:
        :type user_agent_type: str
        :param simplified_user_agent:
        :type simplified_user_agent: str
        :param rule_id:
        :type rule_id: str
        :param instance_name:
        :type instance_name: str
        :param exclude_urls:
        :type exclude_urls: str
        :param exclude_empty_referrer:
        :type exclude_empty_referrer: str
        :param created_at_gt:
        :type created_at_gt: str
        :param created_at_gte:
        :type created_at_gte: str
        :param created_at_lt:
        :type created_at_lt: str
        :param created_at_lte:
        :type created_at_lte: str
        :param status_code_gt:
        :type status_code_gt: str
        :param status_code_gte:
        :type status_code_gte: str
        :param status_code_lt:
        :type status_code_lt: str
        :param status_code_lte:
        :type status_code_lte: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aggregate_log_collection_serialize(
            page=page,
            project_id=project_id,
            created_at=created_at,
            source=source,
            target=target,
            status_code=status_code,
            referrer=referrer,
            user_agent=user_agent,
            user_agent_type=user_agent_type,
            simplified_user_agent=simplified_user_agent,
            rule_id=rule_id,
            instance_name=instance_name,
            exclude_urls=exclude_urls,
            exclude_empty_referrer=exclude_empty_referrer,
            created_at_gt=created_at_gt,
            created_at_gte=created_at_gte,
            created_at_lt=created_at_lt,
            created_at_lte=created_at_lte,
            status_code_gt=status_code_gt,
            status_code_gte=status_code_gte,
            status_code_lt=status_code_lt,
            status_code_lte=status_code_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AggregateLogRead]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_aggregate_log_collection_with_http_info(
        self,
        page: Annotated[Optional[StrictInt], Field(description="The collection page number")] = None,
        project_id: Optional[StrictStr] = None,
        created_at: Optional[StrictStr] = None,
        source: Optional[StrictStr] = None,
        target: Optional[StrictStr] = None,
        status_code: Optional[StrictStr] = None,
        referrer: Optional[StrictStr] = None,
        user_agent: Optional[StrictStr] = None,
        user_agent_type: Optional[StrictStr] = None,
        simplified_user_agent: Optional[StrictStr] = None,
        rule_id: Optional[StrictStr] = None,
        instance_name: Optional[StrictStr] = None,
        exclude_urls: Optional[StrictStr] = None,
        exclude_empty_referrer: Optional[StrictStr] = None,
        created_at_gt: Optional[StrictStr] = None,
        created_at_gte: Optional[StrictStr] = None,
        created_at_lt: Optional[StrictStr] = None,
        created_at_lte: Optional[StrictStr] = None,
        status_code_gt: Optional[StrictStr] = None,
        status_code_gte: Optional[StrictStr] = None,
        status_code_lt: Optional[StrictStr] = None,
        status_code_lte: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AggregateLogRead]]:
        """Retrieves the collection of AggregateLog resources.


        :param page: The collection page number
        :type page: int
        :param project_id:
        :type project_id: str
        :param created_at:
        :type created_at: str
        :param source:
        :type source: str
        :param target:
        :type target: str
        :param status_code:
        :type status_code: str
        :param referrer:
        :type referrer: str
        :param user_agent:
        :type user_agent: str
        :param user_agent_type:
        :type user_agent_type: str
        :param simplified_user_agent:
        :type simplified_user_agent: str
        :param rule_id:
        :type rule_id: str
        :param instance_name:
        :type instance_name: str
        :param exclude_urls:
        :type exclude_urls: str
        :param exclude_empty_referrer:
        :type exclude_empty_referrer: str
        :param created_at_gt:
        :type created_at_gt: str
        :param created_at_gte:
        :type created_at_gte: str
        :param created_at_lt:
        :type created_at_lt: str
        :param created_at_lte:
        :type created_at_lte: str
        :param status_code_gt:
        :type status_code_gt: str
        :param status_code_gte:
        :type status_code_gte: str
        :param status_code_lt:
        :type status_code_lt: str
        :param status_code_lte:
        :type status_code_lte: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aggregate_log_collection_serialize(
            page=page,
            project_id=project_id,
            created_at=created_at,
            source=source,
            target=target,
            status_code=status_code,
            referrer=referrer,
            user_agent=user_agent,
            user_agent_type=user_agent_type,
            simplified_user_agent=simplified_user_agent,
            rule_id=rule_id,
            instance_name=instance_name,
            exclude_urls=exclude_urls,
            exclude_empty_referrer=exclude_empty_referrer,
            created_at_gt=created_at_gt,
            created_at_gte=created_at_gte,
            created_at_lt=created_at_lt,
            created_at_lte=created_at_lte,
            status_code_gt=status_code_gt,
            status_code_gte=status_code_gte,
            status_code_lt=status_code_lt,
            status_code_lte=status_code_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AggregateLogRead]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_aggregate_log_collection_without_preload_content(
        self,
        page: Annotated[Optional[StrictInt], Field(description="The collection page number")] = None,
        project_id: Optional[StrictStr] = None,
        created_at: Optional[StrictStr] = None,
        source: Optional[StrictStr] = None,
        target: Optional[StrictStr] = None,
        status_code: Optional[StrictStr] = None,
        referrer: Optional[StrictStr] = None,
        user_agent: Optional[StrictStr] = None,
        user_agent_type: Optional[StrictStr] = None,
        simplified_user_agent: Optional[StrictStr] = None,
        rule_id: Optional[StrictStr] = None,
        instance_name: Optional[StrictStr] = None,
        exclude_urls: Optional[StrictStr] = None,
        exclude_empty_referrer: Optional[StrictStr] = None,
        created_at_gt: Optional[StrictStr] = None,
        created_at_gte: Optional[StrictStr] = None,
        created_at_lt: Optional[StrictStr] = None,
        created_at_lte: Optional[StrictStr] = None,
        status_code_gt: Optional[StrictStr] = None,
        status_code_gte: Optional[StrictStr] = None,
        status_code_lt: Optional[StrictStr] = None,
        status_code_lte: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves the collection of AggregateLog resources.


        :param page: The collection page number
        :type page: int
        :param project_id:
        :type project_id: str
        :param created_at:
        :type created_at: str
        :param source:
        :type source: str
        :param target:
        :type target: str
        :param status_code:
        :type status_code: str
        :param referrer:
        :type referrer: str
        :param user_agent:
        :type user_agent: str
        :param user_agent_type:
        :type user_agent_type: str
        :param simplified_user_agent:
        :type simplified_user_agent: str
        :param rule_id:
        :type rule_id: str
        :param instance_name:
        :type instance_name: str
        :param exclude_urls:
        :type exclude_urls: str
        :param exclude_empty_referrer:
        :type exclude_empty_referrer: str
        :param created_at_gt:
        :type created_at_gt: str
        :param created_at_gte:
        :type created_at_gte: str
        :param created_at_lt:
        :type created_at_lt: str
        :param created_at_lte:
        :type created_at_lte: str
        :param status_code_gt:
        :type status_code_gt: str
        :param status_code_gte:
        :type status_code_gte: str
        :param status_code_lt:
        :type status_code_lt: str
        :param status_code_lte:
        :type status_code_lte: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aggregate_log_collection_serialize(
            page=page,
            project_id=project_id,
            created_at=created_at,
            source=source,
            target=target,
            status_code=status_code,
            referrer=referrer,
            user_agent=user_agent,
            user_agent_type=user_agent_type,
            simplified_user_agent=simplified_user_agent,
            rule_id=rule_id,
            instance_name=instance_name,
            exclude_urls=exclude_urls,
            exclude_empty_referrer=exclude_empty_referrer,
            created_at_gt=created_at_gt,
            created_at_gte=created_at_gte,
            created_at_lt=created_at_lt,
            created_at_lte=created_at_lte,
            status_code_gt=status_code_gt,
            status_code_gte=status_code_gte,
            status_code_lt=status_code_lt,
            status_code_lte=status_code_lte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AggregateLogRead]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_aggregate_log_collection_serialize(
        self,
        page,
        project_id,
        created_at,
        source,
        target,
        status_code,
        referrer,
        user_agent,
        user_agent_type,
        simplified_user_agent,
        rule_id,
        instance_name,
        exclude_urls,
        exclude_empty_referrer,
        created_at_gt,
        created_at_gte,
        created_at_lt,
        created_at_lte,
        status_code_gt,
        status_code_gte,
        status_code_lt,
        status_code_lte,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if project_id is not None:
            
            _query_params.append(('projectId', project_id))
            
        if created_at is not None:
            
            _query_params.append(('createdAt', created_at))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if target is not None:
            
            _query_params.append(('target', target))
            
        if status_code is not None:
            
            _query_params.append(('statusCode', status_code))
            
        if referrer is not None:
            
            _query_params.append(('referrer', referrer))
            
        if user_agent is not None:
            
            _query_params.append(('userAgent', user_agent))
            
        if user_agent_type is not None:
            
            _query_params.append(('userAgentType', user_agent_type))
            
        if simplified_user_agent is not None:
            
            _query_params.append(('simplifiedUserAgent', simplified_user_agent))
            
        if rule_id is not None:
            
            _query_params.append(('ruleId', rule_id))
            
        if instance_name is not None:
            
            _query_params.append(('instanceName', instance_name))
            
        if exclude_urls is not None:
            
            _query_params.append(('excludeUrls', exclude_urls))
            
        if exclude_empty_referrer is not None:
            
            _query_params.append(('excludeEmptyReferrer', exclude_empty_referrer))
            
        if created_at_gt is not None:
            
            _query_params.append(('createdAt_gt', created_at_gt))
            
        if created_at_gte is not None:
            
            _query_params.append(('createdAt_gte', created_at_gte))
            
        if created_at_lt is not None:
            
            _query_params.append(('createdAt_lt', created_at_lt))
            
        if created_at_lte is not None:
            
            _query_params.append(('createdAt_lte', created_at_lte))
            
        if status_code_gt is not None:
            
            _query_params.append(('statusCode_gt', status_code_gt))
            
        if status_code_gte is not None:
            
            _query_params.append(('statusCode_gte', status_code_gte))
            
        if status_code_lt is not None:
            
            _query_params.append(('statusCode_lt', status_code_lt))
            
        if status_code_lte is not None:
            
            _query_params.append(('statusCode_lte', status_code_lte))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/ld+json', 
                    'application/json', 
                    'text/html', 
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/aggregate-logs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_aggregate_log_item(
        self,
        id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AggregateLogRead:
        """Retrieves a AggregateLog resource.


        :param id: (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aggregate_log_item_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregateLogRead",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_aggregate_log_item_with_http_info(
        self,
        id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AggregateLogRead]:
        """Retrieves a AggregateLog resource.


        :param id: (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aggregate_log_item_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregateLogRead",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_aggregate_log_item_without_preload_content(
        self,
        id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves a AggregateLog resource.


        :param id: (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aggregate_log_item_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregateLogRead",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_aggregate_log_item_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/ld+json', 
                    'application/json', 
                    'text/html', 
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/aggregate-logs/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



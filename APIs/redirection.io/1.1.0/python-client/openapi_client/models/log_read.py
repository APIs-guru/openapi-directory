# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LogRead(BaseModel):
    """
    
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    fixed: Optional[StrictBool] = None
    fixed_by_versions: Optional[List[StrictStr]] = Field(default=None, alias="fixedByVersions")
    from_smart_list: Optional[StrictBool] = Field(default=None, alias="fromSmartList")
    id: Optional[Dict[str, Any]] = None
    instance_name: Optional[Dict[str, Any]] = Field(default=None, alias="instanceName")
    method: Optional[Dict[str, Any]] = None
    not_fixed_by_versions: Optional[List[StrictStr]] = Field(default=None, alias="notFixedByVersions")
    proxy: Optional[StrictStr] = None
    referrer: Optional[Dict[str, Any]] = None
    rule_id: Optional[StrictStr] = Field(default=None, alias="ruleId")
    simplified_user_agent: Optional[Dict[str, Any]] = Field(default=None, alias="simplifiedUserAgent")
    smart_list: Optional[StrictStr] = Field(default=None, alias="smartList")
    source: Optional[Dict[str, Any]] = None
    status_code: Optional[Dict[str, Any]] = Field(default=None, alias="statusCode")
    target: Optional[Dict[str, Any]] = None
    user_agent: Optional[Dict[str, Any]] = Field(default=None, alias="userAgent")
    user_agent_type: Optional[Dict[str, Any]] = Field(default=None, alias="userAgentType")
    __properties: ClassVar[List[str]] = ["createdAt", "fixed", "fixedByVersions", "fromSmartList", "id", "instanceName", "method", "notFixedByVersions", "proxy", "referrer", "ruleId", "simplifiedUserAgent", "smartList", "source", "statusCode", "target", "userAgent", "userAgentType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "from_smart_list",
            "smart_list",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "fixed": obj.get("fixed"),
            "fixedByVersions": obj.get("fixedByVersions"),
            "fromSmartList": obj.get("fromSmartList"),
            "id": obj.get("id"),
            "instanceName": obj.get("instanceName"),
            "method": obj.get("method"),
            "notFixedByVersions": obj.get("notFixedByVersions"),
            "proxy": obj.get("proxy"),
            "referrer": obj.get("referrer"),
            "ruleId": obj.get("ruleId"),
            "simplifiedUserAgent": obj.get("simplifiedUserAgent"),
            "smartList": obj.get("smartList"),
            "source": obj.get("source"),
            "statusCode": obj.get("statusCode"),
            "target": obj.get("target"),
            "userAgent": obj.get("userAgent"),
            "userAgentType": obj.get("userAgentType")
        })
        return _obj



# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.marker_write import MarkerWrite
from typing import Optional, Set
from typing_extensions import Self

class RuleChangeWrite(BaseModel):
    """
    
    """ # noqa: E501
    action: StrictStr
    actions: Optional[List[StrictStr]] = None
    examples: Optional[List[StrictStr]] = None
    formatted_source: Optional[StrictStr] = Field(default=None, alias="formattedSource")
    markers: Optional[List[MarkerWrite]] = None
    match_on_response_status: Optional[StrictInt] = Field(default=None, alias="matchOnResponseStatus")
    rank: StrictInt
    rule_id: Optional[StrictStr] = Field(default=None, alias="ruleId")
    source: StrictStr
    __properties: ClassVar[List[str]] = ["action", "actions", "examples", "formattedSource", "markers", "matchOnResponseStatus", "rank", "ruleId", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleChangeWrite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in markers (list)
        _items = []
        if self.markers:
            for _item_markers in self.markers:
                if _item_markers:
                    _items.append(_item_markers.to_dict())
            _dict['markers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleChangeWrite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "actions": obj.get("actions"),
            "examples": obj.get("examples"),
            "formattedSource": obj.get("formattedSource"),
            "markers": [MarkerWrite.from_dict(_item) for _item in obj["markers"]] if obj.get("markers") is not None else None,
            "matchOnResponseStatus": obj.get("matchOnResponseStatus"),
            "rank": obj.get("rank"),
            "ruleId": obj.get("ruleId"),
            "source": obj.get("source")
        })
        return _obj



# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CrawlWrite(BaseModel):
    """
    
    """ # noqa: E501
    concurrency: StrictInt
    first_url: Dict[str, Any] = Field(alias="firstUrl")
    headers: Optional[List[StrictStr]] = None
    http_basic_password: Optional[Dict[str, Any]] = Field(default=None, alias="httpBasicPassword")
    http_basic_user: Optional[Dict[str, Any]] = Field(default=None, alias="httpBasicUser")
    max_depth: StrictInt = Field(alias="maxDepth")
    max_duration: StrictInt = Field(alias="maxDuration")
    max_urls: StrictInt = Field(alias="maxUrls")
    other_domains: Optional[List[StrictStr]] = Field(default=None, alias="otherDomains")
    project: StrictStr
    ssl_checking_disabled: StrictBool = Field(alias="sslCheckingDisabled")
    subdomain_included: StrictBool = Field(alias="subdomainIncluded")
    user_agent: Optional[Dict[str, Any]] = Field(default=None, alias="userAgent")
    __properties: ClassVar[List[str]] = ["concurrency", "firstUrl", "headers", "httpBasicPassword", "httpBasicUser", "maxDepth", "maxDuration", "maxUrls", "otherDomains", "project", "sslCheckingDisabled", "subdomainIncluded", "userAgent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlWrite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlWrite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "concurrency": obj.get("concurrency"),
            "firstUrl": obj.get("firstUrl"),
            "headers": obj.get("headers"),
            "httpBasicPassword": obj.get("httpBasicPassword"),
            "httpBasicUser": obj.get("httpBasicUser"),
            "maxDepth": obj.get("maxDepth"),
            "maxDuration": obj.get("maxDuration"),
            "maxUrls": obj.get("maxUrls"),
            "otherDomains": obj.get("otherDomains"),
            "project": obj.get("project"),
            "sslCheckingDisabled": obj.get("sslCheckingDisabled"),
            "subdomainIncluded": obj.get("subdomainIncluded"),
            "userAgent": obj.get("userAgent")
        })
        return _obj



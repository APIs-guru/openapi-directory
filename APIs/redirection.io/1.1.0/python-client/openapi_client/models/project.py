# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rule_set_version import RuleSetVersion
from openapi_client.models.user_project import UserProject
from openapi_client.models.user_project_flattened import UserProjectFlattened
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    
    """ # noqa: E501
    complex_rules_count: Optional[StrictInt] = Field(default=None, alias="complexRulesCount")
    complex_rules_updated_at: Optional[datetime] = Field(default=None, alias="complexRulesUpdatedAt")
    configuration: Optional[List[StrictStr]] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    current_version: Optional[RuleSetVersion] = Field(default=None, alias="currentVersion")
    id: Optional[StrictStr] = None
    ignore_project_types: Optional[List[StrictStr]] = Field(default=None, alias="ignoreProjectTypes")
    is_publishing: Optional[StrictBool] = Field(default=None, alias="isPublishing")
    name: StrictStr
    onboarding_completed_demos: Optional[List[StrictStr]] = Field(default=None, alias="onboardingCompletedDemos")
    organization: Optional[Organization] = None
    plan: Optional[StrictInt] = None
    rules_hash: Optional[StrictStr] = Field(default=None, alias="rulesHash")
    slug: Optional[StrictStr] = None
    straight_rules_count: Optional[StrictInt] = Field(default=None, alias="straightRulesCount")
    straight_rules_updated_at: Optional[datetime] = Field(default=None, alias="straightRulesUpdatedAt")
    token: Optional[StrictStr] = None
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    user_projects: Optional[List[UserProject]] = Field(default=None, alias="userProjects")
    users_flattened: Optional[List[UserProjectFlattened]] = Field(default=None, alias="usersFlattened")
    working_version: Optional[RuleSetVersion] = Field(default=None, alias="workingVersion")
    __properties: ClassVar[List[str]] = ["complexRulesCount", "complexRulesUpdatedAt", "configuration", "createdAt", "currentVersion", "id", "ignoreProjectTypes", "isPublishing", "name", "onboardingCompletedDemos", "organization", "plan", "rulesHash", "slug", "straightRulesCount", "straightRulesUpdatedAt", "token", "updatedAt", "userProjects", "usersFlattened", "workingVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "complex_rules_count",
            "complex_rules_updated_at",
            "configuration",
            "created_at",
            "id",
            "is_publishing",
            "plan",
            "rules_hash",
            "slug",
            "straight_rules_count",
            "straight_rules_updated_at",
            "token",
            "updated_at",
            "user_projects",
            "users_flattened",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_version
        if self.current_version:
            _dict['currentVersion'] = self.current_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_projects (list)
        _items = []
        if self.user_projects:
            for _item_user_projects in self.user_projects:
                if _item_user_projects:
                    _items.append(_item_user_projects.to_dict())
            _dict['userProjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users_flattened (list)
        _items = []
        if self.users_flattened:
            for _item_users_flattened in self.users_flattened:
                if _item_users_flattened:
                    _items.append(_item_users_flattened.to_dict())
            _dict['usersFlattened'] = _items
        # override the default output from pydantic by calling `to_dict()` of working_version
        if self.working_version:
            _dict['workingVersion'] = self.working_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "complexRulesCount": obj.get("complexRulesCount"),
            "complexRulesUpdatedAt": obj.get("complexRulesUpdatedAt"),
            "configuration": obj.get("configuration"),
            "createdAt": obj.get("createdAt"),
            "currentVersion": RuleSetVersion.from_dict(obj["currentVersion"]) if obj.get("currentVersion") is not None else None,
            "id": obj.get("id"),
            "ignoreProjectTypes": obj.get("ignoreProjectTypes"),
            "isPublishing": obj.get("isPublishing"),
            "name": obj.get("name"),
            "onboardingCompletedDemos": obj.get("onboardingCompletedDemos"),
            "organization": Organization.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "plan": obj.get("plan"),
            "rulesHash": obj.get("rulesHash"),
            "slug": obj.get("slug"),
            "straightRulesCount": obj.get("straightRulesCount"),
            "straightRulesUpdatedAt": obj.get("straightRulesUpdatedAt"),
            "token": obj.get("token"),
            "updatedAt": obj.get("updatedAt"),
            "userProjects": [UserProject.from_dict(_item) for _item in obj["userProjects"]] if obj.get("userProjects") is not None else None,
            "usersFlattened": [UserProjectFlattened.from_dict(_item) for _item in obj["usersFlattened"]] if obj.get("usersFlattened") is not None else None,
            "workingVersion": RuleSetVersion.from_dict(obj["workingVersion"]) if obj.get("workingVersion") is not None else None
        })
        return _obj

from openapi_client.models.organization import Organization
# TODO: Rewrite to not use raise_errors
Project.model_rebuild(raise_errors=False)


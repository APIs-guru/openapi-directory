# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_read_details import UserReadDetails
from typing import Optional, Set
from typing_extensions import Self

class CrawlReadDetails(BaseModel):
    """
    
    """ # noqa: E501
    archived: Optional[StrictBool] = None
    author: Optional[UserReadDetails] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    error: Optional[StrictStr] = None
    finished_at: Optional[datetime] = Field(default=None, alias="finishedAt")
    first_url: Optional[StrictStr] = Field(default=None, alias="firstUrl")
    id: Optional[StrictStr] = None
    stats: Optional[List[StrictStr]] = None
    trigger: Optional[StrictStr] = None
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["archived", "author", "createdAt", "error", "finishedAt", "firstUrl", "id", "stats", "trigger", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlReadDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "archived",
            "created_at",
            "error",
            "finished_at",
            "first_url",
            "id",
            "trigger",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlReadDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archived": obj.get("archived"),
            "author": UserReadDetails.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "createdAt": obj.get("createdAt"),
            "error": obj.get("error"),
            "finishedAt": obj.get("finishedAt"),
            "firstUrl": obj.get("firstUrl"),
            "id": obj.get("id"),
            "stats": obj.get("stats"),
            "trigger": obj.get("trigger"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



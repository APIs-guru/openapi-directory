# coding: utf-8

"""
    redirection.io

    API documentation for redirection.io

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.organization import Organization
from openapi_client.models.user_organization import UserOrganization
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    
    """ # noqa: E501
    current_password: Optional[Dict[str, Any]] = Field(default=None, alias="currentPassword")
    default_organization: Optional[Organization] = Field(default=None, alias="defaultOrganization")
    email: StrictStr
    id: Optional[StrictStr] = None
    name: StrictStr
    new_email: Optional[StrictStr] = Field(default=None, alias="newEmail")
    new_email_token: Optional[StrictStr] = Field(default=None, alias="newEmailToken")
    new_email_token_expired_at: Optional[datetime] = Field(default=None, alias="newEmailTokenExpiredAt")
    password: Optional[StrictStr] = None
    plain_password: Optional[StrictStr] = Field(default=None, alias="plainPassword")
    plain_password_repeat: Optional[Dict[str, Any]] = Field(default=None, alias="plainPasswordRepeat")
    projects_flattened: Optional[List[StrictStr]] = Field(default=None, alias="projectsFlattened")
    super_admin: Optional[StrictBool] = Field(default=None, alias="superAdmin")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    user_organizations: Optional[List[UserOrganization]] = Field(default=None, alias="userOrganizations")
    user_projects: Optional[List[StrictStr]] = Field(default=None, alias="userProjects")
    __properties: ClassVar[List[str]] = ["currentPassword", "defaultOrganization", "email", "id", "name", "newEmail", "newEmailToken", "newEmailTokenExpiredAt", "password", "plainPassword", "plainPasswordRepeat", "projectsFlattened", "superAdmin", "updatedAt", "userOrganizations", "userProjects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_organization
        if self.default_organization:
            _dict['defaultOrganization'] = self.default_organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_organizations (list)
        _items = []
        if self.user_organizations:
            for _item_user_organizations in self.user_organizations:
                if _item_user_organizations:
                    _items.append(_item_user_organizations.to_dict())
            _dict['userOrganizations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentPassword": obj.get("currentPassword"),
            "defaultOrganization": Organization.from_dict(obj["defaultOrganization"]) if obj.get("defaultOrganization") is not None else None,
            "email": obj.get("email"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "newEmail": obj.get("newEmail"),
            "newEmailToken": obj.get("newEmailToken"),
            "newEmailTokenExpiredAt": obj.get("newEmailTokenExpiredAt"),
            "password": obj.get("password"),
            "plainPassword": obj.get("plainPassword"),
            "plainPasswordRepeat": obj.get("plainPasswordRepeat"),
            "projectsFlattened": obj.get("projectsFlattened"),
            "superAdmin": obj.get("superAdmin"),
            "updatedAt": obj.get("updatedAt"),
            "userOrganizations": [UserOrganization.from_dict(_item) for _item in obj["userOrganizations"]] if obj.get("userOrganizations") is not None else None,
            "userProjects": obj.get("userProjects")
        })
        return _obj



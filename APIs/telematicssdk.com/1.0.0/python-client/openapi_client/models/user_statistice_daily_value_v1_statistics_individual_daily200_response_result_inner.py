# coding: utf-8

"""
    Quick start - Telematics SDK

    # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner(BaseModel):
    """
    UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner
    """ # noqa: E501
    acceleration_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AccelerationCount")
    app_id: Optional[StrictStr] = Field(default=None, alias="AppId")
    average_speed_kmh: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageSpeedKmh")
    average_speed_mileh: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageSpeedMileh")
    breaking_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="BreakingCount")
    company_id: Optional[StrictStr] = Field(default=None, alias="CompanyId")
    cornering_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CorneringCount")
    day_driving_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DayDrivingTime")
    device_token: Optional[StrictStr] = Field(default=None, alias="DeviceToken")
    driver_trips_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DriverTripsCount")
    driving_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DrivingTime")
    instance_id: Optional[StrictStr] = Field(default=None, alias="InstanceId")
    max_speed_kmh: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MaxSpeedKmh")
    max_speed_mileh: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MaxSpeedMileh")
    mileage_km: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MileageKm")
    mileage_mile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MileageMile")
    night_driving_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="NightDrivingTime")
    other_trips_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OtherTripsCount")
    phone_usage_distance_km: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PhoneUsageDistanceKm")
    phone_usage_distance_mile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PhoneUsageDistanceMile")
    phone_usage_duration_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PhoneUsageDurationMin")
    phone_usage_over_speed_distance_km: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PhoneUsageOverSpeedDistanceKm")
    phone_usage_over_speed_distance_mile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PhoneUsageOverSpeedDistanceMile")
    phone_usage_over_speed_duration_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PhoneUsageOverSpeedDurationMin")
    report_date: Optional[StrictStr] = Field(default=None, alias="ReportDate")
    rush_hours_driving_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="RushHoursDrivingTime")
    total_speeding_km: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TotalSpeedingKm")
    total_speeding_mile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TotalSpeedingMile")
    trips_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TripsCount")
    __properties: ClassVar[List[str]] = ["AccelerationCount", "AppId", "AverageSpeedKmh", "AverageSpeedMileh", "BreakingCount", "CompanyId", "CorneringCount", "DayDrivingTime", "DeviceToken", "DriverTripsCount", "DrivingTime", "InstanceId", "MaxSpeedKmh", "MaxSpeedMileh", "MileageKm", "MileageMile", "NightDrivingTime", "OtherTripsCount", "PhoneUsageDistanceKm", "PhoneUsageDistanceMile", "PhoneUsageDurationMin", "PhoneUsageOverSpeedDistanceKm", "PhoneUsageOverSpeedDistanceMile", "PhoneUsageOverSpeedDurationMin", "ReportDate", "RushHoursDrivingTime", "TotalSpeedingKm", "TotalSpeedingMile", "TripsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccelerationCount": obj.get("AccelerationCount"),
            "AppId": obj.get("AppId"),
            "AverageSpeedKmh": obj.get("AverageSpeedKmh"),
            "AverageSpeedMileh": obj.get("AverageSpeedMileh"),
            "BreakingCount": obj.get("BreakingCount"),
            "CompanyId": obj.get("CompanyId"),
            "CorneringCount": obj.get("CorneringCount"),
            "DayDrivingTime": obj.get("DayDrivingTime"),
            "DeviceToken": obj.get("DeviceToken"),
            "DriverTripsCount": obj.get("DriverTripsCount"),
            "DrivingTime": obj.get("DrivingTime"),
            "InstanceId": obj.get("InstanceId"),
            "MaxSpeedKmh": obj.get("MaxSpeedKmh"),
            "MaxSpeedMileh": obj.get("MaxSpeedMileh"),
            "MileageKm": obj.get("MileageKm"),
            "MileageMile": obj.get("MileageMile"),
            "NightDrivingTime": obj.get("NightDrivingTime"),
            "OtherTripsCount": obj.get("OtherTripsCount"),
            "PhoneUsageDistanceKm": obj.get("PhoneUsageDistanceKm"),
            "PhoneUsageDistanceMile": obj.get("PhoneUsageDistanceMile"),
            "PhoneUsageDurationMin": obj.get("PhoneUsageDurationMin"),
            "PhoneUsageOverSpeedDistanceKm": obj.get("PhoneUsageOverSpeedDistanceKm"),
            "PhoneUsageOverSpeedDistanceMile": obj.get("PhoneUsageOverSpeedDistanceMile"),
            "PhoneUsageOverSpeedDurationMin": obj.get("PhoneUsageOverSpeedDurationMin"),
            "ReportDate": obj.get("ReportDate"),
            "RushHoursDrivingTime": obj.get("RushHoursDrivingTime"),
            "TotalSpeedingKm": obj.get("TotalSpeedingKm"),
            "TotalSpeedingMile": obj.get("TotalSpeedingMile"),
            "TripsCount": obj.get("TripsCount")
        })
        return _obj



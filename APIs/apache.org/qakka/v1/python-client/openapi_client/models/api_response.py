# coding: utf-8

"""
    Qakka

    API for Qakka Queue System

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.queue import Queue
from openapi_client.models.queue_message import QueueMessage
from typing import Optional, Set
from typing_extensions import Self

class ApiResponse(BaseModel):
    """
    Response returned by most Queue API calls.
    """ # noqa: E501
    count: Optional[StrictInt] = Field(default=None, description="Count of Queues or QueueMessages returned by the call.")
    message: Optional[StrictStr] = Field(default=None, description="Informative message intended for client.")
    queue_messages: Optional[List[QueueMessage]] = Field(default=None, description="Queues Messages returned by the call, or empty if not applicable.", alias="queueMessages")
    queues: Optional[List[Queue]] = Field(default=None, description="Queues returned but the call, or empty if not applicable.")
    __properties: ClassVar[List[str]] = ["count", "message", "queueMessages", "queues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in queue_messages (list)
        _items = []
        if self.queue_messages:
            for _item_queue_messages in self.queue_messages:
                if _item_queue_messages:
                    _items.append(_item_queue_messages.to_dict())
            _dict['queueMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in queues (list)
        _items = []
        if self.queues:
            for _item_queues in self.queues:
                if _item_queues:
                    _items.append(_item_queues.to_dict())
            _dict['queues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "message": obj.get("message"),
            "queueMessages": [QueueMessage.from_dict(_item) for _item in obj["queueMessages"]] if obj.get("queueMessages") is not None else None,
            "queues": [Queue.from_dict(_item) for _item in obj["queues"]] if obj.get("queues") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Logistics API

    <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>

    The version of the OpenAPI document: v1_beta.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.shipping_quote import ShippingQuote

class TestShippingQuote(unittest.TestCase):
    """ShippingQuote unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ShippingQuote:
        """Test ShippingQuote
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ShippingQuote`
        """
        model = ShippingQuote()
        if include_optional:
            return ShippingQuote(
                creation_date = '',
                expiration_date = '',
                orders = [
                    openapi_client.models.order.Order(
                        channel = '', 
                        order_id = '', )
                    ],
                package_specification = openapi_client.models.package_specification.PackageSpecification(
                    dimensions = openapi_client.models.dimensions.Dimensions(
                        height = '', 
                        length = '', 
                        unit = '', 
                        width = '', ), 
                    weight = openapi_client.models.weight.Weight(
                        unit = '', 
                        value = '', ), ),
                rates = [
                    openapi_client.models.rate.Rate(
                        additional_options = [
                            openapi_client.models.additional_option.AdditionalOption(
                                additional_cost = openapi_client.models.amount.Amount(
                                    currency = '', 
                                    value = '', ), 
                                option_type = '', )
                            ], 
                        base_shipping_cost = openapi_client.models.amount.Amount(
                            currency = '', 
                            value = '', ), 
                        destination_time_zone = '', 
                        max_estimated_delivery_date = '', 
                        min_estimated_delivery_date = '', 
                        pickup_networks = [
                            ''
                            ], 
                        pickup_slots = [
                            openapi_client.models.pickup_slot.PickupSlot(
                                pickup_slot_end_time = '', 
                                pickup_slot_id = '', 
                                pickup_slot_start_time = '', 
                                pickup_slot_time_zone = '', )
                            ], 
                        pickup_type = '', 
                        rate_id = '', 
                        rate_recommendation = [
                            ''
                            ], 
                        shipping_carrier_code = '', 
                        shipping_carrier_name = '', 
                        shipping_service_code = '', 
                        shipping_service_name = '', )
                    ],
                ship_from = openapi_client.models.contact.Contact(
                    company_name = '', 
                    contact_address = openapi_client.models.contact_address.ContactAddress(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = '', 
                        country_code = '', 
                        county = '', 
                        postal_code = '', 
                        state_or_province = '', ), 
                    full_name = '', 
                    primary_phone = openapi_client.models.phone_number.PhoneNumber(
                        phone_number = '', ), ),
                ship_to = openapi_client.models.contact.Contact(
                    company_name = '', 
                    contact_address = openapi_client.models.contact_address.ContactAddress(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = '', 
                        country_code = '', 
                        county = '', 
                        postal_code = '', 
                        state_or_province = '', ), 
                    full_name = '', 
                    primary_phone = openapi_client.models.phone_number.PhoneNumber(
                        phone_number = '', ), ),
                shipping_quote_id = '',
                warnings = [
                    openapi_client.models.error.Error(
                        category = '', 
                        domain = '', 
                        error_id = 56, 
                        input_ref_ids = [
                            ''
                            ], 
                        long_message = '', 
                        message = '', 
                        output_ref_ids = [
                            ''
                            ], 
                        parameters = [
                            openapi_client.models.error_parameter.ErrorParameter(
                                name = '', 
                                value = '', )
                            ], 
                        subdomain = '', )
                    ]
            )
        else:
            return ShippingQuote(
        )
        """

    def testShippingQuote(self):
        """Test ShippingQuote"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

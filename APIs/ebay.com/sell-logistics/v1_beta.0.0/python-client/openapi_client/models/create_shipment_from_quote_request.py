# coding: utf-8

"""
    Logistics API

    <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>

    The version of the OpenAPI document: v1_beta.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_option import AdditionalOption
from openapi_client.models.contact import Contact
from typing import Optional, Set
from typing_extensions import Self

class CreateShipmentFromQuoteRequest(BaseModel):
    """
    This complex type contains the request payload for the <b>createFromShippingQuote</b> method.
    """ # noqa: E501
    additional_options: Optional[List[AdditionalOption]] = Field(default=None, description="Supply a list of one or more shipping options that the seller wants to purchase for this shipment.  <br><br>The <b>baseShippingCost</b> field that's associated with the selected shipping rate is the cost of the base service offered in the rate. In addition to the base service, sellers can add additional shipping services to the base service. Shipping options include things such as shipping insurance or a recipient's signature upon delivery. The cost of any added services is summed with the base shipping cost to determine the final cost for the shipment. All options added to the shipment must be chosen from the set of shipping options offered with the selected rate.", alias="additionalOptions")
    label_custom_message: Optional[StrictStr] = Field(default=None, description="Optional text to be printed on the shipping label if the selected shipping carrier supports custom messages on their labels.", alias="labelCustomMessage")
    label_size: Optional[StrictStr] = Field(default=None, description="The seller's desired label size. Any supplied value is applied only if the shipping carrier supports multiple label sizes, otherwise the carrier's default label size is used.  <br><brCurrently, the only valid value is: <code>4\"x6\"</code>", alias="labelSize")
    rate_id: Optional[StrictStr] = Field(default=None, description="The eBay-assigned ID of the shipping rate that the seller selected for the shipment. This value is generated by a call to <b>createShippingQuote</b> and is returned in the <b>rates.rateId</b> field.", alias="rateId")
    return_to: Optional[Contact] = Field(default=None, alias="returnTo")
    shipping_quote_id: Optional[StrictStr] = Field(default=None, description="The unique eBay-assigned ID of the shipping quote that was generated by a call to <b>createShippingQuote</b>.", alias="shippingQuoteId")
    __properties: ClassVar[List[str]] = ["additionalOptions", "labelCustomMessage", "labelSize", "rateId", "returnTo", "shippingQuoteId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateShipmentFromQuoteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_options (list)
        _items = []
        if self.additional_options:
            for _item_additional_options in self.additional_options:
                if _item_additional_options:
                    _items.append(_item_additional_options.to_dict())
            _dict['additionalOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of return_to
        if self.return_to:
            _dict['returnTo'] = self.return_to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateShipmentFromQuoteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalOptions": [AdditionalOption.from_dict(_item) for _item in obj["additionalOptions"]] if obj.get("additionalOptions") is not None else None,
            "labelCustomMessage": obj.get("labelCustomMessage"),
            "labelSize": obj.get("labelSize"),
            "rateId": obj.get("rateId"),
            "returnTo": Contact.from_dict(obj["returnTo"]) if obj.get("returnTo") is not None else None,
            "shippingQuoteId": obj.get("shippingQuoteId")
        })
        return _obj



# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compatibility_property import CompatibilityProperty
from typing import Optional, Set
from typing_extensions import Self

class GetCompatibilityMetadataResponse(BaseModel):
    """
    This type is used by the base response of the <strong>getCompatibilityProperties</strong> method.
    """ # noqa: E501
    compatibility_properties: Optional[List[CompatibilityProperty]] = Field(default=None, description="This container consists of an array of all compatible vehicle properties applicable to the specified eBay marketplace and eBay category ID.", alias="compatibilityProperties")
    __properties: ClassVar[List[str]] = ["compatibilityProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCompatibilityMetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in compatibility_properties (list)
        _items = []
        if self.compatibility_properties:
            for _item_compatibility_properties in self.compatibility_properties:
                if _item_compatibility_properties:
                    _items.append(_item_compatibility_properties.to_dict())
            _dict['compatibilityProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCompatibilityMetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compatibilityProperties": [CompatibilityProperty.from_dict(_item) for _item in obj["compatibilityProperties"]] if obj.get("compatibilityProperties") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category_aspect import CategoryAspect
from typing import Optional, Set
from typing_extensions import Self

class GetCategoriesAspectResponse(BaseModel):
    """
    GetCategoriesAspectResponse
    """ # noqa: E501
    category_aspects: Optional[List[CategoryAspect]] = Field(default=None, description="An array of aspects that are appropriate or necessary for accurately describing items in a particular leaf category.", alias="categoryAspects")
    category_tree_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the eBay category tree being requested.", alias="categoryTreeId")
    category_tree_version: Optional[StrictStr] = Field(default=None, description="The version of the category tree that is returned in the categoryTreeId field.", alias="categoryTreeVersion")
    __properties: ClassVar[List[str]] = ["categoryAspects", "categoryTreeId", "categoryTreeVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCategoriesAspectResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in category_aspects (list)
        _items = []
        if self.category_aspects:
            for _item_category_aspects in self.category_aspects:
                if _item_category_aspects:
                    _items.append(_item_category_aspects.to_dict())
            _dict['categoryAspects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCategoriesAspectResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryAspects": [CategoryAspect.from_dict(_item) for _item in obj["categoryAspects"]] if obj.get("categoryAspects") is not None else None,
            "categoryTreeId": obj.get("categoryTreeId"),
            "categoryTreeVersion": obj.get("categoryTreeVersion")
        })
        return _obj



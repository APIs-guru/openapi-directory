# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ancestor_reference import AncestorReference
from openapi_client.models.category import Category
from typing import Optional, Set
from typing_extensions import Self

class CategorySuggestion(BaseModel):
    """
    This type contains information about a suggested category tree leaf node that corresponds to keywords provided in the request. It includes details about each of the category's ancestor nodes extending up to the root of the category tree.
    """ # noqa: E501
    category: Optional[Category] = None
    category_tree_node_ancestors: Optional[List[AncestorReference]] = Field(default=None, description="An ordered list of category references that describes the location of the suggested category in the specified category tree. The list identifies the category's ancestry as a sequence of parent nodes, from the current node's immediate parent to the root node of the category tree. Note: The root node of a full default category tree includes categoryId and categoryName fields, but their values should not be relied upon. They provide no useful information for application development.", alias="categoryTreeNodeAncestors")
    category_tree_node_level: Optional[StrictInt] = Field(default=None, description="The absolute level of the category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.", alias="categoryTreeNodeLevel")
    relevancy: Optional[StrictStr] = Field(default=None, description="This field is reserved for internal or future use.")
    __properties: ClassVar[List[str]] = ["category", "categoryTreeNodeAncestors", "categoryTreeNodeLevel", "relevancy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CategorySuggestion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in category_tree_node_ancestors (list)
        _items = []
        if self.category_tree_node_ancestors:
            for _item_category_tree_node_ancestors in self.category_tree_node_ancestors:
                if _item_category_tree_node_ancestors:
                    _items.append(_item_category_tree_node_ancestors.to_dict())
            _dict['categoryTreeNodeAncestors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CategorySuggestion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": Category.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "categoryTreeNodeAncestors": [AncestorReference.from_dict(_item) for _item in obj["categoryTreeNodeAncestors"]] if obj.get("categoryTreeNodeAncestors") is not None else None,
            "categoryTreeNodeLevel": obj.get("categoryTreeNodeLevel"),
            "relevancy": obj.get("relevancy")
        })
        return _obj



# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category import Category
from typing import Optional, Set
from typing_extensions import Self

class CategoryTreeNode(BaseModel):
    """
    This type contains information about all nodes of a category tree or subtree hierarchy, including and below the specified <b>Category</b>, down to the leaf nodes. It is a recursive structure.
    """ # noqa: E501
    category: Optional[Category] = None
    category_tree_node_level: Optional[StrictInt] = Field(default=None, description="The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.", alias="categoryTreeNodeLevel")
    child_category_tree_nodes: Optional[List[CategoryTreeNode]] = Field(default=None, description="An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).", alias="childCategoryTreeNodes")
    leaf_category_tree_node: Optional[StrictBool] = Field(default=None, description="A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.", alias="leafCategoryTreeNode")
    parent_category_tree_node_href: Optional[StrictStr] = Field(default=None, description="The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.", alias="parentCategoryTreeNodeHref")
    __properties: ClassVar[List[str]] = ["category", "categoryTreeNodeLevel", "childCategoryTreeNodes", "leafCategoryTreeNode", "parentCategoryTreeNodeHref"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CategoryTreeNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in child_category_tree_nodes (list)
        _items = []
        if self.child_category_tree_nodes:
            for _item_child_category_tree_nodes in self.child_category_tree_nodes:
                if _item_child_category_tree_nodes:
                    _items.append(_item_child_category_tree_nodes.to_dict())
            _dict['childCategoryTreeNodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CategoryTreeNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": Category.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "categoryTreeNodeLevel": obj.get("categoryTreeNodeLevel"),
            "childCategoryTreeNodes": [CategoryTreeNode.from_dict(_item) for _item in obj["childCategoryTreeNodes"]] if obj.get("childCategoryTreeNodes") is not None else None,
            "leafCategoryTreeNode": obj.get("leafCategoryTreeNode"),
            "parentCategoryTreeNodeHref": obj.get("parentCategoryTreeNodeHref")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
CategoryTreeNode.model_rebuild(raise_errors=False)


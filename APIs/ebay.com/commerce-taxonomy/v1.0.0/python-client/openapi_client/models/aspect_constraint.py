# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AspectConstraint(BaseModel):
    """
    This type contains information about the formatting, occurrence, and support of an aspect.
    """ # noqa: E501
    aspect_applicable_to: Optional[List[StrictStr]] = Field(default=None, description="This value indicate if the aspect identified by the aspects.localizedAspectName field is a product aspect (relevant to catalog products in the category) or an item/instance aspect, which is an aspect whose value will vary based on a particular instance of the product.", alias="aspectApplicableTo")
    aspect_data_type: Optional[StrictStr] = Field(default=None, description="The data type of this aspect. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectDataTypeEnum'>eBay API documentation</a>", alias="aspectDataType")
    aspect_enabled_for_variations: Optional[StrictBool] = Field(default=None, description="A value of true indicates that this aspect can be used to help identify item variations.", alias="aspectEnabledForVariations")
    aspect_format: Optional[StrictStr] = Field(default=None, description="Returned only if the value of aspectDataType identifies a data type that requires specific formatting. Currently, this field provides formatting hints as follows: DATE: YYYY, YYYYMM, YYYYMMDD NUMBER: int32, double", alias="aspectFormat")
    aspect_max_length: Optional[StrictInt] = Field(default=None, description="The maximum length of the item/instance aspect's value. The seller must make sure not to exceed this length when specifying the instance aspect's value for a product. This field is only returned for instance aspects.", alias="aspectMaxLength")
    aspect_mode: Optional[StrictStr] = Field(default=None, description="The manner in which values of this aspect must be specified by the seller (as free text or by selecting from available options). For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectModeEnum'>eBay API documentation</a>", alias="aspectMode")
    aspect_required: Optional[StrictBool] = Field(default=None, description="A value of true indicates that this aspect is required when offering items in the specified category.", alias="aspectRequired")
    aspect_usage: Optional[StrictStr] = Field(default=None, description="The enumeration value returned in this field will indicate if the corresponding aspect is recommended or optional. Note: This field is always returned, even for hard-mandated/required aspects (where aspectRequired: true). The value returned for required aspects will be RECOMMENDED, but they are actually required and a seller will be blocked from listing or revising an item without these aspects. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectUsageEnum'>eBay API documentation</a>", alias="aspectUsage")
    expected_required_by_date: Optional[StrictStr] = Field(default=None, description="The expected date after which the aspect will be required. Note: The value returned in this field specifies only an approximate date, which may not reflect the actual date after which the aspect is required.", alias="expectedRequiredByDate")
    item_to_aspect_cardinality: Optional[StrictStr] = Field(default=None, description="Indicates whether this aspect can accept single or multiple values for items in the specified category. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ItemToAspectCardinalityEnum'>eBay API documentation</a>", alias="itemToAspectCardinality")
    __properties: ClassVar[List[str]] = ["aspectApplicableTo", "aspectDataType", "aspectEnabledForVariations", "aspectFormat", "aspectMaxLength", "aspectMode", "aspectRequired", "aspectUsage", "expectedRequiredByDate", "itemToAspectCardinality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AspectConstraint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AspectConstraint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aspectApplicableTo": obj.get("aspectApplicableTo"),
            "aspectDataType": obj.get("aspectDataType"),
            "aspectEnabledForVariations": obj.get("aspectEnabledForVariations"),
            "aspectFormat": obj.get("aspectFormat"),
            "aspectMaxLength": obj.get("aspectMaxLength"),
            "aspectMode": obj.get("aspectMode"),
            "aspectRequired": obj.get("aspectRequired"),
            "aspectUsage": obj.get("aspectUsage"),
            "expectedRequiredByDate": obj.get("expectedRequiredByDate"),
            "itemToAspectCardinality": obj.get("itemToAspectCardinality")
        })
        return _obj



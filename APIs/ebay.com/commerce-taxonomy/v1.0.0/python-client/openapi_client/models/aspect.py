# coding: utf-8

"""
    Taxonomy API

    Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aspect_constraint import AspectConstraint
from openapi_client.models.aspect_value import AspectValue
from openapi_client.models.relevance_indicator import RelevanceIndicator
from typing import Optional, Set
from typing_extensions import Self

class Aspect(BaseModel):
    """
    This type contains information about an item attribute (for example, color) that is appropriate or necessary for accurately describing items in a particular leaf category. Sellers are required or encouraged to provide one or more values of this aspect when offering an item in that category on eBay.
    """ # noqa: E501
    aspect_constraint: Optional[AspectConstraint] = Field(default=None, alias="aspectConstraint")
    aspect_values: Optional[List[AspectValue]] = Field(default=None, description="A list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.", alias="aspectValues")
    localized_aspect_name: Optional[StrictStr] = Field(default=None, description="The localized name of this aspect (for example: Colour on the eBay UK site). Note: This name is always localized for the specified marketplace.", alias="localizedAspectName")
    relevance_indicator: Optional[RelevanceIndicator] = Field(default=None, alias="relevanceIndicator")
    __properties: ClassVar[List[str]] = ["aspectConstraint", "aspectValues", "localizedAspectName", "relevanceIndicator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Aspect from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aspect_constraint
        if self.aspect_constraint:
            _dict['aspectConstraint'] = self.aspect_constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in aspect_values (list)
        _items = []
        if self.aspect_values:
            for _item_aspect_values in self.aspect_values:
                if _item_aspect_values:
                    _items.append(_item_aspect_values.to_dict())
            _dict['aspectValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of relevance_indicator
        if self.relevance_indicator:
            _dict['relevanceIndicator'] = self.relevance_indicator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Aspect from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aspectConstraint": AspectConstraint.from_dict(obj["aspectConstraint"]) if obj.get("aspectConstraint") is not None else None,
            "aspectValues": [AspectValue.from_dict(_item) for _item in obj["aspectValues"]] if obj.get("aspectValues") is not None else None,
            "localizedAspectName": obj.get("localizedAspectName"),
            "relevanceIndicator": RelevanceIndicator.from_dict(obj["relevanceIndicator"]) if obj.get("relevanceIndicator") is not None else None
        })
        return _obj



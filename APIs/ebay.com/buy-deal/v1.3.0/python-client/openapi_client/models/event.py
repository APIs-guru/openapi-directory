# coding: utf-8

"""
    Deal API

    <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.

    The version of the OpenAPI document: v1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.coupon import Coupon
from openapi_client.models.image import Image
from openapi_client.models.terms import Terms
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    The result set for the event search.
    """ # noqa: E501
    applicable_coupons: Optional[List[Coupon]] = Field(default=None, description="A list of coupons associated with the event.", alias="applicableCoupons")
    description: Optional[StrictStr] = Field(default=None, description="The event description.")
    end_date: Optional[StrictStr] = Field(default=None, description="The end date for the event.", alias="endDate")
    event_affiliate_web_url: Optional[StrictStr] = Field(default=None, description="The URL of the View Event page for the event, which includes the affiliate tracking ID.", alias="eventAffiliateWebUrl")
    event_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the event.", alias="eventId")
    event_web_url: Optional[StrictStr] = Field(default=None, description="The web URL for the event.", alias="eventWebUrl")
    images: Optional[List[Image]] = Field(default=None, description="The images for the event.")
    start_date: Optional[StrictStr] = Field(default=None, description="The start date for the event.", alias="startDate")
    terms: Optional[Terms] = None
    title: Optional[StrictStr] = Field(default=None, description="The title of the event.")
    __properties: ClassVar[List[str]] = ["applicableCoupons", "description", "endDate", "eventAffiliateWebUrl", "eventId", "eventWebUrl", "images", "startDate", "terms", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in applicable_coupons (list)
        _items = []
        if self.applicable_coupons:
            for _item_applicable_coupons in self.applicable_coupons:
                if _item_applicable_coupons:
                    _items.append(_item_applicable_coupons.to_dict())
            _dict['applicableCoupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicableCoupons": [Coupon.from_dict(_item) for _item in obj["applicableCoupons"]] if obj.get("applicableCoupons") is not None else None,
            "description": obj.get("description"),
            "endDate": obj.get("endDate"),
            "eventAffiliateWebUrl": obj.get("eventAffiliateWebUrl"),
            "eventId": obj.get("eventId"),
            "eventWebUrl": obj.get("eventWebUrl"),
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "startDate": obj.get("startDate"),
            "terms": Terms.from_dict(obj["terms"]) if obj.get("terms") is not None else None,
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    Deal API

    <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.

    The version of the OpenAPI document: v1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deal_item import DealItem
from typing import Optional, Set
from typing_extensions import Self

class DealItemSearchResponse(BaseModel):
    """
    The result set for the deal item search.
    """ # noqa: E501
    deal_items: Optional[List[DealItem]] = Field(default=None, description="A list of deal items that match the search criteria.", alias="dealItems")
    href: Optional[StrictStr] = Field(default=None, description="The relative path to the current set of results.")
    limit: Optional[StrictInt] = Field(default=None, description="The maximum number of items, from the current result set, returned on a single page. Default: 20")
    next: Optional[StrictStr] = Field(default=None, description="The relative path to the next set of results.")
    offset: Optional[StrictInt] = Field(default=None, description="The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0")
    prev: Optional[StrictStr] = Field(default=None, description="The relative path to the previous set of results.")
    total: Optional[StrictInt] = Field(default=None, description="The total number of matches for the search criteria.")
    __properties: ClassVar[List[str]] = ["dealItems", "href", "limit", "next", "offset", "prev", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DealItemSearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deal_items (list)
        _items = []
        if self.deal_items:
            for _item_deal_items in self.deal_items:
                if _item_deal_items:
                    _items.append(_item_deal_items.to_dict())
            _dict['dealItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DealItemSearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dealItems": [DealItem.from_dict(_item) for _item in obj["dealItems"]] if obj.get("dealItems") is not None else None,
            "href": obj.get("href"),
            "limit": obj.get("limit"),
            "next": obj.get("next"),
            "offset": obj.get("offset"),
            "prev": obj.get("prev"),
            "total": obj.get("total")
        })
        return _obj



# coding: utf-8

"""
    Deal API

    <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.

    The version of the OpenAPI document: v1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.image import Image
from openapi_client.models.marketing_price import MarketingPrice
from openapi_client.models.shipping_option import ShippingOption
from typing import Optional, Set
from typing_extensions import Self

class DealItem(BaseModel):
    """
    The detailed data returned for the deal item.
    """ # noqa: E501
    additional_images: Optional[List[Image]] = Field(default=None, description="The additional images for the deal item.", alias="additionalImages")
    category_ancestor_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of the ancestors for the primary category.", alias="categoryAncestorIds")
    category_id: Optional[StrictStr] = Field(default=None, description="The ID of the leaf category for the deal item. A leaf category is the lowest level in a category and has no children.", alias="categoryId")
    commissionable: Optional[StrictBool] = Field(default=None, description="A boolean value specifying whether the listing has commission.")
    deal_affiliate_web_url: Optional[StrictStr] = Field(default=None, description="The deal associated with the item with affiliate attribution.", alias="dealAffiliateWebUrl")
    deal_end_date: Optional[StrictStr] = Field(default=None, description="The date after which the deal ends.", alias="dealEndDate")
    deal_start_date: Optional[StrictStr] = Field(default=None, description="The date on which the deal starts.", alias="dealStartDate")
    deal_web_url: Optional[StrictStr] = Field(default=None, description="The web URL for the deal associated with the item.", alias="dealWebUrl")
    energy_efficiency_class: Optional[StrictStr] = Field(default=None, description="A string value specifying the Energy Efficiency class.", alias="energyEfficiencyClass")
    image: Optional[Image] = None
    item_affiliate_web_url: Optional[StrictStr] = Field(default=None, description="The item web URL with affiliate attribution.", alias="itemAffiliateWebUrl")
    item_group_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the deal item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.", alias="itemGroupId")
    item_group_type: Optional[StrictStr] = Field(default=None, description="An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>", alias="itemGroupType")
    item_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the deal item. Note: This field is only returned for single-SKU items.", alias="itemId")
    item_web_url: Optional[StrictStr] = Field(default=None, description="The web URL for the deal item.", alias="itemWebUrl")
    legacy_item_id: Optional[StrictStr] = Field(default=None, description="The legacy item ID associated with the deal item.", alias="legacyItemId")
    marketing_price: Optional[MarketingPrice] = Field(default=None, alias="marketingPrice")
    price: Optional[Amount] = None
    qualified_programs: Optional[List[StrictStr]] = Field(default=None, description="A list of programs applicable to the item.", alias="qualifiedPrograms")
    shipping_options: Optional[List[ShippingOption]] = Field(default=None, description="The cost required to ship the deal item.", alias="shippingOptions")
    title: Optional[StrictStr] = Field(default=None, description="The title of the deal item.")
    unit_price: Optional[Amount] = Field(default=None, alias="unitPrice")
    unit_pricing_measure: Optional[StrictStr] = Field(default=None, description="The designation used to specify the quantity of the deal item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;", alias="unitPricingMeasure")
    __properties: ClassVar[List[str]] = ["additionalImages", "categoryAncestorIds", "categoryId", "commissionable", "dealAffiliateWebUrl", "dealEndDate", "dealStartDate", "dealWebUrl", "energyEfficiencyClass", "image", "itemAffiliateWebUrl", "itemGroupId", "itemGroupType", "itemId", "itemWebUrl", "legacyItemId", "marketingPrice", "price", "qualifiedPrograms", "shippingOptions", "title", "unitPrice", "unitPricingMeasure"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DealItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_images (list)
        _items = []
        if self.additional_images:
            for _item_additional_images in self.additional_images:
                if _item_additional_images:
                    _items.append(_item_additional_images.to_dict())
            _dict['additionalImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketing_price
        if self.marketing_price:
            _dict['marketingPrice'] = self.marketing_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_options (list)
        _items = []
        if self.shipping_options:
            for _item_shipping_options in self.shipping_options:
                if _item_shipping_options:
                    _items.append(_item_shipping_options.to_dict())
            _dict['shippingOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of unit_price
        if self.unit_price:
            _dict['unitPrice'] = self.unit_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DealItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalImages": [Image.from_dict(_item) for _item in obj["additionalImages"]] if obj.get("additionalImages") is not None else None,
            "categoryAncestorIds": obj.get("categoryAncestorIds"),
            "categoryId": obj.get("categoryId"),
            "commissionable": obj.get("commissionable"),
            "dealAffiliateWebUrl": obj.get("dealAffiliateWebUrl"),
            "dealEndDate": obj.get("dealEndDate"),
            "dealStartDate": obj.get("dealStartDate"),
            "dealWebUrl": obj.get("dealWebUrl"),
            "energyEfficiencyClass": obj.get("energyEfficiencyClass"),
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "itemAffiliateWebUrl": obj.get("itemAffiliateWebUrl"),
            "itemGroupId": obj.get("itemGroupId"),
            "itemGroupType": obj.get("itemGroupType"),
            "itemId": obj.get("itemId"),
            "itemWebUrl": obj.get("itemWebUrl"),
            "legacyItemId": obj.get("legacyItemId"),
            "marketingPrice": MarketingPrice.from_dict(obj["marketingPrice"]) if obj.get("marketingPrice") is not None else None,
            "price": Amount.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "qualifiedPrograms": obj.get("qualifiedPrograms"),
            "shippingOptions": [ShippingOption.from_dict(_item) for _item in obj["shippingOptions"]] if obj.get("shippingOptions") is not None else None,
            "title": obj.get("title"),
            "unitPrice": Amount.from_dict(obj["unitPrice"]) if obj.get("unitPrice") is not None else None,
            "unitPricingMeasure": obj.get("unitPricingMeasure")
        })
        return _obj



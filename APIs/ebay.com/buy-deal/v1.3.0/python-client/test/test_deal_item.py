# coding: utf-8

"""
    Deal API

    <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.

    The version of the OpenAPI document: v1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deal_item import DealItem

class TestDealItem(unittest.TestCase):
    """DealItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DealItem:
        """Test DealItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DealItem`
        """
        model = DealItem()
        if include_optional:
            return DealItem(
                additional_images = [
                    openapi_client.models.image.Image(
                        height = '', 
                        image_url = '', 
                        text = '', 
                        width = '', )
                    ],
                category_ancestor_ids = [
                    ''
                    ],
                category_id = '',
                commissionable = True,
                deal_affiliate_web_url = '',
                deal_end_date = '',
                deal_start_date = '',
                deal_web_url = '',
                energy_efficiency_class = '',
                image = openapi_client.models.image.Image(
                    height = '', 
                    image_url = '', 
                    text = '', 
                    width = '', ),
                item_affiliate_web_url = '',
                item_group_id = '',
                item_group_type = '',
                item_id = '',
                item_web_url = '',
                legacy_item_id = '',
                marketing_price = openapi_client.models.marketing_price.MarketingPrice(
                    discount_amount = openapi_client.models.amount.Amount(
                        currency = '', 
                        value = '', ), 
                    discount_percentage = '', 
                    original_price = openapi_client.models.amount.Amount(
                        currency = '', 
                        value = '', ), 
                    price_treatment = '', ),
                price = openapi_client.models.amount.Amount(
                    currency = '', 
                    value = '', ),
                qualified_programs = [
                    ''
                    ],
                shipping_options = [
                    openapi_client.models.shipping_option.ShippingOption(
                        shipping_cost = openapi_client.models.amount.Amount(
                            currency = '', 
                            value = '', ), 
                        shipping_cost_type = '', )
                    ],
                title = '',
                unit_price = openapi_client.models.amount.Amount(
                    currency = '', 
                    value = '', ),
                unit_pricing_measure = ''
            )
        else:
            return DealItem(
        )
        """

    def testDealItem(self):
        """Test DealItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

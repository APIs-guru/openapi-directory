# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.payment_policy_response import PaymentPolicyResponse

class TestPaymentPolicyResponse(unittest.TestCase):
    """PaymentPolicyResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentPolicyResponse:
        """Test PaymentPolicyResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentPolicyResponse`
        """
        model = PaymentPolicyResponse()
        if include_optional:
            return PaymentPolicyResponse(
                href = '',
                limit = 56,
                next = '',
                offset = 56,
                payment_policies = [
                    openapi_client.models.payment_policy.PaymentPolicy(
                        category_types = [
                            openapi_client.models.category_type.CategoryType(
                                default = True, 
                                name = '', )
                            ], 
                        deposit = openapi_client.models.deposit.Deposit(
                            amount = openapi_client.models.amount.Amount(
                                currency = '', 
                                value = '', ), 
                            due_in = openapi_client.models.time_duration.TimeDuration(
                                unit = '', 
                                value = 56, ), 
                            payment_methods = [
                                openapi_client.models.payment_method.PaymentMethod(
                                    brands = [
                                        ''
                                        ], 
                                    payment_method_type = '', 
                                    recipient_account_reference = openapi_client.models.recipient_account_reference.RecipientAccountReference(
                                        reference_id = '', 
                                        reference_type = '', ), )
                                ], ), 
                        description = '', 
                        full_payment_due_in = openapi_client.models.time_duration.TimeDuration(
                            unit = '', 
                            value = 56, ), 
                        immediate_pay = True, 
                        marketplace_id = '', 
                        name = '', 
                        payment_instructions = '', 
                        payment_methods = [
                            openapi_client.models.payment_method.PaymentMethod(
                                payment_method_type = '', )
                            ], 
                        payment_policy_id = '', )
                    ],
                prev = '',
                total = 56
            )
        else:
            return PaymentPolicyResponse(
        )
        """

    def testPaymentPolicyResponse(self):
        """Test PaymentPolicyResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

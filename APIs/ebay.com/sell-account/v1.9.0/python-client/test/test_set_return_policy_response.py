# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.set_return_policy_response import SetReturnPolicyResponse

class TestSetReturnPolicyResponse(unittest.TestCase):
    """SetReturnPolicyResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SetReturnPolicyResponse:
        """Test SetReturnPolicyResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SetReturnPolicyResponse`
        """
        model = SetReturnPolicyResponse()
        if include_optional:
            return SetReturnPolicyResponse(
                category_types = [
                    openapi_client.models.category_type.CategoryType(
                        default = True, 
                        name = '', )
                    ],
                description = '',
                extended_holiday_returns_offered = True,
                international_override = openapi_client.models.international_return_override_type.InternationalReturnOverrideType(
                    return_method = '', 
                    return_period = openapi_client.models.time_duration.TimeDuration(
                        unit = '', 
                        value = 56, ), 
                    return_shipping_cost_payer = '', 
                    returns_accepted = True, ),
                marketplace_id = '',
                name = '',
                refund_method = '',
                restocking_fee_percentage = '',
                return_instructions = '',
                return_method = '',
                return_period = openapi_client.models.time_duration.TimeDuration(
                    unit = '', 
                    value = 56, ),
                return_policy_id = '',
                return_shipping_cost_payer = '',
                returns_accepted = True,
                warnings = [
                    openapi_client.models.error.Error(
                        category = '', 
                        domain = '', 
                        error_id = 56, 
                        input_ref_ids = [
                            ''
                            ], 
                        long_message = '', 
                        message = '', 
                        output_ref_ids = [
                            ''
                            ], 
                        parameters = [
                            openapi_client.models.error_parameter.ErrorParameter(
                                name = '', 
                                value = '', )
                            ], 
                        subdomain = '', )
                    ]
            )
        else:
            return SetReturnPolicyResponse(
        )
        """

    def testSetReturnPolicyResponse(self):
        """Test SetReturnPolicyResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

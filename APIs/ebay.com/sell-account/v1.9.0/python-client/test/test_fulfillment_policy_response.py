# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.fulfillment_policy_response import FulfillmentPolicyResponse

class TestFulfillmentPolicyResponse(unittest.TestCase):
    """FulfillmentPolicyResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FulfillmentPolicyResponse:
        """Test FulfillmentPolicyResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FulfillmentPolicyResponse`
        """
        model = FulfillmentPolicyResponse()
        if include_optional:
            return FulfillmentPolicyResponse(
                fulfillment_policies = [
                    openapi_client.models.fulfillment_policy.FulfillmentPolicy(
                        category_types = [
                            openapi_client.models.category_type.CategoryType(
                                default = True, 
                                name = '', )
                            ], 
                        description = '', 
                        freight_shipping = True, 
                        fulfillment_policy_id = '', 
                        global_shipping = True, 
                        handling_time = openapi_client.models.time_duration.TimeDuration(
                            unit = '', 
                            value = 56, ), 
                        local_pickup = True, 
                        marketplace_id = '', 
                        name = '', 
                        pickup_drop_off = True, 
                        ship_to_locations = openapi_client.models.region_set.RegionSet(
                            region_excluded = [
                                openapi_client.models.region.Region(
                                    region_name = '', 
                                    region_type = '', )
                                ], 
                            region_included = [
                                openapi_client.models.region.Region(
                                    region_name = '', 
                                    region_type = '', )
                                ], ), 
                        shipping_options = [
                            openapi_client.models.shipping_option.ShippingOption(
                                cost_type = '', 
                                insurance_fee = openapi_client.models.amount.Amount(
                                    currency = '', 
                                    value = '', ), 
                                insurance_offered = True, 
                                option_type = '', 
                                package_handling_cost = openapi_client.models.amount.Amount(
                                    currency = '', 
                                    value = '', ), 
                                rate_table_id = '', 
                                shipping_discount_profile_id = '', 
                                shipping_promotion_offered = True, 
                                shipping_services = [
                                    openapi_client.models.shipping_service.ShippingService(
                                        additional_shipping_cost = , 
                                        buyer_responsible_for_pickup = True, 
                                        buyer_responsible_for_shipping = True, 
                                        cash_on_delivery_fee = , 
                                        free_shipping = True, 
                                        shipping_carrier_code = '', 
                                        shipping_cost = , 
                                        shipping_service_code = '', 
                                        sort_order = 56, 
                                        surcharge = , )
                                    ], )
                            ], )
                    ],
                href = '',
                limit = 56,
                next = '',
                offset = 56,
                prev = '',
                total = 56
            )
        else:
            return FulfillmentPolicyResponse(
        )
        """

    def testFulfillmentPolicyResponse(self):
        """Test FulfillmentPolicyResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

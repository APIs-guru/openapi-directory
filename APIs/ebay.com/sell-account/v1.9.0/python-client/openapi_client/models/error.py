# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_parameter import ErrorParameter
from typing import Optional, Set
from typing_extensions import Self

class Error(BaseModel):
    """
    A container that defines the elements of error and warning messages.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The category type for this error or warning. It is a string that can have one of three values:<ul><li><code>Application</code>: Indicates an exception or error occurred in the application code or at runtime. Examples include catching an exception in a service's business logic, system failures, or request errors from a dependency.</li><li><code>Business</code>: Used when your service or a dependent service refused to continue processing on the resource because of a business rule violation such as \"Seller does not ship item to Antarctica\" or \"Buyer ineligible to purchase an alcoholic item\". Business errors are not syntactical input errors.</li><li><code>Request</code>: Used when there is anything wrong with the request, such as authentication, syntactical errors, rate limiting or missing headers, bad HTTP header values, and so on.</li></ul>")
    domain: Optional[StrictStr] = Field(default=None, description="Name of the domain ,or primary system, of the service or application where the error occurred.")
    error_id: Optional[StrictInt] = Field(default=None, description="A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.", alias="errorId")
    input_ref_ids: Optional[List[StrictStr]] = Field(default=None, description="Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use <i>JSONPath</i> notation.", alias="inputRefIds")
    long_message: Optional[StrictStr] = Field(default=None, description="A more detailed explanation of the error than given in the <code>message</code> error field.", alias="longMessage")
    message: Optional[StrictStr] = Field(default=None, description="Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.")
    output_ref_ids: Optional[List[StrictStr]] = Field(default=None, description="Identifies specific response elements associated with the error, if any. Path format is the same as <code>inputRefId</code>.", alias="outputRefIds")
    parameters: Optional[List[ErrorParameter]] = Field(default=None, description="This optional list of name/value pairs that contain context-specific <code>ErrorParameter</code> objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each <code>ErrorParameter</code> object consists of two fields, a <code>name</code> and a <code>value</code>.")
    subdomain: Optional[StrictStr] = Field(default=None, description="If present, indicates the subsystem in which the error occurred.")
    __properties: ClassVar[List[str]] = ["category", "domain", "errorId", "inputRefIds", "longMessage", "message", "outputRefIds", "parameters", "subdomain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Error from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "domain": obj.get("domain"),
            "errorId": obj.get("errorId"),
            "inputRefIds": obj.get("inputRefIds"),
            "longMessage": obj.get("longMessage"),
            "message": obj.get("message"),
            "outputRefIds": obj.get("outputRefIds"),
            "parameters": [ErrorParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "subdomain": obj.get("subdomain")
        })
        return _obj



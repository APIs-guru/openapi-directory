# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category_type import CategoryType
from openapi_client.models.deposit import Deposit
from openapi_client.models.payment_method import PaymentMethod
from openapi_client.models.time_duration import TimeDuration
from typing import Optional, Set
from typing_extensions import Self

class PaymentPolicyRequest(BaseModel):
    """
    This root container defines a seller's payment business policy for a specific marketplace and category group. This type is used when creating or updating a payment business policy.
    """ # noqa: E501
    category_types: Optional[List[CategoryType]] = Field(default=None, description="This container is used to specify whether the payment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.", alias="categoryTypes")
    deposit: Optional[Deposit] = None
    description: Optional[StrictStr] = Field(default=None, description="A seller-defined description of the payment business policy. This description is only for the seller's use, and is not exposed on any eBay pages.  <br/><br/><b>Max length</b>: 250")
    full_payment_due_in: Optional[TimeDuration] = Field(default=None, alias="fullPaymentDueIn")
    immediate_pay: Optional[StrictBool] = Field(default=None, description="This field should be included and set to <code>true</code> if the seller wants to require immediate payment from the buyer for: <ul><li>A fixed-price item</li><li>An auction item where the buyer is using the 'Buy it Now' option</li><li>A deposit for a motor vehicle listing</li></ul><br /><b>Default:</b> False", alias="immediatePay")
    marketplace_id: Optional[StrictStr] = Field(default=None, description="The ID of the eBay marketplace to which this payment business policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>", alias="marketplaceId")
    name: Optional[StrictStr] = Field(default=None, description="A seller-defined name for this payment business policy. Names must be unique for policies assigned to the same marketplace.<br /><br /><b>Max length:</b> 64")
    payment_instructions: Optional[StrictStr] = Field(default=None, description="<p class=\"tablenote\"><b>Note:</b> DO NOT USE THIS FIELD. Payment instructions are no longer supported by payment business policies.</p>A free-form string field that allows sellers to add detailed payment instructions to their listings.", alias="paymentInstructions")
    payment_methods: Optional[List[PaymentMethod]] = Field(default=None, description="<p class=\"tablenote\"><b>Note:</b> This field applies only when the seller needs to specify one or more offline payment methods. eBay now manages the electronic payment options available to buyers to pay for the item.</p>This array is used to specify one or more offline payment methods that will be accepted for payment that occurs off of eBay's platform.", alias="paymentMethods")
    __properties: ClassVar[List[str]] = ["categoryTypes", "deposit", "description", "fullPaymentDueIn", "immediatePay", "marketplaceId", "name", "paymentInstructions", "paymentMethods"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentPolicyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in category_types (list)
        _items = []
        if self.category_types:
            for _item_category_types in self.category_types:
                if _item_category_types:
                    _items.append(_item_category_types.to_dict())
            _dict['categoryTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of deposit
        if self.deposit:
            _dict['deposit'] = self.deposit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of full_payment_due_in
        if self.full_payment_due_in:
            _dict['fullPaymentDueIn'] = self.full_payment_due_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_methods (list)
        _items = []
        if self.payment_methods:
            for _item_payment_methods in self.payment_methods:
                if _item_payment_methods:
                    _items.append(_item_payment_methods.to_dict())
            _dict['paymentMethods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentPolicyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryTypes": [CategoryType.from_dict(_item) for _item in obj["categoryTypes"]] if obj.get("categoryTypes") is not None else None,
            "deposit": Deposit.from_dict(obj["deposit"]) if obj.get("deposit") is not None else None,
            "description": obj.get("description"),
            "fullPaymentDueIn": TimeDuration.from_dict(obj["fullPaymentDueIn"]) if obj.get("fullPaymentDueIn") is not None else None,
            "immediatePay": obj.get("immediatePay"),
            "marketplaceId": obj.get("marketplaceId"),
            "name": obj.get("name"),
            "paymentInstructions": obj.get("paymentInstructions"),
            "paymentMethods": [PaymentMethod.from_dict(_item) for _item in obj["paymentMethods"]] if obj.get("paymentMethods") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category_type import CategoryType
from openapi_client.models.region_set import RegionSet
from openapi_client.models.shipping_option import ShippingOption
from openapi_client.models.time_duration import TimeDuration
from typing import Optional, Set
from typing_extensions import Self

class FulfillmentPolicy(BaseModel):
    """
    This type is used by the <b>fulfillmentPolicy</b> response container, a container which defines a seller's fulfillment policy for a specific marketplace.
    """ # noqa: E501
    category_types: Optional[List[CategoryType]] = Field(default=None, description="This container indicates whether the fulfillment policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.", alias="categoryTypes")
    description: Optional[StrictStr] = Field(default=None, description="A seller-defined description of the fulfillment policy. This description is only for the seller's use, and is not exposed on any eBay pages. This field is returned if set for the policy. <br/><br/><b>Max length</b>: 250")
    freight_shipping: Optional[StrictBool] = Field(default=None, description="If returned as <code>true</code>, the seller offers freight shipping. Freight shipping can be used for large items over 150 lbs.", alias="freightShipping")
    fulfillment_policy_id: Optional[StrictStr] = Field(default=None, description="A unique eBay-assigned ID for the fulfillment policy. This ID is generated when the policy is created.", alias="fulfillmentPolicyId")
    global_shipping: Optional[StrictBool] = Field(default=None, description="If returned as <code>true</code>, eBay's Global Shipping Program will be used by the seller to ship items to international locations.<br /><br /><span class=\"tablenote\"><b>Note</b>: On the US marketplace, the <em><b>Global Shipping Program</b></em> is scheduled to be replaced by a new intermediated international shipping program called <em><b>eBay International Shipping</b></em>. US sellers who are opted in to the Global Shipping Program will be automatically opted in to eBay International Shipping when it becomes available to them. All US sellers will be migrated by March 31, 2023. <br /><br />eBay International Shipping is an account level setting, and no field needs to be set in a Fulfillment business policy to enable it. As long as the US seller's account is opted in to eBay International Shipping, this shipping option will be enabled automatically for all listings where international shipping is available. <br /><br />A US seller who is opted in to eBay International Shipping can also specify individual international shipping service options for a Fulfillment business policy.</span>", alias="globalShipping")
    handling_time: Optional[TimeDuration] = Field(default=None, alias="handlingTime")
    local_pickup: Optional[StrictBool] = Field(default=None, description="If returned as <code>true</code>, local pickup is available for this policy.", alias="localPickup")
    marketplace_id: Optional[StrictStr] = Field(default=None, description="The ID of the eBay marketplace to which this fulfillment policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>", alias="marketplaceId")
    name: Optional[StrictStr] = Field(default=None, description="A seller-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace. <br/><br/><b>Max length</b>: 64")
    pickup_drop_off: Optional[StrictBool] = Field(default=None, description="If returned as <code>true</code>, the seller offers the \"Click and Collect\" option. <br/><br/>Currently, \"Click and Collect\" is available only to large retail merchants the eBay AU and UK marketplaces.", alias="pickupDropOff")
    ship_to_locations: Optional[RegionSet] = Field(default=None, alias="shipToLocations")
    shipping_options: Optional[List[ShippingOption]] = Field(default=None, description="This array is used to provide detailed information on the domestic and international shipping options available for the policy. A separate <b>ShippingOption</b> object covers domestic shipping service options and international shipping service options (if the seller ships to international locations). <br /><br />The <b>optionType</b> field indicates whether the <b>ShippingOption</b> object applies to domestic or international shipping, and the <b>costType</b> field indicates whether flat-rate shipping or calculated shipping will be used. <p>A separate <b>ShippingServices</b> object is used to specify cost and other details for every available domestic and international shipping service option. </p>", alias="shippingOptions")
    __properties: ClassVar[List[str]] = ["categoryTypes", "description", "freightShipping", "fulfillmentPolicyId", "globalShipping", "handlingTime", "localPickup", "marketplaceId", "name", "pickupDropOff", "shipToLocations", "shippingOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FulfillmentPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in category_types (list)
        _items = []
        if self.category_types:
            for _item_category_types in self.category_types:
                if _item_category_types:
                    _items.append(_item_category_types.to_dict())
            _dict['categoryTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of handling_time
        if self.handling_time:
            _dict['handlingTime'] = self.handling_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_locations
        if self.ship_to_locations:
            _dict['shipToLocations'] = self.ship_to_locations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_options (list)
        _items = []
        if self.shipping_options:
            for _item_shipping_options in self.shipping_options:
                if _item_shipping_options:
                    _items.append(_item_shipping_options.to_dict())
            _dict['shippingOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FulfillmentPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryTypes": [CategoryType.from_dict(_item) for _item in obj["categoryTypes"]] if obj.get("categoryTypes") is not None else None,
            "description": obj.get("description"),
            "freightShipping": obj.get("freightShipping"),
            "fulfillmentPolicyId": obj.get("fulfillmentPolicyId"),
            "globalShipping": obj.get("globalShipping"),
            "handlingTime": TimeDuration.from_dict(obj["handlingTime"]) if obj.get("handlingTime") is not None else None,
            "localPickup": obj.get("localPickup"),
            "marketplaceId": obj.get("marketplaceId"),
            "name": obj.get("name"),
            "pickupDropOff": obj.get("pickupDropOff"),
            "shipToLocations": RegionSet.from_dict(obj["shipToLocations"]) if obj.get("shipToLocations") is not None else None,
            "shippingOptions": [ShippingOption.from_dict(_item) for _item in obj["shippingOptions"]] if obj.get("shippingOptions") is not None else None
        })
        return _obj



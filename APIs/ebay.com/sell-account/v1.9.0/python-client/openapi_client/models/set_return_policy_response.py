# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category_type import CategoryType
from openapi_client.models.error import Error
from openapi_client.models.international_return_override_type import InternationalReturnOverrideType
from openapi_client.models.time_duration import TimeDuration
from typing import Optional, Set
from typing_extensions import Self

class SetReturnPolicyResponse(BaseModel):
    """
    A complex type that is populated with a response containing a return policies.
    """ # noqa: E501
    category_types: Optional[List[CategoryType]] = Field(default=None, description="This field always returns <code>ALL_EXCLUDING_MOTORS_VEHICLES</code> for return business policies, since return business policies are not applicable to motor vehicle listings.", alias="categoryTypes")
    description: Optional[StrictStr] = Field(default=None, description="A seller-defined description of the return business policy. This description is only for the seller's use, and is not exposed on any eBay pages. This field is returned if set for the policy. <br/><br/><b>Max length</b>: 250")
    extended_holiday_returns_offered: Optional[StrictBool] = Field(default=None, description="<p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is deprecated, since eBay no longer supports extended holiday returns. This field should no longer be returned.</p> ", alias="extendedHolidayReturnsOffered")
    international_override: Optional[InternationalReturnOverrideType] = Field(default=None, alias="internationalOverride")
    marketplace_id: Optional[StrictStr] = Field(default=None, description="The ID of the eBay marketplace to which this return business policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>", alias="marketplaceId")
    name: Optional[StrictStr] = Field(default=None, description="A seller-defined name for this return business policy. Names must be unique for policies assigned to the same marketplace.<br /><br /><b>Max length:</b> 64")
    refund_method: Optional[StrictStr] = Field(default=None, description="If a seller indicates that they will accept buyer returns, this value will be <code>MONEY_BACK</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:RefundMethodEnum'>eBay API documentation</a>", alias="refundMethod")
    restocking_fee_percentage: Optional[StrictStr] = Field(default=None, description="<p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is deprecated, since eBay no longer allows sellers to charge a restocking fee for buyer remorse returns.</p>", alias="restockingFeePercentage")
    return_instructions: Optional[StrictStr] = Field(default=None, description="This text-based field provides more details on seller-specified return instructions. <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is no longer supported on many eBay marketplaces. To see if a marketplace and eBay category does support this field, call <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getReturnPolicies\">getReturnPolicies</a> method of the <b>Metadata API</b>. Then you will look for the <b>policyDescriptionEnabled</b> field with a value of <code>true</code> for the eBay category.</span></p><br/><b>Max length</b>: 5000 (8000 for DE)", alias="returnInstructions")
    return_method: Optional[StrictStr] = Field(default=None, description="This field will be returned if the seller is willing and able to offer a replacement item as an alternative to 'Money Back'. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>", alias="returnMethod")
    return_period: Optional[TimeDuration] = Field(default=None, alias="returnPeriod")
    return_policy_id: Optional[StrictStr] = Field(default=None, description="A unique eBay-assigned ID for a return business policy. This ID is generated when the policy is created.", alias="returnPolicyId")
    return_shipping_cost_payer: Optional[StrictStr] = Field(default=None, description="This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br/><br/>Note that the seller is always responsible for return shipping costs for SNAD-related issues.  <br/><br/>This container will be returned unless the business policy states that the seller does not accept returns. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>", alias="returnShippingCostPayer")
    returns_accepted: Optional[StrictBool] = Field(default=None, description="If set to <code>true</code>, the seller accepts returns. If set to <code>false</code>, this field indicates that the seller does not accept returns.", alias="returnsAccepted")
    warnings: Optional[List[Error]] = Field(default=None, description="An array of one or more errors or warnings that were generated during the processing of the request. If there were no issues with the request, this array will return empty.")
    __properties: ClassVar[List[str]] = ["categoryTypes", "description", "extendedHolidayReturnsOffered", "internationalOverride", "marketplaceId", "name", "refundMethod", "restockingFeePercentage", "returnInstructions", "returnMethod", "returnPeriod", "returnPolicyId", "returnShippingCostPayer", "returnsAccepted", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SetReturnPolicyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in category_types (list)
        _items = []
        if self.category_types:
            for _item_category_types in self.category_types:
                if _item_category_types:
                    _items.append(_item_category_types.to_dict())
            _dict['categoryTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of international_override
        if self.international_override:
            _dict['internationalOverride'] = self.international_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_period
        if self.return_period:
            _dict['returnPeriod'] = self.return_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SetReturnPolicyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryTypes": [CategoryType.from_dict(_item) for _item in obj["categoryTypes"]] if obj.get("categoryTypes") is not None else None,
            "description": obj.get("description"),
            "extendedHolidayReturnsOffered": obj.get("extendedHolidayReturnsOffered"),
            "internationalOverride": InternationalReturnOverrideType.from_dict(obj["internationalOverride"]) if obj.get("internationalOverride") is not None else None,
            "marketplaceId": obj.get("marketplaceId"),
            "name": obj.get("name"),
            "refundMethod": obj.get("refundMethod"),
            "restockingFeePercentage": obj.get("restockingFeePercentage"),
            "returnInstructions": obj.get("returnInstructions"),
            "returnMethod": obj.get("returnMethod"),
            "returnPeriod": TimeDuration.from_dict(obj["returnPeriod"]) if obj.get("returnPeriod") is not None else None,
            "returnPolicyId": obj.get("returnPolicyId"),
            "returnShippingCostPayer": obj.get("returnShippingCostPayer"),
            "returnsAccepted": obj.get("returnsAccepted"),
            "warnings": [Error.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj



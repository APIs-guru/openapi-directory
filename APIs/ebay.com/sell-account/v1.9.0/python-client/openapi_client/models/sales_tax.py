# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SalesTax(BaseModel):
    """
    This type is used to provide sales tax settings for a specific tax jurisdiction.
    """ # noqa: E501
    country_code: Optional[StrictStr] = Field(default=None, description="The country code enumeration value identifies the country to which this sales tax rate applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum'>eBay API documentation</a>", alias="countryCode")
    sales_tax_jurisdiction_id: Optional[StrictStr] = Field(default=None, description="A unique ID that identifies the sales tax jurisdiction to which the sales tax rate applies (for example, a state within the United States).", alias="salesTaxJurisdictionId")
    sales_tax_percentage: Optional[StrictStr] = Field(default=None, description="The sales tax rate that will be applied to sales price. The <b>shippingAndHandlingTaxed</b> value will indicate whether or not sales tax is also applied to shipping and handling charges<br><br>Although it is a string, a percentage value is returned here, such as <code>7.75</code>", alias="salesTaxPercentage")
    shipping_and_handling_taxed: Optional[StrictBool] = Field(default=None, description="If returned as <code>true</code>, sales tax is also applied to shipping and handling charges, and not just the total sales price of the order.", alias="shippingAndHandlingTaxed")
    __properties: ClassVar[List[str]] = ["countryCode", "salesTaxJurisdictionId", "salesTaxPercentage", "shippingAndHandlingTaxed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalesTax from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalesTax from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countryCode": obj.get("countryCode"),
            "salesTaxJurisdictionId": obj.get("salesTaxJurisdictionId"),
            "salesTaxPercentage": obj.get("salesTaxPercentage"),
            "shippingAndHandlingTaxed": obj.get("shippingAndHandlingTaxed")
        })
        return _obj



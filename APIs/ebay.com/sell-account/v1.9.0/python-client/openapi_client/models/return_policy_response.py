# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.return_policy import ReturnPolicy
from typing import Optional, Set
from typing_extensions import Self

class ReturnPolicyResponse(BaseModel):
    """
    The response payload for the <b>getReturnPolicies</b> method. <br /><br /><span class=\"tablenote\"><b>Note</b>: Pagination has not yet been enabled for <b>getReturnPolicies</b>, so all of the pagination-related fields are for future use.</span>
    """ # noqa: E501
    href: Optional[StrictStr] = Field(default=None, description="This field is for future use.")
    limit: Optional[StrictInt] = Field(default=None, description="This field is for future use.")
    next: Optional[StrictStr] = Field(default=None, description="This field is for future use.")
    offset: Optional[StrictInt] = Field(default=None, description="This field is for future use.")
    prev: Optional[StrictStr] = Field(default=None, description="This field is for future use.")
    return_policies: Optional[List[ReturnPolicy]] = Field(default=None, description="A list of all of the seller's return business policies defined for the specified marketplace. This array will be returned as empty if no return business policies are defined for the specified marketplace.", alias="returnPolicies")
    total: Optional[StrictInt] = Field(default=None, description="The total number of return business policies retrieved in the result set.  <br/><br/>If no return business policies are defined for the specified marketplace, this field is returned with a value of <code>0</code>.")
    __properties: ClassVar[List[str]] = ["href", "limit", "next", "offset", "prev", "returnPolicies", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnPolicyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in return_policies (list)
        _items = []
        if self.return_policies:
            for _item_return_policies in self.return_policies:
                if _item_return_policies:
                    _items.append(_item_return_policies.to_dict())
            _dict['returnPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnPolicyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "href": obj.get("href"),
            "limit": obj.get("limit"),
            "next": obj.get("next"),
            "offset": obj.get("offset"),
            "prev": obj.get("prev"),
            "returnPolicies": [ReturnPolicy.from_dict(_item) for _item in obj["returnPolicies"]] if obj.get("returnPolicies") is not None else None,
            "total": obj.get("total")
        })
        return _obj



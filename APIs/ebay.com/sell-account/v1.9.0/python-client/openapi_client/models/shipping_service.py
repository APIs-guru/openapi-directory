# coding: utf-8

"""
    Account API

    The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

    The version of the OpenAPI document: v1.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.region_set import RegionSet
from typing import Optional, Set
from typing_extensions import Self

class ShippingService(BaseModel):
    """
    This type is used by the <b>shippingServices</b> array, an array that provides details about every domestic and international shipping service option that is defined for the policy.
    """ # noqa: E501
    additional_shipping_cost: Optional[Amount] = Field(default=None, alias="additionalShippingCost")
    buyer_responsible_for_pickup: Optional[StrictBool] = Field(default=None, description="This field should be included and set to <code>true</code> for a motor vehicle listing if it will be the buyer's responsibility to pick up the purchased motor vehicle after full payment is made. <br /><br />This field is only applicable to motor vehicle listings. In the majority of motor vehicle listings, the seller does make the buyer responsible for pickup or shipment of the vehicle. <br/><br/>This field is returned if set.<br/><br/><b>Default</b>: false", alias="buyerResponsibleForPickup")
    buyer_responsible_for_shipping: Optional[StrictBool] = Field(default=None, description="This field should be included and set to <code>true</code> for a motor vehicle listing if it will be the buyer's responsibility to arrange for shipment of a purchased motor vehicle after full payment is made. <br /><br />This field is only applicable to motor vehicle listings. In the majority of motor vehicle listings, the seller does make the buyer responsible for pickup or shipment of the vehicle. <br/><br/>This field is returned if set.<br/><br/><b>Default</b>: false", alias="buyerResponsibleForShipping")
    cash_on_delivery_fee: Optional[Amount] = Field(default=None, alias="cashOnDeliveryFee")
    free_shipping: Optional[StrictBool] = Field(default=None, description="This field is included and set to <code>true</code> if the seller offers a free shipping option to the buyer. <br /><br />This field can only be included and set to <code>true</code> for the first domestic shipping service option specified in the <b>shippingServices</b> container (it is ignored if set for subsequent shipping services or for any international shipping service option). <br /><br />The first specified shipping service option has a <b>sortOrder</b> value of <code>1</code> or if the <b>sortOrderId</b> field is not used, it is the shipping service option that's specified first in the <b>shippingServices</b> container.<br/><br/>This container is returned if set.", alias="freeShipping")
    ship_to_locations: Optional[RegionSet] = Field(default=None, alias="shipToLocations")
    shipping_carrier_code: Optional[StrictStr] = Field(default=None, description="This field sets/indicates the shipping carrier, such as <code>USPS</code>, <code>FedEx</code>, or <code>UPS</code>. Although this field uses the <b>string</b> type, the seller must pass in a pre-defined enumeration value here. <br /><br />For a full list of shipping carrier enum values for a specified eBay marketplace, the <b>GeteBayDetails</b> call of the <b>Trading API</b> can be used, and the <b>DetailName</b> field's value should be set to <code>ShippingCarrierDetails</code>. The enum values for each shipping carriers can be found in each <b>ShippingCarrierDetails.ShippingCarrier</b> field in the response payload.<br/><br/> This field is actually optional, as the shipping carrier is also tied into the <b>shippingServiceCode</b> enum value, and that field is required for every specified shipping service option.<br/><br/>This field is returned if set.", alias="shippingCarrierCode")
    shipping_cost: Optional[Amount] = Field(default=None, alias="shippingCost")
    shipping_service_code: Optional[StrictStr] = Field(default=None, description="This field sets/indicates the domestic or international shipping service option, such as <code>USPSPriority</code>, <code>FedEx2Day</code>, or <code>UPS3rdDay</code>. Although this field uses the <b>string</b> type, the seller must pass in a pre-defined enumeration value here. <br /><br />For a full list of shipping service option enum values for a specified eBay marketplace, the <b>GeteBayDetails</b> call of the <b>Trading API</b> can be used, and the <b>DetailName</b> field's value should be set to <code>ShippingServiceDetails</code>. <br /><br />The enum values for each shipping service option can be found in each <b>ShippingServiceDetails.ShippingService</b> field in the response payload. The seller must make sure that the shipping service option is still valid, which is indicated by a <code>true</code> value in the corresponding <b>ValidForSellingFlow</b> boolean field. International shipping service options are typically returned at the top of the response payload, and are indicated by an <b>InternationalService</b> boolean field that reads <code>true</code>. <br /><br />The <b>InternationalService</b> boolean field is not returned at all for domestic shipping service options. <br/><br/> This field is required for every specified shipping service option.<br/><br/>This field is returned if set.", alias="shippingServiceCode")
    sort_order: Optional[StrictInt] = Field(default=None, description="The integer value set in this field controls the order of the corresponding domestic or international shipping service option in the View Item and Checkout pages. <br/><br/>Sellers can specify up to four domestic shipping services (in four separate <b>shippingService</b> containers), so valid values are 1, 2, 3, and 4. A shipping service option with a <b>sortOrder</b> value of <code>1</code> appears at the top of View Item and Checkout pages. Conversely, a shipping service option with a <b>sortOrder</b> value of <code>1</code> appears at the bottom of the list. <br/><br/>Sellers can specify up to five international shipping services (in five separate <b>shippingService</b> containers), so valid values for international shipping services are 1, 2, 3, 4, and 5. Similarly to domestic shipping service options, the <b>sortOrder</b> value of a international shipping service option controls the placement of that shipping service option in the View Item and Checkout pages. <br/><br/>If the <b>sortOrder</b> field is not supplied, the order of domestic and international shipping service options is determined by the order in which they are listed in the API call. <br/><br/><b>Min</b>: 1. <b>Max</b>: 4 (for domestic shipping service) or 5 (for international shipping service).", alias="sortOrder")
    surcharge: Optional[Amount] = None
    __properties: ClassVar[List[str]] = ["additionalShippingCost", "buyerResponsibleForPickup", "buyerResponsibleForShipping", "cashOnDeliveryFee", "freeShipping", "shipToLocations", "shippingCarrierCode", "shippingCost", "shippingServiceCode", "sortOrder", "surcharge"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_shipping_cost
        if self.additional_shipping_cost:
            _dict['additionalShippingCost'] = self.additional_shipping_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cash_on_delivery_fee
        if self.cash_on_delivery_fee:
            _dict['cashOnDeliveryFee'] = self.cash_on_delivery_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_locations
        if self.ship_to_locations:
            _dict['shipToLocations'] = self.ship_to_locations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_cost
        if self.shipping_cost:
            _dict['shippingCost'] = self.shipping_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of surcharge
        if self.surcharge:
            _dict['surcharge'] = self.surcharge.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalShippingCost": Amount.from_dict(obj["additionalShippingCost"]) if obj.get("additionalShippingCost") is not None else None,
            "buyerResponsibleForPickup": obj.get("buyerResponsibleForPickup"),
            "buyerResponsibleForShipping": obj.get("buyerResponsibleForShipping"),
            "cashOnDeliveryFee": Amount.from_dict(obj["cashOnDeliveryFee"]) if obj.get("cashOnDeliveryFee") is not None else None,
            "freeShipping": obj.get("freeShipping"),
            "shipToLocations": RegionSet.from_dict(obj["shipToLocations"]) if obj.get("shipToLocations") is not None else None,
            "shippingCarrierCode": obj.get("shippingCarrierCode"),
            "shippingCost": Amount.from_dict(obj["shippingCost"]) if obj.get("shippingCost") is not None else None,
            "shippingServiceCode": obj.get("shippingServiceCode"),
            "sortOrder": obj.get("sortOrder"),
            "surcharge": Amount.from_dict(obj["surcharge"]) if obj.get("surcharge") is not None else None
        })
        return _obj



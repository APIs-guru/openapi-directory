# coding: utf-8

"""
    Marketing API

    <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.item_markdown_status import ItemMarkdownStatus
from typing import Optional, Set
from typing_extensions import Self

class ListingDetail(BaseModel):
    """
    This type defines the fields that describe a listing that is in a promotion.
    """ # noqa: E501
    current_price: Optional[Amount] = Field(default=None, alias="currentPrice")
    free_shipping: Optional[StrictBool] = Field(default=None, description="If set to <code>true</code>, the seller pays for the shipping (or that the item is marked for local pickup only) In this case, the listing does not have an associated shipping cost for the first listed domestic-shipping option (even if the first domestic-shipping option specifies a flat-rate or calculated shipping option). If <code>false</code>, the buyer is required to pay for a flat-rate or calculated cost shipping service.", alias="freeShipping")
    inventory_reference_id: Optional[StrictStr] = Field(default=None, description="The seller's inventory reference ID for a listing. Also known as the \"SKU\" or \"custom label,\" an inventory reference ID is either the ID of the listing or, if the listing has variations (such as a shirt that's available in multiple sizes and colors), the ID of the parent listing.", alias="inventoryReferenceId")
    inventory_reference_type: Optional[StrictStr] = Field(default=None, description="Indicates the type of the <b>inventoryReferenceId</b>, which can be either a single-SKU or a multi-SKU listing (<code>INVENTORY_ITEM</code> and <code>INVENTORY_ITEM_GROUP</code>, respectively).  <br><br><b>Note:</b> This value is not currently returned in the response.", alias="inventoryReferenceType")
    listing_category_id: Optional[StrictStr] = Field(default=None, description="The ID of the category that listing belongs to. The ID is a numeric and unique identifier for the category that is assigned by eBay.", alias="listingCategoryId")
    listing_condition: Optional[StrictStr] = Field(default=None, description="An eBay-assigned value that indicates condition of the associated item. For more information, see <a href=\"/api-docs/sell/static/metadata/condition-id-values.html\">Item condition ID and name values</a>.", alias="listingCondition")
    listing_condition_id: Optional[StrictStr] = Field(default=None, description="The ID of the condition associated with the item. For more information, see <a href=\"/api-docs/sell/static/metadata/condition-id-values.html\">Item condition ID and name values</a>.<br /><br /><span class=\"tablenote\"><b>Note: </b> This value is not currently returned in the response.</span>", alias="listingConditionId")
    listing_id: Optional[StrictStr] = Field(default=None, description="A unique eBay-assigned ID that is generated when the item is listed.", alias="listingId")
    listing_promotion_statuses: Optional[List[ItemMarkdownStatus]] = Field(default=None, description="A list of the status values assigned to the item and the date that each new status was assigned.", alias="listingPromotionStatuses")
    quantity: Optional[StrictInt] = Field(default=None, description="The number of items being sold in the listing.")
    store_category_id: Optional[StrictStr] = Field(default=None, description="Store CategoryId (if any) that to which the listing belongs. This field is blank if there is no seller Store category ID.", alias="storeCategoryId")
    title: Optional[StrictStr] = Field(default=None, description="The seller-defined title of the listing that a seller can use to identify the item.  This label is not displayed in end-user flows.")
    __properties: ClassVar[List[str]] = ["currentPrice", "freeShipping", "inventoryReferenceId", "inventoryReferenceType", "listingCategoryId", "listingCondition", "listingConditionId", "listingId", "listingPromotionStatuses", "quantity", "storeCategoryId", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListingDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_price
        if self.current_price:
            _dict['currentPrice'] = self.current_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in listing_promotion_statuses (list)
        _items = []
        if self.listing_promotion_statuses:
            for _item_listing_promotion_statuses in self.listing_promotion_statuses:
                if _item_listing_promotion_statuses:
                    _items.append(_item_listing_promotion_statuses.to_dict())
            _dict['listingPromotionStatuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListingDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentPrice": Amount.from_dict(obj["currentPrice"]) if obj.get("currentPrice") is not None else None,
            "freeShipping": obj.get("freeShipping"),
            "inventoryReferenceId": obj.get("inventoryReferenceId"),
            "inventoryReferenceType": obj.get("inventoryReferenceType"),
            "listingCategoryId": obj.get("listingCategoryId"),
            "listingCondition": obj.get("listingCondition"),
            "listingConditionId": obj.get("listingConditionId"),
            "listingId": obj.get("listingId"),
            "listingPromotionStatuses": [ItemMarkdownStatus.from_dict(_item) for _item in obj["listingPromotionStatuses"]] if obj.get("listingPromotionStatuses") is not None else None,
            "quantity": obj.get("quantity"),
            "storeCategoryId": obj.get("storeCategoryId"),
            "title": obj.get("title")
        })
        return _obj



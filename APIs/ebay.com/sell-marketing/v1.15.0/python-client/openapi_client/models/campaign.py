# coding: utf-8

"""
    Marketing API

    <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert import Alert
from openapi_client.models.campaign_budget import CampaignBudget
from openapi_client.models.campaign_criterion import CampaignCriterion
from openapi_client.models.funding_strategy import FundingStrategy
from typing import Optional, Set
from typing_extensions import Self

class Campaign(BaseModel):
    """
    This type defines the fields that describe an ad campaign.
    """ # noqa: E501
    alerts: Optional[List[Alert]] = Field(default=None, description="This array contains alert messages for the campaign.")
    budget: Optional[CampaignBudget] = None
    campaign_criterion: Optional[CampaignCriterion] = Field(default=None, alias="campaignCriterion")
    campaign_id: Optional[StrictStr] = Field(default=None, description="A unique eBay-assigned ID for a campaign. This ID is generated when a campaign is created.", alias="campaignId")
    campaign_name: Optional[StrictStr] = Field(default=None, description="A seller-defined name for the campaign. This value must be unique for the seller. <p>You can use any alphanumeric characters in the name, except the less than (&lt;) or greater than (&gt;) characters.</p><b>Max length: </b>80 characters", alias="campaignName")
    campaign_status: Optional[StrictStr] = Field(default=None, description="Indicates the status of the campaign, such as <code>RUNNING</code>, <code>PAUSED</code>, and <code>ENDED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:CampaignStatusEnum'>eBay API documentation</a>", alias="campaignStatus")
    end_date: Optional[StrictStr] = Field(default=None, description="The date and time the campaign ends, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). If this field is omitted, the campaign will have no defined end date, and will not end until the seller makes a decision to end the campaign with an <a href=\"/api-docs/sell/marketing/resources/campaign/methods/endCampaign\">endCampaign</a> call, or if they update the campaign at a later time with an end date.", alias="endDate")
    funding_strategy: Optional[FundingStrategy] = Field(default=None, alias="fundingStrategy")
    marketplace_id: Optional[StrictStr] = Field(default=None, description="The ID of the eBay marketplace where the campaign is hosted. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>", alias="marketplaceId")
    start_date: Optional[StrictStr] = Field(default=None, description="The date and time the campaign starts, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.  <p>On the date specified, the service derives the keywords for each listing in the campaign, creates an ad for each listing, and associates each new ad with the campaign. The campaign starts after this process is completed. The amount of time it takes the service to start the campaign depends on the number of listings in the campaign. Call <a href=\"/api-docs/sell/marketing/resources/campaign/methods/getCampaign\">getCampaign</a> to check the status of the campaign.</p>", alias="startDate")
    __properties: ClassVar[List[str]] = ["alerts", "budget", "campaignCriterion", "campaignId", "campaignName", "campaignStatus", "endDate", "fundingStrategy", "marketplaceId", "startDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Campaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alerts (list)
        _items = []
        if self.alerts:
            for _item_alerts in self.alerts:
                if _item_alerts:
                    _items.append(_item_alerts.to_dict())
            _dict['alerts'] = _items
        # override the default output from pydantic by calling `to_dict()` of budget
        if self.budget:
            _dict['budget'] = self.budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign_criterion
        if self.campaign_criterion:
            _dict['campaignCriterion'] = self.campaign_criterion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of funding_strategy
        if self.funding_strategy:
            _dict['fundingStrategy'] = self.funding_strategy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Campaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alerts": [Alert.from_dict(_item) for _item in obj["alerts"]] if obj.get("alerts") is not None else None,
            "budget": CampaignBudget.from_dict(obj["budget"]) if obj.get("budget") is not None else None,
            "campaignCriterion": CampaignCriterion.from_dict(obj["campaignCriterion"]) if obj.get("campaignCriterion") is not None else None,
            "campaignId": obj.get("campaignId"),
            "campaignName": obj.get("campaignName"),
            "campaignStatus": obj.get("campaignStatus"),
            "endDate": obj.get("endDate"),
            "fundingStrategy": FundingStrategy.from_dict(obj["fundingStrategy"]) if obj.get("fundingStrategy") is not None else None,
            "marketplaceId": obj.get("marketplaceId"),
            "startDate": obj.get("startDate")
        })
        return _obj



# coding: utf-8

"""
    Marketing API

    <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class SelectionRule(BaseModel):
    """
    This type defines all rules/inclusion filters used to add listings to campaigns or promotions. Use of the specific fields is different for campaigns or promotions. See <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html \">Using the selectionRules container</a>.
    """ # noqa: E501
    brands: Optional[List[StrictStr]] = Field(default=None, description="An array of product brands. For more details, see <a href=\"/api-docs/sell/static/marketing/using-the-selectionrules-container.html \">Using the selectionRules container</a>.")
    category_ids: Optional[List[StrictStr]] = Field(default=None, description="This field contains an array of the associated category ID(s).<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, a single-item array containing the category ID associated with the promotion. Required when used in an Item promotion and either specifying a <b>selectionRules</b> container or when <b>inventoryCriterionType</b> is set to <code>INVENTORY_BY_RULE</code>.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, an array of category ID(s) associated with the campaign. <br><br>For information on how to get category IDs, see <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#eBay \">eBay Marketplace category IDs</a> and <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Seller \">Seller store category IDs</a>", alias="categoryIds")
    category_scope: Optional[StrictStr] = Field(default=None, description="This enumerated value indicates if the category ID for the item is an identifier for eBay categories or for a seller's eBay store categories. <br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, this field includes the type of the category ID for the item(s) to be included in the campaign.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, this field identifies the scope for the corresponding array as eBay categories or for a seller's eBay store categories. Required when used in an Item promotion and <b>inventoryCriterionType</b> is set to <code>INVENTORY_BY_RULE</code>.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:CategoryScopeEnum'>eBay API documentation</a>", alias="categoryScope")
    listing_condition_ids: Optional[List[StrictStr]] = Field(default=None, description="A comma-separated list of unique identifiers for the conditions of listings to be included<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, refer to <a href= \"/api-docs/sell/static/marketing/pl-campaign-flow-pls.html#add-by-rule \">Add items to the PLS campaign</a>. Up to four IDs can be specified.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, refer to <a href= \"/api-docs/sell/static/metadata/condition-id-values.html \">Item condition ID and name values</a>.", alias="listingConditionIds")
    max_price: Optional[Amount] = Field(default=None, alias="maxPrice")
    min_price: Optional[Amount] = Field(default=None, alias="minPrice")
    __properties: ClassVar[List[str]] = ["brands", "categoryIds", "categoryScope", "listingConditionIds", "maxPrice", "minPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SelectionRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_price
        if self.max_price:
            _dict['maxPrice'] = self.max_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_price
        if self.min_price:
            _dict['minPrice'] = self.min_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SelectionRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brands": obj.get("brands"),
            "categoryIds": obj.get("categoryIds"),
            "categoryScope": obj.get("categoryScope"),
            "listingConditionIds": obj.get("listingConditionIds"),
            "maxPrice": Amount.from_dict(obj["maxPrice"]) if obj.get("maxPrice") is not None else None,
            "minPrice": Amount.from_dict(obj["minPrice"]) if obj.get("minPrice") is not None else None
        })
        return _obj



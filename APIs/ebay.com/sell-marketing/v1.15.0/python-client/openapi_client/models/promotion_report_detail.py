# coding: utf-8

"""
    Marketing API

    <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class PromotionReportDetail(BaseModel):
    """
    This type defines the fields in a promotion-level report.
    """ # noqa: E501
    average_item_discount: Optional[Amount] = Field(default=None, alias="averageItemDiscount")
    average_item_revenue: Optional[Amount] = Field(default=None, alias="averageItemRevenue")
    average_order_discount: Optional[Amount] = Field(default=None, alias="averageOrderDiscount")
    average_order_revenue: Optional[Amount] = Field(default=None, alias="averageOrderRevenue")
    average_order_size: Optional[StrictStr] = Field(default=None, description="The <i>average order size</i> is the average number of items that each order contained in a promotion. This value is calculated as follows:  <br><br><b>itemsSoldQuantity</b> / <b>numberOfOrdersSold</b> = <b>averageOrderSize</b> ", alias="averageOrderSize")
    base_sale: Optional[Amount] = Field(default=None, alias="baseSale")
    items_sold_quantity: Optional[StrictInt] = Field(default=None, description="This is the quantity of items purchased in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your number of items sold (<b>itemsSoldQuantity</b>) would be 2 and you number of orders sold (<b>numberOfOrdersSold</b>) would be 1.", alias="itemsSoldQuantity")
    number_of_orders_sold: Optional[StrictInt] = Field(default=None, description="This is the number of orders sold in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your <b>numberOfOrdersSold</b> would be 1 and your <b>itemsSoldQuantity</b> would be 2.", alias="numberOfOrdersSold")
    percentage_sales_lift: Optional[StrictStr] = Field(default=None, description="The <i>percentage sales lift</i> is the total dollar amount gained due to promotions. This value is calculated as follows:  <br><br> <b>promotionSale</b> / <b>totalSale</b> =  <b>percentageSalesLift</b> ", alias="percentageSalesLift")
    promotion_href: Optional[StrictStr] = Field(default=None, description="The URI of the promotion report.", alias="promotionHref")
    promotion_id: Optional[StrictStr] = Field(default=None, description="A unique eBay-assigned ID for the promotion that's generated when the promotion is created.", alias="promotionId")
    promotion_report_id: Optional[StrictStr] = Field(default=None, description="The unique eBay-assigned ID of the promotion report that is generated when the report is created.", alias="promotionReportId")
    promotion_sale: Optional[Amount] = Field(default=None, alias="promotionSale")
    promotion_type: Optional[StrictStr] = Field(default=None, description="Indicates the type of the promotion, either <code>CODED_COUPON</code>, <code>MARKDOWN_SALE</code>, <code>ORDER_DISCOUNT</code>, or <code>VOLUME_DISCOUNT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>", alias="promotionType")
    total_discount: Optional[Amount] = Field(default=None, alias="totalDiscount")
    total_sale: Optional[Amount] = Field(default=None, alias="totalSale")
    __properties: ClassVar[List[str]] = ["averageItemDiscount", "averageItemRevenue", "averageOrderDiscount", "averageOrderRevenue", "averageOrderSize", "baseSale", "itemsSoldQuantity", "numberOfOrdersSold", "percentageSalesLift", "promotionHref", "promotionId", "promotionReportId", "promotionSale", "promotionType", "totalDiscount", "totalSale"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PromotionReportDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of average_item_discount
        if self.average_item_discount:
            _dict['averageItemDiscount'] = self.average_item_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of average_item_revenue
        if self.average_item_revenue:
            _dict['averageItemRevenue'] = self.average_item_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of average_order_discount
        if self.average_order_discount:
            _dict['averageOrderDiscount'] = self.average_order_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of average_order_revenue
        if self.average_order_revenue:
            _dict['averageOrderRevenue'] = self.average_order_revenue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base_sale
        if self.base_sale:
            _dict['baseSale'] = self.base_sale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_sale
        if self.promotion_sale:
            _dict['promotionSale'] = self.promotion_sale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_discount
        if self.total_discount:
            _dict['totalDiscount'] = self.total_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_sale
        if self.total_sale:
            _dict['totalSale'] = self.total_sale.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PromotionReportDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averageItemDiscount": Amount.from_dict(obj["averageItemDiscount"]) if obj.get("averageItemDiscount") is not None else None,
            "averageItemRevenue": Amount.from_dict(obj["averageItemRevenue"]) if obj.get("averageItemRevenue") is not None else None,
            "averageOrderDiscount": Amount.from_dict(obj["averageOrderDiscount"]) if obj.get("averageOrderDiscount") is not None else None,
            "averageOrderRevenue": Amount.from_dict(obj["averageOrderRevenue"]) if obj.get("averageOrderRevenue") is not None else None,
            "averageOrderSize": obj.get("averageOrderSize"),
            "baseSale": Amount.from_dict(obj["baseSale"]) if obj.get("baseSale") is not None else None,
            "itemsSoldQuantity": obj.get("itemsSoldQuantity"),
            "numberOfOrdersSold": obj.get("numberOfOrdersSold"),
            "percentageSalesLift": obj.get("percentageSalesLift"),
            "promotionHref": obj.get("promotionHref"),
            "promotionId": obj.get("promotionId"),
            "promotionReportId": obj.get("promotionReportId"),
            "promotionSale": Amount.from_dict(obj["promotionSale"]) if obj.get("promotionSale") is not None else None,
            "promotionType": obj.get("promotionType"),
            "totalDiscount": Amount.from_dict(obj["totalDiscount"]) if obj.get("totalDiscount") is not None else None,
            "totalSale": Amount.from_dict(obj["totalSale"]) if obj.get("totalSale") is not None else None
        })
        return _obj



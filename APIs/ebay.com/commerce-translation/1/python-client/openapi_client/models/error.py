# coding: utf-8

"""
    Translation API

    This API allows 3rd party developers to translate item title, description, search query.

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_parameter import ErrorParameter
from typing import Optional, Set
from typing_extensions import Self

class Error(BaseModel):
    """
    This type defines the fields that can be returned in an error.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="Identifies the type of erro.")
    domain: Optional[StrictStr] = Field(default=None, description="Name for the primary system where the error occurred. This is relevant for application errors.")
    error_id: Optional[StrictInt] = Field(default=None, description="A unique number to identify the error.", alias="errorId")
    input_ref_ids: Optional[List[StrictStr]] = Field(default=None, description="An array of request elements most closely associated to the error.", alias="inputRefIds")
    long_message: Optional[StrictStr] = Field(default=None, description="A more detailed explanation of the error.", alias="longMessage")
    message: Optional[StrictStr] = Field(default=None, description="Information on how to correct the problem, in the end user's terms and language where applicable.")
    output_ref_ids: Optional[List[StrictStr]] = Field(default=None, description="An array of request elements most closely associated to the error.", alias="outputRefIds")
    parameters: Optional[List[ErrorParameter]] = Field(default=None, description="An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.")
    subdomain: Optional[StrictStr] = Field(default=None, description="Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.")
    __properties: ClassVar[List[str]] = ["category", "domain", "errorId", "inputRefIds", "longMessage", "message", "outputRefIds", "parameters", "subdomain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Error from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "domain": obj.get("domain"),
            "errorId": obj.get("errorId"),
            "inputRefIds": obj.get("inputRefIds"),
            "longMessage": obj.get("longMessage"),
            "message": obj.get("message"),
            "outputRefIds": obj.get("outputRefIds"),
            "parameters": [ErrorParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "subdomain": obj.get("subdomain")
        })
        return _obj



# coding: utf-8

"""
    Feed API

    <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

    The version of the OpenAPI document: v1.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.supported_configuration import SupportedConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ScheduleTemplateResponse(BaseModel):
    """
    The type that defines the fields for a paginated result set of available schedule templates. The response consists of 0 or more sequenced <em> pages</em> where each page has 0 or more items.
    """ # noqa: E501
    feed_type: Optional[StrictStr] = Field(default=None, description="The feed type of the schedule template. <p> <span class=\"tablenote\"><strong>Note:</strong> When calling <strong>createSchedule</strong> and <strong>updateSchedule</strong> methods you must match the feed type specified by the schedule template (this feedType).</span></p>", alias="feedType")
    frequency: Optional[StrictStr] = Field(default=None, description="This field specifies how often the schedule is generated. If set to <code>HALF_HOUR</code> or <code>ONE_HOUR</code>, you cannot set a <strong>preferredTriggerHour</strong> using <strong>createSchedule</strong> or <strong>updateSchedule</strong>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FrequencyEnum'>eBay API documentation</a>")
    name: Optional[StrictStr] = Field(default=None, description="The template name provided by the template.")
    schedule_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the template. Use this ID to create a schedule based on the properties of this schedule template.", alias="scheduleTemplateId")
    status: Optional[StrictStr] = Field(default=None, description="The present status of the template. You cannot create or modify a schedule using a template with an <code>INACTIVE</code> status.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusEnum'>eBay API documentation</a>")
    supported_configurations: Optional[List[SupportedConfiguration]] = Field(default=None, description="An array of the configuration supported by this template.", alias="supportedConfigurations")
    __properties: ClassVar[List[str]] = ["feedType", "frequency", "name", "scheduleTemplateId", "status", "supportedConfigurations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in supported_configurations (list)
        _items = []
        if self.supported_configurations:
            for _item_supported_configurations in self.supported_configurations:
                if _item_supported_configurations:
                    _items.append(_item_supported_configurations.to_dict())
            _dict['supportedConfigurations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feedType": obj.get("feedType"),
            "frequency": obj.get("frequency"),
            "name": obj.get("name"),
            "scheduleTemplateId": obj.get("scheduleTemplateId"),
            "status": obj.get("status"),
            "supportedConfigurations": [SupportedConfiguration.from_dict(_item) for _item in obj["supportedConfigurations"]] if obj.get("supportedConfigurations") is not None else None
        })
        return _obj



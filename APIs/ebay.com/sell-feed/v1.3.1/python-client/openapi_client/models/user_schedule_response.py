# coding: utf-8

"""
    Feed API

    <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

    The version of the OpenAPI document: v1.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserScheduleResponse(BaseModel):
    """
    The type that defines the fields for a paginated result set of available schedules. The response consists of 0 or more sequenced <em> pages</em> where each page has 0 or more items.
    """ # noqa: E501
    creation_date: Optional[StrictStr] = Field(default=None, description="The creation date of the schedule in hours based on the 24-hour Coordinated Universal Time (UTC) clock.", alias="creationDate")
    feed_type: Optional[StrictStr] = Field(default=None, description="The <strong>feedType</strong> associated with the schedule.", alias="feedType")
    last_modified_date: Optional[StrictStr] = Field(default=None, description="The date the schedule was last modified.", alias="lastModifiedDate")
    preferred_trigger_day_of_month: Optional[StrictInt] = Field(default=None, description="The preferred day of the month to trigger the schedule. This field can be used with <strong>preferredTriggerHour</strong> for monthly schedules. The last day of the month is used for numbers larger than the number of days in the month.", alias="preferredTriggerDayOfMonth")
    preferred_trigger_day_of_week: Optional[StrictStr] = Field(default=None, description="The preferred day of the week to trigger the schedule. This field can be used with <strong>preferredTriggerHour</strong> for weekly schedules. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:DayOfWeekEnum'>eBay API documentation</a>", alias="preferredTriggerDayOfWeek")
    preferred_trigger_hour: Optional[StrictStr] = Field(default=None, description="The preferred two-digit hour of the day to trigger the schedule. <br /><br /><b>Format:</b> UTC <code>hhZ</code><br /><br />For example, the following represents 11:00 am UTC:<br /><br /><code>11Z</code><br /><br />", alias="preferredTriggerHour")
    schedule_end_date: Optional[StrictStr] = Field(default=None, description="The timestamp on which the report generation (subscription) ends. After this date, the schedule status becomes <code>INACTIVE</code>.", alias="scheduleEndDate")
    schedule_id: Optional[StrictStr] = Field(default=None, description="The ID of the schedule. This ID is generated when the schedule was created by the <strong>createSchedule</strong> method.", alias="scheduleId")
    schedule_name: Optional[StrictStr] = Field(default=None, description="The schedule name assigned by the user for the created schedule. Users assign this name for their reference.", alias="scheduleName")
    schedule_start_date: Optional[StrictStr] = Field(default=None, description="The timestamp that indicates the start of the report generation.", alias="scheduleStartDate")
    schedule_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the template used to create this schedule.", alias="scheduleTemplateId")
    schema_version: Optional[StrictStr] = Field(default=None, description="The schema version of the feedType for the schedule.", alias="schemaVersion")
    status: Optional[StrictStr] = Field(default=None, description="The enumeration value that indicates the state of the schedule. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusEnum'>eBay API documentation</a>")
    status_reason: Optional[StrictStr] = Field(default=None, description="The reason the schedule is inactive. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusReasonEnum'>eBay API documentation</a>", alias="statusReason")
    __properties: ClassVar[List[str]] = ["creationDate", "feedType", "lastModifiedDate", "preferredTriggerDayOfMonth", "preferredTriggerDayOfWeek", "preferredTriggerHour", "scheduleEndDate", "scheduleId", "scheduleName", "scheduleStartDate", "scheduleTemplateId", "schemaVersion", "status", "statusReason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserScheduleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserScheduleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationDate": obj.get("creationDate"),
            "feedType": obj.get("feedType"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "preferredTriggerDayOfMonth": obj.get("preferredTriggerDayOfMonth"),
            "preferredTriggerDayOfWeek": obj.get("preferredTriggerDayOfWeek"),
            "preferredTriggerHour": obj.get("preferredTriggerHour"),
            "scheduleEndDate": obj.get("scheduleEndDate"),
            "scheduleId": obj.get("scheduleId"),
            "scheduleName": obj.get("scheduleName"),
            "scheduleStartDate": obj.get("scheduleStartDate"),
            "scheduleTemplateId": obj.get("scheduleTemplateId"),
            "schemaVersion": obj.get("schemaVersion"),
            "status": obj.get("status"),
            "statusReason": obj.get("statusReason")
        })
        return _obj



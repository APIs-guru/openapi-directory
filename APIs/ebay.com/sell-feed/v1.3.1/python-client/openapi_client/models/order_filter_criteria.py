# coding: utf-8

"""
    Feed API

    <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

    The version of the OpenAPI document: v1.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_range import DateRange
from typing import Optional, Set
from typing_extensions import Self

class OrderFilterCriteria(BaseModel):
    """
    The type that defines the fields for the order filters.
    """ # noqa: E501
    creation_date_range: Optional[DateRange] = Field(default=None, alias="creationDateRange")
    modified_date_range: Optional[DateRange] = Field(default=None, alias="modifiedDateRange")
    order_status: Optional[StrictStr] = Field(default=None, description="The order status of the orders returned. If the filter is omitted from createOrderTask call, orders that are in both <code>ACTIVE </code>and<code> COMPLETED</code> states are returned. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:OrderStatusEnum'>eBay API documentation</a>", alias="orderStatus")
    __properties: ClassVar[List[str]] = ["creationDateRange", "modifiedDateRange", "orderStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderFilterCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creation_date_range
        if self.creation_date_range:
            _dict['creationDateRange'] = self.creation_date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_date_range
        if self.modified_date_range:
            _dict['modifiedDateRange'] = self.modified_date_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderFilterCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationDateRange": DateRange.from_dict(obj["creationDateRange"]) if obj.get("creationDateRange") is not None else None,
            "modifiedDateRange": DateRange.from_dict(obj["modifiedDateRange"]) if obj.get("modifiedDateRange") is not None else None,
            "orderStatus": obj.get("orderStatus")
        })
        return _obj



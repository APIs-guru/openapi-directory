# coding: utf-8

"""
    Feed API

    <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

    The version of the OpenAPI document: v1.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.customer_service_metrics_filter_criteria import CustomerServiceMetricsFilterCriteria
from typing import Optional, Set
from typing_extensions import Self

class ServiceMetricsTask(BaseModel):
    """
    ServiceMetricsTask
    """ # noqa: E501
    completion_date: Optional[StrictStr] = Field(default=None, description="The timestamp when the customer service metrics task went into the <code>COMPLETED</code> or <code>COMPLETED_WITH_ERROR</code> state. This field is only returned if the status is one of the two completed values. This state means that eBay has compiled the report for the seller based on the sellerâ€™s filter criteria, and the seller can run a <strong>getResultFile</strong> call to download the report.", alias="completionDate")
    creation_date: Optional[StrictStr] = Field(default=None, description="The date the customer service metrics task was created.", alias="creationDate")
    detail_href: Optional[StrictStr] = Field(default=None, description="The relative <strong>getCustomerServiceMetricTask</strong> call URI path to retrieve the corresponding task.", alias="detailHref")
    feed_type: Optional[StrictStr] = Field(default=None, description="The feed type associated with the task.", alias="feedType")
    filter_criteria: Optional[CustomerServiceMetricsFilterCriteria] = Field(default=None, alias="filterCriteria")
    schema_version: Optional[StrictStr] = Field(default=None, description="The schema version number of the file format. If omitted, the default value is used. <p><b>Default value: </b><code>1.0</code><p>", alias="schemaVersion")
    status: Optional[StrictStr] = Field(default=None, description="An enumeration value that indicates the state of the task. See <strong>FeedStatusEnum</strong> for values. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FeedStatusEnum'>eBay API documentation</a>")
    task_id: Optional[StrictStr] = Field(default=None, description="The unique eBay-assigned ID of the task.", alias="taskId")
    __properties: ClassVar[List[str]] = ["completionDate", "creationDate", "detailHref", "feedType", "filterCriteria", "schemaVersion", "status", "taskId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceMetricsTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter_criteria
        if self.filter_criteria:
            _dict['filterCriteria'] = self.filter_criteria.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceMetricsTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completionDate": obj.get("completionDate"),
            "creationDate": obj.get("creationDate"),
            "detailHref": obj.get("detailHref"),
            "feedType": obj.get("feedType"),
            "filterCriteria": CustomerServiceMetricsFilterCriteria.from_dict(obj["filterCriteria"]) if obj.get("filterCriteria") is not None else None,
            "schemaVersion": obj.get("schemaVersion"),
            "status": obj.get("status"),
            "taskId": obj.get("taskId")
        })
        return _obj



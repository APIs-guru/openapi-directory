# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.

    The version of the OpenAPI document: v1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.automotive_parts_compatibility_policy_response import AutomotivePartsCompatibilityPolicyResponse

class TestAutomotivePartsCompatibilityPolicyResponse(unittest.TestCase):
    """AutomotivePartsCompatibilityPolicyResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AutomotivePartsCompatibilityPolicyResponse:
        """Test AutomotivePartsCompatibilityPolicyResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AutomotivePartsCompatibilityPolicyResponse`
        """
        model = AutomotivePartsCompatibilityPolicyResponse()
        if include_optional:
            return AutomotivePartsCompatibilityPolicyResponse(
                automotive_parts_compatibility_policies = [
                    openapi_client.models.automotive_parts_compatibility_policy.AutomotivePartsCompatibilityPolicy(
                        category_id = '', 
                        category_tree_id = '', 
                        compatibility_based_on = '', 
                        compatible_vehicle_types = [
                            ''
                            ], 
                        max_number_of_compatible_vehicles = 56, )
                    ],
                warnings = [
                    openapi_client.models.error.Error(
                        category = '', 
                        domain = '', 
                        error_id = 56, 
                        input_ref_ids = [
                            ''
                            ], 
                        long_message = '', 
                        message = '', 
                        output_ref_ids = [
                            ''
                            ], 
                        parameters = [
                            openapi_client.models.error_parameter.ErrorParameter(
                                name = '', 
                                value = '', )
                            ], 
                        subdomain = '', )
                    ]
            )
        else:
            return AutomotivePartsCompatibilityPolicyResponse(
        )
        """

    def testAutomotivePartsCompatibilityPolicyResponse(self):
        """Test AutomotivePartsCompatibilityPolicyResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

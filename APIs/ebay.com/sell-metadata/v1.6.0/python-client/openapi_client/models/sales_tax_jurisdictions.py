# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.

    The version of the OpenAPI document: v1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sales_tax_jurisdiction import SalesTaxJurisdiction
from typing import Optional, Set
from typing_extensions import Self

class SalesTaxJurisdictions(BaseModel):
    """
    This complex type contains a list of sales tax jurisdictions.
    """ # noqa: E501
    sales_tax_jurisdictions: Optional[List[SalesTaxJurisdiction]] = Field(default=None, description="A list of sales tax jurisdictions.", alias="salesTaxJurisdictions")
    __properties: ClassVar[List[str]] = ["salesTaxJurisdictions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalesTaxJurisdictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sales_tax_jurisdictions (list)
        _items = []
        if self.sales_tax_jurisdictions:
            for _item_sales_tax_jurisdictions in self.sales_tax_jurisdictions:
                if _item_sales_tax_jurisdictions:
                    _items.append(_item_sales_tax_jurisdictions.to_dict())
            _dict['salesTaxJurisdictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalesTaxJurisdictions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "salesTaxJurisdictions": [SalesTaxJurisdiction.from_dict(_item) for _item in obj["salesTaxJurisdictions"]] if obj.get("salesTaxJurisdictions") is not None else None
        })
        return _obj



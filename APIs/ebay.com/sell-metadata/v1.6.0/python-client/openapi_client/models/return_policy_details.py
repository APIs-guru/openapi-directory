# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.

    The version of the OpenAPI document: v1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.time_duration import TimeDuration
from typing import Optional, Set
from typing_extensions import Self

class ReturnPolicyDetails(BaseModel):
    """
    This container defines the category policies that relate to domestic and international return policies (the return shipping is made via a domestic or an international shipping service, respectively).
    """ # noqa: E501
    policy_description_enabled: Optional[StrictBool] = Field(default=None, description="If set to <code>true</code>, this flag indicates you can supply a detailed return policy description within your return policy (for example, by populating the <b>returnInstructions</b> field in the Account API's <b>createReturnPolicy</b>). User-supplied return policy details are allowed only in the DE, ES, FR, and IT marketplaces.", alias="policyDescriptionEnabled")
    refund_methods: Optional[List[StrictStr]] = Field(default=None, description="A list of refund methods allowed for the associated category.", alias="refundMethods")
    return_methods: Optional[List[StrictStr]] = Field(default=None, description="A list of return methods allowed for the associated category.", alias="returnMethods")
    return_periods: Optional[List[TimeDuration]] = Field(default=None, description="A list of return periods allowed for the associated category.  <br><br>Note that different APIs require you to enter the return period in different ways. For example, the Account API uses the complex <b>TimeDuration</b> type, which takes two values (a <b>unit</b> and a <b>value</b>), whereas the Trading API takes a single value (such as <code>Days_30</code>).", alias="returnPeriods")
    return_shipping_cost_payers: Optional[List[StrictStr]] = Field(default=None, description="A list of allowed values for who pays for the return shipping cost.  <br><br>Note that for SNAD returns, the seller is always responsible for the return shipping cost.", alias="returnShippingCostPayers")
    returns_acceptance_enabled: Optional[StrictBool] = Field(default=None, description="If set to <code>true</code>, this flag indicates the seller can configure how they handle domestic returns.", alias="returnsAcceptanceEnabled")
    __properties: ClassVar[List[str]] = ["policyDescriptionEnabled", "refundMethods", "returnMethods", "returnPeriods", "returnShippingCostPayers", "returnsAcceptanceEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnPolicyDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in return_periods (list)
        _items = []
        if self.return_periods:
            for _item_return_periods in self.return_periods:
                if _item_return_periods:
                    _items.append(_item_return_periods.to_dict())
            _dict['returnPeriods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnPolicyDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "policyDescriptionEnabled": obj.get("policyDescriptionEnabled"),
            "refundMethods": obj.get("refundMethods"),
            "returnMethods": obj.get("returnMethods"),
            "returnPeriods": [TimeDuration.from_dict(_item) for _item in obj["returnPeriods"]] if obj.get("returnPeriods") is not None else None,
            "returnShippingCostPayers": obj.get("returnShippingCostPayers"),
            "returnsAcceptanceEnabled": obj.get("returnsAcceptanceEnabled")
        })
        return _obj



# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.

    The version of the OpenAPI document: v1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NegotiatedPricePolicy(BaseModel):
    """
    NegotiatedPricePolicy
    """ # noqa: E501
    best_offer_auto_accept_enabled: Optional[StrictBool] = Field(default=None, description="This flag denotes whether or not the category supports the setting of a price at which best offers are automatically accepted. If set to <code>true</code>, the category does support the setting of an automatic price for best-offers.", alias="bestOfferAutoAcceptEnabled")
    best_offer_auto_decline_enabled: Optional[StrictBool] = Field(default=None, description="This flag denotes whether or not the category supports the setting of an auto-decline price for best offers. If set to <code>true</code>, the category does support the setting of an automatic-decline price for best-offers.", alias="bestOfferAutoDeclineEnabled")
    best_offer_counter_enabled: Optional[StrictBool] = Field(default=None, description="This flag denotes whether or not the category supports the setting for an automatic counter-offer on best offers. If set to <code>true</code>, the category does support the setting of an automatic counter-offer price for best-offers.", alias="bestOfferCounterEnabled")
    category_id: Optional[StrictStr] = Field(default=None, description="The category ID to which the negotiated-price policies apply.", alias="categoryId")
    category_tree_id: Optional[StrictStr] = Field(default=None, description="A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.", alias="categoryTreeId")
    __properties: ClassVar[List[str]] = ["bestOfferAutoAcceptEnabled", "bestOfferAutoDeclineEnabled", "bestOfferCounterEnabled", "categoryId", "categoryTreeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NegotiatedPricePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NegotiatedPricePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bestOfferAutoAcceptEnabled": obj.get("bestOfferAutoAcceptEnabled"),
            "bestOfferAutoDeclineEnabled": obj.get("bestOfferAutoDeclineEnabled"),
            "bestOfferCounterEnabled": obj.get("bestOfferCounterEnabled"),
            "categoryId": obj.get("categoryId"),
            "categoryTreeId": obj.get("categoryTreeId")
        })
        return _obj



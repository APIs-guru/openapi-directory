# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.

    The version of the OpenAPI document: v1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hazard_statement import HazardStatement
from openapi_client.models.pictogram import Pictogram
from openapi_client.models.signal_word import SignalWord
from typing import Optional, Set
from typing_extensions import Self

class HazardousMaterialDetailsResponse(BaseModel):
    """
    A type that defines the response fields for the <b>getHazardousMaterialsLabels</b> method.
    """ # noqa: E501
    pictograms: Optional[List[Pictogram]] = Field(default=None, description="This array contains of available hazardous materials hazard pictograms for the specified marketplace.")
    signal_words: Optional[List[SignalWord]] = Field(default=None, description="This array contains available hazardous materials signal words for the specified marketplace.", alias="signalWords")
    statements: Optional[List[HazardStatement]] = Field(default=None, description="This array contains available hazardous materials hazard statements for the specified marketplace.")
    __properties: ClassVar[List[str]] = ["pictograms", "signalWords", "statements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HazardousMaterialDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pictograms (list)
        _items = []
        if self.pictograms:
            for _item_pictograms in self.pictograms:
                if _item_pictograms:
                    _items.append(_item_pictograms.to_dict())
            _dict['pictograms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in signal_words (list)
        _items = []
        if self.signal_words:
            for _item_signal_words in self.signal_words:
                if _item_signal_words:
                    _items.append(_item_signal_words.to_dict())
            _dict['signalWords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statements (list)
        _items = []
        if self.statements:
            for _item_statements in self.statements:
                if _item_statements:
                    _items.append(_item_statements.to_dict())
            _dict['statements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HazardousMaterialDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pictograms": [Pictogram.from_dict(_item) for _item in obj["pictograms"]] if obj.get("pictograms") is not None else None,
            "signalWords": [SignalWord.from_dict(_item) for _item in obj["signalWords"]] if obj.get("signalWords") is not None else None,
            "statements": [HazardStatement.from_dict(_item) for _item in obj["statements"]] if obj.get("statements") is not None else None
        })
        return _obj



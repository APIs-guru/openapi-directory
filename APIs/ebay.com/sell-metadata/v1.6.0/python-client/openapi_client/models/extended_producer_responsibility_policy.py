# coding: utf-8

"""
    Metadata API

    The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.

    The version of the OpenAPI document: v1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.extended_producer_responsibility import ExtendedProducerResponsibility
from typing import Optional, Set
from typing_extensions import Self

class ExtendedProducerResponsibilityPolicy(BaseModel):
    """
    A type that defines the Extended Producer Responsibility policy.
    """ # noqa: E501
    category_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the category under which the policy applies.", alias="categoryId")
    category_tree_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the category tree under which the policy applies.", alias="categoryTreeId")
    supported_attributes: Optional[List[ExtendedProducerResponsibility]] = Field(default=None, description="The details regarding the attributes included in the policy, such as their usage guidelines and whether they can be specified at the listing variation level.", alias="supportedAttributes")
    __properties: ClassVar[List[str]] = ["categoryId", "categoryTreeId", "supportedAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedProducerResponsibilityPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in supported_attributes (list)
        _items = []
        if self.supported_attributes:
            for _item_supported_attributes in self.supported_attributes:
                if _item_supported_attributes:
                    _items.append(_item_supported_attributes.to_dict())
            _dict['supportedAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedProducerResponsibilityPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryId": obj.get("categoryId"),
            "categoryTreeId": obj.get("categoryTreeId"),
            "supportedAttributes": [ExtendedProducerResponsibility.from_dict(_item) for _item in obj["supportedAttributes"]] if obj.get("supportedAttributes") is not None else None
        })
        return _obj



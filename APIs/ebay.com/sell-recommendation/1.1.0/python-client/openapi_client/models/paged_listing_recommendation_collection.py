# coding: utf-8

"""
    Recommendation API

    The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.listing_recommendation import ListingRecommendation
from typing import Optional, Set
from typing_extensions import Self

class PagedListingRecommendationCollection(BaseModel):
    """
    The high-level object used to return a set of Promoted Listings ad recommendations.
    """ # noqa: E501
    href: Optional[StrictStr] = Field(default=None, description="The URI of the current page of results from the result set.")
    limit: Optional[StrictInt] = Field(default=None, description="The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.")
    listing_recommendations: Optional[List[ListingRecommendation]] = Field(default=None, description="Returns a list of listingRecommendations, where each element in the list offers recommendations for the associated listingId. Which elements are returned depend on how you structure the request. For example, if you request recommendations for all of a sellers listings (by leaving the request payload empty), ad recommendations are returned only for those listings where promoteWithAd is set to RECOMMENDED.", alias="listingRecommendations")
    next: Optional[StrictStr] = Field(default=None, description="The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048")
    offset: Optional[StrictInt] = Field(default=None, description="The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.")
    prev: Optional[StrictStr] = Field(default=None, description="The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048")
    total: Optional[StrictInt] = Field(default=None, description="The total number of items retrieved in the result set. If no items are found, this field is returned with a value of 0.")
    __properties: ClassVar[List[str]] = ["href", "limit", "listingRecommendations", "next", "offset", "prev", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagedListingRecommendationCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in listing_recommendations (list)
        _items = []
        if self.listing_recommendations:
            for _item_listing_recommendations in self.listing_recommendations:
                if _item_listing_recommendations:
                    _items.append(_item_listing_recommendations.to_dict())
            _dict['listingRecommendations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagedListingRecommendationCollection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "href": obj.get("href"),
            "limit": obj.get("limit"),
            "listingRecommendations": [ListingRecommendation.from_dict(_item) for _item in obj["listingRecommendations"]] if obj.get("listingRecommendations") is not None else None,
            "next": obj.get("next"),
            "offset": obj.get("offset"),
            "prev": obj.get("prev"),
            "total": obj.get("total")
        })
        return _obj



# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ship_to_region import ShipToRegion
from typing import Optional, Set
from typing_extensions import Self

class ShipToLocations(BaseModel):
    """
    The type that defines the fields that include and exclude geographic regions affecting where the item can be shipped. The seller defines these regions when listing the item.
    """ # noqa: E501
    region_excluded: Optional[List[ShipToRegion]] = Field(default=None, description="An array of containers that express the large geographical regions, countries, state/provinces, or special locations within a country where the seller is not willing to ship to.", alias="regionExcluded")
    region_included: Optional[List[ShipToRegion]] = Field(default=None, description="An array of containers that express the large geographical regions, countries, or state/provinces within a country where the seller is willing to ship to. Prospective buyers must look at the shipping regions under this container, as well as the shipping regions that are under the regionExcluded to see where the seller is willing to ship items. Sellers can specify that they ship 'Worldwide', but then add several large geographical regions (e.g. Asia, Oceania, Middle East) to the exclusion list, or sellers can specify that they ship to Europe and Africa, but then add several individual countries to the exclusion list.", alias="regionIncluded")
    __properties: ClassVar[List[str]] = ["regionExcluded", "regionIncluded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipToLocations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in region_excluded (list)
        _items = []
        if self.region_excluded:
            for _item_region_excluded in self.region_excluded:
                if _item_region_excluded:
                    _items.append(_item_region_excluded.to_dict())
            _dict['regionExcluded'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in region_included (list)
        _items = []
        if self.region_included:
            for _item_region_included in self.region_included:
                if _item_region_included:
                    _items.append(_item_region_included.to_dict())
            _dict['regionIncluded'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipToLocations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "regionExcluded": [ShipToRegion.from_dict(_item) for _item in obj["regionExcluded"]] if obj.get("regionExcluded") is not None else None,
            "regionIncluded": [ShipToRegion.from_dict(_item) for _item in obj["regionIncluded"]] if obj.get("regionIncluded") is not None else None
        })
        return _obj



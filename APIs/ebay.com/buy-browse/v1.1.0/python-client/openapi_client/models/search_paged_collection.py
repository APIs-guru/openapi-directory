# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_corrections import AutoCorrections
from openapi_client.models.error import Error
from openapi_client.models.item_summary import ItemSummary
from openapi_client.models.refinement import Refinement
from typing import Optional, Set
from typing_extensions import Self

class SearchPagedCollection(BaseModel):
    """
    The type that defines the fields for a paginated result set. The response consists of 0 or more sequenced <em> pages</em> where each page has 0 or more items. 
    """ # noqa: E501
    auto_corrections: Optional[AutoCorrections] = Field(default=None, alias="autoCorrections")
    href: Optional[StrictStr] = Field(default=None, description="The URI of the current page of results. The following example of the search method returns items 1 thru 5 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?q=shirt&amp;limit=5&amp;offset=0.")
    item_summaries: Optional[List[ItemSummary]] = Field(default=None, description="An array of the items on this page. The items are sorted according to the sorting method specified in the request.", alias="itemSummaries")
    limit: Optional[StrictInt] = Field(default=None, description="The value of the limit parameter submitted in the request, which is the maximum number of items to return on a page, from the result set. A result set is the complete set of items returned by the method.")
    next: Optional[StrictStr] = Field(default=None, description="The URI for the next page of results. This value is returned if there is an additional page of results to return from the result set. The following example of the search method returns items 5 thru 10 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&amp;limit=5&amp;offset=10")
    offset: Optional[StrictInt] = Field(default=None, description="This value indicates the offset used for current page of items being returned. Assume the initial request used an offset of 0 and a limit of 3. Then in the first page of results, this value would be 0, and items 1-3 are returned. For the second page, this value is 3 and so on.")
    prev: Optional[StrictStr] = Field(default=None, description="The URI for the previous page of results. This is returned if there is a previous page of results from the result set. The following example of the search method returns items 1 thru 5 from the list of items found, which would be the first set of items returned. https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&amp;limit=5&amp;offset=0")
    refinement: Optional[Refinement] = None
    total: Optional[StrictInt] = Field(default=None, description="The total number of items that match the input criteria.")
    warnings: Optional[List[Error]] = Field(default=None, description="The container with all the warnings for the request.")
    __properties: ClassVar[List[str]] = ["autoCorrections", "href", "itemSummaries", "limit", "next", "offset", "prev", "refinement", "total", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchPagedCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_corrections
        if self.auto_corrections:
            _dict['autoCorrections'] = self.auto_corrections.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in item_summaries (list)
        _items = []
        if self.item_summaries:
            for _item_item_summaries in self.item_summaries:
                if _item_item_summaries:
                    _items.append(_item_item_summaries.to_dict())
            _dict['itemSummaries'] = _items
        # override the default output from pydantic by calling `to_dict()` of refinement
        if self.refinement:
            _dict['refinement'] = self.refinement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchPagedCollection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoCorrections": AutoCorrections.from_dict(obj["autoCorrections"]) if obj.get("autoCorrections") is not None else None,
            "href": obj.get("href"),
            "itemSummaries": [ItemSummary.from_dict(_item) for _item in obj["itemSummaries"]] if obj.get("itemSummaries") is not None else None,
            "limit": obj.get("limit"),
            "next": obj.get("next"),
            "offset": obj.get("offset"),
            "prev": obj.get("prev"),
            "refinement": Refinement.from_dict(obj["refinement"]) if obj.get("refinement") is not None else None,
            "total": obj.get("total"),
            "warnings": [Error.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj



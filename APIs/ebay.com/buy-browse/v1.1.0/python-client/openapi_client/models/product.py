# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_product_identity import AdditionalProductIdentity
from openapi_client.models.aspect_group import AspectGroup
from openapi_client.models.image import Image
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    The type that defines the fields for the product information of the item.
    """ # noqa: E501
    additional_images: Optional[List[Image]] = Field(default=None, description="An array of containers with the URLs for the product images that are in addition to the primary image.", alias="additionalImages")
    additional_product_identities: Optional[List[AdditionalProductIdentity]] = Field(default=None, description="An array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request fieldgroups is set to PRODUCT.", alias="additionalProductIdentities")
    aspect_groups: Optional[List[AspectGroup]] = Field(default=None, description="An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.", alias="aspectGroups")
    brand: Optional[StrictStr] = Field(default=None, description="The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).")
    description: Optional[StrictStr] = Field(default=None, description="The rich description of an eBay product, which might contain HTML.")
    gtins: Optional[List[StrictStr]] = Field(default=None, description="An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by https://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.")
    image: Optional[Image] = None
    mpns: Optional[List[StrictStr]] = Field(default=None, description="An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the product.")
    __properties: ClassVar[List[str]] = ["additionalImages", "additionalProductIdentities", "aspectGroups", "brand", "description", "gtins", "image", "mpns", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_images (list)
        _items = []
        if self.additional_images:
            for _item_additional_images in self.additional_images:
                if _item_additional_images:
                    _items.append(_item_additional_images.to_dict())
            _dict['additionalImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_product_identities (list)
        _items = []
        if self.additional_product_identities:
            for _item_additional_product_identities in self.additional_product_identities:
                if _item_additional_product_identities:
                    _items.append(_item_additional_product_identities.to_dict())
            _dict['additionalProductIdentities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in aspect_groups (list)
        _items = []
        if self.aspect_groups:
            for _item_aspect_groups in self.aspect_groups:
                if _item_aspect_groups:
                    _items.append(_item_aspect_groups.to_dict())
            _dict['aspectGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalImages": [Image.from_dict(_item) for _item in obj["additionalImages"]] if obj.get("additionalImages") is not None else None,
            "additionalProductIdentities": [AdditionalProductIdentity.from_dict(_item) for _item in obj["additionalProductIdentities"]] if obj.get("additionalProductIdentities") is not None else None,
            "aspectGroups": [AspectGroup.from_dict(_item) for _item in obj["aspectGroups"]] if obj.get("aspectGroups") is not None else None,
            "brand": obj.get("brand"),
            "description": obj.get("description"),
            "gtins": obj.get("gtins"),
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "mpns": obj.get("mpns"),
            "title": obj.get("title")
        })
        return _obj



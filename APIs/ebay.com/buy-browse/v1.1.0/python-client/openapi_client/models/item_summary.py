# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.category import Category
from openapi_client.models.compatibility_property import CompatibilityProperty
from openapi_client.models.converted_amount import ConvertedAmount
from openapi_client.models.image import Image
from openapi_client.models.item_location_impl import ItemLocationImpl
from openapi_client.models.marketing_price import MarketingPrice
from openapi_client.models.pickup_option_summary import PickupOptionSummary
from openapi_client.models.seller import Seller
from openapi_client.models.shipping_option_summary import ShippingOptionSummary
from openapi_client.models.target_location import TargetLocation
from typing import Optional, Set
from typing_extensions import Self

class ItemSummary(BaseModel):
    """
    The type that defines the fields for the details of a specific item.
    """ # noqa: E501
    additional_images: Optional[List[Image]] = Field(default=None, description="An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.", alias="additionalImages")
    adult_only: Optional[StrictBool] = Field(default=None, description="This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.", alias="adultOnly")
    available_coupons: Optional[StrictBool] = Field(default=None, description="This boolean attribute indicates if coupons are available for the item.", alias="availableCoupons")
    bid_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.", alias="bidCount")
    buying_options: Optional[List[StrictStr]] = Field(default=None, description="A comma separated list of all the purchase options available for the item. Values Returned: FIXED_PRICE - Indicates the buyer can purchase the item for a set price using the Buy It Now button. AUCTION - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item. BEST_OFFER - Items where the buyer can send the seller a price they're willing to pay for the item. The seller can accept, reject, or send a counter offer. For details about Best Offer, see Best Offer. Code so that your app gracefully handles any future changes to this list.", alias="buyingOptions")
    categories: Optional[List[Category]] = Field(default=None, description="This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).")
    compatibility_match: Optional[StrictStr] = Field(default=None, description="This indicates how well the item matches the compatibility_filter product attributes. Valid Values: EXACT or POSSIBLE Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum'>eBay API documentation</a>", alias="compatibilityMatch")
    compatibility_properties: Optional[List[CompatibilityProperty]] = Field(default=None, description="This container returns only the product attributes that are compatible with the item. These attributes were specified in the compatibility_filter in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.", alias="compatibilityProperties")
    condition: Optional[StrictStr] = Field(default=None, description="The text describing the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.")
    condition_id: Optional[StrictStr] = Field(default=None, description="The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.", alias="conditionId")
    current_bid_price: Optional[ConvertedAmount] = Field(default=None, alias="currentBidPrice")
    distance_from_pickup_location: Optional[TargetLocation] = Field(default=None, alias="distanceFromPickupLocation")
    energy_efficiency_class: Optional[StrictStr] = Field(default=None, description="This indicates the European energy efficiency rating (EEK) of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.", alias="energyEfficiencyClass")
    epid: Optional[StrictStr] = Field(default=None, description="An ePID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.")
    image: Optional[Image] = None
    item_affiliate_web_url: Optional[StrictStr] = Field(default=None, description="The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method. Note: eBay Partner Network, in order to receive a commission for your sales, you must use this URL to forward your buyer to the ebay.com site.", alias="itemAffiliateWebUrl")
    item_group_href: Optional[StrictStr] = Field(default=None, description="The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.", alias="itemGroupHref")
    item_group_type: Optional[StrictStr] = Field(default=None, description="The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only the SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups. Code so that your app gracefully handles any future changes to this list.", alias="itemGroupType")
    item_href: Optional[StrictStr] = Field(default=None, description="The URI for the Browse API getItem method, which can be used to retrieve more details about items in the search results.", alias="itemHref")
    item_id: Optional[StrictStr] = Field(default=None, description="The unique RESTful identifier of the item.", alias="itemId")
    item_location: Optional[ItemLocationImpl] = Field(default=None, alias="itemLocation")
    item_web_url: Optional[StrictStr] = Field(default=None, description="The URL to the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.", alias="itemWebUrl")
    legacy_item_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.", alias="legacyItemId")
    marketing_price: Optional[MarketingPrice] = Field(default=None, alias="marketingPrice")
    pickup_options: Optional[List[PickupOptionSummary]] = Field(default=None, description="This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the method request.", alias="pickupOptions")
    price: Optional[ConvertedAmount] = None
    price_display_condition: Optional[StrictStr] = Field(default=None, description="Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>", alias="priceDisplayCondition")
    qualified_programs: Optional[List[StrictStr]] = Field(default=None, description="An array of the qualified programs available for the item, such as EBAY_PLUS. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items. Note: eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.", alias="qualifiedPrograms")
    seller: Optional[Seller] = None
    shipping_options: Optional[List[ShippingOptionSummary]] = Field(default=None, description="This container returns the shipping options available to ship the item.", alias="shippingOptions")
    short_description: Optional[StrictStr] = Field(default=None, description="This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn't give enough information but the description is too big. Surfacing the shortDescription can often provide buyers with the additional information that could help them make a buying decision. For example: &quot; title&quot;: &quot;Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing&quot;, &quot;shortDescription&quot;: &quot;1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.&quot;, Restriction: This field is returned by the search method only when fieldgroups = EXTENDED.", alias="shortDescription")
    thumbnail_images: Optional[List[Image]] = Field(default=None, description="An array of thumbnail images for the item.", alias="thumbnailImages")
    title: Optional[StrictStr] = Field(default=None, description="The seller-created title of the item. Maximum Length: 80 characters")
    unit_price: Optional[ConvertedAmount] = Field(default=None, alias="unitPrice")
    unit_pricing_measure: Optional[StrictStr] = Field(default=None, description="The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;", alias="unitPricingMeasure")
    __properties: ClassVar[List[str]] = ["additionalImages", "adultOnly", "availableCoupons", "bidCount", "buyingOptions", "categories", "compatibilityMatch", "compatibilityProperties", "condition", "conditionId", "currentBidPrice", "distanceFromPickupLocation", "energyEfficiencyClass", "epid", "image", "itemAffiliateWebUrl", "itemGroupHref", "itemGroupType", "itemHref", "itemId", "itemLocation", "itemWebUrl", "legacyItemId", "marketingPrice", "pickupOptions", "price", "priceDisplayCondition", "qualifiedPrograms", "seller", "shippingOptions", "shortDescription", "thumbnailImages", "title", "unitPrice", "unitPricingMeasure"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_images (list)
        _items = []
        if self.additional_images:
            for _item_additional_images in self.additional_images:
                if _item_additional_images:
                    _items.append(_item_additional_images.to_dict())
            _dict['additionalImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in compatibility_properties (list)
        _items = []
        if self.compatibility_properties:
            for _item_compatibility_properties in self.compatibility_properties:
                if _item_compatibility_properties:
                    _items.append(_item_compatibility_properties.to_dict())
            _dict['compatibilityProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_bid_price
        if self.current_bid_price:
            _dict['currentBidPrice'] = self.current_bid_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of distance_from_pickup_location
        if self.distance_from_pickup_location:
            _dict['distanceFromPickupLocation'] = self.distance_from_pickup_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_location
        if self.item_location:
            _dict['itemLocation'] = self.item_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketing_price
        if self.marketing_price:
            _dict['marketingPrice'] = self.marketing_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pickup_options (list)
        _items = []
        if self.pickup_options:
            for _item_pickup_options in self.pickup_options:
                if _item_pickup_options:
                    _items.append(_item_pickup_options.to_dict())
            _dict['pickupOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seller
        if self.seller:
            _dict['seller'] = self.seller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_options (list)
        _items = []
        if self.shipping_options:
            for _item_shipping_options in self.shipping_options:
                if _item_shipping_options:
                    _items.append(_item_shipping_options.to_dict())
            _dict['shippingOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in thumbnail_images (list)
        _items = []
        if self.thumbnail_images:
            for _item_thumbnail_images in self.thumbnail_images:
                if _item_thumbnail_images:
                    _items.append(_item_thumbnail_images.to_dict())
            _dict['thumbnailImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of unit_price
        if self.unit_price:
            _dict['unitPrice'] = self.unit_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalImages": [Image.from_dict(_item) for _item in obj["additionalImages"]] if obj.get("additionalImages") is not None else None,
            "adultOnly": obj.get("adultOnly"),
            "availableCoupons": obj.get("availableCoupons"),
            "bidCount": obj.get("bidCount"),
            "buyingOptions": obj.get("buyingOptions"),
            "categories": [Category.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "compatibilityMatch": obj.get("compatibilityMatch"),
            "compatibilityProperties": [CompatibilityProperty.from_dict(_item) for _item in obj["compatibilityProperties"]] if obj.get("compatibilityProperties") is not None else None,
            "condition": obj.get("condition"),
            "conditionId": obj.get("conditionId"),
            "currentBidPrice": ConvertedAmount.from_dict(obj["currentBidPrice"]) if obj.get("currentBidPrice") is not None else None,
            "distanceFromPickupLocation": TargetLocation.from_dict(obj["distanceFromPickupLocation"]) if obj.get("distanceFromPickupLocation") is not None else None,
            "energyEfficiencyClass": obj.get("energyEfficiencyClass"),
            "epid": obj.get("epid"),
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "itemAffiliateWebUrl": obj.get("itemAffiliateWebUrl"),
            "itemGroupHref": obj.get("itemGroupHref"),
            "itemGroupType": obj.get("itemGroupType"),
            "itemHref": obj.get("itemHref"),
            "itemId": obj.get("itemId"),
            "itemLocation": ItemLocationImpl.from_dict(obj["itemLocation"]) if obj.get("itemLocation") is not None else None,
            "itemWebUrl": obj.get("itemWebUrl"),
            "legacyItemId": obj.get("legacyItemId"),
            "marketingPrice": MarketingPrice.from_dict(obj["marketingPrice"]) if obj.get("marketingPrice") is not None else None,
            "pickupOptions": [PickupOptionSummary.from_dict(_item) for _item in obj["pickupOptions"]] if obj.get("pickupOptions") is not None else None,
            "price": ConvertedAmount.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "priceDisplayCondition": obj.get("priceDisplayCondition"),
            "qualifiedPrograms": obj.get("qualifiedPrograms"),
            "seller": Seller.from_dict(obj["seller"]) if obj.get("seller") is not None else None,
            "shippingOptions": [ShippingOptionSummary.from_dict(_item) for _item in obj["shippingOptions"]] if obj.get("shippingOptions") is not None else None,
            "shortDescription": obj.get("shortDescription"),
            "thumbnailImages": [Image.from_dict(_item) for _item in obj["thumbnailImages"]] if obj.get("thumbnailImages") is not None else None,
            "title": obj.get("title"),
            "unitPrice": ConvertedAmount.from_dict(obj["unitPrice"]) if obj.get("unitPrice") is not None else None,
            "unitPricingMeasure": obj.get("unitPricingMeasure")
        })
        return _obj



# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.legal_address import LegalAddress
from openapi_client.models.vat_detail import VatDetail
from typing import Optional, Set
from typing_extensions import Self

class SellerLegalInfo(BaseModel):
    """
    The type that defines the fields for the contact information for a seller.
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="The seller's business email address.")
    fax: Optional[StrictStr] = Field(default=None, description="The seller' business fax number.")
    imprint: Optional[StrictStr] = Field(default=None, description="This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.")
    legal_contact_first_name: Optional[StrictStr] = Field(default=None, description="The seller's first name.", alias="legalContactFirstName")
    legal_contact_last_name: Optional[StrictStr] = Field(default=None, description="The seller's last name.", alias="legalContactLastName")
    name: Optional[StrictStr] = Field(default=None, description="The name of the seller's business.")
    phone: Optional[StrictStr] = Field(default=None, description="The seller's business phone number.")
    registration_number: Optional[StrictStr] = Field(default=None, description="The seller's registration number. This is information used by some countries.", alias="registrationNumber")
    seller_provided_legal_address: Optional[LegalAddress] = Field(default=None, alias="sellerProvidedLegalAddress")
    terms_of_service: Optional[StrictStr] = Field(default=None, description="This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.", alias="termsOfService")
    vat_details: Optional[List[VatDetail]] = Field(default=None, description="An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.", alias="vatDetails")
    __properties: ClassVar[List[str]] = ["email", "fax", "imprint", "legalContactFirstName", "legalContactLastName", "name", "phone", "registrationNumber", "sellerProvidedLegalAddress", "termsOfService", "vatDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SellerLegalInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of seller_provided_legal_address
        if self.seller_provided_legal_address:
            _dict['sellerProvidedLegalAddress'] = self.seller_provided_legal_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vat_details (list)
        _items = []
        if self.vat_details:
            for _item_vat_details in self.vat_details:
                if _item_vat_details:
                    _items.append(_item_vat_details.to_dict())
            _dict['vatDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SellerLegalInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "fax": obj.get("fax"),
            "imprint": obj.get("imprint"),
            "legalContactFirstName": obj.get("legalContactFirstName"),
            "legalContactLastName": obj.get("legalContactLastName"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "registrationNumber": obj.get("registrationNumber"),
            "sellerProvidedLegalAddress": LegalAddress.from_dict(obj["sellerProvidedLegalAddress"]) if obj.get("sellerProvidedLegalAddress") is not None else None,
            "termsOfService": obj.get("termsOfService"),
            "vatDetails": [VatDetail.from_dict(_item) for _item in obj["vatDetails"]] if obj.get("vatDetails") is not None else None
        })
        return _obj



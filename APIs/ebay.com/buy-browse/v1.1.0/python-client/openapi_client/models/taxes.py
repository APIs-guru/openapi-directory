# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tax_jurisdiction import TaxJurisdiction
from typing import Optional, Set
from typing_extensions import Self

class Taxes(BaseModel):
    """
    The type that defines the tax fields.
    """ # noqa: E501
    ebay_collect_and_remit_tax: Optional[StrictBool] = Field(default=None, description="This field is only returned if true, and indicates that eBay will collect tax (sales tax, Goods and Services tax, or VAT) for at least one line item in the order, and remit the tax to the taxing authority of the buyer's residence.", alias="ebayCollectAndRemitTax")
    included_in_price: Optional[StrictBool] = Field(default=None, description="This indicates if tax was applied for the cost of the item.", alias="includedInPrice")
    shipping_and_handling_taxed: Optional[StrictBool] = Field(default=None, description="This indicates if tax is applied for the shipping cost.", alias="shippingAndHandlingTaxed")
    tax_jurisdiction: Optional[TaxJurisdiction] = Field(default=None, alias="taxJurisdiction")
    tax_percentage: Optional[StrictStr] = Field(default=None, description="The percentage of tax.", alias="taxPercentage")
    tax_type: Optional[StrictStr] = Field(default=None, description="This field indicates the type of tax that may be collected for the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:TaxType'>eBay API documentation</a>", alias="taxType")
    __properties: ClassVar[List[str]] = ["ebayCollectAndRemitTax", "includedInPrice", "shippingAndHandlingTaxed", "taxJurisdiction", "taxPercentage", "taxType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Taxes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tax_jurisdiction
        if self.tax_jurisdiction:
            _dict['taxJurisdiction'] = self.tax_jurisdiction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Taxes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ebayCollectAndRemitTax": obj.get("ebayCollectAndRemitTax"),
            "includedInPrice": obj.get("includedInPrice"),
            "shippingAndHandlingTaxed": obj.get("shippingAndHandlingTaxed"),
            "taxJurisdiction": TaxJurisdiction.from_dict(obj["taxJurisdiction"]) if obj.get("taxJurisdiction") is not None else None,
            "taxPercentage": obj.get("taxPercentage"),
            "taxType": obj.get("taxType")
        })
        return _obj



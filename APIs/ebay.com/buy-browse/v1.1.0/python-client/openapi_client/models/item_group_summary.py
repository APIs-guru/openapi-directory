# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image import Image
from typing import Optional, Set
from typing_extensions import Self

class ItemGroupSummary(BaseModel):
    """
    The type that defines the fields for the details of each item in an item group. An item group is  an item that has various aspect differences, such as color, size, storage capacity, etc. When an item group is created, one of the item variations, such as the red shirt size L, is chosen as the \"parent\". All the other items in the group are the children, such as the blue shirt size L, red shirt size M, etc. <br /><br /><span class=\"tablenote\"><b> Note: </b> This container is returned only if the <b> item_id</b> in the request is an item group (parent ID of an item with variations).</span>
    """ # noqa: E501
    item_group_additional_images: Optional[List[Image]] = Field(default=None, description="An array of containers with the URLs for images that are in addition to the primary image of the item group. The primary image is returned in the itemGroupImage field.", alias="itemGroupAdditionalImages")
    item_group_href: Optional[StrictStr] = Field(default=None, description="The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.", alias="itemGroupHref")
    item_group_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.", alias="itemGroupId")
    item_group_image: Optional[Image] = Field(default=None, alias="itemGroupImage")
    item_group_title: Optional[StrictStr] = Field(default=None, description="The title of the item that appears on the item group page. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.", alias="itemGroupTitle")
    item_group_type: Optional[StrictStr] = Field(default=None, description="An enumeration value that indicates the type of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ItemGroupTypeEnum'>eBay API documentation</a>", alias="itemGroupType")
    __properties: ClassVar[List[str]] = ["itemGroupAdditionalImages", "itemGroupHref", "itemGroupId", "itemGroupImage", "itemGroupTitle", "itemGroupType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemGroupSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in item_group_additional_images (list)
        _items = []
        if self.item_group_additional_images:
            for _item_item_group_additional_images in self.item_group_additional_images:
                if _item_item_group_additional_images:
                    _items.append(_item_item_group_additional_images.to_dict())
            _dict['itemGroupAdditionalImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of item_group_image
        if self.item_group_image:
            _dict['itemGroupImage'] = self.item_group_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemGroupSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itemGroupAdditionalImages": [Image.from_dict(_item) for _item in obj["itemGroupAdditionalImages"]] if obj.get("itemGroupAdditionalImages") is not None else None,
            "itemGroupHref": obj.get("itemGroupHref"),
            "itemGroupId": obj.get("itemGroupId"),
            "itemGroupImage": Image.from_dict(obj["itemGroupImage"]) if obj.get("itemGroupImage") is not None else None,
            "itemGroupTitle": obj.get("itemGroupTitle"),
            "itemGroupType": obj.get("itemGroupType")
        })
        return _obj



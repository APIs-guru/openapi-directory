# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.item_group import ItemGroup

class TestItemGroup(unittest.TestCase):
    """ItemGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ItemGroup:
        """Test ItemGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ItemGroup`
        """
        model = ItemGroup()
        if include_optional:
            return ItemGroup(
                common_descriptions = [
                    openapi_client.models.common_descriptions.CommonDescriptions(
                        description = '', 
                        item_ids = [
                            ''
                            ], )
                    ],
                items = [
                    openapi_client.models.item.Item(
                        additional_images = [
                            openapi_client.models.image.Image(
                                height = 56, 
                                image_url = '', 
                                width = 56, )
                            ], 
                        adult_only = True, 
                        age_group = '', 
                        available_coupons = [
                            openapi_client.models.available_coupon.AvailableCoupon(
                                constraint = '', 
                                discount_amount = openapi_client.models.amount.Amount(
                                    currency = '', 
                                    value = '', ), 
                                discount_type = '', 
                                message = '', 
                                redemption_code = '', 
                                terms_web_url = '', )
                            ], 
                        bid_count = 56, 
                        brand = '', 
                        buying_options = [
                            ''
                            ], 
                        category_id = '', 
                        category_path = '', 
                        color = '', 
                        condition = '', 
                        condition_description = '', 
                        condition_id = '', 
                        current_bid_price = openapi_client.models.converted_amount.ConvertedAmount(
                            converted_from_currency = '', 
                            converted_from_value = '', 
                            currency = '', 
                            value = '', ), 
                        description = '', 
                        eligible_for_inline_checkout = True, 
                        enabled_for_guest_checkout = True, 
                        energy_efficiency_class = '', 
                        epid = '', 
                        estimated_availabilities = [
                            openapi_client.models.estimated_availability.EstimatedAvailability(
                                availability_threshold = 56, 
                                availability_threshold_type = '', 
                                delivery_options = [
                                    ''
                                    ], 
                                estimated_availability_status = '', 
                                estimated_available_quantity = 56, 
                                estimated_sold_quantity = 56, )
                            ], 
                        gender = '', 
                        gtin = '', 
                        image = openapi_client.models.image.Image(
                            height = 56, 
                            image_url = '', 
                            width = 56, ), 
                        inferred_epid = '', 
                        item_affiliate_web_url = '', 
                        item_end_date = '', 
                        item_id = '', 
                        item_location = openapi_client.models.address.Address(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country = '', 
                            county = '', 
                            postal_code = '', 
                            state_or_province = '', ), 
                        item_web_url = '', 
                        legacy_item_id = '', 
                        localized_aspects = [
                            openapi_client.models.typed_name_value.TypedNameValue(
                                name = '', 
                                type = '', 
                                value = '', )
                            ], 
                        lot_size = 56, 
                        marketing_price = openapi_client.models.marketing_price.MarketingPrice(
                            discount_percentage = '', 
                            original_price = openapi_client.models.converted_amount.ConvertedAmount(
                                converted_from_currency = '', 
                                converted_from_value = '', 
                                currency = '', 
                                value = '', ), 
                            price_treatment = '', ), 
                        material = '', 
                        minimum_price_to_bid = , 
                        mpn = '', 
                        pattern = '', 
                        payment_methods = [
                            openapi_client.models.payment_method.PaymentMethod(
                                payment_instructions = [
                                    ''
                                    ], 
                                payment_method_brands = [
                                    openapi_client.models.payment_method_brand.PaymentMethodBrand(
                                        logo_image = , 
                                        payment_method_brand_type = '', )
                                    ], 
                                payment_method_type = '', 
                                seller_instructions = [
                                    ''
                                    ], )
                            ], 
                        price = , 
                        price_display_condition = '', 
                        primary_item_group = openapi_client.models.item_group_summary.ItemGroupSummary(
                            item_group_additional_images = [
                                
                                ], 
                            item_group_href = '', 
                            item_group_id = '', 
                            item_group_image = , 
                            item_group_title = '', 
                            item_group_type = '', ), 
                        primary_product_review_rating = openapi_client.models.review_rating.ReviewRating(
                            average_rating = '', 
                            rating_histograms = [
                                openapi_client.models.rating_histogram.RatingHistogram(
                                    count = 56, 
                                    rating = '', )
                                ], 
                            review_count = 56, ), 
                        product = openapi_client.models.product.Product(
                            additional_product_identities = [
                                openapi_client.models.additional_product_identity.AdditionalProductIdentity(
                                    product_identity = [
                                        openapi_client.models.product_identity.ProductIdentity(
                                            identifier_type = '', 
                                            identifier_value = '', )
                                        ], )
                                ], 
                            aspect_groups = [
                                openapi_client.models.aspect_group.AspectGroup(
                                    aspects = [
                                        openapi_client.models.aspect.Aspect(
                                            localized_name = '', 
                                            localized_values = [
                                                ''
                                                ], )
                                        ], 
                                    localized_group_name = '', )
                                ], 
                            brand = '', 
                            description = '', 
                            gtins = [
                                ''
                                ], 
                            mpns = [
                                ''
                                ], 
                            title = '', ), 
                        product_fiche_web_url = '', 
                        qualified_programs = [
                            ''
                            ], 
                        quantity_limit_per_buyer = 56, 
                        reserve_price_met = True, 
                        return_terms = openapi_client.models.item_return_terms.ItemReturnTerms(
                            extended_holiday_returns_offered = True, 
                            refund_method = '', 
                            restocking_fee_percentage = '', 
                            return_instructions = '', 
                            return_method = '', 
                            return_period = openapi_client.models.time_duration.TimeDuration(
                                unit = '', 
                                value = 56, ), 
                            return_shipping_cost_payer = '', 
                            returns_accepted = True, ), 
                        seller = openapi_client.models.seller_detail.SellerDetail(
                            feedback_percentage = '', 
                            feedback_score = 56, 
                            seller_account_type = '', 
                            seller_legal_info = openapi_client.models.seller_legal_info.SellerLegalInfo(
                                email = '', 
                                fax = '', 
                                imprint = '', 
                                legal_contact_first_name = '', 
                                legal_contact_last_name = '', 
                                name = '', 
                                phone = '', 
                                registration_number = '', 
                                seller_provided_legal_address = openapi_client.models.legal_address.LegalAddress(
                                    address_line1 = '', 
                                    address_line2 = '', 
                                    city = '', 
                                    country = '', 
                                    country_name = '', 
                                    county = '', 
                                    postal_code = '', 
                                    state_or_province = '', ), 
                                terms_of_service = '', 
                                vat_details = [
                                    openapi_client.models.vat_detail.VatDetail(
                                        issuing_country = '', 
                                        vat_id = '', )
                                    ], ), 
                            username = '', ), 
                        seller_item_revision = '', 
                        ship_to_locations = openapi_client.models.ship_to_locations.ShipToLocations(
                            region_excluded = [
                                openapi_client.models.ship_to_region.ShipToRegion(
                                    region_id = '', 
                                    region_name = '', 
                                    region_type = '', )
                                ], 
                            region_included = [
                                openapi_client.models.ship_to_region.ShipToRegion(
                                    region_id = '', 
                                    region_name = '', 
                                    region_type = '', )
                                ], ), 
                        shipping_options = [
                            openapi_client.models.shipping_option.ShippingOption(
                                additional_shipping_cost_per_unit = , 
                                cut_off_date_used_for_estimate = '', 
                                fulfilled_through = '', 
                                guaranteed_delivery = True, 
                                import_charges = , 
                                max_estimated_delivery_date = '', 
                                min_estimated_delivery_date = '', 
                                quantity_used_for_estimate = 56, 
                                ship_to_location_used_for_estimate = openapi_client.models.ship_to_location.ShipToLocation(
                                    country = '', 
                                    postal_code = '', ), 
                                shipping_carrier_code = '', 
                                shipping_cost = , 
                                shipping_cost_type = '', 
                                shipping_service_code = '', 
                                trademark_symbol = '', 
                                type = '', )
                            ], 
                        short_description = '', 
                        size = '', 
                        size_system = '', 
                        size_type = '', 
                        subtitle = '', 
                        taxes = [
                            openapi_client.models.taxes.Taxes(
                                ebay_collect_and_remit_tax = True, 
                                included_in_price = True, 
                                shipping_and_handling_taxed = True, 
                                tax_jurisdiction = openapi_client.models.tax_jurisdiction.TaxJurisdiction(
                                    region = openapi_client.models.region.Region(
                                        region_name = '', 
                                        region_type = '', ), 
                                    tax_jurisdiction_id = '', ), 
                                tax_percentage = '', 
                                tax_type = '', )
                            ], 
                        title = '', 
                        top_rated_buying_experience = True, 
                        unique_bidder_count = 56, 
                        unit_price = , 
                        unit_pricing_measure = '', 
                        warnings = [
                            openapi_client.models.error.Error(
                                category = '', 
                                domain = '', 
                                error_id = 56, 
                                input_ref_ids = [
                                    ''
                                    ], 
                                long_message = '', 
                                message = '', 
                                output_ref_ids = [
                                    ''
                                    ], 
                                parameters = [
                                    openapi_client.models.error_parameter.ErrorParameter(
                                        name = '', 
                                        value = '', )
                                    ], 
                                subdomain = '', )
                            ], )
                    ],
                warnings = [
                    openapi_client.models.error.Error(
                        category = '', 
                        domain = '', 
                        error_id = 56, 
                        input_ref_ids = [
                            ''
                            ], 
                        long_message = '', 
                        message = '', 
                        output_ref_ids = [
                            ''
                            ], 
                        parameters = [
                            openapi_client.models.error_parameter.ErrorParameter(
                                name = '', 
                                value = '', )
                            ], 
                        subdomain = '', )
                    ]
            )
        else:
            return ItemGroup(
        )
        """

    def testItemGroup(self):
        """Test ItemGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.shipping_option import ShippingOption

class TestShippingOption(unittest.TestCase):
    """ShippingOption unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ShippingOption:
        """Test ShippingOption
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ShippingOption`
        """
        model = ShippingOption()
        if include_optional:
            return ShippingOption(
                additional_shipping_cost_per_unit = openapi_client.models.converted_amount.ConvertedAmount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                cut_off_date_used_for_estimate = '',
                fulfilled_through = '',
                guaranteed_delivery = True,
                import_charges = openapi_client.models.converted_amount.ConvertedAmount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                max_estimated_delivery_date = '',
                min_estimated_delivery_date = '',
                quantity_used_for_estimate = 56,
                ship_to_location_used_for_estimate = openapi_client.models.ship_to_location.ShipToLocation(
                    country = '', 
                    postal_code = '', ),
                shipping_carrier_code = '',
                shipping_cost = openapi_client.models.converted_amount.ConvertedAmount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                shipping_cost_type = '',
                shipping_service_code = '',
                trademark_symbol = '',
                type = ''
            )
        else:
            return ShippingOption(
        )
        """

    def testShippingOption(self):
        """Test ShippingOption"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

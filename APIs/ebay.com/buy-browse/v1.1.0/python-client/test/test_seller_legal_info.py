# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.seller_legal_info import SellerLegalInfo

class TestSellerLegalInfo(unittest.TestCase):
    """SellerLegalInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SellerLegalInfo:
        """Test SellerLegalInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SellerLegalInfo`
        """
        model = SellerLegalInfo()
        if include_optional:
            return SellerLegalInfo(
                email = '',
                fax = '',
                imprint = '',
                legal_contact_first_name = '',
                legal_contact_last_name = '',
                name = '',
                phone = '',
                registration_number = '',
                seller_provided_legal_address = openapi_client.models.legal_address.LegalAddress(
                    address_line1 = '', 
                    address_line2 = '', 
                    city = '', 
                    country = '', 
                    country_name = '', 
                    county = '', 
                    postal_code = '', 
                    state_or_province = '', ),
                terms_of_service = '',
                vat_details = [
                    openapi_client.models.vat_detail.VatDetail(
                        issuing_country = '', 
                        vat_id = '', )
                    ]
            )
        else:
            return SellerLegalInfo(
        )
        """

    def testSellerLegalInfo(self):
        """Test SellerLegalInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

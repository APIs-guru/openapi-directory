# coding: utf-8

"""
    Browse API

    The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.item_summary import ItemSummary

class TestItemSummary(unittest.TestCase):
    """ItemSummary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ItemSummary:
        """Test ItemSummary
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ItemSummary`
        """
        model = ItemSummary()
        if include_optional:
            return ItemSummary(
                additional_images = [
                    openapi_client.models.image.Image(
                        height = 56, 
                        image_url = '', 
                        width = 56, )
                    ],
                adult_only = True,
                available_coupons = True,
                bid_count = 56,
                buying_options = [
                    ''
                    ],
                categories = [
                    openapi_client.models.category.Category(
                        category_id = '', )
                    ],
                compatibility_match = '',
                compatibility_properties = [
                    openapi_client.models.compatibility_property.CompatibilityProperty(
                        localized_name = '', 
                        name = '', 
                        value = '', )
                    ],
                condition = '',
                condition_id = '',
                current_bid_price = openapi_client.models.converted_amount.ConvertedAmount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                distance_from_pickup_location = openapi_client.models.target_location.TargetLocation(
                    unit_of_measure = '', 
                    value = '', ),
                energy_efficiency_class = '',
                epid = '',
                image = openapi_client.models.image.Image(
                    height = 56, 
                    image_url = '', 
                    width = 56, ),
                item_affiliate_web_url = '',
                item_group_href = '',
                item_group_type = '',
                item_href = '',
                item_id = '',
                item_location = openapi_client.models.item_location_impl.ItemLocationImpl(
                    address_line1 = '', 
                    address_line2 = '', 
                    city = '', 
                    country = '', 
                    county = '', 
                    postal_code = '', 
                    state_or_province = '', ),
                item_web_url = '',
                legacy_item_id = '',
                marketing_price = openapi_client.models.marketing_price.MarketingPrice(
                    discount_amount = openapi_client.models.converted_amount.ConvertedAmount(
                        converted_from_currency = '', 
                        converted_from_value = '', 
                        currency = '', 
                        value = '', ), 
                    discount_percentage = '', 
                    original_price = openapi_client.models.converted_amount.ConvertedAmount(
                        converted_from_currency = '', 
                        converted_from_value = '', 
                        currency = '', 
                        value = '', ), 
                    price_treatment = '', ),
                pickup_options = [
                    openapi_client.models.pickup_option_summary.PickupOptionSummary(
                        pickup_location_type = '', )
                    ],
                price = openapi_client.models.converted_amount.ConvertedAmount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                price_display_condition = '',
                qualified_programs = [
                    ''
                    ],
                seller = openapi_client.models.seller.Seller(
                    feedback_percentage = '', 
                    feedback_score = 56, 
                    seller_account_type = '', 
                    username = '', ),
                shipping_options = [
                    openapi_client.models.shipping_option_summary.ShippingOptionSummary(
                        guaranteed_delivery = True, 
                        max_estimated_delivery_date = '', 
                        min_estimated_delivery_date = '', 
                        shipping_cost = openapi_client.models.converted_amount.ConvertedAmount(
                            converted_from_currency = '', 
                            converted_from_value = '', 
                            currency = '', 
                            value = '', ), 
                        shipping_cost_type = '', )
                    ],
                short_description = '',
                thumbnail_images = [
                    openapi_client.models.image.Image(
                        height = 56, 
                        image_url = '', 
                        width = 56, )
                    ],
                title = '',
                unit_price = openapi_client.models.converted_amount.ConvertedAmount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                unit_pricing_measure = ''
            )
        else:
            return ItemSummary(
        )
        """

    def testItemSummary(self):
        """Test ItemSummary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

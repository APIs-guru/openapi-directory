# coding: utf-8

"""
    Negotiation API

    The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.

    The version of the OpenAPI document: v1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.eligible_item import EligibleItem
from typing import Optional, Set
from typing_extensions import Self

class PagedEligibleItemCollection(BaseModel):
    """
    This complex type defines a collection of listings that are eligible for an offer to a buyer.
    """ # noqa: E501
    eligible_items: Optional[List[EligibleItem]] = Field(default=None, description="A list of items that are eligible for a seller-initiated offer to a buyer. Each element in the list contains the listing ID of a listed item. These IDs represent the listings for which buyers have shown an interest.", alias="eligibleItems")
    href: Optional[StrictStr] = Field(default=None, description="The URI of the current page of results from the result set.")
    limit: Optional[StrictInt] = Field(default=None, description="The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.")
    next: Optional[StrictStr] = Field(default=None, description="The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048")
    offset: Optional[StrictInt] = Field(default=None, description="The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.")
    prev: Optional[StrictStr] = Field(default=None, description="The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048")
    total: Optional[StrictInt] = Field(default=None, description="The total number of items retrieved in the result set. If no items match the search criteria, the server returns the HTTP status code 204 No Content.")
    __properties: ClassVar[List[str]] = ["eligibleItems", "href", "limit", "next", "offset", "prev", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagedEligibleItemCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in eligible_items (list)
        _items = []
        if self.eligible_items:
            for _item_eligible_items in self.eligible_items:
                if _item_eligible_items:
                    _items.append(_item_eligible_items.to_dict())
            _dict['eligibleItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagedEligibleItemCollection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eligibleItems": [EligibleItem.from_dict(_item) for _item in obj["eligibleItems"]] if obj.get("eligibleItems") is not None else None,
            "href": obj.get("href"),
            "limit": obj.get("limit"),
            "next": obj.get("next"),
            "offset": obj.get("offset"),
            "prev": obj.get("prev"),
            "total": obj.get("total")
        })
        return _obj



# coding: utf-8

"""
    Buy Marketing API

    The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.

    The version of the OpenAPI document: v1_beta.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class MarketPriceDetail(BaseModel):
    """
    The type that defines the fields for details about the product, such as condition and estimated start price.
    """ # noqa: E501
    condition_group: Optional[StrictStr] = Field(default=None, description="The name for the condition of the product. For example: NEW", alias="conditionGroup")
    condition_ids: Optional[List[StrictStr]] = Field(default=None, description="An array of condition identifiers for the product.", alias="conditionIds")
    estimated_start_price: Optional[Amount] = Field(default=None, alias="estimatedStartPrice")
    __properties: ClassVar[List[str]] = ["conditionGroup", "conditionIds", "estimatedStartPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketPriceDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of estimated_start_price
        if self.estimated_start_price:
            _dict['estimatedStartPrice'] = self.estimated_start_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketPriceDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditionGroup": obj.get("conditionGroup"),
            "conditionIds": obj.get("conditionIds"),
            "estimatedStartPrice": Amount.from_dict(obj["estimatedStartPrice"]) if obj.get("estimatedStartPrice") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Buy Marketing API

    The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.

    The version of the OpenAPI document: v1_beta.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image import Image
from openapi_client.models.market_price_detail import MarketPriceDetail
from openapi_client.models.rating_aspect import RatingAspect
from typing import Optional, Set
from typing_extensions import Self

class MerchandisedProduct(BaseModel):
    """
    The type that defines the fields for product information, including price, condition, ratings, etc.
    """ # noqa: E501
    average_rating: Optional[StrictStr] = Field(default=None, description="The average rating for the product based on eBay user ratings.", alias="averageRating")
    epid: Optional[StrictStr] = Field(default=None, description="The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API <b>search</b> method to retrieve items for this product.")
    image: Optional[Image] = None
    market_price_details: Optional[List[MarketPriceDetail]] = Field(default=None, description="An array of containers for the product market price details, such as condition and market price.", alias="marketPriceDetails")
    rating_aspects: Optional[List[RatingAspect]] = Field(default=None, description="An array of containers for ratings of the product aspects, such as \"Is it a good value\".", alias="ratingAspects")
    rating_count: Optional[StrictInt] = Field(default=None, description="The total number of eBay users that rated the product.", alias="ratingCount")
    review_count: Optional[StrictInt] = Field(default=None, description="The total number of eBay users that wrote a review for the product. ", alias="reviewCount")
    title: Optional[StrictStr] = Field(default=None, description="The title of the product.")
    __properties: ClassVar[List[str]] = ["averageRating", "epid", "image", "marketPriceDetails", "ratingAspects", "ratingCount", "reviewCount", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchandisedProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in market_price_details (list)
        _items = []
        if self.market_price_details:
            for _item_market_price_details in self.market_price_details:
                if _item_market_price_details:
                    _items.append(_item_market_price_details.to_dict())
            _dict['marketPriceDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rating_aspects (list)
        _items = []
        if self.rating_aspects:
            for _item_rating_aspects in self.rating_aspects:
                if _item_rating_aspects:
                    _items.append(_item_rating_aspects.to_dict())
            _dict['ratingAspects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchandisedProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averageRating": obj.get("averageRating"),
            "epid": obj.get("epid"),
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "marketPriceDetails": [MarketPriceDetail.from_dict(_item) for _item in obj["marketPriceDetails"]] if obj.get("marketPriceDetails") is not None else None,
            "ratingAspects": [RatingAspect.from_dict(_item) for _item in obj["ratingAspects"]] if obj.get("ratingAspects") is not None else None,
            "ratingCount": obj.get("ratingCount"),
            "reviewCount": obj.get("reviewCount"),
            "title": obj.get("title")
        })
        return _obj



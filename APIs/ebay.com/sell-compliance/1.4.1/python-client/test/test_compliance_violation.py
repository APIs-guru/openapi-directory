# coding: utf-8

"""
    Compliance API

    Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.compliance_violation import ComplianceViolation

class TestComplianceViolation(unittest.TestCase):
    """ComplianceViolation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ComplianceViolation:
        """Test ComplianceViolation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ComplianceViolation`
        """
        model = ComplianceViolation()
        if include_optional:
            return ComplianceViolation(
                compliance_type = '',
                listing_id = '',
                offer_id = '',
                sku = '',
                violations = [
                    openapi_client.models.compliance_detail.ComplianceDetail(
                        compliance_state = '', 
                        corrective_recommendations = openapi_client.models.corrective_recommendations.CorrectiveRecommendations(
                            aspect_recommendations = [
                                openapi_client.models.aspect_recommendations.AspectRecommendations(
                                    localized_aspect_name = '', 
                                    suggested_values = [
                                        ''
                                        ], )
                                ], 
                            product_recommendation = openapi_client.models.product_recommendation.ProductRecommendation(
                                epid = '', ), ), 
                        message = '', 
                        reason_code = '', 
                        variation = openapi_client.models.variation_details.VariationDetails(
                            sku = '', 
                            variation_aspects = [
                                openapi_client.models.name_value_list.NameValueList(
                                    name = '', 
                                    value = '', )
                                ], ), 
                        violation_data = [
                            openapi_client.models.name_value_list.NameValueList(
                                name = '', 
                                value = '', )
                            ], )
                    ]
            )
        else:
            return ComplianceViolation(
        )
        """

    def testComplianceViolation(self):
        """Test ComplianceViolation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

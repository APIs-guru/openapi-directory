# coding: utf-8

"""
    Compliance API

    Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aspect_recommendations import AspectRecommendations
from openapi_client.models.product_recommendation import ProductRecommendation
from typing import Optional, Set
from typing_extensions import Self

class CorrectiveRecommendations(BaseModel):
    """
    This type is used by the correctiveRecommendations container, which is returned if eBay has suggestions for how to correct the given violation.
    """ # noqa: E501
    aspect_recommendations: Optional[List[AspectRecommendations]] = Field(default=None, description="This container is returned for ASPECTS_ADOPTION violations if eBay has found one or more item aspect name-value pairs that may be appropriate for the seller's product. In many cases, the missing or invalid item aspect(s) shown under the corresponding violationData array, will also show up under this array with suggested value(s).", alias="aspectRecommendations")
    product_recommendation: Optional[ProductRecommendation] = Field(default=None, alias="productRecommendation")
    __properties: ClassVar[List[str]] = ["aspectRecommendations", "productRecommendation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CorrectiveRecommendations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aspect_recommendations (list)
        _items = []
        if self.aspect_recommendations:
            for _item_aspect_recommendations in self.aspect_recommendations:
                if _item_aspect_recommendations:
                    _items.append(_item_aspect_recommendations.to_dict())
            _dict['aspectRecommendations'] = _items
        # override the default output from pydantic by calling `to_dict()` of product_recommendation
        if self.product_recommendation:
            _dict['productRecommendation'] = self.product_recommendation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CorrectiveRecommendations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aspectRecommendations": [AspectRecommendations.from_dict(_item) for _item in obj["aspectRecommendations"]] if obj.get("aspectRecommendations") is not None else None,
            "productRecommendation": ProductRecommendation.from_dict(obj["productRecommendation"]) if obj.get("productRecommendation") is not None else None
        })
        return _obj



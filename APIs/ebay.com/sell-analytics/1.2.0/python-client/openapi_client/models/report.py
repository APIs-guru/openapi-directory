# coding: utf-8

"""
     Seller Service Metrics API 

    The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.

    The version of the OpenAPI document: 1.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error import Error
from openapi_client.models.header import Header
from openapi_client.models.metadata import Metadata
from openapi_client.models.record import Record
from typing import Optional, Set
from typing_extensions import Self

class Report(BaseModel):
    """
    The complex type that defines that defines the report.
    """ # noqa: E501
    dimension_metadata: Optional[List[Metadata]] = Field(default=None, description="A complex type containing the header of the report and the type of data containted in the rows of the report.", alias="dimensionMetadata")
    end_date: Optional[StrictStr] = Field(default=None, description="The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. If you specify an end date that is beyond the lastUpdatedDate value, eBay returns a report that contains data only up to the lastUpdateDate date. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z", alias="endDate")
    header: Optional[Header] = None
    last_updated_date: Optional[StrictStr] = Field(default=None, description="The date and time, in ISO 8601 format, that indicates the last time the data returned in the report was updated.", alias="lastUpdatedDate")
    records: Optional[List[Record]] = Field(default=None, description="A complex type containing the individual data records for the traffic report.")
    start_date: Optional[StrictStr] = Field(default=None, description="The start date of the date range used to calculate the report, in ISO 8601 format.", alias="startDate")
    warnings: Optional[List[Error]] = Field(default=None, description="An array of any process errors or warnings that were generated during the processing of the call processing.")
    __properties: ClassVar[List[str]] = ["dimensionMetadata", "endDate", "header", "lastUpdatedDate", "records", "startDate", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Report from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_metadata (list)
        _items = []
        if self.dimension_metadata:
            for _item_dimension_metadata in self.dimension_metadata:
                if _item_dimension_metadata:
                    _items.append(_item_dimension_metadata.to_dict())
            _dict['dimensionMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of header
        if self.header:
            _dict['header'] = self.header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in records (list)
        _items = []
        if self.records:
            for _item_records in self.records:
                if _item_records:
                    _items.append(_item_records.to_dict())
            _dict['records'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Report from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensionMetadata": [Metadata.from_dict(_item) for _item in obj["dimensionMetadata"]] if obj.get("dimensionMetadata") is not None else None,
            "endDate": obj.get("endDate"),
            "header": Header.from_dict(obj["header"]) if obj.get("header") is not None else None,
            "lastUpdatedDate": obj.get("lastUpdatedDate"),
            "records": [Record.from_dict(_item) for _item in obj["records"]] if obj.get("records") is not None else None,
            "startDate": obj.get("startDate"),
            "warnings": [Error.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.line_item import LineItem

class TestLineItem(unittest.TestCase):
    """LineItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LineItem:
        """Test LineItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LineItem`
        """
        model = LineItem()
        if include_optional:
            return LineItem(
                applied_promotions = [
                    openapi_client.models.applied_promotion.AppliedPromotion(
                        description = '', 
                        discount_amount = openapi_client.models.amount.Amount(
                            converted_from_currency = '', 
                            converted_from_value = '', 
                            currency = '', 
                            value = '', ), 
                        promotion_id = '', )
                    ],
                delivery_cost = openapi_client.models.delivery_cost.DeliveryCost(
                    discount_amount = openapi_client.models.amount.Amount(
                        converted_from_currency = '', 
                        converted_from_value = '', 
                        currency = '', 
                        value = '', ), 
                    handling_cost = openapi_client.models.amount.Amount(
                        converted_from_currency = '', 
                        converted_from_value = '', 
                        currency = '', 
                        value = '', ), 
                    import_charges = , 
                    shipping_cost = , 
                    shipping_intermediation_fee = , ),
                discounted_line_item_cost = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                ebay_collect_and_remit_taxes = [
                    openapi_client.models.ebay_collect_and_remit_tax.EbayCollectAndRemitTax(
                        amount = openapi_client.models.amount.Amount(
                            converted_from_currency = '', 
                            converted_from_value = '', 
                            currency = '', 
                            value = '', ), 
                        collection_method = '', 
                        ebay_reference = openapi_client.models.ebay_tax_reference.EbayTaxReference(
                            name = '', 
                            value = '', ), 
                        tax_type = '', )
                    ],
                ebay_collected_charges = openapi_client.models.ebay_collected_charges.EbayCollectedCharges(
                    ebay_shipping = openapi_client.models.amount.Amount(
                        converted_from_currency = '', 
                        converted_from_value = '', 
                        currency = '', 
                        value = '', ), ),
                gift_details = openapi_client.models.gift_details.GiftDetails(
                    message = '', 
                    recipient_email = '', 
                    sender_name = '', ),
                item_location = openapi_client.models.item_location.ItemLocation(
                    country_code = '', 
                    location = '', 
                    postal_code = '', ),
                legacy_item_id = '',
                legacy_variation_id = '',
                line_item_cost = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                line_item_fulfillment_instructions = openapi_client.models.line_item_fulfillment_instructions.LineItemFulfillmentInstructions(
                    guaranteed_delivery = True, 
                    max_estimated_delivery_date = '', 
                    min_estimated_delivery_date = '', 
                    ship_by_date = '', ),
                line_item_fulfillment_status = '',
                line_item_id = '',
                linked_order_line_items = [
                    openapi_client.models.linked_order_line_item.LinkedOrderLineItem(
                        line_item_aspects = [
                            openapi_client.models.name_value_pair.NameValuePair(
                                name = '', 
                                value = '', )
                            ], 
                        line_item_id = '', 
                        max_estimated_delivery_date = '', 
                        min_estimated_delivery_date = '', 
                        order_id = '', 
                        seller_id = '', 
                        shipments = [
                            openapi_client.models.tracking_info.TrackingInfo(
                                shipment_tracking_number = '', 
                                shipping_carrier_code = '', )
                            ], 
                        title = '', )
                    ],
                listing_marketplace_id = '',
                properties = openapi_client.models.line_item_properties.LineItemProperties(
                    buyer_protection = True, 
                    from_best_offer = True, 
                    sold_via_ad_campaign = True, ),
                purchase_marketplace_id = '',
                quantity = 56,
                refunds = [
                    openapi_client.models.line_item_refund.LineItemRefund(
                        amount = openapi_client.models.amount.Amount(
                            converted_from_currency = '', 
                            converted_from_value = '', 
                            currency = '', 
                            value = '', ), 
                        refund_date = '', 
                        refund_id = '', 
                        refund_reference_id = '', )
                    ],
                sku = '',
                sold_format = '',
                taxes = [
                    openapi_client.models.tax.Tax(
                        amount = openapi_client.models.amount.Amount(
                            converted_from_currency = '', 
                            converted_from_value = '', 
                            currency = '', 
                            value = '', ), 
                        tax_type = '', )
                    ],
                title = '',
                total = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                variation_aspects = [
                    openapi_client.models.name_value_pair.NameValuePair(
                        name = '', 
                        value = '', )
                    ]
            )
        else:
            return LineItem(
        )
        """

    def testLineItem(self):
        """Test LineItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

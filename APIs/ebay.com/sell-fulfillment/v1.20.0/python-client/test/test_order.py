# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.order import Order

class TestOrder(unittest.TestCase):
    """Order unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Order:
        """Test Order
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Order`
        """
        model = Order()
        if include_optional:
            return Order(
                buyer = openapi_client.models.buyer.Buyer(
                    buyer_registration_address = openapi_client.models.extended_contact.ExtendedContact(
                        company_name = '', 
                        contact_address = openapi_client.models.address.Address(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country_code = '', 
                            county = '', 
                            postal_code = '', 
                            state_or_province = '', ), 
                        email = '', 
                        full_name = '', 
                        primary_phone = openapi_client.models.phone_number.PhoneNumber(
                            phone_number = '', ), ), 
                    tax_address = openapi_client.models.tax_address.TaxAddress(
                        city = '', 
                        country_code = '', 
                        postal_code = '', 
                        state_or_province = '', ), 
                    tax_identifier = openapi_client.models.tax_identifier.TaxIdentifier(
                        issuing_country = '', 
                        tax_identifier_type = '', 
                        taxpayer_id = '', ), 
                    username = '', ),
                buyer_checkout_notes = '',
                cancel_status = openapi_client.models.cancel_status.CancelStatus(
                    cancel_requests = [
                        openapi_client.models.cancel_request.CancelRequest(
                            cancel_completed_date = '', 
                            cancel_initiator = '', 
                            cancel_reason = '', 
                            cancel_request_id = '', 
                            cancel_request_state = '', 
                            cancel_requested_date = '', )
                        ], 
                    cancel_state = '', 
                    cancelled_date = '', ),
                creation_date = '',
                ebay_collect_and_remit_tax = True,
                fulfillment_hrefs = [
                    ''
                    ],
                fulfillment_start_instructions = [
                    openapi_client.models.fulfillment_start_instruction.FulfillmentStartInstruction(
                        ebay_supported_fulfillment = True, 
                        final_destination_address = openapi_client.models.address.Address(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country_code = '', 
                            county = '', 
                            postal_code = '', 
                            state_or_province = '', ), 
                        fulfillment_instructions_type = '', 
                        max_estimated_delivery_date = '', 
                        min_estimated_delivery_date = '', 
                        pickup_step = openapi_client.models.pickup_step.PickupStep(
                            merchant_location_key = '', ), 
                        shipping_step = openapi_client.models.shipping_step.ShippingStep(
                            ship_to = openapi_client.models.extended_contact.ExtendedContact(
                                company_name = '', 
                                contact_address = openapi_client.models.address.Address(
                                    address_line1 = '', 
                                    address_line2 = '', 
                                    city = '', 
                                    country_code = '', 
                                    county = '', 
                                    postal_code = '', 
                                    state_or_province = '', ), 
                                email = '', 
                                full_name = '', 
                                primary_phone = openapi_client.models.phone_number.PhoneNumber(
                                    phone_number = '', ), ), 
                            ship_to_reference_id = '', 
                            shipping_carrier_code = '', 
                            shipping_service_code = '', ), )
                    ],
                last_modified_date = '',
                legacy_order_id = '',
                line_items = [
                    openapi_client.models.line_item.LineItem(
                        applied_promotions = [
                            openapi_client.models.applied_promotion.AppliedPromotion(
                                description = '', 
                                discount_amount = openapi_client.models.amount.Amount(
                                    converted_from_currency = '', 
                                    converted_from_value = '', 
                                    currency = '', 
                                    value = '', ), 
                                promotion_id = '', )
                            ], 
                        delivery_cost = openapi_client.models.delivery_cost.DeliveryCost(
                            handling_cost = openapi_client.models.amount.Amount(
                                converted_from_currency = '', 
                                converted_from_value = '', 
                                currency = '', 
                                value = '', ), 
                            import_charges = , 
                            shipping_cost = , 
                            shipping_intermediation_fee = , ), 
                        discounted_line_item_cost = , 
                        ebay_collect_and_remit_taxes = [
                            openapi_client.models.ebay_collect_and_remit_tax.EbayCollectAndRemitTax(
                                amount = , 
                                collection_method = '', 
                                ebay_reference = openapi_client.models.ebay_tax_reference.EbayTaxReference(
                                    name = '', 
                                    value = '', ), 
                                tax_type = '', )
                            ], 
                        ebay_collected_charges = openapi_client.models.ebay_collected_charges.EbayCollectedCharges(
                            ebay_shipping = , ), 
                        gift_details = openapi_client.models.gift_details.GiftDetails(
                            message = '', 
                            recipient_email = '', 
                            sender_name = '', ), 
                        item_location = openapi_client.models.item_location.ItemLocation(
                            country_code = '', 
                            location = '', 
                            postal_code = '', ), 
                        legacy_item_id = '', 
                        legacy_variation_id = '', 
                        line_item_cost = , 
                        line_item_fulfillment_instructions = openapi_client.models.line_item_fulfillment_instructions.LineItemFulfillmentInstructions(
                            guaranteed_delivery = True, 
                            max_estimated_delivery_date = '', 
                            min_estimated_delivery_date = '', 
                            ship_by_date = '', ), 
                        line_item_fulfillment_status = '', 
                        line_item_id = '', 
                        linked_order_line_items = [
                            openapi_client.models.linked_order_line_item.LinkedOrderLineItem(
                                line_item_aspects = [
                                    openapi_client.models.name_value_pair.NameValuePair(
                                        name = '', 
                                        value = '', )
                                    ], 
                                line_item_id = '', 
                                max_estimated_delivery_date = '', 
                                min_estimated_delivery_date = '', 
                                order_id = '', 
                                seller_id = '', 
                                shipments = [
                                    openapi_client.models.tracking_info.TrackingInfo(
                                        shipment_tracking_number = '', 
                                        shipping_carrier_code = '', )
                                    ], 
                                title = '', )
                            ], 
                        listing_marketplace_id = '', 
                        properties = openapi_client.models.line_item_properties.LineItemProperties(
                            buyer_protection = True, 
                            from_best_offer = True, 
                            sold_via_ad_campaign = True, ), 
                        purchase_marketplace_id = '', 
                        quantity = 56, 
                        refunds = [
                            openapi_client.models.line_item_refund.LineItemRefund(
                                refund_date = '', 
                                refund_id = '', 
                                refund_reference_id = '', )
                            ], 
                        sku = '', 
                        sold_format = '', 
                        taxes = [
                            openapi_client.models.tax.Tax(
                                tax_type = '', )
                            ], 
                        title = '', 
                        total = , 
                        variation_aspects = [
                            openapi_client.models.name_value_pair.NameValuePair(
                                name = '', 
                                value = '', )
                            ], )
                    ],
                order_fulfillment_status = '',
                order_id = '',
                order_payment_status = '',
                payment_summary = openapi_client.models.payment_summary.PaymentSummary(
                    payments = [
                        openapi_client.models.payment.Payment(
                            amount = openapi_client.models.amount.Amount(
                                converted_from_currency = '', 
                                converted_from_value = '', 
                                currency = '', 
                                value = '', ), 
                            payment_date = '', 
                            payment_holds = [
                                openapi_client.models.payment_hold.PaymentHold(
                                    expected_release_date = '', 
                                    hold_amount = openapi_client.models.amount.Amount(
                                        converted_from_currency = '', 
                                        converted_from_value = '', 
                                        currency = '', 
                                        value = '', ), 
                                    hold_reason = '', 
                                    hold_state = '', 
                                    release_date = '', 
                                    seller_actions_to_release = [
                                        openapi_client.models.seller_actions_to_release.SellerActionsToRelease(
                                            seller_action_to_release = '', )
                                        ], )
                                ], 
                            payment_method = '', 
                            payment_reference_id = '', 
                            payment_status = '', )
                        ], 
                    refunds = [
                        openapi_client.models.order_refund.OrderRefund(
                            refund_date = '', 
                            refund_id = '', 
                            refund_reference_id = '', 
                            refund_status = '', )
                        ], 
                    total_due_seller = , ),
                pricing_summary = openapi_client.models.pricing_summary.PricingSummary(
                    adjustment = openapi_client.models.amount.Amount(
                        converted_from_currency = '', 
                        converted_from_value = '', 
                        currency = '', 
                        value = '', ), 
                    delivery_cost = openapi_client.models.amount.Amount(
                        converted_from_currency = '', 
                        converted_from_value = '', 
                        currency = '', 
                        value = '', ), 
                    delivery_discount = , 
                    fee = , 
                    price_discount = , 
                    price_subtotal = , 
                    tax = , 
                    total = , ),
                program = openapi_client.models.program.Program(
                    authenticity_verification = openapi_client.models.post_sale_authentication_program.PostSaleAuthenticationProgram(
                        outcome_reason = '', 
                        status = '', ), 
                    ebay_international_shipping = openapi_client.models.ebay_international_shipping.EbayInternationalShipping(
                        returns_managed_by = '', ), 
                    ebay_shipping = openapi_client.models.ebay_shipping.EbayShipping(
                        shipping_label_provided_by = '', ), 
                    ebay_vault = openapi_client.models.ebay_vault_program.EbayVaultProgram(
                        fulfillment_type = '', ), 
                    fulfillment_program = openapi_client.models.ebay_fulfillment_program.EbayFulfillmentProgram(
                        fulfilled_by = '', ), ),
                sales_record_reference = '',
                seller_id = '',
                total_fee_basis_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', ),
                total_marketplace_fee = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    value = '', )
            )
        else:
            return Order(
        )
        """

    def testOrder(self):
        """Test Order"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.pickup_step import PickupStep
from openapi_client.models.shipping_step import ShippingStep
from typing import Optional, Set
from typing_extensions import Self

class FulfillmentStartInstruction(BaseModel):
    """
    This type contains a set of specifications for processing a fulfillment of an order, including the type of fulfillment, shipping carrier and service, addressing details, and estimated delivery window. These instructions are derived from the buyer's and seller's eBay account preferences, the listing parameters, and the buyer's checkout selections. The seller can use them as a starting point for packaging, addressing, and shipping the order.
    """ # noqa: E501
    ebay_supported_fulfillment: Optional[StrictBool] = Field(default=None, description="This field is only returned if its value is <code>true</code> and indicates that the fulfillment will be shipped via eBay's Global Shipping Program, eBay International Shipping, or the Authenticity Guarantee service program. <br><br>For more information, see the <a href=\"https://www.ebay.com/help/selling/shipping-items/setting-shipping-options/global-shipping-program?id=4646 \" target=\"_blank\">Global Shipping Program</a> help topic.", alias="ebaySupportedFulfillment")
    final_destination_address: Optional[Address] = Field(default=None, alias="finalDestinationAddress")
    fulfillment_instructions_type: Optional[StrictStr] = Field(default=None, description="The enumeration value returned in this field indicates the method of fulfillment that will be used to deliver this set of line items (this package) to the buyer. This field will have a value of <code>SHIP_TO</code> if the <b>ebaySupportedFulfillment</b> field is returned with a value of <code>true</code>. See the <strong>FulfillmentInstructionsType</strong> definition for more information about different fulfillment types. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:FulfillmentInstructionsType'>eBay API documentation</a>", alias="fulfillmentInstructionsType")
    max_estimated_delivery_date: Optional[StrictStr] = Field(default=None, description="This is the estimated latest date that the fulfillment will be completed. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned ifthe value of the <b>fulfillmentInstructionsType</b> field is <code>DIGITAL</code> or <code>PREPARE_FOR_PICKUP</code>.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>", alias="maxEstimatedDeliveryDate")
    min_estimated_delivery_date: Optional[StrictStr] = Field(default=None, description="This is the estimated earliest date that the fulfillment will be completed. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned if  the value of the <b>fulfillmentInstructionsType</b> field is <code>DIGITAL</code> or <code>PREPARE_FOR_PICKUP</code>.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>", alias="minEstimatedDeliveryDate")
    pickup_step: Optional[PickupStep] = Field(default=None, alias="pickupStep")
    shipping_step: Optional[ShippingStep] = Field(default=None, alias="shippingStep")
    __properties: ClassVar[List[str]] = ["ebaySupportedFulfillment", "finalDestinationAddress", "fulfillmentInstructionsType", "maxEstimatedDeliveryDate", "minEstimatedDeliveryDate", "pickupStep", "shippingStep"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FulfillmentStartInstruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of final_destination_address
        if self.final_destination_address:
            _dict['finalDestinationAddress'] = self.final_destination_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pickup_step
        if self.pickup_step:
            _dict['pickupStep'] = self.pickup_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_step
        if self.shipping_step:
            _dict['shippingStep'] = self.shipping_step.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FulfillmentStartInstruction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ebaySupportedFulfillment": obj.get("ebaySupportedFulfillment"),
            "finalDestinationAddress": Address.from_dict(obj["finalDestinationAddress"]) if obj.get("finalDestinationAddress") is not None else None,
            "fulfillmentInstructionsType": obj.get("fulfillmentInstructionsType"),
            "maxEstimatedDeliveryDate": obj.get("maxEstimatedDeliveryDate"),
            "minEstimatedDeliveryDate": obj.get("minEstimatedDeliveryDate"),
            "pickupStep": PickupStep.from_dict(obj["pickupStep"]) if obj.get("pickupStep") is not None else None,
            "shippingStep": ShippingStep.from_dict(obj["shippingStep"]) if obj.get("shippingStep") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.payment_hold import PaymentHold
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    This type is used to provide details about the seller payments for an order.
    """ # noqa: E501
    amount: Optional[Amount] = None
    payment_date: Optional[StrictStr] = Field(default=None, description="The date and time that the payment was received by the seller. This field will not be returned if buyer has yet to pay for the order. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>", alias="paymentDate")
    payment_holds: Optional[List[PaymentHold]] = Field(default=None, description="This container is only returned if eBay is temporarily holding the seller's funds for the order. If a payment hold has been placed on the order, this container includes the reason for the payment hold, the expected release date of the funds into the seller's account, the current state of the hold, and as soon as the payment hold has been released, the actual release date.", alias="paymentHolds")
    payment_method: Optional[StrictStr] = Field(default=None, description="The payment method used to pay for the order. See the <strong>PaymentMethodTypeEnum</strong> type for more information on the payment methods. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:PaymentMethodTypeEnum'>eBay API documentation</a>", alias="paymentMethod")
    payment_reference_id: Optional[StrictStr] = Field(default=None, description="This field is only returned if payment has been made by the buyer, and the <strong>paymentMethod</strong> is <code>ESCROW</code>. This field contains a special ID for ESCROW.", alias="paymentReferenceId")
    payment_status: Optional[StrictStr] = Field(default=None, description="The enumeration value returned in this field indicates the status of the payment for the order. See the <strong>PaymentStatusEnum</strong> type definition for more information on the possible payment states. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:PaymentStatusEnum'>eBay API documentation</a>", alias="paymentStatus")
    __properties: ClassVar[List[str]] = ["amount", "paymentDate", "paymentHolds", "paymentMethod", "paymentReferenceId", "paymentStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_holds (list)
        _items = []
        if self.payment_holds:
            for _item_payment_holds in self.payment_holds:
                if _item_payment_holds:
                    _items.append(_item_payment_holds.to_dict())
            _dict['paymentHolds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": Amount.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "paymentDate": obj.get("paymentDate"),
            "paymentHolds": [PaymentHold.from_dict(_item) for _item in obj["paymentHolds"]] if obj.get("paymentHolds") is not None else None,
            "paymentMethod": obj.get("paymentMethod"),
            "paymentReferenceId": obj.get("paymentReferenceId"),
            "paymentStatus": obj.get("paymentStatus")
        })
        return _obj



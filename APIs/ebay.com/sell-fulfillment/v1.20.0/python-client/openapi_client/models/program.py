# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ebay_fulfillment_program import EbayFulfillmentProgram
from openapi_client.models.ebay_international_shipping import EbayInternationalShipping
from openapi_client.models.ebay_shipping import EbayShipping
from openapi_client.models.ebay_vault_program import EbayVaultProgram
from openapi_client.models.post_sale_authentication_program import PostSaleAuthenticationProgram
from typing import Optional, Set
from typing_extensions import Self

class Program(BaseModel):
    """
    This type is returned for order line items eligible for the Authenticity Guarantee service and/or for order line items fulfilled by the eBay Fulfillment program or eBay shipping.
    """ # noqa: E501
    authenticity_verification: Optional[PostSaleAuthenticationProgram] = Field(default=None, alias="authenticityVerification")
    ebay_international_shipping: Optional[EbayInternationalShipping] = Field(default=None, alias="ebayInternationalShipping")
    ebay_shipping: Optional[EbayShipping] = Field(default=None, alias="ebayShipping")
    ebay_vault: Optional[EbayVaultProgram] = Field(default=None, alias="ebayVault")
    fulfillment_program: Optional[EbayFulfillmentProgram] = Field(default=None, alias="fulfillmentProgram")
    __properties: ClassVar[List[str]] = ["authenticityVerification", "ebayInternationalShipping", "ebayShipping", "ebayVault", "fulfillmentProgram"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Program from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authenticity_verification
        if self.authenticity_verification:
            _dict['authenticityVerification'] = self.authenticity_verification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ebay_international_shipping
        if self.ebay_international_shipping:
            _dict['ebayInternationalShipping'] = self.ebay_international_shipping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ebay_shipping
        if self.ebay_shipping:
            _dict['ebayShipping'] = self.ebay_shipping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ebay_vault
        if self.ebay_vault:
            _dict['ebayVault'] = self.ebay_vault.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fulfillment_program
        if self.fulfillment_program:
            _dict['fulfillmentProgram'] = self.fulfillment_program.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Program from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticityVerification": PostSaleAuthenticationProgram.from_dict(obj["authenticityVerification"]) if obj.get("authenticityVerification") is not None else None,
            "ebayInternationalShipping": EbayInternationalShipping.from_dict(obj["ebayInternationalShipping"]) if obj.get("ebayInternationalShipping") is not None else None,
            "ebayShipping": EbayShipping.from_dict(obj["ebayShipping"]) if obj.get("ebayShipping") is not None else None,
            "ebayVault": EbayVaultProgram.from_dict(obj["ebayVault"]) if obj.get("ebayVault") is not None else None,
            "fulfillmentProgram": EbayFulfillmentProgram.from_dict(obj["fulfillmentProgram"]) if obj.get("fulfillmentProgram") is not None else None
        })
        return _obj



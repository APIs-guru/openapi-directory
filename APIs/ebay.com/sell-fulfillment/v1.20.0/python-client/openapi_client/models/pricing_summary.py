# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class PricingSummary(BaseModel):
    """
    This type contains a summary of cumulative costs and charges for all line items of an order, including item price, price adjustments, sales taxes, delivery costs, and order discounts.
    """ # noqa: E501
    adjustment: Optional[Amount] = None
    delivery_cost: Optional[Amount] = Field(default=None, alias="deliveryCost")
    delivery_discount: Optional[Amount] = Field(default=None, alias="deliveryDiscount")
    fee: Optional[Amount] = None
    price_discount: Optional[Amount] = Field(default=None, alias="priceDiscount")
    price_subtotal: Optional[Amount] = Field(default=None, alias="priceSubtotal")
    tax: Optional[Amount] = None
    total: Optional[Amount] = None
    __properties: ClassVar[List[str]] = ["adjustment", "deliveryCost", "deliveryDiscount", "fee", "priceDiscount", "priceSubtotal", "tax", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjustment
        if self.adjustment:
            _dict['adjustment'] = self.adjustment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_cost
        if self.delivery_cost:
            _dict['deliveryCost'] = self.delivery_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_discount
        if self.delivery_discount:
            _dict['deliveryDiscount'] = self.delivery_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_discount
        if self.price_discount:
            _dict['priceDiscount'] = self.price_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_subtotal
        if self.price_subtotal:
            _dict['priceSubtotal'] = self.price_subtotal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax
        if self.tax:
            _dict['tax'] = self.tax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustment": Amount.from_dict(obj["adjustment"]) if obj.get("adjustment") is not None else None,
            "deliveryCost": Amount.from_dict(obj["deliveryCost"]) if obj.get("deliveryCost") is not None else None,
            "deliveryDiscount": Amount.from_dict(obj["deliveryDiscount"]) if obj.get("deliveryDiscount") is not None else None,
            "fee": Amount.from_dict(obj["fee"]) if obj.get("fee") is not None else None,
            "priceDiscount": Amount.from_dict(obj["priceDiscount"]) if obj.get("priceDiscount") is not None else None,
            "priceSubtotal": Amount.from_dict(obj["priceSubtotal"]) if obj.get("priceSubtotal") is not None else None,
            "tax": Amount.from_dict(obj["tax"]) if obj.get("tax") is not None else None,
            "total": Amount.from_dict(obj["total"]) if obj.get("total") is not None else None
        })
        return _obj



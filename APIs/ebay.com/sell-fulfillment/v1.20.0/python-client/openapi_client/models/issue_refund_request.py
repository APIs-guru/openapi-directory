# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.refund_item import RefundItem
from openapi_client.models.simple_amount import SimpleAmount
from typing import Optional, Set
from typing_extensions import Self

class IssueRefundRequest(BaseModel):
    """
    The base type used by the request payload of the <b>issueRefund</b> method.
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="This free-text field allows the seller to clarify why the refund is being issued to the buyer.<br><br><b>Max Length</b>: 100")
    order_level_refund_amount: Optional[SimpleAmount] = Field(default=None, alias="orderLevelRefundAmount")
    reason_for_refund: Optional[StrictStr] = Field(default=None, description="The enumeration value passed into this field indicates the reason for the refund. One of the defined enumeration values in the <b>ReasonForRefundEnum</b> type must be used.<br><br>This field is required, and it is highly recommended that sellers use the correct refund reason, especially in the case of a buyer-requested cancellation or 'buyer remorse' return to indicate that there was nothing wrong with the item(s) or with the shipment of the order.<br><br><span class=\"tablenote\"><strong>Note:</strong> If issuing refunds for more than one order line item, keep in mind that the refund reason must be the same for each of the order line items. If the refund reason is different for one or more order line items in an order, the seller would need to make separate <b>issueRefund</b> calls, one for each refund reason. </span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ReasonForRefundEnum'>eBay API documentation</a>", alias="reasonForRefund")
    refund_items: Optional[List[RefundItem]] = Field(default=None, description="The <b>refundItems</b> array is only required if the seller is issuing a refund for one or more individual order line items in a multiple line item order. Otherwise, the seller just uses the <b>orderLevelRefundAmount</b> container to specify the amount of the refund for the entire order.", alias="refundItems")
    __properties: ClassVar[List[str]] = ["comment", "orderLevelRefundAmount", "reasonForRefund", "refundItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssueRefundRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order_level_refund_amount
        if self.order_level_refund_amount:
            _dict['orderLevelRefundAmount'] = self.order_level_refund_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in refund_items (list)
        _items = []
        if self.refund_items:
            for _item_refund_items in self.refund_items:
                if _item_refund_items:
                    _items.append(_item_refund_items.to_dict())
            _dict['refundItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssueRefundRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "orderLevelRefundAmount": SimpleAmount.from_dict(obj["orderLevelRefundAmount"]) if obj.get("orderLevelRefundAmount") is not None else None,
            "reasonForRefund": obj.get("reasonForRefund"),
            "refundItems": [RefundItem.from_dict(_item) for _item in obj["refundItems"]] if obj.get("refundItems") is not None else None
        })
        return _obj



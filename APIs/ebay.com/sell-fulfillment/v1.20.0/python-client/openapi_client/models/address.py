# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    This type contains the details of a geographical address.
    """ # noqa: E501
    address_line1: Optional[StrictStr] = Field(default=None, description="The first line of the street address.<br><br><span class=\"tablenote\"><strong>Note:</strong> <b>addressLine1</b> will not be returned for any order that is more than 90 days old.</span>", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="The second line of the street address. This field can be used for additional address information, such as a suite or apartment number. This field will be returned if defined for the shipping address.<br><br><span class=\"tablenote\"><strong>Note:</strong> <b>addressLine2</b> will not be returned for any order that is more than 90 days old.</span><br><span class=\"tablenote\"><b>Note:</b> As of January 31, 2022, <b>addressLine2</b> no longer returns EU VAT tax information. To determine line-item level VAT tax information, refer to <a href=\"#response.orders.lineItems.ebayCollectAndRemitTaxes.ebayReference\">eBayReference</a>.</span>", alias="addressLine2")
    city: Optional[StrictStr] = Field(default=None, description="The city of the shipping destination.")
    country_code: Optional[StrictStr] = Field(default=None, description="The country of the shipping destination, represented as a two-letter ISO 3166-1 alpha-2 country code. For example, <code>US</code> represents the United States, and <code>DE</code> represents Germany. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum'>eBay API documentation</a>", alias="countryCode")
    county: Optional[StrictStr] = Field(default=None, description="The county of the shipping destination. Counties typically, but not always, contain multiple cities or towns. This field is returned if known/available.")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code of the shipping destination. Usually referred to as Zip codes in the US. Most countries have postal codes, but not all. The postal code will be returned if applicable.", alias="postalCode")
    state_or_province: Optional[StrictStr] = Field(default=None, description="The state or province of the shipping destination. Most countries have states or provinces, but not all. The state or province will be returned if applicable.", alias="stateOrProvince")
    __properties: ClassVar[List[str]] = ["addressLine1", "addressLine2", "city", "countryCode", "county", "postalCode", "stateOrProvince"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "city": obj.get("city"),
            "countryCode": obj.get("countryCode"),
            "county": obj.get("county"),
            "postalCode": obj.get("postalCode"),
            "stateOrProvince": obj.get("stateOrProvince")
        })
        return _obj



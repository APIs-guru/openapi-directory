# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.file_info import FileInfo
from openapi_client.models.order_line_items import OrderLineItems
from openapi_client.models.tracking_info import TrackingInfo
from typing import Optional, Set
from typing_extensions import Self

class DisputeEvidence(BaseModel):
    """
    This type is used by the <strong>evidence</strong> array that is returned in the <strong>getPaymentDispute</strong> response if one or more evidential documents are associated with the payment dispute. 
    """ # noqa: E501
    evidence_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the evidential file set. Potentially, each evidential file set can have more than one file, that is why there is this file set identifier, and then an identifier for each file within this file set.", alias="evidenceId")
    evidence_type: Optional[StrictStr] = Field(default=None, description="This enumeration value shows the type of evidential file provided. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:EvidenceTypeEnum'>eBay API documentation</a>", alias="evidenceType")
    files: Optional[List[FileInfo]] = Field(default=None, description="This array shows the name, ID, file type, and upload date for each provided file.")
    line_items: Optional[List[OrderLineItems]] = Field(default=None, description="This array shows one or more order line items associated with the evidential document that has been provided.", alias="lineItems")
    provided_date: Optional[StrictStr] = Field(default=None, description="The timestamp in this field shows the date/time when the seller provided a requested evidential document to eBay. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.", alias="providedDate")
    request_date: Optional[StrictStr] = Field(default=None, description="The timestamp in this field shows the date/time when eBay requested the evidential document from the seller in response to a payment dispute. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.", alias="requestDate")
    respond_by_date: Optional[StrictStr] = Field(default=None, description="The timestamp in this field shows the date/time when the seller was expected to provide a requested evidential document to eBay.  <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.", alias="respondByDate")
    shipment_tracking: Optional[List[TrackingInfo]] = Field(default=None, description="This array shows the shipping carrier and shipment tracking number associated with each shipment package of the order. This array is returned under the <strong>evidence</strong> container if the seller has provided shipment tracking information as evidence to support <code>PROOF_OF_DELIVERY</code> for an INR-related payment dispute.", alias="shipmentTracking")
    __properties: ClassVar[List[str]] = ["evidenceId", "evidenceType", "files", "lineItems", "providedDate", "requestDate", "respondByDate", "shipmentTracking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DisputeEvidence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_tracking (list)
        _items = []
        if self.shipment_tracking:
            for _item_shipment_tracking in self.shipment_tracking:
                if _item_shipment_tracking:
                    _items.append(_item_shipment_tracking.to_dict())
            _dict['shipmentTracking'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DisputeEvidence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "evidenceId": obj.get("evidenceId"),
            "evidenceType": obj.get("evidenceType"),
            "files": [FileInfo.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "lineItems": [OrderLineItems.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "providedDate": obj.get("providedDate"),
            "requestDate": obj.get("requestDate"),
            "respondByDate": obj.get("respondByDate"),
            "shipmentTracking": [TrackingInfo.from_dict(_item) for _item in obj["shipmentTracking"]] if obj.get("shipmentTracking") is not None else None
        })
        return _obj



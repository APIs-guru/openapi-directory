# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.simple_amount import SimpleAmount
from typing import Optional, Set
from typing_extensions import Self

class PaymentDisputeOutcomeDetail(BaseModel):
    """
    This type is used by the <strong>resolution</strong> container that is returned for payment disputes that have been resolved.
    """ # noqa: E501
    fees: Optional[SimpleAmount] = None
    protected_amount: Optional[SimpleAmount] = Field(default=None, alias="protectedAmount")
    protection_status: Optional[StrictStr] = Field(default=None, description="This enumeration value indicates if the seller is fully protected, partially protected, or not protected by eBay for the payment dispute. This field is always returned once the payment dispute is resolved. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ProtectionStatusEnum'>eBay API documentation</a>", alias="protectionStatus")
    reason_for_closure: Optional[StrictStr] = Field(default=None, description="The enumeration value returned in this field indicates the outcome of the payment dispute for the seller. This field is always returned once the payment dispute is resolved. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:OutcomeEnum'>eBay API documentation</a>", alias="reasonForClosure")
    recoup_amount: Optional[SimpleAmount] = Field(default=None, alias="recoupAmount")
    total_fee_credit: Optional[SimpleAmount] = Field(default=None, alias="totalFeeCredit")
    __properties: ClassVar[List[str]] = ["fees", "protectedAmount", "protectionStatus", "reasonForClosure", "recoupAmount", "totalFeeCredit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentDisputeOutcomeDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fees
        if self.fees:
            _dict['fees'] = self.fees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protected_amount
        if self.protected_amount:
            _dict['protectedAmount'] = self.protected_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recoup_amount
        if self.recoup_amount:
            _dict['recoupAmount'] = self.recoup_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fee_credit
        if self.total_fee_credit:
            _dict['totalFeeCredit'] = self.total_fee_credit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentDisputeOutcomeDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fees": SimpleAmount.from_dict(obj["fees"]) if obj.get("fees") is not None else None,
            "protectedAmount": SimpleAmount.from_dict(obj["protectedAmount"]) if obj.get("protectedAmount") is not None else None,
            "protectionStatus": obj.get("protectionStatus"),
            "reasonForClosure": obj.get("reasonForClosure"),
            "recoupAmount": SimpleAmount.from_dict(obj["recoupAmount"]) if obj.get("recoupAmount") is not None else None,
            "totalFeeCredit": SimpleAmount.from_dict(obj["totalFeeCredit"]) if obj.get("totalFeeCredit") is not None else None
        })
        return _obj



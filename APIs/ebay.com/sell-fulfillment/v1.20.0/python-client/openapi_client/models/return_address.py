# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.phone import Phone
from typing import Optional, Set
from typing_extensions import Self

class ReturnAddress(BaseModel):
    """
    This type is used by the payment dispute methods, and is relevant if the buyer will be returning the item to the seller.
    """ # noqa: E501
    address_line1: Optional[StrictStr] = Field(default=None, description="The first line of the street address.", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="The second line of the street address. This line is not always necessarily, but is often used for apartment number or suite number, or other relevant information that can not fit on the first line.", alias="addressLine2")
    city: Optional[StrictStr] = Field(default=None, description="The city of the return address.")
    country: Optional[StrictStr] = Field(default=None, description="The country's two-digt, ISO 3166-1 country code. See the enumeration type for a country's value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum'>eBay API documentation</a>")
    county: Optional[StrictStr] = Field(default=None, description="The county of the return address. Counties are not applicable to all countries.")
    full_name: Optional[StrictStr] = Field(default=None, description="The full name of return address owner.", alias="fullName")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code of the return address.", alias="postalCode")
    primary_phone: Optional[Phone] = Field(default=None, alias="primaryPhone")
    state_or_province: Optional[StrictStr] = Field(default=None, description="The state or province of the return address.", alias="stateOrProvince")
    __properties: ClassVar[List[str]] = ["addressLine1", "addressLine2", "city", "country", "county", "fullName", "postalCode", "primaryPhone", "stateOrProvince"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of primary_phone
        if self.primary_phone:
            _dict['primaryPhone'] = self.primary_phone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "fullName": obj.get("fullName"),
            "postalCode": obj.get("postalCode"),
            "primaryPhone": Phone.from_dict(obj["primaryPhone"]) if obj.get("primaryPhone") is not None else None,
            "stateOrProvince": obj.get("stateOrProvince")
        })
        return _obj



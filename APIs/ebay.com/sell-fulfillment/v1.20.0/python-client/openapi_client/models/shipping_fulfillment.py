# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.line_item_reference import LineItemReference
from typing import Optional, Set
from typing_extensions import Self

class ShippingFulfillment(BaseModel):
    """
    This type contains the complete details of an existing fulfillment for an order.
    """ # noqa: E501
    fulfillment_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the fulfillment; for example, <code>9405509699937003457459</code>. This eBay-generated value is created with a successful <b>createShippingFulfillment</b> call.", alias="fulfillmentId")
    line_items: Optional[List[LineItemReference]] = Field(default=None, description="This array contains a list of one or more line items (and purchased quantity) to which the fulfillment applies.", alias="lineItems")
    shipment_tracking_number: Optional[StrictStr] = Field(default=None, description="The tracking number provided by the shipping carrier for the package shipped in this fulfillment. This field is returned if available.", alias="shipmentTrackingNumber")
    shipped_date: Optional[StrictStr] = Field(default=None, description="The date and time that the fulfillment package was shipped. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field should only be returned if the package has been shipped.<br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>", alias="shippedDate")
    shipping_carrier_code: Optional[StrictStr] = Field(default=None, description="The eBay code identifying the shipping carrier for this fulfillment. This field is returned if available. <br><br><span class=\"tablenote\"><strong>Note:</strong> The Trading API's <b>ShippingCarrierCodeType</b> enumeration type contains the most current list of eBay shipping carrier codes and the countries served by each carrier. See <a href=\"https://developer.ebay.com/Devzone/XML/docs/Reference/eBay/types/ShippingCarrierCodeType.html \" target=\"_blank\">ShippingCarrierCodeType</a>.</span>", alias="shippingCarrierCode")
    __properties: ClassVar[List[str]] = ["fulfillmentId", "lineItems", "shipmentTrackingNumber", "shippedDate", "shippingCarrierCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingFulfillment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingFulfillment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fulfillmentId": obj.get("fulfillmentId"),
            "lineItems": [LineItemReference.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "shipmentTrackingNumber": obj.get("shipmentTrackingNumber"),
            "shippedDate": obj.get("shippedDate"),
            "shippingCarrierCode": obj.get("shippingCarrierCode")
        })
        return _obj



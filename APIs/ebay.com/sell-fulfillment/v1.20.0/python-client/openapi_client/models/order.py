# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.buyer import Buyer
from openapi_client.models.cancel_status import CancelStatus
from openapi_client.models.fulfillment_start_instruction import FulfillmentStartInstruction
from openapi_client.models.line_item import LineItem
from openapi_client.models.payment_summary import PaymentSummary
from openapi_client.models.pricing_summary import PricingSummary
from openapi_client.models.program import Program
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    This type contains the details of an order, including information about the buyer, order history, shipping fulfillments, line items, costs, payments, and order fulfillment status.
    """ # noqa: E501
    buyer: Optional[Buyer] = None
    buyer_checkout_notes: Optional[StrictStr] = Field(default=None, description="This field contains any comments that the buyer left for the seller about the order during checkout process. This field is only returned if a buyer left comments at checkout time. ", alias="buyerCheckoutNotes")
    cancel_status: Optional[CancelStatus] = Field(default=None, alias="cancelStatus")
    creation_date: Optional[StrictStr] = Field(default=None, description="The date and time that the order was created. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>", alias="creationDate")
    ebay_collect_and_remit_tax: Optional[StrictBool] = Field(default=None, description="This field is only returned if <code>true</code>, and indicates that eBay will collect tax (US state-mandated sales tax, Federal and Provincial Sales Tax in Canada, 'Goods and Services' tax in Canada, Australia, and New Zealand, and VAT collected for UK and EU countries,) for at least one line item in the order, and remit the tax to the taxing authority of the buyer's residence. If this field is returned, the seller should search for one or more <strong>ebayCollectAndRemitTaxes</strong> containers at the line item level to get more information about the type of tax and the amount.", alias="ebayCollectAndRemitTax")
    fulfillment_hrefs: Optional[List[StrictStr]] = Field(default=None, description="This array contains a list of one or more <strong>getShippingFulfillment</strong> call URIs that can be used to retrieve shipping fulfillments that have been set up for the order.", alias="fulfillmentHrefs")
    fulfillment_start_instructions: Optional[List[FulfillmentStartInstruction]] = Field(default=None, description="This container consists of a set of specifications for fulfilling the order, including the type of fulfillment, shipping carrier and service, shipping address, and estimated delivery window. These instructions are derived from the buyer's and seller's eBay account preferences, the listing parameters, and the buyer's checkout selections. The seller can use them as a starting point for packaging, addressing, and shipping the order.<br><br><span class=\"tablenote\"><strong>Note:</strong> Although this container is presented as an array, it currently returns only one set of fulfillment specifications. Additional array members will be supported in future functionality.</span>", alias="fulfillmentStartInstructions")
    last_modified_date: Optional[StrictStr] = Field(default=None, description="The date and time that the order was last modified. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>", alias="lastModifiedDate")
    legacy_order_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the order in legacy format, as traditionally used by the Trading API (and other legacy APIs). Both the <b>orderId</b> field and this field are always returned.", alias="legacyOrderId")
    line_items: Optional[List[LineItem]] = Field(default=None, description="This array contains the details for all line items that comprise the order.", alias="lineItems")
    order_fulfillment_status: Optional[StrictStr] = Field(default=None, description="The degree to which fulfillment of the order is complete. See the <strong>OrderFulfillmentStatus</strong> type definition for more information about each possible fulfillment state. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:OrderFulfillmentStatus'>eBay API documentation</a>", alias="orderFulfillmentStatus")
    order_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the order. Both the <b>legacyOrderId</b> field (traditionally used by Trading and other legacy APIS) and this field are always returned.", alias="orderId")
    order_payment_status: Optional[StrictStr] = Field(default=None, description="The enumeration value returned in this field indicates the current payment status of an order, or in case of a refund request, the current status of the refund. See the <strong>OrderPaymentStatusEnum</strong> type definition for more information about each possible payment/refund state. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:OrderPaymentStatusEnum'>eBay API documentation</a>", alias="orderPaymentStatus")
    payment_summary: Optional[PaymentSummary] = Field(default=None, alias="paymentSummary")
    pricing_summary: Optional[PricingSummary] = Field(default=None, alias="pricingSummary")
    program: Optional[Program] = None
    sales_record_reference: Optional[StrictStr] = Field(default=None, description="An eBay-generated identifier that is used to identify and manage orders through the Selling Manager and Selling Manager Pro tools. This order identifier can also be found on the Orders grid page and in the Sales Record pages in Seller Hub. A <strong>salesRecordReference</strong> number is only generated and returned at the order level, and not at the order line item level.<br><br> In cases where the seller does not have a Selling Manager or Selling Manager Pro subscription nor access to Seller Hub, this field may not be returned.", alias="salesRecordReference")
    seller_id: Optional[StrictStr] = Field(default=None, description="The unique eBay user ID of the seller who sold the order.", alias="sellerId")
    total_fee_basis_amount: Optional[Amount] = Field(default=None, alias="totalFeeBasisAmount")
    total_marketplace_fee: Optional[Amount] = Field(default=None, alias="totalMarketplaceFee")
    __properties: ClassVar[List[str]] = ["buyer", "buyerCheckoutNotes", "cancelStatus", "creationDate", "ebayCollectAndRemitTax", "fulfillmentHrefs", "fulfillmentStartInstructions", "lastModifiedDate", "legacyOrderId", "lineItems", "orderFulfillmentStatus", "orderId", "orderPaymentStatus", "paymentSummary", "pricingSummary", "program", "salesRecordReference", "sellerId", "totalFeeBasisAmount", "totalMarketplaceFee"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of buyer
        if self.buyer:
            _dict['buyer'] = self.buyer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cancel_status
        if self.cancel_status:
            _dict['cancelStatus'] = self.cancel_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fulfillment_start_instructions (list)
        _items = []
        if self.fulfillment_start_instructions:
            for _item_fulfillment_start_instructions in self.fulfillment_start_instructions:
                if _item_fulfillment_start_instructions:
                    _items.append(_item_fulfillment_start_instructions.to_dict())
            _dict['fulfillmentStartInstructions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_summary
        if self.payment_summary:
            _dict['paymentSummary'] = self.payment_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing_summary
        if self.pricing_summary:
            _dict['pricingSummary'] = self.pricing_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of program
        if self.program:
            _dict['program'] = self.program.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fee_basis_amount
        if self.total_fee_basis_amount:
            _dict['totalFeeBasisAmount'] = self.total_fee_basis_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_marketplace_fee
        if self.total_marketplace_fee:
            _dict['totalMarketplaceFee'] = self.total_marketplace_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buyer": Buyer.from_dict(obj["buyer"]) if obj.get("buyer") is not None else None,
            "buyerCheckoutNotes": obj.get("buyerCheckoutNotes"),
            "cancelStatus": CancelStatus.from_dict(obj["cancelStatus"]) if obj.get("cancelStatus") is not None else None,
            "creationDate": obj.get("creationDate"),
            "ebayCollectAndRemitTax": obj.get("ebayCollectAndRemitTax"),
            "fulfillmentHrefs": obj.get("fulfillmentHrefs"),
            "fulfillmentStartInstructions": [FulfillmentStartInstruction.from_dict(_item) for _item in obj["fulfillmentStartInstructions"]] if obj.get("fulfillmentStartInstructions") is not None else None,
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "legacyOrderId": obj.get("legacyOrderId"),
            "lineItems": [LineItem.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "orderFulfillmentStatus": obj.get("orderFulfillmentStatus"),
            "orderId": obj.get("orderId"),
            "orderPaymentStatus": obj.get("orderPaymentStatus"),
            "paymentSummary": PaymentSummary.from_dict(obj["paymentSummary"]) if obj.get("paymentSummary") is not None else None,
            "pricingSummary": PricingSummary.from_dict(obj["pricingSummary"]) if obj.get("pricingSummary") is not None else None,
            "program": Program.from_dict(obj["program"]) if obj.get("program") is not None else None,
            "salesRecordReference": obj.get("salesRecordReference"),
            "sellerId": obj.get("sellerId"),
            "totalFeeBasisAmount": Amount.from_dict(obj["totalFeeBasisAmount"]) if obj.get("totalFeeBasisAmount") is not None else None,
            "totalMarketplaceFee": Amount.from_dict(obj["totalMarketplaceFee"]) if obj.get("totalMarketplaceFee") is not None else None
        })
        return _obj



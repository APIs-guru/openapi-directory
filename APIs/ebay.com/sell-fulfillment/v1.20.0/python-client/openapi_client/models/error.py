# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_parameter import ErrorParameter
from typing import Optional, Set
from typing_extensions import Self

class Error(BaseModel):
    """
    This type contains a error or warning related to a call request. 
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The context or source of this error or warning.")
    domain: Optional[StrictStr] = Field(default=None, description="The name of the domain containing the service or application. For example, <code>sell</code> is a domain.")
    error_id: Optional[StrictInt] = Field(default=None, description="A positive integer that uniquely identifies the specific error condition that occurred. Your application can use these values as error code identifiers in your customized error-handling algorithms.", alias="errorId")
    input_ref_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of one or more specific request elements (if any) associated with the error or warning. The format of these strings depends on the request payload format. For JSON, use JSONPath notation.", alias="inputRefIds")
    long_message: Optional[StrictStr] = Field(default=None, description="An expanded version of the <b>message</b> field. <br><br><b>Maximum length:</b> 200 characters", alias="longMessage")
    message: Optional[StrictStr] = Field(default=None, description="A message about the error or warning which is device agnostic and readable by end users and application developers. It explains what the error or warning is, and how to fix it (in a general sense). If applicable, the value is localized to the end user's requested locale. <br><br><b>Maximum length:</b> 50 characters")
    output_ref_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of one or more specific response elements (if any) associated with the error or warning. The format of these strings depends on the request payload format. For JSON, use JSONPath notation.", alias="outputRefIds")
    parameters: Optional[List[ErrorParameter]] = Field(default=None, description="Contains a list of name-value pairs that provide additional information concerning this error or warning. Each item in the list is an input parameter that contributed to the error or warning condition.")
    subdomain: Optional[StrictStr] = Field(default=None, description="The name of the domain's subsystem or subdivision. For example, <code>fulfillment</code> is a subdomain in the <code>sell</code> domain.")
    __properties: ClassVar[List[str]] = ["category", "domain", "errorId", "inputRefIds", "longMessage", "message", "outputRefIds", "parameters", "subdomain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Error from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "domain": obj.get("domain"),
            "errorId": obj.get("errorId"),
            "inputRefIds": obj.get("inputRefIds"),
            "longMessage": obj.get("longMessage"),
            "message": obj.get("message"),
            "outputRefIds": obj.get("outputRefIds"),
            "parameters": [ErrorParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "subdomain": obj.get("subdomain")
        })
        return _obj



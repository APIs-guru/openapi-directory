# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.phone_number import PhoneNumber
from typing import Optional, Set
from typing_extensions import Self

class ExtendedContact(BaseModel):
    """
    This type contains shipping and contact information for a buyer or an eBay shipping partner.
    """ # noqa: E501
    company_name: Optional[StrictStr] = Field(default=None, description="The company name associated with the buyer or eBay shipping partner. This field is only returned if defined/applicable to the buyer or eBay shipping partner.", alias="companyName")
    contact_address: Optional[Address] = Field(default=None, alias="contactAddress")
    email: Optional[StrictStr] = Field(default=None, description="This field contains the email address of the buyer. This address will be returned for up to 14 days from order creation. If an order is more than 14 days old, no address is returned.<br><br><span class=\"tablenote\"> <strong>Note:</strong> If returned, this field contains the email address of the buyer, even for Global Shipping Program shipments.<br><br>The <b>email</b> will not be returned for any order that is more than 90 days old.</span>")
    full_name: Optional[StrictStr] = Field(default=None, description="The full name of the buyer or eBay shipping partner.<br><br><span class=\"tablenote\"><strong>Note:</strong> The <b>fullName</b> will not be returned for any order that is more than 90 days old.</span>", alias="fullName")
    primary_phone: Optional[PhoneNumber] = Field(default=None, alias="primaryPhone")
    __properties: ClassVar[List[str]] = ["companyName", "contactAddress", "email", "fullName", "primaryPhone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact_address
        if self.contact_address:
            _dict['contactAddress'] = self.contact_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_phone
        if self.primary_phone:
            _dict['primaryPhone'] = self.primary_phone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "companyName": obj.get("companyName"),
            "contactAddress": Address.from_dict(obj["contactAddress"]) if obj.get("contactAddress") is not None else None,
            "email": obj.get("email"),
            "fullName": obj.get("fullName"),
            "primaryPhone": PhoneNumber.from_dict(obj["primaryPhone"]) if obj.get("primaryPhone") is not None else None
        })
        return _obj



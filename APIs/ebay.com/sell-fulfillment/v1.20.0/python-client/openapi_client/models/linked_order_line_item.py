# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.name_value_pair import NameValuePair
from openapi_client.models.tracking_info import TrackingInfo
from typing import Optional, Set
from typing_extensions import Self

class LinkedOrderLineItem(BaseModel):
    """
    This type contains data on a line item that is related to, but not a part of the order.
    """ # noqa: E501
    line_item_aspects: Optional[List[NameValuePair]] = Field(default=None, description="This array contains the complete set of items aspects for the linked line item. For example:<br><pre>\"lineItemAspects\": [<br>    {<br>        \"name\": \"Tire Type\",<br>        \"value\": \"All Season\"<br>    },<br><br>    ...<br> <br>    {<br>        \"name\": \"Car Type\",<br>        \"value\": \"Performance\"<br>    }<br>]</pre><span class=\"tablenote\"><strong>Note:</strong> All item specifics for the listing are returned. The name/value pairs returned are in the language of the linked line item's listing site, which may vary from the seller's language.</span>", alias="lineItemAspects")
    line_item_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the linked order line item.", alias="lineItemId")
    max_estimated_delivery_date: Optional[StrictStr] = Field(default=None, description="The end of the date range in which the linked line item is expected to be delivered to the shipping address.", alias="maxEstimatedDeliveryDate")
    min_estimated_delivery_date: Optional[StrictStr] = Field(default=None, description="The beginning of the date range in which the linked line item is expected to be delivered to the shipping address.", alias="minEstimatedDeliveryDate")
    order_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the order to which the linked line item belongs.", alias="orderId")
    seller_id: Optional[StrictStr] = Field(default=None, description="The eBay user ID of the seller who sold the linked line item. For example, the user ID of the tire seller.", alias="sellerId")
    shipments: Optional[List[TrackingInfo]] = Field(default=None, description="An array containing any shipment tracking information available for the linked line item.")
    title: Optional[StrictStr] = Field(default=None, description="The listing title of the linked line item.")
    __properties: ClassVar[List[str]] = ["lineItemAspects", "lineItemId", "maxEstimatedDeliveryDate", "minEstimatedDeliveryDate", "orderId", "sellerId", "shipments", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LinkedOrderLineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_item_aspects (list)
        _items = []
        if self.line_item_aspects:
            for _item_line_item_aspects in self.line_item_aspects:
                if _item_line_item_aspects:
                    _items.append(_item_line_item_aspects.to_dict())
            _dict['lineItemAspects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipments (list)
        _items = []
        if self.shipments:
            for _item_shipments in self.shipments:
                if _item_shipments:
                    _items.append(_item_shipments.to_dict())
            _dict['shipments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LinkedOrderLineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lineItemAspects": [NameValuePair.from_dict(_item) for _item in obj["lineItemAspects"]] if obj.get("lineItemAspects") is not None else None,
            "lineItemId": obj.get("lineItemId"),
            "maxEstimatedDeliveryDate": obj.get("maxEstimatedDeliveryDate"),
            "minEstimatedDeliveryDate": obj.get("minEstimatedDeliveryDate"),
            "orderId": obj.get("orderId"),
            "sellerId": obj.get("sellerId"),
            "shipments": [TrackingInfo.from_dict(_item) for _item in obj["shipments"]] if obj.get("shipments") is not None else None,
            "title": obj.get("title")
        })
        return _obj



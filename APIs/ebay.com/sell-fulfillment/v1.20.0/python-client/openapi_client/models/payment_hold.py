# coding: utf-8

"""
    Fulfillment API

    Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.

    The version of the OpenAPI document: v1.20.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.seller_actions_to_release import SellerActionsToRelease
from typing import Optional, Set
from typing_extensions import Self

class PaymentHold(BaseModel):
    """
    This type contains information about a hold placed on a payment to a seller for an order, including the reason why the buyer's payment for the order is being held, the expected release date of the funds into the seller's account, the current state of the hold, and the actual release date if the payment has been released, and possible actions the seller can take to expedite the payout of funds into their account.
    """ # noqa: E501
    expected_release_date: Optional[StrictStr] = Field(default=None, description="The date and time that the payment being held is expected to be released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field will be returned if known by eBay. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>", alias="expectedReleaseDate")
    hold_amount: Optional[Amount] = Field(default=None, alias="holdAmount")
    hold_reason: Optional[StrictStr] = Field(default=None, description="The reason that the payment is being held. A seller's payment may be held for a number of reasons, including when the seller is new, the seller's level is below standard, or if a return case or 'Significantly not as described' case is pending against the seller. This field is always returned with the <strong>paymentHolds</strong> array.", alias="holdReason")
    hold_state: Optional[StrictStr] = Field(default=None, description="The current stage or condition of the hold. This field is always returned with the <strong>paymentHolds</strong> array.<br><br><b>Applicable values:</b><ul><li><code>HELD</code></li><li><code>HELD_PENDING</code></li><li><code>NOT_HELD</code></li><li><code>RELEASE_CONFIRMED</code></li><li><code>RELEASE_FAILED</code></li><li><code>RELEASE_PENDING</code></li><li><code>RELEASED</code></li></ul>", alias="holdState")
    release_date: Optional[StrictStr] = Field(default=None, description="The date and time that the payment being held was actually released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the seller's payment is actually released into the seller's account.<br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>", alias="releaseDate")
    seller_actions_to_release: Optional[List[SellerActionsToRelease]] = Field(default=None, description="A list of one or more possible actions that the seller can take to expedite the release of the payment hold.", alias="sellerActionsToRelease")
    __properties: ClassVar[List[str]] = ["expectedReleaseDate", "holdAmount", "holdReason", "holdState", "releaseDate", "sellerActionsToRelease"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentHold from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hold_amount
        if self.hold_amount:
            _dict['holdAmount'] = self.hold_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in seller_actions_to_release (list)
        _items = []
        if self.seller_actions_to_release:
            for _item_seller_actions_to_release in self.seller_actions_to_release:
                if _item_seller_actions_to_release:
                    _items.append(_item_seller_actions_to_release.to_dict())
            _dict['sellerActionsToRelease'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentHold from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expectedReleaseDate": obj.get("expectedReleaseDate"),
            "holdAmount": Amount.from_dict(obj["holdAmount"]) if obj.get("holdAmount") is not None else None,
            "holdReason": obj.get("holdReason"),
            "holdState": obj.get("holdState"),
            "releaseDate": obj.get("releaseDate"),
            "sellerActionsToRelease": [SellerActionsToRelease.from_dict(_item) for _item in obj["sellerActionsToRelease"]] if obj.get("sellerActionsToRelease") is not None else None
        })
        return _obj



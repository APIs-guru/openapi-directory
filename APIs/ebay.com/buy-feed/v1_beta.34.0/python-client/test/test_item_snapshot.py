# coding: utf-8

"""
    Item Feed Service

    <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>

    The version of the OpenAPI document: v1_beta.34.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.item_snapshot import ItemSnapshot

class TestItemSnapshot(unittest.TestCase):
    """ItemSnapshot unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ItemSnapshot:
        """Test ItemSnapshot
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ItemSnapshot`
        """
        model = ItemSnapshot()
        if include_optional:
            return ItemSnapshot(
                accepted_payment_methods = '',
                additional_image_urls = '',
                additional_shipping_cost_per_unit = '',
                age_group = '',
                alerts = '',
                authenticity_guarantee_fee_currency = '',
                authenticity_guarantee_fee_value = '',
                authenticity_guarantee_selection = '',
                authenticity_guarantee_service_id = '',
                availability = '',
                availability_threshold = 56,
                availability_threshold_type = '',
                brand = '',
                buying_options = '',
                category = '',
                category_id = '',
                change_metadata = '',
                color = '',
                condition = '',
                condition_id = '',
                coupon_discount_currency = '',
                coupon_discount_type = '',
                coupon_discount_value = '',
                coupon_expiration_date = '',
                coupon_message = '',
                coupon_redemption_code = '',
                coupon_terms_web_url = '',
                default_image_url = '',
                delivery_options = '',
                description = '',
                discount_amount = '',
                discount_percentage = '',
                eco_participation_fee_currency = '',
                eco_participation_fee_value = '',
                energy_efficiency_class = '',
                epid = '',
                estimated_available_quantity = 56,
                gender = '',
                gtin = '',
                hazmat_additional_information = '',
                hazmat_pictogram_descriptions = '',
                hazmat_pictogram_ids = '',
                hazmat_pictogram_image_urls = '',
                hazmat_signal_word = '',
                hazmat_signal_word_id = '',
                hazmat_statement_descriptions = '',
                hazmat_statement_ids = '',
                image_altering_prohibited = True,
                image_url = '',
                inferred_epid = '',
                item_affiliate_web_url = '',
                item_creation_date = '',
                item_end_date = '',
                item_id = '',
                item_location_country = '',
                item_snapshot_date = '',
                item_web_url = '',
                legacy_item_id = '',
                localized_aspects = '',
                lot_size = 56,
                material = '',
                mpn = '',
                original_price_currency = '',
                original_price_value = '',
                pattern = '',
                price_currency = '',
                price_value = '',
                primary_item_group_id = '',
                primary_item_group_type = '',
                qualified_programs = '',
                quantity_used_for_estimate = 56,
                refund_method = '',
                repair_score = '',
                return_method = '',
                return_period_unit = '',
                return_period_value = 56,
                return_shipping_cost_payer = '',
                returns_accepted = True,
                seller_account_type = '',
                seller_feedback_percentage = '',
                seller_feedback_score = '',
                seller_item_revision = '',
                seller_trust_level = '',
                seller_username = '',
                ship_to_excluded_regions = '',
                ship_to_included_regions = '',
                shipping_carrier_code = '',
                shipping_cost = '',
                shipping_cost_type = '',
                shipping_service_code = '',
                shipping_type = '',
                size = '',
                take_back_policy_description = '',
                take_back_policy_label = '',
                title = '',
                total_units = '',
                tyre_label_image_url = '',
                unit_price = '',
                unit_pricing_measure = ''
            )
        else:
            return ItemSnapshot(
        )
        """

    def testItemSnapshot(self):
        """Test ItemSnapshot"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

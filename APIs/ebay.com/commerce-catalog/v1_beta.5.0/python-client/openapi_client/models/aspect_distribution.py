# coding: utf-8

"""
    Catalog API

    The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.

    The version of the OpenAPI document: v1_beta.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aspect_value_distribution import AspectValueDistribution
from typing import Optional, Set
from typing_extensions import Self

class AspectDistribution(BaseModel):
    """
    This type contains information about one category aspect that is associated with a specified category.
    """ # noqa: E501
    aspect_value_distributions: Optional[List[AspectValueDistribution]] = Field(default=None, description="Contains information about one or more values of the category aspect identified by <b>localizedAspectName</b>. ", alias="aspectValueDistributions")
    localized_aspect_name: Optional[StrictStr] = Field(default=None, description="The localized name of an aspect that is associated with the category identified by <b>dominantCategoryId</b>.", alias="localizedAspectName")
    __properties: ClassVar[List[str]] = ["aspectValueDistributions", "localizedAspectName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AspectDistribution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aspect_value_distributions (list)
        _items = []
        if self.aspect_value_distributions:
            for _item_aspect_value_distributions in self.aspect_value_distributions:
                if _item_aspect_value_distributions:
                    _items.append(_item_aspect_value_distributions.to_dict())
            _dict['aspectValueDistributions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AspectDistribution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aspectValueDistributions": [AspectValueDistribution.from_dict(_item) for _item in obj["aspectValueDistributions"]] if obj.get("aspectValueDistributions") is not None else None,
            "localizedAspectName": obj.get("localizedAspectName")
        })
        return _obj



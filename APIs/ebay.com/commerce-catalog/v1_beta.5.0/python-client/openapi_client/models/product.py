# coding: utf-8

"""
    Catalog API

    The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.

    The version of the OpenAPI document: v1_beta.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aspect import Aspect
from openapi_client.models.image import Image
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    This type contains the full details of a specified product, including information about the product's identifiers, product images, aspects, and categories.
    """ # noqa: E501
    additional_images: Optional[List[Image]] = Field(default=None, description="Contains information about  additional images associated with this product. For the primary image, see the <b>image</b> container.", alias="additionalImages")
    aspects: Optional[List[Aspect]] = Field(default=None, description="Contains an array of the category aspects and their values that are associated with this product.")
    brand: Optional[StrictStr] = Field(default=None, description="The manufacturer's brand name for this product.")
    description: Optional[StrictStr] = Field(default=None, description="The rich description of this product, which might contain HTML.")
    ean: Optional[List[StrictStr]] = Field(default=None, description="A list of all European Article Numbers (EANs) that identify this product.")
    epid: Optional[StrictStr] = Field(default=None, description="The eBay product ID of this product.")
    gtin: Optional[List[StrictStr]] = Field(default=None, description="A list of all GTINs that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.")
    image: Optional[Image] = None
    isbn: Optional[List[StrictStr]] = Field(default=None, description="A list of all International Standard Book Numbers (ISBNs) that identify this product. ")
    mpn: Optional[List[StrictStr]] = Field(default=None, description="A list of all MPN values that the manufacturer uses to identify this product.")
    other_applicable_category_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of category IDs (other than the value of <b>primaryCategoryId</b>) for all the leaf categories to which this product might belong.", alias="otherApplicableCategoryIds")
    primary_category_id: Optional[StrictStr] = Field(default=None, description="The identifier of the leaf category that eBay recommends using to list this product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see <b>otherApplicableCategoryIds</b>.", alias="primaryCategoryId")
    product_web_url: Optional[StrictStr] = Field(default=None, description="The URL for this product's eBay product page.", alias="productWebUrl")
    title: Optional[StrictStr] = Field(default=None, description="The title of this product on eBay.")
    upc: Optional[List[StrictStr]] = Field(default=None, description="A list of Universal Product Codes (UPCs) that identify this product.")
    version: Optional[StrictStr] = Field(default=None, description="The current version number of this product record in the catalog.")
    __properties: ClassVar[List[str]] = ["additionalImages", "aspects", "brand", "description", "ean", "epid", "gtin", "image", "isbn", "mpn", "otherApplicableCategoryIds", "primaryCategoryId", "productWebUrl", "title", "upc", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_images (list)
        _items = []
        if self.additional_images:
            for _item_additional_images in self.additional_images:
                if _item_additional_images:
                    _items.append(_item_additional_images.to_dict())
            _dict['additionalImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in aspects (list)
        _items = []
        if self.aspects:
            for _item_aspects in self.aspects:
                if _item_aspects:
                    _items.append(_item_aspects.to_dict())
            _dict['aspects'] = _items
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalImages": [Image.from_dict(_item) for _item in obj["additionalImages"]] if obj.get("additionalImages") is not None else None,
            "aspects": [Aspect.from_dict(_item) for _item in obj["aspects"]] if obj.get("aspects") is not None else None,
            "brand": obj.get("brand"),
            "description": obj.get("description"),
            "ean": obj.get("ean"),
            "epid": obj.get("epid"),
            "gtin": obj.get("gtin"),
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "isbn": obj.get("isbn"),
            "mpn": obj.get("mpn"),
            "otherApplicableCategoryIds": obj.get("otherApplicableCategoryIds"),
            "primaryCategoryId": obj.get("primaryCategoryId"),
            "productWebUrl": obj.get("productWebUrl"),
            "title": obj.get("title"),
            "upc": obj.get("upc"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Catalog API

    The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.

    The version of the OpenAPI document: v1_beta.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.aspect_distribution import AspectDistribution

class TestAspectDistribution(unittest.TestCase):
    """AspectDistribution unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AspectDistribution:
        """Test AspectDistribution
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AspectDistribution`
        """
        model = AspectDistribution()
        if include_optional:
            return AspectDistribution(
                aspect_value_distributions = [
                    openapi_client.models.aspect_value_distribution.AspectValueDistribution(
                        localized_aspect_value = '', 
                        match_count = 56, 
                        refinement_href = '', )
                    ],
                localized_aspect_name = ''
            )
        else:
            return AspectDistribution(
        )
        """

    def testAspectDistribution(self):
        """Test AspectDistribution"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

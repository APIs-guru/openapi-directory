# coding: utf-8

"""
    Charity API

    The Charity API allows third-party developers to search for and access details on supported charitable organizations.

    The version of the OpenAPI document: v1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image import Image
from openapi_client.models.location import Location
from typing import Optional, Set
from typing_extensions import Self

class CharityOrg(BaseModel):
    """
    The full location, ID, logo and other details of the charity organization.
    """ # noqa: E501
    charity_org_id: Optional[StrictStr] = Field(default=None, description="The ID of the charitable organization.", alias="charityOrgId")
    description: Optional[StrictStr] = Field(default=None, description="The description of the charitable organization.")
    location: Optional[Location] = None
    logo_image: Optional[Image] = Field(default=None, alias="logoImage")
    mission_statement: Optional[StrictStr] = Field(default=None, description="The mission statement of the charitable organization.", alias="missionStatement")
    name: Optional[StrictStr] = Field(default=None, description="The name of the charitable organization.")
    registration_id: Optional[StrictStr] = Field(default=None, description="The registration ID for the charitable organization.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> For the US marketplace, this is the EIN.</span>", alias="registrationId")
    website: Optional[StrictStr] = Field(default=None, description="The link to the website for the charitable organization.")
    __properties: ClassVar[List[str]] = ["charityOrgId", "description", "location", "logoImage", "missionStatement", "name", "registrationId", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CharityOrg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo_image
        if self.logo_image:
            _dict['logoImage'] = self.logo_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CharityOrg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "charityOrgId": obj.get("charityOrgId"),
            "description": obj.get("description"),
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "logoImage": Image.from_dict(obj["logoImage"]) if obj.get("logoImage") is not None else None,
            "missionStatement": obj.get("missionStatement"),
            "name": obj.get("name"),
            "registrationId": obj.get("registrationId"),
            "website": obj.get("website")
        })
        return _obj



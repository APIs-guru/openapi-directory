# coding: utf-8

"""
    Charity API

    The Charity API allows third-party developers to search for and access details on supported charitable organizations.

    The version of the OpenAPI document: v1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.charity_org import CharityOrg
from typing import Optional, Set
from typing_extensions import Self

class CharitySearchResponse(BaseModel):
    """
    A single set of search results, with information for accessing other sets.
    """ # noqa: E501
    charity_orgs: Optional[List[CharityOrg]] = Field(default=None, description="The list of charitable organizations that match the search criteria.", alias="charityOrgs")
    href: Optional[StrictStr] = Field(default=None, description="The relative path to the current set of results.")
    limit: Optional[StrictInt] = Field(default=None, description="The number of items, from the result set, returned in a single page.<br /><br /><b>Valid Values:</b> <code>1-100</code><br /><br /><b>Default:</b> <code>20</code>")
    next: Optional[StrictStr] = Field(default=None, description="The relative path to the next set of results.")
    offset: Optional[StrictInt] = Field(default=None, description="The number of items that will be skipped in the result set. This is used with the <b>limit</b> field to control the pagination of the output.<br /><br />For example, if the <b>offset</b> is set to <code>0</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 1 through 10 from the list of items returned. If the <b>offset</b> is set to <code>10</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 11 through 20 from the list of items returned.<br /><br /><b>Valid Values:</b> <code>0-10,000</code><br /><br /><b>Default:</b> <code>0</code>")
    prev: Optional[StrictStr] = Field(default=None, description="The relative path to the previous set of results.")
    total: Optional[StrictInt] = Field(default=None, description="The total number of matches for the search criteria.")
    __properties: ClassVar[List[str]] = ["charityOrgs", "href", "limit", "next", "offset", "prev", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CharitySearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charity_orgs (list)
        _items = []
        if self.charity_orgs:
            for _item_charity_orgs in self.charity_orgs:
                if _item_charity_orgs:
                    _items.append(_item_charity_orgs.to_dict())
            _dict['charityOrgs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CharitySearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "charityOrgs": [CharityOrg.from_dict(_item) for _item in obj["charityOrgs"]] if obj.get("charityOrgs") is not None else None,
            "href": obj.get("href"),
            "limit": obj.get("limit"),
            "next": obj.get("next"),
            "offset": obj.get("offset"),
            "prev": obj.get("prev"),
            "total": obj.get("total")
        })
        return _obj



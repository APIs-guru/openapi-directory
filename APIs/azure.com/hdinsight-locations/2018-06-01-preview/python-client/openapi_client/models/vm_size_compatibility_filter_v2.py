# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VmSizeCompatibilityFilterV2(BaseModel):
    """
    This class represent a single filter object that defines a multidimensional set. The dimensions of this set are Regions, ClusterFlavors, NodeTypes and ClusterVersions. The constraint should be defined based on the following: FilterMode (Exclude vs Include), VMSizes (the vm sizes in affect of exclusion/inclusion) and the ordering of the Filters. Later filters override previous settings if conflicted.
    """ # noqa: E501
    cluster_flavors: Optional[List[StrictStr]] = Field(default=None, description="The list of cluster flavors under the effect of the filter.", alias="clusterFlavors")
    cluster_versions: Optional[List[StrictStr]] = Field(default=None, description="The list of cluster versions affected in Major.Minor format.", alias="clusterVersions")
    filter_mode: Optional[StrictStr] = Field(default=None, description="The filtering mode. Effectively this can enabling or disabling the VM sizes in a particular set.", alias="filterMode")
    node_types: Optional[List[StrictStr]] = Field(default=None, description="The list of node types affected by the filter.", alias="nodeTypes")
    os_type: Optional[List[StrictStr]] = Field(default=None, description="The OSType affected, Windows or Linux.", alias="osType")
    regions: Optional[List[StrictStr]] = Field(default=None, description="The list of regions under the effect of the filter.")
    vm_sizes: Optional[List[StrictStr]] = Field(default=None, description="The list of virtual machine sizes to include or exclude.", alias="vmSizes")
    __properties: ClassVar[List[str]] = ["clusterFlavors", "clusterVersions", "filterMode", "nodeTypes", "osType", "regions", "vmSizes"]

    @field_validator('filter_mode')
    def filter_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Exclude', 'Include']):
            raise ValueError("must be one of enum values ('Exclude', 'Include')")
        return value

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Windows', 'Linux']):
                raise ValueError("each list item must be one of ('Windows', 'Linux')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmSizeCompatibilityFilterV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmSizeCompatibilityFilterV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterFlavors": obj.get("clusterFlavors"),
            "clusterVersions": obj.get("clusterVersions"),
            "filterMode": obj.get("filterMode"),
            "nodeTypes": obj.get("nodeTypes"),
            "osType": obj.get("osType"),
            "regions": obj.get("regions"),
            "vmSizes": obj.get("vmSizes")
        })
        return _obj



# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.quota_capability import QuotaCapability
from openapi_client.models.regions_capability import RegionsCapability
from openapi_client.models.versions_capability import VersionsCapability
from openapi_client.models.vm_size_compatibility_filter import VmSizeCompatibilityFilter
from openapi_client.models.vm_sizes_capability import VmSizesCapability
from typing import Optional, Set
from typing_extensions import Self

class CapabilitiesResult(BaseModel):
    """
    The Get Capabilities operation response.
    """ # noqa: E501
    features: Optional[List[StrictStr]] = Field(default=None, description="The capability features.")
    quota: Optional[QuotaCapability] = None
    regions: Optional[Dict[str, RegionsCapability]] = Field(default=None, description="The virtual machine size compatibility features.")
    versions: Optional[Dict[str, VersionsCapability]] = Field(default=None, description="The version capability.")
    vm_size_filters: Optional[List[VmSizeCompatibilityFilter]] = Field(default=None, description="The virtual machine size compatibility filters.", alias="vmSize_filters")
    vm_sizes: Optional[Dict[str, VmSizesCapability]] = Field(default=None, description="The virtual machine sizes.", alias="vmSizes")
    __properties: ClassVar[List[str]] = ["features", "quota", "regions", "versions", "vmSize_filters", "vmSizes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CapabilitiesResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in regions (dict)
        _field_dict = {}
        if self.regions:
            for _key_regions in self.regions:
                if self.regions[_key_regions]:
                    _field_dict[_key_regions] = self.regions[_key_regions].to_dict()
            _dict['regions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in versions (dict)
        _field_dict = {}
        if self.versions:
            for _key_versions in self.versions:
                if self.versions[_key_versions]:
                    _field_dict[_key_versions] = self.versions[_key_versions].to_dict()
            _dict['versions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in vm_size_filters (list)
        _items = []
        if self.vm_size_filters:
            for _item_vm_size_filters in self.vm_size_filters:
                if _item_vm_size_filters:
                    _items.append(_item_vm_size_filters.to_dict())
            _dict['vmSize_filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in vm_sizes (dict)
        _field_dict = {}
        if self.vm_sizes:
            for _key_vm_sizes in self.vm_sizes:
                if self.vm_sizes[_key_vm_sizes]:
                    _field_dict[_key_vm_sizes] = self.vm_sizes[_key_vm_sizes].to_dict()
            _dict['vmSizes'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CapabilitiesResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "features": obj.get("features"),
            "quota": QuotaCapability.from_dict(obj["quota"]) if obj.get("quota") is not None else None,
            "regions": dict(
                (_k, RegionsCapability.from_dict(_v))
                for _k, _v in obj["regions"].items()
            )
            if obj.get("regions") is not None
            else None,
            "versions": dict(
                (_k, VersionsCapability.from_dict(_v))
                for _k, _v in obj["versions"].items()
            )
            if obj.get("versions") is not None
            else None,
            "vmSize_filters": [VmSizeCompatibilityFilter.from_dict(_item) for _item in obj["vmSize_filters"]] if obj.get("vmSize_filters") is not None else None,
            "vmSizes": dict(
                (_k, VmSizesCapability.from_dict(_v))
                for _k, _v in obj["vmSizes"].items()
            )
            if obj.get("vmSizes") is not None
            else None
        })
        return _obj



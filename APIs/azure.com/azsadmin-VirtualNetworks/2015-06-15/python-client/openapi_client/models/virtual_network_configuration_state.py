# coding: utf-8

"""
    NetworkAdminManagementClient

    Virtual Network admin operation endpoints and objects.

    The version of the OpenAPI document: 2015-06-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.virtual_network_configuration_status import VirtualNetworkConfigurationStatus
from typing import Optional, Set
from typing_extensions import Self

class VirtualNetworkConfigurationState(BaseModel):
    """
    The virtual network configuration state.
    """ # noqa: E501
    host_errors: Optional[List[VirtualNetworkConfigurationStatus]] = Field(default=None, description="List of NIC errors associated with the resource.", alias="hostErrors")
    last_updated_time: Optional[datetime] = Field(default=None, description="Last updated time for the running state.", alias="lastUpdatedTime")
    status: Optional[StrictStr] = Field(default=None, description="The virtual network status.")
    virtual_network_interface_errors: Optional[List[VirtualNetworkConfigurationStatus]] = Field(default=None, description="List of NIC errors associated with the resource.", alias="virtualNetworkInterfaceErrors")
    __properties: ClassVar[List[str]] = ["hostErrors", "lastUpdatedTime", "status", "virtualNetworkInterfaceErrors"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Failure', 'Warning', 'Success', 'Uninitialized', 'InProgress', 'Unknown']):
            raise ValueError("must be one of enum values ('Failure', 'Warning', 'Success', 'Uninitialized', 'InProgress', 'Unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualNetworkConfigurationState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_updated_time",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in host_errors (list)
        _items = []
        if self.host_errors:
            for _item_host_errors in self.host_errors:
                if _item_host_errors:
                    _items.append(_item_host_errors.to_dict())
            _dict['hostErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_network_interface_errors (list)
        _items = []
        if self.virtual_network_interface_errors:
            for _item_virtual_network_interface_errors in self.virtual_network_interface_errors:
                if _item_virtual_network_interface_errors:
                    _items.append(_item_virtual_network_interface_errors.to_dict())
            _dict['virtualNetworkInterfaceErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualNetworkConfigurationState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostErrors": [VirtualNetworkConfigurationStatus.from_dict(_item) for _item in obj["hostErrors"]] if obj.get("hostErrors") is not None else None,
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "status": obj.get("status"),
            "virtualNetworkInterfaceErrors": [VirtualNetworkConfigurationStatus.from_dict(_item) for _item in obj["virtualNetworkInterfaceErrors"]] if obj.get("virtualNetworkInterfaceErrors") is not None else None
        })
        return _obj



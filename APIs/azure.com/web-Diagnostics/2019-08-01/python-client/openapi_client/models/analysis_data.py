# coding: utf-8

"""
    Diagnostics API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analysis_data_data_inner_inner import AnalysisDataDataInnerInner
from openapi_client.models.detector_definition import DetectorDefinition
from openapi_client.models.diagnostic_metric_set import DiagnosticMetricSet
from openapi_client.models.response_meta_data import ResponseMetaData
from typing import Optional, Set
from typing_extensions import Self

class AnalysisData(BaseModel):
    """
    Class Representing Detector Evidence used for analysis
    """ # noqa: E501
    data: Optional[List[List[AnalysisDataDataInnerInner]]] = Field(default=None, description="Additional Source Data")
    detector_definition: Optional[DetectorDefinition] = Field(default=None, alias="detectorDefinition")
    detector_meta_data: Optional[ResponseMetaData] = Field(default=None, alias="detectorMetaData")
    metrics: Optional[List[DiagnosticMetricSet]] = Field(default=None, description="Source Metrics")
    source: Optional[StrictStr] = Field(default=None, description="Name of the Detector")
    __properties: ClassVar[List[str]] = ["data", "detectorDefinition", "detectorMetaData", "metrics", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list of list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_data if _inner_item is not None]
                    )
            _dict['data'] = _items
        # override the default output from pydantic by calling `to_dict()` of detector_definition
        if self.detector_definition:
            _dict['detectorDefinition'] = self.detector_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detector_meta_data
        if self.detector_meta_data:
            _dict['detectorMetaData'] = self.detector_meta_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": [
                    [AnalysisDataDataInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["data"]
                ] if obj.get("data") is not None else None,
            "detectorDefinition": DetectorDefinition.from_dict(obj["detectorDefinition"]) if obj.get("detectorDefinition") is not None else None,
            "detectorMetaData": ResponseMetaData.from_dict(obj["detectorMetaData"]) if obj.get("detectorMetaData") is not None else None,
            "metrics": [DiagnosticMetricSet.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "source": obj.get("source")
        })
        return _obj



# coding: utf-8

"""
    Diagnostics API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.abnormal_time_period import AbnormalTimePeriod

class TestAbnormalTimePeriod(unittest.TestCase):
    """AbnormalTimePeriod unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AbnormalTimePeriod:
        """Test AbnormalTimePeriod
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AbnormalTimePeriod`
        """
        model = AbnormalTimePeriod()
        if include_optional:
            return AbnormalTimePeriod(
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                events = [
                    openapi_client.models.detector_abnormal_time_period.DetectorAbnormalTimePeriod(
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        message = '', 
                        meta_data = [
                            [
                                openapi_client.models.analysis_data_data_inner_inner.AnalysisData_data_inner_inner(
                                    name = '', 
                                    value = '', )
                                ]
                            ], 
                        priority = 1.337, 
                        solutions = [
                            openapi_client.models.solution.Solution(
                                data = [
                                    [
                                        openapi_client.models.analysis_data_data_inner_inner.AnalysisData_data_inner_inner(
                                            name = '', 
                                            value = '', )
                                        ]
                                    ], 
                                description = '', 
                                display_name = '', 
                                id = 1.337, 
                                metadata = [
                                    [
                                        
                                        ]
                                    ], 
                                order = 1.337, 
                                type = 'QuickSolution', )
                            ], 
                        source = '', 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        type = 'ServiceIncident', )
                    ],
                solutions = [
                    openapi_client.models.solution.Solution(
                        data = [
                            [
                                openapi_client.models.analysis_data_data_inner_inner.AnalysisData_data_inner_inner(
                                    name = '', 
                                    value = '', )
                                ]
                            ], 
                        description = '', 
                        display_name = '', 
                        id = 1.337, 
                        metadata = [
                            [
                                openapi_client.models.analysis_data_data_inner_inner.AnalysisData_data_inner_inner(
                                    name = '', 
                                    value = '', )
                                ]
                            ], 
                        order = 1.337, 
                        type = 'QuickSolution', )
                    ],
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return AbnormalTimePeriod(
        )
        """

    def testAbnormalTimePeriod(self):
        """Test AbnormalTimePeriod"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

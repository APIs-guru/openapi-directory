# coding: utf-8

"""
    Diagnostics API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DiagnosticMetricSample(BaseModel):
    """
    Class representing Diagnostic Metric
    """ # noqa: E501
    is_aggregated: Optional[StrictBool] = Field(default=None, description="Whether the values are aggregates across all workers or not", alias="isAggregated")
    maximum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum of the metric sampled during the time period")
    minimum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum of the metric sampled during the time period")
    role_instance: Optional[StrictStr] = Field(default=None, description="Role Instance. Null if this counter is not per instance  This is returned and should be whichever instance name we desire to be returned i.e. CPU and Memory return RDWORKERNAME (LargeDed..._IN_0)  where RDWORKERNAME is Machine name below and RoleInstance name in parenthesis", alias="roleInstance")
    timestamp: Optional[datetime] = Field(default=None, description="Time at which metric is measured")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total value of the metric. If multiple measurements are made this will have sum of all.")
    __properties: ClassVar[List[str]] = ["isAggregated", "maximum", "minimum", "roleInstance", "timestamp", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiagnosticMetricSample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiagnosticMetricSample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isAggregated": obj.get("isAggregated"),
            "maximum": obj.get("maximum"),
            "minimum": obj.get("minimum"),
            "roleInstance": obj.get("roleInstance"),
            "timestamp": obj.get("timestamp"),
            "total": obj.get("total")
        })
        return _obj



# coding: utf-8

"""
    Diagnostics API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.analysis_data_data_inner_inner import AnalysisDataDataInnerInner
from typing import Optional, Set
from typing_extensions import Self

class Solution(BaseModel):
    """
    Class Representing Solution for problems detected.
    """ # noqa: E501
    data: Optional[List[List[AnalysisDataDataInnerInner]]] = Field(default=None, description="Solution Data.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the solution")
    display_name: Optional[StrictStr] = Field(default=None, description="Display Name of the solution", alias="displayName")
    id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Solution Id.")
    metadata: Optional[List[List[AnalysisDataDataInnerInner]]] = Field(default=None, description="Solution Metadata.")
    order: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Order of the solution.")
    type: Optional[StrictStr] = Field(default=None, description="Type of Solution")
    __properties: ClassVar[List[str]] = ["data", "description", "displayName", "id", "metadata", "order", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['QuickSolution', 'DeepInvestigation', 'BestPractices']):
            raise ValueError("must be one of enum values ('QuickSolution', 'DeepInvestigation', 'BestPractices')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Solution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list of list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_data if _inner_item is not None]
                    )
            _dict['data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list of list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_metadata if _inner_item is not None]
                    )
            _dict['metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Solution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": [
                    [AnalysisDataDataInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["data"]
                ] if obj.get("data") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "metadata": [
                    [AnalysisDataDataInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["metadata"]
                ] if obj.get("metadata") is not None else None,
            "order": obj.get("order"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_whitelisting_group import AppWhitelistingGroup

class TestAppWhitelistingGroup(unittest.TestCase):
    """AppWhitelistingGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppWhitelistingGroup:
        """Test AppWhitelistingGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppWhitelistingGroup`
        """
        model = AppWhitelistingGroup()
        if include_optional:
            return AppWhitelistingGroup(
                properties = openapi_client.models.app_whitelisting_group_data.AppWhitelistingGroupData(
                    configuration_status = 'Configured', 
                    enforcement_mode = 'Audit', 
                    issues = [
                        openapi_client.models.app_whitelisting_issue_summary.AppWhitelistingIssueSummary(
                            issue = 'ViolationsAudited', 
                            number_of_vms = 1.337, )
                        ], 
                    path_recommendations = [
                        openapi_client.models.path_recommendation.PathRecommendation(
                            action = 'Recommended', 
                            common = True, 
                            file_type = 'Exe', 
                            path = 'C:\Windows\System32\calc.exe', 
                            publisher_info = openapi_client.models.publisher_info.PublisherInfo(
                                binary_name = 'CHROME.EXE', 
                                product_name = 'GOOGLE CHROME', 
                                publisher_name = 'O=GOOGLE INC, L=MOUNTAIN VIEW, S=CALIFORNIA, C=US', 
                                version = '66.0.3359.139', ), 
                            type = 'File', 
                            user_sids = [
                                'S-1-5-18'
                                ], 
                            usernames = [
                                openapi_client.models.user_recommendation.UserRecommendation(
                                    recommendation_action = 'Recommended', 
                                    username = 'LOCAL SYSTEM', )
                                ], )
                        ], 
                    protection_mode = openapi_client.models.protection_mode.ProtectionMode(
                        exe = 'Audit', 
                        executable = 'Audit', 
                        msi = 'Audit', 
                        script = 'Audit', ), 
                    recommendation_status = 'Recommended', 
                    source_system = 'Azure_AppLocker', 
                    vm_recommendations = [
                        openapi_client.models.vm_recommendation.VmRecommendation(
                            resource_id = '/subscriptions/12345678-1234-1234-1234-123456789123/resourcegroups/group/providers/microsoft.compute/virtualmachines/vm', )
                        ], ),
                id = '',
                name = '',
                type = '',
                location = ''
            )
        else:
            return AppWhitelistingGroup(
                properties = openapi_client.models.app_whitelisting_group_data.AppWhitelistingGroupData(
                    configuration_status = 'Configured', 
                    enforcement_mode = 'Audit', 
                    issues = [
                        openapi_client.models.app_whitelisting_issue_summary.AppWhitelistingIssueSummary(
                            issue = 'ViolationsAudited', 
                            number_of_vms = 1.337, )
                        ], 
                    path_recommendations = [
                        openapi_client.models.path_recommendation.PathRecommendation(
                            action = 'Recommended', 
                            common = True, 
                            file_type = 'Exe', 
                            path = 'C:\Windows\System32\calc.exe', 
                            publisher_info = openapi_client.models.publisher_info.PublisherInfo(
                                binary_name = 'CHROME.EXE', 
                                product_name = 'GOOGLE CHROME', 
                                publisher_name = 'O=GOOGLE INC, L=MOUNTAIN VIEW, S=CALIFORNIA, C=US', 
                                version = '66.0.3359.139', ), 
                            type = 'File', 
                            user_sids = [
                                'S-1-5-18'
                                ], 
                            usernames = [
                                openapi_client.models.user_recommendation.UserRecommendation(
                                    recommendation_action = 'Recommended', 
                                    username = 'LOCAL SYSTEM', )
                                ], )
                        ], 
                    protection_mode = openapi_client.models.protection_mode.ProtectionMode(
                        exe = 'Audit', 
                        executable = 'Audit', 
                        msi = 'Audit', 
                        script = 'Audit', ), 
                    recommendation_status = 'Recommended', 
                    source_system = 'Azure_AppLocker', 
                    vm_recommendations = [
                        openapi_client.models.vm_recommendation.VmRecommendation(
                            resource_id = '/subscriptions/12345678-1234-1234-1234-123456789123/resourcegroups/group/providers/microsoft.compute/virtualmachines/vm', )
                        ], ),
        )
        """

    def testAppWhitelistingGroup(self):
        """Test AppWhitelistingGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

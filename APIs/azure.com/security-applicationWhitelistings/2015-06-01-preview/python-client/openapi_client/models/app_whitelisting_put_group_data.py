# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enforcement_mode import EnforcementMode
from openapi_client.models.path_recommendation import PathRecommendation
from openapi_client.models.protection_mode import ProtectionMode
from openapi_client.models.vm_recommendation import VmRecommendation
from typing import Optional, Set
from typing_extensions import Self

class AppWhitelistingPutGroupData(BaseModel):
    """
    The altered data of the recommended VM/server group policy
    """ # noqa: E501
    enforcement_mode: Optional[EnforcementMode] = Field(default=None, alias="enforcementMode")
    path_recommendations: Optional[List[PathRecommendation]] = Field(default=None, alias="pathRecommendations")
    protection_mode: Optional[ProtectionMode] = Field(default=None, alias="protectionMode")
    vm_recommendations: Optional[List[VmRecommendation]] = Field(default=None, alias="vmRecommendations")
    __properties: ClassVar[List[str]] = ["enforcementMode", "pathRecommendations", "protectionMode", "vmRecommendations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppWhitelistingPutGroupData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in path_recommendations (list)
        _items = []
        if self.path_recommendations:
            for _item_path_recommendations in self.path_recommendations:
                if _item_path_recommendations:
                    _items.append(_item_path_recommendations.to_dict())
            _dict['pathRecommendations'] = _items
        # override the default output from pydantic by calling `to_dict()` of protection_mode
        if self.protection_mode:
            _dict['protectionMode'] = self.protection_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vm_recommendations (list)
        _items = []
        if self.vm_recommendations:
            for _item_vm_recommendations in self.vm_recommendations:
                if _item_vm_recommendations:
                    _items.append(_item_vm_recommendations.to_dict())
            _dict['vmRecommendations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppWhitelistingPutGroupData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enforcementMode": obj.get("enforcementMode"),
            "pathRecommendations": [PathRecommendation.from_dict(_item) for _item in obj["pathRecommendations"]] if obj.get("pathRecommendations") is not None else None,
            "protectionMode": ProtectionMode.from_dict(obj["protectionMode"]) if obj.get("protectionMode") is not None else None,
            "vmRecommendations": [VmRecommendation.from_dict(_item) for _item in obj["vmRecommendations"]] if obj.get("vmRecommendations") is not None else None
        })
        return _obj



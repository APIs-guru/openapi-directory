# coding: utf-8

"""
    LUIS Runtime Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.luis_result import LuisResult

class TestLuisResult(unittest.TestCase):
    """LuisResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LuisResult:
        """Test LuisResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LuisResult`
        """
        model = LuisResult()
        if include_optional:
            return LuisResult(
                altered_query = '',
                composite_entities = [
                    openapi_client.models.composite_entity_model.CompositeEntityModel(
                        children = [
                            openapi_client.models.composite_child_model.CompositeChildModel(
                                type = '', 
                                value = '', )
                            ], 
                        parent_type = '', 
                        value = '', )
                    ],
                connected_service_result = openapi_client.models.luis_result.LuisResult(
                    altered_query = '', 
                    composite_entities = [
                        openapi_client.models.composite_entity_model.CompositeEntityModel(
                            children = [
                                openapi_client.models.composite_child_model.CompositeChildModel(
                                    type = '', 
                                    value = '', )
                                ], 
                            parent_type = '', 
                            value = '', )
                        ], 
                    connected_service_result = openapi_client.models.luis_result.LuisResult(
                        altered_query = '', 
                        entities = [
                            {
                                'key' : None
                                }
                            ], 
                        intents = [
                            openapi_client.models.intent_model.IntentModel(
                                intent = '', 
                                score = 0, )
                            ], 
                        query = '', 
                        sentiment_analysis = openapi_client.models.sentiment.Sentiment(
                            label = '', 
                            score = 1.337, ), 
                        top_scoring_intent = openapi_client.models.intent_model.IntentModel(
                            intent = '', 
                            score = 0, ), ), 
                    entities = [
                        {
                            'key' : None
                            }
                        ], 
                    intents = [
                        
                        ], 
                    query = '', 
                    sentiment_analysis = openapi_client.models.sentiment.Sentiment(
                        label = '', 
                        score = 1.337, ), 
                    top_scoring_intent = , ),
                entities = [
                    {
                        'key' : None
                        }
                    ],
                intents = [
                    openapi_client.models.intent_model.IntentModel(
                        intent = '', 
                        score = 0, )
                    ],
                query = '',
                sentiment_analysis = openapi_client.models.sentiment.Sentiment(
                    label = '', 
                    score = 1.337, ),
                top_scoring_intent = openapi_client.models.intent_model.IntentModel(
                    intent = '', 
                    score = 0, )
            )
        else:
            return LuisResult(
        )
        """

    def testLuisResult(self):
        """Test LuisResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

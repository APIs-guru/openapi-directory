# coding: utf-8

"""
    LUIS Runtime Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.prediction_request import PredictionRequest
from openapi_client.models.prediction_response import PredictionResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def prediction_get_slot_prediction(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        slot_name: Annotated[StrictStr, Field(description="The application slot name.")],
        prediction_request: Annotated[PredictionRequest, Field(description="The prediction request parameters.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PredictionResponse:
        """prediction_get_slot_prediction

        Gets the predictions for an application slot.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param slot_name: The application slot name. (required)
        :type slot_name: str
        :param prediction_request: The prediction request parameters. (required)
        :type prediction_request: PredictionRequest
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_slot_prediction_serialize(
            app_id=app_id,
            slot_name=slot_name,
            prediction_request=prediction_request,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def prediction_get_slot_prediction_with_http_info(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        slot_name: Annotated[StrictStr, Field(description="The application slot name.")],
        prediction_request: Annotated[PredictionRequest, Field(description="The prediction request parameters.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PredictionResponse]:
        """prediction_get_slot_prediction

        Gets the predictions for an application slot.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param slot_name: The application slot name. (required)
        :type slot_name: str
        :param prediction_request: The prediction request parameters. (required)
        :type prediction_request: PredictionRequest
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_slot_prediction_serialize(
            app_id=app_id,
            slot_name=slot_name,
            prediction_request=prediction_request,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def prediction_get_slot_prediction_without_preload_content(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        slot_name: Annotated[StrictStr, Field(description="The application slot name.")],
        prediction_request: Annotated[PredictionRequest, Field(description="The prediction request parameters.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """prediction_get_slot_prediction

        Gets the predictions for an application slot.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param slot_name: The application slot name. (required)
        :type slot_name: str
        :param prediction_request: The prediction request parameters. (required)
        :type prediction_request: PredictionRequest
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_slot_prediction_serialize(
            app_id=app_id,
            slot_name=slot_name,
            prediction_request=prediction_request,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _prediction_get_slot_prediction_serialize(
        self,
        app_id,
        slot_name,
        prediction_request,
        verbose,
        show_all_intents,
        log,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if slot_name is not None:
            _path_params['slotName'] = slot_name
        # process the query parameters
        if verbose is not None:
            
            _query_params.append(('verbose', verbose))
            
        if show_all_intents is not None:
            
            _query_params.append(('show-all-intents', show_all_intents))
            
        if log is not None:
            
            _query_params.append(('log', log))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prediction_request is not None:
            _body_params = prediction_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/apps/{appId}/slots/{slotName}/predict',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def prediction_get_slot_prediction_get(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        slot_name: Annotated[StrictStr, Field(description="The application slot name.")],
        query: Annotated[StrictStr, Field(description="The query to predict.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PredictionResponse:
        """prediction_get_slot_prediction_get

        Gets the predictions for an application slot.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param slot_name: The application slot name. (required)
        :type slot_name: str
        :param query: The query to predict. (required)
        :type query: str
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_slot_prediction_get_serialize(
            app_id=app_id,
            slot_name=slot_name,
            query=query,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def prediction_get_slot_prediction_get_with_http_info(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        slot_name: Annotated[StrictStr, Field(description="The application slot name.")],
        query: Annotated[StrictStr, Field(description="The query to predict.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PredictionResponse]:
        """prediction_get_slot_prediction_get

        Gets the predictions for an application slot.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param slot_name: The application slot name. (required)
        :type slot_name: str
        :param query: The query to predict. (required)
        :type query: str
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_slot_prediction_get_serialize(
            app_id=app_id,
            slot_name=slot_name,
            query=query,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def prediction_get_slot_prediction_get_without_preload_content(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        slot_name: Annotated[StrictStr, Field(description="The application slot name.")],
        query: Annotated[StrictStr, Field(description="The query to predict.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """prediction_get_slot_prediction_get

        Gets the predictions for an application slot.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param slot_name: The application slot name. (required)
        :type slot_name: str
        :param query: The query to predict. (required)
        :type query: str
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_slot_prediction_get_serialize(
            app_id=app_id,
            slot_name=slot_name,
            query=query,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _prediction_get_slot_prediction_get_serialize(
        self,
        app_id,
        slot_name,
        query,
        verbose,
        show_all_intents,
        log,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if slot_name is not None:
            _path_params['slotName'] = slot_name
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if verbose is not None:
            
            _query_params.append(('verbose', verbose))
            
        if show_all_intents is not None:
            
            _query_params.append(('show-all-intents', show_all_intents))
            
        if log is not None:
            
            _query_params.append(('log', log))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/apps/{appId}/slots/{slotName}/predict',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def prediction_get_version_prediction(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        version_id: Annotated[StrictStr, Field(description="The application version ID.")],
        prediction_request: Annotated[PredictionRequest, Field(description="The prediction request parameters.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PredictionResponse:
        """prediction_get_version_prediction

        Gets the predictions for an application version.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param version_id: The application version ID. (required)
        :type version_id: str
        :param prediction_request: The prediction request parameters. (required)
        :type prediction_request: PredictionRequest
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_version_prediction_serialize(
            app_id=app_id,
            version_id=version_id,
            prediction_request=prediction_request,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def prediction_get_version_prediction_with_http_info(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        version_id: Annotated[StrictStr, Field(description="The application version ID.")],
        prediction_request: Annotated[PredictionRequest, Field(description="The prediction request parameters.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PredictionResponse]:
        """prediction_get_version_prediction

        Gets the predictions for an application version.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param version_id: The application version ID. (required)
        :type version_id: str
        :param prediction_request: The prediction request parameters. (required)
        :type prediction_request: PredictionRequest
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_version_prediction_serialize(
            app_id=app_id,
            version_id=version_id,
            prediction_request=prediction_request,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def prediction_get_version_prediction_without_preload_content(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        version_id: Annotated[StrictStr, Field(description="The application version ID.")],
        prediction_request: Annotated[PredictionRequest, Field(description="The prediction request parameters.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """prediction_get_version_prediction

        Gets the predictions for an application version.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param version_id: The application version ID. (required)
        :type version_id: str
        :param prediction_request: The prediction request parameters. (required)
        :type prediction_request: PredictionRequest
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_version_prediction_serialize(
            app_id=app_id,
            version_id=version_id,
            prediction_request=prediction_request,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _prediction_get_version_prediction_serialize(
        self,
        app_id,
        version_id,
        prediction_request,
        verbose,
        show_all_intents,
        log,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if version_id is not None:
            _path_params['versionId'] = version_id
        # process the query parameters
        if verbose is not None:
            
            _query_params.append(('verbose', verbose))
            
        if show_all_intents is not None:
            
            _query_params.append(('show-all-intents', show_all_intents))
            
        if log is not None:
            
            _query_params.append(('log', log))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prediction_request is not None:
            _body_params = prediction_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/apps/{appId}/versions/{versionId}/predict',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def prediction_get_version_prediction_get(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        version_id: Annotated[StrictStr, Field(description="The application version ID.")],
        query: Annotated[StrictStr, Field(description="The query to predict.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PredictionResponse:
        """prediction_get_version_prediction_get

        Gets the predictions for an application version.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param version_id: The application version ID. (required)
        :type version_id: str
        :param query: The query to predict. (required)
        :type query: str
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_version_prediction_get_serialize(
            app_id=app_id,
            version_id=version_id,
            query=query,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def prediction_get_version_prediction_get_with_http_info(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        version_id: Annotated[StrictStr, Field(description="The application version ID.")],
        query: Annotated[StrictStr, Field(description="The query to predict.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PredictionResponse]:
        """prediction_get_version_prediction_get

        Gets the predictions for an application version.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param version_id: The application version ID. (required)
        :type version_id: str
        :param query: The query to predict. (required)
        :type query: str
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_version_prediction_get_serialize(
            app_id=app_id,
            version_id=version_id,
            query=query,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def prediction_get_version_prediction_get_without_preload_content(
        self,
        app_id: Annotated[StrictStr, Field(description="The application ID.")],
        version_id: Annotated[StrictStr, Field(description="The application version ID.")],
        query: Annotated[StrictStr, Field(description="The query to predict.")],
        verbose: Annotated[Optional[StrictBool], Field(description="Indicates whether to get extra metadata for the entities predictions or not.")] = None,
        show_all_intents: Annotated[Optional[StrictBool], Field(description="Indicates whether to return all the intents in the response or just the top intent.")] = None,
        log: Annotated[Optional[StrictBool], Field(description="Indicates whether to log the endpoint query or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """prediction_get_version_prediction_get

        Gets the predictions for an application version.

        :param app_id: The application ID. (required)
        :type app_id: str
        :param version_id: The application version ID. (required)
        :type version_id: str
        :param query: The query to predict. (required)
        :type query: str
        :param verbose: Indicates whether to get extra metadata for the entities predictions or not.
        :type verbose: bool
        :param show_all_intents: Indicates whether to return all the intents in the response or just the top intent.
        :type show_all_intents: bool
        :param log: Indicates whether to log the endpoint query or not.
        :type log: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_get_version_prediction_get_serialize(
            app_id=app_id,
            version_id=version_id,
            query=query,
            verbose=verbose,
            show_all_intents=show_all_intents,
            log=log,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _prediction_get_version_prediction_get_serialize(
        self,
        app_id,
        version_id,
        query,
        verbose,
        show_all_intents,
        log,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if version_id is not None:
            _path_params['versionId'] = version_id
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if verbose is not None:
            
            _query_params.append(('verbose', verbose))
            
        if show_all_intents is not None:
            
            _query_params.append(('show-all-intents', show_all_intents))
            
        if log is not None:
            
            _query_params.append(('log', log))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/apps/{appId}/versions/{versionId}/predict',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



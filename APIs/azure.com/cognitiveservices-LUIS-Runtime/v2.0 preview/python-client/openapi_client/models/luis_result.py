# coding: utf-8

"""
    Language Understanding Intelligent Service (LUIS) Endpoint API for running predictions and extracting user intentions and entities from utterances.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0 preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.composite_entity_model import CompositeEntityModel
from openapi_client.models.entity_model import EntityModel
from openapi_client.models.intent_model import IntentModel
from openapi_client.models.sentiment import Sentiment
from typing import Optional, Set
from typing_extensions import Self

class LuisResult(BaseModel):
    """
    Prediction, based on the input query, containing intent(s) and entities.
    """ # noqa: E501
    altered_query: Optional[StrictStr] = Field(default=None, description="The corrected utterance (when spell checking was enabled).", alias="alteredQuery")
    composite_entities: Optional[List[CompositeEntityModel]] = Field(default=None, description="The composite entities extracted from the utterance.", alias="compositeEntities")
    entities: Optional[List[EntityModel]] = Field(default=None, description="The entities extracted from the utterance.")
    intents: Optional[List[IntentModel]] = Field(default=None, description="All the intents (and their score) that were detected from utterance.")
    query: Optional[StrictStr] = Field(default=None, description="The input utterance that was analized.")
    sentiment_analysis: Optional[Sentiment] = Field(default=None, alias="sentimentAnalysis")
    top_scoring_intent: Optional[IntentModel] = Field(default=None, alias="topScoringIntent")
    __properties: ClassVar[List[str]] = ["alteredQuery", "compositeEntities", "entities", "intents", "query", "sentimentAnalysis", "topScoringIntent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LuisResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in composite_entities (list)
        _items = []
        if self.composite_entities:
            for _item_composite_entities in self.composite_entities:
                if _item_composite_entities:
                    _items.append(_item_composite_entities.to_dict())
            _dict['compositeEntities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in intents (list)
        _items = []
        if self.intents:
            for _item_intents in self.intents:
                if _item_intents:
                    _items.append(_item_intents.to_dict())
            _dict['intents'] = _items
        # override the default output from pydantic by calling `to_dict()` of sentiment_analysis
        if self.sentiment_analysis:
            _dict['sentimentAnalysis'] = self.sentiment_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of top_scoring_intent
        if self.top_scoring_intent:
            _dict['topScoringIntent'] = self.top_scoring_intent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LuisResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alteredQuery": obj.get("alteredQuery"),
            "compositeEntities": [CompositeEntityModel.from_dict(_item) for _item in obj["compositeEntities"]] if obj.get("compositeEntities") is not None else None,
            "entities": [EntityModel.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "intents": [IntentModel.from_dict(_item) for _item in obj["intents"]] if obj.get("intents") is not None else None,
            "query": obj.get("query"),
            "sentimentAnalysis": Sentiment.from_dict(obj["sentimentAnalysis"]) if obj.get("sentimentAnalysis") is not None else None,
            "topScoringIntent": IntentModel.from_dict(obj["topScoringIntent"]) if obj.get("topScoringIntent") is not None else None
        })
        return _obj



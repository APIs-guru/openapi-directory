# coding: utf-8

"""
    FabricAdminClient

    Scale unit node operation endpoints and objects.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BareMetalNodeDescription(BaseModel):
    """
    Description of a bare metal node used for ScaleOut operation on a cluster.
    """ # noqa: E501
    bios_version: Optional[StrictStr] = Field(default=None, description="Bios version of the physical machine.", alias="biosVersion")
    bmc_ipv4_address: Optional[StrictStr] = Field(default=None, description="BMC address of the physical machine.", alias="bmcIpv4Address")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Name of the cluster.", alias="clusterName")
    computer_name: Optional[StrictStr] = Field(default=None, description="Name of the computer.", alias="computerName")
    mac_address: Optional[StrictStr] = Field(default=None, description="Name of the MAC address of the bare metal node.", alias="macAddress")
    model: Optional[StrictStr] = Field(default=None, description="Model of the physical machine.")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the physical machine.", alias="serialNumber")
    vendor: Optional[StrictStr] = Field(default=None, description="Vendor of the physical machine.")
    __properties: ClassVar[List[str]] = ["biosVersion", "bmcIpv4Address", "clusterName", "computerName", "macAddress", "model", "serialNumber", "vendor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BareMetalNodeDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BareMetalNodeDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biosVersion": obj.get("biosVersion"),
            "bmcIpv4Address": obj.get("bmcIpv4Address"),
            "clusterName": obj.get("clusterName"),
            "computerName": obj.get("computerName"),
            "macAddress": obj.get("macAddress"),
            "model": obj.get("model"),
            "serialNumber": obj.get("serialNumber"),
            "vendor": obj.get("vendor")
        })
        return _obj



# coding: utf-8

"""
    FabricAdminClient

    Scale unit node operation endpoints and objects.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.scale_unit_node_model_capacity import ScaleUnitNodeModelCapacity
from typing import Optional, Set
from typing_extensions import Self

class ScaleUnitNodeModel(BaseModel):
    """
    Holds all properties related to a scale unit node.
    """ # noqa: E501
    bios_version: Optional[StrictStr] = Field(default=None, description="BIOS version of the physical machine.", alias="biosVersion")
    bmc_address: Optional[StrictStr] = Field(default=None, description="BMC address of the physical machine.", alias="bmcAddress")
    can_power_off: Optional[StrictBool] = Field(default=None, description="Value indicating whether the node can be powered off.", alias="canPowerOff")
    capacity: Optional[ScaleUnitNodeModelCapacity] = None
    model: Optional[StrictStr] = Field(default=None, description="Model of the physical machine.")
    power_state: Optional[StrictStr] = Field(default=None, description="PowerState of the physical machine.", alias="powerState")
    scale_unit_name: Optional[StrictStr] = Field(default=None, description="Cluster name of the physical machine.", alias="scaleUnitName")
    scale_unit_node_status: Optional[StrictStr] = Field(default=None, description="Status of the physical machine.", alias="scaleUnitNodeStatus")
    scale_unit_uri: Optional[StrictStr] = Field(default=None, description="URI of the corresponding cluster.", alias="scaleUnitUri")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the physical machine.", alias="serialNumber")
    vendor: Optional[StrictStr] = Field(default=None, description="Vendor of the physical machine.")
    __properties: ClassVar[List[str]] = ["biosVersion", "bmcAddress", "canPowerOff", "capacity", "model", "powerState", "scaleUnitName", "scaleUnitNodeStatus", "scaleUnitUri", "serialNumber", "vendor"]

    @field_validator('power_state')
    def power_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Stopped', 'Starting', 'Running', 'Stopping']):
            raise ValueError("must be one of enum values ('Stopped', 'Starting', 'Running', 'Stopping')")
        return value

    @field_validator('scale_unit_node_status')
    def scale_unit_node_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Running', 'Maintenance', 'Stopped']):
            raise ValueError("must be one of enum values ('Running', 'Maintenance', 'Stopped')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScaleUnitNodeModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capacity
        if self.capacity:
            _dict['capacity'] = self.capacity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScaleUnitNodeModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biosVersion": obj.get("biosVersion"),
            "bmcAddress": obj.get("bmcAddress"),
            "canPowerOff": obj.get("canPowerOff"),
            "capacity": ScaleUnitNodeModelCapacity.from_dict(obj["capacity"]) if obj.get("capacity") is not None else None,
            "model": obj.get("model"),
            "powerState": obj.get("powerState"),
            "scaleUnitName": obj.get("scaleUnitName"),
            "scaleUnitNodeStatus": obj.get("scaleUnitNodeStatus"),
            "scaleUnitUri": obj.get("scaleUnitUri"),
            "serialNumber": obj.get("serialNumber"),
            "vendor": obj.get("vendor")
        })
        return _obj



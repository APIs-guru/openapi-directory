# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebhookPropertiesUpdateParameters(BaseModel):
    """
    The parameters for updating the properties of a webhook.
    """ # noqa: E501
    actions: Optional[List[StrictStr]] = Field(default=None, description="The list of actions that trigger the webhook to post notifications.")
    custom_headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="Custom headers that will be added to the webhook notifications.", alias="customHeaders")
    scope: Optional[StrictStr] = Field(default=None, description="The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.")
    service_uri: Optional[StrictStr] = Field(default=None, description="The service URI for the webhook to post notifications.", alias="serviceUri")
    status: Optional[StrictStr] = Field(default=None, description="The status of the webhook at the time the operation was called.")
    __properties: ClassVar[List[str]] = ["actions", "customHeaders", "scope", "serviceUri", "status"]

    @field_validator('actions')
    def actions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['push', 'delete', 'quarantine', 'chart_push', 'chart_delete']):
                raise ValueError("each list item must be one of ('push', 'delete', 'quarantine', 'chart_push', 'chart_delete')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'disabled']):
            raise ValueError("must be one of enum values ('enabled', 'disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookPropertiesUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookPropertiesUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": obj.get("actions"),
            "customHeaders": obj.get("customHeaders"),
            "scope": obj.get("scope"),
            "serviceUri": obj.get("serviceUri"),
            "status": obj.get("status")
        })
        return _obj



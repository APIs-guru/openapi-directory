# coding: utf-8

"""
    Azure Container Registry

    Metadata API definition for the Azure Container Registry runtime

    The version of the OpenAPI document: 2019-07-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.fs_layer import FsLayer
from openapi_client.models.history import History
from openapi_client.models.image_signature import ImageSignature
from openapi_client.models.v2_descriptor import V2Descriptor
from typing import Optional, Set
from typing_extensions import Self

class Manifest(BaseModel):
    """
    Returns the requested manifest file
    """ # noqa: E501
    architecture: Optional[StrictStr] = Field(default=None, description="CPU architecture")
    config: Optional[V2Descriptor] = None
    fs_layers: Optional[List[FsLayer]] = Field(default=None, description="List of layer information", alias="fsLayers")
    history: Optional[List[History]] = Field(default=None, description="Image history")
    layers: Optional[List[V2Descriptor]] = Field(default=None, description="List of V2 image layer information")
    media_type: Optional[StrictStr] = Field(default=None, description="Media type usually application/vnd.docker.distribution.manifest.v2+json if this is in the accept header", alias="mediaType")
    name: Optional[StrictStr] = Field(default=None, description="Image name")
    schema_version: Optional[StrictInt] = Field(default=None, description="Schema version", alias="schemaVersion")
    signatures: Optional[List[ImageSignature]] = Field(default=None, description="Image signature")
    tag: Optional[StrictStr] = Field(default=None, description="Image tag")
    __properties: ClassVar[List[str]] = ["architecture", "config", "fsLayers", "history", "layers", "mediaType", "name", "schemaVersion", "signatures", "tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Manifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fs_layers (list)
        _items = []
        if self.fs_layers:
            for _item_fs_layers in self.fs_layers:
                if _item_fs_layers:
                    _items.append(_item_fs_layers.to_dict())
            _dict['fsLayers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in history (list)
        _items = []
        if self.history:
            for _item_history in self.history:
                if _item_history:
                    _items.append(_item_history.to_dict())
            _dict['history'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in layers (list)
        _items = []
        if self.layers:
            for _item_layers in self.layers:
                if _item_layers:
                    _items.append(_item_layers.to_dict())
            _dict['layers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in signatures (list)
        _items = []
        if self.signatures:
            for _item_signatures in self.signatures:
                if _item_signatures:
                    _items.append(_item_signatures.to_dict())
            _dict['signatures'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Manifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architecture": obj.get("architecture"),
            "config": V2Descriptor.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "fsLayers": [FsLayer.from_dict(_item) for _item in obj["fsLayers"]] if obj.get("fsLayers") is not None else None,
            "history": [History.from_dict(_item) for _item in obj["history"]] if obj.get("history") is not None else None,
            "layers": [V2Descriptor.from_dict(_item) for _item in obj["layers"]] if obj.get("layers") is not None else None,
            "mediaType": obj.get("mediaType"),
            "name": obj.get("name"),
            "schemaVersion": obj.get("schemaVersion"),
            "signatures": [ImageSignature.from_dict(_item) for _item in obj["signatures"]] if obj.get("signatures") is not None else None,
            "tag": obj.get("tag")
        })
        return _obj



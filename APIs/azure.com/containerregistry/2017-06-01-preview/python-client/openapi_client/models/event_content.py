# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.actor import Actor
from openapi_client.models.request import Request
from openapi_client.models.source import Source
from openapi_client.models.target import Target
from typing import Optional, Set
from typing_extensions import Self

class EventContent(BaseModel):
    """
    The content of the event request message.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="The action that encompasses the provided event.")
    actor: Optional[Actor] = None
    id: Optional[StrictStr] = Field(default=None, description="The event ID.")
    request: Optional[Request] = None
    source: Optional[Source] = None
    target: Optional[Target] = None
    timestamp: Optional[datetime] = Field(default=None, description="The time at which the event occurred.")
    __properties: ClassVar[List[str]] = ["action", "actor", "id", "request", "source", "target", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "actor": Actor.from_dict(obj["actor"]) if obj.get("actor") is not None else None,
            "id": obj.get("id"),
            "request": Request.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "source": Source.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "target": Target.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj



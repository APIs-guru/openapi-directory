# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.registry_list_result import RegistryListResult

class TestRegistryListResult(unittest.TestCase):
    """RegistryListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RegistryListResult:
        """Test RegistryListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RegistryListResult`
        """
        model = RegistryListResult()
        if include_optional:
            return RegistryListResult(
                next_link = '',
                value = [
                    openapi_client.models.registry.Registry(
                        identity = openapi_client.models.identity_properties.IdentityProperties(
                            principal_id = '', 
                            tenant_id = '', 
                            type = 'SystemAssigned', 
                            user_assigned_identities = {
                                'key' : openapi_client.models.user_identity_properties.UserIdentityProperties(
                                    client_id = '', 
                                    principal_id = '', )
                                }, ), 
                        properties = openapi_client.models.registry_properties.RegistryProperties(
                            admin_user_enabled = True, 
                            creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            encryption = openapi_client.models.encryption_property.EncryptionProperty(
                                key_vault_properties = openapi_client.models.key_vault_properties.KeyVaultProperties(
                                    key_identifier = '', ), 
                                status = 'enabled', ), 
                            login_server = '', 
                            network_rule_set = openapi_client.models.network_rule_set.NetworkRuleSet(
                                default_action = 'Allow', 
                                ip_rules = [
                                    openapi_client.models.ip_rule.IPRule(
                                        action = 'Allow', 
                                        value = '', )
                                    ], 
                                virtual_network_rules = [
                                    openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                                        action = 'Allow', 
                                        id = '', )
                                    ], ), 
                            policies = openapi_client.models.policies.Policies(
                                quarantine_policy = openapi_client.models.quarantine_policy.QuarantinePolicy(
                                    status = 'disabled', ), 
                                retention_policy = openapi_client.models.retention_policy.RetentionPolicy(
                                    days = 56, 
                                    last_updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    status = 'disabled', ), 
                                trust_policy = openapi_client.models.trust_policy.TrustPolicy(
                                    status = 'disabled', 
                                    type = 'Notary', ), ), 
                            provisioning_state = 'Creating', 
                            status = openapi_client.models.status.Status(
                                display_status = '', 
                                message = '', 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            storage_account = openapi_client.models.storage_account_properties.StorageAccountProperties(
                                id = '', ), ), 
                        sku = openapi_client.models.sku.Sku(
                            name = 'Classic', 
                            tier = 'Classic', ), )
                    ]
            )
        else:
            return RegistryListResult(
        )
        """

    def testRegistryListResult(self):
        """Test RegistryListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

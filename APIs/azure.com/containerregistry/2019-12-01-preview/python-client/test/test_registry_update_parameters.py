# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.registry_update_parameters import RegistryUpdateParameters

class TestRegistryUpdateParameters(unittest.TestCase):
    """RegistryUpdateParameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RegistryUpdateParameters:
        """Test RegistryUpdateParameters
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RegistryUpdateParameters`
        """
        model = RegistryUpdateParameters()
        if include_optional:
            return RegistryUpdateParameters(
                identity = openapi_client.models.identity_properties.IdentityProperties(
                    principal_id = '', 
                    tenant_id = '', 
                    type = 'SystemAssigned', 
                    user_assigned_identities = {
                        'key' : openapi_client.models.user_identity_properties.UserIdentityProperties(
                            client_id = '', 
                            principal_id = '', )
                        }, ),
                properties = openapi_client.models.registry_properties_update_parameters.RegistryPropertiesUpdateParameters(
                    admin_user_enabled = True, 
                    encryption = openapi_client.models.encryption_property.EncryptionProperty(
                        key_vault_properties = openapi_client.models.key_vault_properties.KeyVaultProperties(
                            identity = '', 
                            key_identifier = '', ), 
                        status = 'enabled', ), 
                    network_rule_set = openapi_client.models.network_rule_set.NetworkRuleSet(
                        default_action = 'Allow', 
                        ip_rules = [
                            openapi_client.models.ip_rule.IPRule(
                                action = 'Allow', 
                                value = '', )
                            ], 
                        virtual_network_rules = [
                            openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                                action = 'Allow', 
                                id = '', )
                            ], ), 
                    policies = openapi_client.models.policies.Policies(
                        quarantine_policy = openapi_client.models.quarantine_policy.QuarantinePolicy(
                            status = 'disabled', ), 
                        retention_policy = openapi_client.models.retention_policy.RetentionPolicy(
                            days = 56, 
                            last_updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            status = 'disabled', ), 
                        trust_policy = openapi_client.models.trust_policy.TrustPolicy(
                            status = 'disabled', 
                            type = 'Notary', ), ), ),
                sku = openapi_client.models.sku.Sku(
                    name = 'Classic', 
                    tier = 'Classic', ),
                tags = {
                    'key' : ''
                    }
            )
        else:
            return RegistryUpdateParameters(
        )
        """

    def testRegistryUpdateParameters(self):
        """Test RegistryUpdateParameters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_property import EncryptionProperty
from openapi_client.models.network_rule_set import NetworkRuleSet
from openapi_client.models.policies import Policies
from typing import Optional, Set
from typing_extensions import Self

class RegistryPropertiesUpdateParameters(BaseModel):
    """
    The parameters for updating the properties of a container registry.
    """ # noqa: E501
    admin_user_enabled: Optional[StrictBool] = Field(default=None, description="The value that indicates whether the admin user is enabled.", alias="adminUserEnabled")
    encryption: Optional[EncryptionProperty] = None
    network_rule_set: Optional[NetworkRuleSet] = Field(default=None, alias="networkRuleSet")
    policies: Optional[Policies] = None
    __properties: ClassVar[List[str]] = ["adminUserEnabled", "encryption", "networkRuleSet", "policies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegistryPropertiesUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_rule_set
        if self.network_rule_set:
            _dict['networkRuleSet'] = self.network_rule_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegistryPropertiesUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminUserEnabled": obj.get("adminUserEnabled"),
            "encryption": EncryptionProperty.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "networkRuleSet": NetworkRuleSet.from_dict(obj["networkRuleSet"]) if obj.get("networkRuleSet") is not None else None,
            "policies": Policies.from_dict(obj["policies"]) if obj.get("policies") is not None else None
        })
        return _obj



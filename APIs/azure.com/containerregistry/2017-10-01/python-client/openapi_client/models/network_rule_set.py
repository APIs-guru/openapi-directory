# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ip_rule import IPRule
from openapi_client.models.virtual_network_rule import VirtualNetworkRule
from typing import Optional, Set
from typing_extensions import Self

class NetworkRuleSet(BaseModel):
    """
    The network rule set for a container registry.
    """ # noqa: E501
    default_action: StrictStr = Field(description="The default action of allow or deny when no other rules match.", alias="defaultAction")
    ip_rules: Optional[List[IPRule]] = Field(default=None, description="The IP ACL rules.", alias="ipRules")
    virtual_network_rules: Optional[List[VirtualNetworkRule]] = Field(default=None, description="The virtual network rules.", alias="virtualNetworkRules")
    __properties: ClassVar[List[str]] = ["defaultAction", "ipRules", "virtualNetworkRules"]

    @field_validator('default_action')
    def default_action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Allow', 'Deny']):
            raise ValueError("must be one of enum values ('Allow', 'Deny')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkRuleSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ip_rules (list)
        _items = []
        if self.ip_rules:
            for _item_ip_rules in self.ip_rules:
                if _item_ip_rules:
                    _items.append(_item_ip_rules.to_dict())
            _dict['ipRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_network_rules (list)
        _items = []
        if self.virtual_network_rules:
            for _item_virtual_network_rules in self.virtual_network_rules:
                if _item_virtual_network_rules:
                    _items.append(_item_virtual_network_rules.to_dict())
            _dict['virtualNetworkRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkRuleSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultAction": obj.get("defaultAction") if obj.get("defaultAction") is not None else 'Allow',
            "ipRules": [IPRule.from_dict(_item) for _item in obj["ipRules"]] if obj.get("ipRules") is not None else None,
            "virtualNetworkRules": [VirtualNetworkRule.from_dict(_item) for _item in obj["virtualNetworkRules"]] if obj.get("virtualNetworkRules") is not None else None
        })
        return _obj



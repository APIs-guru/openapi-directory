# coding: utf-8

"""
    Azure Container Registry

    Metadata API definition for the Azure Container Registry runtime

    The version of the OpenAPI document: 2019-08-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Annotations(BaseModel):
    """
    Additional information provided through arbitrary metadata.
    """ # noqa: E501
    org_opencontainers_image_authors: Optional[StrictStr] = Field(default=None, description="Contact details of the people or organization responsible for the image.", alias="org.opencontainers.image.authors")
    org_opencontainers_image_created: Optional[datetime] = Field(default=None, description="Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6)", alias="org.opencontainers.image.created")
    org_opencontainers_image_description: Optional[StrictStr] = Field(default=None, description="Human-readable description of the software packaged in the image", alias="org.opencontainers.image.description")
    org_opencontainers_image_documentation: Optional[StrictStr] = Field(default=None, description="URL to get documentation on the image.", alias="org.opencontainers.image.documentation")
    org_opencontainers_image_licenses: Optional[StrictStr] = Field(default=None, description="License(s) under which contained software is distributed as an SPDX License Expression.", alias="org.opencontainers.image.licenses")
    org_opencontainers_image_ref_name: Optional[StrictStr] = Field(default=None, description="Name of the reference for a target.", alias="org.opencontainers.image.ref.name")
    org_opencontainers_image_revision: Optional[StrictStr] = Field(default=None, description="Source control revision identifier for the packaged software.", alias="org.opencontainers.image.revision")
    org_opencontainers_image_source: Optional[StrictStr] = Field(default=None, description="URL to get source code for building the image.", alias="org.opencontainers.image.source")
    org_opencontainers_image_title: Optional[StrictStr] = Field(default=None, description="Human-readable title of the image", alias="org.opencontainers.image.title")
    org_opencontainers_image_url: Optional[StrictStr] = Field(default=None, description="URL to find more information on the image.", alias="org.opencontainers.image.url")
    org_opencontainers_image_vendor: Optional[StrictStr] = Field(default=None, description="Name of the distributing entity, organization or individual.", alias="org.opencontainers.image.vendor")
    org_opencontainers_image_version: Optional[StrictStr] = Field(default=None, description="Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible", alias="org.opencontainers.image.version")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["org.opencontainers.image.authors", "org.opencontainers.image.created", "org.opencontainers.image.description", "org.opencontainers.image.documentation", "org.opencontainers.image.licenses", "org.opencontainers.image.ref.name", "org.opencontainers.image.revision", "org.opencontainers.image.source", "org.opencontainers.image.title", "org.opencontainers.image.url", "org.opencontainers.image.vendor", "org.opencontainers.image.version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Annotations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Annotations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "org.opencontainers.image.authors": obj.get("org.opencontainers.image.authors"),
            "org.opencontainers.image.created": obj.get("org.opencontainers.image.created"),
            "org.opencontainers.image.description": obj.get("org.opencontainers.image.description"),
            "org.opencontainers.image.documentation": obj.get("org.opencontainers.image.documentation"),
            "org.opencontainers.image.licenses": obj.get("org.opencontainers.image.licenses"),
            "org.opencontainers.image.ref.name": obj.get("org.opencontainers.image.ref.name"),
            "org.opencontainers.image.revision": obj.get("org.opencontainers.image.revision"),
            "org.opencontainers.image.source": obj.get("org.opencontainers.image.source"),
            "org.opencontainers.image.title": obj.get("org.opencontainers.image.title"),
            "org.opencontainers.image.url": obj.get("org.opencontainers.image.url"),
            "org.opencontainers.image.vendor": obj.get("org.opencontainers.image.vendor"),
            "org.opencontainers.image.version": obj.get("org.opencontainers.image.version")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



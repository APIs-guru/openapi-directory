# coding: utf-8

"""
    HybridComputeManagementClient

    The Hybrid Compute Management Client.

    The version of the OpenAPI document: 2019-03-18-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_detail import ErrorDetail
from openapi_client.models.os_profile import OSProfile
from typing import Optional, Set
from typing_extensions import Self

class MachineProperties(BaseModel):
    """
    Describes the properties of a hybrid machine.
    """ # noqa: E501
    agent_version: Optional[StrictStr] = Field(default=None, description="The hybrid machine agent full version.", alias="agentVersion")
    client_public_key: Optional[StrictStr] = Field(default=None, description="Public Key that the client provides to be used during initial resource onboarding", alias="clientPublicKey")
    display_name: Optional[StrictStr] = Field(default=None, description="Specifies the hybrid machine display name.", alias="displayName")
    error_details: Optional[List[ErrorDetail]] = Field(default=None, description="Details about the error state.", alias="errorDetails")
    last_status_change: Optional[datetime] = Field(default=None, description="The time of the last status change.", alias="lastStatusChange")
    machine_fqdn: Optional[StrictStr] = Field(default=None, description="Specifies the hybrid machine FQDN.", alias="machineFqdn")
    os_name: Optional[StrictStr] = Field(default=None, description="The Operating System running on the hybrid machine.", alias="osName")
    os_profile: Optional[OSProfile] = Field(default=None, alias="osProfile")
    os_version: Optional[StrictStr] = Field(default=None, description="The version of Operating System running on the hybrid machine.", alias="osVersion")
    physical_location: Optional[StrictStr] = Field(default=None, description="Resource's Physical Location", alias="physicalLocation")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    status: Optional[StrictStr] = Field(default=None, description="The status of the hybrid machine agent.")
    vm_id: Optional[StrictStr] = Field(default=None, description="Specifies the hybrid machine unique ID.", alias="vmId")
    __properties: ClassVar[List[str]] = ["agentVersion", "clientPublicKey", "displayName", "errorDetails", "lastStatusChange", "machineFqdn", "osName", "osProfile", "osVersion", "physicalLocation", "provisioningState", "status", "vmId"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Connected', 'Disconnected', 'Error']):
            raise ValueError("must be one of enum values ('Connected', 'Disconnected', 'Error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MachineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "agent_version",
            "display_name",
            "error_details",
            "last_status_change",
            "machine_fqdn",
            "os_name",
            "os_version",
            "provisioning_state",
            "status",
            "vm_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_details (list)
        _items = []
        if self.error_details:
            for _item_error_details in self.error_details:
                if _item_error_details:
                    _items.append(_item_error_details.to_dict())
            _dict['errorDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of os_profile
        if self.os_profile:
            _dict['osProfile'] = self.os_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MachineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentVersion": obj.get("agentVersion"),
            "clientPublicKey": obj.get("clientPublicKey"),
            "displayName": obj.get("displayName"),
            "errorDetails": [ErrorDetail.from_dict(_item) for _item in obj["errorDetails"]] if obj.get("errorDetails") is not None else None,
            "lastStatusChange": obj.get("lastStatusChange"),
            "machineFqdn": obj.get("machineFqdn"),
            "osName": obj.get("osName"),
            "osProfile": OSProfile.from_dict(obj["osProfile"]) if obj.get("osProfile") is not None else None,
            "osVersion": obj.get("osVersion"),
            "physicalLocation": obj.get("physicalLocation"),
            "provisioningState": obj.get("provisioningState"),
            "status": obj.get("status"),
            "vmId": obj.get("vmId")
        })
        return _obj



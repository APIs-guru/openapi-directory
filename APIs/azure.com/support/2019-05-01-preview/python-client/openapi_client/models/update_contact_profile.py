# coding: utf-8

"""
    Microsoft.Support

    Microsoft Azure Support Resource Provider.

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateContactProfile(BaseModel):
    """
    Contact information associated with the support ticket.
    """ # noqa: E501
    additional_email_addresses: Optional[List[StrictStr]] = Field(default=None, description="Email addresses listed will be copied on any correspondence about the support ticket", alias="additionalEmailAddresses")
    country: Optional[StrictStr] = Field(default=None, description="Country of the user. This is the ISO 3166-1 alpha-3 code.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name", alias="lastName")
    phone_number: Optional[StrictStr] = Field(default=None, description="Phone number. This is required if preferred contact method is phone.", alias="phoneNumber")
    preferred_contact_method: Optional[StrictStr] = Field(default=None, description="Preferred contact method", alias="preferredContactMethod")
    preferred_support_language: Optional[StrictStr] = Field(default=None, description="Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Learn more at <a  target='_blank' href='https://azure.microsoft.com/support/plans/response/'>Azure Severity and responsiveness</a>. Use the standard language-country code. Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German.", alias="preferredSupportLanguage")
    preferred_time_zone: Optional[StrictStr] = Field(default=None, description="Time zone of the user. This is the name of the time zone from <a  target='_blank' href='https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values'>Microsoft Time Zone Index Values</a>.", alias="preferredTimeZone")
    primary_email_address: Optional[StrictStr] = Field(default=None, description="Primary email address", alias="primaryEmailAddress")
    __properties: ClassVar[List[str]] = ["additionalEmailAddresses", "country", "firstName", "lastName", "phoneNumber", "preferredContactMethod", "preferredSupportLanguage", "preferredTimeZone", "primaryEmailAddress"]

    @field_validator('preferred_contact_method')
    def preferred_contact_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['email', 'phone']):
            raise ValueError("must be one of enum values ('email', 'phone')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateContactProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateContactProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalEmailAddresses": obj.get("additionalEmailAddresses"),
            "country": obj.get("country"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "phoneNumber": obj.get("phoneNumber"),
            "preferredContactMethod": obj.get("preferredContactMethod"),
            "preferredSupportLanguage": obj.get("preferredSupportLanguage"),
            "preferredTimeZone": obj.get("preferredTimeZone"),
            "primaryEmailAddress": obj.get("primaryEmailAddress")
        })
        return _obj



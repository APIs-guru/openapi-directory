# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.management_group_aggregated_cost_properties import ManagementGroupAggregatedCostProperties

class TestManagementGroupAggregatedCostProperties(unittest.TestCase):
    """ManagementGroupAggregatedCostProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ManagementGroupAggregatedCostProperties:
        """Test ManagementGroupAggregatedCostProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ManagementGroupAggregatedCostProperties`
        """
        model = ManagementGroupAggregatedCostProperties()
        if include_optional:
            return ManagementGroupAggregatedCostProperties(
                azure_charges = 1.337,
                billing_period_id = '',
                charges_billed_separately = 1.337,
                children = [
                    openapi_client.models.management_group_aggregated_cost_result.ManagementGroupAggregatedCostResult(
                        properties = openapi_client.models.management_group_aggregated_cost_properties.ManagementGroupAggregatedCostProperties(
                            azure_charges = 1.337, 
                            billing_period_id = '', 
                            charges_billed_separately = 1.337, 
                            children = [
                                openapi_client.models.management_group_aggregated_cost_result.ManagementGroupAggregatedCostResult()
                                ], 
                            currency = '', 
                            excluded_subscriptions = [
                                ''
                                ], 
                            included_subscriptions = [
                                ''
                                ], 
                            marketplace_charges = 1.337, 
                            usage_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            usage_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ],
                currency = '',
                excluded_subscriptions = [
                    ''
                    ],
                included_subscriptions = [
                    ''
                    ],
                marketplace_charges = 1.337,
                usage_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                usage_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ManagementGroupAggregatedCostProperties(
        )
        """

    def testManagementGroupAggregatedCostProperties(self):
        """Test ManagementGroupAggregatedCostProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

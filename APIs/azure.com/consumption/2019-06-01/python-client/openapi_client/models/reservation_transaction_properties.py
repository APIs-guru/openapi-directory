# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReservationTransactionProperties(BaseModel):
    """
    ReservationTransactionProperties
    """ # noqa: E501
    account_name: Optional[StrictStr] = Field(default=None, description="The name of the account that makes the transaction.", alias="accountName")
    account_owner_email: Optional[StrictStr] = Field(default=None, description="The email of the account owner that makes the transaction.", alias="accountOwnerEmail")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The charge of the transaction.")
    arm_sku_name: Optional[StrictStr] = Field(default=None, description="This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.", alias="armSkuName")
    cost_center: Optional[StrictStr] = Field(default=None, description="The cost center of this department if it is a department and a cost center is provided.", alias="costCenter")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO currency in which the transaction is charged, for example, USD.")
    current_enrollment: Optional[StrictStr] = Field(default=None, description="The current enrollment.", alias="currentEnrollment")
    department_name: Optional[StrictStr] = Field(default=None, description="The department name.", alias="departmentName")
    description: Optional[StrictStr] = Field(default=None, description="The description of the transaction.")
    event_date: Optional[datetime] = Field(default=None, description="The date of the transaction", alias="eventDate")
    event_type: Optional[StrictStr] = Field(default=None, description="The type of the transaction (Purchase, Cancel, etc.)", alias="eventType")
    purchasing_enrollment: Optional[StrictStr] = Field(default=None, description="The purchasing enrollment.", alias="purchasingEnrollment")
    purchasing_subscription_guid: Optional[StrictStr] = Field(default=None, description="The subscription guid that makes the transaction.", alias="purchasingSubscriptionGuid")
    purchasing_subscription_name: Optional[StrictStr] = Field(default=None, description="The subscription name that makes the transaction.", alias="purchasingSubscriptionName")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of the transaction.")
    region: Optional[StrictStr] = Field(default=None, description="The region of the transaction.")
    reservation_order_id: Optional[StrictStr] = Field(default=None, description="The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.", alias="reservationOrderId")
    reservation_order_name: Optional[StrictStr] = Field(default=None, description="The name of the reservation order.", alias="reservationOrderName")
    term: Optional[StrictStr] = Field(default=None, description="This is the term of the transaction.")
    __properties: ClassVar[List[str]] = ["accountName", "accountOwnerEmail", "amount", "armSkuName", "costCenter", "currency", "currentEnrollment", "departmentName", "description", "eventDate", "eventType", "purchasingEnrollment", "purchasingSubscriptionGuid", "purchasingSubscriptionName", "quantity", "region", "reservationOrderId", "reservationOrderName", "term"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReservationTransactionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_name",
            "account_owner_email",
            "amount",
            "arm_sku_name",
            "cost_center",
            "currency",
            "current_enrollment",
            "department_name",
            "description",
            "event_date",
            "event_type",
            "purchasing_enrollment",
            "purchasing_subscription_guid",
            "purchasing_subscription_name",
            "quantity",
            "region",
            "reservation_order_id",
            "reservation_order_name",
            "term",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReservationTransactionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName": obj.get("accountName"),
            "accountOwnerEmail": obj.get("accountOwnerEmail"),
            "amount": obj.get("amount"),
            "armSkuName": obj.get("armSkuName"),
            "costCenter": obj.get("costCenter"),
            "currency": obj.get("currency"),
            "currentEnrollment": obj.get("currentEnrollment"),
            "departmentName": obj.get("departmentName"),
            "description": obj.get("description"),
            "eventDate": obj.get("eventDate"),
            "eventType": obj.get("eventType"),
            "purchasingEnrollment": obj.get("purchasingEnrollment"),
            "purchasingSubscriptionGuid": obj.get("purchasingSubscriptionGuid"),
            "purchasingSubscriptionName": obj.get("purchasingSubscriptionName"),
            "quantity": obj.get("quantity"),
            "region": obj.get("region"),
            "reservationOrderId": obj.get("reservationOrderId"),
            "reservationOrderName": obj.get("reservationOrderName"),
            "term": obj.get("term")
        })
        return _obj



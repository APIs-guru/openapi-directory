# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.meter_details_response import MeterDetailsResponse
from typing import Optional, Set
from typing_extensions import Self

class UsageDetailProperties(BaseModel):
    """
    The properties of the usage detail.
    """ # noqa: E501
    account_name: Optional[StrictStr] = Field(default=None, description="Account Name.", alias="accountName")
    account_owner_id: Optional[StrictStr] = Field(default=None, description="Account Owner Id.", alias="accountOwnerId")
    additional_info: Optional[StrictStr] = Field(default=None, description="Additional details of this usage item. By default this is not populated, unless it's specified in $expand. Use this field to get usage line item specific details such as the actual VM Size (ServiceType) or the ratio in which the reservation discount is applied.", alias="additionalInfo")
    billing_account_id: Optional[StrictStr] = Field(default=None, description="Billing Account identifier.", alias="billingAccountId")
    billing_account_name: Optional[StrictStr] = Field(default=None, description="Billing Account Name.", alias="billingAccountName")
    billing_currency: Optional[StrictStr] = Field(default=None, description="Billing Currency.", alias="billingCurrency")
    billing_period_end_date: Optional[datetime] = Field(default=None, description="The billing period end date.", alias="billingPeriodEndDate")
    billing_period_start_date: Optional[datetime] = Field(default=None, description="The billing period start date.", alias="billingPeriodStartDate")
    billing_profile_id: Optional[StrictStr] = Field(default=None, description="Billing Profile identifier.", alias="billingProfileId")
    billing_profile_name: Optional[StrictStr] = Field(default=None, description="Billing Profile Name.", alias="billingProfileName")
    charge_type: Optional[StrictStr] = Field(default=None, description="Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.", alias="chargeType")
    consumed_service: Optional[StrictStr] = Field(default=None, description="Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided for marketplace usage.", alias="consumedService")
    cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of cost before tax.")
    cost_center: Optional[StrictStr] = Field(default=None, description="The cost center of this department if it is a department and a cost center is provided.", alias="costCenter")
    var_date: Optional[datetime] = Field(default=None, description="Date for the usage record.", alias="date")
    effective_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Effective Price that's charged for the usage.", alias="effectivePrice")
    frequency: Optional[StrictStr] = Field(default=None, description="Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which recur every month, and UsageBased for charges based on how much a service is used.")
    invoice_section: Optional[StrictStr] = Field(default=None, description="Invoice Section Name.", alias="invoiceSection")
    is_azure_credit_eligible: Optional[StrictBool] = Field(default=None, description="Is Azure Credit Eligible.", alias="isAzureCreditEligible")
    meter_details: Optional[MeterDetailsResponse] = Field(default=None, alias="meterDetails")
    meter_id: Optional[StrictStr] = Field(default=None, description="The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.", alias="meterId")
    offer_id: Optional[StrictStr] = Field(default=None, description="Offer Id. Ex: MS-AZR-0017P, MS-AZR-0148P.", alias="offerId")
    part_number: Optional[StrictStr] = Field(default=None, description="Part Number of the service used. Can be used to join with the price sheet. Not available for marketplace.", alias="partNumber")
    plan_name: Optional[StrictStr] = Field(default=None, description="Plan Name.", alias="planName")
    product: Optional[StrictStr] = Field(default=None, description="Product name for the consumed service or purchase. Not available for Marketplace.")
    product_order_id: Optional[StrictStr] = Field(default=None, description="Product Order Id. For reservations this is the Reservation Order ID.", alias="productOrderId")
    product_order_name: Optional[StrictStr] = Field(default=None, description="Product Order Name. For reservations this is the SKU that was purchased.", alias="productOrderName")
    publisher_name: Optional[StrictStr] = Field(default=None, description="Publisher Name.", alias="publisherName")
    publisher_type: Optional[StrictStr] = Field(default=None, description="Publisher Type.", alias="publisherType")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The usage quantity.")
    reservation_id: Optional[StrictStr] = Field(default=None, description="ARM resource id of the reservation. Only applies to records relevant to reservations.", alias="reservationId")
    reservation_name: Optional[StrictStr] = Field(default=None, description="User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only applies to records relevant to reservations.", alias="reservationName")
    resource_group: Optional[StrictStr] = Field(default=None, description="Resource Group Name.", alias="resourceGroup")
    resource_id: Optional[StrictStr] = Field(default=None, description="Azure resource manager resource identifier.", alias="resourceId")
    resource_location: Optional[StrictStr] = Field(default=None, description="Resource Location.", alias="resourceLocation")
    resource_name: Optional[StrictStr] = Field(default=None, description="Resource Name.", alias="resourceName")
    service_info1: Optional[StrictStr] = Field(default=None, description="Service Info 1.", alias="serviceInfo1")
    service_info2: Optional[StrictStr] = Field(default=None, description="Service Info 2.", alias="serviceInfo2")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription guid.", alias="subscriptionId")
    subscription_name: Optional[StrictStr] = Field(default=None, description="Subscription name.", alias="subscriptionName")
    term: Optional[StrictStr] = Field(default=None, description="Term (in months). 1 month for monthly recurring purchase. 12 months for a 1 year reservation. 36 months for a 3 year reservation.")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unit Price is the price applicable to you. (your EA or other contract price).", alias="unitPrice")
    __properties: ClassVar[List[str]] = ["accountName", "accountOwnerId", "additionalInfo", "billingAccountId", "billingAccountName", "billingCurrency", "billingPeriodEndDate", "billingPeriodStartDate", "billingProfileId", "billingProfileName", "chargeType", "consumedService", "cost", "costCenter", "date", "effectivePrice", "frequency", "invoiceSection", "isAzureCreditEligible", "meterDetails", "meterId", "offerId", "partNumber", "planName", "product", "productOrderId", "productOrderName", "publisherName", "publisherType", "quantity", "reservationId", "reservationName", "resourceGroup", "resourceId", "resourceLocation", "resourceName", "serviceInfo1", "serviceInfo2", "subscriptionId", "subscriptionName", "term", "unitPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageDetailProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_name",
            "account_owner_id",
            "additional_info",
            "billing_account_id",
            "billing_account_name",
            "billing_currency",
            "billing_period_end_date",
            "billing_period_start_date",
            "billing_profile_id",
            "billing_profile_name",
            "charge_type",
            "consumed_service",
            "cost",
            "cost_center",
            "var_date",
            "effective_price",
            "frequency",
            "invoice_section",
            "is_azure_credit_eligible",
            "meter_id",
            "offer_id",
            "part_number",
            "plan_name",
            "product",
            "product_order_id",
            "product_order_name",
            "publisher_name",
            "publisher_type",
            "quantity",
            "reservation_id",
            "reservation_name",
            "resource_group",
            "resource_id",
            "resource_location",
            "resource_name",
            "service_info1",
            "service_info2",
            "subscription_id",
            "subscription_name",
            "term",
            "unit_price",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meter_details
        if self.meter_details:
            _dict['meterDetails'] = self.meter_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageDetailProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName": obj.get("accountName"),
            "accountOwnerId": obj.get("accountOwnerId"),
            "additionalInfo": obj.get("additionalInfo"),
            "billingAccountId": obj.get("billingAccountId"),
            "billingAccountName": obj.get("billingAccountName"),
            "billingCurrency": obj.get("billingCurrency"),
            "billingPeriodEndDate": obj.get("billingPeriodEndDate"),
            "billingPeriodStartDate": obj.get("billingPeriodStartDate"),
            "billingProfileId": obj.get("billingProfileId"),
            "billingProfileName": obj.get("billingProfileName"),
            "chargeType": obj.get("chargeType"),
            "consumedService": obj.get("consumedService"),
            "cost": obj.get("cost"),
            "costCenter": obj.get("costCenter"),
            "date": obj.get("date"),
            "effectivePrice": obj.get("effectivePrice"),
            "frequency": obj.get("frequency"),
            "invoiceSection": obj.get("invoiceSection"),
            "isAzureCreditEligible": obj.get("isAzureCreditEligible"),
            "meterDetails": MeterDetailsResponse.from_dict(obj["meterDetails"]) if obj.get("meterDetails") is not None else None,
            "meterId": obj.get("meterId"),
            "offerId": obj.get("offerId"),
            "partNumber": obj.get("partNumber"),
            "planName": obj.get("planName"),
            "product": obj.get("product"),
            "productOrderId": obj.get("productOrderId"),
            "productOrderName": obj.get("productOrderName"),
            "publisherName": obj.get("publisherName"),
            "publisherType": obj.get("publisherType"),
            "quantity": obj.get("quantity"),
            "reservationId": obj.get("reservationId"),
            "reservationName": obj.get("reservationName"),
            "resourceGroup": obj.get("resourceGroup"),
            "resourceId": obj.get("resourceId"),
            "resourceLocation": obj.get("resourceLocation"),
            "resourceName": obj.get("resourceName"),
            "serviceInfo1": obj.get("serviceInfo1"),
            "serviceInfo2": obj.get("serviceInfo2"),
            "subscriptionId": obj.get("subscriptionId"),
            "subscriptionName": obj.get("subscriptionName"),
            "term": obj.get("term"),
            "unitPrice": obj.get("unitPrice")
        })
        return _obj



# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.modern_usage_detail import ModernUsageDetail

class TestModernUsageDetail(unittest.TestCase):
    """ModernUsageDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModernUsageDetail:
        """Test ModernUsageDetail
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModernUsageDetail`
        """
        model = ModernUsageDetail()
        if include_optional:
            return ModernUsageDetail(
                properties = openapi_client.models.modern_usage_detail_properties.ModernUsageDetailProperties(
                    additional_info = '', 
                    billing_account_id = '', 
                    billing_account_name = '', 
                    billing_currency_code = '', 
                    billing_period_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    billing_period_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    billing_profile_id = '', 
                    billing_profile_name = '', 
                    charge_type = '', 
                    consumed_service = '', 
                    cost_center = '', 
                    cost_in_billing_currency = 1.337, 
                    cost_in_pricing_currency = 1.337, 
                    cost_in_usd = 1.337, 
                    customer_name = '', 
                    customer_tenant_id = '', 
                    date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    exchange_rate = '', 
                    exchange_rate_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    exchange_rate_pricing_to_billing = 1.337, 
                    frequency = '', 
                    instance_name = '', 
                    invoice_id = '', 
                    invoice_section_id = '', 
                    invoice_section_name = '', 
                    is_azure_credit_eligible = True, 
                    market_price = 1.337, 
                    meter_category = '', 
                    meter_id = '', 
                    meter_name = '', 
                    meter_region = '', 
                    meter_sub_category = '', 
                    partner_earned_credit_applied = '', 
                    partner_earned_credit_rate = 1.337, 
                    partner_name = '', 
                    partner_tenant_id = '', 
                    payg_cost_in_billing_currency = 1.337, 
                    payg_cost_in_usd = 1.337, 
                    previous_invoice_id = '', 
                    pricing_currency_code = '', 
                    product = '', 
                    product_identifier = '', 
                    product_order_id = '', 
                    product_order_name = '', 
                    publisher_id = '', 
                    publisher_name = '', 
                    publisher_type = '', 
                    quantity = 1.337, 
                    reseller_mpn_id = '', 
                    reseller_name = '', 
                    reservation_id = '', 
                    reservation_name = '', 
                    resource_group = '', 
                    resource_location = '', 
                    resource_location_normalized = '', 
                    service_family = '', 
                    service_info1 = '', 
                    service_info2 = '', 
                    service_period_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    service_period_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    subscription_guid = '', 
                    subscription_name = '', 
                    term = '', 
                    unit_of_measure = '', 
                    unit_price = 1.337, ),
                kind = 'legacy',
                id = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return ModernUsageDetail(
                properties = openapi_client.models.modern_usage_detail_properties.ModernUsageDetailProperties(
                    additional_info = '', 
                    billing_account_id = '', 
                    billing_account_name = '', 
                    billing_currency_code = '', 
                    billing_period_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    billing_period_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    billing_profile_id = '', 
                    billing_profile_name = '', 
                    charge_type = '', 
                    consumed_service = '', 
                    cost_center = '', 
                    cost_in_billing_currency = 1.337, 
                    cost_in_pricing_currency = 1.337, 
                    cost_in_usd = 1.337, 
                    customer_name = '', 
                    customer_tenant_id = '', 
                    date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    exchange_rate = '', 
                    exchange_rate_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    exchange_rate_pricing_to_billing = 1.337, 
                    frequency = '', 
                    instance_name = '', 
                    invoice_id = '', 
                    invoice_section_id = '', 
                    invoice_section_name = '', 
                    is_azure_credit_eligible = True, 
                    market_price = 1.337, 
                    meter_category = '', 
                    meter_id = '', 
                    meter_name = '', 
                    meter_region = '', 
                    meter_sub_category = '', 
                    partner_earned_credit_applied = '', 
                    partner_earned_credit_rate = 1.337, 
                    partner_name = '', 
                    partner_tenant_id = '', 
                    payg_cost_in_billing_currency = 1.337, 
                    payg_cost_in_usd = 1.337, 
                    previous_invoice_id = '', 
                    pricing_currency_code = '', 
                    product = '', 
                    product_identifier = '', 
                    product_order_id = '', 
                    product_order_name = '', 
                    publisher_id = '', 
                    publisher_name = '', 
                    publisher_type = '', 
                    quantity = 1.337, 
                    reseller_mpn_id = '', 
                    reseller_name = '', 
                    reservation_id = '', 
                    reservation_name = '', 
                    resource_group = '', 
                    resource_location = '', 
                    resource_location_normalized = '', 
                    service_family = '', 
                    service_info1 = '', 
                    service_info2 = '', 
                    service_period_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    service_period_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    subscription_guid = '', 
                    subscription_name = '', 
                    term = '', 
                    unit_of_measure = '', 
                    unit_price = 1.337, ),
                kind = 'legacy',
        )
        """

    def testModernUsageDetail(self):
        """Test ModernUsageDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

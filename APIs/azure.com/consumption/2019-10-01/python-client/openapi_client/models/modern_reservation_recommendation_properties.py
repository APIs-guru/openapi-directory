# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.amount import Amount
from openapi_client.models.sku_property import SkuProperty
from typing import Optional, Set
from typing_extensions import Self

class ModernReservationRecommendationProperties(BaseModel):
    """
    The properties of the reservation recommendation.
    """ # noqa: E501
    cost_with_no_reserved_instances: Optional[Amount] = Field(default=None, alias="costWithNoReservedInstances")
    first_usage_date: Optional[datetime] = Field(default=None, description="The usage date for looking back.", alias="firstUsageDate")
    instance_flexibility_group: Optional[StrictStr] = Field(default=None, description="The instance Flexibility Group.", alias="instanceFlexibilityGroup")
    instance_flexibility_ratio: Optional[StrictInt] = Field(default=None, description="The instance Flexibility Ratio.", alias="instanceFlexibilityRatio")
    look_back_period: Optional[StrictStr] = Field(default=None, description="The number of days of usage to look back for recommendation.", alias="lookBackPeriod")
    meter_id: Optional[StrictStr] = Field(default=None, description="The meter id (GUID)", alias="meterId")
    net_savings: Optional[Amount] = Field(default=None, alias="netSavings")
    normalized_size: Optional[StrictStr] = Field(default=None, description="The normalized Size.", alias="normalizedSize")
    recommended_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recommended quality for reserved instances.", alias="recommendedQuantity")
    recommended_quantity_normalized: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The recommended Quantity Normalized.", alias="recommendedQuantityNormalized")
    scope: Optional[StrictStr] = Field(default=None, description="Shared or single recommendation.")
    sku_properties: Optional[List[SkuProperty]] = Field(default=None, description="List of sku properties", alias="skuProperties")
    term: Optional[StrictStr] = Field(default=None, description="RI recommendations in one or three year terms.")
    total_cost_with_reserved_instances: Optional[Amount] = Field(default=None, alias="totalCostWithReservedInstances")
    __properties: ClassVar[List[str]] = ["costWithNoReservedInstances", "firstUsageDate", "instanceFlexibilityGroup", "instanceFlexibilityRatio", "lookBackPeriod", "meterId", "netSavings", "normalizedSize", "recommendedQuantity", "recommendedQuantityNormalized", "scope", "skuProperties", "term", "totalCostWithReservedInstances"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModernReservationRecommendationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "first_usage_date",
            "instance_flexibility_group",
            "instance_flexibility_ratio",
            "look_back_period",
            "meter_id",
            "normalized_size",
            "recommended_quantity",
            "recommended_quantity_normalized",
            "scope",
            "sku_properties",
            "term",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost_with_no_reserved_instances
        if self.cost_with_no_reserved_instances:
            _dict['costWithNoReservedInstances'] = self.cost_with_no_reserved_instances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_savings
        if self.net_savings:
            _dict['netSavings'] = self.net_savings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sku_properties (list)
        _items = []
        if self.sku_properties:
            for _item_sku_properties in self.sku_properties:
                if _item_sku_properties:
                    _items.append(_item_sku_properties.to_dict())
            _dict['skuProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_cost_with_reserved_instances
        if self.total_cost_with_reserved_instances:
            _dict['totalCostWithReservedInstances'] = self.total_cost_with_reserved_instances.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModernReservationRecommendationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "costWithNoReservedInstances": Amount.from_dict(obj["costWithNoReservedInstances"]) if obj.get("costWithNoReservedInstances") is not None else None,
            "firstUsageDate": obj.get("firstUsageDate"),
            "instanceFlexibilityGroup": obj.get("instanceFlexibilityGroup"),
            "instanceFlexibilityRatio": obj.get("instanceFlexibilityRatio"),
            "lookBackPeriod": obj.get("lookBackPeriod"),
            "meterId": obj.get("meterId"),
            "netSavings": Amount.from_dict(obj["netSavings"]) if obj.get("netSavings") is not None else None,
            "normalizedSize": obj.get("normalizedSize"),
            "recommendedQuantity": obj.get("recommendedQuantity"),
            "recommendedQuantityNormalized": obj.get("recommendedQuantityNormalized"),
            "scope": obj.get("scope"),
            "skuProperties": [SkuProperty.from_dict(_item) for _item in obj["skuProperties"]] if obj.get("skuProperties") is not None else None,
            "term": obj.get("term"),
            "totalCostWithReservedInstances": Amount.from_dict(obj["totalCostWithReservedInstances"]) if obj.get("totalCostWithReservedInstances") is not None else None
        })
        return _obj



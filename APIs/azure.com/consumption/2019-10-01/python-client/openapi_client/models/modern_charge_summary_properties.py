# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class ModernChargeSummaryProperties(BaseModel):
    """
    The properties of modern charge summary.
    """ # noqa: E501
    azure_charges: Optional[Amount] = Field(default=None, alias="azureCharges")
    billing_account_id: Optional[StrictStr] = Field(default=None, description="Billing Account Id", alias="billingAccountId")
    billing_period_id: Optional[StrictStr] = Field(default=None, description="The id of the billing period resource that the charge belongs to.", alias="billingPeriodId")
    billing_profile_id: Optional[StrictStr] = Field(default=None, description="Billing Profile Id", alias="billingProfileId")
    charges_billed_separately: Optional[Amount] = Field(default=None, alias="chargesBilledSeparately")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer Id", alias="customerId")
    invoice_section_id: Optional[StrictStr] = Field(default=None, description="Invoice Section Id", alias="invoiceSectionId")
    is_invoiced: Optional[StrictBool] = Field(default=None, description="Is charge Invoiced", alias="isInvoiced")
    marketplace_charges: Optional[Amount] = Field(default=None, alias="marketplaceCharges")
    usage_end: Optional[StrictStr] = Field(default=None, description="Usage end date.", alias="usageEnd")
    usage_start: Optional[StrictStr] = Field(default=None, description="Usage start date.", alias="usageStart")
    __properties: ClassVar[List[str]] = ["azureCharges", "billingAccountId", "billingPeriodId", "billingProfileId", "chargesBilledSeparately", "customerId", "invoiceSectionId", "isInvoiced", "marketplaceCharges", "usageEnd", "usageStart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModernChargeSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_account_id",
            "billing_period_id",
            "billing_profile_id",
            "customer_id",
            "invoice_section_id",
            "is_invoiced",
            "usage_end",
            "usage_start",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of azure_charges
        if self.azure_charges:
            _dict['azureCharges'] = self.azure_charges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charges_billed_separately
        if self.charges_billed_separately:
            _dict['chargesBilledSeparately'] = self.charges_billed_separately.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketplace_charges
        if self.marketplace_charges:
            _dict['marketplaceCharges'] = self.marketplace_charges.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModernChargeSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureCharges": Amount.from_dict(obj["azureCharges"]) if obj.get("azureCharges") is not None else None,
            "billingAccountId": obj.get("billingAccountId"),
            "billingPeriodId": obj.get("billingPeriodId"),
            "billingProfileId": obj.get("billingProfileId"),
            "chargesBilledSeparately": Amount.from_dict(obj["chargesBilledSeparately"]) if obj.get("chargesBilledSeparately") is not None else None,
            "customerId": obj.get("customerId"),
            "invoiceSectionId": obj.get("invoiceSectionId"),
            "isInvoiced": obj.get("isInvoiced"),
            "marketplaceCharges": Amount.from_dict(obj["marketplaceCharges"]) if obj.get("marketplaceCharges") is not None else None,
            "usageEnd": obj.get("usageEnd"),
            "usageStart": obj.get("usageStart")
        })
        return _obj



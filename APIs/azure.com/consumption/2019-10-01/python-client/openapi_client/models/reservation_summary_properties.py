# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReservationSummaryProperties(BaseModel):
    """
    The properties of the reservation summary.
    """ # noqa: E501
    avg_utilization_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is average utilization for the entire time range. (day or month depending on the grain)", alias="avgUtilizationPercentage")
    kind: Optional[StrictStr] = Field(default=None, description="The reservation kind.")
    max_utilization_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.", alias="maxUtilizationPercentage")
    min_utilization_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day", alias="minUtilizationPercentage")
    purchased_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is the purchased quantity for the reservationId.", alias="purchasedQuantity")
    remaining_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is the remaining quantity for the reservationId.", alias="remainingQuantity")
    reservation_id: Optional[StrictStr] = Field(default=None, description="The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.", alias="reservationId")
    reservation_order_id: Optional[StrictStr] = Field(default=None, description="The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.", alias="reservationOrderId")
    reserved_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days", alias="reservedHours")
    sku_name: Optional[StrictStr] = Field(default=None, description="This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.", alias="skuName")
    total_reserved_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is the total count of instances that are reserved for the reservationId.", alias="totalReservedQuantity")
    usage_date: Optional[datetime] = Field(default=None, description="Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.", alias="usageDate")
    used_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total used hours by the reservation", alias="usedHours")
    used_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is the used quantity for the reservationId.", alias="usedQuantity")
    utilized_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is the utilized percentage for the reservation Id.", alias="utilizedPercentage")
    __properties: ClassVar[List[str]] = ["avgUtilizationPercentage", "kind", "maxUtilizationPercentage", "minUtilizationPercentage", "purchasedQuantity", "remainingQuantity", "reservationId", "reservationOrderId", "reservedHours", "skuName", "totalReservedQuantity", "usageDate", "usedHours", "usedQuantity", "utilizedPercentage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReservationSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "avg_utilization_percentage",
            "kind",
            "max_utilization_percentage",
            "min_utilization_percentage",
            "purchased_quantity",
            "remaining_quantity",
            "reservation_id",
            "reservation_order_id",
            "reserved_hours",
            "sku_name",
            "total_reserved_quantity",
            "usage_date",
            "used_hours",
            "used_quantity",
            "utilized_percentage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReservationSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avgUtilizationPercentage": obj.get("avgUtilizationPercentage"),
            "kind": obj.get("kind"),
            "maxUtilizationPercentage": obj.get("maxUtilizationPercentage"),
            "minUtilizationPercentage": obj.get("minUtilizationPercentage"),
            "purchasedQuantity": obj.get("purchasedQuantity"),
            "remainingQuantity": obj.get("remainingQuantity"),
            "reservationId": obj.get("reservationId"),
            "reservationOrderId": obj.get("reservationOrderId"),
            "reservedHours": obj.get("reservedHours"),
            "skuName": obj.get("skuName"),
            "totalReservedQuantity": obj.get("totalReservedQuantity"),
            "usageDate": obj.get("usageDate"),
            "usedHours": obj.get("usedHours"),
            "usedQuantity": obj.get("usedQuantity"),
            "utilizedPercentage": obj.get("utilizedPercentage")
        })
        return _obj



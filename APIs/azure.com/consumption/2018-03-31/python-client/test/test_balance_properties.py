# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-03-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.balance_properties import BalanceProperties

class TestBalanceProperties(unittest.TestCase):
    """BalanceProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BalanceProperties:
        """Test BalanceProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BalanceProperties`
        """
        model = BalanceProperties()
        if include_optional:
            return BalanceProperties(
                adjustment_details = [
                    openapi_client.models.balance_properties_adjustment_details_inner.BalanceProperties_adjustmentDetails_inner(
                        name = '', 
                        value = 1.337, )
                    ],
                adjustments = 1.337,
                azure_marketplace_service_charges = 1.337,
                beginning_balance = 1.337,
                billing_frequency = 'Month',
                charges_billed_separately = 1.337,
                currency = '',
                ending_balance = 1.337,
                new_purchases = 1.337,
                new_purchases_details = [
                    openapi_client.models.balance_properties_new_purchases_details_inner.BalanceProperties_newPurchasesDetails_inner(
                        name = '', 
                        value = 1.337, )
                    ],
                price_hidden = True,
                service_overage = 1.337,
                total_overage = 1.337,
                total_usage = 1.337,
                utilized = 1.337
            )
        else:
            return BalanceProperties(
        )
        """

    def testBalanceProperties(self):
        """Test BalanceProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-03-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MarketplaceProperties(BaseModel):
    """
    The properties of the marketplace usage detail.
    """ # noqa: E501
    account_name: Optional[StrictStr] = Field(default=None, description="Account name.", alias="accountName")
    additional_properties: Optional[StrictStr] = Field(default=None, description="Additional details of this usage item. By default this is not populated, unless it's specified in $expand.", alias="additionalProperties")
    billing_period_id: Optional[StrictStr] = Field(default=None, description="The id of the billing period resource that the usage belongs to.", alias="billingPeriodId")
    consumed_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of usage.", alias="consumedQuantity")
    consumed_service: Optional[StrictStr] = Field(default=None, description="Consumed service name.", alias="consumedService")
    cost_center: Optional[StrictStr] = Field(default=None, description="The cost center of this department if it is a department and a costcenter exists", alias="costCenter")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO currency in which the meter is charged, for example, USD.")
    department_name: Optional[StrictStr] = Field(default=None, description="Department name.", alias="departmentName")
    instance_id: Optional[StrictStr] = Field(default=None, description="The uri of the resource instance that the usage is about.", alias="instanceId")
    instance_name: Optional[StrictStr] = Field(default=None, description="The name of the resource instance that the usage is about.", alias="instanceName")
    is_estimated: Optional[StrictBool] = Field(default=None, description="The estimated usage is subject to change.", alias="isEstimated")
    meter_id: Optional[StrictStr] = Field(default=None, description="The meter id (GUID).", alias="meterId")
    offer_name: Optional[StrictStr] = Field(default=None, description="The type of offer.", alias="offerName")
    order_number: Optional[StrictStr] = Field(default=None, description="The order number.", alias="orderNumber")
    plan_name: Optional[StrictStr] = Field(default=None, description="The name of plan.", alias="planName")
    pretax_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of cost before tax.", alias="pretaxCost")
    publisher_name: Optional[StrictStr] = Field(default=None, description="The name of publisher.", alias="publisherName")
    resource_group: Optional[StrictStr] = Field(default=None, description="The name of resource group.", alias="resourceGroup")
    resource_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The marketplace resource rate.", alias="resourceRate")
    subscription_guid: Optional[StrictStr] = Field(default=None, description="Subscription guid.", alias="subscriptionGuid")
    subscription_name: Optional[StrictStr] = Field(default=None, description="Subscription name.", alias="subscriptionName")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="The unit of measure.", alias="unitOfMeasure")
    usage_end: Optional[datetime] = Field(default=None, description="The end of the date time range covered by the usage detail.", alias="usageEnd")
    usage_start: Optional[datetime] = Field(default=None, description="The start of the date time range covered by the usage detail.", alias="usageStart")
    __properties: ClassVar[List[str]] = ["accountName", "additionalProperties", "billingPeriodId", "consumedQuantity", "consumedService", "costCenter", "currency", "departmentName", "instanceId", "instanceName", "isEstimated", "meterId", "offerName", "orderNumber", "planName", "pretaxCost", "publisherName", "resourceGroup", "resourceRate", "subscriptionGuid", "subscriptionName", "unitOfMeasure", "usageEnd", "usageStart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketplaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_name",
            "additional_properties",
            "billing_period_id",
            "consumed_quantity",
            "consumed_service",
            "cost_center",
            "currency",
            "department_name",
            "instance_id",
            "instance_name",
            "is_estimated",
            "meter_id",
            "offer_name",
            "order_number",
            "plan_name",
            "pretax_cost",
            "publisher_name",
            "resource_group",
            "resource_rate",
            "subscription_guid",
            "subscription_name",
            "unit_of_measure",
            "usage_end",
            "usage_start",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketplaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName": obj.get("accountName"),
            "additionalProperties": obj.get("additionalProperties"),
            "billingPeriodId": obj.get("billingPeriodId"),
            "consumedQuantity": obj.get("consumedQuantity"),
            "consumedService": obj.get("consumedService"),
            "costCenter": obj.get("costCenter"),
            "currency": obj.get("currency"),
            "departmentName": obj.get("departmentName"),
            "instanceId": obj.get("instanceId"),
            "instanceName": obj.get("instanceName"),
            "isEstimated": obj.get("isEstimated"),
            "meterId": obj.get("meterId"),
            "offerName": obj.get("offerName"),
            "orderNumber": obj.get("orderNumber"),
            "planName": obj.get("planName"),
            "pretaxCost": obj.get("pretaxCost"),
            "publisherName": obj.get("publisherName"),
            "resourceGroup": obj.get("resourceGroup"),
            "resourceRate": obj.get("resourceRate"),
            "subscriptionGuid": obj.get("subscriptionGuid"),
            "subscriptionName": obj.get("subscriptionName"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "usageEnd": obj.get("usageEnd"),
            "usageStart": obj.get("usageStart")
        })
        return _obj



# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-06-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.forecast_properties_confidence_levels_inner import ForecastPropertiesConfidenceLevelsInner
from typing import Optional, Set
from typing_extensions import Self

class ForecastProperties(BaseModel):
    """
    The properties of the forecast charge.
    """ # noqa: E501
    charge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of charge")
    charge_type: Optional[StrictStr] = Field(default=None, description="The type of the charge. Could be actual or forecast", alias="chargeType")
    confidence_levels: Optional[List[ForecastPropertiesConfidenceLevelsInner]] = Field(default=None, description="The details about the forecast confidence levels. This is populated only when chargeType is Forecast.", alias="confidenceLevels")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO currency in which the meter is charged, for example, USD.")
    grain: Optional[StrictStr] = Field(default=None, description="The granularity of forecast.")
    usage_date: Optional[StrictStr] = Field(default=None, description="The usage date of the forecast.", alias="usageDate")
    __properties: ClassVar[List[str]] = ["charge", "chargeType", "confidenceLevels", "currency", "grain", "usageDate"]

    @field_validator('charge_type')
    def charge_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Actual', 'Forecast']):
            raise ValueError("must be one of enum values ('Actual', 'Forecast')")
        return value

    @field_validator('grain')
    def grain_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Daily', 'Monthly', 'Yearly']):
            raise ValueError("must be one of enum values ('Daily', 'Monthly', 'Yearly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ForecastProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "charge",
            "confidence_levels",
            "currency",
            "usage_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in confidence_levels (list)
        _items = []
        if self.confidence_levels:
            for _item_confidence_levels in self.confidence_levels:
                if _item_confidence_levels:
                    _items.append(_item_confidence_levels.to_dict())
            _dict['confidenceLevels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ForecastProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "charge": obj.get("charge"),
            "chargeType": obj.get("chargeType"),
            "confidenceLevels": [ForecastPropertiesConfidenceLevelsInner.from_dict(_item) for _item in obj["confidenceLevels"]] if obj.get("confidenceLevels") is not None else None,
            "currency": obj.get("currency"),
            "grain": obj.get("grain"),
            "usageDate": obj.get("usageDate")
        })
        return _obj



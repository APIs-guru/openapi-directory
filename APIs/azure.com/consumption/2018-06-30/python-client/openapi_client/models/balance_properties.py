# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-06-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.balance_properties_adjustment_details_inner import BalancePropertiesAdjustmentDetailsInner
from openapi_client.models.balance_properties_new_purchases_details_inner import BalancePropertiesNewPurchasesDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class BalanceProperties(BaseModel):
    """
    The properties of the balance.
    """ # noqa: E501
    adjustment_details: Optional[List[BalancePropertiesAdjustmentDetailsInner]] = Field(default=None, description="List of Adjustments (Promo credit, SIE credit etc.).", alias="adjustmentDetails")
    adjustments: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total adjustment amount.")
    azure_marketplace_service_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total charges for Azure Marketplace.", alias="azureMarketplaceServiceCharges")
    beginning_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The beginning balance for the billing period.", alias="beginningBalance")
    billing_frequency: Optional[StrictStr] = Field(default=None, description="The billing frequency.", alias="billingFrequency")
    charges_billed_separately: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Charges Billed separately.", alias="chargesBilledSeparately")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO currency in which the meter is charged, for example, USD.")
    ending_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ending balance for the billing period (for open periods this will be updated daily).", alias="endingBalance")
    new_purchases: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total new purchase amount.", alias="newPurchases")
    new_purchases_details: Optional[List[BalancePropertiesNewPurchasesDetailsInner]] = Field(default=None, description="List of new purchases.", alias="newPurchasesDetails")
    price_hidden: Optional[StrictBool] = Field(default=None, description="Price is hidden or not.", alias="priceHidden")
    service_overage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overage for Azure services.", alias="serviceOverage")
    total_overage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="serviceOverage + chargesBilledSeparately.", alias="totalOverage")
    total_usage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Azure service commitment + total Overage.", alias="totalUsage")
    utilized: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total Commitment usage.")
    __properties: ClassVar[List[str]] = ["adjustmentDetails", "adjustments", "azureMarketplaceServiceCharges", "beginningBalance", "billingFrequency", "chargesBilledSeparately", "currency", "endingBalance", "newPurchases", "newPurchasesDetails", "priceHidden", "serviceOverage", "totalOverage", "totalUsage", "utilized"]

    @field_validator('billing_frequency')
    def billing_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Month', 'Quarter', 'Year']):
            raise ValueError("must be one of enum values ('Month', 'Quarter', 'Year')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BalanceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "adjustment_details",
            "adjustments",
            "azure_marketplace_service_charges",
            "beginning_balance",
            "charges_billed_separately",
            "currency",
            "ending_balance",
            "new_purchases",
            "new_purchases_details",
            "price_hidden",
            "service_overage",
            "total_overage",
            "total_usage",
            "utilized",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in adjustment_details (list)
        _items = []
        if self.adjustment_details:
            for _item_adjustment_details in self.adjustment_details:
                if _item_adjustment_details:
                    _items.append(_item_adjustment_details.to_dict())
            _dict['adjustmentDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in new_purchases_details (list)
        _items = []
        if self.new_purchases_details:
            for _item_new_purchases_details in self.new_purchases_details:
                if _item_new_purchases_details:
                    _items.append(_item_new_purchases_details.to_dict())
            _dict['newPurchasesDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BalanceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustmentDetails": [BalancePropertiesAdjustmentDetailsInner.from_dict(_item) for _item in obj["adjustmentDetails"]] if obj.get("adjustmentDetails") is not None else None,
            "adjustments": obj.get("adjustments"),
            "azureMarketplaceServiceCharges": obj.get("azureMarketplaceServiceCharges"),
            "beginningBalance": obj.get("beginningBalance"),
            "billingFrequency": obj.get("billingFrequency"),
            "chargesBilledSeparately": obj.get("chargesBilledSeparately"),
            "currency": obj.get("currency"),
            "endingBalance": obj.get("endingBalance"),
            "newPurchases": obj.get("newPurchases"),
            "newPurchasesDetails": [BalancePropertiesNewPurchasesDetailsInner.from_dict(_item) for _item in obj["newPurchasesDetails"]] if obj.get("newPurchasesDetails") is not None else None,
            "priceHidden": obj.get("priceHidden"),
            "serviceOverage": obj.get("serviceOverage"),
            "totalOverage": obj.get("totalOverage"),
            "totalUsage": obj.get("totalUsage"),
            "utilized": obj.get("utilized")
        })
        return _obj



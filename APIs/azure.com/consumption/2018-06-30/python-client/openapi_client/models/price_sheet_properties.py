# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-06-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.meter_details import MeterDetails
from typing import Optional, Set
from typing_extensions import Self

class PriceSheetProperties(BaseModel):
    """
    The properties of the price sheet.
    """ # noqa: E501
    billing_period_id: Optional[StrictStr] = Field(default=None, description="The id of the billing period resource that the usage belongs to.", alias="billingPeriodId")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency Code", alias="currencyCode")
    included_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Included quality for an offer", alias="includedQuantity")
    meter_details: Optional[MeterDetails] = Field(default=None, alias="meterDetails")
    meter_id: Optional[StrictStr] = Field(default=None, description="The meter id (GUID)", alias="meterId")
    offer_id: Optional[StrictStr] = Field(default=None, description="Offer Id", alias="offerId")
    part_number: Optional[StrictStr] = Field(default=None, description="Part Number", alias="partNumber")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="Unit of measure", alias="unitOfMeasure")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unit Price", alias="unitPrice")
    __properties: ClassVar[List[str]] = ["billingPeriodId", "currencyCode", "includedQuantity", "meterDetails", "meterId", "offerId", "partNumber", "unitOfMeasure", "unitPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceSheetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_period_id",
            "currency_code",
            "included_quantity",
            "meter_id",
            "offer_id",
            "part_number",
            "unit_of_measure",
            "unit_price",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meter_details
        if self.meter_details:
            _dict['meterDetails'] = self.meter_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceSheetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingPeriodId": obj.get("billingPeriodId"),
            "currencyCode": obj.get("currencyCode"),
            "includedQuantity": obj.get("includedQuantity"),
            "meterDetails": MeterDetails.from_dict(obj["meterDetails"]) if obj.get("meterDetails") is not None else None,
            "meterId": obj.get("meterId"),
            "offerId": obj.get("offerId"),
            "partNumber": obj.get("partNumber"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "unitPrice": obj.get("unitPrice")
        })
        return _obj



# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ChargeSummaryProperties(BaseModel):
    """
    The properties of the charge summary.
    """ # noqa: E501
    azure_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Azure Charges.", alias="azureCharges")
    billing_period_id: Optional[StrictStr] = Field(default=None, description="The id of the billing period resource that the charge belongs to.", alias="billingPeriodId")
    charges_billed_separately: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Charges Billed separately.", alias="chargesBilledSeparately")
    currency: Optional[StrictStr] = Field(default=None, description="Currency Code")
    marketplace_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Marketplace Charges.", alias="marketplaceCharges")
    usage_end: Optional[StrictStr] = Field(default=None, description=" Usage end date.", alias="usageEnd")
    usage_start: Optional[StrictStr] = Field(default=None, description="Usage start date.", alias="usageStart")
    __properties: ClassVar[List[str]] = ["azureCharges", "billingPeriodId", "chargesBilledSeparately", "currency", "marketplaceCharges", "usageEnd", "usageStart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChargeSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "azure_charges",
            "billing_period_id",
            "charges_billed_separately",
            "currency",
            "marketplace_charges",
            "usage_end",
            "usage_start",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChargeSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureCharges": obj.get("azureCharges"),
            "billingPeriodId": obj.get("billingPeriodId"),
            "chargesBilledSeparately": obj.get("chargesBilledSeparately"),
            "currency": obj.get("currency"),
            "marketplaceCharges": obj.get("marketplaceCharges"),
            "usageEnd": obj.get("usageEnd"),
            "usageStart": obj.get("usageStart")
        })
        return _obj



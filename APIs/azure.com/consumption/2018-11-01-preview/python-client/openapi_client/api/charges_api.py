# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.charges_list_by_billing_account import ChargesListByBillingAccount
from openapi_client.models.charges_list_by_billing_profile import ChargesListByBillingProfile
from openapi_client.models.charges_list_by_invoice_section import ChargesListByInvoiceSection

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ChargesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def charges_by_billing_account_list(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        apply: Annotated[Optional[StrictStr], Field(description="May be used to group charges by properties/billingProfileId, or properties/invoiceSectionId.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ChargesListByBillingAccount:
        """charges_by_billing_account_list

        Lists the charges by billingAccountId for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param apply: May be used to group charges by properties/billingProfileId, or properties/invoiceSectionId.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_billing_account_list_serialize(
            billing_account_id=billing_account_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByBillingAccount",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def charges_by_billing_account_list_with_http_info(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        apply: Annotated[Optional[StrictStr], Field(description="May be used to group charges by properties/billingProfileId, or properties/invoiceSectionId.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ChargesListByBillingAccount]:
        """charges_by_billing_account_list

        Lists the charges by billingAccountId for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param apply: May be used to group charges by properties/billingProfileId, or properties/invoiceSectionId.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_billing_account_list_serialize(
            billing_account_id=billing_account_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByBillingAccount",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def charges_by_billing_account_list_without_preload_content(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        apply: Annotated[Optional[StrictStr], Field(description="May be used to group charges by properties/billingProfileId, or properties/invoiceSectionId.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """charges_by_billing_account_list

        Lists the charges by billingAccountId for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param apply: May be used to group charges by properties/billingProfileId, or properties/invoiceSectionId.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_billing_account_list_serialize(
            billing_account_id=billing_account_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByBillingAccount",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _charges_by_billing_account_list_serialize(
        self,
        billing_account_id,
        api_version,
        start_date,
        end_date,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if billing_account_id is not None:
            _path_params['billingAccountId'] = billing_account_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_date is not None:
            
            _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            
            _query_params.append(('endDate', end_date))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/charges',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def charges_by_billing_profile_list(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        billing_profile_id: Annotated[StrictStr, Field(description="Billing Profile Id.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ChargesListByBillingProfile:
        """charges_by_billing_profile_list

        Lists the charges by billing profile id for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param billing_profile_id: Billing Profile Id. (required)
        :type billing_profile_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_billing_profile_list_serialize(
            billing_account_id=billing_account_id,
            billing_profile_id=billing_profile_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByBillingProfile",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def charges_by_billing_profile_list_with_http_info(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        billing_profile_id: Annotated[StrictStr, Field(description="Billing Profile Id.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ChargesListByBillingProfile]:
        """charges_by_billing_profile_list

        Lists the charges by billing profile id for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param billing_profile_id: Billing Profile Id. (required)
        :type billing_profile_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_billing_profile_list_serialize(
            billing_account_id=billing_account_id,
            billing_profile_id=billing_profile_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByBillingProfile",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def charges_by_billing_profile_list_without_preload_content(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        billing_profile_id: Annotated[StrictStr, Field(description="Billing Profile Id.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """charges_by_billing_profile_list

        Lists the charges by billing profile id for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param billing_profile_id: Billing Profile Id. (required)
        :type billing_profile_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_billing_profile_list_serialize(
            billing_account_id=billing_account_id,
            billing_profile_id=billing_profile_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByBillingProfile",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _charges_by_billing_profile_list_serialize(
        self,
        billing_account_id,
        billing_profile_id,
        api_version,
        start_date,
        end_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if billing_account_id is not None:
            _path_params['billingAccountId'] = billing_account_id
        if billing_profile_id is not None:
            _path_params['billingProfileId'] = billing_profile_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_date is not None:
            
            _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            
            _query_params.append(('endDate', end_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.Consumption/charges',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def charges_by_invoice_section_list(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        invoice_section_id: Annotated[StrictStr, Field(description="Invoice Section Id.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        apply: Annotated[Optional[StrictStr], Field(description="May be used to group charges by properties/productName.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ChargesListByInvoiceSection:
        """charges_by_invoice_section_list

        Lists the charges by invoice section id for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param invoice_section_id: Invoice Section Id. (required)
        :type invoice_section_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param apply: May be used to group charges by properties/productName.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_invoice_section_list_serialize(
            billing_account_id=billing_account_id,
            invoice_section_id=invoice_section_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByInvoiceSection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def charges_by_invoice_section_list_with_http_info(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        invoice_section_id: Annotated[StrictStr, Field(description="Invoice Section Id.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        apply: Annotated[Optional[StrictStr], Field(description="May be used to group charges by properties/productName.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ChargesListByInvoiceSection]:
        """charges_by_invoice_section_list

        Lists the charges by invoice section id for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param invoice_section_id: Invoice Section Id. (required)
        :type invoice_section_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param apply: May be used to group charges by properties/productName.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_invoice_section_list_serialize(
            billing_account_id=billing_account_id,
            invoice_section_id=invoice_section_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByInvoiceSection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def charges_by_invoice_section_list_without_preload_content(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        invoice_section_id: Annotated[StrictStr, Field(description="Invoice Section Id.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-11-01-preview.")],
        start_date: Annotated[StrictStr, Field(description="Start date")],
        end_date: Annotated[StrictStr, Field(description="End date")],
        apply: Annotated[Optional[StrictStr], Field(description="May be used to group charges by properties/productName.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """charges_by_invoice_section_list

        Lists the charges by invoice section id for given start and end date. Start and end date are used to determine the billing period. For current month, the data will be provided from month to date. If there are no charges for a month then that month will show all zeroes.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param invoice_section_id: Invoice Section Id. (required)
        :type invoice_section_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
        :type api_version: str
        :param start_date: Start date (required)
        :type start_date: str
        :param end_date: End date (required)
        :type end_date: str
        :param apply: May be used to group charges by properties/productName.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._charges_by_invoice_section_list_serialize(
            billing_account_id=billing_account_id,
            invoice_section_id=invoice_section_id,
            api_version=api_version,
            start_date=start_date,
            end_date=end_date,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChargesListByInvoiceSection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _charges_by_invoice_section_list_serialize(
        self,
        billing_account_id,
        invoice_section_id,
        api_version,
        start_date,
        end_date,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if billing_account_id is not None:
            _path_params['billingAccountId'] = billing_account_id
        if invoice_section_id is not None:
            _path_params['invoiceSectionId'] = invoice_section_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_date is not None:
            
            _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            
            _query_params.append(('endDate', end_date))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}/providers/Microsoft.Consumption/charges',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



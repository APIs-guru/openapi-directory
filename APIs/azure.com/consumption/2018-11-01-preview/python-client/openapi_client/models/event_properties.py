# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class EventProperties(BaseModel):
    """
    The event properties.
    """ # noqa: E501
    adjustments: Optional[Amount] = None
    charges: Optional[Amount] = None
    closed_balance: Optional[Amount] = Field(default=None, alias="closedBalance")
    credit_expired: Optional[Amount] = Field(default=None, alias="creditExpired")
    description: Optional[StrictStr] = Field(default=None, description="Transaction description.")
    event_type: Optional[StrictStr] = Field(default=None, description="The type of event.", alias="eventType")
    invoice_number: Optional[StrictStr] = Field(default=None, description="Invoice Number.", alias="invoiceNumber")
    new_credit: Optional[Amount] = Field(default=None, alias="newCredit")
    transaction_date: Optional[datetime] = Field(default=None, description="Transaction Date.", alias="transactionDate")
    __properties: ClassVar[List[str]] = ["adjustments", "charges", "closedBalance", "creditExpired", "description", "eventType", "invoiceNumber", "newCredit", "transactionDate"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NewCredit', 'ExpiredCredit', 'SettledCharges']):
            raise ValueError("must be one of enum values ('NewCredit', 'ExpiredCredit', 'SettledCharges')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "invoice_number",
            "transaction_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjustments
        if self.adjustments:
            _dict['adjustments'] = self.adjustments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charges
        if self.charges:
            _dict['charges'] = self.charges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of closed_balance
        if self.closed_balance:
            _dict['closedBalance'] = self.closed_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_expired
        if self.credit_expired:
            _dict['creditExpired'] = self.credit_expired.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_credit
        if self.new_credit:
            _dict['newCredit'] = self.new_credit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustments": Amount.from_dict(obj["adjustments"]) if obj.get("adjustments") is not None else None,
            "charges": Amount.from_dict(obj["charges"]) if obj.get("charges") is not None else None,
            "closedBalance": Amount.from_dict(obj["closedBalance"]) if obj.get("closedBalance") is not None else None,
            "creditExpired": Amount.from_dict(obj["creditExpired"]) if obj.get("creditExpired") is not None else None,
            "description": obj.get("description"),
            "eventType": obj.get("eventType"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "newCredit": Amount.from_dict(obj["newCredit"]) if obj.get("newCredit") is not None else None,
            "transactionDate": obj.get("transactionDate")
        })
        return _obj



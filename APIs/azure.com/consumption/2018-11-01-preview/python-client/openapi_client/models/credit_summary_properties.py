# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.credit_balance_summary import CreditBalanceSummary
from typing import Optional, Set
from typing_extensions import Self

class CreditSummaryProperties(BaseModel):
    """
    The properties of the credit summary.
    """ # noqa: E501
    balance_summary: Optional[CreditBalanceSummary] = Field(default=None, alias="balanceSummary")
    expired_credit: Optional[Amount] = Field(default=None, alias="expiredCredit")
    pending_credit_adjustments: Optional[Amount] = Field(default=None, alias="pendingCreditAdjustments")
    pending_eligible_charges: Optional[Amount] = Field(default=None, alias="pendingEligibleCharges")
    __properties: ClassVar[List[str]] = ["balanceSummary", "expiredCredit", "pendingCreditAdjustments", "pendingEligibleCharges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of balance_summary
        if self.balance_summary:
            _dict['balanceSummary'] = self.balance_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expired_credit
        if self.expired_credit:
            _dict['expiredCredit'] = self.expired_credit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pending_credit_adjustments
        if self.pending_credit_adjustments:
            _dict['pendingCreditAdjustments'] = self.pending_credit_adjustments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pending_eligible_charges
        if self.pending_eligible_charges:
            _dict['pendingEligibleCharges'] = self.pending_eligible_charges.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "balanceSummary": CreditBalanceSummary.from_dict(obj["balanceSummary"]) if obj.get("balanceSummary") is not None else None,
            "expiredCredit": Amount.from_dict(obj["expiredCredit"]) if obj.get("expiredCredit") is not None else None,
            "pendingCreditAdjustments": Amount.from_dict(obj["pendingCreditAdjustments"]) if obj.get("pendingCreditAdjustments") is not None else None,
            "pendingEligibleCharges": Amount.from_dict(obj["pendingEligibleCharges"]) if obj.get("pendingEligibleCharges") is not None else None
        })
        return _obj



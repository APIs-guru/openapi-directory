# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from typing import Optional, Set
from typing_extensions import Self

class BillingProfileProperties(BaseModel):
    """
    The properties of the billing profile.
    """ # noqa: E501
    billing_address: Optional[Address] = Field(default=None, alias="billingAddress")
    billing_contact: Optional[StrictStr] = Field(default=None, description="Billing contact.", alias="billingContact")
    currency: Optional[StrictStr] = Field(default=None, description="Currency on the billing profile.")
    display_name: Optional[StrictStr] = Field(default=None, description="The billing profile name.", alias="displayName")
    email_invoice: Optional[StrictBool] = Field(default=None, description="Email invoice.", alias="emailInvoice")
    invoice_day: Optional[StrictInt] = Field(default=None, description="Invoice day.", alias="invoiceDay")
    po_number: Optional[StrictStr] = Field(default=None, description="Purchase order number.", alias="poNumber")
    __properties: ClassVar[List[str]] = ["billingAddress", "billingContact", "currency", "displayName", "emailInvoice", "invoiceDay", "poNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingProfileProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_contact",
            "currency",
            "email_invoice",
            "invoice_day",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billingAddress'] = self.billing_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingProfileProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAddress": Address.from_dict(obj["billingAddress"]) if obj.get("billingAddress") is not None else None,
            "billingContact": obj.get("billingContact"),
            "currency": obj.get("currency"),
            "displayName": obj.get("displayName"),
            "emailInvoice": obj.get("emailInvoice"),
            "invoiceDay": obj.get("invoiceDay"),
            "poNumber": obj.get("poNumber")
        })
        return _obj



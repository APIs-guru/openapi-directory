# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-08-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ManagementGroupAggregatedCostProperties(BaseModel):
    """
    The properties of the Management Group Aggregated Cost.
    """ # noqa: E501
    azure_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Azure Charges.", alias="azureCharges")
    billing_period_id: Optional[StrictStr] = Field(default=None, description="The id of the billing period resource that the aggregated cost belongs to.", alias="billingPeriodId")
    charges_billed_separately: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Charges Billed Separately.", alias="chargesBilledSeparately")
    children: Optional[List[ManagementGroupAggregatedCostResult]] = Field(default=None, description="Children of a management group")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO currency in which the meter is charged, for example, USD.")
    marketplace_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Marketplace Charges.", alias="marketplaceCharges")
    usage_end: Optional[datetime] = Field(default=None, description="The end of the date time range covered by the aggregated cost.", alias="usageEnd")
    usage_start: Optional[datetime] = Field(default=None, description="The start of the date time range covered by aggregated cost.", alias="usageStart")
    __properties: ClassVar[List[str]] = ["azureCharges", "billingPeriodId", "chargesBilledSeparately", "children", "currency", "marketplaceCharges", "usageEnd", "usageStart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagementGroupAggregatedCostProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "azure_charges",
            "billing_period_id",
            "charges_billed_separately",
            "currency",
            "marketplace_charges",
            "usage_end",
            "usage_start",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagementGroupAggregatedCostProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureCharges": obj.get("azureCharges"),
            "billingPeriodId": obj.get("billingPeriodId"),
            "chargesBilledSeparately": obj.get("chargesBilledSeparately"),
            "children": [ManagementGroupAggregatedCostResult.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "currency": obj.get("currency"),
            "marketplaceCharges": obj.get("marketplaceCharges"),
            "usageEnd": obj.get("usageEnd"),
            "usageStart": obj.get("usageStart")
        })
        return _obj

from openapi_client.models.management_group_aggregated_cost_result import ManagementGroupAggregatedCostResult
# TODO: Rewrite to not use raise_errors
ManagementGroupAggregatedCostProperties.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-08-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.meter_details import MeterDetails
from typing import Optional, Set
from typing_extensions import Self

class UsageDetailProperties(BaseModel):
    """
    The properties of the usage detail.
    """ # noqa: E501
    account_name: Optional[StrictStr] = Field(default=None, description="Account name.", alias="accountName")
    additional_properties: Optional[StrictStr] = Field(default=None, description="Additional details of this usage item. By default this is not populated, unless it's specified in $expand.", alias="additionalProperties")
    billable_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The billable usage quantity.", alias="billableQuantity")
    billing_period_id: Optional[StrictStr] = Field(default=None, description="The id of the billing period resource that the usage belongs to.", alias="billingPeriodId")
    charges_billed_separately: Optional[StrictBool] = Field(default=None, description="Charges billed separately", alias="chargesBilledSeparately")
    consumed_service: Optional[StrictStr] = Field(default=None, description="Consumed service name.", alias="consumedService")
    cost_center: Optional[StrictStr] = Field(default=None, description="The cost center of this department if it is a department and a costcenter exists", alias="costCenter")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO currency in which the meter is charged, for example, USD.")
    department_name: Optional[StrictStr] = Field(default=None, description="Department name.", alias="departmentName")
    instance_id: Optional[StrictStr] = Field(default=None, description="The uri of the resource instance that the usage is about.", alias="instanceId")
    instance_location: Optional[StrictStr] = Field(default=None, description="The location of the resource instance that the usage is about.", alias="instanceLocation")
    instance_name: Optional[StrictStr] = Field(default=None, description="The name of the resource instance that the usage is about.", alias="instanceName")
    invoice_id: Optional[StrictStr] = Field(default=None, description="The id of the invoice resource that the usage belongs to.", alias="invoiceId")
    is_estimated: Optional[StrictBool] = Field(default=None, description="The estimated usage is subject to change.", alias="isEstimated")
    location: Optional[StrictStr] = Field(default=None, description="Resource Location")
    meter_details: Optional[MeterDetails] = Field(default=None, alias="meterDetails")
    meter_id: Optional[StrictStr] = Field(default=None, description="The meter id (GUID).", alias="meterId")
    offer_id: Optional[StrictStr] = Field(default=None, description="Offer Id", alias="offerId")
    part_number: Optional[StrictStr] = Field(default=None, description="Part Number", alias="partNumber")
    pretax_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of cost before tax.", alias="pretaxCost")
    product: Optional[StrictStr] = Field(default=None, description="Product name.")
    resource_guid: Optional[StrictStr] = Field(default=None, description="Resource Guid", alias="resourceGuid")
    subscription_guid: Optional[StrictStr] = Field(default=None, description="Subscription guid.", alias="subscriptionGuid")
    subscription_name: Optional[StrictStr] = Field(default=None, description="Subscription name.", alias="subscriptionName")
    usage_end: Optional[datetime] = Field(default=None, description="The end of the date time range covered by the usage detail.", alias="usageEnd")
    usage_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of usage.", alias="usageQuantity")
    usage_start: Optional[datetime] = Field(default=None, description="The start of the date time range covered by the usage detail.", alias="usageStart")
    __properties: ClassVar[List[str]] = ["accountName", "additionalProperties", "billableQuantity", "billingPeriodId", "chargesBilledSeparately", "consumedService", "costCenter", "currency", "departmentName", "instanceId", "instanceLocation", "instanceName", "invoiceId", "isEstimated", "location", "meterDetails", "meterId", "offerId", "partNumber", "pretaxCost", "product", "resourceGuid", "subscriptionGuid", "subscriptionName", "usageEnd", "usageQuantity", "usageStart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageDetailProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_name",
            "additional_properties",
            "billable_quantity",
            "billing_period_id",
            "charges_billed_separately",
            "consumed_service",
            "cost_center",
            "currency",
            "department_name",
            "instance_id",
            "instance_location",
            "instance_name",
            "invoice_id",
            "is_estimated",
            "location",
            "meter_id",
            "offer_id",
            "part_number",
            "pretax_cost",
            "product",
            "resource_guid",
            "subscription_guid",
            "subscription_name",
            "usage_end",
            "usage_quantity",
            "usage_start",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meter_details
        if self.meter_details:
            _dict['meterDetails'] = self.meter_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageDetailProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName": obj.get("accountName"),
            "additionalProperties": obj.get("additionalProperties"),
            "billableQuantity": obj.get("billableQuantity"),
            "billingPeriodId": obj.get("billingPeriodId"),
            "chargesBilledSeparately": obj.get("chargesBilledSeparately"),
            "consumedService": obj.get("consumedService"),
            "costCenter": obj.get("costCenter"),
            "currency": obj.get("currency"),
            "departmentName": obj.get("departmentName"),
            "instanceId": obj.get("instanceId"),
            "instanceLocation": obj.get("instanceLocation"),
            "instanceName": obj.get("instanceName"),
            "invoiceId": obj.get("invoiceId"),
            "isEstimated": obj.get("isEstimated"),
            "location": obj.get("location"),
            "meterDetails": MeterDetails.from_dict(obj["meterDetails"]) if obj.get("meterDetails") is not None else None,
            "meterId": obj.get("meterId"),
            "offerId": obj.get("offerId"),
            "partNumber": obj.get("partNumber"),
            "pretaxCost": obj.get("pretaxCost"),
            "product": obj.get("product"),
            "resourceGuid": obj.get("resourceGuid"),
            "subscriptionGuid": obj.get("subscriptionGuid"),
            "subscriptionName": obj.get("subscriptionName"),
            "usageEnd": obj.get("usageEnd"),
            "usageQuantity": obj.get("usageQuantity"),
            "usageStart": obj.get("usageStart")
        })
        return _obj



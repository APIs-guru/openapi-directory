# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.usage_details_list_result import UsageDetailsListResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class UsageDetailsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def usage_details_list(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list

        Lists the usage details for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list

        Lists the usage details for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list

        Lists the usage details for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_serialize(
        self,
        subscription_id,
        api_version,
        expand,
        filter,
        skiptoken,
        top,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_by_billing_account(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_by_billing_account

        Lists the usage details by billingAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_billing_account_serialize(
            billing_account_id=billing_account_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_by_billing_account_with_http_info(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_by_billing_account

        Lists the usage details by billingAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_billing_account_serialize(
            billing_account_id=billing_account_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_by_billing_account_without_preload_content(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_by_billing_account

        Lists the usage details by billingAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_billing_account_serialize(
            billing_account_id=billing_account_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_by_billing_account_serialize(
        self,
        billing_account_id,
        api_version,
        expand,
        filter,
        skiptoken,
        top,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if billing_account_id is not None:
            _path_params['billingAccountId'] = billing_account_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_by_billing_period(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_by_billing_period

        Lists the usage details for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_billing_period_serialize(
            subscription_id=subscription_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_by_billing_period_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_by_billing_period

        Lists the usage details for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_billing_period_serialize(
            subscription_id=subscription_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_by_billing_period_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_by_billing_period

        Lists the usage details for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_billing_period_serialize(
            subscription_id=subscription_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_by_billing_period_serialize(
        self,
        subscription_id,
        billing_period_name,
        api_version,
        expand,
        filter,
        apply,
        skiptoken,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if billing_period_name is not None:
            _path_params['billingPeriodName'] = billing_period_name
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_by_department(
        self,
        department_id: Annotated[StrictStr, Field(description="Department ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_by_department

        Lists the usage details by departmentId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param department_id: Department ID (required)
        :type department_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_department_serialize(
            department_id=department_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_by_department_with_http_info(
        self,
        department_id: Annotated[StrictStr, Field(description="Department ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_by_department

        Lists the usage details by departmentId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param department_id: Department ID (required)
        :type department_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_department_serialize(
            department_id=department_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_by_department_without_preload_content(
        self,
        department_id: Annotated[StrictStr, Field(description="Department ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_by_department

        Lists the usage details by departmentId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param department_id: Department ID (required)
        :type department_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_department_serialize(
            department_id=department_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_by_department_serialize(
        self,
        department_id,
        api_version,
        expand,
        filter,
        skiptoken,
        top,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if department_id is not None:
            _path_params['departmentId'] = department_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_by_enrollment_account(
        self,
        enrollment_account_id: Annotated[StrictStr, Field(description="EnrollmentAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_by_enrollment_account

        Lists the usage details by enrollmentAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param enrollment_account_id: EnrollmentAccount ID (required)
        :type enrollment_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_enrollment_account_serialize(
            enrollment_account_id=enrollment_account_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_by_enrollment_account_with_http_info(
        self,
        enrollment_account_id: Annotated[StrictStr, Field(description="EnrollmentAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_by_enrollment_account

        Lists the usage details by enrollmentAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param enrollment_account_id: EnrollmentAccount ID (required)
        :type enrollment_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_enrollment_account_serialize(
            enrollment_account_id=enrollment_account_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_by_enrollment_account_without_preload_content(
        self,
        enrollment_account_id: Annotated[StrictStr, Field(description="EnrollmentAccount ID")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_by_enrollment_account

        Lists the usage details by enrollmentAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param enrollment_account_id: EnrollmentAccount ID (required)
        :type enrollment_account_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_enrollment_account_serialize(
            enrollment_account_id=enrollment_account_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_by_enrollment_account_serialize(
        self,
        enrollment_account_id,
        api_version,
        expand,
        filter,
        skiptoken,
        top,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if enrollment_account_id is not None:
            _path_params['enrollmentAccountId'] = enrollment_account_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_by_management_group(
        self,
        management_group_id: Annotated[StrictStr, Field(description="Azure Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_by_management_group

        Lists the usage detail records for all subscriptions belonging to a management group scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param management_group_id: Azure Management Group ID. (required)
        :type management_group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_management_group_serialize(
            management_group_id=management_group_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_by_management_group_with_http_info(
        self,
        management_group_id: Annotated[StrictStr, Field(description="Azure Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_by_management_group

        Lists the usage detail records for all subscriptions belonging to a management group scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param management_group_id: Azure Management Group ID. (required)
        :type management_group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_management_group_serialize(
            management_group_id=management_group_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_by_management_group_without_preload_content(
        self,
        management_group_id: Annotated[StrictStr, Field(description="Azure Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_by_management_group

        Lists the usage detail records for all subscriptions belonging to a management group scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param management_group_id: Azure Management Group ID. (required)
        :type management_group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_by_management_group_serialize(
            management_group_id=management_group_id,
            api_version=api_version,
            expand=expand,
            filter=filter,
            skiptoken=skiptoken,
            top=top,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_by_management_group_serialize(
        self,
        management_group_id,
        api_version,
        expand,
        filter,
        skiptoken,
        top,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if management_group_id is not None:
            _path_params['managementGroupId'] = management_group_id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_for_billing_period_by_billing_account(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_for_billing_period_by_billing_account

        Lists the usage details based on billingAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_billing_account_serialize(
            billing_account_id=billing_account_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_for_billing_period_by_billing_account_with_http_info(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_for_billing_period_by_billing_account

        Lists the usage details based on billingAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_billing_account_serialize(
            billing_account_id=billing_account_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_for_billing_period_by_billing_account_without_preload_content(
        self,
        billing_account_id: Annotated[StrictStr, Field(description="BillingAccount ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_for_billing_period_by_billing_account

        Lists the usage details based on billingAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param billing_account_id: BillingAccount ID (required)
        :type billing_account_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_billing_account_serialize(
            billing_account_id=billing_account_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_for_billing_period_by_billing_account_serialize(
        self,
        billing_account_id,
        billing_period_name,
        api_version,
        expand,
        filter,
        apply,
        skiptoken,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if billing_account_id is not None:
            _path_params['billingAccountId'] = billing_account_id
        if billing_period_name is not None:
            _path_params['billingPeriodName'] = billing_period_name
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_for_billing_period_by_department(
        self,
        department_id: Annotated[StrictStr, Field(description="Department ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_for_billing_period_by_department

        Lists the usage details based on departmentId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param department_id: Department ID (required)
        :type department_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_department_serialize(
            department_id=department_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_for_billing_period_by_department_with_http_info(
        self,
        department_id: Annotated[StrictStr, Field(description="Department ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_for_billing_period_by_department

        Lists the usage details based on departmentId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param department_id: Department ID (required)
        :type department_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_department_serialize(
            department_id=department_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_for_billing_period_by_department_without_preload_content(
        self,
        department_id: Annotated[StrictStr, Field(description="Department ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_for_billing_period_by_department

        Lists the usage details based on departmentId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param department_id: Department ID (required)
        :type department_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_department_serialize(
            department_id=department_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_for_billing_period_by_department_serialize(
        self,
        department_id,
        billing_period_name,
        api_version,
        expand,
        filter,
        apply,
        skiptoken,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if department_id is not None:
            _path_params['departmentId'] = department_id
        if billing_period_name is not None:
            _path_params['billingPeriodName'] = billing_period_name
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_for_billing_period_by_enrollment_account(
        self,
        enrollment_account_id: Annotated[StrictStr, Field(description="EnrollmentAccount ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_for_billing_period_by_enrollment_account

        Lists the usage details based on enrollmentAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param enrollment_account_id: EnrollmentAccount ID (required)
        :type enrollment_account_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_enrollment_account_serialize(
            enrollment_account_id=enrollment_account_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_for_billing_period_by_enrollment_account_with_http_info(
        self,
        enrollment_account_id: Annotated[StrictStr, Field(description="EnrollmentAccount ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_for_billing_period_by_enrollment_account

        Lists the usage details based on enrollmentAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param enrollment_account_id: EnrollmentAccount ID (required)
        :type enrollment_account_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_enrollment_account_serialize(
            enrollment_account_id=enrollment_account_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_for_billing_period_by_enrollment_account_without_preload_content(
        self,
        enrollment_account_id: Annotated[StrictStr, Field(description="EnrollmentAccount ID")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_for_billing_period_by_enrollment_account

        Lists the usage details based on enrollmentAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param enrollment_account_id: EnrollmentAccount ID (required)
        :type enrollment_account_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_enrollment_account_serialize(
            enrollment_account_id=enrollment_account_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_for_billing_period_by_enrollment_account_serialize(
        self,
        enrollment_account_id,
        billing_period_name,
        api_version,
        expand,
        filter,
        apply,
        skiptoken,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if enrollment_account_id is not None:
            _path_params['enrollmentAccountId'] = enrollment_account_id
        if billing_period_name is not None:
            _path_params['billingPeriodName'] = billing_period_name
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def usage_details_list_for_billing_period_by_management_group(
        self,
        management_group_id: Annotated[StrictStr, Field(description="Azure Management Group ID.")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageDetailsListResult:
        """usage_details_list_for_billing_period_by_management_group

        Lists the usage detail records for all subscriptions belonging to a management group scope by specified billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param management_group_id: Azure Management Group ID. (required)
        :type management_group_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_management_group_serialize(
            management_group_id=management_group_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def usage_details_list_for_billing_period_by_management_group_with_http_info(
        self,
        management_group_id: Annotated[StrictStr, Field(description="Azure Management Group ID.")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageDetailsListResult]:
        """usage_details_list_for_billing_period_by_management_group

        Lists the usage detail records for all subscriptions belonging to a management group scope by specified billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param management_group_id: Azure Management Group ID. (required)
        :type management_group_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_management_group_serialize(
            management_group_id=management_group_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def usage_details_list_for_billing_period_by_management_group_without_preload_content(
        self,
        management_group_id: Annotated[StrictStr, Field(description="Azure Management Group ID.")],
        billing_period_name: Annotated[StrictStr, Field(description="Billing Period Name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-10-01.")],
        expand: Annotated[Optional[StrictStr], Field(description="May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """usage_details_list_for_billing_period_by_management_group

        Lists the usage detail records for all subscriptions belonging to a management group scope by specified billing period. Usage details are available via this API only for May 1, 2014 or later.

        :param management_group_id: Azure Management Group ID. (required)
        :type management_group_id: str
        :param billing_period_name: Billing Period Name. (required)
        :type billing_period_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-10-01. (required)
        :type api_version: str
        :param expand: May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
        :type expand: str
        :param filter: May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
        :type filter: str
        :param apply: OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
        :type apply: str
        :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._usage_details_list_for_billing_period_by_management_group_serialize(
            management_group_id=management_group_id,
            billing_period_name=billing_period_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            apply=apply,
            skiptoken=skiptoken,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsageDetailsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _usage_details_list_for_billing_period_by_management_group_serialize(
        self,
        management_group_id,
        billing_period_name,
        api_version,
        expand,
        filter,
        apply,
        skiptoken,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if management_group_id is not None:
            _path_params['managementGroupId'] = management_group_id
        if billing_period_name is not None:
            _path_params['billingPeriodName'] = billing_period_name
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



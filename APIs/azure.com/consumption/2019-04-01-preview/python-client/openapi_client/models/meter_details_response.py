# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MeterDetailsResponse(BaseModel):
    """
    The properties of the meter detail.
    """ # noqa: E501
    meter_category: Optional[StrictStr] = Field(default=None, description="The category of the meter, for example, 'Cloud services', 'Networking', etc..", alias="meterCategory")
    meter_name: Optional[StrictStr] = Field(default=None, description="The name of the meter, within the given meter category", alias="meterName")
    meter_sub_category: Optional[StrictStr] = Field(default=None, description="The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..", alias="meterSubCategory")
    service_family: Optional[StrictStr] = Field(default=None, description="The service family.", alias="serviceFamily")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.", alias="unitOfMeasure")
    __properties: ClassVar[List[str]] = ["meterCategory", "meterName", "meterSubCategory", "serviceFamily", "unitOfMeasure"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeterDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "meter_category",
            "meter_name",
            "meter_sub_category",
            "service_family",
            "unit_of_measure",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeterDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meterCategory": obj.get("meterCategory"),
            "meterName": obj.get("meterName"),
            "meterSubCategory": obj.get("meterSubCategory"),
            "serviceFamily": obj.get("serviceFamily"),
            "unitOfMeasure": obj.get("unitOfMeasure")
        })
        return _obj



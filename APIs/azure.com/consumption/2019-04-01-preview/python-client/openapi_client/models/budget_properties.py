# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.budget_time_period import BudgetTimePeriod
from openapi_client.models.current_spend import CurrentSpend
from openapi_client.models.filters import Filters
from openapi_client.models.notification import Notification
from typing import Optional, Set
from typing_extensions import Self

class BudgetProperties(BaseModel):
    """
    The properties of the budget.
    """ # noqa: E501
    amount: Union[StrictFloat, StrictInt] = Field(description="The total amount of cost to track with the budget")
    category: StrictStr = Field(description="The category of the budget, whether the budget tracks cost or usage.")
    current_spend: Optional[CurrentSpend] = Field(default=None, alias="currentSpend")
    filters: Optional[Filters] = None
    notifications: Optional[Dict[str, Notification]] = Field(default=None, description="Dictionary of notifications associated with the budget. Budget can have up to five notifications.")
    time_grain: StrictStr = Field(description="The time covered by a budget. Tracking of the amount will be reset based on the time grain.", alias="timeGrain")
    time_period: BudgetTimePeriod = Field(alias="timePeriod")
    __properties: ClassVar[List[str]] = ["amount", "category", "currentSpend", "filters", "notifications", "timeGrain", "timePeriod"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Cost', 'Usage']):
            raise ValueError("must be one of enum values ('Cost', 'Usage')")
        return value

    @field_validator('time_grain')
    def time_grain_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Monthly', 'Quarterly', 'Annually']):
            raise ValueError("must be one of enum values ('Monthly', 'Quarterly', 'Annually')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BudgetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_spend
        if self.current_spend:
            _dict['currentSpend'] = self.current_spend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in notifications (dict)
        _field_dict = {}
        if self.notifications:
            for _key_notifications in self.notifications:
                if self.notifications[_key_notifications]:
                    _field_dict[_key_notifications] = self.notifications[_key_notifications].to_dict()
            _dict['notifications'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of time_period
        if self.time_period:
            _dict['timePeriod'] = self.time_period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BudgetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "category": obj.get("category"),
            "currentSpend": CurrentSpend.from_dict(obj["currentSpend"]) if obj.get("currentSpend") is not None else None,
            "filters": Filters.from_dict(obj["filters"]) if obj.get("filters") is not None else None,
            "notifications": dict(
                (_k, Notification.from_dict(_v))
                for _k, _v in obj["notifications"].items()
            )
            if obj.get("notifications") is not None
            else None,
            "timeGrain": obj.get("timeGrain"),
            "timePeriod": BudgetTimePeriod.from_dict(obj["timePeriod"]) if obj.get("timePeriod") is not None else None
        })
        return _obj



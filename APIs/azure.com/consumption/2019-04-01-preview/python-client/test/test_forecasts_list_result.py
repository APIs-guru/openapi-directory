# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.forecasts_list_result import ForecastsListResult

class TestForecastsListResult(unittest.TestCase):
    """ForecastsListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ForecastsListResult:
        """Test ForecastsListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ForecastsListResult`
        """
        model = ForecastsListResult()
        if include_optional:
            return ForecastsListResult(
                value = [
                    openapi_client.models.forecast.Forecast(
                        properties = openapi_client.models.forecast_properties.ForecastProperties(
                            charge = 1.337, 
                            charge_type = 'Actual', 
                            confidence_levels = [
                                openapi_client.models.forecast_properties_confidence_levels_inner.ForecastProperties_confidenceLevels_inner(
                                    bound = 'Upper', 
                                    percentage = 1.337, 
                                    value = 1.337, )
                                ], 
                            currency = '', 
                            grain = 'Daily', 
                            usage_date = '', ), )
                    ]
            )
        else:
            return ForecastsListResult(
        )
        """

    def testForecastsListResult(self):
        """Test ForecastsListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

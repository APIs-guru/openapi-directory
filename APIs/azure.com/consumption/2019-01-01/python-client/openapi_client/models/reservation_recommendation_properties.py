# coding: utf-8

"""
    ConsumptionManagementClient

    Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.

    The version of the OpenAPI document: 2019-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReservationRecommendationProperties(BaseModel):
    """
    The properties of the reservation recommendation.
    """ # noqa: E501
    cost_with_no_reserved_instances: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of cost without reserved instances.", alias="costWithNoReservedInstances")
    first_usage_date: Optional[datetime] = Field(default=None, description="The usage date for looking back.", alias="firstUsageDate")
    look_back_period: Optional[StrictStr] = Field(default=None, description="The number of days of usage to look back for recommendation.", alias="lookBackPeriod")
    meter_id: Optional[StrictStr] = Field(default=None, description="The meter id (GUID)", alias="meterId")
    net_savings: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total estimated savings with reserved instances.", alias="netSavings")
    recommended_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recommended quality for reserved instances.", alias="recommendedQuantity")
    scope: Optional[StrictStr] = Field(default=None, description="Shared or single recommendation.")
    term: Optional[StrictStr] = Field(default=None, description="RI recommendations in one or three year terms.")
    total_cost_with_reserved_instances: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of cost with reserved instances.", alias="totalCostWithReservedInstances")
    __properties: ClassVar[List[str]] = ["costWithNoReservedInstances", "firstUsageDate", "lookBackPeriod", "meterId", "netSavings", "recommendedQuantity", "scope", "term", "totalCostWithReservedInstances"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReservationRecommendationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cost_with_no_reserved_instances",
            "first_usage_date",
            "look_back_period",
            "meter_id",
            "net_savings",
            "recommended_quantity",
            "scope",
            "term",
            "total_cost_with_reserved_instances",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReservationRecommendationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "costWithNoReservedInstances": obj.get("costWithNoReservedInstances"),
            "firstUsageDate": obj.get("firstUsageDate"),
            "lookBackPeriod": obj.get("lookBackPeriod"),
            "meterId": obj.get("meterId"),
            "netSavings": obj.get("netSavings"),
            "recommendedQuantity": obj.get("recommendedQuantity"),
            "scope": obj.get("scope"),
            "term": obj.get("term"),
            "totalCostWithReservedInstances": obj.get("totalCostWithReservedInstances")
        })
        return _obj



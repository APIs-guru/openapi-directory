# coding: utf-8

"""
    SearchIndexClient

    Client that can be used to query an Azure Search index and upload, merge, or delete documents.

    The version of the OpenAPI document: 2016-09-01-Preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SuggestParametersPayload(BaseModel):
    """
    Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.
    """ # noqa: E501
    filter: Optional[StrictStr] = Field(default=None, description="The OData $filter expression to apply to the suggestions query.")
    fuzzy: Optional[StrictBool] = Field(default=None, description="A value indicating whether to use fuzzy matching for the suggestion query. Default is false. when set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.")
    highlight_post_tag: Optional[StrictStr] = Field(default=None, description="A string tag that is appended to hit highlights. Must be set with HighlightPreTag. If omitted, hit highlighting of suggestions is disabled.", alias="highlightPostTag")
    highlight_pre_tag: Optional[StrictStr] = Field(default=None, description="A string tag that is prepended to hit highlights. Must be set with HighlightPostTag. If omitted, hit highlighting of suggestions is disabled.", alias="highlightPreTag")
    minimum_coverage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.", alias="minimumCoverage")
    orderby: Optional[StrictStr] = Field(default=None, description="The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.")
    search: Optional[StrictStr] = Field(default=None, description="The search text on which to base suggestions.")
    search_fields: Optional[StrictStr] = Field(default=None, description="The comma-separated list of field names to consider when querying for suggestions.", alias="searchFields")
    select: Optional[StrictStr] = Field(default=None, description="The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.")
    suggester_name: Optional[StrictStr] = Field(default=None, description="The name of the suggester as specified in the suggesters collection that's part of the index definition.", alias="suggesterName")
    top: Optional[StrictInt] = Field(default=None, description="The number of suggestions to retrieve. This must be a value between 1 and 100. The default is to 5.")
    __properties: ClassVar[List[str]] = ["filter", "fuzzy", "highlightPostTag", "highlightPreTag", "minimumCoverage", "orderby", "search", "searchFields", "select", "suggesterName", "top"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SuggestParametersPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SuggestParametersPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": obj.get("filter"),
            "fuzzy": obj.get("fuzzy"),
            "highlightPostTag": obj.get("highlightPostTag"),
            "highlightPreTag": obj.get("highlightPreTag"),
            "minimumCoverage": obj.get("minimumCoverage"),
            "orderby": obj.get("orderby"),
            "search": obj.get("search"),
            "searchFields": obj.get("searchFields"),
            "select": obj.get("select"),
            "suggesterName": obj.get("suggesterName"),
            "top": obj.get("top")
        })
        return _obj



# coding: utf-8

"""
    SearchIndexClient

    Client that can be used to query an Azure Search index and upload, merge, or delete documents.

    The version of the OpenAPI document: 2016-09-01-Preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IndexingResult(BaseModel):
    """
    Status of an indexing operation for a single document.
    """ # noqa: E501
    error_message: Optional[StrictStr] = Field(default=None, description="The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.", alias="errorMessage")
    key: Optional[StrictStr] = Field(default=None, description="The key of a document that was in the indexing request.")
    status: Optional[StrictBool] = Field(default=None, description="A value indicating whether the indexing operation succeeded for the document identified by the key.")
    status_code: Optional[StrictInt] = Field(default=None, description="The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.", alias="statusCode")
    __properties: ClassVar[List[str]] = ["errorMessage", "key", "status", "statusCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexingResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "error_message",
            "key",
            "status",
            "status_code",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexingResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorMessage": obj.get("errorMessage"),
            "key": obj.get("key"),
            "status": obj.get("status"),
            "statusCode": obj.get("statusCode")
        })
        return _obj



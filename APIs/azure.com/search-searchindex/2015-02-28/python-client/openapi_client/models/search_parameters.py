# coding: utf-8

"""
    SearchIndexClient

    Client that can be used to query an Azure Search index and upload, merge, or delete documents.

    The version of the OpenAPI document: 2015-02-28
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.query_type import QueryType
from openapi_client.models.search_mode import SearchMode
from typing import Optional, Set
from typing_extensions import Self

class SearchParameters(BaseModel):
    """
    Parameters for filtering, sorting, faceting, paging, and other search query behaviors.
    """ # noqa: E501
    filter: Optional[StrictStr] = Field(default=None, description="Gets or sets the OData $filter expression to apply to the search query.")
    highlight_fields: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.", alias="highlightFields")
    highlight_post_tag: Optional[StrictStr] = Field(default=None, description="Gets or sets a string tag that is appended to hit highlights. Must be set with HighlightPreTag. Default is &lt;/em&gt;.", alias="highlightPostTag")
    highlight_pre_tag: Optional[StrictStr] = Field(default=None, description="Gets or sets a string tag that is prepended to hit highlights. Must be set with HighlightPostTag. Default is &lt;em&gt;.", alias="highlightPreTag")
    include_total_result_count: Optional[StrictBool] = Field(default=None, description="Gets or sets a value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.", alias="includeTotalResultCount")
    minimum_coverage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets a number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.", alias="minimumCoverage")
    order_by: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.", alias="orderBy")
    query_type: Optional[QueryType] = Field(default=None, alias="queryType")
    scoring_parameters: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name:value. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation:-122.2,44.8\"(without the quotes).", alias="scoringParameters")
    scoring_profile: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of a scoring profile to evaluate match scores for matching documents in order to sort the results.", alias="scoringProfile")
    search_fields: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the list of field names to include in the full-text search.", alias="searchFields")
    search_mode: Optional[SearchMode] = Field(default=None, alias="searchMode")
    select: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.")
    skip: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use Skip due to this limitation, consider using OrderBy on a totally-ordered key and Filter with a range query instead.")
    top: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of search results to retrieve. This can be used in conjunction with Skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be passed to ContinueSearch to retrieve the next page of results. See DocumentSearchResponse.ContinuationToken for more information.")
    __properties: ClassVar[List[str]] = ["filter", "highlightFields", "highlightPostTag", "highlightPreTag", "includeTotalResultCount", "minimumCoverage", "orderBy", "queryType", "scoringParameters", "scoringProfile", "searchFields", "searchMode", "select", "skip", "top"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": obj.get("filter"),
            "highlightFields": obj.get("highlightFields"),
            "highlightPostTag": obj.get("highlightPostTag"),
            "highlightPreTag": obj.get("highlightPreTag"),
            "includeTotalResultCount": obj.get("includeTotalResultCount"),
            "minimumCoverage": obj.get("minimumCoverage"),
            "orderBy": obj.get("orderBy"),
            "queryType": obj.get("queryType"),
            "scoringParameters": obj.get("scoringParameters"),
            "scoringProfile": obj.get("scoringProfile"),
            "searchFields": obj.get("searchFields"),
            "searchMode": obj.get("searchMode"),
            "select": obj.get("select"),
            "skip": obj.get("skip"),
            "top": obj.get("top")
        })
        return _obj



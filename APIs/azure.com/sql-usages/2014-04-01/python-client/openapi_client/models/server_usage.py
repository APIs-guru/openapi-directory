# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ServerUsage(BaseModel):
    """
    Represents server metrics.
    """ # noqa: E501
    current_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current value of the metric.", alias="currentValue")
    display_name: Optional[StrictStr] = Field(default=None, description="The metric display name.", alias="displayName")
    limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current limit of the metric.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the server usage metric.")
    next_reset_time: Optional[datetime] = Field(default=None, description="The next reset time for the metric (ISO8601 format).", alias="nextResetTime")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the resource.", alias="resourceName")
    unit: Optional[StrictStr] = Field(default=None, description="The units of the metric.")
    __properties: ClassVar[List[str]] = ["currentValue", "displayName", "limit", "name", "nextResetTime", "resourceName", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "current_value",
            "display_name",
            "limit",
            "name",
            "next_reset_time",
            "resource_name",
            "unit",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentValue": obj.get("currentValue"),
            "displayName": obj.get("displayName"),
            "limit": obj.get("limit"),
            "name": obj.get("name"),
            "nextResetTime": obj.get("nextResetTime"),
            "resourceName": obj.get("resourceName"),
            "unit": obj.get("unit")
        })
        return _obj



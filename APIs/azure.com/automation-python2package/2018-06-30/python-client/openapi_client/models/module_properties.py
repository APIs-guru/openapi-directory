# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-06-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_link import ContentLink
from openapi_client.models.module_error_info import ModuleErrorInfo
from typing import Optional, Set
from typing_extensions import Self

class ModuleProperties(BaseModel):
    """
    Definition of the module property type.
    """ # noqa: E501
    activity_count: Optional[StrictInt] = Field(default=None, description="Gets or sets the activity count of the module.", alias="activityCount")
    content_link: Optional[ContentLink] = Field(default=None, alias="contentLink")
    creation_time: Optional[datetime] = Field(default=None, description="Gets or sets the creation time.", alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="Gets or sets the description.")
    error: Optional[ModuleErrorInfo] = None
    is_composite: Optional[StrictBool] = Field(default=None, description="Gets or sets type of module, if its composite or not.", alias="isComposite")
    is_global: Optional[StrictBool] = Field(default=None, description="Gets or sets the isGlobal flag of the module.", alias="isGlobal")
    last_modified_time: Optional[datetime] = Field(default=None, description="Gets or sets the last modified time.", alias="lastModifiedTime")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets the provisioning state of the module.", alias="provisioningState")
    size_in_bytes: Optional[StrictInt] = Field(default=None, description="Gets or sets the size in bytes of the module.", alias="sizeInBytes")
    version: Optional[StrictStr] = Field(default=None, description="Gets or sets the version of the module.")
    __properties: ClassVar[List[str]] = ["activityCount", "contentLink", "creationTime", "description", "error", "isComposite", "isGlobal", "lastModifiedTime", "provisioningState", "sizeInBytes", "version"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Created', 'Creating', 'StartingImportModuleRunbook', 'RunningImportModuleRunbook', 'ContentRetrieved', 'ContentDownloaded', 'ContentValidated', 'ConnectionTypeImported', 'ContentStored', 'ModuleDataStored', 'ActivitiesStored', 'ModuleImportRunbookComplete', 'Succeeded', 'Failed', 'Cancelled', 'Updating']):
            raise ValueError("must be one of enum values ('Created', 'Creating', 'StartingImportModuleRunbook', 'RunningImportModuleRunbook', 'ContentRetrieved', 'ContentDownloaded', 'ContentValidated', 'ConnectionTypeImported', 'ContentStored', 'ModuleDataStored', 'ActivitiesStored', 'ModuleImportRunbookComplete', 'Succeeded', 'Failed', 'Cancelled', 'Updating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_link
        if self.content_link:
            _dict['contentLink'] = self.content_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityCount": obj.get("activityCount"),
            "contentLink": ContentLink.from_dict(obj["contentLink"]) if obj.get("contentLink") is not None else None,
            "creationTime": obj.get("creationTime"),
            "description": obj.get("description"),
            "error": ModuleErrorInfo.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "isComposite": obj.get("isComposite"),
            "isGlobal": obj.get("isGlobal"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "provisioningState": obj.get("provisioningState"),
            "sizeInBytes": obj.get("sizeInBytes"),
            "version": obj.get("version")
        })
        return _obj



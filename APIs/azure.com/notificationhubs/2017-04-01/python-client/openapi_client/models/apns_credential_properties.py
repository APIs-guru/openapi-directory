# coding: utf-8

"""
    NotificationHubsManagementClient

    Azure NotificationHub client

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApnsCredentialProperties(BaseModel):
    """
    Description of a NotificationHub ApnsCredential.
    """ # noqa: E501
    apns_certificate: Optional[StrictStr] = Field(default=None, description="The APNS certificate.", alias="apnsCertificate")
    app_id: Optional[StrictStr] = Field(default=None, description="The issuer (iss) registered claim key, whose value is your 10-character Team ID, obtained from your developer account", alias="appId")
    app_name: Optional[StrictStr] = Field(default=None, description="The name of the application", alias="appName")
    certificate_key: Optional[StrictStr] = Field(default=None, description="The certificate key.", alias="certificateKey")
    endpoint: Optional[StrictStr] = Field(default=None, description="The endpoint of this credential.")
    key_id: Optional[StrictStr] = Field(default=None, description="A 10-character key identifier (kid) key, obtained from your developer account", alias="keyId")
    thumbprint: Optional[StrictStr] = Field(default=None, description="The APNS certificate Thumbprint")
    token: Optional[StrictStr] = Field(default=None, description="Provider Authentication Token, obtained through your developer account")
    __properties: ClassVar[List[str]] = ["apnsCertificate", "appId", "appName", "certificateKey", "endpoint", "keyId", "thumbprint", "token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApnsCredentialProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApnsCredentialProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apnsCertificate": obj.get("apnsCertificate"),
            "appId": obj.get("appId"),
            "appName": obj.get("appName"),
            "certificateKey": obj.get("certificateKey"),
            "endpoint": obj.get("endpoint"),
            "keyId": obj.get("keyId"),
            "thumbprint": obj.get("thumbprint"),
            "token": obj.get("token")
        })
        return _obj



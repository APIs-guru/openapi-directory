# coding: utf-8

"""
    NotificationHubsManagementClient

    Azure NotificationHub client

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NamespaceProperties(BaseModel):
    """
    Namespace properties.
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="The time the namespace was created.", alias="createdAt")
    critical: Optional[StrictBool] = Field(default=None, description="Whether or not the namespace is set as Critical.")
    data_center: Optional[StrictStr] = Field(default=None, description="Data center for the namespace", alias="dataCenter")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether or not the namespace is currently enabled.")
    metric_id: Optional[StrictStr] = Field(default=None, description="Identifier for Azure Insights metrics", alias="metricId")
    name: Optional[StrictStr] = Field(default=None, description="The name of the namespace.")
    namespace_type: Optional[StrictStr] = Field(default=None, description="The namespace type.", alias="namespaceType")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the Namespace.", alias="provisioningState")
    region: Optional[StrictStr] = Field(default=None, description="Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe")
    scale_unit: Optional[StrictStr] = Field(default=None, description="ScaleUnit where the namespace gets created", alias="scaleUnit")
    service_bus_endpoint: Optional[StrictStr] = Field(default=None, description="Endpoint you can use to perform NotificationHub operations.", alias="serviceBusEndpoint")
    status: Optional[StrictStr] = Field(default=None, description="Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The Id of the Azure subscription associated with the namespace.", alias="subscriptionId")
    updated_at: Optional[datetime] = Field(default=None, description="The time the namespace was updated.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["createdAt", "critical", "dataCenter", "enabled", "metricId", "name", "namespaceType", "provisioningState", "region", "scaleUnit", "serviceBusEndpoint", "status", "subscriptionId", "updatedAt"]

    @field_validator('namespace_type')
    def namespace_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Messaging', 'NotificationHub']):
            raise ValueError("must be one of enum values ('Messaging', 'NotificationHub')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NamespaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "metric_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NamespaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "critical": obj.get("critical"),
            "dataCenter": obj.get("dataCenter"),
            "enabled": obj.get("enabled"),
            "metricId": obj.get("metricId"),
            "name": obj.get("name"),
            "namespaceType": obj.get("namespaceType"),
            "provisioningState": obj.get("provisioningState"),
            "region": obj.get("region"),
            "scaleUnit": obj.get("scaleUnit"),
            "serviceBusEndpoint": obj.get("serviceBusEndpoint"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



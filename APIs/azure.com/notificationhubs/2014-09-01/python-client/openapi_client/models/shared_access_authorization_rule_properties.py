# coding: utf-8

"""
    NotificationHubsManagementClient

    Azure NotificationHub client

    The version of the OpenAPI document: 2014-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SharedAccessAuthorizationRuleProperties(BaseModel):
    """
    SharedAccessAuthorizationRule properties.
    """ # noqa: E501
    claim_type: Optional[StrictStr] = Field(default=None, description="The type of the claim.", alias="claimType")
    claim_value: Optional[StrictStr] = Field(default=None, description="The value of the claim.", alias="claimValue")
    created_time: Optional[datetime] = Field(default=None, description="The time at which the authorization rule was created.", alias="createdTime")
    key_name: Optional[StrictStr] = Field(default=None, description="The name of the key that was used.", alias="keyName")
    modified_time: Optional[datetime] = Field(default=None, description="The most recent time the rule was updated.", alias="modifiedTime")
    primary_key: Optional[StrictStr] = Field(default=None, description="The primary key that was used.", alias="primaryKey")
    revision: Optional[StrictInt] = Field(default=None, description="The revision number for the rule.")
    rights: Optional[List[StrictStr]] = Field(default=None, description="The rights associated with the rule.")
    secondary_key: Optional[StrictStr] = Field(default=None, description="The secondary key that was used.", alias="secondaryKey")
    __properties: ClassVar[List[str]] = ["claimType", "claimValue", "createdTime", "keyName", "modifiedTime", "primaryKey", "revision", "rights", "secondaryKey"]

    @field_validator('rights')
    def rights_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Manage', 'Send', 'Listen']):
                raise ValueError("each list item must be one of ('Manage', 'Send', 'Listen')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SharedAccessAuthorizationRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharedAccessAuthorizationRuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "claimType": obj.get("claimType"),
            "claimValue": obj.get("claimValue"),
            "createdTime": obj.get("createdTime"),
            "keyName": obj.get("keyName"),
            "modifiedTime": obj.get("modifiedTime"),
            "primaryKey": obj.get("primaryKey"),
            "revision": obj.get("revision"),
            "rights": obj.get("rights"),
            "secondaryKey": obj.get("secondaryKey")
        })
        return _obj



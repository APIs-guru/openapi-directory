# coding: utf-8

"""
    NotificationHubsManagementClient

    Azure NotificationHub client

    The version of the OpenAPI document: 2014-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.adm_credential import AdmCredential
from openapi_client.models.apns_credential import ApnsCredential
from openapi_client.models.baidu_credential import BaiduCredential
from openapi_client.models.gcm_credential import GcmCredential
from openapi_client.models.mpns_credential import MpnsCredential
from openapi_client.models.shared_access_authorization_rule_properties import SharedAccessAuthorizationRuleProperties
from openapi_client.models.wns_credential import WnsCredential
from typing import Optional, Set
from typing_extensions import Self

class NotificationHubProperties(BaseModel):
    """
    NotificationHub properties.
    """ # noqa: E501
    adm_credential: Optional[AdmCredential] = Field(default=None, alias="admCredential")
    apns_credential: Optional[ApnsCredential] = Field(default=None, alias="apnsCredential")
    authorization_rules: Optional[List[SharedAccessAuthorizationRuleProperties]] = Field(default=None, description="The AuthorizationRules of the created NotificationHub", alias="authorizationRules")
    baidu_credential: Optional[BaiduCredential] = Field(default=None, alias="baiduCredential")
    gcm_credential: Optional[GcmCredential] = Field(default=None, alias="gcmCredential")
    mpns_credential: Optional[MpnsCredential] = Field(default=None, alias="mpnsCredential")
    name: Optional[StrictStr] = Field(default=None, description="The NotificationHub name.")
    registration_ttl: Optional[StrictStr] = Field(default=None, description="The RegistrationTtl of the created NotificationHub", alias="registrationTtl")
    wns_credential: Optional[WnsCredential] = Field(default=None, alias="wnsCredential")
    __properties: ClassVar[List[str]] = ["admCredential", "apnsCredential", "authorizationRules", "baiduCredential", "gcmCredential", "mpnsCredential", "name", "registrationTtl", "wnsCredential"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationHubProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adm_credential
        if self.adm_credential:
            _dict['admCredential'] = self.adm_credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apns_credential
        if self.apns_credential:
            _dict['apnsCredential'] = self.apns_credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in authorization_rules (list)
        _items = []
        if self.authorization_rules:
            for _item_authorization_rules in self.authorization_rules:
                if _item_authorization_rules:
                    _items.append(_item_authorization_rules.to_dict())
            _dict['authorizationRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of baidu_credential
        if self.baidu_credential:
            _dict['baiduCredential'] = self.baidu_credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcm_credential
        if self.gcm_credential:
            _dict['gcmCredential'] = self.gcm_credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mpns_credential
        if self.mpns_credential:
            _dict['mpnsCredential'] = self.mpns_credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wns_credential
        if self.wns_credential:
            _dict['wnsCredential'] = self.wns_credential.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationHubProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admCredential": AdmCredential.from_dict(obj["admCredential"]) if obj.get("admCredential") is not None else None,
            "apnsCredential": ApnsCredential.from_dict(obj["apnsCredential"]) if obj.get("apnsCredential") is not None else None,
            "authorizationRules": [SharedAccessAuthorizationRuleProperties.from_dict(_item) for _item in obj["authorizationRules"]] if obj.get("authorizationRules") is not None else None,
            "baiduCredential": BaiduCredential.from_dict(obj["baiduCredential"]) if obj.get("baiduCredential") is not None else None,
            "gcmCredential": GcmCredential.from_dict(obj["gcmCredential"]) if obj.get("gcmCredential") is not None else None,
            "mpnsCredential": MpnsCredential.from_dict(obj["mpnsCredential"]) if obj.get("mpnsCredential") is not None else None,
            "name": obj.get("name"),
            "registrationTtl": obj.get("registrationTtl"),
            "wnsCredential": WnsCredential.from_dict(obj["wnsCredential"]) if obj.get("wnsCredential") is not None else None
        })
        return _obj



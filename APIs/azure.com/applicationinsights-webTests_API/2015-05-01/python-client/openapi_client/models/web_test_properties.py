# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for web test based alerting.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.web_test_geolocation import WebTestGeolocation
from openapi_client.models.web_test_properties_configuration import WebTestPropertiesConfiguration
from typing import Optional, Set
from typing_extensions import Self

class WebTestProperties(BaseModel):
    """
    Metadata describing a web test for an Azure resource.
    """ # noqa: E501
    configuration: Optional[WebTestPropertiesConfiguration] = Field(default=None, alias="Configuration")
    description: Optional[StrictStr] = Field(default=None, description="Purpose/user defined descriptive test for this WebTest.", alias="Description")
    enabled: Optional[StrictBool] = Field(default=None, description="Is the test actively being monitored.", alias="Enabled")
    frequency: Optional[StrictInt] = Field(default=300, description="Interval in seconds between test runs for this WebTest. Default value is 300.", alias="Frequency")
    kind: StrictStr = Field(description="The kind of web test this is, valid choices are ping and multistep.", alias="Kind")
    locations: List[WebTestGeolocation] = Field(description="A list of where to physically run the tests from to give global coverage for accessibility of your application.", alias="Locations")
    name: StrictStr = Field(description="User defined name if this WebTest.", alias="Name")
    retry_enabled: Optional[StrictBool] = Field(default=None, description="Allow for retries should this WebTest fail.", alias="RetryEnabled")
    synthetic_monitor_id: StrictStr = Field(description="Unique ID of this WebTest. This is typically the same value as the Name field.", alias="SyntheticMonitorId")
    timeout: Optional[StrictInt] = Field(default=30, description="Seconds until this WebTest will timeout and fail. Default value is 30.", alias="Timeout")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["Configuration", "Description", "Enabled", "Frequency", "Kind", "Locations", "Name", "RetryEnabled", "SyntheticMonitorId", "Timeout", "provisioningState"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ping', 'multistep']):
            raise ValueError("must be one of enum values ('ping', 'multistep')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebTestProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['Configuration'] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['Locations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebTestProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Configuration": WebTestPropertiesConfiguration.from_dict(obj["Configuration"]) if obj.get("Configuration") is not None else None,
            "Description": obj.get("Description"),
            "Enabled": obj.get("Enabled"),
            "Frequency": obj.get("Frequency") if obj.get("Frequency") is not None else 300,
            "Kind": obj.get("Kind") if obj.get("Kind") is not None else 'ping',
            "Locations": [WebTestGeolocation.from_dict(_item) for _item in obj["Locations"]] if obj.get("Locations") is not None else None,
            "Name": obj.get("Name"),
            "RetryEnabled": obj.get("RetryEnabled"),
            "SyntheticMonitorId": obj.get("SyntheticMonitorId"),
            "Timeout": obj.get("Timeout") if obj.get("Timeout") is not None else 30,
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



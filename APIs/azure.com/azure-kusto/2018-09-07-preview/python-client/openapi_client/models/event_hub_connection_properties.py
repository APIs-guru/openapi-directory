# coding: utf-8

"""
    KustoManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-09-07-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventHubConnectionProperties(BaseModel):
    """
    Class representing the Kusto event hub connection properties.
    """ # noqa: E501
    consumer_group: StrictStr = Field(description="The event hub consumer group.", alias="consumerGroup")
    data_format: Optional[StrictStr] = Field(default=None, description="The data format of the message. Optionally the data format can be added to each message.", alias="dataFormat")
    event_hub_resource_id: StrictStr = Field(description="The resource ID of the event hub to be used to create a data connection.", alias="eventHubResourceId")
    mapping_rule_name: Optional[StrictStr] = Field(default=None, description="The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.", alias="mappingRuleName")
    table_name: Optional[StrictStr] = Field(default=None, description="The table where the data should be ingested. Optionally the table information can be added to each message.", alias="tableName")
    __properties: ClassVar[List[str]] = ["consumerGroup", "dataFormat", "eventHubResourceId", "mappingRuleName", "tableName"]

    @field_validator('data_format')
    def data_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MULTIJSON', 'JSON', 'CSV']):
            raise ValueError("must be one of enum values ('MULTIJSON', 'JSON', 'CSV')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventHubConnectionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventHubConnectionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerGroup": obj.get("consumerGroup"),
            "dataFormat": obj.get("dataFormat"),
            "eventHubResourceId": obj.get("eventHubResourceId"),
            "mappingRuleName": obj.get("mappingRuleName"),
            "tableName": obj.get("tableName")
        })
        return _obj



# coding: utf-8

"""
    KustoManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-11-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ClusterPrincipalProperties(BaseModel):
    """
    A class representing cluster principal property.
    """ # noqa: E501
    principal_id: StrictStr = Field(description="The principal ID assigned to the cluster principal. It can be a user email, application ID, or security group name.", alias="principalId")
    principal_name: Optional[StrictStr] = Field(default=None, description="The principal name", alias="principalName")
    principal_type: StrictStr = Field(description="Principal type.", alias="principalType")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioned state of the resource.", alias="provisioningState")
    role: StrictStr = Field(description="Cluster principal role.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The tenant id of the principal", alias="tenantId")
    tenant_name: Optional[StrictStr] = Field(default=None, description="The tenant name of the principal", alias="tenantName")
    __properties: ClassVar[List[str]] = ["principalId", "principalName", "principalType", "provisioningState", "role", "tenantId", "tenantName"]

    @field_validator('principal_type')
    def principal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['App', 'Group', 'User']):
            raise ValueError("must be one of enum values ('App', 'Group', 'User')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Running', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Moving']):
            raise ValueError("must be one of enum values ('Running', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Moving')")
        return value

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AllDatabasesAdmin', 'AllDatabasesViewer']):
            raise ValueError("must be one of enum values ('AllDatabasesAdmin', 'AllDatabasesViewer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterPrincipalProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "principal_name",
            "provisioning_state",
            "tenant_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterPrincipalProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "principalId": obj.get("principalId"),
            "principalName": obj.get("principalName"),
            "principalType": obj.get("principalType"),
            "provisioningState": obj.get("provisioningState"),
            "role": obj.get("role"),
            "tenantId": obj.get("tenantId"),
            "tenantName": obj.get("tenantName")
        })
        return _obj



# coding: utf-8

"""
    KustoManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.key_vault_properties import KeyVaultProperties
from openapi_client.models.optimized_autoscale import OptimizedAutoscale
from openapi_client.models.trusted_external_tenant import TrustedExternalTenant
from openapi_client.models.virtual_network_configuration import VirtualNetworkConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ClusterProperties(BaseModel):
    """
    Class representing the Kusto cluster properties.
    """ # noqa: E501
    data_ingestion_uri: Optional[StrictStr] = Field(default=None, description="The cluster data ingestion URI.", alias="dataIngestionUri")
    enable_disk_encryption: Optional[StrictBool] = Field(default=None, description="A boolean value that indicates if the cluster's disks are encrypted.", alias="enableDiskEncryption")
    enable_streaming_ingest: Optional[StrictBool] = Field(default=False, description="A boolean value that indicates if the streaming ingest is enabled.", alias="enableStreamingIngest")
    key_vault_properties: Optional[KeyVaultProperties] = Field(default=None, alias="keyVaultProperties")
    optimized_autoscale: Optional[OptimizedAutoscale] = Field(default=None, alias="optimizedAutoscale")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioned state of the resource.", alias="provisioningState")
    state: Optional[StrictStr] = Field(default=None, description="The state of the resource.")
    trusted_external_tenants: Optional[List[TrustedExternalTenant]] = Field(default=None, description="The cluster's external tenants.", alias="trustedExternalTenants")
    uri: Optional[StrictStr] = Field(default=None, description="The cluster URI.")
    virtual_network_configuration: Optional[VirtualNetworkConfiguration] = Field(default=None, alias="virtualNetworkConfiguration")
    __properties: ClassVar[List[str]] = ["dataIngestionUri", "enableDiskEncryption", "enableStreamingIngest", "keyVaultProperties", "optimizedAutoscale", "provisioningState", "state", "trustedExternalTenants", "uri", "virtualNetworkConfiguration"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Running', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Moving']):
            raise ValueError("must be one of enum values ('Running', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Moving')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Unavailable', 'Running', 'Deleting', 'Deleted', 'Stopping', 'Stopped', 'Starting', 'Updating']):
            raise ValueError("must be one of enum values ('Creating', 'Unavailable', 'Running', 'Deleting', 'Deleted', 'Stopping', 'Stopped', 'Starting', 'Updating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_ingestion_uri",
            "provisioning_state",
            "state",
            "uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of key_vault_properties
        if self.key_vault_properties:
            _dict['keyVaultProperties'] = self.key_vault_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of optimized_autoscale
        if self.optimized_autoscale:
            _dict['optimizedAutoscale'] = self.optimized_autoscale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trusted_external_tenants (list)
        _items = []
        if self.trusted_external_tenants:
            for _item_trusted_external_tenants in self.trusted_external_tenants:
                if _item_trusted_external_tenants:
                    _items.append(_item_trusted_external_tenants.to_dict())
            _dict['trustedExternalTenants'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_network_configuration
        if self.virtual_network_configuration:
            _dict['virtualNetworkConfiguration'] = self.virtual_network_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataIngestionUri": obj.get("dataIngestionUri"),
            "enableDiskEncryption": obj.get("enableDiskEncryption"),
            "enableStreamingIngest": obj.get("enableStreamingIngest") if obj.get("enableStreamingIngest") is not None else False,
            "keyVaultProperties": KeyVaultProperties.from_dict(obj["keyVaultProperties"]) if obj.get("keyVaultProperties") is not None else None,
            "optimizedAutoscale": OptimizedAutoscale.from_dict(obj["optimizedAutoscale"]) if obj.get("optimizedAutoscale") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "state": obj.get("state"),
            "trustedExternalTenants": [TrustedExternalTenant.from_dict(_item) for _item in obj["trustedExternalTenants"]] if obj.get("trustedExternalTenants") is not None else None,
            "uri": obj.get("uri"),
            "virtualNetworkConfiguration": VirtualNetworkConfiguration.from_dict(obj["virtualNetworkConfiguration"]) if obj.get("virtualNetworkConfiguration") is not None else None
        })
        return _obj



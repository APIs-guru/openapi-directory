# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2017-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_service_agent_pool_profile import ContainerServiceAgentPoolProfile
from openapi_client.models.container_service_custom_profile import ContainerServiceCustomProfile
from openapi_client.models.container_service_diagnostics_profile import ContainerServiceDiagnosticsProfile
from openapi_client.models.container_service_linux_profile import ContainerServiceLinuxProfile
from openapi_client.models.container_service_master_profile import ContainerServiceMasterProfile
from openapi_client.models.container_service_orchestrator_profile import ContainerServiceOrchestratorProfile
from openapi_client.models.container_service_service_principal_profile import ContainerServiceServicePrincipalProfile
from openapi_client.models.container_service_windows_profile import ContainerServiceWindowsProfile
from typing import Optional, Set
from typing_extensions import Self

class ContainerServiceProperties(BaseModel):
    """
    Properties of the container service.
    """ # noqa: E501
    agent_pool_profiles: Optional[List[ContainerServiceAgentPoolProfile]] = Field(default=None, description="Properties of the agent pool.", alias="agentPoolProfiles")
    custom_profile: Optional[ContainerServiceCustomProfile] = Field(default=None, alias="customProfile")
    diagnostics_profile: Optional[ContainerServiceDiagnosticsProfile] = Field(default=None, alias="diagnosticsProfile")
    linux_profile: ContainerServiceLinuxProfile = Field(alias="linuxProfile")
    master_profile: ContainerServiceMasterProfile = Field(alias="masterProfile")
    orchestrator_profile: ContainerServiceOrchestratorProfile = Field(alias="orchestratorProfile")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current deployment or provisioning state, which only appears in the response.", alias="provisioningState")
    service_principal_profile: Optional[ContainerServiceServicePrincipalProfile] = Field(default=None, alias="servicePrincipalProfile")
    windows_profile: Optional[ContainerServiceWindowsProfile] = Field(default=None, alias="windowsProfile")
    __properties: ClassVar[List[str]] = ["agentPoolProfiles", "customProfile", "diagnosticsProfile", "linuxProfile", "masterProfile", "orchestratorProfile", "provisioningState", "servicePrincipalProfile", "windowsProfile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in agent_pool_profiles (list)
        _items = []
        if self.agent_pool_profiles:
            for _item_agent_pool_profiles in self.agent_pool_profiles:
                if _item_agent_pool_profiles:
                    _items.append(_item_agent_pool_profiles.to_dict())
            _dict['agentPoolProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_profile
        if self.custom_profile:
            _dict['customProfile'] = self.custom_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diagnostics_profile
        if self.diagnostics_profile:
            _dict['diagnosticsProfile'] = self.diagnostics_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linux_profile
        if self.linux_profile:
            _dict['linuxProfile'] = self.linux_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of master_profile
        if self.master_profile:
            _dict['masterProfile'] = self.master_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orchestrator_profile
        if self.orchestrator_profile:
            _dict['orchestratorProfile'] = self.orchestrator_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_principal_profile
        if self.service_principal_profile:
            _dict['servicePrincipalProfile'] = self.service_principal_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows_profile
        if self.windows_profile:
            _dict['windowsProfile'] = self.windows_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentPoolProfiles": [ContainerServiceAgentPoolProfile.from_dict(_item) for _item in obj["agentPoolProfiles"]] if obj.get("agentPoolProfiles") is not None else None,
            "customProfile": ContainerServiceCustomProfile.from_dict(obj["customProfile"]) if obj.get("customProfile") is not None else None,
            "diagnosticsProfile": ContainerServiceDiagnosticsProfile.from_dict(obj["diagnosticsProfile"]) if obj.get("diagnosticsProfile") is not None else None,
            "linuxProfile": ContainerServiceLinuxProfile.from_dict(obj["linuxProfile"]) if obj.get("linuxProfile") is not None else None,
            "masterProfile": ContainerServiceMasterProfile.from_dict(obj["masterProfile"]) if obj.get("masterProfile") is not None else None,
            "orchestratorProfile": ContainerServiceOrchestratorProfile.from_dict(obj["orchestratorProfile"]) if obj.get("orchestratorProfile") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "servicePrincipalProfile": ContainerServiceServicePrincipalProfile.from_dict(obj["servicePrincipalProfile"]) if obj.get("servicePrincipalProfile") is not None else None,
            "windowsProfile": ContainerServiceWindowsProfile.from_dict(obj["windowsProfile"]) if obj.get("windowsProfile") is not None else None
        })
        return _obj



# coding: utf-8

"""
    FabricAdminClient

    Edge gateway pool operation endpoints and objects.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EdgeGatewayPoolModel(BaseModel):
    """
    An object that contains the properties of an edge gateway pool.
    """ # noqa: E501
    edge_gateways: Optional[List[StrictStr]] = Field(default=None, description="List of the edge gateways in the pool.", alias="edgeGateways")
    gateway_capacity_kilo_bits_per_second: Optional[StrictInt] = Field(default=None, description="Gateway capacity in kilobits per second.", alias="gatewayCapacityKiloBitsPerSecond")
    gateway_type: Optional[StrictStr] = Field(default=None, description="The gateway type, for example, S2sIPsec, S2sGre, and so on.", alias="gatewayType")
    gre_vip_subnet: Optional[StrictStr] = Field(default=None, description="The GRE VIP subnet.", alias="greVipSubnet")
    number_of_gateways: Optional[StrictInt] = Field(default=None, description="The number of gateways in the pool.", alias="numberOfGateways")
    public_ip_address: Optional[StrictStr] = Field(default=None, description="The public IP address.", alias="publicIpAddress")
    redundant_gateway_count: Optional[StrictInt] = Field(default=None, description="The number of redundant gateways.", alias="redundantGatewayCount")
    __properties: ClassVar[List[str]] = ["edgeGateways", "gatewayCapacityKiloBitsPerSecond", "gatewayType", "greVipSubnet", "numberOfGateways", "publicIpAddress", "redundantGatewayCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EdgeGatewayPoolModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EdgeGatewayPoolModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "edgeGateways": obj.get("edgeGateways"),
            "gatewayCapacityKiloBitsPerSecond": obj.get("gatewayCapacityKiloBitsPerSecond"),
            "gatewayType": obj.get("gatewayType"),
            "greVipSubnet": obj.get("greVipSubnet"),
            "numberOfGateways": obj.get("numberOfGateways"),
            "publicIpAddress": obj.get("publicIpAddress"),
            "redundantGatewayCount": obj.get("redundantGatewayCount")
        })
        return _obj



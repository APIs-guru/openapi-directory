# coding: utf-8

"""
    VirtualWANAsAServiceManagementClient

    REST API for Azure VirtualWAN As a Service.

    The version of the OpenAPI document: 2018-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_client.models.p2_s_vpn_gateway_properties_vpn_client_address_pool import P2SVpnGatewayPropertiesVpnClientAddressPool
from openapi_client.models.provisioning_state import ProvisioningState
from openapi_client.models.vpn_client_connection_health import VpnClientConnectionHealth
from typing import Optional, Set
from typing_extensions import Self

class P2SVpnGatewayProperties(BaseModel):
    """
    Parameters for P2SVpnGateway
    """ # noqa: E501
    p2_s_vpn_server_configuration: Optional[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork] = Field(default=None, alias="p2SVpnServerConfiguration")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    virtual_hub: Optional[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork] = Field(default=None, alias="virtualHub")
    vpn_client_address_pool: Optional[P2SVpnGatewayPropertiesVpnClientAddressPool] = Field(default=None, alias="vpnClientAddressPool")
    vpn_client_connection_health: Optional[VpnClientConnectionHealth] = Field(default=None, alias="vpnClientConnectionHealth")
    vpn_gateway_scale_unit: Optional[StrictInt] = Field(default=None, description="The scale unit for this p2s vpn gateway.", alias="vpnGatewayScaleUnit")
    __properties: ClassVar[List[str]] = ["p2SVpnServerConfiguration", "provisioningState", "virtualHub", "vpnClientAddressPool", "vpnClientConnectionHealth", "vpnGatewayScaleUnit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of P2SVpnGatewayProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of p2_s_vpn_server_configuration
        if self.p2_s_vpn_server_configuration:
            _dict['p2SVpnServerConfiguration'] = self.p2_s_vpn_server_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_hub
        if self.virtual_hub:
            _dict['virtualHub'] = self.virtual_hub.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vpn_client_address_pool
        if self.vpn_client_address_pool:
            _dict['vpnClientAddressPool'] = self.vpn_client_address_pool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vpn_client_connection_health
        if self.vpn_client_connection_health:
            _dict['vpnClientConnectionHealth'] = self.vpn_client_connection_health.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of P2SVpnGatewayProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "p2SVpnServerConfiguration": HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.from_dict(obj["p2SVpnServerConfiguration"]) if obj.get("p2SVpnServerConfiguration") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "virtualHub": HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.from_dict(obj["virtualHub"]) if obj.get("virtualHub") is not None else None,
            "vpnClientAddressPool": P2SVpnGatewayPropertiesVpnClientAddressPool.from_dict(obj["vpnClientAddressPool"]) if obj.get("vpnClientAddressPool") is not None else None,
            "vpnClientConnectionHealth": VpnClientConnectionHealth.from_dict(obj["vpnClientConnectionHealth"]) if obj.get("vpnClientConnectionHealth") is not None else None,
            "vpnGatewayScaleUnit": obj.get("vpnGatewayScaleUnit")
        })
        return _obj



# coding: utf-8

"""
    VirtualWANAsAServiceManagementClient

    REST API for Azure VirtualWAN As a Service.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_wan_properties import VirtualWanProperties

class TestVirtualWanProperties(unittest.TestCase):
    """VirtualWanProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualWanProperties:
        """Test VirtualWanProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualWanProperties`
        """
        model = VirtualWanProperties()
        if include_optional:
            return VirtualWanProperties(
                allow_branch_to_branch_traffic = True,
                allow_vnet_to_vnet_traffic = True,
                disable_vpn_encryption = True,
                office365_local_breakout_category = 'Optimize',
                p2_s_vpn_server_configurations = [
                    openapi_client.models.p2_s_vpn_server_configuration.P2SVpnServerConfiguration(
                        etag = '', 
                        name = '', 
                        properties = openapi_client.models.p2_s_vpn_server_configuration_properties.P2SVpnServerConfigurationProperties(
                            etag = '', 
                            name = '', 
                            p2_s_vpn_gateways = [
                                openapi_client.models.hub_virtual_network_connection_properties_remote_virtual_network.HubVirtualNetworkConnectionProperties_remoteVirtualNetwork(
                                    id = '', )
                                ], 
                            p2_s_vpn_server_config_radius_client_root_certificates = [
                                openapi_client.models.p2_s_vpn_server_config_radius_client_root_certificate.P2SVpnServerConfigRadiusClientRootCertificate(
                                    etag = '', 
                                    name = '', )
                                ], 
                            p2_s_vpn_server_config_radius_server_root_certificates = [
                                openapi_client.models.p2_s_vpn_server_config_radius_server_root_certificate.P2SVpnServerConfigRadiusServerRootCertificate(
                                    etag = '', 
                                    name = '', 
                                    properties = openapi_client.models.p2_s_vpn_server_config_radius_server_root_certificate_properties_format.P2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat(
                                        provisioning_state = '', 
                                        public_cert_data = '', ), )
                                ], 
                            p2_s_vpn_server_config_vpn_client_revoked_certificates = [
                                openapi_client.models.p2_s_vpn_server_config_vpn_client_revoked_certificate.P2SVpnServerConfigVpnClientRevokedCertificate(
                                    etag = '', 
                                    name = '', )
                                ], 
                            p2_s_vpn_server_config_vpn_client_root_certificates = [
                                openapi_client.models.p2_s_vpn_server_config_vpn_client_root_certificate.P2SVpnServerConfigVpnClientRootCertificate(
                                    etag = '', 
                                    name = '', 
                                    properties = openapi_client.models.p2_s_vpn_server_config_vpn_client_root_certificate_properties_format.P2SVpnServerConfigVpnClientRootCertificatePropertiesFormat(
                                        provisioning_state = '', 
                                        public_cert_data = '', ), )
                                ], 
                            provisioning_state = '', 
                            radius_server_address = '', 
                            radius_server_secret = '', 
                            vpn_client_ipsec_policies = [
                                openapi_client.models.p2_s_vpn_server_configuration_properties_vpn_client_ipsec_policies_inner.P2SVpnServerConfigurationProperties_vpnClientIpsecPolicies_inner(
                                    dh_group = 'None', 
                                    ike_encryption = 'DES', 
                                    ike_integrity = 'MD5', 
                                    ipsec_encryption = 'None', 
                                    ipsec_integrity = 'MD5', 
                                    pfs_group = 'None', 
                                    sa_data_size_kilobytes = 56, 
                                    sa_life_time_seconds = 56, )
                                ], 
                            vpn_protocols = [
                                'IkeV2'
                                ], ), )
                    ],
                provisioning_state = 'Succeeded',
                security_provider_name = '',
                virtual_hubs = [
                    openapi_client.models.hub_virtual_network_connection_properties_remote_virtual_network.HubVirtualNetworkConnectionProperties_remoteVirtualNetwork(
                        id = '', )
                    ],
                vpn_sites = [
                    openapi_client.models.hub_virtual_network_connection_properties_remote_virtual_network.HubVirtualNetworkConnectionProperties_remoteVirtualNetwork(
                        id = '', )
                    ]
            )
        else:
            return VirtualWanProperties(
        )
        """

    def testVirtualWanProperties(self):
        """Test VirtualWanProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

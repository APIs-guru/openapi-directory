# coding: utf-8

"""
    VirtualWANAsAServiceManagementClient

    REST API for Azure VirtualWAN As a Service.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_client.models.office_traffic_category import OfficeTrafficCategory
from openapi_client.models.p2_s_vpn_server_configuration import P2SVpnServerConfiguration
from typing import Optional, Set
from typing_extensions import Self

class VirtualWanProperties(BaseModel):
    """
    Parameters for VirtualWAN.
    """ # noqa: E501
    allow_branch_to_branch_traffic: Optional[StrictBool] = Field(default=None, description="True if branch to branch traffic is allowed.", alias="allowBranchToBranchTraffic")
    allow_vnet_to_vnet_traffic: Optional[StrictBool] = Field(default=None, description="True if Vnet to Vnet traffic is allowed.", alias="allowVnetToVnetTraffic")
    disable_vpn_encryption: Optional[StrictBool] = Field(default=None, description="Vpn encryption to be disabled or not.", alias="disableVpnEncryption")
    office365_local_breakout_category: Optional[OfficeTrafficCategory] = Field(default=None, alias="office365LocalBreakoutCategory")
    p2_s_vpn_server_configurations: Optional[List[P2SVpnServerConfiguration]] = Field(default=None, description="List of all P2SVpnServerConfigurations associated with the virtual wan.", alias="p2SVpnServerConfigurations")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    security_provider_name: Optional[StrictStr] = Field(default=None, description="The Security Provider name.", alias="securityProviderName")
    virtual_hubs: Optional[List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]] = Field(default=None, description="List of VirtualHubs in the VirtualWAN.", alias="virtualHubs")
    vpn_sites: Optional[List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]] = Field(default=None, description="List of VpnSites in the VirtualWAN.", alias="vpnSites")
    __properties: ClassVar[List[str]] = ["allowBranchToBranchTraffic", "allowVnetToVnetTraffic", "disableVpnEncryption", "office365LocalBreakoutCategory", "p2SVpnServerConfigurations", "provisioningState", "securityProviderName", "virtualHubs", "vpnSites"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualWanProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "virtual_hubs",
            "vpn_sites",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in p2_s_vpn_server_configurations (list)
        _items = []
        if self.p2_s_vpn_server_configurations:
            for _item_p2_s_vpn_server_configurations in self.p2_s_vpn_server_configurations:
                if _item_p2_s_vpn_server_configurations:
                    _items.append(_item_p2_s_vpn_server_configurations.to_dict())
            _dict['p2SVpnServerConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_hubs (list)
        _items = []
        if self.virtual_hubs:
            for _item_virtual_hubs in self.virtual_hubs:
                if _item_virtual_hubs:
                    _items.append(_item_virtual_hubs.to_dict())
            _dict['virtualHubs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vpn_sites (list)
        _items = []
        if self.vpn_sites:
            for _item_vpn_sites in self.vpn_sites:
                if _item_vpn_sites:
                    _items.append(_item_vpn_sites.to_dict())
            _dict['vpnSites'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualWanProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowBranchToBranchTraffic": obj.get("allowBranchToBranchTraffic"),
            "allowVnetToVnetTraffic": obj.get("allowVnetToVnetTraffic"),
            "disableVpnEncryption": obj.get("disableVpnEncryption"),
            "office365LocalBreakoutCategory": obj.get("office365LocalBreakoutCategory"),
            "p2SVpnServerConfigurations": [P2SVpnServerConfiguration.from_dict(_item) for _item in obj["p2SVpnServerConfigurations"]] if obj.get("p2SVpnServerConfigurations") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "securityProviderName": obj.get("securityProviderName"),
            "virtualHubs": [HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.from_dict(_item) for _item in obj["virtualHubs"]] if obj.get("virtualHubs") is not None else None,
            "vpnSites": [HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.from_dict(_item) for _item in obj["vpnSites"]] if obj.get("vpnSites") is not None else None
        })
        return _obj



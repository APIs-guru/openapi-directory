# coding: utf-8

"""
    VirtualWANAsAServiceManagementClient

    REST API for Azure VirtualWAN As a Service.

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_client.models.vpn_connection import VpnConnection
from openapi_client.models.vpn_gateway_properties_bgp_settings import VpnGatewayPropertiesBgpSettings
from typing import Optional, Set
from typing_extensions import Self

class VpnGatewayProperties(BaseModel):
    """
    Parameters for VpnGateway.
    """ # noqa: E501
    bgp_settings: Optional[VpnGatewayPropertiesBgpSettings] = Field(default=None, alias="bgpSettings")
    connections: Optional[List[VpnConnection]] = Field(default=None, description="List of all vpn connections to the gateway.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    virtual_hub: Optional[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork] = Field(default=None, alias="virtualHub")
    vpn_gateway_scale_unit: Optional[StrictInt] = Field(default=None, description="The scale unit for this vpn gateway.", alias="vpnGatewayScaleUnit")
    __properties: ClassVar[List[str]] = ["bgpSettings", "connections", "provisioningState", "virtualHub", "vpnGatewayScaleUnit"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VpnGatewayProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bgp_settings
        if self.bgp_settings:
            _dict['bgpSettings'] = self.bgp_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in connections (list)
        _items = []
        if self.connections:
            for _item_connections in self.connections:
                if _item_connections:
                    _items.append(_item_connections.to_dict())
            _dict['connections'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_hub
        if self.virtual_hub:
            _dict['virtualHub'] = self.virtual_hub.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VpnGatewayProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bgpSettings": VpnGatewayPropertiesBgpSettings.from_dict(obj["bgpSettings"]) if obj.get("bgpSettings") is not None else None,
            "connections": [VpnConnection.from_dict(_item) for _item in obj["connections"]] if obj.get("connections") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "virtualHub": HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.from_dict(obj["virtualHub"]) if obj.get("virtualHub") is not None else None,
            "vpnGatewayScaleUnit": obj.get("vpnGatewayScaleUnit")
        })
        return _obj



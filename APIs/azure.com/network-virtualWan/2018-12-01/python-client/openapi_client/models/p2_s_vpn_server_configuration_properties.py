# coding: utf-8

"""
    VirtualWANAsAServiceManagementClient

    REST API for Azure VirtualWAN As a Service.

    The version of the OpenAPI document: 2018-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_client.models.p2_s_vpn_server_config_radius_client_root_certificate import P2SVpnServerConfigRadiusClientRootCertificate
from openapi_client.models.p2_s_vpn_server_config_radius_server_root_certificate import P2SVpnServerConfigRadiusServerRootCertificate
from openapi_client.models.p2_s_vpn_server_config_vpn_client_revoked_certificate import P2SVpnServerConfigVpnClientRevokedCertificate
from openapi_client.models.p2_s_vpn_server_config_vpn_client_root_certificate import P2SVpnServerConfigVpnClientRootCertificate
from openapi_client.models.p2_s_vpn_server_configuration_properties_vpn_client_ipsec_policies_inner import P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner
from typing import Optional, Set
from typing_extensions import Self

class P2SVpnServerConfigurationProperties(BaseModel):
    """
    Parameters for P2SVpnServerConfiguration
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="A unique read-only string that changes whenever the resource is updated.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the P2SVpnServerConfiguration that is unique within a VirtualWan in a resource group. This name can be used to access the resource along with Paren VirtualWan resource name.")
    p2_s_vpn_gateways: Optional[List[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork]] = Field(default=None, alias="p2SVpnGateways")
    p2_s_vpn_server_config_radius_client_root_certificates: Optional[List[P2SVpnServerConfigRadiusClientRootCertificate]] = Field(default=None, description="Radius client root certificate of P2SVpnServerConfiguration.", alias="p2SVpnServerConfigRadiusClientRootCertificates")
    p2_s_vpn_server_config_radius_server_root_certificates: Optional[List[P2SVpnServerConfigRadiusServerRootCertificate]] = Field(default=None, description="Radius Server root certificate of P2SVpnServerConfiguration.", alias="p2SVpnServerConfigRadiusServerRootCertificates")
    p2_s_vpn_server_config_vpn_client_revoked_certificates: Optional[List[P2SVpnServerConfigVpnClientRevokedCertificate]] = Field(default=None, description="VPN client revoked certificate of P2SVpnServerConfiguration.", alias="p2SVpnServerConfigVpnClientRevokedCertificates")
    p2_s_vpn_server_config_vpn_client_root_certificates: Optional[List[P2SVpnServerConfigVpnClientRootCertificate]] = Field(default=None, description="VPN client root certificate of P2SVpnServerConfiguration.", alias="p2SVpnServerConfigVpnClientRootCertificates")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the P2SVpnServerConfiguration resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    radius_server_address: Optional[StrictStr] = Field(default=None, description="The radius server address property of the P2SVpnServerConfiguration resource for point to site client connection.", alias="radiusServerAddress")
    radius_server_secret: Optional[StrictStr] = Field(default=None, description="The radius secret property of the P2SVpnServerConfiguration resource for point to site client connection.", alias="radiusServerSecret")
    vpn_client_ipsec_policies: Optional[List[P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner]] = Field(default=None, description="VpnClientIpsecPolicies for P2SVpnServerConfiguration.", alias="vpnClientIpsecPolicies")
    vpn_protocols: Optional[List[StrictStr]] = Field(default=None, description="VPN protocols for the P2SVpnServerConfiguration.", alias="vpnProtocols")
    __properties: ClassVar[List[str]] = ["etag", "name", "p2SVpnGateways", "p2SVpnServerConfigRadiusClientRootCertificates", "p2SVpnServerConfigRadiusServerRootCertificates", "p2SVpnServerConfigVpnClientRevokedCertificates", "p2SVpnServerConfigVpnClientRootCertificates", "provisioningState", "radiusServerAddress", "radiusServerSecret", "vpnClientIpsecPolicies", "vpnProtocols"]

    @field_validator('vpn_protocols')
    def vpn_protocols_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['IkeV2', 'OpenVPN']):
                raise ValueError("each list item must be one of ('IkeV2', 'OpenVPN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of P2SVpnServerConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "p2_s_vpn_gateways",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in p2_s_vpn_gateways (list)
        _items = []
        if self.p2_s_vpn_gateways:
            for _item_p2_s_vpn_gateways in self.p2_s_vpn_gateways:
                if _item_p2_s_vpn_gateways:
                    _items.append(_item_p2_s_vpn_gateways.to_dict())
            _dict['p2SVpnGateways'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in p2_s_vpn_server_config_radius_client_root_certificates (list)
        _items = []
        if self.p2_s_vpn_server_config_radius_client_root_certificates:
            for _item_p2_s_vpn_server_config_radius_client_root_certificates in self.p2_s_vpn_server_config_radius_client_root_certificates:
                if _item_p2_s_vpn_server_config_radius_client_root_certificates:
                    _items.append(_item_p2_s_vpn_server_config_radius_client_root_certificates.to_dict())
            _dict['p2SVpnServerConfigRadiusClientRootCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in p2_s_vpn_server_config_radius_server_root_certificates (list)
        _items = []
        if self.p2_s_vpn_server_config_radius_server_root_certificates:
            for _item_p2_s_vpn_server_config_radius_server_root_certificates in self.p2_s_vpn_server_config_radius_server_root_certificates:
                if _item_p2_s_vpn_server_config_radius_server_root_certificates:
                    _items.append(_item_p2_s_vpn_server_config_radius_server_root_certificates.to_dict())
            _dict['p2SVpnServerConfigRadiusServerRootCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in p2_s_vpn_server_config_vpn_client_revoked_certificates (list)
        _items = []
        if self.p2_s_vpn_server_config_vpn_client_revoked_certificates:
            for _item_p2_s_vpn_server_config_vpn_client_revoked_certificates in self.p2_s_vpn_server_config_vpn_client_revoked_certificates:
                if _item_p2_s_vpn_server_config_vpn_client_revoked_certificates:
                    _items.append(_item_p2_s_vpn_server_config_vpn_client_revoked_certificates.to_dict())
            _dict['p2SVpnServerConfigVpnClientRevokedCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in p2_s_vpn_server_config_vpn_client_root_certificates (list)
        _items = []
        if self.p2_s_vpn_server_config_vpn_client_root_certificates:
            for _item_p2_s_vpn_server_config_vpn_client_root_certificates in self.p2_s_vpn_server_config_vpn_client_root_certificates:
                if _item_p2_s_vpn_server_config_vpn_client_root_certificates:
                    _items.append(_item_p2_s_vpn_server_config_vpn_client_root_certificates.to_dict())
            _dict['p2SVpnServerConfigVpnClientRootCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vpn_client_ipsec_policies (list)
        _items = []
        if self.vpn_client_ipsec_policies:
            for _item_vpn_client_ipsec_policies in self.vpn_client_ipsec_policies:
                if _item_vpn_client_ipsec_policies:
                    _items.append(_item_vpn_client_ipsec_policies.to_dict())
            _dict['vpnClientIpsecPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of P2SVpnServerConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "p2SVpnGateways": [HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.from_dict(_item) for _item in obj["p2SVpnGateways"]] if obj.get("p2SVpnGateways") is not None else None,
            "p2SVpnServerConfigRadiusClientRootCertificates": [P2SVpnServerConfigRadiusClientRootCertificate.from_dict(_item) for _item in obj["p2SVpnServerConfigRadiusClientRootCertificates"]] if obj.get("p2SVpnServerConfigRadiusClientRootCertificates") is not None else None,
            "p2SVpnServerConfigRadiusServerRootCertificates": [P2SVpnServerConfigRadiusServerRootCertificate.from_dict(_item) for _item in obj["p2SVpnServerConfigRadiusServerRootCertificates"]] if obj.get("p2SVpnServerConfigRadiusServerRootCertificates") is not None else None,
            "p2SVpnServerConfigVpnClientRevokedCertificates": [P2SVpnServerConfigVpnClientRevokedCertificate.from_dict(_item) for _item in obj["p2SVpnServerConfigVpnClientRevokedCertificates"]] if obj.get("p2SVpnServerConfigVpnClientRevokedCertificates") is not None else None,
            "p2SVpnServerConfigVpnClientRootCertificates": [P2SVpnServerConfigVpnClientRootCertificate.from_dict(_item) for _item in obj["p2SVpnServerConfigVpnClientRootCertificates"]] if obj.get("p2SVpnServerConfigVpnClientRootCertificates") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "radiusServerAddress": obj.get("radiusServerAddress"),
            "radiusServerSecret": obj.get("radiusServerSecret"),
            "vpnClientIpsecPolicies": [P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.from_dict(_item) for _item in obj["vpnClientIpsecPolicies"]] if obj.get("vpnClientIpsecPolicies") is not None else None,
            "vpnProtocols": obj.get("vpnProtocols")
        })
        return _obj



# coding: utf-8

"""
    VirtualWANAsAServiceManagementClient

    REST API for Azure VirtualWAN As a Service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hub_virtual_network_connection_properties_remote_virtual_network import HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork
from openapi_client.models.p2_s_vpn_server_configuration_properties_vpn_client_ipsec_policies_inner import P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner
from openapi_client.models.vpn_connection_status import VpnConnectionStatus
from typing import Optional, Set
from typing_extensions import Self

class VpnSiteLinkConnectionProperties(BaseModel):
    """
    Parameters for VpnConnection.
    """ # noqa: E501
    connection_bandwidth: Optional[StrictInt] = Field(default=None, description="Expected bandwidth in MBPS.", alias="connectionBandwidth")
    connection_status: Optional[VpnConnectionStatus] = Field(default=None, alias="connectionStatus")
    egress_bytes_transferred: Optional[StrictInt] = Field(default=None, description="Egress bytes transferred.", alias="egressBytesTransferred")
    enable_bgp: Optional[StrictBool] = Field(default=None, description="EnableBgp flag.", alias="enableBgp")
    enable_rate_limiting: Optional[StrictBool] = Field(default=None, description="EnableBgp flag.", alias="enableRateLimiting")
    ingress_bytes_transferred: Optional[StrictInt] = Field(default=None, description="Ingress bytes transferred.", alias="ingressBytesTransferred")
    ipsec_policies: Optional[List[P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner]] = Field(default=None, description="The IPSec Policies to be considered by this connection.", alias="ipsecPolicies")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    routing_weight: Optional[StrictInt] = Field(default=None, description="Routing weight for vpn connection.", alias="routingWeight")
    shared_key: Optional[StrictStr] = Field(default=None, description="SharedKey for the vpn connection.", alias="sharedKey")
    use_local_azure_ip_address: Optional[StrictBool] = Field(default=None, description="Use local azure ip to initiate connection.", alias="useLocalAzureIpAddress")
    use_policy_based_traffic_selectors: Optional[StrictBool] = Field(default=None, description="Enable policy-based traffic selectors.", alias="usePolicyBasedTrafficSelectors")
    vpn_connection_protocol_type: Optional[StrictStr] = Field(default=None, description="Gateway connection protocol.", alias="vpnConnectionProtocolType")
    vpn_site_link: Optional[HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork] = Field(default=None, alias="vpnSiteLink")
    __properties: ClassVar[List[str]] = ["connectionBandwidth", "connectionStatus", "egressBytesTransferred", "enableBgp", "enableRateLimiting", "ingressBytesTransferred", "ipsecPolicies", "provisioningState", "routingWeight", "sharedKey", "useLocalAzureIpAddress", "usePolicyBasedTrafficSelectors", "vpnConnectionProtocolType", "vpnSiteLink"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    @field_validator('vpn_connection_protocol_type')
    def vpn_connection_protocol_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IKEv2', 'IKEv1']):
            raise ValueError("must be one of enum values ('IKEv2', 'IKEv1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VpnSiteLinkConnectionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "egress_bytes_transferred",
            "ingress_bytes_transferred",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ipsec_policies (list)
        _items = []
        if self.ipsec_policies:
            for _item_ipsec_policies in self.ipsec_policies:
                if _item_ipsec_policies:
                    _items.append(_item_ipsec_policies.to_dict())
            _dict['ipsecPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of vpn_site_link
        if self.vpn_site_link:
            _dict['vpnSiteLink'] = self.vpn_site_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VpnSiteLinkConnectionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionBandwidth": obj.get("connectionBandwidth"),
            "connectionStatus": obj.get("connectionStatus"),
            "egressBytesTransferred": obj.get("egressBytesTransferred"),
            "enableBgp": obj.get("enableBgp"),
            "enableRateLimiting": obj.get("enableRateLimiting"),
            "ingressBytesTransferred": obj.get("ingressBytesTransferred"),
            "ipsecPolicies": [P2SVpnServerConfigurationPropertiesVpnClientIpsecPoliciesInner.from_dict(_item) for _item in obj["ipsecPolicies"]] if obj.get("ipsecPolicies") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "routingWeight": obj.get("routingWeight"),
            "sharedKey": obj.get("sharedKey"),
            "useLocalAzureIpAddress": obj.get("useLocalAzureIpAddress"),
            "usePolicyBasedTrafficSelectors": obj.get("usePolicyBasedTrafficSelectors"),
            "vpnConnectionProtocolType": obj.get("vpnConnectionProtocolType"),
            "vpnSiteLink": HubVirtualNetworkConnectionPropertiesRemoteVirtualNetwork.from_dict(obj["vpnSiteLink"]) if obj.get("vpnSiteLink") is not None else None
        })
        return _obj



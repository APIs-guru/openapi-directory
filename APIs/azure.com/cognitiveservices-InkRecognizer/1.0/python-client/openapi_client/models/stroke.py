# coding: utf-8

"""
    Ink Recognizer Client

    The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.drawing_attributes_pattern import DrawingAttributesPattern
from openapi_client.models.ink_point import InkPoint
from typing import Optional, Set
from typing_extensions import Self

class Stroke(BaseModel):
    """
    Stroke
    """ # noqa: E501
    drawing_attributes: Optional[DrawingAttributesPattern] = Field(default=None, alias="drawingAttributes")
    id: StrictInt = Field(description="This is treated as a unique identifier for each stroke within a request. If the id is repeated within the same request, the service will return an error.")
    kind: Optional[StrictStr] = Field(default=None, description="This is an optional property which influences the decision about what the stroke kind is between inkWriting and inkDrawing. This property should be set ONLY if the type of user content is known ahead of time. Not setting this value implies the kind is not known ahead of time. Kind represents the type of content the stroke is a part of.")
    language: Optional[StrictStr] = Field(default=None, description="The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in this stroke. The response will include results from this language.")
    points: List[InkPoint]
    __properties: ClassVar[List[str]] = ["drawingAttributes", "id", "kind", "language", "points"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['inkDrawing', 'inkWriting']):
            raise ValueError("must be one of enum values ('inkDrawing', 'inkWriting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Stroke from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of drawing_attributes
        if self.drawing_attributes:
            _dict['drawingAttributes'] = self.drawing_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in points (list)
        _items = []
        if self.points:
            for _item_points in self.points:
                if _item_points:
                    _items.append(_item_points.to_dict())
            _dict['points'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Stroke from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "drawingAttributes": DrawingAttributesPattern.from_dict(obj["drawingAttributes"]) if obj.get("drawingAttributes") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "language": obj.get("language"),
            "points": [InkPoint.from_dict(_item) for _item in obj["points"]] if obj.get("points") is not None else None
        })
        return _obj



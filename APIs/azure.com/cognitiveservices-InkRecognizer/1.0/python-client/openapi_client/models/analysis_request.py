# coding: utf-8

"""
    Ink Recognizer Client

    The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.ink_point_value_attribute import InkPointValueAttribute
from openapi_client.models.stroke import Stroke
from typing import Optional, Set
from typing_extensions import Self

class AnalysisRequest(BaseModel):
    """
    This shows the expected contents of a request
    """ # noqa: E501
    application_type: Optional[StrictStr] = Field(default=None, description="This describes the domain of the client application", alias="applicationType")
    ink_point_value_attributes: Optional[List[InkPointValueAttribute]] = Field(default=None, alias="inkPointValueAttributes")
    input_device_kind: Optional[StrictStr] = Field(default=None, description="This identifies the kind of device used as the writing instrument", alias="inputDeviceKind")
    language: StrictStr = Field(description="The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in the ink strokes. The response will include results from this language.")
    strokes: List[Stroke] = Field(description="This is the array of strokes sent for recognition. Best results are produced when the order of strokes added in the array matches the order in which the user created them. Changing the stroke order may produce unexpected results.")
    unit: Optional[StrictStr] = Field(default=None, description="This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.")
    unit_multiple: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description=" This is a scaling factor to be applied to the point coordinates when interpreting them in the physical units specified.", alias="unitMultiple")
    __properties: ClassVar[List[str]] = ["applicationType", "inkPointValueAttributes", "inputDeviceKind", "language", "strokes", "unit", "unitMultiple"]

    @field_validator('application_type')
    def application_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['drawing', 'writing', 'mixed']):
            raise ValueError("must be one of enum values ('drawing', 'writing', 'mixed')")
        return value

    @field_validator('input_device_kind')
    def input_device_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['digitizer', 'pen', 'lightPen', 'touchScreen', 'touchPad', 'whiteBoard', '3dDigitizer', 'stereoPlotter', 'articulatedArm', 'armature']):
            raise ValueError("must be one of enum values ('digitizer', 'pen', 'lightPen', 'touchScreen', 'touchPad', 'whiteBoard', '3dDigitizer', 'stereoPlotter', 'articulatedArm', 'armature')")
        return value

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['mm', 'cm', 'in']):
            raise ValueError("must be one of enum values ('mm', 'cm', 'in')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ink_point_value_attributes (list)
        _items = []
        if self.ink_point_value_attributes:
            for _item_ink_point_value_attributes in self.ink_point_value_attributes:
                if _item_ink_point_value_attributes:
                    _items.append(_item_ink_point_value_attributes.to_dict())
            _dict['inkPointValueAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in strokes (list)
        _items = []
        if self.strokes:
            for _item_strokes in self.strokes:
                if _item_strokes:
                    _items.append(_item_strokes.to_dict())
            _dict['strokes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationType": obj.get("applicationType"),
            "inkPointValueAttributes": [InkPointValueAttribute.from_dict(_item) for _item in obj["inkPointValueAttributes"]] if obj.get("inkPointValueAttributes") is not None else None,
            "inputDeviceKind": obj.get("inputDeviceKind"),
            "language": obj.get("language"),
            "strokes": [Stroke.from_dict(_item) for _item in obj["strokes"]] if obj.get("strokes") is not None else None,
            "unit": obj.get("unit"),
            "unitMultiple": obj.get("unitMultiple")
        })
        return _obj



# coding: utf-8

"""
    Ink Recognizer Client

    The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InkPoint(BaseModel):
    """
    An object containing the properties of an point in the path of an ink stroke. The main properties are the x and y values. Other include tip pressure, x tilt etc. For the coordinate values, it is recommended to have a precision of 8 digits after the decimal to obtain most accurate recognition results. The origin (0,0) of the canvas is assumed to be at the top left corner of the canvas
    """ # noqa: E501
    barrel_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The force exerted directly by the user on a transducer sensor, such as a pressure-sensitive button on the barrel of a stylus. This may not be used for recognition.", alias="barrelPressure")
    barrel_switch: Optional[StrictBool] = Field(default=None, description="A non-tip button located on the barrel of a stylus. Its function is typically mapped to a system secondary button. This may not be used for recognition.", alias="barrelSwitch")
    eraser: Optional[StrictBool] = Field(default=None, description="The control is used for erasing objects. It is typically located opposite the writing end of a stylus. This may not be used for recognition.")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The height of the tip of the writing instrument. This is used by touch screen devices to report the height of the finger contact on the writing surface. This may not be used for recognition.")
    inverted: Optional[StrictBool] = Field(default=None, description="A value that indicates that the currently sensed position originates from the end of a stylus opposite the tip switch. This may not be used for recognition.")
    secondary_tip: Optional[StrictBool] = Field(default=None, description="A secondary switch used in conjunction with the tip switch to indicate pressure above a certain threshold applied with the stylus. This may not be used for recognition.", alias="secondaryTip")
    timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The time relative to the absolute time the transducer last became active. This may not be used for recognition.")
    tip_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The force exerted against the tablet surface by the transducer, typically a stylus. This may not be used for recognition.", alias="tipPressure")
    tip_switch: Optional[StrictBool] = Field(default=None, description="A switch located on the tip of a stylus indicating contact of the stylus with a surface. This may not be used for recognition.", alias="tipSwitch")
    width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The width of the tip of the writing instrument. This is used by touch screen devices to report the width of the finger contact on the writing surface. This may not be used for recognition.")
    x: Union[StrictFloat, StrictInt] = Field(description="The x coordinate of the pen location on the writing surface.")
    x_tilt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The plane angle between the Y-Z plane and the plane containing the transducer axis and the Y axis. This may not be used for recognition.", alias="xTilt")
    y: Union[StrictFloat, StrictInt] = Field(description="The y coordinate of the pen location on the writing surface.")
    y_tilt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The angle between the X-Z and transducer-X planes. A positive Y Tilt is toward the user. This may not be used for recognition.", alias="yTilt")
    z: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The z coordinate of the pen location on the writing space. This may not be used for recognition.")
    __properties: ClassVar[List[str]] = ["barrelPressure", "barrelSwitch", "eraser", "height", "inverted", "secondaryTip", "timestamp", "tipPressure", "tipSwitch", "width", "x", "xTilt", "y", "yTilt", "z"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InkPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InkPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "barrelPressure": obj.get("barrelPressure"),
            "barrelSwitch": obj.get("barrelSwitch"),
            "eraser": obj.get("eraser"),
            "height": obj.get("height"),
            "inverted": obj.get("inverted"),
            "secondaryTip": obj.get("secondaryTip"),
            "timestamp": obj.get("timestamp"),
            "tipPressure": obj.get("tipPressure"),
            "tipSwitch": obj.get("tipSwitch"),
            "width": obj.get("width"),
            "x": obj.get("x"),
            "xTilt": obj.get("xTilt"),
            "y": obj.get("y"),
            "yTilt": obj.get("yTilt"),
            "z": obj.get("z")
        })
        return _obj



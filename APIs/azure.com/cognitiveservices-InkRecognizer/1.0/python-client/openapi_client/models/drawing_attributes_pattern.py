# coding: utf-8

"""
    Ink Recognizer Client

    The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.drawing_attributes_pattern_color import DrawingAttributesPatternColor
from typing import Optional, Set
from typing_extensions import Self

class DrawingAttributesPattern(BaseModel):
    """
    The properties to use when rendering ink
    """ # noqa: E501
    color: Optional[DrawingAttributesPatternColor] = None
    fit_to_curve: Optional[StrictBool] = Field(default=None, description=" This indicates whether Bezier smoothing is used to render the stroke", alias="fitToCurve")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The height of the stylus used to draw the stroke")
    ignore_pressure: Optional[StrictBool] = Field(default=None, description=" This indicates whether the thickness of a rendered Stroke changes according the amount of pressure applied.", alias="ignorePressure")
    raster_op: Optional[StrictStr] = Field(default=None, alias="rasterOp")
    tip: Optional[StrictStr] = Field(default=None, description="This specifies the tip to be used to draw a stroke")
    width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The width of the stylus used to draw the stroke")
    __properties: ClassVar[List[str]] = ["color", "fitToCurve", "height", "ignorePressure", "rasterOp", "tip", "width"]

    @field_validator('raster_op')
    def raster_op_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['noOperation', 'copyPen', 'maskPen']):
            raise ValueError("must be one of enum values ('noOperation', 'copyPen', 'maskPen')")
        return value

    @field_validator('tip')
    def tip_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ellipse', 'rectangle']):
            raise ValueError("must be one of enum values ('ellipse', 'rectangle')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DrawingAttributesPattern from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of color
        if self.color:
            _dict['color'] = self.color.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DrawingAttributesPattern from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "color": DrawingAttributesPatternColor.from_dict(obj["color"]) if obj.get("color") is not None else None,
            "fitToCurve": obj.get("fitToCurve"),
            "height": obj.get("height"),
            "ignorePressure": obj.get("ignorePressure"),
            "rasterOp": obj.get("rasterOp"),
            "tip": obj.get("tip"),
            "width": obj.get("width")
        })
        return _obj



# coding: utf-8

"""
    Ink Recognizer Client

    The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.leaf_category_pattern import LeafCategoryPattern
from openapi_client.models.point_details_pattern import PointDetailsPattern
from typing import Optional, Set
from typing_extensions import Self

class AlternatePatternInner(BaseModel):
    """
    AlternatePatternInner
    """ # noqa: E501
    category: LeafCategoryPattern
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A number between 0 and 1 which indicates the confidence level in the result")
    points: Optional[List[PointDetailsPattern]] = Field(default=None, description="Array of point objects that represent points that are relevant to the type of recognition unit. For example, for leaf node of inkDrawing category that represents a triangle, points would include the x,y coordinates of the vertices of the recognized triangle. The points represent the coordinates of points used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.")
    recognized_string: StrictStr = Field(description="The recognized string from an inkWord or the name of a recognized shape in an inkDrawing object", alias="recognizedString")
    rotation_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The angular orientation of an object relative to the horizontal axis", alias="rotationAngle")
    __properties: ClassVar[List[str]] = ["category", "confidence", "points", "recognizedString", "rotationAngle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlternatePatternInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in points (list)
        _items = []
        if self.points:
            for _item_points in self.points:
                if _item_points:
                    _items.append(_item_points.to_dict())
            _dict['points'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlternatePatternInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "confidence": obj.get("confidence"),
            "points": [PointDetailsPattern.from_dict(_item) for _item in obj["points"]] if obj.get("points") is not None else None,
            "recognizedString": obj.get("recognizedString"),
            "rotationAngle": obj.get("rotationAngle")
        })
        return _obj



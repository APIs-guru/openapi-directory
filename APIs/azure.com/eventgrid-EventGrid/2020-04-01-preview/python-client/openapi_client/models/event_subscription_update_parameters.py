# coding: utf-8

"""
    EventGridManagementClient

    Azure EventGrid Management Client

    The version of the OpenAPI document: 2020-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dead_letter_destination import DeadLetterDestination
from openapi_client.models.event_subscription_destination import EventSubscriptionDestination
from openapi_client.models.event_subscription_filter import EventSubscriptionFilter
from openapi_client.models.retry_policy import RetryPolicy
from typing import Optional, Set
from typing_extensions import Self

class EventSubscriptionUpdateParameters(BaseModel):
    """
    Properties of the Event Subscription update.
    """ # noqa: E501
    dead_letter_destination: Optional[DeadLetterDestination] = Field(default=None, alias="deadLetterDestination")
    destination: Optional[EventSubscriptionDestination] = None
    event_delivery_schema: Optional[StrictStr] = Field(default=None, description="The event delivery schema for the event subscription.", alias="eventDeliverySchema")
    expiration_time_utc: Optional[datetime] = Field(default=None, description="Information about the expiration time for the event subscription.", alias="expirationTimeUtc")
    filter: Optional[EventSubscriptionFilter] = None
    labels: Optional[List[StrictStr]] = Field(default=None, description="List of user defined labels.")
    retry_policy: Optional[RetryPolicy] = Field(default=None, alias="retryPolicy")
    __properties: ClassVar[List[str]] = ["deadLetterDestination", "destination", "eventDeliverySchema", "expirationTimeUtc", "filter", "labels", "retryPolicy"]

    @field_validator('event_delivery_schema')
    def event_delivery_schema_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EventGridSchema', 'CustomInputSchema', 'CloudEventSchemaV1_0']):
            raise ValueError("must be one of enum values ('EventGridSchema', 'CustomInputSchema', 'CloudEventSchemaV1_0')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventSubscriptionUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dead_letter_destination
        if self.dead_letter_destination:
            _dict['deadLetterDestination'] = self.dead_letter_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retry_policy
        if self.retry_policy:
            _dict['retryPolicy'] = self.retry_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventSubscriptionUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deadLetterDestination": DeadLetterDestination.from_dict(obj["deadLetterDestination"]) if obj.get("deadLetterDestination") is not None else None,
            "destination": EventSubscriptionDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "eventDeliverySchema": obj.get("eventDeliverySchema"),
            "expirationTimeUtc": obj.get("expirationTimeUtc"),
            "filter": EventSubscriptionFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "labels": obj.get("labels"),
            "retryPolicy": RetryPolicy.from_dict(obj["retryPolicy"]) if obj.get("retryPolicy") is not None else None
        })
        return _obj



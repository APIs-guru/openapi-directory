# coding: utf-8

"""
    EventGridManagementClient

    Azure EventGrid Management Client

    The version of the OpenAPI document: 2020-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.inbound_ip_rule import InboundIpRule
from openapi_client.models.input_schema_mapping import InputSchemaMapping
from typing import Optional, Set
from typing_extensions import Self

class TopicProperties(BaseModel):
    """
    Properties of the Topic
    """ # noqa: E501
    allow_traffic_from_all_ips: Optional[StrictBool] = Field(default=None, description="This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.", alias="allowTrafficFromAllIPs")
    endpoint: Optional[StrictStr] = Field(default=None, description="Endpoint for the topic.")
    inbound_ip_rules: Optional[List[InboundIpRule]] = Field(default=None, description="This determines the IP filtering rules that ought to be applied when events are received on this topic.", alias="inboundIpRules")
    input_schema: Optional[StrictStr] = Field(default='EventGridSchema', description="This determines the format that Event Grid should expect for incoming events published to the topic.", alias="inputSchema")
    input_schema_mapping: Optional[InputSchemaMapping] = Field(default=None, alias="inputSchemaMapping")
    metric_resource_id: Optional[StrictStr] = Field(default=None, description="Metric resource id for the topic.", alias="metricResourceId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the topic.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["allowTrafficFromAllIPs", "endpoint", "inboundIpRules", "inputSchema", "inputSchemaMapping", "metricResourceId", "provisioningState"]

    @field_validator('input_schema')
    def input_schema_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EventGridSchema', 'CustomEventSchema', 'CloudEventSchemaV1_0']):
            raise ValueError("must be one of enum values ('EventGridSchema', 'CustomEventSchema', 'CloudEventSchemaV1_0')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed']):
            raise ValueError("must be one of enum values ('Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TopicProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "endpoint",
            "metric_resource_id",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_ip_rules (list)
        _items = []
        if self.inbound_ip_rules:
            for _item_inbound_ip_rules in self.inbound_ip_rules:
                if _item_inbound_ip_rules:
                    _items.append(_item_inbound_ip_rules.to_dict())
            _dict['inboundIpRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of input_schema_mapping
        if self.input_schema_mapping:
            _dict['inputSchemaMapping'] = self.input_schema_mapping.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TopicProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowTrafficFromAllIPs": obj.get("allowTrafficFromAllIPs"),
            "endpoint": obj.get("endpoint"),
            "inboundIpRules": [InboundIpRule.from_dict(_item) for _item in obj["inboundIpRules"]] if obj.get("inboundIpRules") is not None else None,
            "inputSchema": obj.get("inputSchema") if obj.get("inputSchema") is not None else 'EventGridSchema',
            "inputSchemaMapping": InputSchemaMapping.from_dict(obj["inputSchemaMapping"]) if obj.get("inputSchemaMapping") is not None else None,
            "metricResourceId": obj.get("metricResourceId"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



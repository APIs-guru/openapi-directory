# coding: utf-8

"""
    EventGridManagementClient

    Azure EventGrid Management Client

    The version of the OpenAPI document: 2020-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.bool_equals_advanced_filter import BoolEqualsAdvancedFilter
    from openapi_client.models.number_greater_than_advanced_filter import NumberGreaterThanAdvancedFilter
    from openapi_client.models.number_greater_than_or_equals_advanced_filter import NumberGreaterThanOrEqualsAdvancedFilter
    from openapi_client.models.number_in_advanced_filter import NumberInAdvancedFilter
    from openapi_client.models.number_less_than_advanced_filter import NumberLessThanAdvancedFilter
    from openapi_client.models.number_less_than_or_equals_advanced_filter import NumberLessThanOrEqualsAdvancedFilter
    from openapi_client.models.number_not_in_advanced_filter import NumberNotInAdvancedFilter
    from openapi_client.models.string_begins_with_advanced_filter import StringBeginsWithAdvancedFilter
    from openapi_client.models.string_contains_advanced_filter import StringContainsAdvancedFilter
    from openapi_client.models.string_ends_with_advanced_filter import StringEndsWithAdvancedFilter
    from openapi_client.models.string_in_advanced_filter import StringInAdvancedFilter
    from openapi_client.models.string_not_in_advanced_filter import StringNotInAdvancedFilter

class AdvancedFilter(BaseModel):
    """
    This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, description="The field/property in the event based on which you want to filter.")
    operator_type: StrictStr = Field(description="The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.", alias="operatorType")
    __properties: ClassVar[List[str]] = ["key", "operatorType"]

    @field_validator('operator_type')
    def operator_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NumberIn', 'NumberNotIn', 'NumberLessThan', 'NumberGreaterThan', 'NumberLessThanOrEquals', 'NumberGreaterThanOrEquals', 'BoolEquals', 'StringIn', 'StringNotIn', 'StringBeginsWith', 'StringEndsWith', 'StringContains']):
            raise ValueError("must be one of enum values ('NumberIn', 'NumberNotIn', 'NumberLessThan', 'NumberGreaterThan', 'NumberLessThanOrEquals', 'NumberGreaterThanOrEquals', 'BoolEquals', 'StringIn', 'StringNotIn', 'StringBeginsWith', 'StringEndsWith', 'StringContains')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'operatorType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'BoolEqualsAdvancedFilter': 'BoolEqualsAdvancedFilter','NumberGreaterThanAdvancedFilter': 'NumberGreaterThanAdvancedFilter','NumberGreaterThanOrEqualsAdvancedFilter': 'NumberGreaterThanOrEqualsAdvancedFilter','NumberInAdvancedFilter': 'NumberInAdvancedFilter','NumberLessThanAdvancedFilter': 'NumberLessThanAdvancedFilter','NumberLessThanOrEqualsAdvancedFilter': 'NumberLessThanOrEqualsAdvancedFilter','NumberNotInAdvancedFilter': 'NumberNotInAdvancedFilter','StringBeginsWithAdvancedFilter': 'StringBeginsWithAdvancedFilter','StringContainsAdvancedFilter': 'StringContainsAdvancedFilter','StringEndsWithAdvancedFilter': 'StringEndsWithAdvancedFilter','StringInAdvancedFilter': 'StringInAdvancedFilter','StringNotInAdvancedFilter': 'StringNotInAdvancedFilter'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[BoolEqualsAdvancedFilter, NumberGreaterThanAdvancedFilter, NumberGreaterThanOrEqualsAdvancedFilter, NumberInAdvancedFilter, NumberLessThanAdvancedFilter, NumberLessThanOrEqualsAdvancedFilter, NumberNotInAdvancedFilter, StringBeginsWithAdvancedFilter, StringContainsAdvancedFilter, StringEndsWithAdvancedFilter, StringInAdvancedFilter, StringNotInAdvancedFilter]]:
        """Create an instance of AdvancedFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[BoolEqualsAdvancedFilter, NumberGreaterThanAdvancedFilter, NumberGreaterThanOrEqualsAdvancedFilter, NumberInAdvancedFilter, NumberLessThanAdvancedFilter, NumberLessThanOrEqualsAdvancedFilter, NumberNotInAdvancedFilter, StringBeginsWithAdvancedFilter, StringContainsAdvancedFilter, StringEndsWithAdvancedFilter, StringInAdvancedFilter, StringNotInAdvancedFilter]]:
        """Create an instance of AdvancedFilter from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'BoolEqualsAdvancedFilter':
            return import_module("openapi_client.models.bool_equals_advanced_filter").BoolEqualsAdvancedFilter.from_dict(obj)
        if object_type ==  'NumberGreaterThanAdvancedFilter':
            return import_module("openapi_client.models.number_greater_than_advanced_filter").NumberGreaterThanAdvancedFilter.from_dict(obj)
        if object_type ==  'NumberGreaterThanOrEqualsAdvancedFilter':
            return import_module("openapi_client.models.number_greater_than_or_equals_advanced_filter").NumberGreaterThanOrEqualsAdvancedFilter.from_dict(obj)
        if object_type ==  'NumberInAdvancedFilter':
            return import_module("openapi_client.models.number_in_advanced_filter").NumberInAdvancedFilter.from_dict(obj)
        if object_type ==  'NumberLessThanAdvancedFilter':
            return import_module("openapi_client.models.number_less_than_advanced_filter").NumberLessThanAdvancedFilter.from_dict(obj)
        if object_type ==  'NumberLessThanOrEqualsAdvancedFilter':
            return import_module("openapi_client.models.number_less_than_or_equals_advanced_filter").NumberLessThanOrEqualsAdvancedFilter.from_dict(obj)
        if object_type ==  'NumberNotInAdvancedFilter':
            return import_module("openapi_client.models.number_not_in_advanced_filter").NumberNotInAdvancedFilter.from_dict(obj)
        if object_type ==  'StringBeginsWithAdvancedFilter':
            return import_module("openapi_client.models.string_begins_with_advanced_filter").StringBeginsWithAdvancedFilter.from_dict(obj)
        if object_type ==  'StringContainsAdvancedFilter':
            return import_module("openapi_client.models.string_contains_advanced_filter").StringContainsAdvancedFilter.from_dict(obj)
        if object_type ==  'StringEndsWithAdvancedFilter':
            return import_module("openapi_client.models.string_ends_with_advanced_filter").StringEndsWithAdvancedFilter.from_dict(obj)
        if object_type ==  'StringInAdvancedFilter':
            return import_module("openapi_client.models.string_in_advanced_filter").StringInAdvancedFilter.from_dict(obj)
        if object_type ==  'StringNotInAdvancedFilter':
            return import_module("openapi_client.models.string_not_in_advanced_filter").StringNotInAdvancedFilter.from_dict(obj)

        raise ValueError("AdvancedFilter failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



# coding: utf-8

"""
    EventGridManagementClient

    Azure EventGrid Management Client

    The version of the OpenAPI document: 2020-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebHookEventSubscriptionDestinationProperties(BaseModel):
    """
    Information about the webhook destination properties for an event subscription.
    """ # noqa: E501
    azure_active_directory_application_id_or_uri: Optional[StrictStr] = Field(default=None, description="The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.", alias="azureActiveDirectoryApplicationIdOrUri")
    azure_active_directory_tenant_id: Optional[StrictStr] = Field(default=None, description="The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.", alias="azureActiveDirectoryTenantId")
    endpoint_base_url: Optional[StrictStr] = Field(default=None, description="The base URL that represents the endpoint of the destination of an event subscription.", alias="endpointBaseUrl")
    endpoint_url: Optional[StrictStr] = Field(default=None, description="The URL that represents the endpoint of the destination of an event subscription.", alias="endpointUrl")
    max_events_per_batch: Optional[StrictInt] = Field(default=None, description="Maximum number of events per batch.", alias="maxEventsPerBatch")
    preferred_batch_size_in_kilobytes: Optional[StrictInt] = Field(default=None, description="Preferred batch size in Kilobytes.", alias="preferredBatchSizeInKilobytes")
    __properties: ClassVar[List[str]] = ["azureActiveDirectoryApplicationIdOrUri", "azureActiveDirectoryTenantId", "endpointBaseUrl", "endpointUrl", "maxEventsPerBatch", "preferredBatchSizeInKilobytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebHookEventSubscriptionDestinationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "endpoint_base_url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebHookEventSubscriptionDestinationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureActiveDirectoryApplicationIdOrUri": obj.get("azureActiveDirectoryApplicationIdOrUri"),
            "azureActiveDirectoryTenantId": obj.get("azureActiveDirectoryTenantId"),
            "endpointBaseUrl": obj.get("endpointBaseUrl"),
            "endpointUrl": obj.get("endpointUrl"),
            "maxEventsPerBatch": obj.get("maxEventsPerBatch"),
            "preferredBatchSizeInKilobytes": obj.get("preferredBatchSizeInKilobytes")
        })
        return _obj



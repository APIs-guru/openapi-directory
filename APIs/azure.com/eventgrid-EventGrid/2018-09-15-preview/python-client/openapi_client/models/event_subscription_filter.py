# coding: utf-8

"""
    EventGridManagementClient

    Azure EventGrid Management Client

    The version of the OpenAPI document: 2018-09-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.advanced_filter import AdvancedFilter
from typing import Optional, Set
from typing_extensions import Self

class EventSubscriptionFilter(BaseModel):
    """
    Filter for the Event Subscription
    """ # noqa: E501
    advanced_filters: Optional[List[AdvancedFilter]] = Field(default=None, description="A list of advanced filters.", alias="advancedFilters")
    included_event_types: Optional[List[StrictStr]] = Field(default=None, description="A list of applicable event types that need to be part of the event subscription.   If it is desired to subscribe to all event types, the string \"all\" needs to be specified as an element in this list.", alias="includedEventTypes")
    is_subject_case_sensitive: Optional[StrictBool] = Field(default=False, description="Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter   should be compared in a case sensitive manner.", alias="isSubjectCaseSensitive")
    subject_begins_with: Optional[StrictStr] = Field(default=None, description="An optional string to filter events for an event subscription based on a resource path prefix.  The format of this depends on the publisher of the events.   Wildcard characters are not supported in this path.", alias="subjectBeginsWith")
    subject_ends_with: Optional[StrictStr] = Field(default=None, description="An optional string to filter events for an event subscription based on a resource path suffix.  Wildcard characters are not supported in this path.", alias="subjectEndsWith")
    __properties: ClassVar[List[str]] = ["advancedFilters", "includedEventTypes", "isSubjectCaseSensitive", "subjectBeginsWith", "subjectEndsWith"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventSubscriptionFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_filters (list)
        _items = []
        if self.advanced_filters:
            for _item_advanced_filters in self.advanced_filters:
                if _item_advanced_filters:
                    _items.append(_item_advanced_filters.to_dict())
            _dict['advancedFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventSubscriptionFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedFilters": [AdvancedFilter.from_dict(_item) for _item in obj["advancedFilters"]] if obj.get("advancedFilters") is not None else None,
            "includedEventTypes": obj.get("includedEventTypes"),
            "isSubjectCaseSensitive": obj.get("isSubjectCaseSensitive") if obj.get("isSubjectCaseSensitive") is not None else False,
            "subjectBeginsWith": obj.get("subjectBeginsWith"),
            "subjectEndsWith": obj.get("subjectEndsWith")
        })
        return _obj



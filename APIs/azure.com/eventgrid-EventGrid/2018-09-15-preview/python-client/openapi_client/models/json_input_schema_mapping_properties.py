# coding: utf-8

"""
    EventGridManagementClient

    Azure EventGrid Management Client

    The version of the OpenAPI document: 2018-09-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.json_field import JsonField
from openapi_client.models.json_field_with_default import JsonFieldWithDefault
from typing import Optional, Set
from typing_extensions import Self

class JsonInputSchemaMappingProperties(BaseModel):
    """
    This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.
    """ # noqa: E501
    data_version: Optional[JsonFieldWithDefault] = Field(default=None, alias="dataVersion")
    event_time: Optional[JsonField] = Field(default=None, alias="eventTime")
    event_type: Optional[JsonFieldWithDefault] = Field(default=None, alias="eventType")
    id: Optional[JsonField] = None
    subject: Optional[JsonFieldWithDefault] = None
    topic: Optional[JsonField] = None
    __properties: ClassVar[List[str]] = ["dataVersion", "eventTime", "eventType", "id", "subject", "topic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonInputSchemaMappingProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_version
        if self.data_version:
            _dict['dataVersion'] = self.data_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_time
        if self.event_time:
            _dict['eventTime'] = self.event_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_type
        if self.event_type:
            _dict['eventType'] = self.event_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of topic
        if self.topic:
            _dict['topic'] = self.topic.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonInputSchemaMappingProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataVersion": JsonFieldWithDefault.from_dict(obj["dataVersion"]) if obj.get("dataVersion") is not None else None,
            "eventTime": JsonField.from_dict(obj["eventTime"]) if obj.get("eventTime") is not None else None,
            "eventType": JsonFieldWithDefault.from_dict(obj["eventType"]) if obj.get("eventType") is not None else None,
            "id": JsonField.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "subject": JsonFieldWithDefault.from_dict(obj["subject"]) if obj.get("subject") is not None else None,
            "topic": JsonField.from_dict(obj["topic"]) if obj.get("topic") is not None else None
        })
        return _obj



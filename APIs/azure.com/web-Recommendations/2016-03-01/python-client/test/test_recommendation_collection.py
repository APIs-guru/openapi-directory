# coding: utf-8

"""
    Recommendations API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.recommendation_collection import RecommendationCollection

class TestRecommendationCollection(unittest.TestCase):
    """RecommendationCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RecommendationCollection:
        """Test RecommendationCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RecommendationCollection`
        """
        model = RecommendationCollection()
        if include_optional:
            return RecommendationCollection(
                next_link = '',
                value = [
                    openapi_client.models.recommendation.Recommendation(
                        properties = openapi_client.models.properties.properties(
                            action_name = '', 
                            blade_name = '', 
                            channels = 'Notification', 
                            creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            display_name = '', 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            extension_name = '', 
                            forward_link = '', 
                            is_dynamic = True, 
                            level = 'Critical', 
                            message = '', 
                            next_notification_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            notification_expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            notified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            recommendation_id = '00000000-0000-0000-0000-000000000000', 
                            resource_id = '', 
                            resource_scope = 'ServerFarm', 
                            rule_name = '', 
                            score = 1.337, 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            tags = [
                                ''
                                ], ), )
                    ]
            )
        else:
            return RecommendationCollection(
                value = [
                    openapi_client.models.recommendation.Recommendation(
                        properties = openapi_client.models.properties.properties(
                            action_name = '', 
                            blade_name = '', 
                            channels = 'Notification', 
                            creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            display_name = '', 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            extension_name = '', 
                            forward_link = '', 
                            is_dynamic = True, 
                            level = 'Critical', 
                            message = '', 
                            next_notification_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            notification_expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            notified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            recommendation_id = '00000000-0000-0000-0000-000000000000', 
                            resource_id = '', 
                            resource_scope = 'ServerFarm', 
                            rule_name = '', 
                            score = 1.337, 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            tags = [
                                ''
                                ], ), )
                    ],
        )
        """

    def testRecommendationCollection(self):
        """Test RecommendationCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

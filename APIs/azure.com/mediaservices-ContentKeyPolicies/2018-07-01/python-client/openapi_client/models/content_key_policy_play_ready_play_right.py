# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_key_policy_play_ready_explicit_analog_television_restriction import ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction
from typing import Optional, Set
from typing_extensions import Self

class ContentKeyPolicyPlayReadyPlayRight(BaseModel):
    """
    Configures the Play Right in the PlayReady license.
    """ # noqa: E501
    agc_and_color_stripe_restriction: Optional[StrictInt] = Field(default=None, description="Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.", alias="agcAndColorStripeRestriction")
    allow_passing_video_content_to_unknown_output: StrictStr = Field(description="Configures Unknown output handling settings of the license.", alias="allowPassingVideoContentToUnknownOutput")
    analog_video_opl: Optional[StrictInt] = Field(default=None, description="Specifies the output protection level for compressed digital audio.", alias="analogVideoOpl")
    compressed_digital_audio_opl: Optional[StrictInt] = Field(default=None, description="Specifies the output protection level for compressed digital audio.", alias="compressedDigitalAudioOpl")
    compressed_digital_video_opl: Optional[StrictInt] = Field(default=None, description="Specifies the output protection level for compressed digital video.", alias="compressedDigitalVideoOpl")
    digital_video_only_content_restriction: StrictBool = Field(description="Enables the Image Constraint For Analog Component Video Restriction in the license.", alias="digitalVideoOnlyContentRestriction")
    explicit_analog_television_output_restriction: Optional[ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction] = Field(default=None, alias="explicitAnalogTelevisionOutputRestriction")
    first_play_expiration: Optional[StrictStr] = Field(default=None, description="The amount of time that the license is valid after the license is first used to play content.", alias="firstPlayExpiration")
    image_constraint_for_analog_component_video_restriction: StrictBool = Field(description="Enables the Image Constraint For Analog Component Video Restriction in the license.", alias="imageConstraintForAnalogComponentVideoRestriction")
    image_constraint_for_analog_computer_monitor_restriction: StrictBool = Field(description="Enables the Image Constraint For Analog Component Video Restriction in the license.", alias="imageConstraintForAnalogComputerMonitorRestriction")
    scms_restriction: Optional[StrictInt] = Field(default=None, description="Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.", alias="scmsRestriction")
    uncompressed_digital_audio_opl: Optional[StrictInt] = Field(default=None, description="Specifies the output protection level for uncompressed digital audio.", alias="uncompressedDigitalAudioOpl")
    uncompressed_digital_video_opl: Optional[StrictInt] = Field(default=None, description="Specifies the output protection level for uncompressed digital video.", alias="uncompressedDigitalVideoOpl")
    __properties: ClassVar[List[str]] = ["agcAndColorStripeRestriction", "allowPassingVideoContentToUnknownOutput", "analogVideoOpl", "compressedDigitalAudioOpl", "compressedDigitalVideoOpl", "digitalVideoOnlyContentRestriction", "explicitAnalogTelevisionOutputRestriction", "firstPlayExpiration", "imageConstraintForAnalogComponentVideoRestriction", "imageConstraintForAnalogComputerMonitorRestriction", "scmsRestriction", "uncompressedDigitalAudioOpl", "uncompressedDigitalVideoOpl"]

    @field_validator('allow_passing_video_content_to_unknown_output')
    def allow_passing_video_content_to_unknown_output_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'NotAllowed', 'Allowed', 'AllowedWithVideoConstriction']):
            raise ValueError("must be one of enum values ('Unknown', 'NotAllowed', 'Allowed', 'AllowedWithVideoConstriction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentKeyPolicyPlayReadyPlayRight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of explicit_analog_television_output_restriction
        if self.explicit_analog_television_output_restriction:
            _dict['explicitAnalogTelevisionOutputRestriction'] = self.explicit_analog_television_output_restriction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentKeyPolicyPlayReadyPlayRight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agcAndColorStripeRestriction": obj.get("agcAndColorStripeRestriction"),
            "allowPassingVideoContentToUnknownOutput": obj.get("allowPassingVideoContentToUnknownOutput"),
            "analogVideoOpl": obj.get("analogVideoOpl"),
            "compressedDigitalAudioOpl": obj.get("compressedDigitalAudioOpl"),
            "compressedDigitalVideoOpl": obj.get("compressedDigitalVideoOpl"),
            "digitalVideoOnlyContentRestriction": obj.get("digitalVideoOnlyContentRestriction"),
            "explicitAnalogTelevisionOutputRestriction": ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.from_dict(obj["explicitAnalogTelevisionOutputRestriction"]) if obj.get("explicitAnalogTelevisionOutputRestriction") is not None else None,
            "firstPlayExpiration": obj.get("firstPlayExpiration"),
            "imageConstraintForAnalogComponentVideoRestriction": obj.get("imageConstraintForAnalogComponentVideoRestriction"),
            "imageConstraintForAnalogComputerMonitorRestriction": obj.get("imageConstraintForAnalogComputerMonitorRestriction"),
            "scmsRestriction": obj.get("scmsRestriction"),
            "uncompressedDigitalAudioOpl": obj.get("uncompressedDigitalAudioOpl"),
            "uncompressedDigitalVideoOpl": obj.get("uncompressedDigitalVideoOpl")
        })
        return _obj



# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_key_policy_play_ready_content_key_location import ContentKeyPolicyPlayReadyContentKeyLocation
from openapi_client.models.content_key_policy_play_ready_play_right import ContentKeyPolicyPlayReadyPlayRight
from typing import Optional, Set
from typing_extensions import Self

class ContentKeyPolicyPlayReadyLicense(BaseModel):
    """
    The PlayReady license
    """ # noqa: E501
    allow_test_devices: StrictBool = Field(description="A flag indicating whether test devices can use the license.", alias="allowTestDevices")
    begin_date: Optional[datetime] = Field(default=None, description="The begin date of license", alias="beginDate")
    content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation = Field(alias="contentKeyLocation")
    content_type: StrictStr = Field(description="The PlayReady content type.", alias="contentType")
    expiration_date: Optional[datetime] = Field(default=None, description="The expiration date of license.", alias="expirationDate")
    grace_period: Optional[StrictStr] = Field(default=None, description="The grace period of license.", alias="gracePeriod")
    license_type: StrictStr = Field(description="The license type.", alias="licenseType")
    play_right: Optional[ContentKeyPolicyPlayReadyPlayRight] = Field(default=None, alias="playRight")
    relative_begin_date: Optional[StrictStr] = Field(default=None, description="The relative begin date of license.", alias="relativeBeginDate")
    relative_expiration_date: Optional[StrictStr] = Field(default=None, description="The relative expiration date of license.", alias="relativeExpirationDate")
    __properties: ClassVar[List[str]] = ["allowTestDevices", "beginDate", "contentKeyLocation", "contentType", "expirationDate", "gracePeriod", "licenseType", "playRight", "relativeBeginDate", "relativeExpirationDate"]

    @field_validator('content_type')
    def content_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'Unspecified', 'UltraVioletDownload', 'UltraVioletStreaming']):
            raise ValueError("must be one of enum values ('Unknown', 'Unspecified', 'UltraVioletDownload', 'UltraVioletStreaming')")
        return value

    @field_validator('license_type')
    def license_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'NonPersistent', 'Persistent']):
            raise ValueError("must be one of enum values ('Unknown', 'NonPersistent', 'Persistent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentKeyPolicyPlayReadyLicense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_key_location
        if self.content_key_location:
            _dict['contentKeyLocation'] = self.content_key_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of play_right
        if self.play_right:
            _dict['playRight'] = self.play_right.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentKeyPolicyPlayReadyLicense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowTestDevices": obj.get("allowTestDevices"),
            "beginDate": obj.get("beginDate"),
            "contentKeyLocation": ContentKeyPolicyPlayReadyContentKeyLocation.from_dict(obj["contentKeyLocation"]) if obj.get("contentKeyLocation") is not None else None,
            "contentType": obj.get("contentType"),
            "expirationDate": obj.get("expirationDate"),
            "gracePeriod": obj.get("gracePeriod"),
            "licenseType": obj.get("licenseType"),
            "playRight": ContentKeyPolicyPlayReadyPlayRight.from_dict(obj["playRight"]) if obj.get("playRight") is not None else None,
            "relativeBeginDate": obj.get("relativeBeginDate"),
            "relativeExpirationDate": obj.get("relativeExpirationDate")
        })
        return _obj



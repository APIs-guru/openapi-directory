# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_key_policy_restriction import ContentKeyPolicyRestriction
from openapi_client.models.content_key_policy_restriction_token_key import ContentKeyPolicyRestrictionTokenKey
from openapi_client.models.content_key_policy_token_claim import ContentKeyPolicyTokenClaim
from typing import Optional, Set
from typing_extensions import Self

class ContentKeyPolicyTokenRestriction(ContentKeyPolicyRestriction):
    """
    Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
    """ # noqa: E501
    alternate_verification_keys: Optional[List[ContentKeyPolicyRestrictionTokenKey]] = Field(default=None, description="A list of alternative verification keys.", alias="alternateVerificationKeys")
    audience: StrictStr = Field(description="The audience for the token.")
    issuer: StrictStr = Field(description="The token issuer.")
    open_id_connect_discovery_document: Optional[StrictStr] = Field(default=None, description="The OpenID connect discovery document.", alias="openIdConnectDiscoveryDocument")
    primary_verification_key: ContentKeyPolicyRestrictionTokenKey = Field(alias="primaryVerificationKey")
    required_claims: Optional[List[ContentKeyPolicyTokenClaim]] = Field(default=None, description="A list of required token claims.", alias="requiredClaims")
    restriction_token_type: StrictStr = Field(description="The type of token.", alias="restrictionTokenType")
    __properties: ClassVar[List[str]] = ["@odata.type"]

    @field_validator('restriction_token_type')
    def restriction_token_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'Swt', 'Jwt']):
            raise ValueError("must be one of enum values ('Unknown', 'Swt', 'Jwt')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentKeyPolicyTokenRestriction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentKeyPolicyTokenRestriction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@odata.type": obj.get("@odata.type")
        })
        return _obj



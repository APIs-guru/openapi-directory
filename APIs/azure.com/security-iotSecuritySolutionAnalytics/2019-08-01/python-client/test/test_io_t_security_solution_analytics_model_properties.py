# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.io_t_security_solution_analytics_model_properties import IoTSecuritySolutionAnalyticsModelProperties

class TestIoTSecuritySolutionAnalyticsModelProperties(unittest.TestCase):
    """IoTSecuritySolutionAnalyticsModelProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoTSecuritySolutionAnalyticsModelProperties:
        """Test IoTSecuritySolutionAnalyticsModelProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoTSecuritySolutionAnalyticsModelProperties`
        """
        model = IoTSecuritySolutionAnalyticsModelProperties()
        if include_optional:
            return IoTSecuritySolutionAnalyticsModelProperties(
                devices_metrics = [
                    openapi_client.models.io_t_security_solution_analytics_model_properties_devices_metrics_inner.IoTSecuritySolutionAnalyticsModelProperties_devicesMetrics_inner(
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                metrics = openapi_client.models.io_t_severity_metrics.IoTSeverityMetrics(
                    high = 56, 
                    low = 56, 
                    medium = 56, ),
                most_prevalent_device_alerts = [
                    openapi_client.models.io_t_security_device_alert.IoTSecurityDeviceAlert(
                        alert_display_name = '', 
                        alerts_count = 56, 
                        reported_severity = 'Informational', )
                    ],
                most_prevalent_device_recommendations = [
                    openapi_client.models.io_t_security_device_recommendation.IoTSecurityDeviceRecommendation(
                        devices_count = 56, 
                        recommendation_display_name = '', 
                        reported_severity = 'Informational', )
                    ],
                top_alerted_devices = [
                    openapi_client.models.io_t_security_alerted_device.IoTSecurityAlertedDevice(
                        alerts_count = 56, 
                        device_id = '', )
                    ],
                unhealthy_device_count = 56
            )
        else:
            return IoTSecuritySolutionAnalyticsModelProperties(
        )
        """

    def testIoTSecuritySolutionAnalyticsModelProperties(self):
        """Test IoTSecuritySolutionAnalyticsModelProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

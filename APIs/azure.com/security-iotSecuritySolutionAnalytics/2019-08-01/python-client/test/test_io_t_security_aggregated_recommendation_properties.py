# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.io_t_security_aggregated_recommendation_properties import IoTSecurityAggregatedRecommendationProperties

class TestIoTSecurityAggregatedRecommendationProperties(unittest.TestCase):
    """IoTSecurityAggregatedRecommendationProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoTSecurityAggregatedRecommendationProperties:
        """Test IoTSecurityAggregatedRecommendationProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoTSecurityAggregatedRecommendationProperties`
        """
        model = IoTSecurityAggregatedRecommendationProperties()
        if include_optional:
            return IoTSecurityAggregatedRecommendationProperties(
                description = '',
                detected_by = '',
                healthy_devices = 56,
                log_analytics_query = '',
                recommendation_display_name = '',
                recommendation_name = '',
                recommendation_type_id = '',
                remediation_steps = '',
                reported_severity = 'Informational',
                unhealthy_device_count = 56
            )
        else:
            return IoTSecurityAggregatedRecommendationProperties(
        )
        """

    def testIoTSecurityAggregatedRecommendationProperties(self):
        """Test IoTSecurityAggregatedRecommendationProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

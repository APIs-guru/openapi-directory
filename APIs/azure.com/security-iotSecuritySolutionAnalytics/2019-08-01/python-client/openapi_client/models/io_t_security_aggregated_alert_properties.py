# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.io_t_security_aggregated_alert_properties_top_devices_list_inner import IoTSecurityAggregatedAlertPropertiesTopDevicesListInner
from typing import Optional, Set
from typing_extensions import Self

class IoTSecurityAggregatedAlertProperties(BaseModel):
    """
    IoT Security solution aggregated alert details.
    """ # noqa: E501
    action_taken: Optional[StrictStr] = Field(default=None, description="IoT Security solution alert response.", alias="actionTaken")
    aggregated_date_utc: Optional[date] = Field(default=None, description="Date of detection.", alias="aggregatedDateUtc")
    alert_display_name: Optional[StrictStr] = Field(default=None, description="Display name of the alert type.", alias="alertDisplayName")
    alert_type: Optional[StrictStr] = Field(default=None, description="Name of the alert type.", alias="alertType")
    count: Optional[StrictInt] = Field(default=None, description="Number of alerts occurrences within the aggregated time window.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the suspected vulnerability and meaning.")
    effected_resource_type: Optional[StrictStr] = Field(default=None, description="Azure resource ID of the resource that received the alerts.", alias="effectedResourceType")
    log_analytics_query: Optional[StrictStr] = Field(default=None, description="Log analytics query for getting the list of affected devices/alerts.", alias="logAnalyticsQuery")
    remediation_steps: Optional[StrictStr] = Field(default=None, description="Recommended steps for remediation.", alias="remediationSteps")
    reported_severity: Optional[StrictStr] = Field(default=None, description="Assessed alert severity.", alias="reportedSeverity")
    system_source: Optional[StrictStr] = Field(default=None, description="The type of the alerted resource (Azure, Non-Azure).", alias="systemSource")
    top_devices_list: Optional[List[IoTSecurityAggregatedAlertPropertiesTopDevicesListInner]] = Field(default=None, description="10 devices with the highest number of occurrences of this alert type, on this day.", alias="topDevicesList")
    vendor_name: Optional[StrictStr] = Field(default=None, description="Name of the organization that raised the alert.", alias="vendorName")
    __properties: ClassVar[List[str]] = ["actionTaken", "aggregatedDateUtc", "alertDisplayName", "alertType", "count", "description", "effectedResourceType", "logAnalyticsQuery", "remediationSteps", "reportedSeverity", "systemSource", "topDevicesList", "vendorName"]

    @field_validator('reported_severity')
    def reported_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Informational', 'Low', 'Medium', 'High']):
            raise ValueError("must be one of enum values ('Informational', 'Low', 'Medium', 'High')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoTSecurityAggregatedAlertProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "action_taken",
            "aggregated_date_utc",
            "alert_display_name",
            "alert_type",
            "count",
            "description",
            "effected_resource_type",
            "log_analytics_query",
            "remediation_steps",
            "reported_severity",
            "system_source",
            "top_devices_list",
            "vendor_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in top_devices_list (list)
        _items = []
        if self.top_devices_list:
            for _item_top_devices_list in self.top_devices_list:
                if _item_top_devices_list:
                    _items.append(_item_top_devices_list.to_dict())
            _dict['topDevicesList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoTSecurityAggregatedAlertProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionTaken": obj.get("actionTaken"),
            "aggregatedDateUtc": obj.get("aggregatedDateUtc"),
            "alertDisplayName": obj.get("alertDisplayName"),
            "alertType": obj.get("alertType"),
            "count": obj.get("count"),
            "description": obj.get("description"),
            "effectedResourceType": obj.get("effectedResourceType"),
            "logAnalyticsQuery": obj.get("logAnalyticsQuery"),
            "remediationSteps": obj.get("remediationSteps"),
            "reportedSeverity": obj.get("reportedSeverity"),
            "systemSource": obj.get("systemSource"),
            "topDevicesList": [IoTSecurityAggregatedAlertPropertiesTopDevicesListInner.from_dict(_item) for _item in obj["topDevicesList"]] if obj.get("topDevicesList") is not None else None,
            "vendorName": obj.get("vendorName")
        })
        return _obj



# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.io_t_security_alerted_device import IoTSecurityAlertedDevice
from openapi_client.models.io_t_security_device_alert import IoTSecurityDeviceAlert
from openapi_client.models.io_t_security_device_recommendation import IoTSecurityDeviceRecommendation
from openapi_client.models.io_t_security_solution_analytics_model_properties_devices_metrics_inner import IoTSecuritySolutionAnalyticsModelPropertiesDevicesMetricsInner
from openapi_client.models.io_t_severity_metrics import IoTSeverityMetrics
from typing import Optional, Set
from typing_extensions import Self

class IoTSecuritySolutionAnalyticsModelProperties(BaseModel):
    """
    Security analytics properties of your IoT Security solution
    """ # noqa: E501
    devices_metrics: Optional[List[IoTSecuritySolutionAnalyticsModelPropertiesDevicesMetricsInner]] = Field(default=None, description="List of device metrics by the aggregation date.", alias="devicesMetrics")
    metrics: Optional[IoTSeverityMetrics] = None
    most_prevalent_device_alerts: Optional[List[IoTSecurityDeviceAlert]] = Field(default=None, description="List of alerts with the count of raised alerts", alias="mostPrevalentDeviceAlerts")
    most_prevalent_device_recommendations: Optional[List[IoTSecurityDeviceRecommendation]] = Field(default=None, description="List of aggregated recommendation data, per recommendation type, per device.", alias="mostPrevalentDeviceRecommendations")
    top_alerted_devices: Optional[List[IoTSecurityAlertedDevice]] = Field(default=None, description="List of devices with open alerts including the count of alerts per device.", alias="topAlertedDevices")
    unhealthy_device_count: Optional[StrictInt] = Field(default=None, description="Number of unhealthy devices within your IoT Security solution.", alias="unhealthyDeviceCount")
    __properties: ClassVar[List[str]] = ["devicesMetrics", "metrics", "mostPrevalentDeviceAlerts", "mostPrevalentDeviceRecommendations", "topAlertedDevices", "unhealthyDeviceCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoTSecuritySolutionAnalyticsModelProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "devices_metrics",
            "unhealthy_device_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in devices_metrics (list)
        _items = []
        if self.devices_metrics:
            for _item_devices_metrics in self.devices_metrics:
                if _item_devices_metrics:
                    _items.append(_item_devices_metrics.to_dict())
            _dict['devicesMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in most_prevalent_device_alerts (list)
        _items = []
        if self.most_prevalent_device_alerts:
            for _item_most_prevalent_device_alerts in self.most_prevalent_device_alerts:
                if _item_most_prevalent_device_alerts:
                    _items.append(_item_most_prevalent_device_alerts.to_dict())
            _dict['mostPrevalentDeviceAlerts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in most_prevalent_device_recommendations (list)
        _items = []
        if self.most_prevalent_device_recommendations:
            for _item_most_prevalent_device_recommendations in self.most_prevalent_device_recommendations:
                if _item_most_prevalent_device_recommendations:
                    _items.append(_item_most_prevalent_device_recommendations.to_dict())
            _dict['mostPrevalentDeviceRecommendations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in top_alerted_devices (list)
        _items = []
        if self.top_alerted_devices:
            for _item_top_alerted_devices in self.top_alerted_devices:
                if _item_top_alerted_devices:
                    _items.append(_item_top_alerted_devices.to_dict())
            _dict['topAlertedDevices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoTSecuritySolutionAnalyticsModelProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "devicesMetrics": [IoTSecuritySolutionAnalyticsModelPropertiesDevicesMetricsInner.from_dict(_item) for _item in obj["devicesMetrics"]] if obj.get("devicesMetrics") is not None else None,
            "metrics": IoTSeverityMetrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "mostPrevalentDeviceAlerts": [IoTSecurityDeviceAlert.from_dict(_item) for _item in obj["mostPrevalentDeviceAlerts"]] if obj.get("mostPrevalentDeviceAlerts") is not None else None,
            "mostPrevalentDeviceRecommendations": [IoTSecurityDeviceRecommendation.from_dict(_item) for _item in obj["mostPrevalentDeviceRecommendations"]] if obj.get("mostPrevalentDeviceRecommendations") is not None else None,
            "topAlertedDevices": [IoTSecurityAlertedDevice.from_dict(_item) for _item in obj["topAlertedDevices"]] if obj.get("topAlertedDevices") is not None else None,
            "unhealthyDeviceCount": obj.get("unhealthyDeviceCount")
        })
        return _obj



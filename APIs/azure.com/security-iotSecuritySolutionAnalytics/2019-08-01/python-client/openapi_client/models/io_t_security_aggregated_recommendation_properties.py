# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IoTSecurityAggregatedRecommendationProperties(BaseModel):
    """
    IoT Security solution aggregated recommendation information
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the suspected vulnerability and meaning.")
    detected_by: Optional[StrictStr] = Field(default=None, description="Name of the organization that made the recommendation.", alias="detectedBy")
    healthy_devices: Optional[StrictInt] = Field(default=None, description="Number of healthy devices within the IoT Security solution.", alias="healthyDevices")
    log_analytics_query: Optional[StrictStr] = Field(default=None, description="Log analytics query for getting the list of affected devices/alerts.", alias="logAnalyticsQuery")
    recommendation_display_name: Optional[StrictStr] = Field(default=None, description="Display name of the recommendation type.", alias="recommendationDisplayName")
    recommendation_name: Optional[StrictStr] = Field(default=None, description="Name of the recommendation.", alias="recommendationName")
    recommendation_type_id: Optional[StrictStr] = Field(default=None, description="Recommendation-type GUID.", alias="recommendationTypeId")
    remediation_steps: Optional[StrictStr] = Field(default=None, description="Recommended steps for remediation", alias="remediationSteps")
    reported_severity: Optional[StrictStr] = Field(default=None, description="Assessed recommendation severity.", alias="reportedSeverity")
    unhealthy_device_count: Optional[StrictInt] = Field(default=None, description="Number of unhealthy devices within the IoT Security solution.", alias="unhealthyDeviceCount")
    __properties: ClassVar[List[str]] = ["description", "detectedBy", "healthyDevices", "logAnalyticsQuery", "recommendationDisplayName", "recommendationName", "recommendationTypeId", "remediationSteps", "reportedSeverity", "unhealthyDeviceCount"]

    @field_validator('reported_severity')
    def reported_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Informational', 'Low', 'Medium', 'High']):
            raise ValueError("must be one of enum values ('Informational', 'Low', 'Medium', 'High')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoTSecurityAggregatedRecommendationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "detected_by",
            "healthy_devices",
            "log_analytics_query",
            "recommendation_display_name",
            "recommendation_type_id",
            "remediation_steps",
            "reported_severity",
            "unhealthy_device_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoTSecurityAggregatedRecommendationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "detectedBy": obj.get("detectedBy"),
            "healthyDevices": obj.get("healthyDevices"),
            "logAnalyticsQuery": obj.get("logAnalyticsQuery"),
            "recommendationDisplayName": obj.get("recommendationDisplayName"),
            "recommendationName": obj.get("recommendationName"),
            "recommendationTypeId": obj.get("recommendationTypeId"),
            "remediationSteps": obj.get("remediationSteps"),
            "reportedSeverity": obj.get("reportedSeverity"),
            "unhealthyDeviceCount": obj.get("unhealthyDeviceCount")
        })
        return _obj



# coding: utf-8

"""
    EngagementFabric

    Microsoft Customer Engagement Fabric

    The version of the OpenAPI document: 2018-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sku_location_info_item import SkuLocationInfoItem
from typing import Optional, Set
from typing_extensions import Self

class SkuDescription(BaseModel):
    """
    The EngagementFabric SKU description of given resource type
    """ # noqa: E501
    location_info: Optional[List[SkuLocationInfoItem]] = Field(default=None, description="Locations and zones", alias="locationInfo")
    locations: Optional[List[StrictStr]] = Field(default=None, description="The set of locations that the SKU is available")
    name: Optional[StrictStr] = Field(default=None, description="The name of the SKU")
    resource_type: Optional[StrictStr] = Field(default=None, description="The fully qualified resource type", alias="resourceType")
    restrictions: Optional[List[Dict[str, Any]]] = Field(default=None, description="The restrictions because of which SKU cannot be used")
    tier: Optional[StrictStr] = Field(default=None, description="The price tier of the SKU")
    __properties: ClassVar[List[str]] = ["locationInfo", "locations", "name", "resourceType", "restrictions", "tier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SkuDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "location_info",
            "locations",
            "name",
            "resource_type",
            "restrictions",
            "tier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in location_info (list)
        _items = []
        if self.location_info:
            for _item_location_info in self.location_info:
                if _item_location_info:
                    _items.append(_item_location_info.to_dict())
            _dict['locationInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SkuDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "locationInfo": [SkuLocationInfoItem.from_dict(_item) for _item in obj["locationInfo"]] if obj.get("locationInfo") is not None else None,
            "locations": obj.get("locations"),
            "name": obj.get("name"),
            "resourceType": obj.get("resourceType"),
            "restrictions": obj.get("restrictions"),
            "tier": obj.get("tier")
        })
        return _obj



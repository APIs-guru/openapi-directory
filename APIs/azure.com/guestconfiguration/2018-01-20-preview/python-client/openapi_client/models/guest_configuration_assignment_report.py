# coding: utf-8

"""
    GuestConfiguration

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-20-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GuestConfigurationAssignmentReport(BaseModel):
    """
    Report for the guest configuration. Report contains information such as compliance status, reason and more.
    """ # noqa: E501
    configuration_version: Optional[StrictStr] = Field(default=None, description="Configuration version of the report for the guest configuration assignment.", alias="configurationVersion")
    end_time: Optional[datetime] = Field(default=None, description="End time of the report for the guest configuration assignment.", alias="endTime")
    id: Optional[StrictStr] = Field(default=None, description="ARM resource id of the report for the guest configuration assignment.")
    last_modified_time: Optional[datetime] = Field(default=None, description="Last modified time report for the guest configuration assignment.", alias="lastModifiedTime")
    reboot_requested: Optional[StrictStr] = Field(default=None, description="The value indicating whether reboot is requested for the report.", alias="rebootRequested")
    refresh_mode: Optional[StrictStr] = Field(default=None, description="Refresh mode of the node report, push or pull.", alias="refreshMode")
    report_format_version: Optional[StrictStr] = Field(default=None, description="Report format version of the report for the guest configuration assignment.", alias="reportFormatVersion")
    report_id: Optional[StrictStr] = Field(default=None, description="GUID of the report for the guest configuration assignment.", alias="reportId")
    start_time: Optional[datetime] = Field(default=None, description="Start time of the report for the guest configuration assignment.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="A value indicating compliance status of the virtual machine for the assigned guest configuration.")
    type: Optional[StrictStr] = Field(default=None, description="Type of report, Consistency or Initial")
    __properties: ClassVar[List[str]] = ["configurationVersion", "endTime", "id", "lastModifiedTime", "rebootRequested", "refreshMode", "reportFormatVersion", "reportId", "startTime", "status", "type"]

    @field_validator('reboot_requested')
    def reboot_requested_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['True', 'False']):
            raise ValueError("must be one of enum values ('True', 'False')")
        return value

    @field_validator('refresh_mode')
    def refresh_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Push', 'Pull', 'Disabled']):
            raise ValueError("must be one of enum values ('Push', 'Pull', 'Disabled')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Compliant', 'NotCompliant', 'Pending']):
            raise ValueError("must be one of enum values ('Compliant', 'NotCompliant', 'Pending')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Consistency', 'Initial']):
            raise ValueError("must be one of enum values ('Consistency', 'Initial')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuestConfigurationAssignmentReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "report_id",
            "status",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['endTime'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['startTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuestConfigurationAssignmentReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configurationVersion": obj.get("configurationVersion"),
            "endTime": obj.get("endTime"),
            "id": obj.get("id"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "rebootRequested": obj.get("rebootRequested"),
            "refreshMode": obj.get("refreshMode"),
            "reportFormatVersion": obj.get("reportFormatVersion"),
            "reportId": obj.get("reportId"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj



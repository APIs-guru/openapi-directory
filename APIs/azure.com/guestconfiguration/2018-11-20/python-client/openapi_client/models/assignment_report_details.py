# coding: utf-8

"""
    GuestConfiguration

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-11-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assignment_report_resource import AssignmentReportResource
from typing import Optional, Set
from typing_extensions import Self

class AssignmentReportDetails(BaseModel):
    """
    Details of the guest configuration assignment report.
    """ # noqa: E501
    compliance_status: Optional[StrictStr] = Field(default=None, description="A value indicating compliance status of the virtual machine for the assigned guest configuration.", alias="complianceStatus")
    end_time: Optional[datetime] = Field(default=None, description="End date and time of the guest configuration assignment compliance status check.", alias="endTime")
    job_id: Optional[StrictStr] = Field(default=None, description="GUID of the report.", alias="jobId")
    operation_type: Optional[StrictStr] = Field(default=None, description="Type of report, Consistency or Initial", alias="operationType")
    resources: Optional[List[AssignmentReportResource]] = Field(default=None, description="The list of resources for which guest configuration assignment compliance is checked.")
    start_time: Optional[datetime] = Field(default=None, description="Start date and time of the guest configuration assignment compliance status check.", alias="startTime")
    __properties: ClassVar[List[str]] = ["complianceStatus", "endTime", "jobId", "operationType", "resources", "startTime"]

    @field_validator('compliance_status')
    def compliance_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Compliant', 'NonCompliant', 'Pending']):
            raise ValueError("must be one of enum values ('Compliant', 'NonCompliant', 'Pending')")
        return value

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Consistency', 'Initial']):
            raise ValueError("must be one of enum values ('Consistency', 'Initial')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssignmentReportDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "compliance_status",
            "end_time",
            "job_id",
            "operation_type",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssignmentReportDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "complianceStatus": obj.get("complianceStatus"),
            "endTime": obj.get("endTime"),
            "jobId": obj.get("jobId"),
            "operationType": obj.get("operationType"),
            "resources": [AssignmentReportResource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "startTime": obj.get("startTime")
        })
        return _obj



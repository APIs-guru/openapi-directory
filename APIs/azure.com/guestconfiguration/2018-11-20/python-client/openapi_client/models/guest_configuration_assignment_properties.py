# coding: utf-8

"""
    GuestConfiguration

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-11-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guest_configuration_navigation import GuestConfigurationNavigation
from typing import Optional, Set
from typing_extensions import Self

class GuestConfigurationAssignmentProperties(BaseModel):
    """
    Guest configuration assignment properties.
    """ # noqa: E501
    assignment_hash: Optional[StrictStr] = Field(default=None, description="Combined hash of the configuration package and parameters.", alias="assignmentHash")
    compliance_status: Optional[StrictStr] = Field(default=None, description="A value indicating compliance status of the virtual machine for the assigned guest configuration.", alias="complianceStatus")
    context: Optional[StrictStr] = Field(default=None, description="The source which initiated the guest configuration assignment. Ex: Azure Policy")
    guest_configuration: Optional[GuestConfigurationNavigation] = Field(default=None, alias="guestConfiguration")
    last_compliance_status_checked: Optional[datetime] = Field(default=None, description="Date and time when last compliance status was checked.", alias="lastComplianceStatusChecked")
    latest_report_id: Optional[StrictStr] = Field(default=None, description="Id of the latest report for the guest configuration assignment. ", alias="latestReportId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["assignmentHash", "complianceStatus", "context", "guestConfiguration", "lastComplianceStatusChecked", "latestReportId", "provisioningState"]

    @field_validator('compliance_status')
    def compliance_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Compliant', 'NonCompliant', 'Pending']):
            raise ValueError("must be one of enum values ('Compliant', 'NonCompliant', 'Pending')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Failed', 'Canceled', 'Created']):
            raise ValueError("must be one of enum values ('Succeeded', 'Failed', 'Canceled', 'Created')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuestConfigurationAssignmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "assignment_hash",
            "compliance_status",
            "last_compliance_status_checked",
            "latest_report_id",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guest_configuration
        if self.guest_configuration:
            _dict['guestConfiguration'] = self.guest_configuration.to_dict()
        # set to None if assignment_hash (nullable) is None
        # and model_fields_set contains the field
        if self.assignment_hash is None and "assignment_hash" in self.model_fields_set:
            _dict['assignmentHash'] = None

        # set to None if last_compliance_status_checked (nullable) is None
        # and model_fields_set contains the field
        if self.last_compliance_status_checked is None and "last_compliance_status_checked" in self.model_fields_set:
            _dict['lastComplianceStatusChecked'] = None

        # set to None if latest_report_id (nullable) is None
        # and model_fields_set contains the field
        if self.latest_report_id is None and "latest_report_id" in self.model_fields_set:
            _dict['latestReportId'] = None

        # set to None if provisioning_state (nullable) is None
        # and model_fields_set contains the field
        if self.provisioning_state is None and "provisioning_state" in self.model_fields_set:
            _dict['provisioningState'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuestConfigurationAssignmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignmentHash": obj.get("assignmentHash"),
            "complianceStatus": obj.get("complianceStatus"),
            "context": obj.get("context"),
            "guestConfiguration": GuestConfigurationNavigation.from_dict(obj["guestConfiguration"]) if obj.get("guestConfiguration") is not None else None,
            "lastComplianceStatusChecked": obj.get("lastComplianceStatusChecked"),
            "latestReportId": obj.get("latestReportId"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



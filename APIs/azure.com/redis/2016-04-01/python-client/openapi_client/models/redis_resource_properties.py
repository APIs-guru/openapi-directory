# coding: utf-8

"""
    RedisManagementClient

    REST API for Azure Redis Cache Service.

    The version of the OpenAPI document: 2016-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.redis_access_keys import RedisAccessKeys
from openapi_client.models.sku import Sku
from typing import Optional, Set
from typing_extensions import Self

class RedisResourceProperties(BaseModel):
    """
    Parameters describing a Redis instance.
    """ # noqa: E501
    access_keys: Optional[RedisAccessKeys] = Field(default=None, alias="accessKeys")
    host_name: Optional[StrictStr] = Field(default=None, description="Redis host name.", alias="hostName")
    port: Optional[StrictInt] = Field(default=None, description="Redis non-SSL port.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Redis instance provisioning status.", alias="provisioningState")
    redis_version: Optional[StrictStr] = Field(default=None, description="Redis version.", alias="redisVersion")
    sku: Optional[Sku] = None
    ssl_port: Optional[StrictInt] = Field(default=None, description="Redis SSL port.", alias="sslPort")
    enable_non_ssl_port: Optional[StrictBool] = Field(default=None, description="Specifies whether the non-ssl Redis server port (6379) is enabled.", alias="enableNonSslPort")
    redis_configuration: Optional[Dict[str, StrictStr]] = Field(default=None, description="All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.", alias="redisConfiguration")
    shard_count: Optional[StrictInt] = Field(default=None, description="The number of shards to be created on a Premium Cluster Cache.", alias="shardCount")
    static_ip: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.", alias="staticIP")
    subnet_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1", alias="subnetId")
    tenant_settings: Optional[Dict[str, StrictStr]] = Field(default=None, description="tenantSettings", alias="tenantSettings")
    __properties: ClassVar[List[str]] = ["enableNonSslPort", "redisConfiguration", "shardCount", "staticIP", "subnetId", "tenantSettings"]

    @field_validator('static_ip')
    def static_ip_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+\.\d+\.\d+\.\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+\.\d+\.\d+\.\d+$/")
        return value

    @field_validator('subnet_id')
    def subnet_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$", value):
            raise ValueError(r"must validate the regular expression /^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RedisResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "host_name",
            "port",
            "provisioning_state",
            "redis_version",
            "ssl_port",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RedisResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableNonSslPort": obj.get("enableNonSslPort"),
            "redisConfiguration": obj.get("redisConfiguration"),
            "shardCount": obj.get("shardCount"),
            "staticIP": obj.get("staticIP"),
            "subnetId": obj.get("subnetId"),
            "tenantSettings": obj.get("tenantSettings")
        })
        return _obj



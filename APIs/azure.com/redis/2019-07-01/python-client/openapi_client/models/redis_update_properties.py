# coding: utf-8

"""
    RedisManagementClient

    REST API for Azure Redis Cache Service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sku import Sku
from typing import Optional, Set
from typing_extensions import Self

class RedisUpdateProperties(BaseModel):
    """
    Patchable properties of the redis cache.
    """ # noqa: E501
    sku: Optional[Sku] = None
    enable_non_ssl_port: Optional[StrictBool] = Field(default=None, description="Specifies whether the non-ssl Redis server port (6379) is enabled.", alias="enableNonSslPort")
    minimum_tls_version: Optional[StrictStr] = Field(default=None, description="Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')", alias="minimumTlsVersion")
    redis_configuration: Optional[Dict[str, StrictStr]] = Field(default=None, description="All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.", alias="redisConfiguration")
    replicas_per_master: Optional[StrictInt] = Field(default=None, description="The number of replicas to be created per master.", alias="replicasPerMaster")
    shard_count: Optional[StrictInt] = Field(default=None, description="The number of shards to be created on a Premium Cluster Cache.", alias="shardCount")
    tenant_settings: Optional[Dict[str, StrictStr]] = Field(default=None, description="A dictionary of tenant settings", alias="tenantSettings")
    __properties: ClassVar[List[str]] = ["enableNonSslPort", "minimumTlsVersion", "redisConfiguration", "replicasPerMaster", "shardCount", "tenantSettings"]

    @field_validator('minimum_tls_version')
    def minimum_tls_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1.0', '1.1', '1.2']):
            raise ValueError("must be one of enum values ('1.0', '1.1', '1.2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RedisUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RedisUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableNonSslPort": obj.get("enableNonSslPort"),
            "minimumTlsVersion": obj.get("minimumTlsVersion"),
            "redisConfiguration": obj.get("redisConfiguration"),
            "replicasPerMaster": obj.get("replicasPerMaster"),
            "shardCount": obj.get("shardCount"),
            "tenantSettings": obj.get("tenantSettings")
        })
        return _obj



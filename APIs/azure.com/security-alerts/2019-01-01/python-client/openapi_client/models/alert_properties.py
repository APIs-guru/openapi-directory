# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.alert_confidence_reason import AlertConfidenceReason
from openapi_client.models.alert_entity import AlertEntity
from typing import Optional, Set
from typing_extensions import Self

class AlertProperties(BaseModel):
    """
    describes security alert properties.
    """ # noqa: E501
    action_taken: Optional[StrictStr] = Field(default=None, description="The action that was taken as a response to the alert (Active, Blocked etc.)", alias="actionTaken")
    alert_display_name: Optional[StrictStr] = Field(default=None, description="Display name of the alert type", alias="alertDisplayName")
    alert_name: Optional[StrictStr] = Field(default=None, description="Name of the alert type", alias="alertName")
    associated_resource: Optional[StrictStr] = Field(default=None, description="Azure resource ID of the associated resource", alias="associatedResource")
    can_be_investigated: Optional[StrictBool] = Field(default=None, description="Whether this alert can be investigated with Azure Security Center", alias="canBeInvestigated")
    compromised_entity: Optional[StrictStr] = Field(default=None, description="The entity that the incident happened on", alias="compromisedEntity")
    confidence_reasons: Optional[List[AlertConfidenceReason]] = Field(default=None, description="reasons the alert got the confidenceScore value", alias="confidenceReasons")
    confidence_score: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="level of confidence we have on the alert", alias="confidenceScore")
    correlation_key: Optional[StrictStr] = Field(default=None, description="Alerts with the same CorrelationKey will be grouped together in Ibiza.", alias="correlationKey")
    description: Optional[StrictStr] = Field(default=None, description="Description of the incident and what it means")
    detected_time_utc: Optional[datetime] = Field(default=None, description="The time the incident was detected by the vendor", alias="detectedTimeUtc")
    entities: Optional[List[AlertEntity]] = Field(default=None, description="objects that are related to this alerts")
    extended_properties: Optional[Dict[str, Any]] = Field(default=None, description="Changing set of properties depending on the alert type.", alias="extendedProperties")
    instance_id: Optional[StrictStr] = Field(default=None, description="Instance ID of the alert.", alias="instanceId")
    is_incident: Optional[StrictBool] = Field(default=None, description="Whether this alert is for incident type or not (otherwise - single alert)", alias="isIncident")
    remediation_steps: Optional[StrictStr] = Field(default=None, description="Recommended steps to reradiate the incident", alias="remediationSteps")
    reported_severity: Optional[StrictStr] = Field(default=None, description="Estimated severity of this alert", alias="reportedSeverity")
    reported_time_utc: Optional[datetime] = Field(default=None, description="The time the incident was reported to Microsoft.Security in UTC", alias="reportedTimeUtc")
    state: Optional[StrictStr] = Field(default=None, description="State of the alert (Active, Dismissed etc.)")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Azure subscription ID of the resource that had the security alert or the subscription ID of the workspace that this resource reports to", alias="subscriptionId")
    system_source: Optional[StrictStr] = Field(default=None, description="The type of the alerted resource (Azure, Non-Azure)", alias="systemSource")
    vendor_name: Optional[StrictStr] = Field(default=None, description="Name of the vendor that discovered the incident", alias="vendorName")
    workspace_arm_id: Optional[StrictStr] = Field(default=None, description="Azure resource ID of the workspace that the alert was reported to.", alias="workspaceArmId")
    __properties: ClassVar[List[str]] = ["actionTaken", "alertDisplayName", "alertName", "associatedResource", "canBeInvestigated", "compromisedEntity", "confidenceReasons", "confidenceScore", "correlationKey", "description", "detectedTimeUtc", "entities", "extendedProperties", "instanceId", "isIncident", "remediationSteps", "reportedSeverity", "reportedTimeUtc", "state", "subscriptionId", "systemSource", "vendorName", "workspaceArmId"]

    @field_validator('reported_severity')
    def reported_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Informational', 'Low', 'Medium', 'High']):
            raise ValueError("must be one of enum values ('Informational', 'Low', 'Medium', 'High')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "action_taken",
            "alert_display_name",
            "alert_name",
            "associated_resource",
            "can_be_investigated",
            "compromised_entity",
            "confidence_score",
            "correlation_key",
            "description",
            "detected_time_utc",
            "instance_id",
            "is_incident",
            "remediation_steps",
            "reported_severity",
            "reported_time_utc",
            "state",
            "subscription_id",
            "system_source",
            "vendor_name",
            "workspace_arm_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in confidence_reasons (list)
        _items = []
        if self.confidence_reasons:
            for _item_confidence_reasons in self.confidence_reasons:
                if _item_confidence_reasons:
                    _items.append(_item_confidence_reasons.to_dict())
            _dict['confidenceReasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionTaken": obj.get("actionTaken"),
            "alertDisplayName": obj.get("alertDisplayName"),
            "alertName": obj.get("alertName"),
            "associatedResource": obj.get("associatedResource"),
            "canBeInvestigated": obj.get("canBeInvestigated"),
            "compromisedEntity": obj.get("compromisedEntity"),
            "confidenceReasons": [AlertConfidenceReason.from_dict(_item) for _item in obj["confidenceReasons"]] if obj.get("confidenceReasons") is not None else None,
            "confidenceScore": obj.get("confidenceScore"),
            "correlationKey": obj.get("correlationKey"),
            "description": obj.get("description"),
            "detectedTimeUtc": obj.get("detectedTimeUtc"),
            "entities": [AlertEntity.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "extendedProperties": obj.get("extendedProperties"),
            "instanceId": obj.get("instanceId"),
            "isIncident": obj.get("isIncident"),
            "remediationSteps": obj.get("remediationSteps"),
            "reportedSeverity": obj.get("reportedSeverity"),
            "reportedTimeUtc": obj.get("reportedTimeUtc"),
            "state": obj.get("state"),
            "subscriptionId": obj.get("subscriptionId"),
            "systemSource": obj.get("systemSource"),
            "vendorName": obj.get("vendorName"),
            "workspaceArmId": obj.get("workspaceArmId")
        })
        return _obj



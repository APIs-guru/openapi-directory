# coding: utf-8

"""
    DeploymentScriptsClient

    The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.

    The version of the OpenAPI document: 2019-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.environment_variable import EnvironmentVariable
from openapi_client.models.script_status import ScriptStatus
from typing import Optional, Set
from typing_extensions import Self

class AzurePowerShellScriptProperties(BaseModel):
    """
    Properties of the Azure PowerShell script object.
    """ # noqa: E501
    az_power_shell_version: StrictStr = Field(description="Azure PowerShell module version to be used.", alias="azPowerShellVersion")
    cleanup_preference: Optional[StrictStr] = Field(default=None, description="The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.", alias="cleanupPreference")
    outputs: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="List of script outputs.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="State of the script execution. This only appears in the response.", alias="provisioningState")
    status: Optional[ScriptStatus] = None
    arguments: Optional[StrictStr] = Field(default=None, description="Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' ")
    environment_variables: Optional[List[EnvironmentVariable]] = Field(default=None, description="The environment variables to pass over to the script.", alias="environmentVariables")
    force_update_tag: Optional[StrictStr] = Field(default=None, description="Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.", alias="forceUpdateTag")
    primary_script_uri: Optional[StrictStr] = Field(default=None, description="Uri for the script. This is the entry point for the external script.", alias="primaryScriptUri")
    retention_interval: StrictStr = Field(description="Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).", alias="retentionInterval")
    script_content: Optional[Annotated[str, Field(strict=True, max_length=32000)]] = Field(default=None, description="Script body.", alias="scriptContent")
    supporting_script_uris: Optional[List[StrictStr]] = Field(default=None, description="Supporting files for the external script.", alias="supportingScriptUris")
    timeout: Optional[StrictStr] = Field(default=None, description="Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H")
    __properties: ClassVar[List[str]] = ["cleanupPreference", "outputs", "provisioningState", "status", "arguments", "environmentVariables", "forceUpdateTag", "primaryScriptUri", "retentionInterval", "scriptContent", "supportingScriptUris", "timeout"]

    @field_validator('cleanup_preference')
    def cleanup_preference_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Always', 'OnSuccess', 'OnExpiration']):
            raise ValueError("must be one of enum values ('Always', 'OnSuccess', 'OnExpiration')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'ProvisioningResources', 'Running', 'Succeeded', 'Failed', 'Canceled']):
            raise ValueError("must be one of enum values ('Creating', 'ProvisioningResources', 'Running', 'Succeeded', 'Failed', 'Canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzurePowerShellScriptProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "outputs",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in environment_variables (list)
        _items = []
        if self.environment_variables:
            for _item_environment_variables in self.environment_variables:
                if _item_environment_variables:
                    _items.append(_item_environment_variables.to_dict())
            _dict['environmentVariables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzurePowerShellScriptProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cleanupPreference": obj.get("cleanupPreference"),
            "outputs": obj.get("outputs"),
            "provisioningState": obj.get("provisioningState"),
            "status": ScriptStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "arguments": obj.get("arguments"),
            "environmentVariables": [EnvironmentVariable.from_dict(_item) for _item in obj["environmentVariables"]] if obj.get("environmentVariables") is not None else None,
            "forceUpdateTag": obj.get("forceUpdateTag"),
            "primaryScriptUri": obj.get("primaryScriptUri"),
            "retentionInterval": obj.get("retentionInterval"),
            "scriptContent": obj.get("scriptContent"),
            "supportingScriptUris": obj.get("supportingScriptUris"),
            "timeout": obj.get("timeout")
        })
        return _obj



# coding: utf-8

"""
    DeploymentScriptsClient

    The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.

    The version of the OpenAPI document: 2019-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_power_shell_script_properties import AzurePowerShellScriptProperties
from openapi_client.models.managed_service_identity import ManagedServiceIdentity
from typing import Optional, Set
from typing_extensions import Self

class AzurePowerShellScript(BaseModel):
    """
    Object model for the Azure PowerShell script.
    """ # noqa: E501
    properties: AzurePowerShellScriptProperties
    identity: ManagedServiceIdentity
    kind: StrictStr = Field(description="Type of the script.")
    location: StrictStr = Field(description="The location of the ACI and the storage account for the deployment script.")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Resource tags.")
    id: Optional[StrictStr] = Field(default=None, description="String Id used to locate any resource on Azure.")
    name: Optional[StrictStr] = Field(default=None, description="Name of this resource.")
    type: Optional[StrictStr] = Field(default=None, description="Type of this resource.")
    __properties: ClassVar[List[str]] = ["identity", "kind", "location", "tags", "id", "name", "type"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AzurePowerShell', 'AzureCLI']):
            raise ValueError("must be one of enum values ('AzurePowerShell', 'AzureCLI')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzurePowerShellScript from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzurePowerShellScript from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identity": ManagedServiceIdentity.from_dict(obj["identity"]) if obj.get("identity") is not None else None,
            "kind": obj.get("kind"),
            "location": obj.get("location"),
            "tags": obj.get("tags"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj



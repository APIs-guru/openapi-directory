# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on OpenId Connect Provider entity associated with your Azure API Management deployment. API Management allows you to access APIs secured with token from [OpenID Connect Provider ](http://openid.net/connect/) to be accessed from the Developer Console.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OpenIdConnectProviderUpdateRequestProperties(BaseModel):
    """
    Parameters supplied to the Update OpenID Connect Provider operation.
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Client ID of developer console which is the client application.", alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, description="Client Secret of developer console which is the client application.", alias="clientSecret")
    description: Optional[StrictStr] = Field(default=None, description="User-friendly description of OpenID Connect Provider.")
    display_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="User-friendly OpenID Connect Provider name.", alias="displayName")
    metadata_endpoint: Optional[StrictStr] = Field(default=None, description="Metadata endpoint URI.", alias="metadataEndpoint")
    __properties: ClassVar[List[str]] = ["clientId", "clientSecret", "description", "displayName", "metadataEndpoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenIdConnectProviderUpdateRequestProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenIdConnectProviderUpdateRequestProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "metadataEndpoint": obj.get("metadataEndpoint")
        })
        return _obj



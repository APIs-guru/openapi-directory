# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.baseline import Baseline
from openapi_client.models.baseline_metadata_value import BaselineMetadataValue
from typing import Optional, Set
from typing_extensions import Self

class BaselineProperties(BaseModel):
    """
    The baseline properties class.
    """ # noqa: E501
    aggregation: Optional[StrictStr] = Field(default=None, description="The aggregation type of the metric.")
    baseline: Optional[List[Baseline]] = Field(default=None, description="the baseline values for each sensitivity.")
    interval: Optional[StrictStr] = Field(default=None, description="The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.")
    metadata: Optional[List[BaselineMetadataValue]] = Field(default=None, description="the baseline metadata values.")
    timespan: Optional[StrictStr] = Field(default=None, description="The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.")
    timestamps: Optional[List[datetime]] = Field(default=None, description="the array of timestamps of the baselines.")
    __properties: ClassVar[List[str]] = ["aggregation", "baseline", "interval", "metadata", "timespan", "timestamps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BaselineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in baseline (list)
        _items = []
        if self.baseline:
            for _item_baseline in self.baseline:
                if _item_baseline:
                    _items.append(_item_baseline.to_dict())
            _dict['baseline'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BaselineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregation": obj.get("aggregation"),
            "baseline": [Baseline.from_dict(_item) for _item in obj["baseline"]] if obj.get("baseline") is not None else None,
            "interval": obj.get("interval"),
            "metadata": [BaselineMetadataValue.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "timespan": obj.get("timespan"),
            "timestamps": obj.get("timestamps")
        })
        return _obj



# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2017-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.recommendation_configuration_properties import RecommendationConfigurationProperties
from openapi_client.models.user_defined_resources_properties import UserDefinedResourcesProperties
from typing import Optional, Set
from typing_extensions import Self

class IoTSecuritySolutionProperties(BaseModel):
    """
    Security Solution setting data
    """ # noqa: E501
    auto_discovered_resources: Optional[List[StrictStr]] = Field(default=None, description="List of resources that were automatically discovered as relevant to the security solution.", alias="autoDiscoveredResources")
    disabled_data_sources: Optional[List[StrictStr]] = Field(default=None, description="Disabled data sources. Disabling these data sources compromises the system.", alias="disabledDataSources")
    display_name: StrictStr = Field(description="Resource display name.", alias="displayName")
    export: Optional[List[StrictStr]] = Field(default=None, description="List of additional export to workspace data options")
    iot_hubs: List[StrictStr] = Field(description="IoT Hub resource IDs", alias="iotHubs")
    recommendations_configuration: Optional[List[RecommendationConfigurationProperties]] = Field(default=None, description="List of recommendation configuration", alias="recommendationsConfiguration")
    status: Optional[StrictStr] = Field(default='Enabled', description="Security solution status")
    user_defined_resources: Optional[UserDefinedResourcesProperties] = Field(default=None, alias="userDefinedResources")
    workspace: StrictStr = Field(description="Workspace resource ID")
    __properties: ClassVar[List[str]] = ["autoDiscoveredResources", "disabledDataSources", "displayName", "export", "iotHubs", "recommendationsConfiguration", "status", "userDefinedResources", "workspace"]

    @field_validator('disabled_data_sources')
    def disabled_data_sources_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TwinData']):
                raise ValueError("each list item must be one of ('TwinData')")
        return value

    @field_validator('export')
    def export_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['RawEvents']):
                raise ValueError("each list item must be one of ('RawEvents')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoTSecuritySolutionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "auto_discovered_resources",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recommendations_configuration (list)
        _items = []
        if self.recommendations_configuration:
            for _item_recommendations_configuration in self.recommendations_configuration:
                if _item_recommendations_configuration:
                    _items.append(_item_recommendations_configuration.to_dict())
            _dict['recommendationsConfiguration'] = _items
        # override the default output from pydantic by calling `to_dict()` of user_defined_resources
        if self.user_defined_resources:
            _dict['userDefinedResources'] = self.user_defined_resources.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoTSecuritySolutionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoDiscoveredResources": obj.get("autoDiscoveredResources"),
            "disabledDataSources": obj.get("disabledDataSources"),
            "displayName": obj.get("displayName"),
            "export": obj.get("export"),
            "iotHubs": obj.get("iotHubs"),
            "recommendationsConfiguration": [RecommendationConfigurationProperties.from_dict(_item) for _item in obj["recommendationsConfiguration"]] if obj.get("recommendationsConfiguration") is not None else None,
            "status": obj.get("status") if obj.get("status") is not None else 'Enabled',
            "userDefinedResources": UserDefinedResourcesProperties.from_dict(obj["userDefinedResources"]) if obj.get("userDefinedResources") is not None else None,
            "workspace": obj.get("workspace")
        })
        return _obj



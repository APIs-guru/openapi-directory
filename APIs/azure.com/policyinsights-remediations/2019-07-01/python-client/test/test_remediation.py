# coding: utf-8

"""
    RemediationsClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.remediation import Remediation

class TestRemediation(unittest.TestCase):
    """Remediation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Remediation:
        """Test Remediation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Remediation`
        """
        model = Remediation()
        if include_optional:
            return Remediation(
                id = '',
                name = '',
                properties = openapi_client.models.remediation_properties.RemediationProperties(
                    created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deployment_status = openapi_client.models.remediation_deployment_summary.RemediationDeploymentSummary(
                        failed_deployments = 56, 
                        successful_deployments = 56, 
                        total_deployments = 56, ), 
                    filters = openapi_client.models.remediation_filters.RemediationFilters(
                        locations = [
                            ''
                            ], ), 
                    last_updated_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    policy_assignment_id = '', 
                    policy_definition_reference_id = '', 
                    provisioning_state = '', 
                    resource_discovery_mode = 'ExistingNonCompliant', ),
                type = ''
            )
        else:
            return Remediation(
        )
        """

    def testRemediation(self):
        """Test Remediation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    RemediationsClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_definition import ErrorDefinition
from typing import Optional, Set
from typing_extensions import Self

class RemediationDeployment(BaseModel):
    """
    Details of a single deployment created by the remediation.
    """ # noqa: E501
    created_on: Optional[datetime] = Field(default=None, description="The time at which the remediation was created.", alias="createdOn")
    deployment_id: Optional[StrictStr] = Field(default=None, description="Resource ID of the template deployment that will remediate the resource.", alias="deploymentId")
    error: Optional[ErrorDefinition] = None
    last_updated_on: Optional[datetime] = Field(default=None, description="The time at which the remediation deployment was last updated.", alias="lastUpdatedOn")
    remediated_resource_id: Optional[StrictStr] = Field(default=None, description="Resource ID of the resource that is being remediated by the deployment.", alias="remediatedResourceId")
    resource_location: Optional[StrictStr] = Field(default=None, description="Location of the resource that is being remediated.", alias="resourceLocation")
    status: Optional[StrictStr] = Field(default=None, description="Status of the remediation deployment.")
    __properties: ClassVar[List[str]] = ["createdOn", "deploymentId", "error", "lastUpdatedOn", "remediatedResourceId", "resourceLocation", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemediationDeployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_on",
            "deployment_id",
            "last_updated_on",
            "remediated_resource_id",
            "resource_location",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemediationDeployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdOn": obj.get("createdOn"),
            "deploymentId": obj.get("deploymentId"),
            "error": ErrorDefinition.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "lastUpdatedOn": obj.get("lastUpdatedOn"),
            "remediatedResourceId": obj.get("remediatedResourceId"),
            "resourceLocation": obj.get("resourceLocation"),
            "status": obj.get("status")
        })
        return _obj



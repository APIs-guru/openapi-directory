# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SyncFullSchemaTableColumn(BaseModel):
    """
    Properties of the column in the table of database full schema.
    """ # noqa: E501
    data_size: Optional[StrictStr] = Field(default=None, description="Data size of the column.", alias="dataSize")
    data_type: Optional[StrictStr] = Field(default=None, description="Data type of the column.", alias="dataType")
    error_id: Optional[StrictStr] = Field(default=None, description="Error id of the column.", alias="errorId")
    has_error: Optional[StrictBool] = Field(default=None, description="If there is error in the table.", alias="hasError")
    is_primary_key: Optional[StrictBool] = Field(default=None, description="If it is the primary key of the table.", alias="isPrimaryKey")
    name: Optional[StrictStr] = Field(default=None, description="Name of the column.")
    quoted_name: Optional[StrictStr] = Field(default=None, description="Quoted name of the column.", alias="quotedName")
    __properties: ClassVar[List[str]] = ["dataSize", "dataType", "errorId", "hasError", "isPrimaryKey", "name", "quotedName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncFullSchemaTableColumn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_size",
            "data_type",
            "error_id",
            "has_error",
            "is_primary_key",
            "name",
            "quoted_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncFullSchemaTableColumn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSize": obj.get("dataSize"),
            "dataType": obj.get("dataType"),
            "errorId": obj.get("errorId"),
            "hasError": obj.get("hasError"),
            "isPrimaryKey": obj.get("isPrimaryKey"),
            "name": obj.get("name"),
            "quotedName": obj.get("quotedName")
        })
        return _obj



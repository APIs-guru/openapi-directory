# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SyncGroupLogProperties(BaseModel):
    """
    Properties of an Azure SQL Database sync group log.
    """ # noqa: E501
    details: Optional[StrictStr] = Field(default=None, description="Details of the sync group log.")
    operation_status: Optional[StrictStr] = Field(default=None, description="OperationStatus of the sync group log.", alias="operationStatus")
    source: Optional[StrictStr] = Field(default=None, description="Source of the sync group log.")
    timestamp: Optional[datetime] = Field(default=None, description="Timestamp of the sync group log.")
    tracing_id: Optional[StrictStr] = Field(default=None, description="TracingId of the sync group log.", alias="tracingId")
    type: Optional[StrictStr] = Field(default=None, description="Type of the sync group log.")
    __properties: ClassVar[List[str]] = ["details", "operationStatus", "source", "timestamp", "tracingId", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['All', 'Error', 'Warning', 'Success']):
            raise ValueError("must be one of enum values ('All', 'Error', 'Warning', 'Success')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncGroupLogProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "details",
            "operation_status",
            "source",
            "timestamp",
            "tracing_id",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncGroupLogProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "details": obj.get("details"),
            "operationStatus": obj.get("operationStatus"),
            "source": obj.get("source"),
            "timestamp": obj.get("timestamp"),
            "tracingId": obj.get("tracingId"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    DiskResourceProviderClient

    The Disk Resource Provider Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption import Encryption
from openapi_client.models.encryption_settings_collection import EncryptionSettingsCollection
from typing import Optional, Set
from typing_extensions import Self

class SnapshotUpdateProperties(BaseModel):
    """
    Snapshot resource update properties.
    """ # noqa: E501
    disk_size_gb: Optional[StrictInt] = Field(default=None, description="If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.", alias="diskSizeGB")
    encryption: Optional[Encryption] = None
    encryption_settings_collection: Optional[EncryptionSettingsCollection] = Field(default=None, alias="encryptionSettingsCollection")
    os_type: Optional[StrictStr] = Field(default=None, description="the Operating System type.", alias="osType")
    __properties: ClassVar[List[str]] = ["diskSizeGB", "encryption", "encryptionSettingsCollection", "osType"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnapshotUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_settings_collection
        if self.encryption_settings_collection:
            _dict['encryptionSettingsCollection'] = self.encryption_settings_collection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnapshotUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskSizeGB": obj.get("diskSizeGB"),
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "encryptionSettingsCollection": EncryptionSettingsCollection.from_dict(obj["encryptionSettingsCollection"]) if obj.get("encryptionSettingsCollection") is not None else None,
            "osType": obj.get("osType")
        })
        return _obj



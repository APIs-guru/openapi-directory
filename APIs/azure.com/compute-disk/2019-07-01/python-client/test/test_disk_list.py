# coding: utf-8

"""
    DiskResourceProviderClient

    The Disk Resource Provider Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.disk_list import DiskList

class TestDiskList(unittest.TestCase):
    """DiskList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiskList:
        """Test DiskList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiskList`
        """
        model = DiskList()
        if include_optional:
            return DiskList(
                next_link = '',
                value = [
                    openapi_client.models.disk.Disk(
                        managed_by = '', 
                        properties = openapi_client.models.disk_properties.DiskProperties(
                            creation_data = openapi_client.models.creation_data.CreationData(
                                create_option = 'Empty', 
                                image_reference = openapi_client.models.image_disk_reference.ImageDiskReference(
                                    id = '', 
                                    lun = 56, ), 
                                source_resource_id = '', 
                                source_unique_id = '', 
                                source_uri = '', 
                                storage_account_id = '', 
                                upload_size_bytes = 56, ), 
                            disk_iops_read_write = 56, 
                            disk_m_bps_read_write = 56, 
                            disk_size_bytes = 56, 
                            disk_size_gb = 56, 
                            disk_state = 'Unattached', 
                            encryption = openapi_client.models.encryption.Encryption(
                                disk_encryption_set_id = '', 
                                type = 'EncryptionAtRestWithPlatformKey', ), 
                            encryption_settings_collection = openapi_client.models.encryption_settings_collection.EncryptionSettingsCollection(
                                enabled = True, 
                                encryption_settings = [
                                    openapi_client.models.encryption_settings_element.EncryptionSettingsElement(
                                        disk_encryption_key = openapi_client.models.key_vault_and_secret_reference.KeyVaultAndSecretReference(
                                            secret_url = '', 
                                            source_vault = openapi_client.models.source_vault.SourceVault(
                                                id = '', ), ), 
                                        key_encryption_key = openapi_client.models.key_vault_and_key_reference.KeyVaultAndKeyReference(
                                            key_url = '', 
                                            source_vault = openapi_client.models.source_vault.SourceVault(
                                                id = '', ), ), )
                                    ], 
                                encryption_settings_version = '', ), 
                            hyper_v_generation = 'V1', 
                            os_type = 'Windows', 
                            provisioning_state = '', 
                            time_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            unique_id = '', ), 
                        sku = openapi_client.models.disk_sku.DiskSku(
                            name = 'Standard_LRS', 
                            tier = '', ), 
                        zones = [
                            ''
                            ], )
                    ]
            )
        else:
            return DiskList(
                value = [
                    openapi_client.models.disk.Disk(
                        managed_by = '', 
                        properties = openapi_client.models.disk_properties.DiskProperties(
                            creation_data = openapi_client.models.creation_data.CreationData(
                                create_option = 'Empty', 
                                image_reference = openapi_client.models.image_disk_reference.ImageDiskReference(
                                    id = '', 
                                    lun = 56, ), 
                                source_resource_id = '', 
                                source_unique_id = '', 
                                source_uri = '', 
                                storage_account_id = '', 
                                upload_size_bytes = 56, ), 
                            disk_iops_read_write = 56, 
                            disk_m_bps_read_write = 56, 
                            disk_size_bytes = 56, 
                            disk_size_gb = 56, 
                            disk_state = 'Unattached', 
                            encryption = openapi_client.models.encryption.Encryption(
                                disk_encryption_set_id = '', 
                                type = 'EncryptionAtRestWithPlatformKey', ), 
                            encryption_settings_collection = openapi_client.models.encryption_settings_collection.EncryptionSettingsCollection(
                                enabled = True, 
                                encryption_settings = [
                                    openapi_client.models.encryption_settings_element.EncryptionSettingsElement(
                                        disk_encryption_key = openapi_client.models.key_vault_and_secret_reference.KeyVaultAndSecretReference(
                                            secret_url = '', 
                                            source_vault = openapi_client.models.source_vault.SourceVault(
                                                id = '', ), ), 
                                        key_encryption_key = openapi_client.models.key_vault_and_key_reference.KeyVaultAndKeyReference(
                                            key_url = '', 
                                            source_vault = openapi_client.models.source_vault.SourceVault(
                                                id = '', ), ), )
                                    ], 
                                encryption_settings_version = '', ), 
                            hyper_v_generation = 'V1', 
                            os_type = 'Windows', 
                            provisioning_state = '', 
                            time_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            unique_id = '', ), 
                        sku = openapi_client.models.disk_sku.DiskSku(
                            name = 'Standard_LRS', 
                            tier = '', ), 
                        zones = [
                            ''
                            ], )
                    ],
        )
        """

    def testDiskList(self):
        """Test DiskList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

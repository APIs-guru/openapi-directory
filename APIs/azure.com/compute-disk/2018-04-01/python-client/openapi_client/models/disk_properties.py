# coding: utf-8

"""
    DiskResourceProviderClient

    The Disk Resource Provider Client.

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creation_data import CreationData
from openapi_client.models.encryption_settings import EncryptionSettings
from typing import Optional, Set
from typing_extensions import Self

class DiskProperties(BaseModel):
    """
    Disk resource properties.
    """ # noqa: E501
    creation_data: CreationData = Field(alias="creationData")
    disk_size_gb: Optional[StrictInt] = Field(default=None, description="If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.", alias="diskSizeGB")
    encryption_settings: Optional[EncryptionSettings] = Field(default=None, alias="encryptionSettings")
    os_type: Optional[StrictStr] = Field(default=None, description="The Operating System type.", alias="osType")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The disk provisioning state.", alias="provisioningState")
    time_created: Optional[datetime] = Field(default=None, description="The time when the disk was created.", alias="timeCreated")
    __properties: ClassVar[List[str]] = ["creationData", "diskSizeGB", "encryptionSettings", "osType", "provisioningState", "timeCreated"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiskProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "time_created",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creation_data
        if self.creation_data:
            _dict['creationData'] = self.creation_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_settings
        if self.encryption_settings:
            _dict['encryptionSettings'] = self.encryption_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiskProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationData": CreationData.from_dict(obj["creationData"]) if obj.get("creationData") is not None else None,
            "diskSizeGB": obj.get("diskSizeGB"),
            "encryptionSettings": EncryptionSettings.from_dict(obj["encryptionSettings"]) if obj.get("encryptionSettings") is not None else None,
            "osType": obj.get("osType"),
            "provisioningState": obj.get("provisioningState"),
            "timeCreated": obj.get("timeCreated")
        })
        return _obj



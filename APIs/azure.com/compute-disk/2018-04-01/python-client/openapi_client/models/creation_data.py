# coding: utf-8

"""
    DiskResourceProviderClient

    The Disk Resource Provider Client.

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_disk_reference import ImageDiskReference
from typing import Optional, Set
from typing_extensions import Self

class CreationData(BaseModel):
    """
    Data used when creating a disk.
    """ # noqa: E501
    create_option: StrictStr = Field(description="This enumerates the possible sources of a disk's creation.", alias="createOption")
    image_reference: Optional[ImageDiskReference] = Field(default=None, alias="imageReference")
    source_resource_id: Optional[StrictStr] = Field(default=None, description="If createOption is Copy, this is the ARM id of the source snapshot or disk.", alias="sourceResourceId")
    source_uri: Optional[StrictStr] = Field(default=None, description="If createOption is Import, this is the URI of a blob to be imported into a managed disk.", alias="sourceUri")
    storage_account_id: Optional[StrictStr] = Field(default=None, description="If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription", alias="storageAccountId")
    __properties: ClassVar[List[str]] = ["createOption", "imageReference", "sourceResourceId", "sourceUri", "storageAccountId"]

    @field_validator('create_option')
    def create_option_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Empty', 'Attach', 'FromImage', 'Import', 'Copy', 'Restore']):
            raise ValueError("must be one of enum values ('Empty', 'Attach', 'FromImage', 'Import', 'Copy', 'Restore')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreationData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_reference
        if self.image_reference:
            _dict['imageReference'] = self.image_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreationData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createOption": obj.get("createOption"),
            "imageReference": ImageDiskReference.from_dict(obj["imageReference"]) if obj.get("imageReference") is not None else None,
            "sourceResourceId": obj.get("sourceResourceId"),
            "sourceUri": obj.get("sourceUri"),
            "storageAccountId": obj.get("storageAccountId")
        })
        return _obj



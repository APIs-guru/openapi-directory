# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model import Model
from openapi_client.models.model_error_response import ModelErrorResponse
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.docker_image_response import DockerImageResponse
    from openapi_client.models.fpga_docker_image_response import FPGADockerImageResponse

class ImageResponseBase(BaseModel):
    """
    ImageResponseBase
    """ # noqa: E501
    auto_delete: Optional[StrictBool] = Field(default=None, description="Whether the image will be automatically deleted with the last service using it.", alias="autoDelete")
    created_time: Optional[datetime] = Field(default=None, description="The time the image was created.", alias="createdTime")
    creation_state: Optional[StrictStr] = Field(default=None, description="The state of the operation.", alias="creationState")
    description: Optional[StrictStr] = Field(default=None, description="The image description.")
    error: Optional[ModelErrorResponse] = None
    id: Optional[StrictStr] = Field(default=None, description="The image Id.")
    image_build_log_uri: Optional[StrictStr] = Field(default=None, description="The Uri to the image build logs.", alias="imageBuildLogUri")
    image_flavor: StrictStr = Field(description="The flavor of the image.", alias="imageFlavor")
    image_location: Optional[StrictStr] = Field(default=None, description="The Image location string.", alias="imageLocation")
    image_type: Optional[StrictStr] = Field(default=None, description="The type of the image.", alias="imageType")
    kv_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The image tag dictionary. Tags are mutable.", alias="kvTags")
    model_details: Optional[List[Model]] = Field(default=None, description="The list of models.", alias="modelDetails")
    model_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of model Ids.", alias="modelIds")
    modified_time: Optional[datetime] = Field(default=None, description="The time the image was last modified.", alias="modifiedTime")
    name: Optional[StrictStr] = Field(default=None, description="The image name.")
    operation_id: Optional[StrictStr] = Field(default=None, description="The ID of the asynchronous operation for this image.", alias="operationId")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="The image properties dictionary. Properties are immutable.")
    version: Optional[StrictInt] = Field(default=None, description="The image version.")
    __properties: ClassVar[List[str]] = ["autoDelete", "createdTime", "creationState", "description", "error", "id", "imageBuildLogUri", "imageFlavor", "imageLocation", "imageType", "kvTags", "modelDetails", "modelIds", "modifiedTime", "name", "operationId", "properties", "version"]

    @field_validator('creation_state')
    def creation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotStarted', 'Running', 'Cancelled', 'Succeeded', 'Failed', 'TimedOut']):
            raise ValueError("must be one of enum values ('NotStarted', 'Running', 'Cancelled', 'Succeeded', 'Failed', 'TimedOut')")
        return value

    @field_validator('image_flavor')
    def image_flavor_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['WebApiContainer', 'BatchContainer', 'IoTContainer', 'AccelContainer', 'UserProvidedContainer']):
            raise ValueError("must be one of enum values ('WebApiContainer', 'BatchContainer', 'IoTContainer', 'AccelContainer', 'UserProvidedContainer')")
        return value

    @field_validator('image_type')
    def image_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Docker']):
            raise ValueError("must be one of enum values ('Docker')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'imageFlavor'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'DockerImageResponse': 'DockerImageResponse','FPGADockerImageResponse': 'FPGADockerImageResponse'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[DockerImageResponse, FPGADockerImageResponse]]:
        """Create an instance of ImageResponseBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in model_details (list)
        _items = []
        if self.model_details:
            for _item_model_details in self.model_details:
                if _item_model_details:
                    _items.append(_item_model_details.to_dict())
            _dict['modelDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[DockerImageResponse, FPGADockerImageResponse]]:
        """Create an instance of ImageResponseBase from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'DockerImageResponse':
            return import_module("openapi_client.models.docker_image_response").DockerImageResponse.from_dict(obj)
        if object_type ==  'FPGADockerImageResponse':
            return import_module("openapi_client.models.fpga_docker_image_response").FPGADockerImageResponse.from_dict(obj)

        raise ValueError("ImageResponseBase failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



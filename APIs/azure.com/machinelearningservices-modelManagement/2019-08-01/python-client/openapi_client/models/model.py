# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dataset_reference import DatasetReference
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """
    An Azure Machine Learning Model.
    """ # noqa: E501
    created_time: Optional[datetime] = Field(default=None, description="The Model creation time (UTC).", alias="createdTime")
    datasets: Optional[List[DatasetReference]] = Field(default=None, description="The list of datasets associated with the model.")
    description: Optional[StrictStr] = Field(default=None, description="The Model description text.")
    experiment_name: Optional[StrictStr] = Field(default=None, description="The name of the experiment where this model was created.", alias="experimentName")
    framework: Optional[StrictStr] = Field(default=None, description="The Model framework.")
    framework_version: Optional[StrictStr] = Field(default=None, description="The Model framework version.", alias="frameworkVersion")
    id: Optional[StrictStr] = Field(default=None, description="The Model Id.")
    kv_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The Model tag dictionary. Items are mutable.", alias="kvTags")
    mime_type: StrictStr = Field(description="The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml", alias="mimeType")
    modified_time: Optional[datetime] = Field(default=None, description="The Model last modified time (UTC).", alias="modifiedTime")
    name: StrictStr = Field(description="The Model name.")
    parent_model_id: Optional[StrictStr] = Field(default=None, description="The Parent Model Id.", alias="parentModelId")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="The Model property dictionary. Properties are immutable.")
    run_id: Optional[StrictStr] = Field(default=None, description="The RunId that created this model.", alias="runId")
    unpack: Optional[StrictBool] = Field(default=None, description="Indicates whether we need to unpack the Model during docker Image creation.")
    url: StrictStr = Field(description="The URL of the Model. Usually a SAS URL.")
    version: Optional[StrictInt] = Field(default=None, description="The Model version assigned by Model Management Service.")
    __properties: ClassVar[List[str]] = ["createdTime", "datasets", "description", "experimentName", "framework", "frameworkVersion", "id", "kvTags", "mimeType", "modifiedTime", "name", "parentModelId", "properties", "runId", "unpack", "url", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_time",
            "modified_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict['datasets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdTime": obj.get("createdTime"),
            "datasets": [DatasetReference.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "description": obj.get("description"),
            "experimentName": obj.get("experimentName"),
            "framework": obj.get("framework"),
            "frameworkVersion": obj.get("frameworkVersion"),
            "id": obj.get("id"),
            "kvTags": obj.get("kvTags"),
            "mimeType": obj.get("mimeType"),
            "modifiedTime": obj.get("modifiedTime"),
            "name": obj.get("name"),
            "parentModelId": obj.get("parentModelId"),
            "properties": obj.get("properties"),
            "runId": obj.get("runId"),
            "unpack": obj.get("unpack"),
            "url": obj.get("url"),
            "version": obj.get("version")
        })
        return _obj



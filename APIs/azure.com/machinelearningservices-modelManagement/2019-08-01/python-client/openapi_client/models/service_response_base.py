# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_error_response import ModelErrorResponse
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.aci_service_response import ACIServiceResponse
    from openapi_client.models.aks_endpoint_response import AKSEndpointResponse
    from openapi_client.models.aks_service_response import AKSServiceResponse
    from openapi_client.models.aks_variant_response import AKSVariantResponse
    from openapi_client.models.batch_service_response import BatchServiceResponse
    from openapi_client.models.iot_service_response import IotServiceResponse
    from openapi_client.models.unknown_service_response import UnknownServiceResponse

class ServiceResponseBase(BaseModel):
    """
    The base service response. The correct inherited response based on computeType will be returned (ex. ACIServiceResponse)
    """ # noqa: E501
    compute_type: StrictStr = Field(description="The compute environment type for the service.", alias="computeType")
    created_time: Optional[datetime] = Field(default=None, description="The time the service was created.", alias="createdTime")
    deployment_type: Optional[StrictStr] = Field(default=None, description="The deployment type for the service.", alias="deploymentType")
    description: Optional[StrictStr] = Field(default=None, description="The service description.")
    error: Optional[ModelErrorResponse] = None
    id: Optional[StrictStr] = Field(default=None, description="The service Id.")
    kv_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The service tag dictionary. Tags are mutable.", alias="kvTags")
    name: Optional[StrictStr] = Field(default=None, description="The service name.")
    operation_id: Optional[StrictStr] = Field(default=None, description="The ID of the latest asynchronous operation for this service.", alias="operationId")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="The service property dictionary. Properties are immutable.")
    state: Optional[StrictStr] = Field(default=None, description="The current state of the service.")
    updated_time: Optional[datetime] = Field(default=None, description="The time the service was updated.", alias="updatedTime")
    __properties: ClassVar[List[str]] = ["computeType", "createdTime", "deploymentType", "description", "error", "id", "kvTags", "name", "operationId", "properties", "state", "updatedTime"]

    @field_validator('compute_type')
    def compute_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACI', 'AKS', 'AMLCOMPUTE', 'IOT', 'AKSENDPOINT', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('ACI', 'AKS', 'AMLCOMPUTE', 'IOT', 'AKSENDPOINT', 'UNKNOWN')")
        return value

    @field_validator('deployment_type')
    def deployment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GRPCRealtimeEndpoint', 'HttpRealtimeEndpoint', 'Batch']):
            raise ValueError("must be one of enum values ('GRPCRealtimeEndpoint', 'HttpRealtimeEndpoint', 'Batch')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Transitioning', 'Healthy', 'Unhealthy', 'Failed']):
            raise ValueError("must be one of enum values ('Transitioning', 'Healthy', 'Unhealthy', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'computeType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ACIServiceResponse': 'ACIServiceResponse','AKSEndpointResponse': 'AKSEndpointResponse','AKSServiceResponse': 'AKSServiceResponse','AKSVariantResponse': 'AKSVariantResponse','BatchServiceResponse': 'BatchServiceResponse','IotServiceResponse': 'IotServiceResponse','UnknownServiceResponse': 'UnknownServiceResponse'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ACIServiceResponse, AKSEndpointResponse, AKSServiceResponse, AKSVariantResponse, BatchServiceResponse, IotServiceResponse, UnknownServiceResponse]]:
        """Create an instance of ServiceResponseBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ACIServiceResponse, AKSEndpointResponse, AKSServiceResponse, AKSVariantResponse, BatchServiceResponse, IotServiceResponse, UnknownServiceResponse]]:
        """Create an instance of ServiceResponseBase from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ACIServiceResponse':
            return import_module("openapi_client.models.aci_service_response").ACIServiceResponse.from_dict(obj)
        if object_type ==  'AKSEndpointResponse':
            return import_module("openapi_client.models.aks_endpoint_response").AKSEndpointResponse.from_dict(obj)
        if object_type ==  'AKSServiceResponse':
            return import_module("openapi_client.models.aks_service_response").AKSServiceResponse.from_dict(obj)
        if object_type ==  'AKSVariantResponse':
            return import_module("openapi_client.models.aks_variant_response").AKSVariantResponse.from_dict(obj)
        if object_type ==  'BatchServiceResponse':
            return import_module("openapi_client.models.batch_service_response").BatchServiceResponse.from_dict(obj)
        if object_type ==  'IotServiceResponse':
            return import_module("openapi_client.models.iot_service_response").IotServiceResponse.from_dict(obj)
        if object_type ==  'UnknownServiceResponse':
            return import_module("openapi_client.models.unknown_service_response").UnknownServiceResponse.from_dict(obj)

        raise ValueError("ServiceResponseBase failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



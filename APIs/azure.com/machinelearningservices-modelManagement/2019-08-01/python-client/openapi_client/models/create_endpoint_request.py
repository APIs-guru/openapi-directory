# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aks_service_create_request import AKSServiceCreateRequest
from openapi_client.models.auth_keys import AuthKeys
from openapi_client.models.create_service_request import CreateServiceRequest
from openapi_client.models.environment_image_request import EnvironmentImageRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateEndpointRequest(CreateServiceRequest):
    """
    The request to create an Endpoint in the AKS.
    """ # noqa: E501
    aad_auth_enabled: Optional[StrictBool] = Field(default=None, description="Whether or not AAD authentication is enabled.", alias="aadAuthEnabled")
    app_insights_enabled: Optional[StrictBool] = Field(default=None, description="Whether or not Application Insights is enabled.", alias="appInsightsEnabled")
    auth_enabled: Optional[StrictBool] = Field(default=None, description="Whether or not authentication is enabled.", alias="authEnabled")
    compute_name: Optional[StrictStr] = Field(default=None, description="The name of the compute resource.", alias="computeName")
    namespace: Optional[StrictStr] = Field(default=None, description="Kubernetes namespace for the service.")
    variants: Optional[List[AKSServiceCreateRequest]] = Field(default=None, description="The service tag list.")
    __properties: ClassVar[List[str]] = ["computeType", "deploymentType", "description", "environmentImageRequest", "imageId", "keys", "kvTags", "location", "name", "properties", "aadAuthEnabled", "appInsightsEnabled", "authEnabled", "computeName", "namespace", "variants"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment_image_request
        if self.environment_image_request:
            _dict['environmentImageRequest'] = self.environment_image_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keys
        if self.keys:
            _dict['keys'] = self.keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item_variants in self.variants:
                if _item_variants:
                    _items.append(_item_variants.to_dict())
            _dict['variants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeType": obj.get("computeType"),
            "deploymentType": obj.get("deploymentType"),
            "description": obj.get("description"),
            "environmentImageRequest": EnvironmentImageRequest.from_dict(obj["environmentImageRequest"]) if obj.get("environmentImageRequest") is not None else None,
            "imageId": obj.get("imageId"),
            "keys": AuthKeys.from_dict(obj["keys"]) if obj.get("keys") is not None else None,
            "kvTags": obj.get("kvTags"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "properties": obj.get("properties"),
            "aadAuthEnabled": obj.get("aadAuthEnabled"),
            "appInsightsEnabled": obj.get("appInsightsEnabled"),
            "authEnabled": obj.get("authEnabled"),
            "computeName": obj.get("computeName"),
            "namespace": obj.get("namespace"),
            "variants": [AKSServiceCreateRequest.from_dict(_item) for _item in obj["variants"]] if obj.get("variants") is not None else None
        })
        return _obj



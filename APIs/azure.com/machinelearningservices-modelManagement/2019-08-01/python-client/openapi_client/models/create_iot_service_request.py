# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_keys import AuthKeys
from openapi_client.models.create_service_request import CreateServiceRequest
from openapi_client.models.environment_image_request import EnvironmentImageRequest
from openapi_client.models.iot_base_module_settings import IotBaseModuleSettings
from openapi_client.models.iot_module_settings import IotModuleSettings
from openapi_client.models.registry_info import RegistryInfo
from typing import Optional, Set
from typing_extensions import Self

class CreateIotServiceRequest(CreateServiceRequest):
    """
    CreateIotServiceRequest
    """ # noqa: E501
    acr_credentials: Optional[List[RegistryInfo]] = Field(default=None, alias="acrCredentials")
    auth_enabled: Optional[StrictBool] = Field(default=None, alias="authEnabled")
    compute_name: Optional[StrictStr] = Field(default=None, alias="computeName")
    iot_device_id: Optional[StrictStr] = Field(default=None, alias="iotDeviceId")
    iot_edge_module: Optional[IotBaseModuleSettings] = Field(default=None, alias="iotEdgeModule")
    iot_edge_user_module: Optional[List[IotModuleSettings]] = Field(default=None, alias="iotEdgeUserModule")
    routes: Optional[Dict[str, StrictStr]] = None
    __properties: ClassVar[List[str]] = ["computeType", "deploymentType", "description", "environmentImageRequest", "imageId", "keys", "kvTags", "location", "name", "properties", "acrCredentials", "authEnabled", "computeName", "iotDeviceId", "iotEdgeModule", "iotEdgeUserModule", "routes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateIotServiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment_image_request
        if self.environment_image_request:
            _dict['environmentImageRequest'] = self.environment_image_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keys
        if self.keys:
            _dict['keys'] = self.keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in acr_credentials (list)
        _items = []
        if self.acr_credentials:
            for _item_acr_credentials in self.acr_credentials:
                if _item_acr_credentials:
                    _items.append(_item_acr_credentials.to_dict())
            _dict['acrCredentials'] = _items
        # override the default output from pydantic by calling `to_dict()` of iot_edge_module
        if self.iot_edge_module:
            _dict['iotEdgeModule'] = self.iot_edge_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in iot_edge_user_module (list)
        _items = []
        if self.iot_edge_user_module:
            for _item_iot_edge_user_module in self.iot_edge_user_module:
                if _item_iot_edge_user_module:
                    _items.append(_item_iot_edge_user_module.to_dict())
            _dict['iotEdgeUserModule'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateIotServiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeType": obj.get("computeType"),
            "deploymentType": obj.get("deploymentType"),
            "description": obj.get("description"),
            "environmentImageRequest": EnvironmentImageRequest.from_dict(obj["environmentImageRequest"]) if obj.get("environmentImageRequest") is not None else None,
            "imageId": obj.get("imageId"),
            "keys": AuthKeys.from_dict(obj["keys"]) if obj.get("keys") is not None else None,
            "kvTags": obj.get("kvTags"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "properties": obj.get("properties"),
            "acrCredentials": [RegistryInfo.from_dict(_item) for _item in obj["acrCredentials"]] if obj.get("acrCredentials") is not None else None,
            "authEnabled": obj.get("authEnabled"),
            "computeName": obj.get("computeName"),
            "iotDeviceId": obj.get("iotDeviceId"),
            "iotEdgeModule": IotBaseModuleSettings.from_dict(obj["iotEdgeModule"]) if obj.get("iotEdgeModule") is not None else None,
            "iotEdgeUserModule": [IotModuleSettings.from_dict(_item) for _item in obj["iotEdgeUserModule"]] if obj.get("iotEdgeUserModule") is not None else None,
            "routes": obj.get("routes")
        })
        return _obj



# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.aci_service_response import ACIServiceResponse

class TestACIServiceResponse(unittest.TestCase):
    """ACIServiceResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ACIServiceResponse:
        """Test ACIServiceResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ACIServiceResponse`
        """
        model = ACIServiceResponse()
        if include_optional:
            return ACIServiceResponse(
                app_insights_enabled = True,
                auth_enabled = True,
                cname = '',
                container_resource_requirements = openapi_client.models.container_resource_requirements.ContainerResourceRequirements(
                    cpu = 4.0, 
                    fpga = 56, 
                    gpu = 56, 
                    memory_in_gb = 64.0, ),
                data_collection = openapi_client.models.model_data_collection.ModelDataCollection(
                    event_hub_enabled = True, 
                    storage_enabled = True, ),
                environment = openapi_client.models.model_environment_definition.ModelEnvironmentDefinition(
                    docker = openapi_client.models.model_docker_section.ModelDockerSection(
                        arguments = [
                            ''
                            ], 
                        base_dockerfile = 'FROM ubuntu:latest
RUN echo "Hello world!"', 
                        base_image = 'ubuntu:latest', 
                        base_image_registry = openapi_client.models.container_registry.ContainerRegistry(
                            address = '', 
                            password = '', 
                            username = '', ), 
                        enabled = True, 
                        gpu_support = False, 
                        shared_volumes = True, 
                        shm_size = '1g', ), 
                    environment_variables = {
                        'key' : ''
                        }, 
                    inferencing_stack_version = 'latest', 
                    name = 'mydevenvironment', 
                    python = openapi_client.models.model_python_section.ModelPythonSection(
                        base_conda_environment = '', 
                        conda_dependencies = openapi_client.models.conda_dependencies.condaDependencies(), 
                        interpreter_path = '', 
                        user_managed_dependencies = True, ), 
                    spark = openapi_client.models.model_spark_section.ModelSparkSection(
                        packages = [
                            openapi_client.models.spark_maven_package.SparkMavenPackage(
                                artifact = '', 
                                group = '', 
                                version = '', )
                            ], 
                        precache_packages = True, 
                        repositories = [
                            ''
                            ], ), 
                    version = '1', ),
                image_details = None,
                image_id = '',
                location = '',
                model_config_map = {
                    'key' : None
                    },
                models = [
                    openapi_client.models.model.Model(
                        created_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        datasets = [
                            openapi_client.models.dataset_reference.DatasetReference(
                                id = '', 
                                name = '', )
                            ], 
                        description = 'A mnist model, first version.', 
                        experiment_name = '', 
                        framework = '', 
                        framework_version = '', 
                        id = 'sklearn_mnist:1', 
                        kv_tags = {
                            'key' : ''
                            }, 
                        mime_type = '', 
                        modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = 'sklearn_mnist', 
                        parent_model_id = 'sklearn_mnist_root:1', 
                        properties = {
                            'key' : ''
                            }, 
                        run_id = '', 
                        unpack = True, 
                        url = '', 
                        version = 1, )
                    ],
                public_fqdn = '',
                public_ip = '',
                scoring_uri = '',
                ssl_certificate = '',
                ssl_enabled = True,
                ssl_key = '',
                swagger_uri = ''
            )
        else:
            return ACIServiceResponse(
        )
        """

    def testACIServiceResponse(self):
        """Test ACIServiceResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

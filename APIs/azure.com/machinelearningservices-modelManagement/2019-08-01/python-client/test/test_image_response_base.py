# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.image_response_base import ImageResponseBase

class TestImageResponseBase(unittest.TestCase):
    """ImageResponseBase unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImageResponseBase:
        """Test ImageResponseBase
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImageResponseBase`
        """
        model = ImageResponseBase()
        if include_optional:
            return ImageResponseBase(
                auto_delete = True,
                created_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                creation_state = 'Running',
                description = 'My docker image.',
                error = openapi_client.models.model_error_response.ModelErrorResponse(
                    code = '', 
                    details = [
                        openapi_client.models.error_details.ErrorDetails(
                            code = '', 
                            message = '', 
                            target = '', )
                        ], 
                    message = '', 
                    status_code = 56, ),
                id = 'myimage:3',
                image_build_log_uri = '',
                image_flavor = 'WebApiContainer',
                image_location = '',
                image_type = 'Docker',
                kv_tags = {
                    'key' : ''
                    },
                model_details = [
                    openapi_client.models.model.Model(
                        created_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        datasets = [
                            openapi_client.models.dataset_reference.DatasetReference(
                                id = '', 
                                name = '', )
                            ], 
                        description = 'A mnist model, first version.', 
                        experiment_name = '', 
                        framework = '', 
                        framework_version = '', 
                        id = 'sklearn_mnist:1', 
                        kv_tags = {
                            'key' : ''
                            }, 
                        mime_type = '', 
                        modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = 'sklearn_mnist', 
                        parent_model_id = 'sklearn_mnist_root:1', 
                        properties = {
                            'key' : ''
                            }, 
                        run_id = '', 
                        unpack = True, 
                        url = '', 
                        version = 1, )
                    ],
                model_ids = [
                    ''
                    ],
                modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = 'myimage:3',
                operation_id = '',
                properties = {
                    'key' : ''
                    },
                version = 3
            )
        else:
            return ImageResponseBase(
                image_flavor = 'WebApiContainer',
        )
        """

    def testImageResponseBase(self):
        """Test ImageResponseBase"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.asset import Asset
from openapi_client.models.json_patch_operation import JsonPatchOperation
from openapi_client.models.paginated_asset_list import PaginatedAssetList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AssetApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def assets_create(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        asset: Annotated[Optional[Asset], Field(description="The Asset to be created.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Asset:
        """Create an Asset.

        Create an Asset from the provided payload.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param asset: The Asset to be created.
        :type asset: Asset
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_create_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            asset=asset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def assets_create_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        asset: Annotated[Optional[Asset], Field(description="The Asset to be created.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Asset]:
        """Create an Asset.

        Create an Asset from the provided payload.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param asset: The Asset to be created.
        :type asset: Asset
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_create_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            asset=asset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def assets_create_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        asset: Annotated[Optional[Asset], Field(description="The Asset to be created.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an Asset.

        Create an Asset from the provided payload.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param asset: The Asset to be created.
        :type asset: Asset
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_create_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            asset=asset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _assets_create_serialize(
        self,
        subscription_id,
        resource_group,
        workspace,
        asset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group is not None:
            _path_params['resourceGroup'] = resource_group
        if workspace is not None:
            _path_params['workspace'] = workspace
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if asset is not None:
            _body_params = asset


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def assets_delete(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Id of the Asset to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an Asset.

        Delete the specified Asset.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Id of the Asset to delete. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_delete_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def assets_delete_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Id of the Asset to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an Asset.

        Delete the specified Asset.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Id of the Asset to delete. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_delete_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def assets_delete_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Id of the Asset to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an Asset.

        Delete the specified Asset.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Id of the Asset to delete. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_delete_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _assets_delete_serialize(
        self,
        subscription_id,
        resource_group,
        workspace,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group is not None:
            _path_params['resourceGroup'] = resource_group
        if workspace is not None:
            _path_params['workspace'] = workspace
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def assets_list_query(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        run_id: Annotated[Optional[StrictStr], Field(description="The run Id associated with the Assets.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="The object name.")] = None,
        count: Annotated[Optional[StrictInt], Field(description="The number of items to retrieve in a page.")] = None,
        skip_token: Annotated[Optional[StrictStr], Field(description="The continuation token to retrieve the next page.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3")] = None,
        properties: Annotated[Optional[StrictStr], Field(description="A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="An option for specifying how to order the list.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedAssetList:
        """Query the list of Assets in a workspace.

        If no filter is passed, the query lists all the Assets in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param run_id: The run Id associated with the Assets.
        :type run_id: str
        :param name: The object name.
        :type name: str
        :param count: The number of items to retrieve in a page.
        :type count: int
        :param skip_token: The continuation token to retrieve the next page.
        :type skip_token: str
        :param tags: A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3
        :type tags: str
        :param properties: A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3
        :type properties: str
        :param orderby: An option for specifying how to order the list.
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_list_query_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            run_id=run_id,
            name=name,
            count=count,
            skip_token=skip_token,
            tags=tags,
            properties=properties,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedAssetList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def assets_list_query_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        run_id: Annotated[Optional[StrictStr], Field(description="The run Id associated with the Assets.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="The object name.")] = None,
        count: Annotated[Optional[StrictInt], Field(description="The number of items to retrieve in a page.")] = None,
        skip_token: Annotated[Optional[StrictStr], Field(description="The continuation token to retrieve the next page.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3")] = None,
        properties: Annotated[Optional[StrictStr], Field(description="A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="An option for specifying how to order the list.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedAssetList]:
        """Query the list of Assets in a workspace.

        If no filter is passed, the query lists all the Assets in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param run_id: The run Id associated with the Assets.
        :type run_id: str
        :param name: The object name.
        :type name: str
        :param count: The number of items to retrieve in a page.
        :type count: int
        :param skip_token: The continuation token to retrieve the next page.
        :type skip_token: str
        :param tags: A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3
        :type tags: str
        :param properties: A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3
        :type properties: str
        :param orderby: An option for specifying how to order the list.
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_list_query_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            run_id=run_id,
            name=name,
            count=count,
            skip_token=skip_token,
            tags=tags,
            properties=properties,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedAssetList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def assets_list_query_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        run_id: Annotated[Optional[StrictStr], Field(description="The run Id associated with the Assets.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="The object name.")] = None,
        count: Annotated[Optional[StrictInt], Field(description="The number of items to retrieve in a page.")] = None,
        skip_token: Annotated[Optional[StrictStr], Field(description="The continuation token to retrieve the next page.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3")] = None,
        properties: Annotated[Optional[StrictStr], Field(description="A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="An option for specifying how to order the list.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query the list of Assets in a workspace.

        If no filter is passed, the query lists all the Assets in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param run_id: The run Id associated with the Assets.
        :type run_id: str
        :param name: The object name.
        :type name: str
        :param count: The number of items to retrieve in a page.
        :type count: int
        :param skip_token: The continuation token to retrieve the next page.
        :type skip_token: str
        :param tags: A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3
        :type tags: str
        :param properties: A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3
        :type properties: str
        :param orderby: An option for specifying how to order the list.
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_list_query_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            run_id=run_id,
            name=name,
            count=count,
            skip_token=skip_token,
            tags=tags,
            properties=properties,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedAssetList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _assets_list_query_serialize(
        self,
        subscription_id,
        resource_group,
        workspace,
        run_id,
        name,
        count,
        skip_token,
        tags,
        properties,
        orderby,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group is not None:
            _path_params['resourceGroup'] = resource_group
        if workspace is not None:
            _path_params['workspace'] = workspace
        # process the query parameters
        if run_id is not None:
            
            _query_params.append(('runId', run_id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if skip_token is not None:
            
            _query_params.append(('$skipToken', skip_token))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if properties is not None:
            
            _query_params.append(('properties', properties))
            
        if orderby is not None:
            
            _query_params.append(('orderby', orderby))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def assets_patch(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Id of the Asset to patch.")],
        patch: Annotated[List[JsonPatchOperation], Field(description="The payload that is used to patch an Asset.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Asset:
        """Update an Asset.

        Patch a specific Asset.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Id of the Asset to patch. (required)
        :type id: str
        :param patch: The payload that is used to patch an Asset. (required)
        :type patch: List[JsonPatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_patch_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            patch=patch,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def assets_patch_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Id of the Asset to patch.")],
        patch: Annotated[List[JsonPatchOperation], Field(description="The payload that is used to patch an Asset.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Asset]:
        """Update an Asset.

        Patch a specific Asset.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Id of the Asset to patch. (required)
        :type id: str
        :param patch: The payload that is used to patch an Asset. (required)
        :type patch: List[JsonPatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_patch_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            patch=patch,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def assets_patch_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Id of the Asset to patch.")],
        patch: Annotated[List[JsonPatchOperation], Field(description="The payload that is used to patch an Asset.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an Asset.

        Patch a specific Asset.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Id of the Asset to patch. (required)
        :type id: str
        :param patch: The payload that is used to patch an Asset. (required)
        :type patch: List[JsonPatchOperation]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_patch_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            patch=patch,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _assets_patch_serialize(
        self,
        subscription_id,
        resource_group,
        workspace,
        id,
        patch,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'patch': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group is not None:
            _path_params['resourceGroup'] = resource_group
        if workspace is not None:
            _path_params['workspace'] = workspace
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch is not None:
            _body_params = patch


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def assets_query_by_id(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Asset Id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Asset:
        """Get an Asset.

        Get an Asset by Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Asset Id. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_query_by_id_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def assets_query_by_id_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Asset Id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Asset]:
        """Get an Asset.

        Get an Asset by Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Asset Id. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_query_by_id_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def assets_query_by_id_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        id: Annotated[StrictStr, Field(description="The Asset Id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an Asset.

        Get an Asset by Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param id: The Asset Id. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assets_query_by_id_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Asset",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _assets_query_by_id_serialize(
        self,
        subscription_id,
        resource_group,
        workspace,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group is not None:
            _path_params['resourceGroup'] = resource_group
        if workspace is not None:
            _path_params['workspace'] = workspace
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



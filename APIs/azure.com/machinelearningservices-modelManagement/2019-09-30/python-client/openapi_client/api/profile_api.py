# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.paginated_profile_response_list import PaginatedProfileResponseList
from openapi_client.models.profile_request_base import ProfileRequestBase
from openapi_client.models.profile_response import ProfileResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ProfileApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def profiles_create(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        input_request: Annotated[ProfileRequestBase, Field(description="The payload that is used to create the Profile.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a Profile.

        Create a Profile for an Image.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param input_request: The payload that is used to create the Profile. (required)
        :type input_request: ProfileRequestBase
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_create_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            input_request=input_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def profiles_create_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        input_request: Annotated[ProfileRequestBase, Field(description="The payload that is used to create the Profile.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a Profile.

        Create a Profile for an Image.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param input_request: The payload that is used to create the Profile. (required)
        :type input_request: ProfileRequestBase
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_create_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            input_request=input_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def profiles_create_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        input_request: Annotated[ProfileRequestBase, Field(description="The payload that is used to create the Profile.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a Profile.

        Create a Profile for an Image.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param input_request: The payload that is used to create the Profile. (required)
        :type input_request: ProfileRequestBase
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_create_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            input_request=input_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _profiles_create_serialize(
        self,
        subscription_id,
        resource_group,
        workspace,
        image_id,
        input_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group is not None:
            _path_params['resourceGroup'] = resource_group
        if workspace is not None:
            _path_params['workspace'] = workspace
        if image_id is not None:
            _path_params['imageId'] = image_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if input_request is not None:
            _body_params = input_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def profiles_list_query(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        name: Annotated[Optional[StrictStr], Field(description="The Profile name.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="The Profile description.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3")] = None,
        properties: Annotated[Optional[StrictStr], Field(description="A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3")] = None,
        count: Annotated[Optional[StrictInt], Field(description="The number of items to retrieve in a page.")] = None,
        skip_token: Annotated[Optional[StrictStr], Field(description="The continuation token to retrieve the next page.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="The option to order the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedProfileResponseList:
        """Get a list of Image Profiles.

        If no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the count of items in each page is an optional parameter.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param name: The Profile name.
        :type name: str
        :param description: The Profile description.
        :type description: str
        :param tags: A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3
        :type tags: str
        :param properties: A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3
        :type properties: str
        :param count: The number of items to retrieve in a page.
        :type count: int
        :param skip_token: The continuation token to retrieve the next page.
        :type skip_token: str
        :param order_by: The option to order the response.
        :type order_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_list_query_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            name=name,
            description=description,
            tags=tags,
            properties=properties,
            count=count,
            skip_token=skip_token,
            order_by=order_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedProfileResponseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def profiles_list_query_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        name: Annotated[Optional[StrictStr], Field(description="The Profile name.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="The Profile description.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3")] = None,
        properties: Annotated[Optional[StrictStr], Field(description="A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3")] = None,
        count: Annotated[Optional[StrictInt], Field(description="The number of items to retrieve in a page.")] = None,
        skip_token: Annotated[Optional[StrictStr], Field(description="The continuation token to retrieve the next page.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="The option to order the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedProfileResponseList]:
        """Get a list of Image Profiles.

        If no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the count of items in each page is an optional parameter.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param name: The Profile name.
        :type name: str
        :param description: The Profile description.
        :type description: str
        :param tags: A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3
        :type tags: str
        :param properties: A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3
        :type properties: str
        :param count: The number of items to retrieve in a page.
        :type count: int
        :param skip_token: The continuation token to retrieve the next page.
        :type skip_token: str
        :param order_by: The option to order the response.
        :type order_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_list_query_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            name=name,
            description=description,
            tags=tags,
            properties=properties,
            count=count,
            skip_token=skip_token,
            order_by=order_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedProfileResponseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def profiles_list_query_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        name: Annotated[Optional[StrictStr], Field(description="The Profile name.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="The Profile description.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3")] = None,
        properties: Annotated[Optional[StrictStr], Field(description="A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3")] = None,
        count: Annotated[Optional[StrictInt], Field(description="The number of items to retrieve in a page.")] = None,
        skip_token: Annotated[Optional[StrictStr], Field(description="The continuation token to retrieve the next page.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="The option to order the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of Image Profiles.

        If no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the count of items in each page is an optional parameter.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param name: The Profile name.
        :type name: str
        :param description: The Profile description.
        :type description: str
        :param tags: A set of tags with which to filter the returned models.              It is a comma separated string of tags key or tags key=value              Example: tagKey1,tagKey2,tagKey3=value3
        :type tags: str
        :param properties: A set of properties with which to filter the returned models.              It is a comma separated string of properties key and/or properties key=value              Example: propKey1,propKey2,propKey3=value3
        :type properties: str
        :param count: The number of items to retrieve in a page.
        :type count: int
        :param skip_token: The continuation token to retrieve the next page.
        :type skip_token: str
        :param order_by: The option to order the response.
        :type order_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_list_query_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            name=name,
            description=description,
            tags=tags,
            properties=properties,
            count=count,
            skip_token=skip_token,
            order_by=order_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedProfileResponseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _profiles_list_query_serialize(
        self,
        subscription_id,
        resource_group,
        workspace,
        image_id,
        name,
        description,
        tags,
        properties,
        count,
        skip_token,
        order_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group is not None:
            _path_params['resourceGroup'] = resource_group
        if workspace is not None:
            _path_params['workspace'] = workspace
        if image_id is not None:
            _path_params['imageId'] = image_id
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if properties is not None:
            
            _query_params.append(('properties', properties))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if skip_token is not None:
            
            _query_params.append(('$skipToken', skip_token))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def profiles_query_by_id(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        id: Annotated[StrictStr, Field(description="The Profile Id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProfileResponse:
        """Get a Profile.

        Get the Profile for an Image.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param id: The Profile Id. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_query_by_id_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProfileResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def profiles_query_by_id_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        id: Annotated[StrictStr, Field(description="The Profile Id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProfileResponse]:
        """Get a Profile.

        Get the Profile for an Image.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param id: The Profile Id. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_query_by_id_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProfileResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def profiles_query_by_id_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace: Annotated[StrictStr, Field(description="The name of the workspace.")],
        image_id: Annotated[StrictStr, Field(description="The Image Id.")],
        id: Annotated[StrictStr, Field(description="The Profile Id.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a Profile.

        Get the Profile for an Image.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group: The Name of the resource group in which the workspace is located. (required)
        :type resource_group: str
        :param workspace: The name of the workspace. (required)
        :type workspace: str
        :param image_id: The Image Id. (required)
        :type image_id: str
        :param id: The Profile Id. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._profiles_query_by_id_serialize(
            subscription_id=subscription_id,
            resource_group=resource_group,
            workspace=workspace,
            image_id=image_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProfileResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _profiles_query_by_id_serialize(
        self,
        subscription_id,
        resource_group,
        workspace,
        image_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group is not None:
            _path_params['resourceGroup'] = resource_group
        if workspace is not None:
            _path_params['workspace'] = workspace
        if image_id is not None:
            _path_params['imageId'] = image_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



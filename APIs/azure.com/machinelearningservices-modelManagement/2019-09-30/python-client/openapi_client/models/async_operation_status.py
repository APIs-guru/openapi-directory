# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.async_operation_details import AsyncOperationDetails
from openapi_client.models.model_error_response import ModelErrorResponse
from typing import Optional, Set
from typing_extensions import Self

class AsyncOperationStatus(BaseModel):
    """
    The async operation status.
    """ # noqa: E501
    created_time: Optional[datetime] = Field(default=None, description="The async operation creation time (UTC).", alias="createdTime")
    end_time: Optional[datetime] = Field(default=None, description="The async operation end time (UTC)l", alias="endTime")
    error: Optional[ModelErrorResponse] = None
    id: Optional[StrictStr] = Field(default=None, description="The async operation id.")
    operation_details: Optional[AsyncOperationDetails] = Field(default=None, alias="operationDetails")
    operation_log: Optional[StrictStr] = Field(default=None, description="The async operation log.", alias="operationLog")
    operation_type: Optional[StrictStr] = Field(default=None, description="The async operation type.", alias="operationType")
    parent_request_id: Optional[StrictStr] = Field(default=None, description="The request id that created this operation", alias="parentRequestId")
    resource_location: Optional[StrictStr] = Field(default=None, description="The resource created/updated by the async operation.", alias="resourceLocation")
    state: Optional[StrictStr] = Field(default=None, description="The async operation state.")
    __properties: ClassVar[List[str]] = ["createdTime", "endTime", "error", "id", "operationDetails", "operationLog", "operationType", "parentRequestId", "resourceLocation", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotStarted', 'Running', 'Cancelled', 'Succeeded', 'Failed', 'TimedOut']):
            raise ValueError("must be one of enum values ('NotStarted', 'Running', 'Cancelled', 'Succeeded', 'Failed', 'TimedOut')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AsyncOperationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_details
        if self.operation_details:
            _dict['operationDetails'] = self.operation_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AsyncOperationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdTime": obj.get("createdTime"),
            "endTime": obj.get("endTime"),
            "error": ModelErrorResponse.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "id": obj.get("id"),
            "operationDetails": AsyncOperationDetails.from_dict(obj["operationDetails"]) if obj.get("operationDetails") is not None else None,
            "operationLog": obj.get("operationLog"),
            "operationType": obj.get("operationType"),
            "parentRequestId": obj.get("parentRequestId"),
            "resourceLocation": obj.get("resourceLocation"),
            "state": obj.get("state")
        })
        return _obj



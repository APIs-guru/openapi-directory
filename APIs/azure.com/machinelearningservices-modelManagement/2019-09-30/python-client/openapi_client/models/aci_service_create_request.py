# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_keys import AuthKeys
from openapi_client.models.container_resource_requirements import ContainerResourceRequirements
from openapi_client.models.create_service_request import CreateServiceRequest
from openapi_client.models.environment_image_request import EnvironmentImageRequest
from openapi_client.models.model_data_collection import ModelDataCollection
from typing import Optional, Set
from typing_extensions import Self

class ACIServiceCreateRequest(CreateServiceRequest):
    """
    ACIServiceCreateRequest
    """ # noqa: E501
    app_insights_enabled: Optional[StrictBool] = Field(default=False, description="Whether or not Application Insights is enabled.", alias="appInsightsEnabled")
    auth_enabled: Optional[StrictBool] = Field(default=False, description="Whether or not authentication is enabled on the service.", alias="authEnabled")
    cname: Optional[StrictStr] = Field(default=None, description="The CName for the service.")
    container_resource_requirements: Optional[ContainerResourceRequirements] = Field(default=None, alias="containerResourceRequirements")
    data_collection: Optional[ModelDataCollection] = Field(default=None, alias="dataCollection")
    dns_name_label: Optional[StrictStr] = Field(default=None, description="The Dns label for the service.", alias="dnsNameLabel")
    ssl_certificate: Optional[StrictStr] = Field(default=None, description="The SSL certificate to use if SSL is enabled.", alias="sslCertificate")
    ssl_enabled: Optional[StrictBool] = Field(default=False, description="Whether or not SSL is enabled.", alias="sslEnabled")
    ssl_key: Optional[StrictStr] = Field(default=None, description="The SSL key for the certificate.", alias="sslKey")
    __properties: ClassVar[List[str]] = ["computeType", "deploymentType", "description", "environmentImageRequest", "imageId", "keys", "kvTags", "location", "name", "properties", "appInsightsEnabled", "authEnabled", "cname", "containerResourceRequirements", "dataCollection", "dnsNameLabel", "sslCertificate", "sslEnabled", "sslKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ACIServiceCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment_image_request
        if self.environment_image_request:
            _dict['environmentImageRequest'] = self.environment_image_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keys
        if self.keys:
            _dict['keys'] = self.keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_resource_requirements
        if self.container_resource_requirements:
            _dict['containerResourceRequirements'] = self.container_resource_requirements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_collection
        if self.data_collection:
            _dict['dataCollection'] = self.data_collection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ACIServiceCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeType": obj.get("computeType"),
            "deploymentType": obj.get("deploymentType"),
            "description": obj.get("description"),
            "environmentImageRequest": EnvironmentImageRequest.from_dict(obj["environmentImageRequest"]) if obj.get("environmentImageRequest") is not None else None,
            "imageId": obj.get("imageId"),
            "keys": AuthKeys.from_dict(obj["keys"]) if obj.get("keys") is not None else None,
            "kvTags": obj.get("kvTags"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "properties": obj.get("properties"),
            "appInsightsEnabled": obj.get("appInsightsEnabled") if obj.get("appInsightsEnabled") is not None else False,
            "authEnabled": obj.get("authEnabled") if obj.get("authEnabled") is not None else False,
            "cname": obj.get("cname"),
            "containerResourceRequirements": ContainerResourceRequirements.from_dict(obj["containerResourceRequirements"]) if obj.get("containerResourceRequirements") is not None else None,
            "dataCollection": ModelDataCollection.from_dict(obj["dataCollection"]) if obj.get("dataCollection") is not None else None,
            "dnsNameLabel": obj.get("dnsNameLabel"),
            "sslCertificate": obj.get("sslCertificate"),
            "sslEnabled": obj.get("sslEnabled") if obj.get("sslEnabled") is not None else False,
            "sslKey": obj.get("sslKey")
        })
        return _obj



# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_docker_section import ModelDockerSection
from openapi_client.models.model_python_section import ModelPythonSection
from openapi_client.models.model_spark_section import ModelSparkSection
from typing import Optional, Set
from typing_extensions import Self

class ModelEnvironmentDefinition(BaseModel):
    """
    ModelEnvironmentDefinition
    """ # noqa: E501
    docker: Optional[ModelDockerSection] = None
    environment_variables: Optional[Dict[str, StrictStr]] = Field(default=None, description="Definition of environment variables to be defined in the environment.", alias="environmentVariables")
    inferencing_stack_version: Optional[StrictStr] = Field(default=None, description="The Inferencing stack version.", alias="inferencingStackVersion")
    name: Optional[StrictStr] = Field(default=None, description="The name of the environment.")
    python: Optional[ModelPythonSection] = None
    spark: Optional[ModelSparkSection] = None
    version: Optional[StrictStr] = Field(default=None, description="The environment version.")
    __properties: ClassVar[List[str]] = ["docker", "environmentVariables", "inferencingStackVersion", "name", "python", "spark", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelEnvironmentDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of docker
        if self.docker:
            _dict['docker'] = self.docker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of python
        if self.python:
            _dict['python'] = self.python.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spark
        if self.spark:
            _dict['spark'] = self.spark.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelEnvironmentDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "docker": ModelDockerSection.from_dict(obj["docker"]) if obj.get("docker") is not None else None,
            "environmentVariables": obj.get("environmentVariables"),
            "inferencingStackVersion": obj.get("inferencingStackVersion"),
            "name": obj.get("name"),
            "python": ModelPythonSection.from_dict(obj["python"]) if obj.get("python") is not None else None,
            "spark": ModelSparkSection.from_dict(obj["spark"]) if obj.get("spark") is not None else None,
            "version": obj.get("version")
        })
        return _obj



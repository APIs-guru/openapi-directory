# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.auth_keys import AuthKeys
from openapi_client.models.environment_image_request import EnvironmentImageRequest
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.aci_service_create_request import ACIServiceCreateRequest
    from openapi_client.models.aks_service_create_request import AKSServiceCreateRequest
    from openapi_client.models.create_endpoint_request import CreateEndpointRequest
    from openapi_client.models.create_endpoint_variant_request import CreateEndpointVariantRequest
    from openapi_client.models.create_iot_service_request import CreateIotServiceRequest

class CreateServiceRequest(BaseModel):
    """
    The base class for creating a service.
    """ # noqa: E501
    compute_type: StrictStr = Field(description="The compute environment type for the service.", alias="computeType")
    deployment_type: Optional[StrictStr] = Field(default=None, description="The deployment type for the service.", alias="deploymentType")
    description: Optional[StrictStr] = Field(default=None, description="The description of the service.")
    environment_image_request: Optional[EnvironmentImageRequest] = Field(default=None, alias="environmentImageRequest")
    image_id: Optional[StrictStr] = Field(default=None, description="The Image Id.", alias="imageId")
    keys: Optional[AuthKeys] = None
    kv_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The service tag dictionary. Tags are mutable.", alias="kvTags")
    location: Optional[StrictStr] = Field(default=None, description="The location of the service.")
    name: StrictStr = Field(description="The service name.")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="The service properties dictionary. Properties are immutable.")
    __properties: ClassVar[List[str]] = ["computeType", "deploymentType", "description", "environmentImageRequest", "imageId", "keys", "kvTags", "location", "name", "properties"]

    @field_validator('compute_type')
    def compute_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACI', 'AKS', 'AMLCOMPUTE', 'IOT', 'AKSENDPOINT', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('ACI', 'AKS', 'AMLCOMPUTE', 'IOT', 'AKSENDPOINT', 'UNKNOWN')")
        return value

    @field_validator('deployment_type')
    def deployment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GRPCRealtimeEndpoint', 'HttpRealtimeEndpoint', 'Batch']):
            raise ValueError("must be one of enum values ('GRPCRealtimeEndpoint', 'HttpRealtimeEndpoint', 'Batch')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'computeType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ACIServiceCreateRequest': 'ACIServiceCreateRequest','AKSServiceCreateRequest': 'AKSServiceCreateRequest','CreateEndpointRequest': 'CreateEndpointRequest','CreateEndpointVariantRequest': 'CreateEndpointVariantRequest','CreateIotServiceRequest': 'CreateIotServiceRequest'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ACIServiceCreateRequest, AKSServiceCreateRequest, CreateEndpointRequest, CreateEndpointVariantRequest, CreateIotServiceRequest]]:
        """Create an instance of CreateServiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment_image_request
        if self.environment_image_request:
            _dict['environmentImageRequest'] = self.environment_image_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keys
        if self.keys:
            _dict['keys'] = self.keys.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ACIServiceCreateRequest, AKSServiceCreateRequest, CreateEndpointRequest, CreateEndpointVariantRequest, CreateIotServiceRequest]]:
        """Create an instance of CreateServiceRequest from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ACIServiceCreateRequest':
            return import_module("openapi_client.models.aci_service_create_request").ACIServiceCreateRequest.from_dict(obj)
        if object_type ==  'AKSServiceCreateRequest':
            return import_module("openapi_client.models.aks_service_create_request").AKSServiceCreateRequest.from_dict(obj)
        if object_type ==  'CreateEndpointRequest':
            return import_module("openapi_client.models.create_endpoint_request").CreateEndpointRequest.from_dict(obj)
        if object_type ==  'CreateEndpointVariantRequest':
            return import_module("openapi_client.models.create_endpoint_variant_request").CreateEndpointVariantRequest.from_dict(obj)
        if object_type ==  'CreateIotServiceRequest':
            return import_module("openapi_client.models.create_iot_service_request").CreateIotServiceRequest.from_dict(obj)

        raise ValueError("CreateServiceRequest failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



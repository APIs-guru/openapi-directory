# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_error_response import ModelErrorResponse
from typing import Optional, Set
from typing_extensions import Self

class ProfileResponse(BaseModel):
    """
    The profile response.
    """ # noqa: E501
    created_time: Optional[datetime] = Field(default=None, description="The profile creation time (UTC).", alias="createdTime")
    description: Optional[StrictStr] = Field(default=None, description="The profile description.")
    error: Optional[ModelErrorResponse] = None
    image_id: Optional[StrictStr] = Field(default=None, description="The Image Id.", alias="imageId")
    input_data: Optional[StrictStr] = Field(default=None, description="The input data.", alias="inputData")
    kv_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The profile tags dictionary. Tags are mutable.", alias="kvTags")
    name: Optional[StrictStr] = Field(default=None, description="The profile name.")
    profile_run_result: Optional[StrictStr] = Field(default=None, description="The profile run result.", alias="profileRunResult")
    profiling_error_logs: Optional[StrictStr] = Field(default=None, description="The profiling error logs.", alias="profilingErrorLogs")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="The profile properties dictionary. Properties are immutable.")
    recommendation_latency_in_ms: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latency associated with the recommended memory/cpu config", alias="recommendationLatencyInMs")
    recommended_cpu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The recommended CPU allocation.", alias="recommendedCpu")
    recommended_memory_in_gb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The recommended amount of memory to allocate in GB.", alias="recommendedMemoryInGB")
    state: Optional[StrictStr] = Field(default=None, description="The state of the profile.")
    __properties: ClassVar[List[str]] = ["createdTime", "description", "error", "imageId", "inputData", "kvTags", "name", "profileRunResult", "profilingErrorLogs", "properties", "recommendationLatencyInMs", "recommendedCpu", "recommendedMemoryInGB", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdTime": obj.get("createdTime"),
            "description": obj.get("description"),
            "error": ModelErrorResponse.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "imageId": obj.get("imageId"),
            "inputData": obj.get("inputData"),
            "kvTags": obj.get("kvTags"),
            "name": obj.get("name"),
            "profileRunResult": obj.get("profileRunResult"),
            "profilingErrorLogs": obj.get("profilingErrorLogs"),
            "properties": obj.get("properties"),
            "recommendationLatencyInMs": obj.get("recommendationLatencyInMs"),
            "recommendedCpu": obj.get("recommendedCpu"),
            "recommendedMemoryInGB": obj.get("recommendedMemoryInGB"),
            "state": obj.get("state")
        })
        return _obj



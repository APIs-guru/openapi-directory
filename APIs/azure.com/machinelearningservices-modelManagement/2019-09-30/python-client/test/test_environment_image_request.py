# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.environment_image_request import EnvironmentImageRequest

class TestEnvironmentImageRequest(unittest.TestCase):
    """EnvironmentImageRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnvironmentImageRequest:
        """Test EnvironmentImageRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnvironmentImageRequest`
        """
        model = EnvironmentImageRequest()
        if include_optional:
            return EnvironmentImageRequest(
                assets = [
                    openapi_client.models.environment_image_asset.EnvironmentImageAsset(
                        id = '', 
                        mime_type = '', 
                        unpack = True, 
                        url = '', )
                    ],
                driver_program = '',
                environment = openapi_client.models.model_environment_definition.ModelEnvironmentDefinition(
                    docker = openapi_client.models.model_docker_section.ModelDockerSection(
                        arguments = [
                            ''
                            ], 
                        base_dockerfile = 'FROM ubuntu:latest
RUN echo "Hello world!"', 
                        base_image = 'ubuntu:latest', 
                        base_image_registry = openapi_client.models.container_registry.ContainerRegistry(
                            address = '', 
                            password = '', 
                            username = '', ), 
                        enabled = True, 
                        gpu_support = False, 
                        shared_volumes = True, 
                        shm_size = '1g', ), 
                    environment_variables = {
                        'key' : ''
                        }, 
                    inferencing_stack_version = 'latest', 
                    name = 'mydevenvironment', 
                    python = openapi_client.models.model_python_section.ModelPythonSection(
                        base_conda_environment = '', 
                        conda_dependencies = openapi_client.models.conda_dependencies.condaDependencies(), 
                        interpreter_path = '', 
                        user_managed_dependencies = True, ), 
                    spark = openapi_client.models.model_spark_section.ModelSparkSection(
                        packages = [
                            openapi_client.models.spark_maven_package.SparkMavenPackage(
                                artifact = '', 
                                group = '', 
                                version = '', )
                            ], 
                        precache_packages = True, 
                        repositories = [
                            ''
                            ], ), 
                    version = '1', ),
                model_ids = [mymodel:1, mymodel:2]
            )
        else:
            return EnvironmentImageRequest(
        )
        """

    def testEnvironmentImageRequest(self):
        """Test EnvironmentImageRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Azure Machine Learning Model Management Service

    These APIs allow end users to manage Azure Machine Learning Models, Images, Profiles, and Services.

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.aks_service_response import AKSServiceResponse

class TestAKSServiceResponse(unittest.TestCase):
    """AKSServiceResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AKSServiceResponse:
        """Test AKSServiceResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AKSServiceResponse`
        """
        model = AKSServiceResponse()
        if include_optional:
            return AKSServiceResponse(
                aad_auth_enabled = True,
                app_insights_enabled = True,
                auth_enabled = True,
                auto_scaler = openapi_client.models.auto_scaler.AutoScaler(
                    autoscale_enabled = True, 
                    max_replicas = 3, 
                    min_replicas = 1, 
                    refresh_period_in_seconds = 120, 
                    target_utilization = 70, ),
                compute_name = '',
                container_resource_requirements = openapi_client.models.container_resource_requirements.ContainerResourceRequirements(
                    cpu = 4.0, 
                    fpga = 56, 
                    gpu = 56, 
                    memory_in_gb = 64.0, ),
                data_collection = openapi_client.models.model_data_collection.ModelDataCollection(
                    event_hub_enabled = True, 
                    storage_enabled = True, ),
                deployment_status = openapi_client.models.aks_replica_status.AKSReplicaStatus(
                    available_replicas = 1, 
                    desired_replicas = 2, 
                    error = openapi_client.models.model_error_response.ModelErrorResponse(
                        code = '', 
                        details = [
                            openapi_client.models.error_details.ErrorDetails(
                                code = '', 
                                message = '', 
                                target = '', )
                            ], 
                        message = '', 
                        status_code = 56, ), 
                    updated_replicas = 1, ),
                environment = openapi_client.models.model_environment_definition.ModelEnvironmentDefinition(
                    docker = openapi_client.models.model_docker_section.ModelDockerSection(
                        arguments = [
                            ''
                            ], 
                        base_dockerfile = 'FROM ubuntu:latest
RUN echo "Hello world!"', 
                        base_image = 'ubuntu:latest', 
                        base_image_registry = openapi_client.models.container_registry.ContainerRegistry(
                            address = '', 
                            password = '', 
                            username = '', ), 
                        enabled = True, 
                        gpu_support = False, 
                        shared_volumes = True, 
                        shm_size = '1g', ), 
                    environment_variables = {
                        'key' : ''
                        }, 
                    inferencing_stack_version = 'latest', 
                    name = 'mydevenvironment', 
                    python = openapi_client.models.model_python_section.ModelPythonSection(
                        base_conda_environment = '', 
                        conda_dependencies = openapi_client.models.conda_dependencies.condaDependencies(), 
                        interpreter_path = '', 
                        user_managed_dependencies = True, ), 
                    spark = openapi_client.models.model_spark_section.ModelSparkSection(
                        packages = [
                            openapi_client.models.spark_maven_package.SparkMavenPackage(
                                artifact = '', 
                                group = '', 
                                version = '', )
                            ], 
                        precache_packages = True, 
                        repositories = [
                            ''
                            ], ), 
                    version = '1', ),
                image_details = openapi_client.models.image_response_base.ImageResponseBase(
                    auto_delete = True, 
                    created_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    creation_state = 'Running', 
                    description = 'My docker image.', 
                    error = openapi_client.models.model_error_response.ModelErrorResponse(
                        code = '', 
                        details = [
                            openapi_client.models.error_details.ErrorDetails(
                                code = '', 
                                message = '', 
                                target = '', )
                            ], 
                        message = '', 
                        status_code = 56, ), 
                    id = 'myimage:3', 
                    image_build_log_uri = '', 
                    image_flavor = 'WebApiContainer', 
                    image_location = '', 
                    image_type = 'Docker', 
                    kv_tags = {
                        'key' : ''
                        }, 
                    model_details = [
                        openapi_client.models.model.Model(
                            created_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            datasets = [
                                openapi_client.models.dataset_reference.DatasetReference(
                                    id = '', 
                                    name = '', )
                                ], 
                            description = 'A mnist model, first version.', 
                            experiment_name = '', 
                            framework = '', 
                            framework_version = '', 
                            id = 'sklearn_mnist:1', 
                            mime_type = '', 
                            modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = 'sklearn_mnist', 
                            parent_model_id = 'sklearn_mnist_root:1', 
                            properties = {
                                'key' : ''
                                }, 
                            run_id = '', 
                            unpack = True, 
                            url = '', 
                            version = 1, )
                        ], 
                    model_ids = [
                        ''
                        ], 
                    modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    name = 'myimage:3', 
                    operation_id = '', 
                    properties = {
                        'key' : ''
                        }, 
                    version = 3, ),
                image_id = '',
                liveness_probe_requirements = openapi_client.models.liveness_probe_requirements.LivenessProbeRequirements(
                    failure_threshold = 56, 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    timeout_seconds = 56, ),
                max_concurrent_requests_per_container = 56,
                max_queue_wait_ms = 56,
                model_config_map = {
                    'key' : None
                    },
                models = [
                    openapi_client.models.model.Model(
                        created_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        datasets = [
                            openapi_client.models.dataset_reference.DatasetReference(
                                id = '', 
                                name = '', )
                            ], 
                        description = 'A mnist model, first version.', 
                        experiment_name = '', 
                        framework = '', 
                        framework_version = '', 
                        id = 'sklearn_mnist:1', 
                        kv_tags = {
                            'key' : ''
                            }, 
                        mime_type = '', 
                        modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = 'sklearn_mnist', 
                        parent_model_id = 'sklearn_mnist_root:1', 
                        properties = {
                            'key' : ''
                            }, 
                        run_id = '', 
                        unpack = True, 
                        url = '', 
                        version = 1, )
                    ],
                namespace = '',
                num_replicas = 56,
                scoring_timeout_ms = 56,
                scoring_uri = '',
                swagger_uri = ''
            )
        else:
            return AKSServiceResponse(
        )
        """

    def testAKSServiceResponse(self):
        """Test AKSServiceResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

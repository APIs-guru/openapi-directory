# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_firewall_ip_configuration_properties_format_internal_public_ip_address import AzureFirewallIPConfigurationPropertiesFormatInternalPublicIpAddress
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class AzureFirewallIPConfigurationPropertiesFormat(BaseModel):
    """
    Properties of IP configuration of an Azure Firewall.
    """ # noqa: E501
    internal_public_ip_address: Optional[AzureFirewallIPConfigurationPropertiesFormatInternalPublicIpAddress] = Field(default=None, alias="internalPublicIpAddress")
    private_ip_address: Optional[StrictStr] = Field(default=None, description="The Firewall Internal Load Balancer IP to be used as the next hop in User Defined Routes.", alias="privateIPAddress")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    public_ip_address: Optional[AzureFirewallIPConfigurationPropertiesFormatInternalPublicIpAddress] = Field(default=None, alias="publicIPAddress")
    subnet: Optional[AzureFirewallIPConfigurationPropertiesFormatInternalPublicIpAddress] = None
    __properties: ClassVar[List[str]] = ["internalPublicIpAddress", "privateIPAddress", "provisioningState", "publicIPAddress", "subnet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureFirewallIPConfigurationPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of internal_public_ip_address
        if self.internal_public_ip_address:
            _dict['internalPublicIpAddress'] = self.internal_public_ip_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_ip_address
        if self.public_ip_address:
            _dict['publicIPAddress'] = self.public_ip_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureFirewallIPConfigurationPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "internalPublicIpAddress": AzureFirewallIPConfigurationPropertiesFormatInternalPublicIpAddress.from_dict(obj["internalPublicIpAddress"]) if obj.get("internalPublicIpAddress") is not None else None,
            "privateIPAddress": obj.get("privateIPAddress"),
            "provisioningState": obj.get("provisioningState"),
            "publicIPAddress": AzureFirewallIPConfigurationPropertiesFormatInternalPublicIpAddress.from_dict(obj["publicIPAddress"]) if obj.get("publicIPAddress") is not None else None,
            "subnet": AzureFirewallIPConfigurationPropertiesFormatInternalPublicIpAddress.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None
        })
        return _obj



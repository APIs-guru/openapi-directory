# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_firewall_application_rule_collection import AzureFirewallApplicationRuleCollection
from openapi_client.models.azure_firewall_ip_configuration import AzureFirewallIPConfiguration
from openapi_client.models.azure_firewall_ip_configuration_properties_format_public_ip_address import AzureFirewallIPConfigurationPropertiesFormatPublicIPAddress
from openapi_client.models.azure_firewall_nat_rule_collection import AzureFirewallNatRuleCollection
from openapi_client.models.azure_firewall_network_rule_collection import AzureFirewallNetworkRuleCollection
from openapi_client.models.azure_firewall_threat_intel_mode import AzureFirewallThreatIntelMode
from openapi_client.models.hub_ip_addresses import HubIPAddresses
from typing import Optional, Set
from typing_extensions import Self

class AzureFirewallPropertiesFormat(BaseModel):
    """
    Properties of the Azure Firewall.
    """ # noqa: E501
    application_rule_collections: Optional[List[AzureFirewallApplicationRuleCollection]] = Field(default=None, description="Collection of application rule collections used by Azure Firewall.", alias="applicationRuleCollections")
    firewall_policy: Optional[AzureFirewallIPConfigurationPropertiesFormatPublicIPAddress] = Field(default=None, alias="firewallPolicy")
    hub_ip_addresses: Optional[HubIPAddresses] = Field(default=None, alias="hubIpAddresses")
    ip_configurations: Optional[List[AzureFirewallIPConfiguration]] = Field(default=None, description="IP configuration of the Azure Firewall resource.", alias="ipConfigurations")
    nat_rule_collections: Optional[List[AzureFirewallNatRuleCollection]] = Field(default=None, description="Collection of NAT rule collections used by Azure Firewall.", alias="natRuleCollections")
    network_rule_collections: Optional[List[AzureFirewallNetworkRuleCollection]] = Field(default=None, description="Collection of network rule collections used by Azure Firewall.", alias="networkRuleCollections")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    threat_intel_mode: Optional[AzureFirewallThreatIntelMode] = Field(default=None, alias="threatIntelMode")
    virtual_hub: Optional[AzureFirewallIPConfigurationPropertiesFormatPublicIPAddress] = Field(default=None, alias="virtualHub")
    __properties: ClassVar[List[str]] = ["applicationRuleCollections", "firewallPolicy", "hubIpAddresses", "ipConfigurations", "natRuleCollections", "networkRuleCollections", "provisioningState", "threatIntelMode", "virtualHub"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureFirewallPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_rule_collections (list)
        _items = []
        if self.application_rule_collections:
            for _item_application_rule_collections in self.application_rule_collections:
                if _item_application_rule_collections:
                    _items.append(_item_application_rule_collections.to_dict())
            _dict['applicationRuleCollections'] = _items
        # override the default output from pydantic by calling `to_dict()` of firewall_policy
        if self.firewall_policy:
            _dict['firewallPolicy'] = self.firewall_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hub_ip_addresses
        if self.hub_ip_addresses:
            _dict['hubIpAddresses'] = self.hub_ip_addresses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ip_configurations (list)
        _items = []
        if self.ip_configurations:
            for _item_ip_configurations in self.ip_configurations:
                if _item_ip_configurations:
                    _items.append(_item_ip_configurations.to_dict())
            _dict['ipConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nat_rule_collections (list)
        _items = []
        if self.nat_rule_collections:
            for _item_nat_rule_collections in self.nat_rule_collections:
                if _item_nat_rule_collections:
                    _items.append(_item_nat_rule_collections.to_dict())
            _dict['natRuleCollections'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_rule_collections (list)
        _items = []
        if self.network_rule_collections:
            for _item_network_rule_collections in self.network_rule_collections:
                if _item_network_rule_collections:
                    _items.append(_item_network_rule_collections.to_dict())
            _dict['networkRuleCollections'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_hub
        if self.virtual_hub:
            _dict['virtualHub'] = self.virtual_hub.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureFirewallPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationRuleCollections": [AzureFirewallApplicationRuleCollection.from_dict(_item) for _item in obj["applicationRuleCollections"]] if obj.get("applicationRuleCollections") is not None else None,
            "firewallPolicy": AzureFirewallIPConfigurationPropertiesFormatPublicIPAddress.from_dict(obj["firewallPolicy"]) if obj.get("firewallPolicy") is not None else None,
            "hubIpAddresses": HubIPAddresses.from_dict(obj["hubIpAddresses"]) if obj.get("hubIpAddresses") is not None else None,
            "ipConfigurations": [AzureFirewallIPConfiguration.from_dict(_item) for _item in obj["ipConfigurations"]] if obj.get("ipConfigurations") is not None else None,
            "natRuleCollections": [AzureFirewallNatRuleCollection.from_dict(_item) for _item in obj["natRuleCollections"]] if obj.get("natRuleCollections") is not None else None,
            "networkRuleCollections": [AzureFirewallNetworkRuleCollection.from_dict(_item) for _item in obj["networkRuleCollections"]] if obj.get("networkRuleCollections") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "threatIntelMode": obj.get("threatIntelMode"),
            "virtualHub": AzureFirewallIPConfigurationPropertiesFormatPublicIPAddress.from_dict(obj["virtualHub"]) if obj.get("virtualHub") is not None else None
        })
        return _obj



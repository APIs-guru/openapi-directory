# coding: utf-8

"""
    BlueprintClient

    Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assignment_deployment_job_result import AssignmentDeploymentJobResult
from typing import Optional, Set
from typing_extensions import Self

class AssignmentDeploymentJob(BaseModel):
    """
    Represents individual job in given blueprint assignment operation.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Name of the action performed in this job.")
    history: Optional[List[AssignmentDeploymentJobResult]] = Field(default=None, description="Result of this deployment job for each retry.")
    job_id: Optional[StrictStr] = Field(default=None, description="Id of this job.", alias="jobId")
    job_state: Optional[StrictStr] = Field(default=None, description="State of this job.", alias="jobState")
    kind: Optional[StrictStr] = Field(default=None, description="Kind of job.")
    request_uri: Optional[StrictStr] = Field(default=None, description="Reference to deployment job resource id.", alias="requestUri")
    result: Optional[AssignmentDeploymentJobResult] = None
    __properties: ClassVar[List[str]] = ["action", "history", "jobId", "jobState", "kind", "requestUri", "result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssignmentDeploymentJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in history (list)
        _items = []
        if self.history:
            for _item_history in self.history:
                if _item_history:
                    _items.append(_item_history.to_dict())
            _dict['history'] = _items
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssignmentDeploymentJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "history": [AssignmentDeploymentJobResult.from_dict(_item) for _item in obj["history"]] if obj.get("history") is not None else None,
            "jobId": obj.get("jobId"),
            "jobState": obj.get("jobState"),
            "kind": obj.get("kind"),
            "requestUri": obj.get("requestUri"),
            "result": AssignmentDeploymentJobResult.from_dict(obj["result"]) if obj.get("result") is not None else None
        })
        return _obj



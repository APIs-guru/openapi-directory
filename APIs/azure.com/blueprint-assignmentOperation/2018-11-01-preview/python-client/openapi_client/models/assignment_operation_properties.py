# coding: utf-8

"""
    BlueprintClient

    Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assignment_deployment_job import AssignmentDeploymentJob
from typing import Optional, Set
from typing_extensions import Self

class AssignmentOperationProperties(BaseModel):
    """
    Properties of AssignmentOperation.
    """ # noqa: E501
    assignment_state: Optional[StrictStr] = Field(default=None, description="State of this blueprint assignment operation.", alias="assignmentState")
    blueprint_version: Optional[StrictStr] = Field(default=None, description="The published version of the blueprint definition used for the blueprint assignment operation.", alias="blueprintVersion")
    deployments: Optional[List[AssignmentDeploymentJob]] = Field(default=None, description="List of jobs in this blueprint assignment operation.")
    time_created: Optional[StrictStr] = Field(default=None, description="Create time of this blueprint assignment operation.", alias="timeCreated")
    time_finished: Optional[StrictStr] = Field(default=None, description="Finish time of the overall underlying deployments.", alias="timeFinished")
    time_started: Optional[StrictStr] = Field(default=None, description="Start time of the underlying deployment.", alias="timeStarted")
    __properties: ClassVar[List[str]] = ["assignmentState", "blueprintVersion", "deployments", "timeCreated", "timeFinished", "timeStarted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssignmentOperationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployments (list)
        _items = []
        if self.deployments:
            for _item_deployments in self.deployments:
                if _item_deployments:
                    _items.append(_item_deployments.to_dict())
            _dict['deployments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssignmentOperationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignmentState": obj.get("assignmentState"),
            "blueprintVersion": obj.get("blueprintVersion"),
            "deployments": [AssignmentDeploymentJob.from_dict(_item) for _item in obj["deployments"]] if obj.get("deployments") is not None else None,
            "timeCreated": obj.get("timeCreated"),
            "timeFinished": obj.get("timeFinished"),
            "timeStarted": obj.get("timeStarted")
        })
        return _obj



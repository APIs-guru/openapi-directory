# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.h264_layer import H264Layer
from openapi_client.models.video import Video
from typing import Optional, Set
from typing_extensions import Self

class H264Video(Video):
    """
    Describes all the properties for encoding a video with the H.264 codec.
    """ # noqa: E501
    complexity: Optional[StrictStr] = Field(default=None, description="Tells the encoder how to choose its encoding settings. The default value is Balanced.")
    layers: Optional[List[H264Layer]] = Field(default=None, description="The collection of output H.264 layers to be produced by the encoder.")
    scene_change_detection: Optional[StrictBool] = Field(default=None, description="Whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video.", alias="sceneChangeDetection")
    __properties: ClassVar[List[str]] = ["keyFrameInterval", "stretchMode", "@odata.type", "label"]

    @field_validator('complexity')
    def complexity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Speed', 'Balanced', 'Quality']):
            raise ValueError("must be one of enum values ('Speed', 'Balanced', 'Quality')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of H264Video from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of H264Video from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyFrameInterval": obj.get("keyFrameInterval"),
            "stretchMode": obj.get("stretchMode"),
            "@odata.type": obj.get("@odata.type"),
            "label": obj.get("label")
        })
        return _obj



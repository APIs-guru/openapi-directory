# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-03-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_error_detail import JobErrorDetail
from typing import Optional, Set
from typing_extensions import Self

class JobError(BaseModel):
    """
    Details of JobOutput errors.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="Helps with categorization of errors.")
    code: Optional[StrictStr] = Field(default=None, description="Error code describing the error.")
    details: Optional[List[JobErrorDetail]] = Field(default=None, description="An array of details about specific errors that led to this reported error.")
    message: Optional[StrictStr] = Field(default=None, description="A human-readable language-dependent representation of the error.")
    retry: Optional[StrictStr] = Field(default=None, description="Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.")
    __properties: ClassVar[List[str]] = ["category", "code", "details", "message", "retry"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Service', 'Download', 'Upload', 'Configuration', 'Content']):
            raise ValueError("must be one of enum values ('Service', 'Download', 'Upload', 'Configuration', 'Content')")
        return value

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ServiceError', 'ServiceTransientError', 'DownloadNotAccessible', 'DownloadTransientError', 'UploadNotAccessible', 'UploadTransientError', 'ConfigurationUnsupported', 'ContentMalformed', 'ContentUnsupported']):
            raise ValueError("must be one of enum values ('ServiceError', 'ServiceTransientError', 'DownloadNotAccessible', 'DownloadTransientError', 'UploadNotAccessible', 'UploadTransientError', 'ConfigurationUnsupported', 'ContentMalformed', 'ContentUnsupported')")
        return value

    @field_validator('retry')
    def retry_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DoNotRetry', 'MayRetry']):
            raise ValueError("must be one of enum values ('DoNotRetry', 'MayRetry')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "category",
            "code",
            "details",
            "message",
            "retry",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item_details in self.details:
                if _item_details:
                    _items.append(_item_details.to_dict())
            _dict['details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "code": obj.get("code"),
            "details": [JobErrorDetail.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None,
            "message": obj.get("message"),
            "retry": obj.get("retry")
        })
        return _obj



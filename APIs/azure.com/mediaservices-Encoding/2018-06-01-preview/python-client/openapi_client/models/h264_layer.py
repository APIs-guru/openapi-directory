# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.video_layer import VideoLayer
from typing import Optional, Set
from typing_extensions import Self

class H264Layer(VideoLayer):
    """
    Describes the settings to be used when encoding the input video into a desired output bitrate layer with the H.264 video codec.
    """ # noqa: E501
    buffer_window: Optional[StrictStr] = Field(default=None, description="The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S).", alias="bufferWindow")
    entropy_mode: Optional[StrictStr] = Field(default=None, description="The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.", alias="entropyMode")
    level: Optional[StrictStr] = Field(default=None, description="Which level of the H.264 standard should be used when encoding this layer. The value can be Auto, or a number that matches the H.264 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.")
    profile: Optional[StrictStr] = Field(default=None, description="Which profile of the H.264 standard should be used when encoding this layer. Default is Auto.")
    reference_frames: Optional[StrictInt] = Field(default=None, description="The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.", alias="referenceFrames")
    __properties: ClassVar[List[str]] = ["adaptiveBFrame", "bFrames", "bitrate", "frameRate", "maxBitrate", "slices", "@odata.type", "height", "label", "width"]

    @field_validator('entropy_mode')
    def entropy_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Cabac', 'Cavlc']):
            raise ValueError("must be one of enum values ('Cabac', 'Cavlc')")
        return value

    @field_validator('profile')
    def profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Auto', 'Baseline', 'Main', 'High', 'High422', 'High444']):
            raise ValueError("must be one of enum values ('Auto', 'Baseline', 'Main', 'High', 'High422', 'High444')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of H264Layer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of H264Layer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adaptiveBFrame": obj.get("adaptiveBFrame"),
            "bFrames": obj.get("bFrames"),
            "bitrate": obj.get("bitrate"),
            "frameRate": obj.get("frameRate"),
            "maxBitrate": obj.get("maxBitrate"),
            "slices": obj.get("slices"),
            "@odata.type": obj.get("@odata.type"),
            "height": obj.get("height"),
            "label": obj.get("label"),
            "width": obj.get("width")
        })
        return _obj



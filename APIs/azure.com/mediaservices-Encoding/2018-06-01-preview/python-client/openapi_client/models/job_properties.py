# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_input import JobInput
from openapi_client.models.job_output import JobOutput
from typing import Optional, Set
from typing_extensions import Self

class JobProperties(BaseModel):
    """
    Properties of the Job.
    """ # noqa: E501
    correlation_data: Optional[Dict[str, StrictStr]] = Field(default=None, description="Customer provided correlation data that will be returned in Job completed events.", alias="correlationData")
    created: Optional[datetime] = Field(default=None, description="The UTC date and time when the Job was created, in 'YYYY-MM-DDThh:mm:ssZ' format.")
    description: Optional[StrictStr] = Field(default=None, description="Optional customer supplied description of the Job.")
    input: JobInput
    last_modified: Optional[datetime] = Field(default=None, description="The UTC date and time when the Job was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.", alias="lastModified")
    outputs: List[JobOutput] = Field(description="The outputs for the Job.")
    priority: Optional[StrictStr] = Field(default=None, description="Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.")
    state: Optional[StrictStr] = Field(default=None, description="The current state of the job.")
    __properties: ClassVar[List[str]] = ["correlationData", "created", "description", "input", "lastModified", "outputs", "priority", "state"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Low', 'Normal', 'High']):
            raise ValueError("must be one of enum values ('Low', 'Normal', 'High')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled']):
            raise ValueError("must be one of enum values ('Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "last_modified",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "correlationData": obj.get("correlationData"),
            "created": obj.get("created"),
            "description": obj.get("description"),
            "input": JobInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "lastModified": obj.get("lastModified"),
            "outputs": [JobOutput.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "priority": obj.get("priority"),
            "state": obj.get("state")
        })
        return _obj



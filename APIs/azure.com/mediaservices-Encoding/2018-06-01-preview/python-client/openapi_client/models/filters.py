# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deinterlace import Deinterlace
from openapi_client.models.overlay import Overlay
from openapi_client.models.rectangle import Rectangle
from typing import Optional, Set
from typing_extensions import Self

class Filters(BaseModel):
    """
    Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
    """ # noqa: E501
    crop: Optional[Rectangle] = None
    deinterlace: Optional[Deinterlace] = None
    overlays: Optional[List[Overlay]] = Field(default=None, description="The properties of overlays to be applied to the input video. These could be audio, image or video overlays.")
    rotation: Optional[StrictStr] = Field(default=None, description="The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto")
    __properties: ClassVar[List[str]] = ["crop", "deinterlace", "overlays", "rotation"]

    @field_validator('rotation')
    def rotation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Auto', 'None', 'Rotate0', 'Rotate90', 'Rotate180', 'Rotate270']):
            raise ValueError("must be one of enum values ('Auto', 'None', 'Rotate0', 'Rotate90', 'Rotate180', 'Rotate270')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Filters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crop
        if self.crop:
            _dict['crop'] = self.crop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deinterlace
        if self.deinterlace:
            _dict['deinterlace'] = self.deinterlace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in overlays (list)
        _items = []
        if self.overlays:
            for _item_overlays in self.overlays:
                if _item_overlays:
                    _items.append(_item_overlays.to_dict())
            _dict['overlays'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Filters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crop": Rectangle.from_dict(obj["crop"]) if obj.get("crop") is not None else None,
            "deinterlace": Deinterlace.from_dict(obj["deinterlace"]) if obj.get("deinterlace") is not None else None,
            "overlays": [Overlay.from_dict(_item) for _item in obj["overlays"]] if obj.get("overlays") is not None else None,
            "rotation": obj.get("rotation")
        })
        return _obj



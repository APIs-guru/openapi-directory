# coding: utf-8

"""
    LUIS Programmatic

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.closed_list import ClosedList
from openapi_client.models.hierarchical_model import HierarchicalModel
from openapi_client.models.json_model_feature import JSONModelFeature
from openapi_client.models.json_regex_feature import JSONRegexFeature
from openapi_client.models.json_utterance import JSONUtterance
from typing import Optional, Set
from typing_extensions import Self

class LuisApp(BaseModel):
    """
    Exported Model - An exported LUIS Application.
    """ # noqa: E501
    bing_entities: Optional[List[StrictStr]] = Field(default=None, description="List of prebuilt intents.")
    closed_lists: Optional[List[ClosedList]] = Field(default=None, description="List of closed lists.", alias="closedLists")
    composites: Optional[List[HierarchicalModel]] = Field(default=None, description="List of composite entities.")
    culture: Optional[StrictStr] = Field(default=None, description="The culture of the application. E.g.: en-us.")
    desc: Optional[StrictStr] = Field(default=None, description="The description of the application.")
    entities: Optional[List[HierarchicalModel]] = Field(default=None, description="List of entities.")
    intents: Optional[List[HierarchicalModel]] = Field(default=None, description="List of intents.")
    model_features: Optional[List[JSONModelFeature]] = Field(default=None, description="List of model features.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the application.")
    regex_features: Optional[List[JSONRegexFeature]] = Field(default=None, description="List of pattern features.")
    utterances: Optional[List[JSONUtterance]] = Field(default=None, description="List of sample utterances.")
    version_id: Optional[StrictStr] = Field(default=None, description="The version ID of the application that was exported.", alias="versionId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["bing_entities", "closedLists", "composites", "culture", "desc", "entities", "intents", "model_features", "name", "regex_features", "utterances", "versionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LuisApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in closed_lists (list)
        _items = []
        if self.closed_lists:
            for _item_closed_lists in self.closed_lists:
                if _item_closed_lists:
                    _items.append(_item_closed_lists.to_dict())
            _dict['closedLists'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in composites (list)
        _items = []
        if self.composites:
            for _item_composites in self.composites:
                if _item_composites:
                    _items.append(_item_composites.to_dict())
            _dict['composites'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in intents (list)
        _items = []
        if self.intents:
            for _item_intents in self.intents:
                if _item_intents:
                    _items.append(_item_intents.to_dict())
            _dict['intents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in model_features (list)
        _items = []
        if self.model_features:
            for _item_model_features in self.model_features:
                if _item_model_features:
                    _items.append(_item_model_features.to_dict())
            _dict['model_features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in regex_features (list)
        _items = []
        if self.regex_features:
            for _item_regex_features in self.regex_features:
                if _item_regex_features:
                    _items.append(_item_regex_features.to_dict())
            _dict['regex_features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in utterances (list)
        _items = []
        if self.utterances:
            for _item_utterances in self.utterances:
                if _item_utterances:
                    _items.append(_item_utterances.to_dict())
            _dict['utterances'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LuisApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bing_entities": obj.get("bing_entities"),
            "closedLists": [ClosedList.from_dict(_item) for _item in obj["closedLists"]] if obj.get("closedLists") is not None else None,
            "composites": [HierarchicalModel.from_dict(_item) for _item in obj["composites"]] if obj.get("composites") is not None else None,
            "culture": obj.get("culture"),
            "desc": obj.get("desc"),
            "entities": [HierarchicalModel.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "intents": [HierarchicalModel.from_dict(_item) for _item in obj["intents"]] if obj.get("intents") is not None else None,
            "model_features": [JSONModelFeature.from_dict(_item) for _item in obj["model_features"]] if obj.get("model_features") is not None else None,
            "name": obj.get("name"),
            "regex_features": [JSONRegexFeature.from_dict(_item) for _item in obj["regex_features"]] if obj.get("regex_features") is not None else None,
            "utterances": [JSONUtterance.from_dict(_item) for _item in obj["utterances"]] if obj.get("utterances") is not None else None,
            "versionId": obj.get("versionId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



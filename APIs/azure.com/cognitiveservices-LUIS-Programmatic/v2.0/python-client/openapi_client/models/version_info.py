# coding: utf-8

"""
    LUIS Programmatic

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VersionInfo(BaseModel):
    """
    Object model of an application version.
    """ # noqa: E501
    assigned_endpoint_key: Optional[Dict[str, StrictStr]] = Field(default=None, description="The endpoint key.", alias="assignedEndpointKey")
    created_date_time: Optional[datetime] = Field(default=None, description="The version's creation timestamp.", alias="createdDateTime")
    endpoint_hits_count: Optional[StrictInt] = Field(default=None, description="Number of calls made to this endpoint.", alias="endpointHitsCount")
    endpoint_url: Optional[StrictStr] = Field(default=None, description="The Runtime endpoint URL for this model version.", alias="endpointUrl")
    entities_count: Optional[StrictInt] = Field(default=None, description="Number of entities in this model.", alias="entitiesCount")
    external_api_keys: Optional[Dict[str, Any]] = Field(default=None, description="External keys.", alias="externalApiKeys")
    intents_count: Optional[StrictInt] = Field(default=None, description="Number of intents in this model.", alias="intentsCount")
    last_modified_date_time: Optional[datetime] = Field(default=None, description="Timestamp of the last update.", alias="lastModifiedDateTime")
    last_published_date_time: Optional[datetime] = Field(default=None, description="Timestamp when was last published.", alias="lastPublishedDateTime")
    last_trained_date_time: Optional[datetime] = Field(default=None, description="Timestamp of the last time the model was trained.", alias="lastTrainedDateTime")
    training_status: StrictStr = Field(description="The current training status.", alias="trainingStatus")
    version: StrictStr = Field(description="The version ID. E.g.: \"0.1\"")
    __properties: ClassVar[List[str]] = ["assignedEndpointKey", "createdDateTime", "endpointHitsCount", "endpointUrl", "entitiesCount", "externalApiKeys", "intentsCount", "lastModifiedDateTime", "lastPublishedDateTime", "lastTrainedDateTime", "trainingStatus", "version"]

    @field_validator('training_status')
    def training_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NeedsTraining', 'InProgress', 'Trained']):
            raise ValueError("must be one of enum values ('NeedsTraining', 'InProgress', 'Trained')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VersionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignedEndpointKey": obj.get("assignedEndpointKey"),
            "createdDateTime": obj.get("createdDateTime"),
            "endpointHitsCount": obj.get("endpointHitsCount"),
            "endpointUrl": obj.get("endpointUrl"),
            "entitiesCount": obj.get("entitiesCount"),
            "externalApiKeys": obj.get("externalApiKeys"),
            "intentsCount": obj.get("intentsCount"),
            "lastModifiedDateTime": obj.get("lastModifiedDateTime"),
            "lastPublishedDateTime": obj.get("lastPublishedDateTime"),
            "lastTrainedDateTime": obj.get("lastTrainedDateTime"),
            "trainingStatus": obj.get("trainingStatus"),
            "version": obj.get("version")
        })
        return _obj



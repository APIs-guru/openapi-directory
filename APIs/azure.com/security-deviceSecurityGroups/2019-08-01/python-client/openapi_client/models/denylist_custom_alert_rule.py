# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DenylistCustomAlertRule(BaseModel):
    """
    A custom alert rule that checks if a value (depends on the custom alert type) is denied.
    """ # noqa: E501
    denylist_values: List[StrictStr] = Field(description="The values to deny. The format of the values depends on the rule type.", alias="denylistValues")
    value_type: Optional[StrictStr] = Field(default=None, description="The value type of the items in the list.", alias="valueType")
    description: Optional[StrictStr] = Field(default=None, description="The description of the custom alert.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the custom alert.", alias="displayName")
    is_enabled: StrictBool = Field(description="Status of the custom alert.", alias="isEnabled")
    rule_type: StrictStr = Field(description="The type of the custom alert rule.", alias="ruleType")
    __properties: ClassVar[List[str]] = ["valueType", "description", "displayName", "isEnabled", "ruleType"]

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IpCidr', 'String']):
            raise ValueError("must be one of enum values ('IpCidr', 'String')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DenylistCustomAlertRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "value_type",
            "description",
            "display_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DenylistCustomAlertRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "valueType": obj.get("valueType"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "isEnabled": obj.get("isEnabled"),
            "ruleType": obj.get("ruleType")
        })
        return _obj



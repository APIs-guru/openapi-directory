# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2017-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.allowlist_custom_alert_rule import AllowlistCustomAlertRule
from openapi_client.models.denylist_custom_alert_rule import DenylistCustomAlertRule
from openapi_client.models.threshold_custom_alert_rule import ThresholdCustomAlertRule
from openapi_client.models.time_window_custom_alert_rule import TimeWindowCustomAlertRule
from typing import Optional, Set
from typing_extensions import Self

class DeviceSecurityGroupProperties(BaseModel):
    """
    describes properties of a security group.
    """ # noqa: E501
    allowlist_rules: Optional[List[AllowlistCustomAlertRule]] = Field(default=None, description="A list of allow-list custom alert rules.", alias="allowlistRules")
    denylist_rules: Optional[List[DenylistCustomAlertRule]] = Field(default=None, description="A list of deny-list custom alert rules.", alias="denylistRules")
    threshold_rules: Optional[List[ThresholdCustomAlertRule]] = Field(default=None, description="A list of threshold custom alert rules.", alias="thresholdRules")
    time_window_rules: Optional[List[TimeWindowCustomAlertRule]] = Field(default=None, description="A list of time window custom alert rules.", alias="timeWindowRules")
    __properties: ClassVar[List[str]] = ["allowlistRules", "denylistRules", "thresholdRules", "timeWindowRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceSecurityGroupProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowlist_rules (list)
        _items = []
        if self.allowlist_rules:
            for _item_allowlist_rules in self.allowlist_rules:
                if _item_allowlist_rules:
                    _items.append(_item_allowlist_rules.to_dict())
            _dict['allowlistRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in denylist_rules (list)
        _items = []
        if self.denylist_rules:
            for _item_denylist_rules in self.denylist_rules:
                if _item_denylist_rules:
                    _items.append(_item_denylist_rules.to_dict())
            _dict['denylistRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in threshold_rules (list)
        _items = []
        if self.threshold_rules:
            for _item_threshold_rules in self.threshold_rules:
                if _item_threshold_rules:
                    _items.append(_item_threshold_rules.to_dict())
            _dict['thresholdRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in time_window_rules (list)
        _items = []
        if self.time_window_rules:
            for _item_time_window_rules in self.time_window_rules:
                if _item_time_window_rules:
                    _items.append(_item_time_window_rules.to_dict())
            _dict['timeWindowRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceSecurityGroupProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowlistRules": [AllowlistCustomAlertRule.from_dict(_item) for _item in obj["allowlistRules"]] if obj.get("allowlistRules") is not None else None,
            "denylistRules": [DenylistCustomAlertRule.from_dict(_item) for _item in obj["denylistRules"]] if obj.get("denylistRules") is not None else None,
            "thresholdRules": [ThresholdCustomAlertRule.from_dict(_item) for _item in obj["thresholdRules"]] if obj.get("thresholdRules") is not None else None,
            "timeWindowRules": [TimeWindowCustomAlertRule.from_dict(_item) for _item in obj["timeWindowRules"]] if obj.get("timeWindowRules") is not None else None
        })
        return _obj



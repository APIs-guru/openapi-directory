# coding: utf-8

"""
    WebApplicationFirewallManagement

    APIs to manage web application firewall rules.

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PolicySettings(BaseModel):
    """
    Defines top-level WebApplicationFirewallPolicy configuration settings.
    """ # noqa: E501
    custom_block_response_body: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="If the action type is block, customer can override the response body. The body must be specified in base64 encoding.", alias="customBlockResponseBody")
    custom_block_response_status_code: Optional[StrictInt] = Field(default=None, description="If the action type is block, customer can override the response status code.", alias="customBlockResponseStatusCode")
    enabled_state: Optional[StrictStr] = Field(default=None, description="Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.", alias="enabledState")
    mode: Optional[StrictStr] = Field(default=None, description="Describes if it is in detection mode or prevention mode at policy level.")
    redirect_url: Optional[StrictStr] = Field(default=None, description="If action type is redirect, this field represents redirect URL for the client.", alias="redirectUrl")
    __properties: ClassVar[List[str]] = ["customBlockResponseBody", "customBlockResponseStatusCode", "enabledState", "mode", "redirectUrl"]

    @field_validator('custom_block_response_body')
    def custom_block_response_body_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$/")
        return value

    @field_validator('enabled_state')
    def enabled_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Disabled', 'Enabled']):
            raise ValueError("must be one of enum values ('Disabled', 'Enabled')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Prevention', 'Detection']):
            raise ValueError("must be one of enum values ('Prevention', 'Detection')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicySettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicySettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customBlockResponseBody": obj.get("customBlockResponseBody"),
            "customBlockResponseStatusCode": obj.get("customBlockResponseStatusCode"),
            "enabledState": obj.get("enabledState"),
            "mode": obj.get("mode"),
            "redirectUrl": obj.get("redirectUrl")
        })
        return _obj



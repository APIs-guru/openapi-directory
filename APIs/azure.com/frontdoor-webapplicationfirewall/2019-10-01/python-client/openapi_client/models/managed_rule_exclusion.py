# coding: utf-8

"""
    WebApplicationFirewallManagement

    APIs to manage web application firewall rules.

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ManagedRuleExclusion(BaseModel):
    """
    Exclude variables from managed rule evaluation.
    """ # noqa: E501
    match_variable: StrictStr = Field(description="The variable type to be excluded.", alias="matchVariable")
    selector: StrictStr = Field(description="Selector value for which elements in the collection this exclusion applies to.")
    selector_match_operator: StrictStr = Field(description="Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.", alias="selectorMatchOperator")
    __properties: ClassVar[List[str]] = ["matchVariable", "selector", "selectorMatchOperator"]

    @field_validator('match_variable')
    def match_variable_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['RequestHeaderNames', 'RequestCookieNames', 'QueryStringArgNames', 'RequestBodyPostArgNames']):
            raise ValueError("must be one of enum values ('RequestHeaderNames', 'RequestCookieNames', 'QueryStringArgNames', 'RequestBodyPostArgNames')")
        return value

    @field_validator('selector_match_operator')
    def selector_match_operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Equals', 'Contains', 'StartsWith', 'EndsWith', 'EqualsAny']):
            raise ValueError("must be one of enum values ('Equals', 'Contains', 'StartsWith', 'EndsWith', 'EqualsAny')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedRuleExclusion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedRuleExclusion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "matchVariable": obj.get("matchVariable"),
            "selector": obj.get("selector"),
            "selectorMatchOperator": obj.get("selectorMatchOperator")
        })
        return _obj



# coding: utf-8

"""
    WebApplicationFirewallManagement

    APIs to manage web application firewall rules

    The version of the OpenAPI document: 2018-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.match_condition import MatchCondition
from openapi_client.models.transform import Transform
from typing import Optional, Set
from typing_extensions import Self

class CustomRule(BaseModel):
    """
    Defines contents of a web application rule
    """ # noqa: E501
    action: StrictStr = Field(description="Type of Actions")
    etag: Optional[StrictStr] = Field(default=None, description="Gets a unique read-only string that changes whenever the resource is updated.")
    match_conditions: List[MatchCondition] = Field(description="List of match conditions", alias="matchConditions")
    name: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Gets name of the resource that is unique within a policy. This name can be used to access the resource.")
    priority: StrictInt = Field(description="Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value")
    rate_limit_duration_in_minutes: Optional[StrictInt] = Field(default=None, description="Defines rate limit duration. Default - 1 minute", alias="rateLimitDurationInMinutes")
    rate_limit_threshold: Optional[StrictInt] = Field(default=None, description="Defines rate limit threshold", alias="rateLimitThreshold")
    rule_type: StrictStr = Field(description="Describes type of rule", alias="ruleType")
    transforms: Optional[List[Transform]] = Field(default=None, description="List of transforms")
    __properties: ClassVar[List[str]] = ["action", "etag", "matchConditions", "name", "priority", "rateLimitDurationInMinutes", "rateLimitThreshold", "ruleType", "transforms"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Allow', 'Block', 'Log']):
            raise ValueError("must be one of enum values ('Allow', 'Block', 'Log')")
        return value

    @field_validator('rule_type')
    def rule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MatchRule', 'RateLimitRule']):
            raise ValueError("must be one of enum values ('MatchRule', 'RateLimitRule')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "etag",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in match_conditions (list)
        _items = []
        if self.match_conditions:
            for _item_match_conditions in self.match_conditions:
                if _item_match_conditions:
                    _items.append(_item_match_conditions.to_dict())
            _dict['matchConditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "etag": obj.get("etag"),
            "matchConditions": [MatchCondition.from_dict(_item) for _item in obj["matchConditions"]] if obj.get("matchConditions") is not None else None,
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "rateLimitDurationInMinutes": obj.get("rateLimitDurationInMinutes"),
            "rateLimitThreshold": obj.get("rateLimitThreshold"),
            "ruleType": obj.get("ruleType"),
            "transforms": obj.get("transforms")
        })
        return _obj



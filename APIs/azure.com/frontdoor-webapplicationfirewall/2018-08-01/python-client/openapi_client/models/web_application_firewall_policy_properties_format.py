# coding: utf-8

"""
    WebApplicationFirewallManagement

    APIs to manage web application firewall rules

    The version of the OpenAPI document: 2018-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_rules import CustomRules
from openapi_client.models.managed_rule_sets import ManagedRuleSets
from openapi_client.models.policy_settings import PolicySettings
from typing import Optional, Set
from typing_extensions import Self

class WebApplicationFirewallPolicyPropertiesFormat(BaseModel):
    """
    Defines web application firewall policy properties
    """ # noqa: E501
    custom_rules: Optional[CustomRules] = Field(default=None, alias="customRules")
    managed_rules: Optional[ManagedRuleSets] = Field(default=None, alias="managedRules")
    policy_settings: Optional[PolicySettings] = Field(default=None, alias="policySettings")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the WebApplicationFirewallPolicy.", alias="provisioningState")
    resource_state: Optional[StrictStr] = Field(default=None, alias="resourceState")
    __properties: ClassVar[List[str]] = ["customRules", "managedRules", "policySettings", "provisioningState", "resourceState"]

    @field_validator('resource_state')
    def resource_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting']):
            raise ValueError("must be one of enum values ('Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebApplicationFirewallPolicyPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "resource_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_rules
        if self.custom_rules:
            _dict['customRules'] = self.custom_rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of managed_rules
        if self.managed_rules:
            _dict['managedRules'] = self.managed_rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_settings
        if self.policy_settings:
            _dict['policySettings'] = self.policy_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebApplicationFirewallPolicyPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customRules": CustomRules.from_dict(obj["customRules"]) if obj.get("customRules") is not None else None,
            "managedRules": ManagedRuleSets.from_dict(obj["managedRules"]) if obj.get("managedRules") is not None else None,
            "policySettings": PolicySettings.from_dict(obj["policySettings"]) if obj.get("policySettings") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceState": obj.get("resourceState")
        })
        return _obj



# coding: utf-8

"""
    WebApplicationFirewallManagement

    APIs to manage web application firewall rules.

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action_type import ActionType
from openapi_client.models.managed_rule_enabled_state import ManagedRuleEnabledState
from typing import Optional, Set
from typing_extensions import Self

class ManagedRuleDefinition(BaseModel):
    """
    Describes a managed rule definition.
    """ # noqa: E501
    default_action: Optional[ActionType] = Field(default=None, alias="defaultAction")
    default_state: Optional[ManagedRuleEnabledState] = Field(default=None, alias="defaultState")
    description: Optional[StrictStr] = Field(default=None, description="Describes the functionality of the managed rule.")
    rule_id: Optional[StrictStr] = Field(default=None, description="Identifier for the managed rule.", alias="ruleId")
    __properties: ClassVar[List[str]] = ["defaultAction", "defaultState", "description", "ruleId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedRuleDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "rule_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedRuleDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultAction": obj.get("defaultAction"),
            "defaultState": obj.get("defaultState"),
            "description": obj.get("description"),
            "ruleId": obj.get("ruleId")
        })
        return _obj



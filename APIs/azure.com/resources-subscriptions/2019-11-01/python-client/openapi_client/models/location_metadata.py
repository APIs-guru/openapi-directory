# coding: utf-8

"""
    SubscriptionClient

    All resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.paired_region import PairedRegion
from typing import Optional, Set
from typing_extensions import Self

class LocationMetadata(BaseModel):
    """
    Location metadata information
    """ # noqa: E501
    geography_group: Optional[StrictStr] = Field(default=None, description="The geography group of the location.", alias="geographyGroup")
    latitude: Optional[StrictStr] = Field(default=None, description="The latitude of the location.")
    longitude: Optional[StrictStr] = Field(default=None, description="The longitude of the location.")
    paired_region: Optional[List[PairedRegion]] = Field(default=None, description="The regions paired to this region.", alias="pairedRegion")
    physical_location: Optional[StrictStr] = Field(default=None, description="The physical location of the Azure location.", alias="physicalLocation")
    region_category: Optional[StrictStr] = Field(default=None, description="The category of the region.", alias="regionCategory")
    region_type: Optional[StrictStr] = Field(default=None, description="The type of the region.", alias="regionType")
    __properties: ClassVar[List[str]] = ["geographyGroup", "latitude", "longitude", "pairedRegion", "physicalLocation", "regionCategory", "regionType"]

    @field_validator('region_category')
    def region_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Recommended', 'Other']):
            raise ValueError("must be one of enum values ('Recommended', 'Other')")
        return value

    @field_validator('region_type')
    def region_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Physical', 'Logical']):
            raise ValueError("must be one of enum values ('Physical', 'Logical')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "geography_group",
            "latitude",
            "longitude",
            "physical_location",
            "region_category",
            "region_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in paired_region (list)
        _items = []
        if self.paired_region:
            for _item_paired_region in self.paired_region:
                if _item_paired_region:
                    _items.append(_item_paired_region.to_dict())
            _dict['pairedRegion'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "geographyGroup": obj.get("geographyGroup"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "pairedRegion": [PairedRegion.from_dict(_item) for _item in obj["pairedRegion"]] if obj.get("pairedRegion") is not None else None,
            "physicalLocation": obj.get("physicalLocation"),
            "regionCategory": obj.get("regionCategory"),
            "regionType": obj.get("regionType")
        })
        return _obj



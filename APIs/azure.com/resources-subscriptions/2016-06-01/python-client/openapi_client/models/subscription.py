# coding: utf-8

"""
    SubscriptionClient

    All resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.subscription_policies import SubscriptionPolicies
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    Subscription information.
    """ # noqa: E501
    authorization_source: Optional[StrictStr] = Field(default=None, description="The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'.", alias="authorizationSource")
    display_name: Optional[StrictStr] = Field(default=None, description="The subscription display name.", alias="displayName")
    id: Optional[StrictStr] = Field(default=None, description="The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.")
    state: Optional[StrictStr] = Field(default=None, description="The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The subscription ID.", alias="subscriptionId")
    subscription_policies: Optional[SubscriptionPolicies] = Field(default=None, alias="subscriptionPolicies")
    __properties: ClassVar[List[str]] = ["authorizationSource", "displayName", "id", "state", "subscriptionId", "subscriptionPolicies"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Warned', 'PastDue', 'Disabled', 'Deleted']):
            raise ValueError("must be one of enum values ('Enabled', 'Warned', 'PastDue', 'Disabled', 'Deleted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
            "id",
            "state",
            "subscription_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subscription_policies
        if self.subscription_policies:
            _dict['subscriptionPolicies'] = self.subscription_policies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationSource": obj.get("authorizationSource"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "state": obj.get("state"),
            "subscriptionId": obj.get("subscriptionId"),
            "subscriptionPolicies": SubscriptionPolicies.from_dict(obj["subscriptionPolicies"]) if obj.get("subscriptionPolicies") is not None else None
        })
        return _obj



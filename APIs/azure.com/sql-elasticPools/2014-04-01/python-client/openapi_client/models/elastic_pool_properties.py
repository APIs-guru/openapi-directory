# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database elastic pools.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ElasticPoolProperties(BaseModel):
    """
    Represents the properties of an elastic pool.
    """ # noqa: E501
    creation_date: Optional[datetime] = Field(default=None, description="The creation date of the elastic pool (ISO8601 format).", alias="creationDate")
    database_dtu_max: Optional[StrictInt] = Field(default=None, description="The maximum DTU any one database can consume.", alias="databaseDtuMax")
    database_dtu_min: Optional[StrictInt] = Field(default=None, description="The minimum DTU all databases are guaranteed.", alias="databaseDtuMin")
    dtu: Optional[StrictInt] = Field(default=None, description="The total shared DTU for the database elastic pool.")
    edition: Optional[StrictStr] = Field(default=None, description="The edition of the elastic pool.")
    state: Optional[StrictStr] = Field(default=None, description="The state of the elastic pool.")
    storage_mb: Optional[StrictInt] = Field(default=None, description="Gets storage limit for the database elastic pool in MB.", alias="storageMB")
    zone_redundant: Optional[StrictBool] = Field(default=None, description="Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones.", alias="zoneRedundant")
    __properties: ClassVar[List[str]] = ["creationDate", "databaseDtuMax", "databaseDtuMin", "dtu", "edition", "state", "storageMB", "zoneRedundant"]

    @field_validator('edition')
    def edition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Basic', 'Standard', 'Premium', 'GeneralPurpose', 'BusinessCritical']):
            raise ValueError("must be one of enum values ('Basic', 'Standard', 'Premium', 'GeneralPurpose', 'BusinessCritical')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Ready', 'Disabled']):
            raise ValueError("must be one of enum values ('Creating', 'Ready', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElasticPoolProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_date",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElasticPoolProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationDate": obj.get("creationDate"),
            "databaseDtuMax": obj.get("databaseDtuMax"),
            "databaseDtuMin": obj.get("databaseDtuMin"),
            "dtu": obj.get("dtu"),
            "edition": obj.get("edition"),
            "state": obj.get("state"),
            "storageMB": obj.get("storageMB"),
            "zoneRedundant": obj.get("zoneRedundant")
        })
        return _obj



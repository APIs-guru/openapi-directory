# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_state import HealthState
from openapi_client.models.partition_current_configuration_epoch import PartitionCurrentConfigurationEpoch
from openapi_client.models.partition_information import PartitionInformation
from openapi_client.models.service_kind import ServiceKind
from typing import Optional, Set
from typing_extensions import Self

class Partition(BaseModel):
    """
    The partition
    """ # noqa: E501
    current_configuration_epoch: Optional[PartitionCurrentConfigurationEpoch] = Field(default=None, alias="CurrentConfigurationEpoch")
    health_state: Optional[HealthState] = Field(default=None, alias="HealthState")
    instance_count: Optional[StrictInt] = Field(default=None, alias="InstanceCount")
    min_replica_set_size: Optional[StrictInt] = Field(default=None, alias="MinReplicaSetSize")
    partition_information: Optional[PartitionInformation] = Field(default=None, alias="PartitionInformation")
    partition_status: Optional[StrictStr] = Field(default=None, alias="PartitionStatus")
    service_kind: Optional[ServiceKind] = Field(default=None, alias="ServiceKind")
    target_replica_set_size: Optional[StrictInt] = Field(default=None, alias="TargetReplicaSetSize")
    __properties: ClassVar[List[str]] = ["CurrentConfigurationEpoch", "HealthState", "InstanceCount", "MinReplicaSetSize", "PartitionInformation", "PartitionStatus", "ServiceKind", "TargetReplicaSetSize"]

    @field_validator('partition_status')
    def partition_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Ready', 'NotReady', 'InQuorumLoss', 'Reconfiguring', 'Deleting']):
            raise ValueError("must be one of enum values ('Invalid', 'Ready', 'NotReady', 'InQuorumLoss', 'Reconfiguring', 'Deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Partition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_configuration_epoch
        if self.current_configuration_epoch:
            _dict['CurrentConfigurationEpoch'] = self.current_configuration_epoch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partition_information
        if self.partition_information:
            _dict['PartitionInformation'] = self.partition_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Partition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrentConfigurationEpoch": PartitionCurrentConfigurationEpoch.from_dict(obj["CurrentConfigurationEpoch"]) if obj.get("CurrentConfigurationEpoch") is not None else None,
            "HealthState": obj.get("HealthState"),
            "InstanceCount": obj.get("InstanceCount"),
            "MinReplicaSetSize": obj.get("MinReplicaSetSize"),
            "PartitionInformation": PartitionInformation.from_dict(obj["PartitionInformation"]) if obj.get("PartitionInformation") is not None else None,
            "PartitionStatus": obj.get("PartitionStatus"),
            "ServiceKind": obj.get("ServiceKind"),
            "TargetReplicaSetSize": obj.get("TargetReplicaSetSize")
        })
        return _obj



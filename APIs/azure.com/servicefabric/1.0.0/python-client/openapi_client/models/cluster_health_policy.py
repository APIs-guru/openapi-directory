# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rolling_upgrade_mode import RollingUpgradeMode
from typing import Optional, Set
from typing_extensions import Self

class ClusterHealthPolicy(BaseModel):
    """
    The policy of the cluster health
    """ # noqa: E501
    failure_action: Optional[StrictStr] = Field(default=None, description="The action of the failure", alias="FailureAction")
    force_restart: Optional[StrictBool] = Field(default=None, description="The flag of the force restart", alias="ForceRestart")
    health_check_retry_timeout_in_milliseconds: Optional[StrictStr] = Field(default=None, description="The milliseconds of the health check retry timeout", alias="HealthCheckRetryTimeoutInMilliseconds")
    health_check_stable_duration_in_milliseconds: Optional[StrictStr] = Field(default=None, description="The milliseconds of the health check stable duration", alias="HealthCheckStableDurationInMilliseconds")
    health_check_wait_duration_in_milliseconds: Optional[StrictStr] = Field(default=None, description="The milliseconds of the health check wait duration", alias="HealthCheckWaitDurationInMilliseconds")
    rolling_upgrade_mode: Optional[RollingUpgradeMode] = Field(default=None, alias="RollingUpgradeMode")
    upgrade_domain_timeout_in_milliseconds: Optional[StrictStr] = Field(default=None, description="The milliseconds of the upgrade domain timeout", alias="UpgradeDomainTimeoutInMilliseconds")
    upgrade_replica_set_check_timeout_in_seconds: Optional[StrictInt] = Field(default=None, description="The seconds of the upgrade replica set check timeout", alias="UpgradeReplicaSetCheckTimeoutInSeconds")
    upgrade_timeout_in_milliseconds: Optional[StrictStr] = Field(default=None, description="The milliseconds of the upgrade timeout", alias="UpgradeTimeoutInMilliseconds")
    __properties: ClassVar[List[str]] = ["FailureAction", "ForceRestart", "HealthCheckRetryTimeoutInMilliseconds", "HealthCheckStableDurationInMilliseconds", "HealthCheckWaitDurationInMilliseconds", "RollingUpgradeMode", "UpgradeDomainTimeoutInMilliseconds", "UpgradeReplicaSetCheckTimeoutInSeconds", "UpgradeTimeoutInMilliseconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterHealthPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterHealthPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FailureAction": obj.get("FailureAction"),
            "ForceRestart": obj.get("ForceRestart"),
            "HealthCheckRetryTimeoutInMilliseconds": obj.get("HealthCheckRetryTimeoutInMilliseconds"),
            "HealthCheckStableDurationInMilliseconds": obj.get("HealthCheckStableDurationInMilliseconds"),
            "HealthCheckWaitDurationInMilliseconds": obj.get("HealthCheckWaitDurationInMilliseconds"),
            "RollingUpgradeMode": obj.get("RollingUpgradeMode"),
            "UpgradeDomainTimeoutInMilliseconds": obj.get("UpgradeDomainTimeoutInMilliseconds"),
            "UpgradeReplicaSetCheckTimeoutInSeconds": obj.get("UpgradeReplicaSetCheckTimeoutInSeconds"),
            "UpgradeTimeoutInMilliseconds": obj.get("UpgradeTimeoutInMilliseconds")
        })
        return _obj



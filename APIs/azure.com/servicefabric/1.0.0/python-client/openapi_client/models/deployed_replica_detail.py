# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployed_replica_detail_replicator_status import DeployedReplicaDetailReplicatorStatus
from openapi_client.models.service_kind import ServiceKind
from typing import Optional, Set
from typing_extensions import Self

class DeployedReplicaDetail(BaseModel):
    """
    The detail of the deployed replica
    """ # noqa: E501
    current_replicator_operation: Optional[StrictInt] = Field(default=None, alias="CurrentReplicatorOperation")
    current_service_operation: Optional[StrictInt] = Field(default=None, alias="CurrentServiceOperation")
    current_service_operation_start_time_utc: Optional[StrictStr] = Field(default=None, alias="CurrentServiceOperationStartTimeUtc")
    instance_id: Optional[StrictStr] = Field(default=None, alias="InstanceId")
    partition_id: Optional[StrictStr] = Field(default=None, alias="PartitionId")
    read_status: Optional[StrictInt] = Field(default=None, alias="ReadStatus")
    replica_id: Optional[StrictStr] = Field(default=None, alias="ReplicaId")
    replicator_status: Optional[DeployedReplicaDetailReplicatorStatus] = Field(default=None, alias="ReplicatorStatus")
    service_kind: Optional[ServiceKind] = Field(default=None, alias="ServiceKind")
    service_name: Optional[StrictStr] = Field(default=None, alias="ServiceName")
    write_status: Optional[StrictInt] = Field(default=None, alias="WriteStatus")
    __properties: ClassVar[List[str]] = ["CurrentReplicatorOperation", "CurrentServiceOperation", "CurrentServiceOperationStartTimeUtc", "InstanceId", "PartitionId", "ReadStatus", "ReplicaId", "ReplicatorStatus", "ServiceKind", "ServiceName", "WriteStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeployedReplicaDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of replicator_status
        if self.replicator_status:
            _dict['ReplicatorStatus'] = self.replicator_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeployedReplicaDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrentReplicatorOperation": obj.get("CurrentReplicatorOperation"),
            "CurrentServiceOperation": obj.get("CurrentServiceOperation"),
            "CurrentServiceOperationStartTimeUtc": obj.get("CurrentServiceOperationStartTimeUtc"),
            "InstanceId": obj.get("InstanceId"),
            "PartitionId": obj.get("PartitionId"),
            "ReadStatus": obj.get("ReadStatus"),
            "ReplicaId": obj.get("ReplicaId"),
            "ReplicatorStatus": DeployedReplicaDetailReplicatorStatus.from_dict(obj["ReplicatorStatus"]) if obj.get("ReplicatorStatus") is not None else None,
            "ServiceKind": obj.get("ServiceKind"),
            "ServiceName": obj.get("ServiceName"),
            "WriteStatus": obj.get("WriteStatus")
        })
        return _obj



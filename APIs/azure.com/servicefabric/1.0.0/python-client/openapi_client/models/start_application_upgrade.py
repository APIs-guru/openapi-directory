# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_health_policy import ApplicationHealthPolicy
from openapi_client.models.application_parameters_inner import ApplicationParametersInner
from openapi_client.models.monitoring_policy import MonitoringPolicy
from openapi_client.models.rolling_upgrade_mode import RollingUpgradeMode
from typing import Optional, Set
from typing_extensions import Self

class StartApplicationUpgrade(BaseModel):
    """
    The description of the start application upgrade
    """ # noqa: E501
    application_health_policy: Optional[ApplicationHealthPolicy] = Field(default=None, alias="ApplicationHealthPolicy")
    force_restart: Optional[StrictBool] = Field(default=None, alias="ForceRestart")
    monitoring_policy: Optional[MonitoringPolicy] = Field(default=None, alias="MonitoringPolicy")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    parameters: Optional[List[ApplicationParametersInner]] = Field(default=None, alias="Parameters")
    rolling_upgrade_mode: Optional[RollingUpgradeMode] = Field(default=None, alias="RollingUpgradeMode")
    target_application_type_version: Optional[StrictStr] = Field(default=None, alias="TargetApplicationTypeVersion")
    upgrade_kind: Optional[StrictStr] = Field(default=None, alias="UpgradeKind")
    upgrade_replica_set_check_timeout_in_seconds: Optional[StrictInt] = Field(default=None, alias="UpgradeReplicaSetCheckTimeoutInSeconds")
    __properties: ClassVar[List[str]] = ["ApplicationHealthPolicy", "ForceRestart", "MonitoringPolicy", "Name", "Parameters", "RollingUpgradeMode", "TargetApplicationTypeVersion", "UpgradeKind", "UpgradeReplicaSetCheckTimeoutInSeconds"]

    @field_validator('upgrade_kind')
    def upgrade_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Rolling']):
            raise ValueError("must be one of enum values ('Invalid', 'Rolling')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartApplicationUpgrade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_health_policy
        if self.application_health_policy:
            _dict['ApplicationHealthPolicy'] = self.application_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring_policy
        if self.monitoring_policy:
            _dict['MonitoringPolicy'] = self.monitoring_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['Parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartApplicationUpgrade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationHealthPolicy": ApplicationHealthPolicy.from_dict(obj["ApplicationHealthPolicy"]) if obj.get("ApplicationHealthPolicy") is not None else None,
            "ForceRestart": obj.get("ForceRestart"),
            "MonitoringPolicy": MonitoringPolicy.from_dict(obj["MonitoringPolicy"]) if obj.get("MonitoringPolicy") is not None else None,
            "Name": obj.get("Name"),
            "Parameters": [ApplicationParametersInner.from_dict(_item) for _item in obj["Parameters"]] if obj.get("Parameters") is not None else None,
            "RollingUpgradeMode": obj.get("RollingUpgradeMode"),
            "TargetApplicationTypeVersion": obj.get("TargetApplicationTypeVersion"),
            "UpgradeKind": obj.get("UpgradeKind"),
            "UpgradeReplicaSetCheckTimeoutInSeconds": obj.get("UpgradeReplicaSetCheckTimeoutInSeconds")
        })
        return _obj



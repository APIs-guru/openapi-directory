# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_health_node_health_states_inner_id import ClusterHealthNodeHealthStatesInnerId
from openapi_client.models.health_state import HealthState
from openapi_client.models.node_node_deactivation_info import NodeNodeDeactivationInfo
from typing import Optional, Set
from typing_extensions import Self

class Node(BaseModel):
    """
    The node
    """ # noqa: E501
    code_version: Optional[StrictStr] = Field(default=None, alias="CodeVersion")
    config_version: Optional[StrictStr] = Field(default=None, alias="ConfigVersion")
    fault_domain: Optional[StrictStr] = Field(default=None, alias="FaultDomain")
    health_state: Optional[HealthState] = Field(default=None, alias="HealthState")
    id: Optional[ClusterHealthNodeHealthStatesInnerId] = Field(default=None, alias="Id")
    instance_id: Optional[StrictStr] = Field(default=None, alias="InstanceId")
    ip_address_or_fqdn: Optional[StrictStr] = Field(default=None, alias="IpAddressOrFQDN")
    is_seed_node: Optional[StrictBool] = Field(default=None, alias="IsSeedNode")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    node_deactivation_info: Optional[NodeNodeDeactivationInfo] = Field(default=None, alias="NodeDeactivationInfo")
    node_status: Optional[StrictStr] = Field(default=None, alias="NodeStatus")
    node_up_time_in_seconds: Optional[StrictStr] = Field(default=None, alias="NodeUpTimeInSeconds")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    upgrade_domain: Optional[StrictStr] = Field(default=None, alias="UpgradeDomain")
    __properties: ClassVar[List[str]] = ["CodeVersion", "ConfigVersion", "FaultDomain", "HealthState", "Id", "InstanceId", "IpAddressOrFQDN", "IsSeedNode", "Name", "NodeDeactivationInfo", "NodeStatus", "NodeUpTimeInSeconds", "Type", "UpgradeDomain"]

    @field_validator('node_status')
    def node_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Up', 'Down', 'Enabling', 'Disabling', 'Disabled', 'Unknown', 'Removed']):
            raise ValueError("must be one of enum values ('Invalid', 'Up', 'Down', 'Enabling', 'Disabling', 'Disabled', 'Unknown', 'Removed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Node from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['Id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_deactivation_info
        if self.node_deactivation_info:
            _dict['NodeDeactivationInfo'] = self.node_deactivation_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Node from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CodeVersion": obj.get("CodeVersion"),
            "ConfigVersion": obj.get("ConfigVersion"),
            "FaultDomain": obj.get("FaultDomain"),
            "HealthState": obj.get("HealthState"),
            "Id": ClusterHealthNodeHealthStatesInnerId.from_dict(obj["Id"]) if obj.get("Id") is not None else None,
            "InstanceId": obj.get("InstanceId"),
            "IpAddressOrFQDN": obj.get("IpAddressOrFQDN"),
            "IsSeedNode": obj.get("IsSeedNode"),
            "Name": obj.get("Name"),
            "NodeDeactivationInfo": NodeNodeDeactivationInfo.from_dict(obj["NodeDeactivationInfo"]) if obj.get("NodeDeactivationInfo") is not None else None,
            "NodeStatus": obj.get("NodeStatus"),
            "NodeUpTimeInSeconds": obj.get("NodeUpTimeInSeconds"),
            "Type": obj.get("Type"),
            "UpgradeDomain": obj.get("UpgradeDomain")
        })
        return _obj



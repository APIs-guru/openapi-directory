# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_state import HealthState
from typing import Optional, Set
from typing_extensions import Self

class HealthEvent(BaseModel):
    """
    The event of the health
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    health_state: Optional[HealthState] = Field(default=None, alias="HealthState")
    is_expired: Optional[StrictBool] = Field(default=None, alias="IsExpired")
    last_error_transition_at: Optional[StrictStr] = Field(default=None, alias="LastErrorTransitionAt")
    last_modified_utc_timestamp: Optional[StrictStr] = Field(default=None, alias="LastModifiedUtcTimestamp")
    last_ok_transition_at: Optional[StrictStr] = Field(default=None, alias="LastOkTransitionAt")
    last_warning_transition_at: Optional[StrictStr] = Field(default=None, alias="LastWarningTransitionAt")
    var_property: Optional[StrictStr] = Field(default=None, alias="Property")
    remove_when_expired: Optional[StrictBool] = Field(default=None, alias="RemoveWhenExpired")
    sequence_number: Optional[StrictStr] = Field(default=None, alias="SequenceNumber")
    source_id: Optional[StrictStr] = Field(default=None, alias="SourceId")
    source_utc_timestamp: Optional[StrictStr] = Field(default=None, alias="SourceUtcTimestamp")
    time_to_live_in_milli_seconds: Optional[StrictStr] = Field(default=None, alias="TimeToLiveInMilliSeconds")
    __properties: ClassVar[List[str]] = ["Description", "HealthState", "IsExpired", "LastErrorTransitionAt", "LastModifiedUtcTimestamp", "LastOkTransitionAt", "LastWarningTransitionAt", "Property", "RemoveWhenExpired", "SequenceNumber", "SourceId", "SourceUtcTimestamp", "TimeToLiveInMilliSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "HealthState": obj.get("HealthState"),
            "IsExpired": obj.get("IsExpired"),
            "LastErrorTransitionAt": obj.get("LastErrorTransitionAt"),
            "LastModifiedUtcTimestamp": obj.get("LastModifiedUtcTimestamp"),
            "LastOkTransitionAt": obj.get("LastOkTransitionAt"),
            "LastWarningTransitionAt": obj.get("LastWarningTransitionAt"),
            "Property": obj.get("Property"),
            "RemoveWhenExpired": obj.get("RemoveWhenExpired"),
            "SequenceNumber": obj.get("SequenceNumber"),
            "SourceId": obj.get("SourceId"),
            "SourceUtcTimestamp": obj.get("SourceUtcTimestamp"),
            "TimeToLiveInMilliSeconds": obj.get("TimeToLiveInMilliSeconds")
        })
        return _obj



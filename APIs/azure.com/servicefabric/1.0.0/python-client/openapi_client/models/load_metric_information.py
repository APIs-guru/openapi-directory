# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.load_metric_information_max_node_load_id import LoadMetricInformationMaxNodeLoadId
from openapi_client.models.load_metric_information_min_node_load_id import LoadMetricInformationMinNodeLoadId
from typing import Optional, Set
from typing_extensions import Self

class LoadMetricInformation(BaseModel):
    """
    The information of the load metric
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, alias="Action")
    activity_threshold: Optional[StrictInt] = Field(default=None, alias="ActivityThreshold")
    balancing_threshold: Optional[StrictInt] = Field(default=None, alias="BalancingThreshold")
    buffered_capacity: Optional[StrictStr] = Field(default=None, alias="BufferedCapacity")
    cluster_capacity: Optional[StrictStr] = Field(default=None, alias="ClusterCapacity")
    cluster_load: Optional[StrictStr] = Field(default=None, alias="ClusterLoad")
    deviation_after: Optional[StrictInt] = Field(default=None, alias="DeviationAfter")
    deviation_before: Optional[StrictInt] = Field(default=None, alias="DeviationBefore")
    is_balanced_after: Optional[StrictBool] = Field(default=None, alias="IsBalancedAfter")
    is_balanced_before: Optional[StrictBool] = Field(default=None, alias="IsBalancedBefore")
    is_cluster_capacity_violation: Optional[StrictBool] = Field(default=None, alias="IsClusterCapacityViolation")
    max_node_load_id: Optional[LoadMetricInformationMaxNodeLoadId] = Field(default=None, alias="MaxNodeLoadId")
    max_node_load_value: Optional[StrictStr] = Field(default=None, alias="MaxNodeLoadValue")
    min_node_load_id: Optional[LoadMetricInformationMinNodeLoadId] = Field(default=None, alias="MinNodeLoadId")
    min_node_load_value: Optional[StrictStr] = Field(default=None, alias="MinNodeLoadValue")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    node_buffer_percentage: Optional[StrictInt] = Field(default=None, alias="NodeBufferPercentage")
    remaining_buffered_capacity: Optional[StrictStr] = Field(default=None, alias="RemainingBufferedCapacity")
    remaining_unbuffered_capacity: Optional[StrictStr] = Field(default=None, alias="RemainingUnbufferedCapacity")
    __properties: ClassVar[List[str]] = ["Action", "ActivityThreshold", "BalancingThreshold", "BufferedCapacity", "ClusterCapacity", "ClusterLoad", "DeviationAfter", "DeviationBefore", "IsBalancedAfter", "IsBalancedBefore", "IsClusterCapacityViolation", "MaxNodeLoadId", "MaxNodeLoadValue", "MinNodeLoadId", "MinNodeLoadValue", "Name", "NodeBufferPercentage", "RemainingBufferedCapacity", "RemainingUnbufferedCapacity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoadMetricInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_node_load_id
        if self.max_node_load_id:
            _dict['MaxNodeLoadId'] = self.max_node_load_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_node_load_id
        if self.min_node_load_id:
            _dict['MinNodeLoadId'] = self.min_node_load_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoadMetricInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Action": obj.get("Action"),
            "ActivityThreshold": obj.get("ActivityThreshold"),
            "BalancingThreshold": obj.get("BalancingThreshold"),
            "BufferedCapacity": obj.get("BufferedCapacity"),
            "ClusterCapacity": obj.get("ClusterCapacity"),
            "ClusterLoad": obj.get("ClusterLoad"),
            "DeviationAfter": obj.get("DeviationAfter"),
            "DeviationBefore": obj.get("DeviationBefore"),
            "IsBalancedAfter": obj.get("IsBalancedAfter"),
            "IsBalancedBefore": obj.get("IsBalancedBefore"),
            "IsClusterCapacityViolation": obj.get("IsClusterCapacityViolation"),
            "MaxNodeLoadId": LoadMetricInformationMaxNodeLoadId.from_dict(obj["MaxNodeLoadId"]) if obj.get("MaxNodeLoadId") is not None else None,
            "MaxNodeLoadValue": obj.get("MaxNodeLoadValue"),
            "MinNodeLoadId": LoadMetricInformationMinNodeLoadId.from_dict(obj["MinNodeLoadId"]) if obj.get("MinNodeLoadId") is not None else None,
            "MinNodeLoadValue": obj.get("MinNodeLoadValue"),
            "Name": obj.get("Name"),
            "NodeBufferPercentage": obj.get("NodeBufferPercentage"),
            "RemainingBufferedCapacity": obj.get("RemainingBufferedCapacity"),
            "RemainingUnbufferedCapacity": obj.get("RemainingUnbufferedCapacity")
        })
        return _obj



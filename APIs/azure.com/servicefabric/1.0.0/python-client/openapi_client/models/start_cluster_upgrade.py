# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_health_policy_map import ApplicationHealthPolicyMap
from openapi_client.models.cluster_upgrade_health_policy import ClusterUpgradeHealthPolicy
from openapi_client.models.rolling_upgrade_mode import RollingUpgradeMode
from typing import Optional, Set
from typing_extensions import Self

class StartClusterUpgrade(BaseModel):
    """
    The description of the start cluster upgrade
    """ # noqa: E501
    application_health_policy_map: Optional[ApplicationHealthPolicyMap] = Field(default=None, alias="ApplicationHealthPolicyMap")
    cluster_upgrade_health_policy: Optional[ClusterUpgradeHealthPolicy] = Field(default=None, alias="ClusterUpgradeHealthPolicy")
    code_version: Optional[StrictStr] = Field(default=None, description="The version of the code", alias="CodeVersion")
    config_version: Optional[StrictStr] = Field(default=None, description="The version of the config", alias="ConfigVersion")
    enable_delta_health_evaluation: Optional[StrictBool] = Field(default=None, description="The evaluation of the enable delta health", alias="EnableDeltaHealthEvaluation")
    force_restart: Optional[StrictBool] = Field(default=None, description="The flag of the force restart", alias="ForceRestart")
    monitoring_policy: Optional[Dict[str, Any]] = Field(default=None, description="The policy of the monitoring", alias="MonitoringPolicy")
    rolling_upgrade_mode: Optional[RollingUpgradeMode] = Field(default=None, alias="RollingUpgradeMode")
    upgrade_kind: Optional[StrictStr] = Field(default=None, description="The kind of the upgrade", alias="UpgradeKind")
    upgrade_replica_set_check_timeout_in_seconds: Optional[StrictInt] = Field(default=None, description="The seconds of the upgrade replica set check timeout", alias="UpgradeReplicaSetCheckTimeoutInSeconds")
    __properties: ClassVar[List[str]] = ["ApplicationHealthPolicyMap", "ClusterUpgradeHealthPolicy", "CodeVersion", "ConfigVersion", "EnableDeltaHealthEvaluation", "ForceRestart", "MonitoringPolicy", "RollingUpgradeMode", "UpgradeKind", "UpgradeReplicaSetCheckTimeoutInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartClusterUpgrade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_health_policy_map
        if self.application_health_policy_map:
            _dict['ApplicationHealthPolicyMap'] = self.application_health_policy_map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_upgrade_health_policy
        if self.cluster_upgrade_health_policy:
            _dict['ClusterUpgradeHealthPolicy'] = self.cluster_upgrade_health_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartClusterUpgrade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationHealthPolicyMap": ApplicationHealthPolicyMap.from_dict(obj["ApplicationHealthPolicyMap"]) if obj.get("ApplicationHealthPolicyMap") is not None else None,
            "ClusterUpgradeHealthPolicy": ClusterUpgradeHealthPolicy.from_dict(obj["ClusterUpgradeHealthPolicy"]) if obj.get("ClusterUpgradeHealthPolicy") is not None else None,
            "CodeVersion": obj.get("CodeVersion"),
            "ConfigVersion": obj.get("ConfigVersion"),
            "EnableDeltaHealthEvaluation": obj.get("EnableDeltaHealthEvaluation"),
            "ForceRestart": obj.get("ForceRestart"),
            "MonitoringPolicy": obj.get("MonitoringPolicy"),
            "RollingUpgradeMode": obj.get("RollingUpgradeMode"),
            "UpgradeKind": obj.get("UpgradeKind"),
            "UpgradeReplicaSetCheckTimeoutInSeconds": obj.get("UpgradeReplicaSetCheckTimeoutInSeconds")
        })
        return _obj



# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.partition_description import PartitionDescription
from openapi_client.models.service_correlation_description import ServiceCorrelationDescription
from openapi_client.models.service_group_member_description import ServiceGroupMemberDescription
from openapi_client.models.service_kind import ServiceKind
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.stateful_create_service_group_description import StatefulCreateServiceGroupDescription
    from openapi_client.models.stateless_create_service_group_description import StatelessCreateServiceGroupDescription

class CreateServiceGroupDescription(BaseModel):
    """
    The description of the create service group
    """ # noqa: E501
    application_name: Optional[StrictStr] = Field(default=None, alias="ApplicationName")
    correlation_scheme: Optional[ServiceCorrelationDescription] = Field(default=None, alias="CorrelationScheme")
    flags: Optional[StrictInt] = Field(default=None, alias="Flags")
    partition_description: Optional[PartitionDescription] = Field(default=None, alias="PartitionDescription")
    placement_constraints: Optional[StrictStr] = Field(default=None, alias="PlacementConstraints")
    service_group_member_description: Optional[List[ServiceGroupMemberDescription]] = Field(default=None, alias="ServiceGroupMemberDescription")
    service_kind: ServiceKind = Field(alias="ServiceKind")
    service_load_metrics: Optional[ServiceCorrelationDescription] = Field(default=None, alias="ServiceLoadMetrics")
    service_name: Optional[StrictStr] = Field(default=None, alias="ServiceName")
    service_placement_policies: Optional[ServiceCorrelationDescription] = Field(default=None, alias="ServicePlacementPolicies")
    service_type_name: Optional[StrictStr] = Field(default=None, alias="ServiceTypeName")
    __properties: ClassVar[List[str]] = ["ApplicationName", "CorrelationScheme", "Flags", "PartitionDescription", "PlacementConstraints", "ServiceGroupMemberDescription", "ServiceKind", "ServiceLoadMetrics", "ServiceName", "ServicePlacementPolicies", "ServiceTypeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'ServiceKind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'StatefulCreateServiceGroupDescription': 'StatefulCreateServiceGroupDescription','StatelessCreateServiceGroupDescription': 'StatelessCreateServiceGroupDescription'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[StatefulCreateServiceGroupDescription, StatelessCreateServiceGroupDescription]]:
        """Create an instance of CreateServiceGroupDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of correlation_scheme
        if self.correlation_scheme:
            _dict['CorrelationScheme'] = self.correlation_scheme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partition_description
        if self.partition_description:
            _dict['PartitionDescription'] = self.partition_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_group_member_description (list)
        _items = []
        if self.service_group_member_description:
            for _item_service_group_member_description in self.service_group_member_description:
                if _item_service_group_member_description:
                    _items.append(_item_service_group_member_description.to_dict())
            _dict['ServiceGroupMemberDescription'] = _items
        # override the default output from pydantic by calling `to_dict()` of service_load_metrics
        if self.service_load_metrics:
            _dict['ServiceLoadMetrics'] = self.service_load_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_placement_policies
        if self.service_placement_policies:
            _dict['ServicePlacementPolicies'] = self.service_placement_policies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[StatefulCreateServiceGroupDescription, StatelessCreateServiceGroupDescription]]:
        """Create an instance of CreateServiceGroupDescription from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'StatefulCreateServiceGroupDescription':
            return import_module("openapi_client.models.stateful_create_service_group_description").StatefulCreateServiceGroupDescription.from_dict(obj)
        if object_type ==  'StatelessCreateServiceGroupDescription':
            return import_module("openapi_client.models.stateless_create_service_group_description").StatelessCreateServiceGroupDescription.from_dict(obj)

        raise ValueError("CreateServiceGroupDescription failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



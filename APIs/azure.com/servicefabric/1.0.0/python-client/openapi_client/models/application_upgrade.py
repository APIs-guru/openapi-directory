# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_upgrade_current_upgrade_domain_progress import ApplicationUpgradeCurrentUpgradeDomainProgress
from openapi_client.models.application_upgrade_deployed_application_health_states import ApplicationUpgradeDeployedApplicationHealthStates
from openapi_client.models.failure_reason import FailureReason
from openapi_client.models.rolling_upgrade_mode import RollingUpgradeMode
from openapi_client.models.upgrade_state import UpgradeState
from typing import Optional, Set
from typing_extensions import Self

class ApplicationUpgrade(BaseModel):
    """
    The upgrade of the application
    """ # noqa: E501
    current_upgrade_domain_progress: Optional[ApplicationUpgradeCurrentUpgradeDomainProgress] = Field(default=None, alias="CurrentUpgradeDomainProgress")
    deployed_application_health_states: Optional[ApplicationUpgradeDeployedApplicationHealthStates] = Field(default=None, alias="DeployedApplicationHealthStates")
    failure_reason: Optional[FailureReason] = Field(default=None, alias="FailureReason")
    failure_timestamp_utc: Optional[StrictStr] = Field(default=None, alias="FailureTimestampUtc")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    next_upgrade_domain: Optional[StrictStr] = Field(default=None, alias="NextUpgradeDomain")
    rolling_upgrade_mode: Optional[RollingUpgradeMode] = Field(default=None, alias="RollingUpgradeMode")
    start_timestamp_utc: Optional[StrictStr] = Field(default=None, alias="StartTimestampUtc")
    target_application_type_version: Optional[StrictStr] = Field(default=None, alias="TargetApplicationTypeVersion")
    type_name: Optional[StrictStr] = Field(default=None, alias="TypeName")
    unhealthy_evaluations: Optional[StrictStr] = Field(default=None, alias="UnhealthyEvaluations")
    upgrade_domain_duration_in_milliseconds: Optional[StrictStr] = Field(default=None, alias="UpgradeDomainDurationInMilliseconds")
    upgrade_domains: Optional[StrictStr] = Field(default=None, alias="UpgradeDomains")
    upgrade_duration_in_milliseconds: Optional[StrictStr] = Field(default=None, alias="UpgradeDurationInMilliseconds")
    upgrade_state: Optional[UpgradeState] = Field(default=None, alias="UpgradeState")
    __properties: ClassVar[List[str]] = ["CurrentUpgradeDomainProgress", "DeployedApplicationHealthStates", "FailureReason", "FailureTimestampUtc", "Name", "NextUpgradeDomain", "RollingUpgradeMode", "StartTimestampUtc", "TargetApplicationTypeVersion", "TypeName", "UnhealthyEvaluations", "UpgradeDomainDurationInMilliseconds", "UpgradeDomains", "UpgradeDurationInMilliseconds", "UpgradeState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationUpgrade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_upgrade_domain_progress
        if self.current_upgrade_domain_progress:
            _dict['CurrentUpgradeDomainProgress'] = self.current_upgrade_domain_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployed_application_health_states
        if self.deployed_application_health_states:
            _dict['DeployedApplicationHealthStates'] = self.deployed_application_health_states.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationUpgrade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrentUpgradeDomainProgress": ApplicationUpgradeCurrentUpgradeDomainProgress.from_dict(obj["CurrentUpgradeDomainProgress"]) if obj.get("CurrentUpgradeDomainProgress") is not None else None,
            "DeployedApplicationHealthStates": ApplicationUpgradeDeployedApplicationHealthStates.from_dict(obj["DeployedApplicationHealthStates"]) if obj.get("DeployedApplicationHealthStates") is not None else None,
            "FailureReason": obj.get("FailureReason"),
            "FailureTimestampUtc": obj.get("FailureTimestampUtc"),
            "Name": obj.get("Name"),
            "NextUpgradeDomain": obj.get("NextUpgradeDomain"),
            "RollingUpgradeMode": obj.get("RollingUpgradeMode"),
            "StartTimestampUtc": obj.get("StartTimestampUtc"),
            "TargetApplicationTypeVersion": obj.get("TargetApplicationTypeVersion"),
            "TypeName": obj.get("TypeName"),
            "UnhealthyEvaluations": obj.get("UnhealthyEvaluations"),
            "UpgradeDomainDurationInMilliseconds": obj.get("UpgradeDomainDurationInMilliseconds"),
            "UpgradeDomains": obj.get("UpgradeDomains"),
            "UpgradeDurationInMilliseconds": obj.get("UpgradeDurationInMilliseconds"),
            "UpgradeState": obj.get("UpgradeState")
        })
        return _obj



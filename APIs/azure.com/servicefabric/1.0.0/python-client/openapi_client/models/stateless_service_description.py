# coding: utf-8

"""
    ServiceFabricClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.partition_description import PartitionDescription
from openapi_client.models.service_correlation_description import ServiceCorrelationDescription
from openapi_client.models.service_description import ServiceDescription
from openapi_client.models.service_kind import ServiceKind
from typing import Optional, Set
from typing_extensions import Self

class StatelessServiceDescription(ServiceDescription):
    """
    The description of the stateless service
    """ # noqa: E501
    instance_count: Optional[StrictInt] = Field(default=None, alias="InstanceCount")
    __properties: ClassVar[List[str]] = ["ApplicationName", "CorrelationScheme", "Flags", "PartitionDescription", "PlacementConstraints", "ServiceKind", "ServiceLoadMetrics", "ServiceName", "ServicePlacementPolicies", "ServiceTypeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatelessServiceDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of correlation_scheme
        if self.correlation_scheme:
            _dict['CorrelationScheme'] = self.correlation_scheme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partition_description
        if self.partition_description:
            _dict['PartitionDescription'] = self.partition_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_load_metrics
        if self.service_load_metrics:
            _dict['ServiceLoadMetrics'] = self.service_load_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_placement_policies
        if self.service_placement_policies:
            _dict['ServicePlacementPolicies'] = self.service_placement_policies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatelessServiceDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationName": obj.get("ApplicationName"),
            "CorrelationScheme": ServiceCorrelationDescription.from_dict(obj["CorrelationScheme"]) if obj.get("CorrelationScheme") is not None else None,
            "Flags": obj.get("Flags"),
            "PartitionDescription": PartitionDescription.from_dict(obj["PartitionDescription"]) if obj.get("PartitionDescription") is not None else None,
            "PlacementConstraints": obj.get("PlacementConstraints"),
            "ServiceKind": obj.get("ServiceKind"),
            "ServiceLoadMetrics": ServiceCorrelationDescription.from_dict(obj["ServiceLoadMetrics"]) if obj.get("ServiceLoadMetrics") is not None else None,
            "ServiceName": obj.get("ServiceName"),
            "ServicePlacementPolicies": ServiceCorrelationDescription.from_dict(obj["ServicePlacementPolicies"]) if obj.get("ServicePlacementPolicies") is not None else None,
            "ServiceTypeName": obj.get("ServiceTypeName")
        })
        return _obj



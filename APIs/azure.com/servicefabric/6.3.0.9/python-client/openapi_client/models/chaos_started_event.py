# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.cluster_event import ClusterEvent
from openapi_client.models.fabric_event_kind import FabricEventKind
from typing import Optional, Set
from typing_extensions import Self

class ChaosStartedEvent(ClusterEvent):
    """
    Chaos Started event.
    """ # noqa: E501
    chaos_context: StrictStr = Field(description="Chaos Context.", alias="ChaosContext")
    cluster_health_policy: StrictStr = Field(description="Health policy.", alias="ClusterHealthPolicy")
    included_application_list: StrictStr = Field(description="List of included Applications.", alias="IncludedApplicationList")
    included_node_type_list: StrictStr = Field(description="List of included Node types.", alias="IncludedNodeTypeList")
    max_cluster_stabilization_timeout_in_seconds: Union[StrictFloat, StrictInt] = Field(description="Maximum timeout for cluster stabilization in seconds.", alias="MaxClusterStabilizationTimeoutInSeconds")
    max_concurrent_faults: StrictInt = Field(description="Maximum number of concurrent faults.", alias="MaxConcurrentFaults")
    move_replica_fault_enabled: StrictBool = Field(description="Indicates MoveReplica fault is enabled.", alias="MoveReplicaFaultEnabled")
    time_to_run_in_seconds: Union[StrictFloat, StrictInt] = Field(description="Time to run in seconds.", alias="TimeToRunInSeconds")
    wait_time_between_fautls_in_seconds: Union[StrictFloat, StrictInt] = Field(description="Wait time between faults in seconds.", alias="WaitTimeBetweenFautlsInSeconds")
    wait_time_between_iterations_in_seconds: Union[StrictFloat, StrictInt] = Field(description="Wait time between iterations in seconds.", alias="WaitTimeBetweenIterationsInSeconds")
    __properties: ClassVar[List[str]] = ["EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp", "ChaosContext", "ClusterHealthPolicy", "IncludedApplicationList", "IncludedNodeTypeList", "MaxClusterStabilizationTimeoutInSeconds", "MaxConcurrentFaults", "MoveReplicaFaultEnabled", "TimeToRunInSeconds", "WaitTimeBetweenFautlsInSeconds", "WaitTimeBetweenIterationsInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChaosStartedEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChaosStartedEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EventInstanceId": obj.get("EventInstanceId"),
            "HasCorrelatedEvents": obj.get("HasCorrelatedEvents"),
            "Kind": obj.get("Kind"),
            "TimeStamp": obj.get("TimeStamp"),
            "ChaosContext": obj.get("ChaosContext"),
            "ClusterHealthPolicy": obj.get("ClusterHealthPolicy"),
            "IncludedApplicationList": obj.get("IncludedApplicationList"),
            "IncludedNodeTypeList": obj.get("IncludedNodeTypeList"),
            "MaxClusterStabilizationTimeoutInSeconds": obj.get("MaxClusterStabilizationTimeoutInSeconds"),
            "MaxConcurrentFaults": obj.get("MaxConcurrentFaults"),
            "MoveReplicaFaultEnabled": obj.get("MoveReplicaFaultEnabled"),
            "TimeToRunInSeconds": obj.get("TimeToRunInSeconds"),
            "WaitTimeBetweenFautlsInSeconds": obj.get("WaitTimeBetweenFautlsInSeconds"),
            "WaitTimeBetweenIterationsInSeconds": obj.get("WaitTimeBetweenIterationsInSeconds")
        })
        return _obj



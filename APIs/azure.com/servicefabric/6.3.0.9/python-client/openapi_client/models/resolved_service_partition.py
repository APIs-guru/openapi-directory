# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.partition_information import PartitionInformation
from openapi_client.models.resolved_service_endpoint import ResolvedServiceEndpoint
from typing import Optional, Set
from typing_extensions import Self

class ResolvedServicePartition(BaseModel):
    """
    Information about a service partition and its associated endpoints.
    """ # noqa: E501
    endpoints: List[ResolvedServiceEndpoint] = Field(description="List of resolved service endpoints of a service partition.", alias="Endpoints")
    name: StrictStr = Field(description="The full name of the service with 'fabric:' URI scheme.", alias="Name")
    partition_information: PartitionInformation = Field(alias="PartitionInformation")
    version: StrictStr = Field(description="The version of this resolved service partition result. This version should be passed in the next time the ResolveService call is made via the PreviousRspVersion query parameter.", alias="Version")
    __properties: ClassVar[List[str]] = ["Endpoints", "Name", "PartitionInformation", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResolvedServicePartition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['Endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of partition_information
        if self.partition_information:
            _dict['PartitionInformation'] = self.partition_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResolvedServicePartition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Endpoints": [ResolvedServiceEndpoint.from_dict(_item) for _item in obj["Endpoints"]] if obj.get("Endpoints") is not None else None,
            "Name": obj.get("Name"),
            "PartitionInformation": PartitionInformation.from_dict(obj["PartitionInformation"]) if obj.get("PartitionInformation") is not None else None,
            "Version": obj.get("Version")
        })
        return _obj



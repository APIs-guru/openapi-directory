# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.fabric_event_kind import FabricEventKind
from openapi_client.models.partition_event import PartitionEvent
from typing import Optional, Set
from typing_extensions import Self

class PartitionReconfigurationCompletedEvent(PartitionEvent):
    """
    Partition Reconfiguration Completed event.
    """ # noqa: E501
    cc_epoch_config_version: StrictInt = Field(description="CcEpochConfig version.", alias="CcEpochConfigVersion")
    cc_epoch_data_loss_version: StrictInt = Field(description="CcEpochDataLoss version.", alias="CcEpochDataLossVersion")
    node_instance_id: StrictStr = Field(description="Id of Node instance.", alias="NodeInstanceId")
    node_name: StrictStr = Field(description="The name of a Service Fabric node.", alias="NodeName")
    phase0_duration_ms: Union[StrictFloat, StrictInt] = Field(description="Duration of Phase0 in milli-seconds.", alias="Phase0DurationMs")
    phase1_duration_ms: Union[StrictFloat, StrictInt] = Field(description="Duration of Phase1 in milli-seconds.", alias="Phase1DurationMs")
    phase2_duration_ms: Union[StrictFloat, StrictInt] = Field(description="Duration of Phase2 in milli-seconds.", alias="Phase2DurationMs")
    phase3_duration_ms: Union[StrictFloat, StrictInt] = Field(description="Duration of Phase3 in milli-seconds.", alias="Phase3DurationMs")
    phase4_duration_ms: Union[StrictFloat, StrictInt] = Field(description="Duration of Phase4 in milli-seconds.", alias="Phase4DurationMs")
    reconfig_type: StrictStr = Field(description="Type of reconfiguration.", alias="ReconfigType")
    result: StrictStr = Field(description="Describes reconfiguration result.", alias="Result")
    service_type: StrictStr = Field(description="Type of Service.", alias="ServiceType")
    total_duration_ms: Union[StrictFloat, StrictInt] = Field(description="Total duration in milli-seconds.", alias="TotalDurationMs")
    __properties: ClassVar[List[str]] = ["EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp", "PartitionId", "CcEpochConfigVersion", "CcEpochDataLossVersion", "NodeInstanceId", "NodeName", "Phase0DurationMs", "Phase1DurationMs", "Phase2DurationMs", "Phase3DurationMs", "Phase4DurationMs", "ReconfigType", "Result", "ServiceType", "TotalDurationMs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartitionReconfigurationCompletedEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartitionReconfigurationCompletedEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EventInstanceId": obj.get("EventInstanceId"),
            "HasCorrelatedEvents": obj.get("HasCorrelatedEvents"),
            "Kind": obj.get("Kind"),
            "TimeStamp": obj.get("TimeStamp"),
            "PartitionId": obj.get("PartitionId"),
            "CcEpochConfigVersion": obj.get("CcEpochConfigVersion"),
            "CcEpochDataLossVersion": obj.get("CcEpochDataLossVersion"),
            "NodeInstanceId": obj.get("NodeInstanceId"),
            "NodeName": obj.get("NodeName"),
            "Phase0DurationMs": obj.get("Phase0DurationMs"),
            "Phase1DurationMs": obj.get("Phase1DurationMs"),
            "Phase2DurationMs": obj.get("Phase2DurationMs"),
            "Phase3DurationMs": obj.get("Phase3DurationMs"),
            "Phase4DurationMs": obj.get("Phase4DurationMs"),
            "ReconfigType": obj.get("ReconfigType"),
            "Result": obj.get("Result"),
            "ServiceType": obj.get("ServiceType"),
            "TotalDurationMs": obj.get("TotalDurationMs")
        })
        return _obj



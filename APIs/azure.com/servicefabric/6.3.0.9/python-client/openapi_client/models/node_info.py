# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_state import HealthState
from openapi_client.models.node_deactivation_info import NodeDeactivationInfo
from openapi_client.models.node_id import NodeId
from openapi_client.models.node_status import NodeStatus
from typing import Optional, Set
from typing_extensions import Self

class NodeInfo(BaseModel):
    """
    Information about a node in Service Fabric cluster.
    """ # noqa: E501
    code_version: Optional[StrictStr] = Field(default=None, description="The version of Service Fabric binaries that the node is running.", alias="CodeVersion")
    config_version: Optional[StrictStr] = Field(default=None, description="The version of Service Fabric cluster manifest that the node is using.", alias="ConfigVersion")
    fault_domain: Optional[StrictStr] = Field(default=None, description="The fault domain of the node.", alias="FaultDomain")
    health_state: Optional[HealthState] = Field(default=None, alias="HealthState")
    id: Optional[NodeId] = Field(default=None, alias="Id")
    instance_id: Optional[StrictStr] = Field(default=None, description="The ID representing the node instance. While the ID of the node is deterministically generated from the node name and remains same across restarts, the InstanceId changes every time node restarts.", alias="InstanceId")
    ip_address_or_fqdn: Optional[StrictStr] = Field(default=None, description="The IP address or fully qualified domain name of the node.", alias="IpAddressOrFQDN")
    is_seed_node: Optional[StrictBool] = Field(default=None, description="Indicates if the node is a seed node or not. Returns true if the node is a seed node, otherwise false. A quorum of seed nodes are required for proper operation of Service Fabric cluster.", alias="IsSeedNode")
    is_stopped: Optional[StrictBool] = Field(default=None, description="Indicates if the node is stopped by calling stop node API or not. Returns true if the node is stopped, otherwise false.", alias="IsStopped")
    name: Optional[StrictStr] = Field(default=None, description="The name of a Service Fabric node.", alias="Name")
    node_deactivation_info: Optional[NodeDeactivationInfo] = Field(default=None, alias="NodeDeactivationInfo")
    node_down_at: Optional[datetime] = Field(default=None, description="Date time in UTC when the node went down. If node has never been down then this value will be zero date time.", alias="NodeDownAt")
    node_down_time_in_seconds: Optional[StrictStr] = Field(default=None, description="Time in seconds since the node has been in NodeStatus Down. Value zero indicates node is not NodeStatus Down.", alias="NodeDownTimeInSeconds")
    node_status: Optional[NodeStatus] = Field(default=None, alias="NodeStatus")
    node_up_at: Optional[datetime] = Field(default=None, description="Date time in UTC when the node came up. If the node has never been up then this value will be zero date time.", alias="NodeUpAt")
    node_up_time_in_seconds: Optional[StrictStr] = Field(default=None, description="Time in seconds since the node has been in NodeStatus Up. Value zero indicates that the node is not Up.", alias="NodeUpTimeInSeconds")
    type: Optional[StrictStr] = Field(default=None, description="The type of the node.", alias="Type")
    upgrade_domain: Optional[StrictStr] = Field(default=None, description="The upgrade domain of the node.", alias="UpgradeDomain")
    __properties: ClassVar[List[str]] = ["CodeVersion", "ConfigVersion", "FaultDomain", "HealthState", "Id", "InstanceId", "IpAddressOrFQDN", "IsSeedNode", "IsStopped", "Name", "NodeDeactivationInfo", "NodeDownAt", "NodeDownTimeInSeconds", "NodeStatus", "NodeUpAt", "NodeUpTimeInSeconds", "Type", "UpgradeDomain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['Id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_deactivation_info
        if self.node_deactivation_info:
            _dict['NodeDeactivationInfo'] = self.node_deactivation_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CodeVersion": obj.get("CodeVersion"),
            "ConfigVersion": obj.get("ConfigVersion"),
            "FaultDomain": obj.get("FaultDomain"),
            "HealthState": obj.get("HealthState"),
            "Id": NodeId.from_dict(obj["Id"]) if obj.get("Id") is not None else None,
            "InstanceId": obj.get("InstanceId"),
            "IpAddressOrFQDN": obj.get("IpAddressOrFQDN"),
            "IsSeedNode": obj.get("IsSeedNode"),
            "IsStopped": obj.get("IsStopped"),
            "Name": obj.get("Name"),
            "NodeDeactivationInfo": NodeDeactivationInfo.from_dict(obj["NodeDeactivationInfo"]) if obj.get("NodeDeactivationInfo") is not None else None,
            "NodeDownAt": obj.get("NodeDownAt"),
            "NodeDownTimeInSeconds": obj.get("NodeDownTimeInSeconds"),
            "NodeStatus": obj.get("NodeStatus"),
            "NodeUpAt": obj.get("NodeUpAt"),
            "NodeUpTimeInSeconds": obj.get("NodeUpTimeInSeconds"),
            "Type": obj.get("Type"),
            "UpgradeDomain": obj.get("UpgradeDomain")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_upgrade_description import ApplicationUpgradeDescription
from openapi_client.models.current_upgrade_domain_progress_info import CurrentUpgradeDomainProgressInfo
from openapi_client.models.failure_reason import FailureReason
from openapi_client.models.failure_upgrade_domain_progress_info import FailureUpgradeDomainProgressInfo
from openapi_client.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_client.models.upgrade_domain_info import UpgradeDomainInfo
from openapi_client.models.upgrade_mode import UpgradeMode
from openapi_client.models.upgrade_state import UpgradeState
from typing import Optional, Set
from typing_extensions import Self

class ApplicationUpgradeProgressInfo(BaseModel):
    """
    Describes the parameters for an application upgrade.
    """ # noqa: E501
    current_upgrade_domain_progress: Optional[CurrentUpgradeDomainProgressInfo] = Field(default=None, alias="CurrentUpgradeDomainProgress")
    failure_reason: Optional[FailureReason] = Field(default=None, alias="FailureReason")
    failure_timestamp_utc: Optional[StrictStr] = Field(default=None, description="The estimated UTC datetime when the upgrade failed and FailureAction was executed.", alias="FailureTimestampUtc")
    name: Optional[StrictStr] = Field(default=None, description="The name of the target application, including the 'fabric:' URI scheme.", alias="Name")
    next_upgrade_domain: Optional[StrictStr] = Field(default=None, description="The name of the next upgrade domain to be processed.", alias="NextUpgradeDomain")
    rolling_upgrade_mode: Optional[UpgradeMode] = Field(default=UpgradeMode.UNMONITOREDAUTO, alias="RollingUpgradeMode")
    start_timestamp_utc: Optional[StrictStr] = Field(default=None, description="The estimated UTC datetime when the upgrade started.", alias="StartTimestampUtc")
    target_application_type_version: Optional[StrictStr] = Field(default=None, description="The target application type version (found in the application manifest) for the application upgrade.", alias="TargetApplicationTypeVersion")
    type_name: Optional[StrictStr] = Field(default=None, description="The application type name as defined in the application manifest.", alias="TypeName")
    unhealthy_evaluations: Optional[List[HealthEvaluationWrapper]] = Field(default=None, description="List of health evaluations that resulted in the current aggregated health state.", alias="UnhealthyEvaluations")
    upgrade_description: Optional[ApplicationUpgradeDescription] = Field(default=None, alias="UpgradeDescription")
    upgrade_domain_duration_in_milliseconds: Optional[StrictStr] = Field(default=None, description="The estimated total amount of time spent processing the current upgrade domain.", alias="UpgradeDomainDurationInMilliseconds")
    upgrade_domain_progress_at_failure: Optional[FailureUpgradeDomainProgressInfo] = Field(default=None, alias="UpgradeDomainProgressAtFailure")
    upgrade_domains: Optional[List[UpgradeDomainInfo]] = Field(default=None, description="List of upgrade domains and their statuses.", alias="UpgradeDomains")
    upgrade_duration_in_milliseconds: Optional[StrictStr] = Field(default=None, description="The estimated total amount of time spent processing the overall upgrade.", alias="UpgradeDurationInMilliseconds")
    upgrade_state: Optional[UpgradeState] = Field(default=None, alias="UpgradeState")
    upgrade_status_details: Optional[StrictStr] = Field(default=None, description="Additional detailed information about the status of the pending upgrade.", alias="UpgradeStatusDetails")
    __properties: ClassVar[List[str]] = ["CurrentUpgradeDomainProgress", "FailureReason", "FailureTimestampUtc", "Name", "NextUpgradeDomain", "RollingUpgradeMode", "StartTimestampUtc", "TargetApplicationTypeVersion", "TypeName", "UnhealthyEvaluations", "UpgradeDescription", "UpgradeDomainDurationInMilliseconds", "UpgradeDomainProgressAtFailure", "UpgradeDomains", "UpgradeDurationInMilliseconds", "UpgradeState", "UpgradeStatusDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationUpgradeProgressInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_upgrade_domain_progress
        if self.current_upgrade_domain_progress:
            _dict['CurrentUpgradeDomainProgress'] = self.current_upgrade_domain_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in unhealthy_evaluations (list)
        _items = []
        if self.unhealthy_evaluations:
            for _item_unhealthy_evaluations in self.unhealthy_evaluations:
                if _item_unhealthy_evaluations:
                    _items.append(_item_unhealthy_evaluations.to_dict())
            _dict['UnhealthyEvaluations'] = _items
        # override the default output from pydantic by calling `to_dict()` of upgrade_description
        if self.upgrade_description:
            _dict['UpgradeDescription'] = self.upgrade_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_domain_progress_at_failure
        if self.upgrade_domain_progress_at_failure:
            _dict['UpgradeDomainProgressAtFailure'] = self.upgrade_domain_progress_at_failure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in upgrade_domains (list)
        _items = []
        if self.upgrade_domains:
            for _item_upgrade_domains in self.upgrade_domains:
                if _item_upgrade_domains:
                    _items.append(_item_upgrade_domains.to_dict())
            _dict['UpgradeDomains'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationUpgradeProgressInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrentUpgradeDomainProgress": CurrentUpgradeDomainProgressInfo.from_dict(obj["CurrentUpgradeDomainProgress"]) if obj.get("CurrentUpgradeDomainProgress") is not None else None,
            "FailureReason": obj.get("FailureReason"),
            "FailureTimestampUtc": obj.get("FailureTimestampUtc"),
            "Name": obj.get("Name"),
            "NextUpgradeDomain": obj.get("NextUpgradeDomain"),
            "RollingUpgradeMode": obj.get("RollingUpgradeMode") if obj.get("RollingUpgradeMode") is not None else UpgradeMode.UNMONITOREDAUTO,
            "StartTimestampUtc": obj.get("StartTimestampUtc"),
            "TargetApplicationTypeVersion": obj.get("TargetApplicationTypeVersion"),
            "TypeName": obj.get("TypeName"),
            "UnhealthyEvaluations": [HealthEvaluationWrapper.from_dict(_item) for _item in obj["UnhealthyEvaluations"]] if obj.get("UnhealthyEvaluations") is not None else None,
            "UpgradeDescription": ApplicationUpgradeDescription.from_dict(obj["UpgradeDescription"]) if obj.get("UpgradeDescription") is not None else None,
            "UpgradeDomainDurationInMilliseconds": obj.get("UpgradeDomainDurationInMilliseconds"),
            "UpgradeDomainProgressAtFailure": FailureUpgradeDomainProgressInfo.from_dict(obj["UpgradeDomainProgressAtFailure"]) if obj.get("UpgradeDomainProgressAtFailure") is not None else None,
            "UpgradeDomains": [UpgradeDomainInfo.from_dict(_item) for _item in obj["UpgradeDomains"]] if obj.get("UpgradeDomains") is not None else None,
            "UpgradeDurationInMilliseconds": obj.get("UpgradeDurationInMilliseconds"),
            "UpgradeState": obj.get("UpgradeState"),
            "UpgradeStatusDetails": obj.get("UpgradeStatusDetails")
        })
        return _obj



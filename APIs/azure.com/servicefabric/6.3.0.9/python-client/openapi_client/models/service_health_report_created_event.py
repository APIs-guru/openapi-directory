# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.fabric_event_kind import FabricEventKind
from openapi_client.models.service_event import ServiceEvent
from typing import Optional, Set
from typing_extensions import Self

class ServiceHealthReportCreatedEvent(ServiceEvent):
    """
    Service Health Report Created event.
    """ # noqa: E501
    description: StrictStr = Field(description="Description of report.", alias="Description")
    health_state: StrictStr = Field(description="Describes the property health state.", alias="HealthState")
    instance_id: StrictInt = Field(description="Id of Service instance.", alias="InstanceId")
    var_property: StrictStr = Field(description="Describes the property.", alias="Property")
    remove_when_expired: StrictBool = Field(description="Indicates the removal when it expires.", alias="RemoveWhenExpired")
    sequence_number: StrictInt = Field(description="Sequence number of report.", alias="SequenceNumber")
    source_id: StrictStr = Field(description="Id of report source.", alias="SourceId")
    source_utc_timestamp: datetime = Field(description="Source time.", alias="SourceUtcTimestamp")
    time_to_live_ms: StrictInt = Field(description="Time to live in milli-seconds.", alias="TimeToLiveMs")
    __properties: ClassVar[List[str]] = ["EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp", "ServiceId", "Description", "HealthState", "InstanceId", "Property", "RemoveWhenExpired", "SequenceNumber", "SourceId", "SourceUtcTimestamp", "TimeToLiveMs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceHealthReportCreatedEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceHealthReportCreatedEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EventInstanceId": obj.get("EventInstanceId"),
            "HasCorrelatedEvents": obj.get("HasCorrelatedEvents"),
            "Kind": obj.get("Kind"),
            "TimeStamp": obj.get("TimeStamp"),
            "ServiceId": obj.get("ServiceId"),
            "Description": obj.get("Description"),
            "HealthState": obj.get("HealthState"),
            "InstanceId": obj.get("InstanceId"),
            "Property": obj.get("Property"),
            "RemoveWhenExpired": obj.get("RemoveWhenExpired"),
            "SequenceNumber": obj.get("SequenceNumber"),
            "SourceId": obj.get("SourceId"),
            "SourceUtcTimestamp": obj.get("SourceUtcTimestamp"),
            "TimeToLiveMs": obj.get("TimeToLiveMs")
        })
        return _obj



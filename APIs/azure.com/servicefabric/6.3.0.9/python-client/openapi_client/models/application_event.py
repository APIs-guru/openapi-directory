# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.fabric_event import FabricEvent
from openapi_client.models.fabric_event_kind import FabricEventKind
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.application_created_event import ApplicationCreatedEvent
    from openapi_client.models.application_deleted_event import ApplicationDeletedEvent
    from openapi_client.models.application_health_report_created_event import ApplicationHealthReportCreatedEvent
    from openapi_client.models.application_health_report_expired_event import ApplicationHealthReportExpiredEvent
    from openapi_client.models.application_upgrade_complete_event import ApplicationUpgradeCompleteEvent
    from openapi_client.models.application_upgrade_domain_complete_event import ApplicationUpgradeDomainCompleteEvent
    from openapi_client.models.application_upgrade_rollback_complete_event import ApplicationUpgradeRollbackCompleteEvent
    from openapi_client.models.application_upgrade_rollback_start_event import ApplicationUpgradeRollbackStartEvent
    from openapi_client.models.application_upgrade_start_event import ApplicationUpgradeStartEvent
    from openapi_client.models.chaos_restart_code_package_fault_completed_event import ChaosRestartCodePackageFaultCompletedEvent
    from openapi_client.models.chaos_restart_code_package_fault_scheduled_event import ChaosRestartCodePackageFaultScheduledEvent
    from openapi_client.models.container_deactivated_event import ContainerDeactivatedEvent
    from openapi_client.models.deployed_application_health_report_created_event import DeployedApplicationHealthReportCreatedEvent
    from openapi_client.models.deployed_application_health_report_expired_event import DeployedApplicationHealthReportExpiredEvent
    from openapi_client.models.deployed_service_health_report_created_event import DeployedServiceHealthReportCreatedEvent
    from openapi_client.models.deployed_service_health_report_expired_event import DeployedServiceHealthReportExpiredEvent
    from openapi_client.models.process_deactivated_event import ProcessDeactivatedEvent

class ApplicationEvent(FabricEvent):
    """
    Represents the base for all Application Events.
    """ # noqa: E501
    application_id: StrictStr = Field(description="The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.", alias="ApplicationId")
    __properties: ClassVar[List[str]] = ["EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp", "ApplicationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ApplicationCreatedEvent': 'ApplicationCreatedEvent','ApplicationDeletedEvent': 'ApplicationDeletedEvent','ApplicationHealthReportCreatedEvent': 'ApplicationHealthReportCreatedEvent','ApplicationHealthReportExpiredEvent': 'ApplicationHealthReportExpiredEvent','ApplicationUpgradeCompleteEvent': 'ApplicationUpgradeCompleteEvent','ApplicationUpgradeDomainCompleteEvent': 'ApplicationUpgradeDomainCompleteEvent','ApplicationUpgradeRollbackCompleteEvent': 'ApplicationUpgradeRollbackCompleteEvent','ApplicationUpgradeRollbackStartEvent': 'ApplicationUpgradeRollbackStartEvent','ApplicationUpgradeStartEvent': 'ApplicationUpgradeStartEvent','ChaosRestartCodePackageFaultCompletedEvent': 'ChaosRestartCodePackageFaultCompletedEvent','ChaosRestartCodePackageFaultScheduledEvent': 'ChaosRestartCodePackageFaultScheduledEvent','ContainerDeactivatedEvent': 'ContainerDeactivatedEvent','DeployedApplicationHealthReportCreatedEvent': 'DeployedApplicationHealthReportCreatedEvent','DeployedApplicationHealthReportExpiredEvent': 'DeployedApplicationHealthReportExpiredEvent','DeployedServiceHealthReportCreatedEvent': 'DeployedServiceHealthReportCreatedEvent','DeployedServiceHealthReportExpiredEvent': 'DeployedServiceHealthReportExpiredEvent','ProcessDeactivatedEvent': 'ProcessDeactivatedEvent'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ApplicationCreatedEvent, ApplicationDeletedEvent, ApplicationHealthReportCreatedEvent, ApplicationHealthReportExpiredEvent, ApplicationUpgradeCompleteEvent, ApplicationUpgradeDomainCompleteEvent, ApplicationUpgradeRollbackCompleteEvent, ApplicationUpgradeRollbackStartEvent, ApplicationUpgradeStartEvent, ChaosRestartCodePackageFaultCompletedEvent, ChaosRestartCodePackageFaultScheduledEvent, ContainerDeactivatedEvent, DeployedApplicationHealthReportCreatedEvent, DeployedApplicationHealthReportExpiredEvent, DeployedServiceHealthReportCreatedEvent, DeployedServiceHealthReportExpiredEvent, ProcessDeactivatedEvent]]:
        """Create an instance of ApplicationEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ApplicationCreatedEvent, ApplicationDeletedEvent, ApplicationHealthReportCreatedEvent, ApplicationHealthReportExpiredEvent, ApplicationUpgradeCompleteEvent, ApplicationUpgradeDomainCompleteEvent, ApplicationUpgradeRollbackCompleteEvent, ApplicationUpgradeRollbackStartEvent, ApplicationUpgradeStartEvent, ChaosRestartCodePackageFaultCompletedEvent, ChaosRestartCodePackageFaultScheduledEvent, ContainerDeactivatedEvent, DeployedApplicationHealthReportCreatedEvent, DeployedApplicationHealthReportExpiredEvent, DeployedServiceHealthReportCreatedEvent, DeployedServiceHealthReportExpiredEvent, ProcessDeactivatedEvent]]:
        """Create an instance of ApplicationEvent from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ApplicationCreatedEvent':
            return import_module("openapi_client.models.application_created_event").ApplicationCreatedEvent.from_dict(obj)
        if object_type ==  'ApplicationDeletedEvent':
            return import_module("openapi_client.models.application_deleted_event").ApplicationDeletedEvent.from_dict(obj)
        if object_type ==  'ApplicationHealthReportCreatedEvent':
            return import_module("openapi_client.models.application_health_report_created_event").ApplicationHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'ApplicationHealthReportExpiredEvent':
            return import_module("openapi_client.models.application_health_report_expired_event").ApplicationHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeCompleteEvent':
            return import_module("openapi_client.models.application_upgrade_complete_event").ApplicationUpgradeCompleteEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeDomainCompleteEvent':
            return import_module("openapi_client.models.application_upgrade_domain_complete_event").ApplicationUpgradeDomainCompleteEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeRollbackCompleteEvent':
            return import_module("openapi_client.models.application_upgrade_rollback_complete_event").ApplicationUpgradeRollbackCompleteEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeRollbackStartEvent':
            return import_module("openapi_client.models.application_upgrade_rollback_start_event").ApplicationUpgradeRollbackStartEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeStartEvent':
            return import_module("openapi_client.models.application_upgrade_start_event").ApplicationUpgradeStartEvent.from_dict(obj)
        if object_type ==  'ChaosRestartCodePackageFaultCompletedEvent':
            return import_module("openapi_client.models.chaos_restart_code_package_fault_completed_event").ChaosRestartCodePackageFaultCompletedEvent.from_dict(obj)
        if object_type ==  'ChaosRestartCodePackageFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_restart_code_package_fault_scheduled_event").ChaosRestartCodePackageFaultScheduledEvent.from_dict(obj)
        if object_type ==  'ContainerDeactivatedEvent':
            return import_module("openapi_client.models.container_deactivated_event").ContainerDeactivatedEvent.from_dict(obj)
        if object_type ==  'DeployedApplicationHealthReportCreatedEvent':
            return import_module("openapi_client.models.deployed_application_health_report_created_event").DeployedApplicationHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'DeployedApplicationHealthReportExpiredEvent':
            return import_module("openapi_client.models.deployed_application_health_report_expired_event").DeployedApplicationHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'DeployedServiceHealthReportCreatedEvent':
            return import_module("openapi_client.models.deployed_service_health_report_created_event").DeployedServiceHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'DeployedServiceHealthReportExpiredEvent':
            return import_module("openapi_client.models.deployed_service_health_report_expired_event").DeployedServiceHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'ProcessDeactivatedEvent':
            return import_module("openapi_client.models.process_deactivated_event").ProcessDeactivatedEvent.from_dict(obj)

        raise ValueError("ApplicationEvent failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



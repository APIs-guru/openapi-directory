# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.node_deactivation_intent import NodeDeactivationIntent
from openapi_client.models.node_deactivation_status import NodeDeactivationStatus
from openapi_client.models.node_deactivation_task import NodeDeactivationTask
from openapi_client.models.safety_check_wrapper import SafetyCheckWrapper
from typing import Optional, Set
from typing_extensions import Self

class NodeDeactivationInfo(BaseModel):
    """
    Information about the node deactivation. This information is valid for a node that is undergoing deactivation or has already been deactivated.
    """ # noqa: E501
    node_deactivation_intent: Optional[NodeDeactivationIntent] = Field(default=None, alias="NodeDeactivationIntent")
    node_deactivation_status: Optional[NodeDeactivationStatus] = Field(default=None, alias="NodeDeactivationStatus")
    node_deactivation_task: Optional[List[NodeDeactivationTask]] = Field(default=None, description="List of tasks representing the deactivation operation on the node.", alias="NodeDeactivationTask")
    pending_safety_checks: Optional[List[SafetyCheckWrapper]] = Field(default=None, description="List of pending safety checks", alias="PendingSafetyChecks")
    __properties: ClassVar[List[str]] = ["NodeDeactivationIntent", "NodeDeactivationStatus", "NodeDeactivationTask", "PendingSafetyChecks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeDeactivationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in node_deactivation_task (list)
        _items = []
        if self.node_deactivation_task:
            for _item_node_deactivation_task in self.node_deactivation_task:
                if _item_node_deactivation_task:
                    _items.append(_item_node_deactivation_task.to_dict())
            _dict['NodeDeactivationTask'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pending_safety_checks (list)
        _items = []
        if self.pending_safety_checks:
            for _item_pending_safety_checks in self.pending_safety_checks:
                if _item_pending_safety_checks:
                    _items.append(_item_pending_safety_checks.to_dict())
            _dict['PendingSafetyChecks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeDeactivationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "NodeDeactivationIntent": obj.get("NodeDeactivationIntent"),
            "NodeDeactivationStatus": obj.get("NodeDeactivationStatus"),
            "NodeDeactivationTask": [NodeDeactivationTask.from_dict(_item) for _item in obj["NodeDeactivationTask"]] if obj.get("NodeDeactivationTask") is not None else None,
            "PendingSafetyChecks": [SafetyCheckWrapper.from_dict(_item) for _item in obj["PendingSafetyChecks"]] if obj.get("PendingSafetyChecks") is not None else None
        })
        return _obj



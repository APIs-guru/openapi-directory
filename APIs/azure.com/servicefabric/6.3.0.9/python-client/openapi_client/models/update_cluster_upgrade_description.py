# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_health_policies import ApplicationHealthPolicies
from openapi_client.models.cluster_health_policy import ClusterHealthPolicy
from openapi_client.models.cluster_upgrade_health_policy_object import ClusterUpgradeHealthPolicyObject
from openapi_client.models.rolling_upgrade_update_description import RollingUpgradeUpdateDescription
from openapi_client.models.upgrade_type import UpgradeType
from typing import Optional, Set
from typing_extensions import Self

class UpdateClusterUpgradeDescription(BaseModel):
    """
    Parameters for updating a cluster upgrade.
    """ # noqa: E501
    application_health_policy_map: Optional[ApplicationHealthPolicies] = Field(default=None, alias="ApplicationHealthPolicyMap")
    cluster_health_policy: Optional[ClusterHealthPolicy] = Field(default=None, alias="ClusterHealthPolicy")
    cluster_upgrade_health_policy: Optional[ClusterUpgradeHealthPolicyObject] = Field(default=None, alias="ClusterUpgradeHealthPolicy")
    enable_delta_health_evaluation: Optional[StrictBool] = Field(default=None, description="When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.", alias="EnableDeltaHealthEvaluation")
    update_description: Optional[RollingUpgradeUpdateDescription] = Field(default=None, alias="UpdateDescription")
    upgrade_kind: Optional[UpgradeType] = Field(default=UpgradeType.ROLLING, alias="UpgradeKind")
    __properties: ClassVar[List[str]] = ["ApplicationHealthPolicyMap", "ClusterHealthPolicy", "ClusterUpgradeHealthPolicy", "EnableDeltaHealthEvaluation", "UpdateDescription", "UpgradeKind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateClusterUpgradeDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_health_policy_map
        if self.application_health_policy_map:
            _dict['ApplicationHealthPolicyMap'] = self.application_health_policy_map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_health_policy
        if self.cluster_health_policy:
            _dict['ClusterHealthPolicy'] = self.cluster_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_upgrade_health_policy
        if self.cluster_upgrade_health_policy:
            _dict['ClusterUpgradeHealthPolicy'] = self.cluster_upgrade_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_description
        if self.update_description:
            _dict['UpdateDescription'] = self.update_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateClusterUpgradeDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationHealthPolicyMap": ApplicationHealthPolicies.from_dict(obj["ApplicationHealthPolicyMap"]) if obj.get("ApplicationHealthPolicyMap") is not None else None,
            "ClusterHealthPolicy": ClusterHealthPolicy.from_dict(obj["ClusterHealthPolicy"]) if obj.get("ClusterHealthPolicy") is not None else None,
            "ClusterUpgradeHealthPolicy": ClusterUpgradeHealthPolicyObject.from_dict(obj["ClusterUpgradeHealthPolicy"]) if obj.get("ClusterUpgradeHealthPolicy") is not None else None,
            "EnableDeltaHealthEvaluation": obj.get("EnableDeltaHealthEvaluation"),
            "UpdateDescription": RollingUpgradeUpdateDescription.from_dict(obj["UpdateDescription"]) if obj.get("UpdateDescription") is not None else None,
            "UpgradeKind": obj.get("UpgradeKind") if obj.get("UpgradeKind") is not None else UpgradeType.ROLLING
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployed_service_replica_detail_info import DeployedServiceReplicaDetailInfo
from openapi_client.models.deployed_stateless_service_instance_info import DeployedStatelessServiceInstanceInfo
from openapi_client.models.load_metric_report_info import LoadMetricReportInfo
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_operation_name import ServiceOperationName
from typing import Optional, Set
from typing_extensions import Self

class DeployedStatelessServiceInstanceDetailInfo(DeployedServiceReplicaDetailInfo):
    """
    Information about a stateless instance running in a code package. Note that DeployedServiceReplicaQueryResult will contain duplicate data like ServiceKind, ServiceName, PartitionId and InstanceId.
    """ # noqa: E501
    deployed_service_replica_query_result: Optional[DeployedStatelessServiceInstanceInfo] = Field(default=None, alias="DeployedServiceReplicaQueryResult")
    instance_id: Optional[StrictStr] = Field(default=None, description="Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance has failed over on the same or different node, it will get a different value for the InstanceId.", alias="InstanceId")
    __properties: ClassVar[List[str]] = ["CurrentServiceOperation", "CurrentServiceOperationStartTimeUtc", "PartitionId", "ReportedLoad", "ServiceKind", "ServiceName", "DeployedServiceReplicaQueryResult", "InstanceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeployedStatelessServiceInstanceDetailInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reported_load (list)
        _items = []
        if self.reported_load:
            for _item_reported_load in self.reported_load:
                if _item_reported_load:
                    _items.append(_item_reported_load.to_dict())
            _dict['ReportedLoad'] = _items
        # override the default output from pydantic by calling `to_dict()` of deployed_service_replica_query_result
        if self.deployed_service_replica_query_result:
            _dict['DeployedServiceReplicaQueryResult'] = self.deployed_service_replica_query_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeployedStatelessServiceInstanceDetailInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrentServiceOperation": obj.get("CurrentServiceOperation"),
            "CurrentServiceOperationStartTimeUtc": obj.get("CurrentServiceOperationStartTimeUtc"),
            "PartitionId": obj.get("PartitionId"),
            "ReportedLoad": [LoadMetricReportInfo.from_dict(_item) for _item in obj["ReportedLoad"]] if obj.get("ReportedLoad") is not None else None,
            "ServiceKind": obj.get("ServiceKind"),
            "ServiceName": obj.get("ServiceName"),
            "DeployedServiceReplicaQueryResult": DeployedStatelessServiceInstanceInfo.from_dict(obj["DeployedServiceReplicaQueryResult"]) if obj.get("DeployedServiceReplicaQueryResult") is not None else None,
            "InstanceId": obj.get("InstanceId")
        })
        return _obj



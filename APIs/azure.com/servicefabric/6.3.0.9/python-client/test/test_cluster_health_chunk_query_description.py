# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.3.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cluster_health_chunk_query_description import ClusterHealthChunkQueryDescription

class TestClusterHealthChunkQueryDescription(unittest.TestCase):
    """ClusterHealthChunkQueryDescription unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClusterHealthChunkQueryDescription:
        """Test ClusterHealthChunkQueryDescription
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClusterHealthChunkQueryDescription`
        """
        model = ClusterHealthChunkQueryDescription()
        if include_optional:
            return ClusterHealthChunkQueryDescription(
                application_filters = [
                    openapi_client.models.application_health_state_filter.ApplicationHealthStateFilter(
                        application_name_filter = '', 
                        application_type_name_filter = '', 
                        deployed_application_filters = [
                            openapi_client.models.deployed_application_health_state_filter.DeployedApplicationHealthStateFilter(
                                deployed_service_package_filters = [
                                    openapi_client.models.deployed_service_package_health_state_filter.DeployedServicePackageHealthStateFilter(
                                        health_state_filter = 56, 
                                        service_manifest_name_filter = '', 
                                        service_package_activation_id_filter = '', )
                                    ], 
                                health_state_filter = 56, 
                                node_name_filter = '', )
                            ], 
                        health_state_filter = 56, 
                        service_filters = [
                            openapi_client.models.service_health_state_filter.ServiceHealthStateFilter(
                                health_state_filter = 56, 
                                partition_filters = [
                                    openapi_client.models.partition_health_state_filter.PartitionHealthStateFilter(
                                        health_state_filter = 56, 
                                        partition_id_filter = '', 
                                        replica_filters = [
                                            openapi_client.models.replica_health_state_filter.ReplicaHealthStateFilter(
                                                health_state_filter = 56, 
                                                replica_or_instance_id_filter = '', )
                                            ], )
                                    ], 
                                service_name_filter = '', )
                            ], )
                    ],
                application_health_policies = openapi_client.models.application_health_policies.ApplicationHealthPolicies(
                    application_health_policy_map = [
                        openapi_client.models.application_health_policy_map_item.ApplicationHealthPolicyMapItem(
                            key = '', 
                            value = openapi_client.models.application_health_policy.ApplicationHealthPolicy(
                                consider_warning_as_error = True, 
                                default_service_type_health_policy = openapi_client.models.service_type_health_policy.ServiceTypeHealthPolicy(
                                    max_percent_unhealthy_partitions_per_service = 56, 
                                    max_percent_unhealthy_replicas_per_partition = 56, 
                                    max_percent_unhealthy_services = 56, ), 
                                max_percent_unhealthy_deployed_applications = 56, 
                                service_type_health_policy_map = [
                                    openapi_client.models.service_type_health_policy_map_item.ServiceTypeHealthPolicyMapItem(
                                        key = '', 
                                        value = openapi_client.models.service_type_health_policy.ServiceTypeHealthPolicy(
                                            max_percent_unhealthy_partitions_per_service = 56, 
                                            max_percent_unhealthy_replicas_per_partition = 56, 
                                            max_percent_unhealthy_services = 56, ), )
                                    ], ), )
                        ], ),
                cluster_health_policy = openapi_client.models.cluster_health_policy.ClusterHealthPolicy(
                    application_type_health_policy_map = [
                        openapi_client.models.application_type_health_policy_map_item.ApplicationTypeHealthPolicyMapItem(
                            key = '', 
                            value = 56, )
                        ], 
                    consider_warning_as_error = True, 
                    max_percent_unhealthy_applications = 56, 
                    max_percent_unhealthy_nodes = 56, ),
                node_filters = [
                    openapi_client.models.node_health_state_filter.NodeHealthStateFilter(
                        health_state_filter = 56, 
                        node_name_filter = '', )
                    ]
            )
        else:
            return ClusterHealthChunkQueryDescription(
        )
        """

    def testClusterHealthChunkQueryDescription(self):
        """Test ClusterHealthChunkQueryDescription"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

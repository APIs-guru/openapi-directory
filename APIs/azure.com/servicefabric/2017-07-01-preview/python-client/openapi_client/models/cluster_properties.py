# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2017-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.add_on_features import AddOnFeatures
from openapi_client.models.azure_active_directory import AzureActiveDirectory
from openapi_client.models.certificate_description import CertificateDescription
from openapi_client.models.client_certificate_common_name import ClientCertificateCommonName
from openapi_client.models.client_certificate_thumbprint import ClientCertificateThumbprint
from openapi_client.models.cluster_state import ClusterState
from openapi_client.models.cluster_upgrade_policy import ClusterUpgradePolicy
from openapi_client.models.cluster_version_details import ClusterVersionDetails
from openapi_client.models.diagnostics_storage_account_config import DiagnosticsStorageAccountConfig
from openapi_client.models.node_type_description import NodeTypeDescription
from openapi_client.models.reliability_level import ReliabilityLevel
from openapi_client.models.settings_section_description import SettingsSectionDescription
from openapi_client.models.upgrade_mode import UpgradeMode
from typing import Optional, Set
from typing_extensions import Self

class ClusterProperties(BaseModel):
    """
    Describes the cluster resource properties.
    """ # noqa: E501
    add_on_features: Optional[List[AddOnFeatures]] = Field(default=None, description="The list of add-on features to enable in the cluster.", alias="addOnFeatures")
    available_cluster_versions: Optional[List[ClusterVersionDetails]] = Field(default=None, description="The Service Fabric runtime versions available for this cluster.", alias="availableClusterVersions")
    azure_active_directory: Optional[AzureActiveDirectory] = Field(default=None, alias="azureActiveDirectory")
    certificate: Optional[CertificateDescription] = None
    client_certificate_common_names: Optional[List[ClientCertificateCommonName]] = Field(default=None, description="The list of client certificates referenced by common name that are allowed to manage the cluster.", alias="clientCertificateCommonNames")
    client_certificate_thumbprints: Optional[List[ClientCertificateThumbprint]] = Field(default=None, description="The list of client certificates referenced by thumbprint that are allowed to manage the cluster.", alias="clientCertificateThumbprints")
    cluster_code_version: Optional[StrictStr] = Field(default=None, description="The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.", alias="clusterCodeVersion")
    cluster_endpoint: Optional[StrictStr] = Field(default=None, description="The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.", alias="clusterEndpoint")
    cluster_id: Optional[StrictStr] = Field(default=None, description="A service generated unique identifier for the cluster resource.", alias="clusterId")
    cluster_state: Optional[ClusterState] = Field(default=None, alias="clusterState")
    diagnostics_storage_account_config: Optional[DiagnosticsStorageAccountConfig] = Field(default=None, alias="diagnosticsStorageAccountConfig")
    fabric_settings: Optional[List[SettingsSectionDescription]] = Field(default=None, description="The list of custom fabric settings to configure the cluster.", alias="fabricSettings")
    management_endpoint: StrictStr = Field(description="The http management endpoint of the cluster.", alias="managementEndpoint")
    node_types: List[NodeTypeDescription] = Field(description="The list of node types in the cluster.", alias="nodeTypes")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the cluster resource.", alias="provisioningState")
    reliability_level: Optional[ReliabilityLevel] = Field(default=None, alias="reliabilityLevel")
    reverse_proxy_certificate: Optional[CertificateDescription] = Field(default=None, alias="reverseProxyCertificate")
    upgrade_description: Optional[ClusterUpgradePolicy] = Field(default=None, alias="upgradeDescription")
    upgrade_mode: Optional[UpgradeMode] = Field(default=None, alias="upgradeMode")
    vm_image: Optional[StrictStr] = Field(default=None, description="The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.", alias="vmImage")
    __properties: ClassVar[List[str]] = ["addOnFeatures", "availableClusterVersions", "azureActiveDirectory", "certificate", "clientCertificateCommonNames", "clientCertificateThumbprints", "clusterCodeVersion", "clusterEndpoint", "clusterId", "clusterState", "diagnosticsStorageAccountConfig", "fabricSettings", "managementEndpoint", "nodeTypes", "provisioningState", "reliabilityLevel", "reverseProxyCertificate", "upgradeDescription", "upgradeMode", "vmImage"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Updating', 'Succeeded', 'Failed', 'Canceled']):
            raise ValueError("must be one of enum values ('Updating', 'Succeeded', 'Failed', 'Canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_endpoint",
            "cluster_id",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_cluster_versions (list)
        _items = []
        if self.available_cluster_versions:
            for _item_available_cluster_versions in self.available_cluster_versions:
                if _item_available_cluster_versions:
                    _items.append(_item_available_cluster_versions.to_dict())
            _dict['availableClusterVersions'] = _items
        # override the default output from pydantic by calling `to_dict()` of azure_active_directory
        if self.azure_active_directory:
            _dict['azureActiveDirectory'] = self.azure_active_directory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of certificate
        if self.certificate:
            _dict['certificate'] = self.certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in client_certificate_common_names (list)
        _items = []
        if self.client_certificate_common_names:
            for _item_client_certificate_common_names in self.client_certificate_common_names:
                if _item_client_certificate_common_names:
                    _items.append(_item_client_certificate_common_names.to_dict())
            _dict['clientCertificateCommonNames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in client_certificate_thumbprints (list)
        _items = []
        if self.client_certificate_thumbprints:
            for _item_client_certificate_thumbprints in self.client_certificate_thumbprints:
                if _item_client_certificate_thumbprints:
                    _items.append(_item_client_certificate_thumbprints.to_dict())
            _dict['clientCertificateThumbprints'] = _items
        # override the default output from pydantic by calling `to_dict()` of diagnostics_storage_account_config
        if self.diagnostics_storage_account_config:
            _dict['diagnosticsStorageAccountConfig'] = self.diagnostics_storage_account_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fabric_settings (list)
        _items = []
        if self.fabric_settings:
            for _item_fabric_settings in self.fabric_settings:
                if _item_fabric_settings:
                    _items.append(_item_fabric_settings.to_dict())
            _dict['fabricSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in node_types (list)
        _items = []
        if self.node_types:
            for _item_node_types in self.node_types:
                if _item_node_types:
                    _items.append(_item_node_types.to_dict())
            _dict['nodeTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of reverse_proxy_certificate
        if self.reverse_proxy_certificate:
            _dict['reverseProxyCertificate'] = self.reverse_proxy_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_description
        if self.upgrade_description:
            _dict['upgradeDescription'] = self.upgrade_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addOnFeatures": obj.get("addOnFeatures"),
            "availableClusterVersions": [ClusterVersionDetails.from_dict(_item) for _item in obj["availableClusterVersions"]] if obj.get("availableClusterVersions") is not None else None,
            "azureActiveDirectory": AzureActiveDirectory.from_dict(obj["azureActiveDirectory"]) if obj.get("azureActiveDirectory") is not None else None,
            "certificate": CertificateDescription.from_dict(obj["certificate"]) if obj.get("certificate") is not None else None,
            "clientCertificateCommonNames": [ClientCertificateCommonName.from_dict(_item) for _item in obj["clientCertificateCommonNames"]] if obj.get("clientCertificateCommonNames") is not None else None,
            "clientCertificateThumbprints": [ClientCertificateThumbprint.from_dict(_item) for _item in obj["clientCertificateThumbprints"]] if obj.get("clientCertificateThumbprints") is not None else None,
            "clusterCodeVersion": obj.get("clusterCodeVersion"),
            "clusterEndpoint": obj.get("clusterEndpoint"),
            "clusterId": obj.get("clusterId"),
            "clusterState": obj.get("clusterState"),
            "diagnosticsStorageAccountConfig": DiagnosticsStorageAccountConfig.from_dict(obj["diagnosticsStorageAccountConfig"]) if obj.get("diagnosticsStorageAccountConfig") is not None else None,
            "fabricSettings": [SettingsSectionDescription.from_dict(_item) for _item in obj["fabricSettings"]] if obj.get("fabricSettings") is not None else None,
            "managementEndpoint": obj.get("managementEndpoint"),
            "nodeTypes": [NodeTypeDescription.from_dict(_item) for _item in obj["nodeTypes"]] if obj.get("nodeTypes") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "reliabilityLevel": obj.get("reliabilityLevel"),
            "reverseProxyCertificate": CertificateDescription.from_dict(obj["reverseProxyCertificate"]) if obj.get("reverseProxyCertificate") is not None else None,
            "upgradeDescription": ClusterUpgradePolicy.from_dict(obj["upgradeDescription"]) if obj.get("upgradeDescription") is not None else None,
            "upgradeMode": obj.get("upgradeMode"),
            "vmImage": obj.get("vmImage")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployed_service_replica_info import DeployedServiceReplicaInfo
from openapi_client.models.reconfiguration_information import ReconfigurationInformation
from openapi_client.models.replica_role import ReplicaRole
from openapi_client.models.replica_status import ReplicaStatus
from openapi_client.models.service_kind import ServiceKind
from typing import Optional, Set
from typing_extensions import Self

class DeployedStatefulServiceReplicaInfo(DeployedServiceReplicaInfo):
    """
    Information about a stateful service replica deployed on a node.
    """ # noqa: E501
    reconfiguration_information: Optional[ReconfigurationInformation] = Field(default=None, alias="ReconfigurationInformation")
    replica_id: Optional[StrictStr] = Field(default=None, description="Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.", alias="ReplicaId")
    replica_role: Optional[ReplicaRole] = Field(default=None, alias="ReplicaRole")
    __properties: ClassVar[List[str]] = ["Address", "CodePackageName", "HostProcessId", "PartitionId", "ReplicaStatus", "ServiceKind", "ServiceManifestName", "ServiceName", "ServicePackageActivationId", "ServiceTypeName", "ReconfigurationInformation", "ReplicaId", "ReplicaRole"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeployedStatefulServiceReplicaInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reconfiguration_information
        if self.reconfiguration_information:
            _dict['ReconfigurationInformation'] = self.reconfiguration_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeployedStatefulServiceReplicaInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Address": obj.get("Address"),
            "CodePackageName": obj.get("CodePackageName"),
            "HostProcessId": obj.get("HostProcessId"),
            "PartitionId": obj.get("PartitionId"),
            "ReplicaStatus": obj.get("ReplicaStatus"),
            "ServiceKind": obj.get("ServiceKind"),
            "ServiceManifestName": obj.get("ServiceManifestName"),
            "ServiceName": obj.get("ServiceName"),
            "ServicePackageActivationId": obj.get("ServicePackageActivationId"),
            "ServiceTypeName": obj.get("ServiceTypeName"),
            "ReconfigurationInformation": ReconfigurationInformation.from_dict(obj["ReconfigurationInformation"]) if obj.get("ReconfigurationInformation") is not None else None,
            "ReplicaId": obj.get("ReplicaId"),
            "ReplicaRole": obj.get("ReplicaRole")
        })
        return _obj



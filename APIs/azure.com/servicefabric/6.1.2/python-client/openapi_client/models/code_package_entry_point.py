# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.code_package_entry_point_statistics import CodePackageEntryPointStatistics
from openapi_client.models.entry_point_status import EntryPointStatus
from typing import Optional, Set
from typing_extensions import Self

class CodePackageEntryPoint(BaseModel):
    """
    Information about setup or main entry point of a code package deployed on a Service Fabric node.
    """ # noqa: E501
    code_package_entry_point_statistics: Optional[CodePackageEntryPointStatistics] = Field(default=None, alias="CodePackageEntryPointStatistics")
    entry_point_location: Optional[StrictStr] = Field(default=None, description="The location of entry point executable on the node.", alias="EntryPointLocation")
    instance_id: Optional[StrictStr] = Field(default=None, description="The instance id for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.", alias="InstanceId")
    next_activation_time: Optional[datetime] = Field(default=None, description="The time (in UTC) when the entry point executable will be run next.", alias="NextActivationTime")
    process_id: Optional[StrictStr] = Field(default=None, description="The process id of the entry point.", alias="ProcessId")
    run_as_user_name: Optional[StrictStr] = Field(default=None, description="The user name under which entry point executable is run on the node.", alias="RunAsUserName")
    status: Optional[EntryPointStatus] = Field(default=None, alias="Status")
    __properties: ClassVar[List[str]] = ["CodePackageEntryPointStatistics", "EntryPointLocation", "InstanceId", "NextActivationTime", "ProcessId", "RunAsUserName", "Status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CodePackageEntryPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of code_package_entry_point_statistics
        if self.code_package_entry_point_statistics:
            _dict['CodePackageEntryPointStatistics'] = self.code_package_entry_point_statistics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CodePackageEntryPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CodePackageEntryPointStatistics": CodePackageEntryPointStatistics.from_dict(obj["CodePackageEntryPointStatistics"]) if obj.get("CodePackageEntryPointStatistics") is not None else None,
            "EntryPointLocation": obj.get("EntryPointLocation"),
            "InstanceId": obj.get("InstanceId"),
            "NextActivationTime": obj.get("NextActivationTime"),
            "ProcessId": obj.get("ProcessId"),
            "RunAsUserName": obj.get("RunAsUserName"),
            "Status": obj.get("Status")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_parameter import ApplicationParameter
from openapi_client.models.application_type_definition_kind import ApplicationTypeDefinitionKind
from openapi_client.models.application_type_status import ApplicationTypeStatus
from typing import Optional, Set
from typing_extensions import Self

class ApplicationTypeInfo(BaseModel):
    """
    Information about an application type.
    """ # noqa: E501
    application_type_definition_kind: Optional[ApplicationTypeDefinitionKind] = Field(default=None, alias="ApplicationTypeDefinitionKind")
    default_parameter_list: Optional[List[ApplicationParameter]] = Field(default=None, description="List of application type parameters that can be overridden when creating or updating the application.", alias="DefaultParameterList")
    name: Optional[StrictStr] = Field(default=None, description="The application type name as defined in the application manifest.", alias="Name")
    status: Optional[ApplicationTypeStatus] = Field(default=None, alias="Status")
    status_details: Optional[StrictStr] = Field(default=None, description="Additional detailed information about the status of the application type.", alias="StatusDetails")
    version: Optional[StrictStr] = Field(default=None, description="The version of the application type as defined in the application manifest.", alias="Version")
    __properties: ClassVar[List[str]] = ["ApplicationTypeDefinitionKind", "DefaultParameterList", "Name", "Status", "StatusDetails", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationTypeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in default_parameter_list (list)
        _items = []
        if self.default_parameter_list:
            for _item_default_parameter_list in self.default_parameter_list:
                if _item_default_parameter_list:
                    _items.append(_item_default_parameter_list.to_dict())
            _dict['DefaultParameterList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationTypeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationTypeDefinitionKind": obj.get("ApplicationTypeDefinitionKind"),
            "DefaultParameterList": [ApplicationParameter.from_dict(_item) for _item in obj["DefaultParameterList"]] if obj.get("DefaultParameterList") is not None else None,
            "Name": obj.get("Name"),
            "Status": obj.get("Status"),
            "StatusDetails": obj.get("StatusDetails"),
            "Version": obj.get("Version")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RepairTaskHistory(BaseModel):
    """
    A record of the times when the repair task entered each state.  This type supports the Service Fabric platform; it is not meant to be used directly from your code. 
    """ # noqa: E501
    approved_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task entered the Approved state", alias="ApprovedUtcTimestamp")
    claimed_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task entered the Claimed state.", alias="ClaimedUtcTimestamp")
    completed_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task entered the Completed state", alias="CompletedUtcTimestamp")
    created_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task entered the Created state.", alias="CreatedUtcTimestamp")
    executing_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task entered the Executing state", alias="ExecutingUtcTimestamp")
    preparing_health_check_end_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task completed the health check in the Preparing state.", alias="PreparingHealthCheckEndUtcTimestamp")
    preparing_health_check_start_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task started the health check in the Preparing state.", alias="PreparingHealthCheckStartUtcTimestamp")
    preparing_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task entered the Preparing state.", alias="PreparingUtcTimestamp")
    restoring_health_check_end_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task completed the health check in the Restoring state.", alias="RestoringHealthCheckEndUtcTimestamp")
    restoring_health_check_start_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task started the health check in the Restoring state.", alias="RestoringHealthCheckStartUtcTimestamp")
    restoring_utc_timestamp: Optional[datetime] = Field(default=None, description="The time when the repair task entered the Restoring state", alias="RestoringUtcTimestamp")
    __properties: ClassVar[List[str]] = ["ApprovedUtcTimestamp", "ClaimedUtcTimestamp", "CompletedUtcTimestamp", "CreatedUtcTimestamp", "ExecutingUtcTimestamp", "PreparingHealthCheckEndUtcTimestamp", "PreparingHealthCheckStartUtcTimestamp", "PreparingUtcTimestamp", "RestoringHealthCheckEndUtcTimestamp", "RestoringHealthCheckStartUtcTimestamp", "RestoringUtcTimestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RepairTaskHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RepairTaskHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApprovedUtcTimestamp": obj.get("ApprovedUtcTimestamp"),
            "ClaimedUtcTimestamp": obj.get("ClaimedUtcTimestamp"),
            "CompletedUtcTimestamp": obj.get("CompletedUtcTimestamp"),
            "CreatedUtcTimestamp": obj.get("CreatedUtcTimestamp"),
            "ExecutingUtcTimestamp": obj.get("ExecutingUtcTimestamp"),
            "PreparingHealthCheckEndUtcTimestamp": obj.get("PreparingHealthCheckEndUtcTimestamp"),
            "PreparingHealthCheckStartUtcTimestamp": obj.get("PreparingHealthCheckStartUtcTimestamp"),
            "PreparingUtcTimestamp": obj.get("PreparingUtcTimestamp"),
            "RestoringHealthCheckEndUtcTimestamp": obj.get("RestoringHealthCheckEndUtcTimestamp"),
            "RestoringHealthCheckStartUtcTimestamp": obj.get("RestoringHealthCheckStartUtcTimestamp"),
            "RestoringUtcTimestamp": obj.get("RestoringUtcTimestamp")
        })
        return _obj



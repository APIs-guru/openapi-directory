# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_package_activation_mode import ServicePackageActivationMode
from typing import Optional, Set
from typing_extensions import Self

class ServiceFromTemplateDescription(BaseModel):
    """
    Defines description for creating a Service Fabric service from a template defined in the application manifest. 
    """ # noqa: E501
    application_name: StrictStr = Field(description="The name of the application, including the 'fabric:' URI scheme.", alias="ApplicationName")
    initialization_data: Optional[List[StrictInt]] = Field(default=None, description="Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.", alias="InitializationData")
    service_dns_name: Optional[StrictStr] = Field(default=None, description="The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.", alias="ServiceDnsName")
    service_name: StrictStr = Field(description="The full name of the service with 'fabric:' URI scheme.", alias="ServiceName")
    service_package_activation_mode: Optional[ServicePackageActivationMode] = Field(default=None, alias="ServicePackageActivationMode")
    service_type_name: StrictStr = Field(description="Name of the service type as specified in the service manifest.", alias="ServiceTypeName")
    __properties: ClassVar[List[str]] = ["ApplicationName", "InitializationData", "ServiceDnsName", "ServiceName", "ServicePackageActivationMode", "ServiceTypeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceFromTemplateDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceFromTemplateDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationName": obj.get("ApplicationName"),
            "InitializationData": obj.get("InitializationData"),
            "ServiceDnsName": obj.get("ServiceDnsName"),
            "ServiceName": obj.get("ServiceName"),
            "ServicePackageActivationMode": obj.get("ServicePackageActivationMode"),
            "ServiceTypeName": obj.get("ServiceTypeName")
        })
        return _obj



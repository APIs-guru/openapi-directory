# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.provision_application_type_kind import ProvisionApplicationTypeKind
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.external_store_provision_application_type_description import ExternalStoreProvisionApplicationTypeDescription
    from openapi_client.models.provision_application_type_description import ProvisionApplicationTypeDescription

class ProvisionApplicationTypeDescriptionBase(BaseModel):
    """
    Represents the type of registration or provision requested, and if the operation needs to be asynchronous or not. Supported types of provision operations are from either image store or external store.
    """ # noqa: E501
    var_async: StrictBool = Field(description="Indicates whether or not provisioning should occur asynchronously. When set to true, the provision operation returns when the request is accepted by the system, and the provision operation continues without any timeout limit. The default value is false. For large application packages, we recommend setting the value to true.", alias="Async")
    kind: ProvisionApplicationTypeKind = Field(alias="Kind")
    __properties: ClassVar[List[str]] = ["Async", "Kind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ExternalStoreProvisionApplicationTypeDescription': 'ExternalStoreProvisionApplicationTypeDescription','ProvisionApplicationTypeDescription': 'ProvisionApplicationTypeDescription'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ExternalStoreProvisionApplicationTypeDescription, ProvisionApplicationTypeDescription]]:
        """Create an instance of ProvisionApplicationTypeDescriptionBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ExternalStoreProvisionApplicationTypeDescription, ProvisionApplicationTypeDescription]]:
        """Create an instance of ProvisionApplicationTypeDescriptionBase from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ExternalStoreProvisionApplicationTypeDescription':
            return import_module("openapi_client.models.external_store_provision_application_type_description").ExternalStoreProvisionApplicationTypeDescription.from_dict(obj)
        if object_type ==  'ProvisionApplicationTypeDescription':
            return import_module("openapi_client.models.provision_application_type_description").ProvisionApplicationTypeDescription.from_dict(obj)

        raise ValueError("ProvisionApplicationTypeDescriptionBase failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



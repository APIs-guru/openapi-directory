# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_health_policy_map_item import ApplicationHealthPolicyMapItem
from typing import Optional, Set
from typing_extensions import Self

class ApplicationHealthPolicies(BaseModel):
    """
    Defines the application health policy map used to evaluate the health of an application or one of its children entities. 
    """ # noqa: E501
    application_health_policy_map: Optional[List[ApplicationHealthPolicyMapItem]] = Field(default=None, description="Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest). The map is empty by default. ", alias="ApplicationHealthPolicyMap")
    __properties: ClassVar[List[str]] = ["ApplicationHealthPolicyMap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationHealthPolicies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_health_policy_map (list)
        _items = []
        if self.application_health_policy_map:
            for _item_application_health_policy_map in self.application_health_policy_map:
                if _item_application_health_policy_map:
                    _items.append(_item_application_health_policy_map.to_dict())
            _dict['ApplicationHealthPolicyMap'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationHealthPolicies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationHealthPolicyMap": [ApplicationHealthPolicyMapItem.from_dict(_item) for _item in obj["ApplicationHealthPolicyMap"]] if obj.get("ApplicationHealthPolicyMap") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ClusterConfigurationUpgradeDescription(BaseModel):
    """
    Describes the parameters for a standalone cluster configuration upgrade.
    """ # noqa: E501
    cluster_config: StrictStr = Field(description="The cluster configuration.", alias="ClusterConfig")
    health_check_retry_timeout: Optional[StrictStr] = Field(default='PT0H0M0S', description="The length of time between attempts to perform a health checks if the application or cluster is not healthy.", alias="HealthCheckRetryTimeout")
    health_check_stable_duration_in_seconds: Optional[StrictStr] = Field(default='PT0H0M0S', description="The length of time that the application or cluster must remain healthy.", alias="HealthCheckStableDurationInSeconds")
    health_check_wait_duration_in_seconds: Optional[StrictStr] = Field(default='PT0H0M0S', description="The length of time to wait after completing an upgrade domain before starting the health checks process.", alias="HealthCheckWaitDurationInSeconds")
    max_percent_delta_unhealthy_nodes: Optional[StrictInt] = Field(default=None, description="The maximum allowed percentage of delta health degradation during the upgrade. Allowed values are integer values from zero to 100.", alias="MaxPercentDeltaUnhealthyNodes")
    max_percent_unhealthy_applications: Optional[StrictInt] = Field(default=None, description="The maximum allowed percentage of unhealthy applications during the upgrade. Allowed values are integer values from zero to 100.", alias="MaxPercentUnhealthyApplications")
    max_percent_unhealthy_nodes: Optional[StrictInt] = Field(default=None, description="The maximum allowed percentage of unhealthy nodes during the upgrade. Allowed values are integer values from zero to 100.", alias="MaxPercentUnhealthyNodes")
    max_percent_upgrade_domain_delta_unhealthy_nodes: Optional[StrictInt] = Field(default=None, description="The maximum allowed percentage of upgrade domain delta health degradation during the upgrade. Allowed values are integer values from zero to 100.", alias="MaxPercentUpgradeDomainDeltaUnhealthyNodes")
    upgrade_domain_timeout_in_seconds: Optional[StrictStr] = Field(default='PT0H0M0S', description="The timeout for the upgrade domain.", alias="UpgradeDomainTimeoutInSeconds")
    upgrade_timeout_in_seconds: Optional[StrictStr] = Field(default='PT0H0M0S', description="The upgrade timeout.", alias="UpgradeTimeoutInSeconds")
    __properties: ClassVar[List[str]] = ["ClusterConfig", "HealthCheckRetryTimeout", "HealthCheckStableDurationInSeconds", "HealthCheckWaitDurationInSeconds", "MaxPercentDeltaUnhealthyNodes", "MaxPercentUnhealthyApplications", "MaxPercentUnhealthyNodes", "MaxPercentUpgradeDomainDeltaUnhealthyNodes", "UpgradeDomainTimeoutInSeconds", "UpgradeTimeoutInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterConfigurationUpgradeDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterConfigurationUpgradeDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClusterConfig": obj.get("ClusterConfig"),
            "HealthCheckRetryTimeout": obj.get("HealthCheckRetryTimeout") if obj.get("HealthCheckRetryTimeout") is not None else 'PT0H0M0S',
            "HealthCheckStableDurationInSeconds": obj.get("HealthCheckStableDurationInSeconds") if obj.get("HealthCheckStableDurationInSeconds") is not None else 'PT0H0M0S',
            "HealthCheckWaitDurationInSeconds": obj.get("HealthCheckWaitDurationInSeconds") if obj.get("HealthCheckWaitDurationInSeconds") is not None else 'PT0H0M0S',
            "MaxPercentDeltaUnhealthyNodes": obj.get("MaxPercentDeltaUnhealthyNodes"),
            "MaxPercentUnhealthyApplications": obj.get("MaxPercentUnhealthyApplications"),
            "MaxPercentUnhealthyNodes": obj.get("MaxPercentUnhealthyNodes"),
            "MaxPercentUpgradeDomainDeltaUnhealthyNodes": obj.get("MaxPercentUpgradeDomainDeltaUnhealthyNodes"),
            "UpgradeDomainTimeoutInSeconds": obj.get("UpgradeDomainTimeoutInSeconds") if obj.get("UpgradeDomainTimeoutInSeconds") is not None else 'PT0H0M0S',
            "UpgradeTimeoutInSeconds": obj.get("UpgradeTimeoutInSeconds") if obj.get("UpgradeTimeoutInSeconds") is not None else 'PT0H0M0S'
        })
        return _obj



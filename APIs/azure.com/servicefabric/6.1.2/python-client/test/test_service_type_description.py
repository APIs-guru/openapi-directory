# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.service_type_description import ServiceTypeDescription

class TestServiceTypeDescription(unittest.TestCase):
    """ServiceTypeDescription unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceTypeDescription:
        """Test ServiceTypeDescription
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceTypeDescription`
        """
        model = ServiceTypeDescription()
        if include_optional:
            return ServiceTypeDescription(
                extensions = [
                    openapi_client.models.service_type_extension_description.ServiceTypeExtensionDescription(
                        key = '', 
                        value = '', )
                    ],
                is_stateful = True,
                kind = 'Invalid',
                placement_constraints = '',
                service_placement_policies = [
                    openapi_client.models.service_placement_policy_description.ServicePlacementPolicyDescription(
                        type = 'Invalid', )
                    ],
                service_type_name = ''
            )
        else:
            return ServiceTypeDescription(
                kind = 'Invalid',
        )
        """

    def testServiceTypeDescription(self):
        """Test ServiceTypeDescription"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.primary_replicator_status import PrimaryReplicatorStatus

class TestPrimaryReplicatorStatus(unittest.TestCase):
    """PrimaryReplicatorStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrimaryReplicatorStatus:
        """Test PrimaryReplicatorStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrimaryReplicatorStatus`
        """
        model = PrimaryReplicatorStatus()
        if include_optional:
            return PrimaryReplicatorStatus(
                remote_replicators = [
                    openapi_client.models.remote_replicator_status.RemoteReplicatorStatus(
                        is_in_build = True, 
                        last_acknowledgement_processed_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_applied_copy_sequence_number = '', 
                        last_applied_replication_sequence_number = '', 
                        last_received_copy_sequence_number = '', 
                        last_received_replication_sequence_number = '', 
                        remote_replicator_acknowledgement_status = openapi_client.models.remote_replicator_acknowledgement_status.RemoteReplicatorAcknowledgementStatus(
                            copy_stream_acknowledgement_detail = openapi_client.models.remote_replicator_acknowledgement_detail.RemoteReplicatorAcknowledgementDetail(
                                average_apply_duration = '', 
                                average_receive_duration = '', 
                                not_received_count = '', 
                                received_and_not_applied_count = '', ), 
                            replication_stream_acknowledgement_detail = openapi_client.models.remote_replicator_acknowledgement_detail.RemoteReplicatorAcknowledgementDetail(
                                average_apply_duration = '', 
                                average_receive_duration = '', 
                                not_received_count = '', 
                                received_and_not_applied_count = '', ), ), 
                        replica_id = '', )
                    ],
                replication_queue_status = openapi_client.models.replicator_queue_status.ReplicatorQueueStatus(
                    committed_sequence_number = '', 
                    completed_sequence_number = '', 
                    first_sequence_number = '', 
                    last_sequence_number = '', 
                    queue_memory_size = '', 
                    queue_utilization_percentage = 56, )
            )
        else:
            return PrimaryReplicatorStatus(
        )
        """

    def testPrimaryReplicatorStatus(self):
        """Test PrimaryReplicatorStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

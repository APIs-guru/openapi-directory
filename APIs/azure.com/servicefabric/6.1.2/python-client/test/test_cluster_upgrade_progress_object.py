# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cluster_upgrade_progress_object import ClusterUpgradeProgressObject

class TestClusterUpgradeProgressObject(unittest.TestCase):
    """ClusterUpgradeProgressObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClusterUpgradeProgressObject:
        """Test ClusterUpgradeProgressObject
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClusterUpgradeProgressObject`
        """
        model = ClusterUpgradeProgressObject()
        if include_optional:
            return ClusterUpgradeProgressObject(
                code_version = '',
                config_version = '',
                current_upgrade_domain_progress = openapi_client.models.current_upgrade_domain_progress_info.CurrentUpgradeDomainProgressInfo(
                    domain_name = '', 
                    node_upgrade_progress_list = [
                        openapi_client.models.node_upgrade_progress_info.NodeUpgradeProgressInfo(
                            node_name = '', 
                            pending_safety_checks = [
                                openapi_client.models.safety_check_wrapper.SafetyCheckWrapper(
                                    safety_check = openapi_client.models.safety_check.SafetyCheck(
                                        kind = 'Invalid', ), )
                                ], 
                            upgrade_phase = 'Invalid', )
                        ], ),
                failure_reason = 'None',
                failure_timestamp_utc = '',
                next_upgrade_domain = '',
                rolling_upgrade_mode = 'UnmonitoredAuto',
                start_timestamp_utc = '',
                unhealthy_evaluations = [
                    openapi_client.models.health_evaluation_wrapper.HealthEvaluationWrapper(
                        health_evaluation = openapi_client.models.health_evaluation.HealthEvaluation(
                            aggregated_health_state = 'Invalid', 
                            description = '', 
                            kind = 'Invalid', ), )
                    ],
                upgrade_description = openapi_client.models.cluster_upgrade_description_object.ClusterUpgradeDescriptionObject(
                    application_health_policy_map = [
                        openapi_client.models.application_health_policy_map_item.ApplicationHealthPolicyMapItem(
                            key = '', 
                            value = openapi_client.models.application_health_policy.ApplicationHealthPolicy(
                                consider_warning_as_error = True, 
                                default_service_type_health_policy = openapi_client.models.service_type_health_policy.ServiceTypeHealthPolicy(
                                    max_percent_unhealthy_partitions_per_service = 56, 
                                    max_percent_unhealthy_replicas_per_partition = 56, 
                                    max_percent_unhealthy_services = 56, ), 
                                max_percent_unhealthy_deployed_applications = 56, 
                                service_type_health_policy_map = [
                                    openapi_client.models.service_type_health_policy_map_item.ServiceTypeHealthPolicyMapItem(
                                        key = '', 
                                        value = openapi_client.models.service_type_health_policy.ServiceTypeHealthPolicy(
                                            max_percent_unhealthy_partitions_per_service = 56, 
                                            max_percent_unhealthy_replicas_per_partition = 56, 
                                            max_percent_unhealthy_services = 56, ), )
                                    ], ), )
                        ], 
                    cluster_health_policy = openapi_client.models.cluster_health_policy.ClusterHealthPolicy(
                        application_type_health_policy_map = [
                            openapi_client.models.application_type_health_policy_map_item.ApplicationTypeHealthPolicyMapItem(
                                key = '', 
                                value = 56, )
                            ], 
                        consider_warning_as_error = True, 
                        max_percent_unhealthy_applications = 56, 
                        max_percent_unhealthy_nodes = 56, ), 
                    cluster_upgrade_health_policy = openapi_client.models.cluster_upgrade_health_policy_object.ClusterUpgradeHealthPolicyObject(
                        max_percent_delta_unhealthy_nodes = 0, 
                        max_percent_upgrade_domain_delta_unhealthy_nodes = 0, ), 
                    code_version = '', 
                    config_version = '', 
                    enable_delta_health_evaluation = True, 
                    force_restart = True, 
                    monitoring_policy = openapi_client.models.monitoring_policy_description.MonitoringPolicyDescription(
                        failure_action = 'Invalid', 
                        health_check_retry_timeout_in_milliseconds = 'PT0H10M0S', 
                        health_check_stable_duration_in_milliseconds = 'PT0H2M0S', 
                        health_check_wait_duration_in_milliseconds = '0', 
                        upgrade_domain_timeout_in_milliseconds = 'P10675199DT02H48M05.4775807S', 
                        upgrade_timeout_in_milliseconds = 'P10675199DT02H48M05.4775807S', ), 
                    rolling_upgrade_mode = 'UnmonitoredAuto', 
                    upgrade_kind = 'Rolling', 
                    upgrade_replica_set_check_timeout_in_seconds = 56, ),
                upgrade_domain_duration_in_milliseconds = '',
                upgrade_domain_progress_at_failure = openapi_client.models.failed_upgrade_domain_progress_object.FailedUpgradeDomainProgressObject(
                    domain_name = '', 
                    node_upgrade_progress_list = [
                        openapi_client.models.node_upgrade_progress_info.NodeUpgradeProgressInfo(
                            node_name = '', 
                            pending_safety_checks = [
                                openapi_client.models.safety_check_wrapper.SafetyCheckWrapper(
                                    safety_check = openapi_client.models.safety_check.SafetyCheck(
                                        kind = 'Invalid', ), )
                                ], 
                            upgrade_phase = 'Invalid', )
                        ], ),
                upgrade_domains = [
                    openapi_client.models.upgrade_domain_info.UpgradeDomainInfo(
                        name = '', 
                        state = 'Invalid', )
                    ],
                upgrade_duration_in_milliseconds = '',
                upgrade_state = 'Invalid'
            )
        else:
            return ClusterUpgradeProgressObject(
        )
        """

    def testClusterUpgradeProgressObject(self):
        """Test ClusterUpgradeProgressObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

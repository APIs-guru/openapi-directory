# coding: utf-8

"""
    ServiceFabricManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_description import CertificateDescription
from openapi_client.models.client_certificate_common_name import ClientCertificateCommonName
from openapi_client.models.client_certificate_thumbprint import ClientCertificateThumbprint
from openapi_client.models.cluster_upgrade_policy import ClusterUpgradePolicy
from openapi_client.models.node_type_description import NodeTypeDescription
from openapi_client.models.settings_section_description import SettingsSectionDescription
from typing import Optional, Set
from typing_extensions import Self

class ClusterPropertiesUpdateParameters(BaseModel):
    """
    The cluster resource properties can be updated
    """ # noqa: E501
    certificate: Optional[CertificateDescription] = None
    client_certificate_common_names: Optional[List[ClientCertificateCommonName]] = Field(default=None, description="List of client certificates to whitelist based on common names.", alias="clientCertificateCommonNames")
    client_certificate_thumbprints: Optional[List[ClientCertificateThumbprint]] = Field(default=None, description="The client thumbprint details, it is used for client access for cluster operation, it will override existing collection", alias="clientCertificateThumbprints")
    cluster_code_version: Optional[StrictStr] = Field(default=None, description="The ServiceFabric code version, if set it, please make sure you have set upgradeMode to Manual, otherwise ,it will fail, if you are using PUT new cluster, you can get the version by using ClusterVersions_List, if you are updating existing cluster, you can get the availableClusterVersions from Clusters_Get", alias="clusterCodeVersion")
    fabric_settings: Optional[List[SettingsSectionDescription]] = Field(default=None, description="List of custom fabric settings to configure the cluster, Note, it will overwrite existing collection", alias="fabricSettings")
    node_types: Optional[List[NodeTypeDescription]] = Field(default=None, description="The list of node types that make up the cluster, it will override", alias="nodeTypes")
    reliability_level: Optional[StrictStr] = Field(default=None, description="This level is used to set the number of replicas of the system services", alias="reliabilityLevel")
    reverse_proxy_certificate: Optional[CertificateDescription] = Field(default=None, alias="reverseProxyCertificate")
    upgrade_description: Optional[ClusterUpgradePolicy] = Field(default=None, alias="upgradeDescription")
    upgrade_mode: Optional[StrictStr] = Field(default=None, description="Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not", alias="upgradeMode")
    __properties: ClassVar[List[str]] = ["certificate", "clientCertificateCommonNames", "clientCertificateThumbprints", "clusterCodeVersion", "fabricSettings", "nodeTypes", "reliabilityLevel", "reverseProxyCertificate", "upgradeDescription", "upgradeMode"]

    @field_validator('reliability_level')
    def reliability_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Bronze', 'Silver', 'Gold']):
            raise ValueError("must be one of enum values ('Bronze', 'Silver', 'Gold')")
        return value

    @field_validator('upgrade_mode')
    def upgrade_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Automatic', 'Manual']):
            raise ValueError("must be one of enum values ('Automatic', 'Manual')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterPropertiesUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate
        if self.certificate:
            _dict['certificate'] = self.certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in client_certificate_common_names (list)
        _items = []
        if self.client_certificate_common_names:
            for _item_client_certificate_common_names in self.client_certificate_common_names:
                if _item_client_certificate_common_names:
                    _items.append(_item_client_certificate_common_names.to_dict())
            _dict['clientCertificateCommonNames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in client_certificate_thumbprints (list)
        _items = []
        if self.client_certificate_thumbprints:
            for _item_client_certificate_thumbprints in self.client_certificate_thumbprints:
                if _item_client_certificate_thumbprints:
                    _items.append(_item_client_certificate_thumbprints.to_dict())
            _dict['clientCertificateThumbprints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fabric_settings (list)
        _items = []
        if self.fabric_settings:
            for _item_fabric_settings in self.fabric_settings:
                if _item_fabric_settings:
                    _items.append(_item_fabric_settings.to_dict())
            _dict['fabricSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in node_types (list)
        _items = []
        if self.node_types:
            for _item_node_types in self.node_types:
                if _item_node_types:
                    _items.append(_item_node_types.to_dict())
            _dict['nodeTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of reverse_proxy_certificate
        if self.reverse_proxy_certificate:
            _dict['reverseProxyCertificate'] = self.reverse_proxy_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_description
        if self.upgrade_description:
            _dict['upgradeDescription'] = self.upgrade_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterPropertiesUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificate": CertificateDescription.from_dict(obj["certificate"]) if obj.get("certificate") is not None else None,
            "clientCertificateCommonNames": [ClientCertificateCommonName.from_dict(_item) for _item in obj["clientCertificateCommonNames"]] if obj.get("clientCertificateCommonNames") is not None else None,
            "clientCertificateThumbprints": [ClientCertificateThumbprint.from_dict(_item) for _item in obj["clientCertificateThumbprints"]] if obj.get("clientCertificateThumbprints") is not None else None,
            "clusterCodeVersion": obj.get("clusterCodeVersion"),
            "fabricSettings": [SettingsSectionDescription.from_dict(_item) for _item in obj["fabricSettings"]] if obj.get("fabricSettings") is not None else None,
            "nodeTypes": [NodeTypeDescription.from_dict(_item) for _item in obj["nodeTypes"]] if obj.get("nodeTypes") is not None else None,
            "reliabilityLevel": obj.get("reliabilityLevel"),
            "reverseProxyCertificate": CertificateDescription.from_dict(obj["reverseProxyCertificate"]) if obj.get("reverseProxyCertificate") is not None else None,
            "upgradeDescription": ClusterUpgradePolicy.from_dict(obj["upgradeDescription"]) if obj.get("upgradeDescription") is not None else None,
            "upgradeMode": obj.get("upgradeMode")
        })
        return _obj



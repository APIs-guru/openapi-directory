# coding: utf-8

"""
    ServiceFabricManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_health_policy import ClusterHealthPolicy
from openapi_client.models.cluster_upgrade_delta_health_policy import ClusterUpgradeDeltaHealthPolicy
from typing import Optional, Set
from typing_extensions import Self

class ClusterUpgradePolicy(BaseModel):
    """
    Cluster upgrade policy
    """ # noqa: E501
    delta_health_policy: Optional[ClusterUpgradeDeltaHealthPolicy] = Field(default=None, alias="deltaHealthPolicy")
    force_restart: Optional[StrictBool] = Field(default=None, description="Force node to restart or not", alias="forceRestart")
    health_check_retry_timeout: StrictStr = Field(description="The length of time that health checks can fail continuously,it represents .Net TimeSpan", alias="healthCheckRetryTimeout")
    health_check_stable_duration: StrictStr = Field(description="The length of time that health checks must pass continuously,it represents .Net TimeSpan", alias="healthCheckStableDuration")
    health_check_wait_duration: StrictStr = Field(description="The length of time to wait after completing an upgrade domain before performing health checks, it represents .Net TimeSpan", alias="healthCheckWaitDuration")
    health_policy: ClusterHealthPolicy = Field(alias="healthPolicy")
    override_user_upgrade_policy: Optional[StrictBool] = Field(default=None, description="Use the user defined upgrade policy or not", alias="overrideUserUpgradePolicy")
    upgrade_domain_timeout: StrictStr = Field(description="The timeout for any upgrade domain,it represents .Net TimeSpan", alias="upgradeDomainTimeout")
    upgrade_replica_set_check_timeout: StrictStr = Field(description="Timeout for replica set upgrade to complete,it represents .Net TimeSpan", alias="upgradeReplicaSetCheckTimeout")
    upgrade_timeout: StrictStr = Field(description="The upgrade timeout,it represents .Net TimeSpan", alias="upgradeTimeout")
    __properties: ClassVar[List[str]] = ["deltaHealthPolicy", "forceRestart", "healthCheckRetryTimeout", "healthCheckStableDuration", "healthCheckWaitDuration", "healthPolicy", "overrideUserUpgradePolicy", "upgradeDomainTimeout", "upgradeReplicaSetCheckTimeout", "upgradeTimeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterUpgradePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delta_health_policy
        if self.delta_health_policy:
            _dict['deltaHealthPolicy'] = self.delta_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_policy
        if self.health_policy:
            _dict['healthPolicy'] = self.health_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterUpgradePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deltaHealthPolicy": ClusterUpgradeDeltaHealthPolicy.from_dict(obj["deltaHealthPolicy"]) if obj.get("deltaHealthPolicy") is not None else None,
            "forceRestart": obj.get("forceRestart"),
            "healthCheckRetryTimeout": obj.get("healthCheckRetryTimeout"),
            "healthCheckStableDuration": obj.get("healthCheckStableDuration"),
            "healthCheckWaitDuration": obj.get("healthCheckWaitDuration"),
            "healthPolicy": ClusterHealthPolicy.from_dict(obj["healthPolicy"]) if obj.get("healthPolicy") is not None else None,
            "overrideUserUpgradePolicy": obj.get("overrideUserUpgradePolicy"),
            "upgradeDomainTimeout": obj.get("upgradeDomainTimeout"),
            "upgradeReplicaSetCheckTimeout": obj.get("upgradeReplicaSetCheckTimeout"),
            "upgradeTimeout": obj.get("upgradeTimeout")
        })
        return _obj



# coding: utf-8

"""
    ServiceFabricManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cluster_list_result import ClusterListResult

class TestClusterListResult(unittest.TestCase):
    """ClusterListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClusterListResult:
        """Test ClusterListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClusterListResult`
        """
        model = ClusterListResult()
        if include_optional:
            return ClusterListResult(
                next_link = '',
                value = [
                    openapi_client.models.cluster.Cluster(
                        properties = openapi_client.models.cluster_properties.ClusterProperties(
                            available_cluster_versions = [
                                openapi_client.models.cluster_version_details.ClusterVersionDetails(
                                    code_version = '', 
                                    environment = 'Windows', 
                                    support_expiry_utc = '', )
                                ], 
                            azure_active_directory = openapi_client.models.azure_active_directory.AzureActiveDirectory(
                                client_application = '', 
                                cluster_application = '', 
                                tenant_id = '', ), 
                            certificate = openapi_client.models.certificate_description.CertificateDescription(
                                thumbprint = '', 
                                thumbprint_secondary = '', 
                                x509_store_name = 'AddressBook', ), 
                            client_certificate_common_names = [
                                openapi_client.models.client_certificate_common_name.ClientCertificateCommonName(
                                    certificate_common_name = '', 
                                    certificate_issuer_thumbprint = '', 
                                    is_admin = True, )
                                ], 
                            client_certificate_thumbprints = [
                                openapi_client.models.client_certificate_thumbprint.ClientCertificateThumbprint(
                                    certificate_thumbprint = '', 
                                    is_admin = True, )
                                ], 
                            cluster_code_version = '', 
                            cluster_endpoint = '', 
                            cluster_id = '', 
                            cluster_state = 'WaitingForNodes', 
                            diagnostics_storage_account_config = openapi_client.models.diagnostics_storage_account_config.DiagnosticsStorageAccountConfig(
                                blob_endpoint = '', 
                                protected_account_key_name = '', 
                                queue_endpoint = '', 
                                storage_account_name = '', 
                                table_endpoint = '', ), 
                            fabric_settings = [
                                openapi_client.models.settings_section_description.SettingsSectionDescription(
                                    name = '', 
                                    parameters = [
                                        openapi_client.models.settings_parameter_description.SettingsParameterDescription(
                                            name = '', 
                                            value = '', )
                                        ], )
                                ], 
                            management_endpoint = '', 
                            node_types = [
                                openapi_client.models.node_type_description.NodeTypeDescription(
                                    application_ports = openapi_client.models.endpoint_range_description.EndpointRangeDescription(
                                        end_port = 56, 
                                        start_port = 56, ), 
                                    capacities = {
                                        'key' : ''
                                        }, 
                                    client_connection_endpoint_port = 56, 
                                    durability_level = 'Bronze', 
                                    ephemeral_ports = openapi_client.models.endpoint_range_description.EndpointRangeDescription(
                                        end_port = 56, 
                                        start_port = 56, ), 
                                    http_gateway_endpoint_port = 56, 
                                    is_primary = True, 
                                    name = '', 
                                    placement_properties = {
                                        'key' : ''
                                        }, 
                                    reverse_proxy_endpoint_port = 56, 
                                    vm_instance_count = 1, )
                                ], 
                            provisioning_state = 'Updating', 
                            reliability_level = 'Bronze', 
                            reverse_proxy_certificate = openapi_client.models.certificate_description.CertificateDescription(
                                thumbprint = '', 
                                thumbprint_secondary = '', 
                                x509_store_name = 'AddressBook', ), 
                            upgrade_description = openapi_client.models.cluster_upgrade_policy.ClusterUpgradePolicy(
                                delta_health_policy = openapi_client.models.cluster_upgrade_delta_health_policy.ClusterUpgradeDeltaHealthPolicy(
                                    max_percent_delta_unhealthy_applications = 0, 
                                    max_percent_delta_unhealthy_nodes = 0, 
                                    max_percent_upgrade_domain_delta_unhealthy_nodes = 0, ), 
                                force_restart = True, 
                                health_check_retry_timeout = '', 
                                health_check_stable_duration = '', 
                                health_check_wait_duration = '', 
                                health_policy = openapi_client.models.cluster_health_policy.ClusterHealthPolicy(
                                    max_percent_unhealthy_applications = 0, 
                                    max_percent_unhealthy_nodes = 0, ), 
                                override_user_upgrade_policy = True, 
                                upgrade_domain_timeout = '', 
                                upgrade_replica_set_check_timeout = '', 
                                upgrade_timeout = '', ), 
                            upgrade_mode = 'Automatic', 
                            vm_image = '', ), )
                    ]
            )
        else:
            return ClusterListResult(
        )
        """

    def testClusterListResult(self):
        """Test ClusterListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

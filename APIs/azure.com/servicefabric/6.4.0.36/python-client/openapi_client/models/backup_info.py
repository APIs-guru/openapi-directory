# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_type import BackupType
from openapi_client.models.epoch import Epoch
from openapi_client.models.fabric_error_error import FabricErrorError
from openapi_client.models.partition_information import PartitionInformation
from typing import Optional, Set
from typing_extensions import Self

class BackupInfo(BaseModel):
    """
    Represents a backup point which can be used to trigger a restore.
    """ # noqa: E501
    application_name: Optional[StrictStr] = Field(default=None, description="Name of the Service Fabric application this partition backup belongs to.", alias="ApplicationName")
    backup_chain_id: Optional[StrictStr] = Field(default=None, description="Unique backup chain ID. All backups part of the same chain has the same backup chain id. A backup chain is comprised of 1 full backup and multiple incremental backups.", alias="BackupChainId")
    backup_id: Optional[StrictStr] = Field(default=None, description="Unique backup ID .", alias="BackupId")
    backup_location: Optional[StrictStr] = Field(default=None, description="Location of the backup, relative to the backup store.", alias="BackupLocation")
    backup_type: Optional[BackupType] = Field(default=None, alias="BackupType")
    creation_time_utc: Optional[datetime] = Field(default=None, description="The date time when this backup was taken.", alias="CreationTimeUtc")
    epoch_of_last_backup_record: Optional[Epoch] = Field(default=None, alias="EpochOfLastBackupRecord")
    failure_error: Optional[FabricErrorError] = Field(default=None, alias="FailureError")
    lsn_of_last_backup_record: Optional[StrictStr] = Field(default=None, description="LSN of the last record in this backup.", alias="LsnOfLastBackupRecord")
    partition_information: Optional[PartitionInformation] = Field(default=None, alias="PartitionInformation")
    service_manifest_version: Optional[StrictStr] = Field(default=None, description="Manifest Version of the service this partition backup belongs to.", alias="ServiceManifestVersion")
    service_name: Optional[StrictStr] = Field(default=None, description="Name of the Service Fabric service this partition backup belongs to.", alias="ServiceName")
    __properties: ClassVar[List[str]] = ["ApplicationName", "BackupChainId", "BackupId", "BackupLocation", "BackupType", "CreationTimeUtc", "EpochOfLastBackupRecord", "FailureError", "LsnOfLastBackupRecord", "PartitionInformation", "ServiceManifestVersion", "ServiceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of epoch_of_last_backup_record
        if self.epoch_of_last_backup_record:
            _dict['EpochOfLastBackupRecord'] = self.epoch_of_last_backup_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_error
        if self.failure_error:
            _dict['FailureError'] = self.failure_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partition_information
        if self.partition_information:
            _dict['PartitionInformation'] = self.partition_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationName": obj.get("ApplicationName"),
            "BackupChainId": obj.get("BackupChainId"),
            "BackupId": obj.get("BackupId"),
            "BackupLocation": obj.get("BackupLocation"),
            "BackupType": obj.get("BackupType"),
            "CreationTimeUtc": obj.get("CreationTimeUtc"),
            "EpochOfLastBackupRecord": Epoch.from_dict(obj["EpochOfLastBackupRecord"]) if obj.get("EpochOfLastBackupRecord") is not None else None,
            "FailureError": FabricErrorError.from_dict(obj["FailureError"]) if obj.get("FailureError") is not None else None,
            "LsnOfLastBackupRecord": obj.get("LsnOfLastBackupRecord"),
            "PartitionInformation": PartitionInformation.from_dict(obj["PartitionInformation"]) if obj.get("PartitionInformation") is not None else None,
            "ServiceManifestVersion": obj.get("ServiceManifestVersion"),
            "ServiceName": obj.get("ServiceName")
        })
        return _obj



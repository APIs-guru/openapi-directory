# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chaos_parameters_dictionary_item import ChaosParametersDictionaryItem
from openapi_client.models.chaos_schedule_job import ChaosScheduleJob
from typing import Optional, Set
from typing_extensions import Self

class ChaosSchedule(BaseModel):
    """
    Defines the schedule used by Chaos.
    """ # noqa: E501
    chaos_parameters_dictionary: Optional[List[ChaosParametersDictionaryItem]] = Field(default=None, description="A mapping of string names to Chaos Parameters to be referenced by Chaos Schedule Jobs.", alias="ChaosParametersDictionary")
    expiry_date: Optional[datetime] = Field(default=None, description="The date and time Chaos will continue to use this schedule until.", alias="ExpiryDate")
    jobs: Optional[List[ChaosScheduleJob]] = Field(default=None, description="A list of all Chaos Schedule Jobs that will be automated by the schedule.", alias="Jobs")
    start_date: Optional[datetime] = Field(default=None, description="The date and time Chaos will start using this schedule.", alias="StartDate")
    __properties: ClassVar[List[str]] = ["ChaosParametersDictionary", "ExpiryDate", "Jobs", "StartDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChaosSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in chaos_parameters_dictionary (list)
        _items = []
        if self.chaos_parameters_dictionary:
            for _item_chaos_parameters_dictionary in self.chaos_parameters_dictionary:
                if _item_chaos_parameters_dictionary:
                    _items.append(_item_chaos_parameters_dictionary.to_dict())
            _dict['ChaosParametersDictionary'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item_jobs in self.jobs:
                if _item_jobs:
                    _items.append(_item_jobs.to_dict())
            _dict['Jobs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChaosSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChaosParametersDictionary": [ChaosParametersDictionaryItem.from_dict(_item) for _item in obj["ChaosParametersDictionary"]] if obj.get("ChaosParametersDictionary") is not None else None,
            "ExpiryDate": obj.get("ExpiryDate"),
            "Jobs": [ChaosScheduleJob.from_dict(_item) for _item in obj["Jobs"]] if obj.get("Jobs") is not None else None,
            "StartDate": obj.get("StartDate")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.fabric_event_kind import FabricEventKind
from openapi_client.models.service_event import ServiceEvent
from typing import Optional, Set
from typing_extensions import Self

class ServiceCreatedEvent(ServiceEvent):
    """
    Service Created event.
    """ # noqa: E501
    application_name: StrictStr = Field(description="Application name.", alias="ApplicationName")
    application_type_name: StrictStr = Field(description="Application type name.", alias="ApplicationTypeName")
    is_stateful: StrictBool = Field(description="Indicates if Service is stateful.", alias="IsStateful")
    min_replica_set_size: StrictInt = Field(description="Minimum size of replicas set.", alias="MinReplicaSetSize")
    partition_count: StrictInt = Field(description="Number of partitions.", alias="PartitionCount")
    partition_id: StrictStr = Field(description="An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.", alias="PartitionId")
    service_instance: StrictInt = Field(description="Id of Service instance.", alias="ServiceInstance")
    service_package_version: StrictStr = Field(description="Version of Service package.", alias="ServicePackageVersion")
    service_type_name: StrictStr = Field(description="Service type name.", alias="ServiceTypeName")
    target_replica_set_size: StrictInt = Field(description="Size of target replicas set.", alias="TargetReplicaSetSize")
    __properties: ClassVar[List[str]] = ["ServiceId", "Category", "EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceCreatedEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceCreatedEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ServiceId": obj.get("ServiceId"),
            "Category": obj.get("Category"),
            "EventInstanceId": obj.get("EventInstanceId"),
            "HasCorrelatedEvents": obj.get("HasCorrelatedEvents"),
            "Kind": obj.get("Kind"),
            "TimeStamp": obj.get("TimeStamp")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.backup_schedule_description import BackupScheduleDescription
from openapi_client.models.backup_storage_description import BackupStorageDescription
from openapi_client.models.retention_policy_description import RetentionPolicyDescription
from typing import Optional, Set
from typing_extensions import Self

class BackupPolicyDescription(BaseModel):
    """
    Describes a backup policy for configuring periodic backup.
    """ # noqa: E501
    auto_restore_on_data_loss: StrictBool = Field(description="Specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event.", alias="AutoRestoreOnDataLoss")
    max_incremental_backups: Annotated[int, Field(le=255, strict=True, ge=0)] = Field(description="Defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions - The replica has never taken a full backup since it has become primary, - Some of the log records since the last backup has been truncated, or - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.", alias="MaxIncrementalBackups")
    name: StrictStr = Field(description="The unique name identifying this backup policy.", alias="Name")
    retention_policy: Optional[RetentionPolicyDescription] = Field(default=None, alias="RetentionPolicy")
    schedule: BackupScheduleDescription = Field(alias="Schedule")
    storage: BackupStorageDescription = Field(alias="Storage")
    __properties: ClassVar[List[str]] = ["AutoRestoreOnDataLoss", "MaxIncrementalBackups", "Name", "RetentionPolicy", "Schedule", "Storage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupPolicyDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of retention_policy
        if self.retention_policy:
            _dict['RetentionPolicy'] = self.retention_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['Schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['Storage'] = self.storage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupPolicyDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AutoRestoreOnDataLoss": obj.get("AutoRestoreOnDataLoss"),
            "MaxIncrementalBackups": obj.get("MaxIncrementalBackups"),
            "Name": obj.get("Name"),
            "RetentionPolicy": RetentionPolicyDescription.from_dict(obj["RetentionPolicy"]) if obj.get("RetentionPolicy") is not None else None,
            "Schedule": BackupScheduleDescription.from_dict(obj["Schedule"]) if obj.get("Schedule") is not None else None,
            "Storage": BackupStorageDescription.from_dict(obj["Storage"]) if obj.get("Storage") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_entity import BackupEntity
from openapi_client.models.backup_storage_description import BackupStorageDescription
from typing import Optional, Set
from typing_extensions import Self

class GetBackupByStorageQueryDescription(BaseModel):
    """
    Describes additional filters to be applied, while listing backups, and backup storage details from where to fetch the backups.
    """ # noqa: E501
    backup_entity: BackupEntity = Field(alias="BackupEntity")
    end_date_time_filter: Optional[datetime] = Field(default=None, description="Specifies the end date time in ISO8601 till which to enumerate backups. If not specified, backups are enumerated till the end.", alias="EndDateTimeFilter")
    latest: Optional[StrictBool] = Field(default=False, description="If specified as true, gets the most recent backup (within the specified time range) for every partition under the specified backup entity.", alias="Latest")
    start_date_time_filter: Optional[datetime] = Field(default=None, description="Specifies the start date time in ISO8601 from which to enumerate backups. If not specified, backups are enumerated from the beginning.", alias="StartDateTimeFilter")
    storage: BackupStorageDescription = Field(alias="Storage")
    __properties: ClassVar[List[str]] = ["BackupEntity", "EndDateTimeFilter", "Latest", "StartDateTimeFilter", "Storage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBackupByStorageQueryDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_entity
        if self.backup_entity:
            _dict['BackupEntity'] = self.backup_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['Storage'] = self.storage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBackupByStorageQueryDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BackupEntity": BackupEntity.from_dict(obj["BackupEntity"]) if obj.get("BackupEntity") is not None else None,
            "EndDateTimeFilter": obj.get("EndDateTimeFilter"),
            "Latest": obj.get("Latest") if obj.get("Latest") is not None else False,
            "StartDateTimeFilter": obj.get("StartDateTimeFilter"),
            "Storage": BackupStorageDescription.from_dict(obj["Storage"]) if obj.get("Storage") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.partition_health_state_filter import PartitionHealthStateFilter
from typing import Optional, Set
from typing_extensions import Self

class ServiceHealthStateFilter(BaseModel):
    """
    Defines matching criteria to determine whether a service should be included as a child of an application in the cluster health chunk. The services are only returned if the parent application matches a filter specified in the cluster health chunk query description. One filter can match zero, one or multiple services, depending on its properties.
    """ # noqa: E501
    health_state_filter: Optional[StrictInt] = Field(default=None, description="The filter for the health state of the services. It allows selecting services if they match the desired health states. The possible values are integer value of one of the following health states. Only services that match the filter are returned. All services are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the service name is specified. If the filter has default value and service name is specified, the matching service is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.", alias="HealthStateFilter")
    partition_filters: Optional[List[PartitionHealthStateFilter]] = Field(default=None, description="Defines a list of filters that specify which partitions to be included in the returned cluster health chunk as children of the service. The partitions are returned only if the parent service matches a filter. If the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service aggregated health state, regardless of the input filters. The service filter may specify multiple partition filters. For example, it can specify a filter to return all partitions with health state Error and another filter to always include a partition identified by its partition ID.", alias="PartitionFilters")
    service_name_filter: Optional[StrictStr] = Field(default=None, description="The name of the service that matches the filter. The filter is applied only to the specified service, if it exists. If the service doesn't exist, no service is returned in the cluster health chunk based on this filter. If the service exists, it is included as the application's child if the health state matches the other filter properties. If not specified, all services that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.", alias="ServiceNameFilter")
    __properties: ClassVar[List[str]] = ["HealthStateFilter", "PartitionFilters", "ServiceNameFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceHealthStateFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in partition_filters (list)
        _items = []
        if self.partition_filters:
            for _item_partition_filters in self.partition_filters:
                if _item_partition_filters:
                    _items.append(_item_partition_filters.to_dict())
            _dict['PartitionFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceHealthStateFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HealthStateFilter": obj.get("HealthStateFilter"),
            "PartitionFilters": [PartitionHealthStateFilter.from_dict(_item) for _item in obj["PartitionFilters"]] if obj.get("PartitionFilters") is not None else None,
            "ServiceNameFilter": obj.get("ServiceNameFilter")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_scaling_policy import AutoScalingPolicy
from openapi_client.models.container_code_package_properties import ContainerCodePackageProperties
from openapi_client.models.diagnostics_ref import DiagnosticsRef
from openapi_client.models.health_state import HealthState
from openapi_client.models.network_ref import NetworkRef
from openapi_client.models.operating_system_type import OperatingSystemType
from openapi_client.models.resource_status import ResourceStatus
from typing import Optional, Set
from typing_extensions import Self

class ServiceResourceProperties(BaseModel):
    """
    This type describes properties of a service resource.
    """ # noqa: E501
    code_packages: List[ContainerCodePackageProperties] = Field(description="Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).", alias="codePackages")
    diagnostics: Optional[DiagnosticsRef] = None
    network_refs: Optional[List[NetworkRef]] = Field(default=None, description="The names of the private networks that this service needs to be part of.", alias="networkRefs")
    os_type: OperatingSystemType = Field(alias="osType")
    auto_scaling_policies: Optional[List[AutoScalingPolicy]] = Field(default=None, description="Auto scaling policies", alias="autoScalingPolicies")
    description: Optional[StrictStr] = Field(default=None, description="User readable description of the service.")
    health_state: Optional[HealthState] = Field(default=None, alias="healthState")
    replica_count: Optional[StrictInt] = Field(default=None, description="The number of replicas of the service to create. Defaults to 1 if not specified.", alias="replicaCount")
    status: Optional[ResourceStatus] = None
    status_details: Optional[StrictStr] = Field(default=None, description="Gives additional information about the current status of the service.", alias="statusDetails")
    unhealthy_evaluation: Optional[StrictStr] = Field(default=None, description="When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.", alias="unhealthyEvaluation")
    __properties: ClassVar[List[str]] = ["codePackages", "diagnostics", "networkRefs", "osType", "autoScalingPolicies", "description", "healthState", "replicaCount", "status", "statusDetails", "unhealthyEvaluation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "status_details",
            "unhealthy_evaluation",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in code_packages (list)
        _items = []
        if self.code_packages:
            for _item_code_packages in self.code_packages:
                if _item_code_packages:
                    _items.append(_item_code_packages.to_dict())
            _dict['codePackages'] = _items
        # override the default output from pydantic by calling `to_dict()` of diagnostics
        if self.diagnostics:
            _dict['diagnostics'] = self.diagnostics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_refs (list)
        _items = []
        if self.network_refs:
            for _item_network_refs in self.network_refs:
                if _item_network_refs:
                    _items.append(_item_network_refs.to_dict())
            _dict['networkRefs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in auto_scaling_policies (list)
        _items = []
        if self.auto_scaling_policies:
            for _item_auto_scaling_policies in self.auto_scaling_policies:
                if _item_auto_scaling_policies:
                    _items.append(_item_auto_scaling_policies.to_dict())
            _dict['autoScalingPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "codePackages": [ContainerCodePackageProperties.from_dict(_item) for _item in obj["codePackages"]] if obj.get("codePackages") is not None else None,
            "diagnostics": DiagnosticsRef.from_dict(obj["diagnostics"]) if obj.get("diagnostics") is not None else None,
            "networkRefs": [NetworkRef.from_dict(_item) for _item in obj["networkRefs"]] if obj.get("networkRefs") is not None else None,
            "osType": obj.get("osType"),
            "autoScalingPolicies": [AutoScalingPolicy.from_dict(_item) for _item in obj["autoScalingPolicies"]] if obj.get("autoScalingPolicies") is not None else None,
            "description": obj.get("description"),
            "healthState": obj.get("healthState"),
            "replicaCount": obj.get("replicaCount"),
            "status": obj.get("status"),
            "statusDetails": obj.get("statusDetails"),
            "unhealthyEvaluation": obj.get("unhealthyEvaluation")
        })
        return _obj



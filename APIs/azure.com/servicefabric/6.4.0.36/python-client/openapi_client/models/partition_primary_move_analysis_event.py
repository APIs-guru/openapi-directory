# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.analysis_event_metadata import AnalysisEventMetadata
from openapi_client.models.fabric_event_kind import FabricEventKind
from openapi_client.models.partition_analysis_event import PartitionAnalysisEvent
from typing import Optional, Set
from typing_extensions import Self

class PartitionPrimaryMoveAnalysisEvent(PartitionAnalysisEvent):
    """
    Partition Primary Move Analysis event.
    """ # noqa: E501
    current_node: StrictStr = Field(description="The name of a Service Fabric node.", alias="CurrentNode")
    move_reason: StrictStr = Field(description="Move reason.", alias="MoveReason")
    previous_node: StrictStr = Field(description="The name of a Service Fabric node.", alias="PreviousNode")
    relevant_traces: StrictStr = Field(description="Relevant traces.", alias="RelevantTraces")
    when_move_completed: datetime = Field(description="Time when the move was completed.", alias="WhenMoveCompleted")
    __properties: ClassVar[List[str]] = ["Metadata", "PartitionId", "Category", "EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartitionPrimaryMoveAnalysisEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['Metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartitionPrimaryMoveAnalysisEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Metadata": AnalysisEventMetadata.from_dict(obj["Metadata"]) if obj.get("Metadata") is not None else None,
            "PartitionId": obj.get("PartitionId"),
            "Category": obj.get("Category"),
            "EventInstanceId": obj.get("EventInstanceId"),
            "HasCorrelatedEvents": obj.get("HasCorrelatedEvents"),
            "Kind": obj.get("Kind"),
            "TimeStamp": obj.get("TimeStamp")
        })
        return _obj



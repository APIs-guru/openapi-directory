# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_health_policy import ApplicationHealthPolicy
from openapi_client.models.application_parameter import ApplicationParameter
from openapi_client.models.monitoring_policy_description import MonitoringPolicyDescription
from openapi_client.models.upgrade_kind import UpgradeKind
from openapi_client.models.upgrade_mode import UpgradeMode
from typing import Optional, Set
from typing_extensions import Self

class ApplicationUpgradeDescription(BaseModel):
    """
    Describes the parameters for an application upgrade. Note that upgrade description replaces the existing application description. This means that if the parameters are not specified, the existing parameters on the applications will be overwritten with the empty parameters list. This would result in the application using the default value of the parameters from the application manifest. If you do not want to change any existing parameter values, please get the application parameters first using the GetApplicationInfo query and then supply those values as Parameters in this ApplicationUpgradeDescription.
    """ # noqa: E501
    application_health_policy: Optional[ApplicationHealthPolicy] = Field(default=None, alias="ApplicationHealthPolicy")
    force_restart: Optional[StrictBool] = Field(default=False, description="If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).", alias="ForceRestart")
    monitoring_policy: Optional[MonitoringPolicyDescription] = Field(default=None, alias="MonitoringPolicy")
    name: StrictStr = Field(description="The name of the target application, including the 'fabric:' URI scheme.", alias="Name")
    parameters: List[ApplicationParameter] = Field(description="List of application parameters with overridden values from their default values specified in the application manifest.", alias="Parameters")
    rolling_upgrade_mode: Optional[UpgradeMode] = Field(default=UpgradeMode.UNMONITOREDAUTO, alias="RollingUpgradeMode")
    target_application_type_version: StrictStr = Field(description="The target application type version (found in the application manifest) for the application upgrade.", alias="TargetApplicationTypeVersion")
    upgrade_kind: UpgradeKind = Field(alias="UpgradeKind")
    upgrade_replica_set_check_timeout_in_seconds: Optional[StrictInt] = Field(default=None, description="The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).", alias="UpgradeReplicaSetCheckTimeoutInSeconds")
    __properties: ClassVar[List[str]] = ["ApplicationHealthPolicy", "ForceRestart", "MonitoringPolicy", "Name", "Parameters", "RollingUpgradeMode", "TargetApplicationTypeVersion", "UpgradeKind", "UpgradeReplicaSetCheckTimeoutInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationUpgradeDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_health_policy
        if self.application_health_policy:
            _dict['ApplicationHealthPolicy'] = self.application_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring_policy
        if self.monitoring_policy:
            _dict['MonitoringPolicy'] = self.monitoring_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['Parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationUpgradeDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationHealthPolicy": ApplicationHealthPolicy.from_dict(obj["ApplicationHealthPolicy"]) if obj.get("ApplicationHealthPolicy") is not None else None,
            "ForceRestart": obj.get("ForceRestart") if obj.get("ForceRestart") is not None else False,
            "MonitoringPolicy": MonitoringPolicyDescription.from_dict(obj["MonitoringPolicy"]) if obj.get("MonitoringPolicy") is not None else None,
            "Name": obj.get("Name"),
            "Parameters": [ApplicationParameter.from_dict(_item) for _item in obj["Parameters"]] if obj.get("Parameters") is not None else None,
            "RollingUpgradeMode": obj.get("RollingUpgradeMode") if obj.get("RollingUpgradeMode") is not None else UpgradeMode.UNMONITOREDAUTO,
            "TargetApplicationTypeVersion": obj.get("TargetApplicationTypeVersion"),
            "UpgradeKind": obj.get("UpgradeKind") if obj.get("UpgradeKind") is not None else UpgradeKind.ROLLING,
            "UpgradeReplicaSetCheckTimeoutInSeconds": obj.get("UpgradeReplicaSetCheckTimeoutInSeconds")
        })
        return _obj



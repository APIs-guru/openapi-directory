# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_client.models.service_placement_policy_description import ServicePlacementPolicyDescription
from openapi_client.models.service_type_extension_description import ServiceTypeExtensionDescription
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.stateful_service_type_description import StatefulServiceTypeDescription
    from openapi_client.models.stateless_service_type_description import StatelessServiceTypeDescription

class ServiceTypeDescription(BaseModel):
    """
    Describes a service type defined in the service manifest of a provisioned application type. The properties the ones defined in the service manifest.
    """ # noqa: E501
    extensions: Optional[List[ServiceTypeExtensionDescription]] = Field(default=None, description="List of service type extensions.", alias="Extensions")
    is_stateful: Optional[StrictBool] = Field(default=None, description="Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise.", alias="IsStateful")
    kind: ServiceKind = Field(alias="Kind")
    load_metrics: Optional[List[ServiceLoadMetricDescription]] = Field(default=None, description="The service load metrics is given as an array of ServiceLoadMetricDescription objects.", alias="LoadMetrics")
    placement_constraints: Optional[StrictStr] = Field(default=None, description="The placement constraint to be used when instantiating this service in a Service Fabric cluster.", alias="PlacementConstraints")
    service_placement_policies: Optional[List[ServicePlacementPolicyDescription]] = Field(default=None, description="List of service placement policy descriptions.", alias="ServicePlacementPolicies")
    service_type_name: Optional[StrictStr] = Field(default=None, description="Name of the service type as specified in the service manifest.", alias="ServiceTypeName")
    __properties: ClassVar[List[str]] = ["Extensions", "IsStateful", "Kind", "LoadMetrics", "PlacementConstraints", "ServicePlacementPolicies", "ServiceTypeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'StatefulServiceTypeDescription': 'StatefulServiceTypeDescription','StatelessServiceTypeDescription': 'StatelessServiceTypeDescription'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[StatefulServiceTypeDescription, StatelessServiceTypeDescription]]:
        """Create an instance of ServiceTypeDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item_extensions in self.extensions:
                if _item_extensions:
                    _items.append(_item_extensions.to_dict())
            _dict['Extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_metrics (list)
        _items = []
        if self.load_metrics:
            for _item_load_metrics in self.load_metrics:
                if _item_load_metrics:
                    _items.append(_item_load_metrics.to_dict())
            _dict['LoadMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_placement_policies (list)
        _items = []
        if self.service_placement_policies:
            for _item_service_placement_policies in self.service_placement_policies:
                if _item_service_placement_policies:
                    _items.append(_item_service_placement_policies.to_dict())
            _dict['ServicePlacementPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[StatefulServiceTypeDescription, StatelessServiceTypeDescription]]:
        """Create an instance of ServiceTypeDescription from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'StatefulServiceTypeDescription':
            return import_module("openapi_client.models.stateful_service_type_description").StatefulServiceTypeDescription.from_dict(obj)
        if object_type ==  'StatelessServiceTypeDescription':
            return import_module("openapi_client.models.stateless_service_type_description").StatelessServiceTypeDescription.from_dict(obj)

        raise ValueError("ServiceTypeDescription failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



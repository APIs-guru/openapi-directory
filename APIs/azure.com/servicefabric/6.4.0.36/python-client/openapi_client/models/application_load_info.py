# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_metric_description import ApplicationMetricDescription
from typing import Optional, Set
from typing_extensions import Self

class ApplicationLoadInfo(BaseModel):
    """
    Load Information about a Service Fabric application.
    """ # noqa: E501
    application_load_metric_information: Optional[List[ApplicationMetricDescription]] = Field(default=None, description="List of application capacity metric description.", alias="ApplicationLoadMetricInformation")
    id: Optional[StrictStr] = Field(default=None, description="The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.", alias="Id")
    maximum_nodes: Optional[StrictInt] = Field(default=None, description="The maximum number of nodes where this application can be instantiated. It is the number of nodes this application is allowed to span. For applications that do not have application capacity defined this value will be zero.", alias="MaximumNodes")
    minimum_nodes: Optional[StrictInt] = Field(default=None, description="The minimum number of nodes for this application. It is the number of nodes where Service Fabric will reserve Capacity in the cluster which equals to ReservedLoad * MinimumNodes for this Application instance. For applications that do not have application capacity defined this value will be zero.", alias="MinimumNodes")
    node_count: Optional[StrictInt] = Field(default=None, description="The number of nodes on which this application is instantiated. For applications that do not have application capacity defined this value will be zero.", alias="NodeCount")
    __properties: ClassVar[List[str]] = ["ApplicationLoadMetricInformation", "Id", "MaximumNodes", "MinimumNodes", "NodeCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationLoadInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_load_metric_information (list)
        _items = []
        if self.application_load_metric_information:
            for _item_application_load_metric_information in self.application_load_metric_information:
                if _item_application_load_metric_information:
                    _items.append(_item_application_load_metric_information.to_dict())
            _dict['ApplicationLoadMetricInformation'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationLoadInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationLoadMetricInformation": [ApplicationMetricDescription.from_dict(_item) for _item in obj["ApplicationLoadMetricInformation"]] if obj.get("ApplicationLoadMetricInformation") is not None else None,
            "Id": obj.get("Id"),
            "MaximumNodes": obj.get("MaximumNodes"),
            "MinimumNodes": obj.get("MinimumNodes"),
            "NodeCount": obj.get("NodeCount")
        })
        return _obj



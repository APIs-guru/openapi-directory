# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deployed_service_package_health import DeployedServicePackageHealth

class TestDeployedServicePackageHealth(unittest.TestCase):
    """DeployedServicePackageHealth unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeployedServicePackageHealth:
        """Test DeployedServicePackageHealth
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeployedServicePackageHealth`
        """
        model = DeployedServicePackageHealth()
        if include_optional:
            return DeployedServicePackageHealth(
                application_name = '',
                node_name = '',
                service_manifest_name = '',
                aggregated_health_state = 'Invalid',
                health_events = [
                    openapi_client.models.health_event.HealthEvent(
                        is_expired = True, 
                        last_error_transition_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_modified_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_ok_transition_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_warning_transition_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        source_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                health_statistics = openapi_client.models.health_statistics.HealthStatistics(
                    health_state_count_list = [
                        openapi_client.models.entity_kind_health_state_count.EntityKindHealthStateCount(
                            entity_kind = 'Invalid', 
                            health_state_count = openapi_client.models.health_state_count.HealthStateCount(
                                error_count = 0, 
                                ok_count = 0, 
                                warning_count = 0, ), )
                        ], ),
                unhealthy_evaluations = [
                    openapi_client.models.health_evaluation_wrapper.HealthEvaluationWrapper(
                        health_evaluation = openapi_client.models.health_evaluation.HealthEvaluation(
                            aggregated_health_state = 'Invalid', 
                            description = '', 
                            kind = 'Invalid', ), )
                    ]
            )
        else:
            return DeployedServicePackageHealth(
        )
        """

    def testDeployedServicePackageHealth(self):
        """Test DeployedServicePackageHealth"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

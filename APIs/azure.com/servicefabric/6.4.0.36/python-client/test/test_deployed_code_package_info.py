# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deployed_code_package_info import DeployedCodePackageInfo

class TestDeployedCodePackageInfo(unittest.TestCase):
    """DeployedCodePackageInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeployedCodePackageInfo:
        """Test DeployedCodePackageInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeployedCodePackageInfo`
        """
        model = DeployedCodePackageInfo()
        if include_optional:
            return DeployedCodePackageInfo(
                host_isolation_mode = 'None',
                host_type = 'Invalid',
                main_entry_point = openapi_client.models.code_package_entry_point.CodePackageEntryPoint(
                    code_package_entry_point_statistics = openapi_client.models.code_package_entry_point_statistics.CodePackageEntryPointStatistics(
                        activation_count = '', 
                        activation_failure_count = '', 
                        continuous_activation_failure_count = '', 
                        continuous_exit_failure_count = '', 
                        exit_count = '', 
                        exit_failure_count = '', 
                        last_activation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_exit_code = '', 
                        last_exit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_successful_activation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_successful_exit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    entry_point_location = '', 
                    instance_id = '', 
                    next_activation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    process_id = '', 
                    run_as_user_name = '', 
                    status = 'Invalid', ),
                name = '',
                run_frequency_interval = '',
                service_manifest_name = '',
                service_package_activation_id = '',
                setup_entry_point = openapi_client.models.code_package_entry_point.CodePackageEntryPoint(
                    code_package_entry_point_statistics = openapi_client.models.code_package_entry_point_statistics.CodePackageEntryPointStatistics(
                        activation_count = '', 
                        activation_failure_count = '', 
                        continuous_activation_failure_count = '', 
                        continuous_exit_failure_count = '', 
                        exit_count = '', 
                        exit_failure_count = '', 
                        last_activation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_exit_code = '', 
                        last_exit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_successful_activation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_successful_exit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    entry_point_location = '', 
                    instance_id = '', 
                    next_activation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    process_id = '', 
                    run_as_user_name = '', 
                    status = 'Invalid', ),
                status = 'Invalid',
                version = ''
            )
        else:
            return DeployedCodePackageInfo(
        )
        """

    def testDeployedCodePackageInfo(self):
        """Test DeployedCodePackageInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

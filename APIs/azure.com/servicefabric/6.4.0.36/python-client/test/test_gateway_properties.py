# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.4.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.gateway_properties import GatewayProperties

class TestGatewayProperties(unittest.TestCase):
    """GatewayProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GatewayProperties:
        """Test GatewayProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GatewayProperties`
        """
        model = GatewayProperties()
        if include_optional:
            return GatewayProperties(
                description = '',
                destination_network = openapi_client.models.network_ref.NetworkRef(
                    endpoint_refs = [
                        openapi_client.models.endpoint_ref.EndpointRef(
                            name = '', )
                        ], 
                    name = '', ),
                http = [
                    openapi_client.models.http_config.HttpConfig(
                        hosts = [
                            openapi_client.models.http_host_config.HttpHostConfig(
                                name = '', 
                                routes = [
                                    openapi_client.models.http_route_config.HttpRouteConfig(
                                        destination = openapi_client.models.gateway_destination.GatewayDestination(
                                            application_name = '', 
                                            endpoint_name = '', 
                                            service_name = '', ), 
                                        match = openapi_client.models.http_route_match_rule.HttpRouteMatchRule(
                                            headers = [
                                                openapi_client.models.http_route_match_header.HttpRouteMatchHeader(
                                                    name = '', 
                                                    type = 'exact', 
                                                    value = '', )
                                                ], 
                                            path = openapi_client.models.http_route_match_path.HttpRouteMatchPath(
                                                rewrite = '', 
                                                type = 'prefix', 
                                                value = '', ), ), 
                                        name = '', )
                                    ], )
                            ], 
                        name = '', 
                        port = 56, )
                    ],
                ip_address = '',
                source_network = openapi_client.models.network_ref.NetworkRef(
                    endpoint_refs = [
                        openapi_client.models.endpoint_ref.EndpointRef(
                            name = '', )
                        ], 
                    name = '', ),
                status = 'Unknown',
                status_details = '',
                tcp = [
                    openapi_client.models.tcp_config.TcpConfig(
                        destination = openapi_client.models.gateway_destination.GatewayDestination(
                            application_name = '', 
                            endpoint_name = '', 
                            service_name = '', ), 
                        name = '', 
                        port = 56, )
                    ]
            )
        else:
            return GatewayProperties(
                destination_network = openapi_client.models.network_ref.NetworkRef(
                    endpoint_refs = [
                        openapi_client.models.endpoint_ref.EndpointRef(
                            name = '', )
                        ], 
                    name = '', ),
                source_network = openapi_client.models.network_ref.NetworkRef(
                    endpoint_refs = [
                        openapi_client.models.endpoint_ref.EndpointRef(
                            name = '', )
                        ], 
                    name = '', ),
        )
        """

    def testGatewayProperties(self):
        """Test GatewayProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.chaos_schedule_description import ChaosScheduleDescription

class TestChaosScheduleDescription(unittest.TestCase):
    """ChaosScheduleDescription unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChaosScheduleDescription:
        """Test ChaosScheduleDescription
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChaosScheduleDescription`
        """
        model = ChaosScheduleDescription()
        if include_optional:
            return ChaosScheduleDescription(
                schedule = openapi_client.models.chaos_schedule.ChaosSchedule(
                    chaos_parameters_dictionary = [
                        openapi_client.models.chaos_parameters_dictionary_item.ChaosParametersDictionaryItem(
                            key = '', 
                            value = openapi_client.models.chaos_parameters.ChaosParameters(
                                chaos_target_filter = openapi_client.models.chaos_target_filter.ChaosTargetFilter(
                                    application_inclusion_list = [
                                        ''
                                        ], 
                                    node_type_inclusion_list = [
                                        ''
                                        ], ), 
                                cluster_health_policy = openapi_client.models.cluster_health_policy.ClusterHealthPolicy(
                                    application_type_health_policy_map = [
                                        openapi_client.models.application_type_health_policy_map_item.ApplicationTypeHealthPolicyMapItem(
                                            key = '', 
                                            value = 56, )
                                        ], 
                                    consider_warning_as_error = True, 
                                    max_percent_unhealthy_applications = 56, 
                                    max_percent_unhealthy_nodes = 56, ), 
                                context = openapi_client.models.chaos_context.ChaosContext(
                                    map = {
                                        'key' : ''
                                        }, ), 
                                enable_move_replica_faults = True, 
                                max_cluster_stabilization_timeout_in_seconds = 0, 
                                max_concurrent_faults = 0, 
                                time_to_run_in_seconds = '4294967295', 
                                wait_time_between_faults_in_seconds = 0, 
                                wait_time_between_iterations_in_seconds = 0, ), )
                        ], 
                    expiry_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    jobs = [
                        openapi_client.models.chaos_schedule_job.ChaosScheduleJob(
                            days = openapi_client.models.chaos_schedule_job_active_days_of_week.ChaosScheduleJobActiveDaysOfWeek(
                                friday = True, 
                                monday = True, 
                                saturday = True, 
                                sunday = True, 
                                thursday = True, 
                                tuesday = True, 
                                wednesday = True, ), 
                            times = [
                                openapi_client.models.time_range.TimeRange(
                                    end_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hour = 0, 
                                        minute = 0, ), 
                                    start_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hour = 0, 
                                        minute = 0, ), )
                                ], )
                        ], 
                    start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                version = 0
            )
        else:
            return ChaosScheduleDescription(
        )
        """

    def testChaosScheduleDescription(self):
        """Test ChaosScheduleDescription"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

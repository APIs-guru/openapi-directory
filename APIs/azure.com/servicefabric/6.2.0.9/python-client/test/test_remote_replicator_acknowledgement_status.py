# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.remote_replicator_acknowledgement_status import RemoteReplicatorAcknowledgementStatus

class TestRemoteReplicatorAcknowledgementStatus(unittest.TestCase):
    """RemoteReplicatorAcknowledgementStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RemoteReplicatorAcknowledgementStatus:
        """Test RemoteReplicatorAcknowledgementStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RemoteReplicatorAcknowledgementStatus`
        """
        model = RemoteReplicatorAcknowledgementStatus()
        if include_optional:
            return RemoteReplicatorAcknowledgementStatus(
                copy_stream_acknowledgement_detail = openapi_client.models.remote_replicator_acknowledgement_detail.RemoteReplicatorAcknowledgementDetail(
                    average_apply_duration = '', 
                    average_receive_duration = '', 
                    not_received_count = '', 
                    received_and_not_applied_count = '', ),
                replication_stream_acknowledgement_detail = openapi_client.models.remote_replicator_acknowledgement_detail.RemoteReplicatorAcknowledgementDetail(
                    average_apply_duration = '', 
                    average_receive_duration = '', 
                    not_received_count = '', 
                    received_and_not_applied_count = '', )
            )
        else:
            return RemoteReplicatorAcknowledgementStatus(
        )
        """

    def testRemoteReplicatorAcknowledgementStatus(self):
        """Test RemoteReplicatorAcknowledgementStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

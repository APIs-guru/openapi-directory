# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.repair_task import RepairTask

class TestRepairTask(unittest.TestCase):
    """RepairTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RepairTask:
        """Test RepairTask
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RepairTask`
        """
        model = RepairTask()
        if include_optional:
            return RepairTask(
                action = '',
                description = '',
                executor = '',
                executor_data = '',
                flags = 56,
                history = openapi_client.models.repair_task_history.RepairTaskHistory(
                    approved_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    claimed_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    completed_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    executing_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    preparing_health_check_end_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    preparing_health_check_start_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    preparing_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    restoring_health_check_end_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    restoring_health_check_start_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    restoring_utc_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                impact = openapi_client.models.repair_impact_description_base.RepairImpactDescriptionBase(
                    kind = 'Invalid', ),
                perform_preparing_health_check = True,
                perform_restoring_health_check = True,
                preparing_health_check_state = 'NotStarted',
                restoring_health_check_state = 'NotStarted',
                result_code = 56,
                result_details = '',
                result_status = 'Invalid',
                state = 'Invalid',
                target = openapi_client.models.repair_target_description_base.RepairTargetDescriptionBase(
                    kind = 'Invalid', ),
                task_id = '',
                version = ''
            )
        else:
            return RepairTask(
                action = '',
                state = 'Invalid',
                task_id = '',
        )
        """

    def testRepairTask(self):
        """Test RepairTask"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_health_policies import ApplicationHealthPolicies
from openapi_client.models.application_health_state_filter import ApplicationHealthStateFilter
from openapi_client.models.cluster_health_policy import ClusterHealthPolicy
from openapi_client.models.node_health_state_filter import NodeHealthStateFilter
from typing import Optional, Set
from typing_extensions import Self

class ClusterHealthChunkQueryDescription(BaseModel):
    """
    The cluster health chunk query description, which can specify the health policies to evaluate cluster health and very expressive filters to select which cluster entities to include in response.
    """ # noqa: E501
    application_filters: Optional[List[ApplicationHealthStateFilter]] = Field(default=None, description="Defines a list of filters that specify which applications to be included in the returned cluster health chunk. If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple application filters. For example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type.", alias="ApplicationFilters")
    application_health_policies: Optional[ApplicationHealthPolicies] = Field(default=None, alias="ApplicationHealthPolicies")
    cluster_health_policy: Optional[ClusterHealthPolicy] = Field(default=None, alias="ClusterHealthPolicy")
    node_filters: Optional[List[NodeHealthStateFilter]] = Field(default=None, description="Defines a list of filters that specify which nodes to be included in the returned cluster health chunk. If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple node filters. For example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName.", alias="NodeFilters")
    __properties: ClassVar[List[str]] = ["ApplicationFilters", "ApplicationHealthPolicies", "ClusterHealthPolicy", "NodeFilters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterHealthChunkQueryDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_filters (list)
        _items = []
        if self.application_filters:
            for _item_application_filters in self.application_filters:
                if _item_application_filters:
                    _items.append(_item_application_filters.to_dict())
            _dict['ApplicationFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of application_health_policies
        if self.application_health_policies:
            _dict['ApplicationHealthPolicies'] = self.application_health_policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_health_policy
        if self.cluster_health_policy:
            _dict['ClusterHealthPolicy'] = self.cluster_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in node_filters (list)
        _items = []
        if self.node_filters:
            for _item_node_filters in self.node_filters:
                if _item_node_filters:
                    _items.append(_item_node_filters.to_dict())
            _dict['NodeFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterHealthChunkQueryDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationFilters": [ApplicationHealthStateFilter.from_dict(_item) for _item in obj["ApplicationFilters"]] if obj.get("ApplicationFilters") is not None else None,
            "ApplicationHealthPolicies": ApplicationHealthPolicies.from_dict(obj["ApplicationHealthPolicies"]) if obj.get("ApplicationHealthPolicies") is not None else None,
            "ClusterHealthPolicy": ClusterHealthPolicy.from_dict(obj["ClusterHealthPolicy"]) if obj.get("ClusterHealthPolicy") is not None else None,
            "NodeFilters": [NodeHealthStateFilter.from_dict(_item) for _item in obj["NodeFilters"]] if obj.get("NodeFilters") is not None else None
        })
        return _obj



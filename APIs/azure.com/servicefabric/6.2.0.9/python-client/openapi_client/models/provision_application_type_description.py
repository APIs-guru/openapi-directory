# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_package_cleanup_policy import ApplicationPackageCleanupPolicy
from openapi_client.models.provision_application_type_description_base import ProvisionApplicationTypeDescriptionBase
from openapi_client.models.provision_application_type_kind import ProvisionApplicationTypeKind
from typing import Optional, Set
from typing_extensions import Self

class ProvisionApplicationTypeDescription(ProvisionApplicationTypeDescriptionBase):
    """
    Describes the operation to register or provision an application type using an application package uploaded to the Service Fabric image store.
    """ # noqa: E501
    application_package_cleanup_policy: Optional[ApplicationPackageCleanupPolicy] = Field(default=None, alias="ApplicationPackageCleanupPolicy")
    application_type_build_path: Optional[StrictStr] = Field(default=None, description="The relative path for the application package in the image store specified during the prior upload operation.", alias="ApplicationTypeBuildPath")
    __properties: ClassVar[List[str]] = ["Async", "Kind", "ApplicationPackageCleanupPolicy", "ApplicationTypeBuildPath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvisionApplicationTypeDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvisionApplicationTypeDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Async": obj.get("Async"),
            "Kind": obj.get("Kind"),
            "ApplicationPackageCleanupPolicy": obj.get("ApplicationPackageCleanupPolicy"),
            "ApplicationTypeBuildPath": obj.get("ApplicationTypeBuildPath")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_evaluation import HealthEvaluation
from openapi_client.models.health_evaluation_kind import HealthEvaluationKind
from openapi_client.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_client.models.health_state import HealthState
from typing import Optional, Set
from typing_extensions import Self

class ApplicationTypeApplicationsHealthEvaluation(HealthEvaluation):
    """
    Represents health evaluation for applications of a particular application type. The application type applications evaluation can be returned when cluster health evaluation returns unhealthy aggregated health state, either Error or Warning. It contains health evaluations for each unhealthy application of the included application type that impacted current aggregated health state.
    """ # noqa: E501
    application_type_name: Optional[StrictStr] = Field(default=None, description="The application type name as defined in the application manifest.", alias="ApplicationTypeName")
    max_percent_unhealthy_applications: Optional[StrictInt] = Field(default=None, description="Maximum allowed percentage of unhealthy applications for the application type, specified as an entry in ApplicationTypeHealthPolicyMap.", alias="MaxPercentUnhealthyApplications")
    total_count: Optional[StrictInt] = Field(default=None, description="Total number of applications of the application type found in the health store.", alias="TotalCount")
    unhealthy_evaluations: Optional[List[HealthEvaluationWrapper]] = Field(default=None, description="List of health evaluations that resulted in the current aggregated health state.", alias="UnhealthyEvaluations")
    __properties: ClassVar[List[str]] = ["AggregatedHealthState", "Description", "Kind", "ApplicationTypeName", "MaxPercentUnhealthyApplications", "TotalCount", "UnhealthyEvaluations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationTypeApplicationsHealthEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in unhealthy_evaluations (list)
        _items = []
        if self.unhealthy_evaluations:
            for _item_unhealthy_evaluations in self.unhealthy_evaluations:
                if _item_unhealthy_evaluations:
                    _items.append(_item_unhealthy_evaluations.to_dict())
            _dict['UnhealthyEvaluations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationTypeApplicationsHealthEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AggregatedHealthState": obj.get("AggregatedHealthState"),
            "Description": obj.get("Description"),
            "Kind": obj.get("Kind"),
            "ApplicationTypeName": obj.get("ApplicationTypeName"),
            "MaxPercentUnhealthyApplications": obj.get("MaxPercentUnhealthyApplications"),
            "TotalCount": obj.get("TotalCount"),
            "UnhealthyEvaluations": [HealthEvaluationWrapper.from_dict(_item) for _item in obj["UnhealthyEvaluations"]] if obj.get("UnhealthyEvaluations") is not None else None
        })
        return _obj



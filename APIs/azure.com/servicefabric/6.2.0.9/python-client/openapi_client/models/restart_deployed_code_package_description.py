# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestartDeployedCodePackageDescription(BaseModel):
    """
    Defines description for restarting a deployed code package on Service Fabric node.
    """ # noqa: E501
    code_package_instance_id: StrictStr = Field(description="The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.", alias="CodePackageInstanceId")
    code_package_name: StrictStr = Field(description="The name of the code package defined in the service manifest.", alias="CodePackageName")
    service_manifest_name: StrictStr = Field(description="The name of the service manifest.", alias="ServiceManifestName")
    service_package_activation_id: Optional[StrictStr] = Field(default=None, description="The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.", alias="ServicePackageActivationId")
    __properties: ClassVar[List[str]] = ["CodePackageInstanceId", "CodePackageName", "ServiceManifestName", "ServicePackageActivationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestartDeployedCodePackageDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestartDeployedCodePackageDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CodePackageInstanceId": obj.get("CodePackageInstanceId"),
            "CodePackageName": obj.get("CodePackageName"),
            "ServiceManifestName": obj.get("ServiceManifestName"),
            "ServicePackageActivationId": obj.get("ServicePackageActivationId")
        })
        return _obj



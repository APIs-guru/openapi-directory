# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.fabric_event_kind import FabricEventKind
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.application_created_event import ApplicationCreatedEvent
    from openapi_client.models.application_deleted_event import ApplicationDeletedEvent
    from openapi_client.models.application_event import ApplicationEvent
    from openapi_client.models.application_health_report_created_event import ApplicationHealthReportCreatedEvent
    from openapi_client.models.application_health_report_expired_event import ApplicationHealthReportExpiredEvent
    from openapi_client.models.application_upgrade_complete_event import ApplicationUpgradeCompleteEvent
    from openapi_client.models.application_upgrade_domain_complete_event import ApplicationUpgradeDomainCompleteEvent
    from openapi_client.models.application_upgrade_rollback_complete_event import ApplicationUpgradeRollbackCompleteEvent
    from openapi_client.models.application_upgrade_rollback_start_event import ApplicationUpgradeRollbackStartEvent
    from openapi_client.models.application_upgrade_start_event import ApplicationUpgradeStartEvent
    from openapi_client.models.chaos_move_primary_fault_scheduled_event import ChaosMovePrimaryFaultScheduledEvent
    from openapi_client.models.chaos_move_secondary_fault_scheduled_event import ChaosMoveSecondaryFaultScheduledEvent
    from openapi_client.models.chaos_remove_replica_fault_completed_event import ChaosRemoveReplicaFaultCompletedEvent
    from openapi_client.models.chaos_remove_replica_fault_scheduled_event import ChaosRemoveReplicaFaultScheduledEvent
    from openapi_client.models.chaos_restart_code_package_fault_completed_event import ChaosRestartCodePackageFaultCompletedEvent
    from openapi_client.models.chaos_restart_code_package_fault_scheduled_event import ChaosRestartCodePackageFaultScheduledEvent
    from openapi_client.models.chaos_restart_node_fault_completed_event import ChaosRestartNodeFaultCompletedEvent
    from openapi_client.models.chaos_restart_node_fault_scheduled_event import ChaosRestartNodeFaultScheduledEvent
    from openapi_client.models.chaos_restart_replica_fault_scheduled_event import ChaosRestartReplicaFaultScheduledEvent
    from openapi_client.models.chaos_started_event import ChaosStartedEvent
    from openapi_client.models.chaos_stopped_event import ChaosStoppedEvent
    from openapi_client.models.cluster_event import ClusterEvent
    from openapi_client.models.cluster_health_report_created_event import ClusterHealthReportCreatedEvent
    from openapi_client.models.cluster_health_report_expired_event import ClusterHealthReportExpiredEvent
    from openapi_client.models.cluster_upgrade_complete_event import ClusterUpgradeCompleteEvent
    from openapi_client.models.cluster_upgrade_domain_complete_event import ClusterUpgradeDomainCompleteEvent
    from openapi_client.models.cluster_upgrade_rollback_complete_event import ClusterUpgradeRollbackCompleteEvent
    from openapi_client.models.cluster_upgrade_rollback_start_event import ClusterUpgradeRollbackStartEvent
    from openapi_client.models.cluster_upgrade_start_event import ClusterUpgradeStartEvent
    from openapi_client.models.container_deactivated_event import ContainerDeactivatedEvent
    from openapi_client.models.container_instance_event import ContainerInstanceEvent
    from openapi_client.models.deployed_application_health_report_created_event import DeployedApplicationHealthReportCreatedEvent
    from openapi_client.models.deployed_application_health_report_expired_event import DeployedApplicationHealthReportExpiredEvent
    from openapi_client.models.deployed_service_health_report_created_event import DeployedServiceHealthReportCreatedEvent
    from openapi_client.models.deployed_service_health_report_expired_event import DeployedServiceHealthReportExpiredEvent
    from openapi_client.models.node_aborted_event import NodeAbortedEvent
    from openapi_client.models.node_aborting_event import NodeAbortingEvent
    from openapi_client.models.node_added_event import NodeAddedEvent
    from openapi_client.models.node_close_event import NodeCloseEvent
    from openapi_client.models.node_closing_event import NodeClosingEvent
    from openapi_client.models.node_deactivate_complete_event import NodeDeactivateCompleteEvent
    from openapi_client.models.node_deactivate_start_event import NodeDeactivateStartEvent
    from openapi_client.models.node_down_event import NodeDownEvent
    from openapi_client.models.node_event import NodeEvent
    from openapi_client.models.node_health_report_created_event import NodeHealthReportCreatedEvent
    from openapi_client.models.node_health_report_expired_event import NodeHealthReportExpiredEvent
    from openapi_client.models.node_open_failed_event import NodeOpenFailedEvent
    from openapi_client.models.node_opened_success_event import NodeOpenedSuccessEvent
    from openapi_client.models.node_opening_event import NodeOpeningEvent
    from openapi_client.models.node_removed_event import NodeRemovedEvent
    from openapi_client.models.node_up_event import NodeUpEvent
    from openapi_client.models.partition_analysis_event import PartitionAnalysisEvent
    from openapi_client.models.partition_event import PartitionEvent
    from openapi_client.models.partition_health_report_created_event import PartitionHealthReportCreatedEvent
    from openapi_client.models.partition_health_report_expired_event import PartitionHealthReportExpiredEvent
    from openapi_client.models.partition_primary_move_analysis_event import PartitionPrimaryMoveAnalysisEvent
    from openapi_client.models.partition_reconfiguration_completed_event import PartitionReconfigurationCompletedEvent
    from openapi_client.models.process_deactivated_event import ProcessDeactivatedEvent
    from openapi_client.models.replica_event import ReplicaEvent
    from openapi_client.models.service_created_event import ServiceCreatedEvent
    from openapi_client.models.service_deleted_event import ServiceDeletedEvent
    from openapi_client.models.service_event import ServiceEvent
    from openapi_client.models.service_health_report_created_event import ServiceHealthReportCreatedEvent
    from openapi_client.models.service_health_report_expired_event import ServiceHealthReportExpiredEvent
    from openapi_client.models.stateful_replica_health_report_created_event import StatefulReplicaHealthReportCreatedEvent
    from openapi_client.models.stateful_replica_health_report_expired_event import StatefulReplicaHealthReportExpiredEvent
    from openapi_client.models.stateless_replica_health_report_created_event import StatelessReplicaHealthReportCreatedEvent
    from openapi_client.models.stateless_replica_health_report_expired_event import StatelessReplicaHealthReportExpiredEvent

class FabricEvent(BaseModel):
    """
    Represents the base for all Fabric Events.
    """ # noqa: E501
    event_instance_id: StrictStr = Field(description="The identifier for the FabricEvent instance.", alias="EventInstanceId")
    has_correlated_events: Optional[StrictBool] = Field(default=None, description="Shows there is existing related events available.", alias="HasCorrelatedEvents")
    kind: FabricEventKind = Field(alias="Kind")
    time_stamp: datetime = Field(description="The time event was logged.", alias="TimeStamp")
    __properties: ClassVar[List[str]] = ["EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ApplicationCreatedEvent': 'ApplicationCreatedEvent','ApplicationDeletedEvent': 'ApplicationDeletedEvent','ApplicationEvent': 'ApplicationEvent','ApplicationHealthReportCreatedEvent': 'ApplicationHealthReportCreatedEvent','ApplicationHealthReportExpiredEvent': 'ApplicationHealthReportExpiredEvent','ApplicationUpgradeCompleteEvent': 'ApplicationUpgradeCompleteEvent','ApplicationUpgradeDomainCompleteEvent': 'ApplicationUpgradeDomainCompleteEvent','ApplicationUpgradeRollbackCompleteEvent': 'ApplicationUpgradeRollbackCompleteEvent','ApplicationUpgradeRollbackStartEvent': 'ApplicationUpgradeRollbackStartEvent','ApplicationUpgradeStartEvent': 'ApplicationUpgradeStartEvent','ChaosMovePrimaryFaultScheduledEvent': 'ChaosMovePrimaryFaultScheduledEvent','ChaosMoveSecondaryFaultScheduledEvent': 'ChaosMoveSecondaryFaultScheduledEvent','ChaosRemoveReplicaFaultCompletedEvent': 'ChaosRemoveReplicaFaultCompletedEvent','ChaosRemoveReplicaFaultScheduledEvent': 'ChaosRemoveReplicaFaultScheduledEvent','ChaosRestartCodePackageFaultCompletedEvent': 'ChaosRestartCodePackageFaultCompletedEvent','ChaosRestartCodePackageFaultScheduledEvent': 'ChaosRestartCodePackageFaultScheduledEvent','ChaosRestartNodeFaultCompletedEvent': 'ChaosRestartNodeFaultCompletedEvent','ChaosRestartNodeFaultScheduledEvent': 'ChaosRestartNodeFaultScheduledEvent','ChaosRestartReplicaFaultScheduledEvent': 'ChaosRestartReplicaFaultScheduledEvent','ChaosStartedEvent': 'ChaosStartedEvent','ChaosStoppedEvent': 'ChaosStoppedEvent','ClusterEvent': 'ClusterEvent','ClusterHealthReportCreatedEvent': 'ClusterHealthReportCreatedEvent','ClusterHealthReportExpiredEvent': 'ClusterHealthReportExpiredEvent','ClusterUpgradeCompleteEvent': 'ClusterUpgradeCompleteEvent','ClusterUpgradeDomainCompleteEvent': 'ClusterUpgradeDomainCompleteEvent','ClusterUpgradeRollbackCompleteEvent': 'ClusterUpgradeRollbackCompleteEvent','ClusterUpgradeRollbackStartEvent': 'ClusterUpgradeRollbackStartEvent','ClusterUpgradeStartEvent': 'ClusterUpgradeStartEvent','ContainerDeactivatedEvent': 'ContainerDeactivatedEvent','ContainerInstanceEvent': 'ContainerInstanceEvent','DeployedApplicationHealthReportCreatedEvent': 'DeployedApplicationHealthReportCreatedEvent','DeployedApplicationHealthReportExpiredEvent': 'DeployedApplicationHealthReportExpiredEvent','DeployedServiceHealthReportCreatedEvent': 'DeployedServiceHealthReportCreatedEvent','DeployedServiceHealthReportExpiredEvent': 'DeployedServiceHealthReportExpiredEvent','NodeAbortedEvent': 'NodeAbortedEvent','NodeAbortingEvent': 'NodeAbortingEvent','NodeAddedEvent': 'NodeAddedEvent','NodeCloseEvent': 'NodeCloseEvent','NodeClosingEvent': 'NodeClosingEvent','NodeDeactivateCompleteEvent': 'NodeDeactivateCompleteEvent','NodeDeactivateStartEvent': 'NodeDeactivateStartEvent','NodeDownEvent': 'NodeDownEvent','NodeEvent': 'NodeEvent','NodeHealthReportCreatedEvent': 'NodeHealthReportCreatedEvent','NodeHealthReportExpiredEvent': 'NodeHealthReportExpiredEvent','NodeOpenFailedEvent': 'NodeOpenFailedEvent','NodeOpenedSuccessEvent': 'NodeOpenedSuccessEvent','NodeOpeningEvent': 'NodeOpeningEvent','NodeRemovedEvent': 'NodeRemovedEvent','NodeUpEvent': 'NodeUpEvent','PartitionAnalysisEvent': 'PartitionAnalysisEvent','PartitionEvent': 'PartitionEvent','PartitionHealthReportCreatedEvent': 'PartitionHealthReportCreatedEvent','PartitionHealthReportExpiredEvent': 'PartitionHealthReportExpiredEvent','PartitionPrimaryMoveAnalysisEvent': 'PartitionPrimaryMoveAnalysisEvent','PartitionReconfigurationCompletedEvent': 'PartitionReconfigurationCompletedEvent','ProcessDeactivatedEvent': 'ProcessDeactivatedEvent','ReplicaEvent': 'ReplicaEvent','ServiceCreatedEvent': 'ServiceCreatedEvent','ServiceDeletedEvent': 'ServiceDeletedEvent','ServiceEvent': 'ServiceEvent','ServiceHealthReportCreatedEvent': 'ServiceHealthReportCreatedEvent','ServiceHealthReportExpiredEvent': 'ServiceHealthReportExpiredEvent','StatefulReplicaHealthReportCreatedEvent': 'StatefulReplicaHealthReportCreatedEvent','StatefulReplicaHealthReportExpiredEvent': 'StatefulReplicaHealthReportExpiredEvent','StatelessReplicaHealthReportCreatedEvent': 'StatelessReplicaHealthReportCreatedEvent','StatelessReplicaHealthReportExpiredEvent': 'StatelessReplicaHealthReportExpiredEvent'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ApplicationCreatedEvent, ApplicationDeletedEvent, ApplicationEvent, ApplicationHealthReportCreatedEvent, ApplicationHealthReportExpiredEvent, ApplicationUpgradeCompleteEvent, ApplicationUpgradeDomainCompleteEvent, ApplicationUpgradeRollbackCompleteEvent, ApplicationUpgradeRollbackStartEvent, ApplicationUpgradeStartEvent, ChaosMovePrimaryFaultScheduledEvent, ChaosMoveSecondaryFaultScheduledEvent, ChaosRemoveReplicaFaultCompletedEvent, ChaosRemoveReplicaFaultScheduledEvent, ChaosRestartCodePackageFaultCompletedEvent, ChaosRestartCodePackageFaultScheduledEvent, ChaosRestartNodeFaultCompletedEvent, ChaosRestartNodeFaultScheduledEvent, ChaosRestartReplicaFaultScheduledEvent, ChaosStartedEvent, ChaosStoppedEvent, ClusterEvent, ClusterHealthReportCreatedEvent, ClusterHealthReportExpiredEvent, ClusterUpgradeCompleteEvent, ClusterUpgradeDomainCompleteEvent, ClusterUpgradeRollbackCompleteEvent, ClusterUpgradeRollbackStartEvent, ClusterUpgradeStartEvent, ContainerDeactivatedEvent, ContainerInstanceEvent, DeployedApplicationHealthReportCreatedEvent, DeployedApplicationHealthReportExpiredEvent, DeployedServiceHealthReportCreatedEvent, DeployedServiceHealthReportExpiredEvent, NodeAbortedEvent, NodeAbortingEvent, NodeAddedEvent, NodeCloseEvent, NodeClosingEvent, NodeDeactivateCompleteEvent, NodeDeactivateStartEvent, NodeDownEvent, NodeEvent, NodeHealthReportCreatedEvent, NodeHealthReportExpiredEvent, NodeOpenFailedEvent, NodeOpenedSuccessEvent, NodeOpeningEvent, NodeRemovedEvent, NodeUpEvent, PartitionAnalysisEvent, PartitionEvent, PartitionHealthReportCreatedEvent, PartitionHealthReportExpiredEvent, PartitionPrimaryMoveAnalysisEvent, PartitionReconfigurationCompletedEvent, ProcessDeactivatedEvent, ReplicaEvent, ServiceCreatedEvent, ServiceDeletedEvent, ServiceEvent, ServiceHealthReportCreatedEvent, ServiceHealthReportExpiredEvent, StatefulReplicaHealthReportCreatedEvent, StatefulReplicaHealthReportExpiredEvent, StatelessReplicaHealthReportCreatedEvent, StatelessReplicaHealthReportExpiredEvent]]:
        """Create an instance of FabricEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ApplicationCreatedEvent, ApplicationDeletedEvent, ApplicationEvent, ApplicationHealthReportCreatedEvent, ApplicationHealthReportExpiredEvent, ApplicationUpgradeCompleteEvent, ApplicationUpgradeDomainCompleteEvent, ApplicationUpgradeRollbackCompleteEvent, ApplicationUpgradeRollbackStartEvent, ApplicationUpgradeStartEvent, ChaosMovePrimaryFaultScheduledEvent, ChaosMoveSecondaryFaultScheduledEvent, ChaosRemoveReplicaFaultCompletedEvent, ChaosRemoveReplicaFaultScheduledEvent, ChaosRestartCodePackageFaultCompletedEvent, ChaosRestartCodePackageFaultScheduledEvent, ChaosRestartNodeFaultCompletedEvent, ChaosRestartNodeFaultScheduledEvent, ChaosRestartReplicaFaultScheduledEvent, ChaosStartedEvent, ChaosStoppedEvent, ClusterEvent, ClusterHealthReportCreatedEvent, ClusterHealthReportExpiredEvent, ClusterUpgradeCompleteEvent, ClusterUpgradeDomainCompleteEvent, ClusterUpgradeRollbackCompleteEvent, ClusterUpgradeRollbackStartEvent, ClusterUpgradeStartEvent, ContainerDeactivatedEvent, ContainerInstanceEvent, DeployedApplicationHealthReportCreatedEvent, DeployedApplicationHealthReportExpiredEvent, DeployedServiceHealthReportCreatedEvent, DeployedServiceHealthReportExpiredEvent, NodeAbortedEvent, NodeAbortingEvent, NodeAddedEvent, NodeCloseEvent, NodeClosingEvent, NodeDeactivateCompleteEvent, NodeDeactivateStartEvent, NodeDownEvent, NodeEvent, NodeHealthReportCreatedEvent, NodeHealthReportExpiredEvent, NodeOpenFailedEvent, NodeOpenedSuccessEvent, NodeOpeningEvent, NodeRemovedEvent, NodeUpEvent, PartitionAnalysisEvent, PartitionEvent, PartitionHealthReportCreatedEvent, PartitionHealthReportExpiredEvent, PartitionPrimaryMoveAnalysisEvent, PartitionReconfigurationCompletedEvent, ProcessDeactivatedEvent, ReplicaEvent, ServiceCreatedEvent, ServiceDeletedEvent, ServiceEvent, ServiceHealthReportCreatedEvent, ServiceHealthReportExpiredEvent, StatefulReplicaHealthReportCreatedEvent, StatefulReplicaHealthReportExpiredEvent, StatelessReplicaHealthReportCreatedEvent, StatelessReplicaHealthReportExpiredEvent]]:
        """Create an instance of FabricEvent from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ApplicationCreatedEvent':
            return import_module("openapi_client.models.application_created_event").ApplicationCreatedEvent.from_dict(obj)
        if object_type ==  'ApplicationDeletedEvent':
            return import_module("openapi_client.models.application_deleted_event").ApplicationDeletedEvent.from_dict(obj)
        if object_type ==  'ApplicationEvent':
            return import_module("openapi_client.models.application_event").ApplicationEvent.from_dict(obj)
        if object_type ==  'ApplicationHealthReportCreatedEvent':
            return import_module("openapi_client.models.application_health_report_created_event").ApplicationHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'ApplicationHealthReportExpiredEvent':
            return import_module("openapi_client.models.application_health_report_expired_event").ApplicationHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeCompleteEvent':
            return import_module("openapi_client.models.application_upgrade_complete_event").ApplicationUpgradeCompleteEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeDomainCompleteEvent':
            return import_module("openapi_client.models.application_upgrade_domain_complete_event").ApplicationUpgradeDomainCompleteEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeRollbackCompleteEvent':
            return import_module("openapi_client.models.application_upgrade_rollback_complete_event").ApplicationUpgradeRollbackCompleteEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeRollbackStartEvent':
            return import_module("openapi_client.models.application_upgrade_rollback_start_event").ApplicationUpgradeRollbackStartEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeStartEvent':
            return import_module("openapi_client.models.application_upgrade_start_event").ApplicationUpgradeStartEvent.from_dict(obj)
        if object_type ==  'ChaosMovePrimaryFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_move_primary_fault_scheduled_event").ChaosMovePrimaryFaultScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosMoveSecondaryFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_move_secondary_fault_scheduled_event").ChaosMoveSecondaryFaultScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosRemoveReplicaFaultCompletedEvent':
            return import_module("openapi_client.models.chaos_remove_replica_fault_completed_event").ChaosRemoveReplicaFaultCompletedEvent.from_dict(obj)
        if object_type ==  'ChaosRemoveReplicaFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_remove_replica_fault_scheduled_event").ChaosRemoveReplicaFaultScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosRestartCodePackageFaultCompletedEvent':
            return import_module("openapi_client.models.chaos_restart_code_package_fault_completed_event").ChaosRestartCodePackageFaultCompletedEvent.from_dict(obj)
        if object_type ==  'ChaosRestartCodePackageFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_restart_code_package_fault_scheduled_event").ChaosRestartCodePackageFaultScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosRestartNodeFaultCompletedEvent':
            return import_module("openapi_client.models.chaos_restart_node_fault_completed_event").ChaosRestartNodeFaultCompletedEvent.from_dict(obj)
        if object_type ==  'ChaosRestartNodeFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_restart_node_fault_scheduled_event").ChaosRestartNodeFaultScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosRestartReplicaFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_restart_replica_fault_scheduled_event").ChaosRestartReplicaFaultScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosStartedEvent':
            return import_module("openapi_client.models.chaos_started_event").ChaosStartedEvent.from_dict(obj)
        if object_type ==  'ChaosStoppedEvent':
            return import_module("openapi_client.models.chaos_stopped_event").ChaosStoppedEvent.from_dict(obj)
        if object_type ==  'ClusterEvent':
            return import_module("openapi_client.models.cluster_event").ClusterEvent.from_dict(obj)
        if object_type ==  'ClusterHealthReportCreatedEvent':
            return import_module("openapi_client.models.cluster_health_report_created_event").ClusterHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'ClusterHealthReportExpiredEvent':
            return import_module("openapi_client.models.cluster_health_report_expired_event").ClusterHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeCompleteEvent':
            return import_module("openapi_client.models.cluster_upgrade_complete_event").ClusterUpgradeCompleteEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeDomainCompleteEvent':
            return import_module("openapi_client.models.cluster_upgrade_domain_complete_event").ClusterUpgradeDomainCompleteEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeRollbackCompleteEvent':
            return import_module("openapi_client.models.cluster_upgrade_rollback_complete_event").ClusterUpgradeRollbackCompleteEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeRollbackStartEvent':
            return import_module("openapi_client.models.cluster_upgrade_rollback_start_event").ClusterUpgradeRollbackStartEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeStartEvent':
            return import_module("openapi_client.models.cluster_upgrade_start_event").ClusterUpgradeStartEvent.from_dict(obj)
        if object_type ==  'ContainerDeactivatedEvent':
            return import_module("openapi_client.models.container_deactivated_event").ContainerDeactivatedEvent.from_dict(obj)
        if object_type ==  'ContainerInstanceEvent':
            return import_module("openapi_client.models.container_instance_event").ContainerInstanceEvent.from_dict(obj)
        if object_type ==  'DeployedApplicationHealthReportCreatedEvent':
            return import_module("openapi_client.models.deployed_application_health_report_created_event").DeployedApplicationHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'DeployedApplicationHealthReportExpiredEvent':
            return import_module("openapi_client.models.deployed_application_health_report_expired_event").DeployedApplicationHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'DeployedServiceHealthReportCreatedEvent':
            return import_module("openapi_client.models.deployed_service_health_report_created_event").DeployedServiceHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'DeployedServiceHealthReportExpiredEvent':
            return import_module("openapi_client.models.deployed_service_health_report_expired_event").DeployedServiceHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'NodeAbortedEvent':
            return import_module("openapi_client.models.node_aborted_event").NodeAbortedEvent.from_dict(obj)
        if object_type ==  'NodeAbortingEvent':
            return import_module("openapi_client.models.node_aborting_event").NodeAbortingEvent.from_dict(obj)
        if object_type ==  'NodeAddedEvent':
            return import_module("openapi_client.models.node_added_event").NodeAddedEvent.from_dict(obj)
        if object_type ==  'NodeCloseEvent':
            return import_module("openapi_client.models.node_close_event").NodeCloseEvent.from_dict(obj)
        if object_type ==  'NodeClosingEvent':
            return import_module("openapi_client.models.node_closing_event").NodeClosingEvent.from_dict(obj)
        if object_type ==  'NodeDeactivateCompleteEvent':
            return import_module("openapi_client.models.node_deactivate_complete_event").NodeDeactivateCompleteEvent.from_dict(obj)
        if object_type ==  'NodeDeactivateStartEvent':
            return import_module("openapi_client.models.node_deactivate_start_event").NodeDeactivateStartEvent.from_dict(obj)
        if object_type ==  'NodeDownEvent':
            return import_module("openapi_client.models.node_down_event").NodeDownEvent.from_dict(obj)
        if object_type ==  'NodeEvent':
            return import_module("openapi_client.models.node_event").NodeEvent.from_dict(obj)
        if object_type ==  'NodeHealthReportCreatedEvent':
            return import_module("openapi_client.models.node_health_report_created_event").NodeHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'NodeHealthReportExpiredEvent':
            return import_module("openapi_client.models.node_health_report_expired_event").NodeHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'NodeOpenFailedEvent':
            return import_module("openapi_client.models.node_open_failed_event").NodeOpenFailedEvent.from_dict(obj)
        if object_type ==  'NodeOpenedSuccessEvent':
            return import_module("openapi_client.models.node_opened_success_event").NodeOpenedSuccessEvent.from_dict(obj)
        if object_type ==  'NodeOpeningEvent':
            return import_module("openapi_client.models.node_opening_event").NodeOpeningEvent.from_dict(obj)
        if object_type ==  'NodeRemovedEvent':
            return import_module("openapi_client.models.node_removed_event").NodeRemovedEvent.from_dict(obj)
        if object_type ==  'NodeUpEvent':
            return import_module("openapi_client.models.node_up_event").NodeUpEvent.from_dict(obj)
        if object_type ==  'PartitionAnalysisEvent':
            return import_module("openapi_client.models.partition_analysis_event").PartitionAnalysisEvent.from_dict(obj)
        if object_type ==  'PartitionEvent':
            return import_module("openapi_client.models.partition_event").PartitionEvent.from_dict(obj)
        if object_type ==  'PartitionHealthReportCreatedEvent':
            return import_module("openapi_client.models.partition_health_report_created_event").PartitionHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'PartitionHealthReportExpiredEvent':
            return import_module("openapi_client.models.partition_health_report_expired_event").PartitionHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'PartitionPrimaryMoveAnalysisEvent':
            return import_module("openapi_client.models.partition_primary_move_analysis_event").PartitionPrimaryMoveAnalysisEvent.from_dict(obj)
        if object_type ==  'PartitionReconfigurationCompletedEvent':
            return import_module("openapi_client.models.partition_reconfiguration_completed_event").PartitionReconfigurationCompletedEvent.from_dict(obj)
        if object_type ==  'ProcessDeactivatedEvent':
            return import_module("openapi_client.models.process_deactivated_event").ProcessDeactivatedEvent.from_dict(obj)
        if object_type ==  'ReplicaEvent':
            return import_module("openapi_client.models.replica_event").ReplicaEvent.from_dict(obj)
        if object_type ==  'ServiceCreatedEvent':
            return import_module("openapi_client.models.service_created_event").ServiceCreatedEvent.from_dict(obj)
        if object_type ==  'ServiceDeletedEvent':
            return import_module("openapi_client.models.service_deleted_event").ServiceDeletedEvent.from_dict(obj)
        if object_type ==  'ServiceEvent':
            return import_module("openapi_client.models.service_event").ServiceEvent.from_dict(obj)
        if object_type ==  'ServiceHealthReportCreatedEvent':
            return import_module("openapi_client.models.service_health_report_created_event").ServiceHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'ServiceHealthReportExpiredEvent':
            return import_module("openapi_client.models.service_health_report_expired_event").ServiceHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'StatefulReplicaHealthReportCreatedEvent':
            return import_module("openapi_client.models.stateful_replica_health_report_created_event").StatefulReplicaHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'StatefulReplicaHealthReportExpiredEvent':
            return import_module("openapi_client.models.stateful_replica_health_report_expired_event").StatefulReplicaHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'StatelessReplicaHealthReportCreatedEvent':
            return import_module("openapi_client.models.stateless_replica_health_report_created_event").StatelessReplicaHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'StatelessReplicaHealthReportExpiredEvent':
            return import_module("openapi_client.models.stateless_replica_health_report_expired_event").StatelessReplicaHealthReportExpiredEvent.from_dict(obj)

        raise ValueError("FabricEvent failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



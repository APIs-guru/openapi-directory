# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.health_evaluation_kind import HealthEvaluationKind
from openapi_client.models.health_state import HealthState
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.application_health_evaluation import ApplicationHealthEvaluation
    from openapi_client.models.application_type_applications_health_evaluation import ApplicationTypeApplicationsHealthEvaluation
    from openapi_client.models.applications_health_evaluation import ApplicationsHealthEvaluation
    from openapi_client.models.delta_nodes_check_health_evaluation import DeltaNodesCheckHealthEvaluation
    from openapi_client.models.deployed_application_health_evaluation import DeployedApplicationHealthEvaluation
    from openapi_client.models.deployed_applications_health_evaluation import DeployedApplicationsHealthEvaluation
    from openapi_client.models.deployed_service_package_health_evaluation import DeployedServicePackageHealthEvaluation
    from openapi_client.models.deployed_service_packages_health_evaluation import DeployedServicePackagesHealthEvaluation
    from openapi_client.models.event_health_evaluation import EventHealthEvaluation
    from openapi_client.models.node_health_evaluation import NodeHealthEvaluation
    from openapi_client.models.nodes_health_evaluation import NodesHealthEvaluation
    from openapi_client.models.partition_health_evaluation import PartitionHealthEvaluation
    from openapi_client.models.partitions_health_evaluation import PartitionsHealthEvaluation
    from openapi_client.models.replica_health_evaluation import ReplicaHealthEvaluation
    from openapi_client.models.replicas_health_evaluation import ReplicasHealthEvaluation
    from openapi_client.models.service_health_evaluation import ServiceHealthEvaluation
    from openapi_client.models.services_health_evaluation import ServicesHealthEvaluation
    from openapi_client.models.system_application_health_evaluation import SystemApplicationHealthEvaluation
    from openapi_client.models.upgrade_domain_delta_nodes_check_health_evaluation import UpgradeDomainDeltaNodesCheckHealthEvaluation
    from openapi_client.models.upgrade_domain_nodes_health_evaluation import UpgradeDomainNodesHealthEvaluation

class HealthEvaluation(BaseModel):
    """
    Represents a health evaluation which describes the data and the algorithm used by health manager to evaluate the health of an entity.
    """ # noqa: E501
    aggregated_health_state: Optional[HealthState] = Field(default=None, alias="AggregatedHealthState")
    description: Optional[StrictStr] = Field(default=None, description="Description of the health evaluation, which represents a summary of the evaluation process.", alias="Description")
    kind: HealthEvaluationKind = Field(alias="Kind")
    __properties: ClassVar[List[str]] = ["AggregatedHealthState", "Description", "Kind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ApplicationHealthEvaluation': 'ApplicationHealthEvaluation','ApplicationTypeApplicationsHealthEvaluation': 'ApplicationTypeApplicationsHealthEvaluation','ApplicationsHealthEvaluation': 'ApplicationsHealthEvaluation','DeltaNodesCheckHealthEvaluation': 'DeltaNodesCheckHealthEvaluation','DeployedApplicationHealthEvaluation': 'DeployedApplicationHealthEvaluation','DeployedApplicationsHealthEvaluation': 'DeployedApplicationsHealthEvaluation','DeployedServicePackageHealthEvaluation': 'DeployedServicePackageHealthEvaluation','DeployedServicePackagesHealthEvaluation': 'DeployedServicePackagesHealthEvaluation','EventHealthEvaluation': 'EventHealthEvaluation','NodeHealthEvaluation': 'NodeHealthEvaluation','NodesHealthEvaluation': 'NodesHealthEvaluation','PartitionHealthEvaluation': 'PartitionHealthEvaluation','PartitionsHealthEvaluation': 'PartitionsHealthEvaluation','ReplicaHealthEvaluation': 'ReplicaHealthEvaluation','ReplicasHealthEvaluation': 'ReplicasHealthEvaluation','ServiceHealthEvaluation': 'ServiceHealthEvaluation','ServicesHealthEvaluation': 'ServicesHealthEvaluation','SystemApplicationHealthEvaluation': 'SystemApplicationHealthEvaluation','UpgradeDomainDeltaNodesCheckHealthEvaluation': 'UpgradeDomainDeltaNodesCheckHealthEvaluation','UpgradeDomainNodesHealthEvaluation': 'UpgradeDomainNodesHealthEvaluation'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ApplicationHealthEvaluation, ApplicationTypeApplicationsHealthEvaluation, ApplicationsHealthEvaluation, DeltaNodesCheckHealthEvaluation, DeployedApplicationHealthEvaluation, DeployedApplicationsHealthEvaluation, DeployedServicePackageHealthEvaluation, DeployedServicePackagesHealthEvaluation, EventHealthEvaluation, NodeHealthEvaluation, NodesHealthEvaluation, PartitionHealthEvaluation, PartitionsHealthEvaluation, ReplicaHealthEvaluation, ReplicasHealthEvaluation, ServiceHealthEvaluation, ServicesHealthEvaluation, SystemApplicationHealthEvaluation, UpgradeDomainDeltaNodesCheckHealthEvaluation, UpgradeDomainNodesHealthEvaluation]]:
        """Create an instance of HealthEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ApplicationHealthEvaluation, ApplicationTypeApplicationsHealthEvaluation, ApplicationsHealthEvaluation, DeltaNodesCheckHealthEvaluation, DeployedApplicationHealthEvaluation, DeployedApplicationsHealthEvaluation, DeployedServicePackageHealthEvaluation, DeployedServicePackagesHealthEvaluation, EventHealthEvaluation, NodeHealthEvaluation, NodesHealthEvaluation, PartitionHealthEvaluation, PartitionsHealthEvaluation, ReplicaHealthEvaluation, ReplicasHealthEvaluation, ServiceHealthEvaluation, ServicesHealthEvaluation, SystemApplicationHealthEvaluation, UpgradeDomainDeltaNodesCheckHealthEvaluation, UpgradeDomainNodesHealthEvaluation]]:
        """Create an instance of HealthEvaluation from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ApplicationHealthEvaluation':
            return import_module("openapi_client.models.application_health_evaluation").ApplicationHealthEvaluation.from_dict(obj)
        if object_type ==  'ApplicationTypeApplicationsHealthEvaluation':
            return import_module("openapi_client.models.application_type_applications_health_evaluation").ApplicationTypeApplicationsHealthEvaluation.from_dict(obj)
        if object_type ==  'ApplicationsHealthEvaluation':
            return import_module("openapi_client.models.applications_health_evaluation").ApplicationsHealthEvaluation.from_dict(obj)
        if object_type ==  'DeltaNodesCheckHealthEvaluation':
            return import_module("openapi_client.models.delta_nodes_check_health_evaluation").DeltaNodesCheckHealthEvaluation.from_dict(obj)
        if object_type ==  'DeployedApplicationHealthEvaluation':
            return import_module("openapi_client.models.deployed_application_health_evaluation").DeployedApplicationHealthEvaluation.from_dict(obj)
        if object_type ==  'DeployedApplicationsHealthEvaluation':
            return import_module("openapi_client.models.deployed_applications_health_evaluation").DeployedApplicationsHealthEvaluation.from_dict(obj)
        if object_type ==  'DeployedServicePackageHealthEvaluation':
            return import_module("openapi_client.models.deployed_service_package_health_evaluation").DeployedServicePackageHealthEvaluation.from_dict(obj)
        if object_type ==  'DeployedServicePackagesHealthEvaluation':
            return import_module("openapi_client.models.deployed_service_packages_health_evaluation").DeployedServicePackagesHealthEvaluation.from_dict(obj)
        if object_type ==  'EventHealthEvaluation':
            return import_module("openapi_client.models.event_health_evaluation").EventHealthEvaluation.from_dict(obj)
        if object_type ==  'NodeHealthEvaluation':
            return import_module("openapi_client.models.node_health_evaluation").NodeHealthEvaluation.from_dict(obj)
        if object_type ==  'NodesHealthEvaluation':
            return import_module("openapi_client.models.nodes_health_evaluation").NodesHealthEvaluation.from_dict(obj)
        if object_type ==  'PartitionHealthEvaluation':
            return import_module("openapi_client.models.partition_health_evaluation").PartitionHealthEvaluation.from_dict(obj)
        if object_type ==  'PartitionsHealthEvaluation':
            return import_module("openapi_client.models.partitions_health_evaluation").PartitionsHealthEvaluation.from_dict(obj)
        if object_type ==  'ReplicaHealthEvaluation':
            return import_module("openapi_client.models.replica_health_evaluation").ReplicaHealthEvaluation.from_dict(obj)
        if object_type ==  'ReplicasHealthEvaluation':
            return import_module("openapi_client.models.replicas_health_evaluation").ReplicasHealthEvaluation.from_dict(obj)
        if object_type ==  'ServiceHealthEvaluation':
            return import_module("openapi_client.models.service_health_evaluation").ServiceHealthEvaluation.from_dict(obj)
        if object_type ==  'ServicesHealthEvaluation':
            return import_module("openapi_client.models.services_health_evaluation").ServicesHealthEvaluation.from_dict(obj)
        if object_type ==  'SystemApplicationHealthEvaluation':
            return import_module("openapi_client.models.system_application_health_evaluation").SystemApplicationHealthEvaluation.from_dict(obj)
        if object_type ==  'UpgradeDomainDeltaNodesCheckHealthEvaluation':
            return import_module("openapi_client.models.upgrade_domain_delta_nodes_check_health_evaluation").UpgradeDomainDeltaNodesCheckHealthEvaluation.from_dict(obj)
        if object_type ==  'UpgradeDomainNodesHealthEvaluation':
            return import_module("openapi_client.models.upgrade_domain_nodes_health_evaluation").UpgradeDomainNodesHealthEvaluation.from_dict(obj)

        raise ValueError("HealthEvaluation failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



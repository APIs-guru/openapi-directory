# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.fabric_event import FabricEvent
from openapi_client.models.fabric_event_kind import FabricEventKind
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.chaos_move_primary_fault_scheduled_event import ChaosMovePrimaryFaultScheduledEvent
    from openapi_client.models.chaos_move_secondary_fault_scheduled_event import ChaosMoveSecondaryFaultScheduledEvent
    from openapi_client.models.partition_analysis_event import PartitionAnalysisEvent
    from openapi_client.models.partition_health_report_created_event import PartitionHealthReportCreatedEvent
    from openapi_client.models.partition_health_report_expired_event import PartitionHealthReportExpiredEvent
    from openapi_client.models.partition_primary_move_analysis_event import PartitionPrimaryMoveAnalysisEvent
    from openapi_client.models.partition_reconfiguration_completed_event import PartitionReconfigurationCompletedEvent

class PartitionEvent(FabricEvent):
    """
    Represents the base for all Partition Events.
    """ # noqa: E501
    partition_id: StrictStr = Field(description="An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.", alias="PartitionId")
    __properties: ClassVar[List[str]] = ["EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp", "PartitionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ChaosMovePrimaryFaultScheduledEvent': 'ChaosMovePrimaryFaultScheduledEvent','ChaosMoveSecondaryFaultScheduledEvent': 'ChaosMoveSecondaryFaultScheduledEvent','PartitionAnalysisEvent': 'PartitionAnalysisEvent','PartitionHealthReportCreatedEvent': 'PartitionHealthReportCreatedEvent','PartitionHealthReportExpiredEvent': 'PartitionHealthReportExpiredEvent','PartitionPrimaryMoveAnalysisEvent': 'PartitionPrimaryMoveAnalysisEvent','PartitionReconfigurationCompletedEvent': 'PartitionReconfigurationCompletedEvent'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ChaosMovePrimaryFaultScheduledEvent, ChaosMoveSecondaryFaultScheduledEvent, PartitionAnalysisEvent, PartitionHealthReportCreatedEvent, PartitionHealthReportExpiredEvent, PartitionPrimaryMoveAnalysisEvent, PartitionReconfigurationCompletedEvent]]:
        """Create an instance of PartitionEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ChaosMovePrimaryFaultScheduledEvent, ChaosMoveSecondaryFaultScheduledEvent, PartitionAnalysisEvent, PartitionHealthReportCreatedEvent, PartitionHealthReportExpiredEvent, PartitionPrimaryMoveAnalysisEvent, PartitionReconfigurationCompletedEvent]]:
        """Create an instance of PartitionEvent from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ChaosMovePrimaryFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_move_primary_fault_scheduled_event").ChaosMovePrimaryFaultScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosMoveSecondaryFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_move_secondary_fault_scheduled_event").ChaosMoveSecondaryFaultScheduledEvent.from_dict(obj)
        if object_type ==  'PartitionAnalysisEvent':
            return import_module("openapi_client.models.partition_analysis_event").PartitionAnalysisEvent.from_dict(obj)
        if object_type ==  'PartitionHealthReportCreatedEvent':
            return import_module("openapi_client.models.partition_health_report_created_event").PartitionHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'PartitionHealthReportExpiredEvent':
            return import_module("openapi_client.models.partition_health_report_expired_event").PartitionHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'PartitionPrimaryMoveAnalysisEvent':
            return import_module("openapi_client.models.partition_primary_move_analysis_event").PartitionPrimaryMoveAnalysisEvent.from_dict(obj)
        if object_type ==  'PartitionReconfigurationCompletedEvent':
            return import_module("openapi_client.models.partition_reconfiguration_completed_event").PartitionReconfigurationCompletedEvent.from_dict(obj)

        raise ValueError("PartitionEvent failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployed_application_health_state_chunk_list import DeployedApplicationHealthStateChunkList
from openapi_client.models.health_state import HealthState
from openapi_client.models.service_health_state_chunk_list import ServiceHealthStateChunkList
from typing import Optional, Set
from typing_extensions import Self

class ApplicationHealthStateChunk(BaseModel):
    """
    Represents the health state chunk of a application. The application health state chunk contains the application name, its aggregated health state and any children services and deployed applications that respect the filters in cluster health chunk query description.
    """ # noqa: E501
    health_state: Optional[HealthState] = Field(default=None, alias="HealthState")
    application_name: Optional[StrictStr] = Field(default=None, description="The name of the application, including the 'fabric:' URI scheme.", alias="ApplicationName")
    application_type_name: Optional[StrictStr] = Field(default=None, description="The application type name as defined in the application manifest.", alias="ApplicationTypeName")
    deployed_application_health_state_chunks: Optional[DeployedApplicationHealthStateChunkList] = Field(default=None, alias="DeployedApplicationHealthStateChunks")
    service_health_state_chunks: Optional[ServiceHealthStateChunkList] = Field(default=None, alias="ServiceHealthStateChunks")
    __properties: ClassVar[List[str]] = ["HealthState", "ApplicationName", "ApplicationTypeName", "DeployedApplicationHealthStateChunks", "ServiceHealthStateChunks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationHealthStateChunk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deployed_application_health_state_chunks
        if self.deployed_application_health_state_chunks:
            _dict['DeployedApplicationHealthStateChunks'] = self.deployed_application_health_state_chunks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_health_state_chunks
        if self.service_health_state_chunks:
            _dict['ServiceHealthStateChunks'] = self.service_health_state_chunks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationHealthStateChunk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HealthState": obj.get("HealthState"),
            "ApplicationName": obj.get("ApplicationName"),
            "ApplicationTypeName": obj.get("ApplicationTypeName"),
            "DeployedApplicationHealthStateChunks": DeployedApplicationHealthStateChunkList.from_dict(obj["DeployedApplicationHealthStateChunks"]) if obj.get("DeployedApplicationHealthStateChunks") is not None else None,
            "ServiceHealthStateChunks": ServiceHealthStateChunkList.from_dict(obj["ServiceHealthStateChunks"]) if obj.get("ServiceHealthStateChunks") is not None else None
        })
        return _obj



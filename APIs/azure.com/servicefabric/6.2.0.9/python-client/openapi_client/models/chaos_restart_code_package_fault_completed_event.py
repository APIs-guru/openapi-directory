# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.application_event import ApplicationEvent
from openapi_client.models.fabric_event_kind import FabricEventKind
from typing import Optional, Set
from typing_extensions import Self

class ChaosRestartCodePackageFaultCompletedEvent(ApplicationEvent):
    """
    Chaos Restart Code Package Fault Completed event.
    """ # noqa: E501
    code_package_name: StrictStr = Field(description="Code package name.", alias="CodePackageName")
    fault_group_id: StrictStr = Field(description="Id of fault group.", alias="FaultGroupId")
    fault_id: StrictStr = Field(description="Id of fault.", alias="FaultId")
    node_name: StrictStr = Field(description="The name of a Service Fabric node.", alias="NodeName")
    service_manifest_name: StrictStr = Field(description="Service manifest name.", alias="ServiceManifestName")
    service_package_activation_id: StrictStr = Field(description="Id of Service package activation.", alias="ServicePackageActivationId")
    __properties: ClassVar[List[str]] = ["EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp", "ApplicationId", "CodePackageName", "FaultGroupId", "FaultId", "NodeName", "ServiceManifestName", "ServicePackageActivationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChaosRestartCodePackageFaultCompletedEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChaosRestartCodePackageFaultCompletedEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EventInstanceId": obj.get("EventInstanceId"),
            "HasCorrelatedEvents": obj.get("HasCorrelatedEvents"),
            "Kind": obj.get("Kind"),
            "TimeStamp": obj.get("TimeStamp"),
            "ApplicationId": obj.get("ApplicationId"),
            "CodePackageName": obj.get("CodePackageName"),
            "FaultGroupId": obj.get("FaultGroupId"),
            "FaultId": obj.get("FaultId"),
            "NodeName": obj.get("NodeName"),
            "ServiceManifestName": obj.get("ServiceManifestName"),
            "ServicePackageActivationId": obj.get("ServicePackageActivationId")
        })
        return _obj



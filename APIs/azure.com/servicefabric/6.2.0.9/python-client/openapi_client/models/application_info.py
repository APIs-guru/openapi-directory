# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_definition_kind import ApplicationDefinitionKind
from openapi_client.models.application_parameter import ApplicationParameter
from openapi_client.models.application_status import ApplicationStatus
from openapi_client.models.health_state import HealthState
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInfo(BaseModel):
    """
    Information about a Service Fabric application.
    """ # noqa: E501
    application_definition_kind: Optional[ApplicationDefinitionKind] = Field(default=None, alias="ApplicationDefinitionKind")
    health_state: Optional[HealthState] = Field(default=None, alias="HealthState")
    id: Optional[StrictStr] = Field(default=None, description="The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.", alias="Id")
    name: Optional[StrictStr] = Field(default=None, description="The name of the application, including the 'fabric:' URI scheme.", alias="Name")
    parameters: Optional[List[ApplicationParameter]] = Field(default=None, description="List of application parameters with overridden values from their default values specified in the application manifest.", alias="Parameters")
    status: Optional[ApplicationStatus] = Field(default=None, alias="Status")
    type_name: Optional[StrictStr] = Field(default=None, description="The application type name as defined in the application manifest.", alias="TypeName")
    type_version: Optional[StrictStr] = Field(default=None, description="The version of the application type as defined in the application manifest.", alias="TypeVersion")
    __properties: ClassVar[List[str]] = ["ApplicationDefinitionKind", "HealthState", "Id", "Name", "Parameters", "Status", "TypeName", "TypeVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['Parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationDefinitionKind": obj.get("ApplicationDefinitionKind"),
            "HealthState": obj.get("HealthState"),
            "Id": obj.get("Id"),
            "Name": obj.get("Name"),
            "Parameters": [ApplicationParameter.from_dict(_item) for _item in obj["Parameters"]] if obj.get("Parameters") is not None else None,
            "Status": obj.get("Status"),
            "TypeName": obj.get("TypeName"),
            "TypeVersion": obj.get("TypeVersion")
        })
        return _obj



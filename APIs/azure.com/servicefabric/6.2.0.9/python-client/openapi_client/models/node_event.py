# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.2.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.fabric_event import FabricEvent
from openapi_client.models.fabric_event_kind import FabricEventKind
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.chaos_restart_node_fault_completed_event import ChaosRestartNodeFaultCompletedEvent
    from openapi_client.models.chaos_restart_node_fault_scheduled_event import ChaosRestartNodeFaultScheduledEvent
    from openapi_client.models.node_aborted_event import NodeAbortedEvent
    from openapi_client.models.node_aborting_event import NodeAbortingEvent
    from openapi_client.models.node_added_event import NodeAddedEvent
    from openapi_client.models.node_close_event import NodeCloseEvent
    from openapi_client.models.node_closing_event import NodeClosingEvent
    from openapi_client.models.node_deactivate_complete_event import NodeDeactivateCompleteEvent
    from openapi_client.models.node_deactivate_start_event import NodeDeactivateStartEvent
    from openapi_client.models.node_down_event import NodeDownEvent
    from openapi_client.models.node_health_report_created_event import NodeHealthReportCreatedEvent
    from openapi_client.models.node_health_report_expired_event import NodeHealthReportExpiredEvent
    from openapi_client.models.node_open_failed_event import NodeOpenFailedEvent
    from openapi_client.models.node_opened_success_event import NodeOpenedSuccessEvent
    from openapi_client.models.node_opening_event import NodeOpeningEvent
    from openapi_client.models.node_removed_event import NodeRemovedEvent
    from openapi_client.models.node_up_event import NodeUpEvent

class NodeEvent(FabricEvent):
    """
    Represents the base for all Node Events.
    """ # noqa: E501
    node_name: StrictStr = Field(description="The name of a Service Fabric node.", alias="NodeName")
    __properties: ClassVar[List[str]] = ["EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp", "NodeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ChaosRestartNodeFaultCompletedEvent': 'ChaosRestartNodeFaultCompletedEvent','ChaosRestartNodeFaultScheduledEvent': 'ChaosRestartNodeFaultScheduledEvent','NodeAbortedEvent': 'NodeAbortedEvent','NodeAbortingEvent': 'NodeAbortingEvent','NodeAddedEvent': 'NodeAddedEvent','NodeCloseEvent': 'NodeCloseEvent','NodeClosingEvent': 'NodeClosingEvent','NodeDeactivateCompleteEvent': 'NodeDeactivateCompleteEvent','NodeDeactivateStartEvent': 'NodeDeactivateStartEvent','NodeDownEvent': 'NodeDownEvent','NodeHealthReportCreatedEvent': 'NodeHealthReportCreatedEvent','NodeHealthReportExpiredEvent': 'NodeHealthReportExpiredEvent','NodeOpenFailedEvent': 'NodeOpenFailedEvent','NodeOpenedSuccessEvent': 'NodeOpenedSuccessEvent','NodeOpeningEvent': 'NodeOpeningEvent','NodeRemovedEvent': 'NodeRemovedEvent','NodeUpEvent': 'NodeUpEvent'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ChaosRestartNodeFaultCompletedEvent, ChaosRestartNodeFaultScheduledEvent, NodeAbortedEvent, NodeAbortingEvent, NodeAddedEvent, NodeCloseEvent, NodeClosingEvent, NodeDeactivateCompleteEvent, NodeDeactivateStartEvent, NodeDownEvent, NodeHealthReportCreatedEvent, NodeHealthReportExpiredEvent, NodeOpenFailedEvent, NodeOpenedSuccessEvent, NodeOpeningEvent, NodeRemovedEvent, NodeUpEvent]]:
        """Create an instance of NodeEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ChaosRestartNodeFaultCompletedEvent, ChaosRestartNodeFaultScheduledEvent, NodeAbortedEvent, NodeAbortingEvent, NodeAddedEvent, NodeCloseEvent, NodeClosingEvent, NodeDeactivateCompleteEvent, NodeDeactivateStartEvent, NodeDownEvent, NodeHealthReportCreatedEvent, NodeHealthReportExpiredEvent, NodeOpenFailedEvent, NodeOpenedSuccessEvent, NodeOpeningEvent, NodeRemovedEvent, NodeUpEvent]]:
        """Create an instance of NodeEvent from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ChaosRestartNodeFaultCompletedEvent':
            return import_module("openapi_client.models.chaos_restart_node_fault_completed_event").ChaosRestartNodeFaultCompletedEvent.from_dict(obj)
        if object_type ==  'ChaosRestartNodeFaultScheduledEvent':
            return import_module("openapi_client.models.chaos_restart_node_fault_scheduled_event").ChaosRestartNodeFaultScheduledEvent.from_dict(obj)
        if object_type ==  'NodeAbortedEvent':
            return import_module("openapi_client.models.node_aborted_event").NodeAbortedEvent.from_dict(obj)
        if object_type ==  'NodeAbortingEvent':
            return import_module("openapi_client.models.node_aborting_event").NodeAbortingEvent.from_dict(obj)
        if object_type ==  'NodeAddedEvent':
            return import_module("openapi_client.models.node_added_event").NodeAddedEvent.from_dict(obj)
        if object_type ==  'NodeCloseEvent':
            return import_module("openapi_client.models.node_close_event").NodeCloseEvent.from_dict(obj)
        if object_type ==  'NodeClosingEvent':
            return import_module("openapi_client.models.node_closing_event").NodeClosingEvent.from_dict(obj)
        if object_type ==  'NodeDeactivateCompleteEvent':
            return import_module("openapi_client.models.node_deactivate_complete_event").NodeDeactivateCompleteEvent.from_dict(obj)
        if object_type ==  'NodeDeactivateStartEvent':
            return import_module("openapi_client.models.node_deactivate_start_event").NodeDeactivateStartEvent.from_dict(obj)
        if object_type ==  'NodeDownEvent':
            return import_module("openapi_client.models.node_down_event").NodeDownEvent.from_dict(obj)
        if object_type ==  'NodeHealthReportCreatedEvent':
            return import_module("openapi_client.models.node_health_report_created_event").NodeHealthReportCreatedEvent.from_dict(obj)
        if object_type ==  'NodeHealthReportExpiredEvent':
            return import_module("openapi_client.models.node_health_report_expired_event").NodeHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'NodeOpenFailedEvent':
            return import_module("openapi_client.models.node_open_failed_event").NodeOpenFailedEvent.from_dict(obj)
        if object_type ==  'NodeOpenedSuccessEvent':
            return import_module("openapi_client.models.node_opened_success_event").NodeOpenedSuccessEvent.from_dict(obj)
        if object_type ==  'NodeOpeningEvent':
            return import_module("openapi_client.models.node_opening_event").NodeOpeningEvent.from_dict(obj)
        if object_type ==  'NodeRemovedEvent':
            return import_module("openapi_client.models.node_removed_event").NodeRemovedEvent.from_dict(obj)
        if object_type ==  'NodeUpEvent':
            return import_module("openapi_client.models.node_up_event").NodeUpEvent.from_dict(obj)

        raise ValueError("NodeEvent failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



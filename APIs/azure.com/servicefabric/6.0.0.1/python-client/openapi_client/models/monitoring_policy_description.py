# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.failure_action import FailureAction
from typing import Optional, Set
from typing_extensions import Self

class MonitoringPolicyDescription(BaseModel):
    """
    Describes the parameters for monitoring an upgrade in Monitored mode.
    """ # noqa: E501
    failure_action: Optional[FailureAction] = Field(default=None, alias="FailureAction")
    health_check_retry_timeout_in_milliseconds: Optional[StrictStr] = Field(default='PT0H10M0S', description="The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="HealthCheckRetryTimeoutInMilliseconds")
    health_check_stable_duration_in_milliseconds: Optional[StrictStr] = Field(default='PT0H2M0S', description="The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="HealthCheckStableDurationInMilliseconds")
    health_check_wait_duration_in_milliseconds: Optional[StrictStr] = Field(default='0', description="The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="HealthCheckWaitDurationInMilliseconds")
    upgrade_domain_timeout_in_milliseconds: Optional[StrictStr] = Field(default='P10675199DT02H48M05.4775807S', description="The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="UpgradeDomainTimeoutInMilliseconds")
    upgrade_timeout_in_milliseconds: Optional[StrictStr] = Field(default='P10675199DT02H48M05.4775807S', description="The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="UpgradeTimeoutInMilliseconds")
    __properties: ClassVar[List[str]] = ["FailureAction", "HealthCheckRetryTimeoutInMilliseconds", "HealthCheckStableDurationInMilliseconds", "HealthCheckWaitDurationInMilliseconds", "UpgradeDomainTimeoutInMilliseconds", "UpgradeTimeoutInMilliseconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonitoringPolicyDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonitoringPolicyDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FailureAction": obj.get("FailureAction"),
            "HealthCheckRetryTimeoutInMilliseconds": obj.get("HealthCheckRetryTimeoutInMilliseconds") if obj.get("HealthCheckRetryTimeoutInMilliseconds") is not None else 'PT0H10M0S',
            "HealthCheckStableDurationInMilliseconds": obj.get("HealthCheckStableDurationInMilliseconds") if obj.get("HealthCheckStableDurationInMilliseconds") is not None else 'PT0H2M0S',
            "HealthCheckWaitDurationInMilliseconds": obj.get("HealthCheckWaitDurationInMilliseconds") if obj.get("HealthCheckWaitDurationInMilliseconds") is not None else '0',
            "UpgradeDomainTimeoutInMilliseconds": obj.get("UpgradeDomainTimeoutInMilliseconds") if obj.get("UpgradeDomainTimeoutInMilliseconds") is not None else 'P10675199DT02H48M05.4775807S',
            "UpgradeTimeoutInMilliseconds": obj.get("UpgradeTimeoutInMilliseconds") if obj.get("UpgradeTimeoutInMilliseconds") is not None else 'P10675199DT02H48M05.4775807S'
        })
        return _obj



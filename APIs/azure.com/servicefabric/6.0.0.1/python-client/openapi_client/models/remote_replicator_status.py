# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.remote_replicator_acknowledgement_status import RemoteReplicatorAcknowledgementStatus
from typing import Optional, Set
from typing_extensions import Self

class RemoteReplicatorStatus(BaseModel):
    """
    Represents the state of the secondary replicator from the primary replicatorâ€™s point of view. 
    """ # noqa: E501
    is_in_build: Optional[StrictBool] = Field(default=None, description="A value that indicates whether the secondary replica is in the process of being built.", alias="IsInBuild")
    last_acknowledgement_processed_time_utc: Optional[datetime] = Field(default=None, description="The last timestamp (in UTC) when an acknowledgement from the secondary replicator was processed on the primary. UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed. ", alias="LastAcknowledgementProcessedTimeUtc")
    last_applied_copy_sequence_number: Optional[StrictStr] = Field(default=None, description="The highest copy operation sequence number that the secondary has applied to its state. A value of -1 implies that the secondary has applied all copy operations and the copy process is complete. ", alias="LastAppliedCopySequenceNumber")
    last_applied_replication_sequence_number: Optional[StrictStr] = Field(default=None, description="The highest replication operation sequence number that the secondary has applied to its state.", alias="LastAppliedReplicationSequenceNumber")
    last_received_copy_sequence_number: Optional[StrictStr] = Field(default=None, description="The highest copy operation sequence number that the secondary has received from the primary. A value of -1 implies that the secondary has received all copy operations. ", alias="LastReceivedCopySequenceNumber")
    last_received_replication_sequence_number: Optional[StrictStr] = Field(default=None, description="The highest replication operation sequence number that the secondary has received from the primary.", alias="LastReceivedReplicationSequenceNumber")
    remote_replicator_acknowledgement_status: Optional[RemoteReplicatorAcknowledgementStatus] = Field(default=None, alias="RemoteReplicatorAcknowledgementStatus")
    replica_id: Optional[StrictStr] = Field(default=None, description="Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.", alias="ReplicaId")
    __properties: ClassVar[List[str]] = ["IsInBuild", "LastAcknowledgementProcessedTimeUtc", "LastAppliedCopySequenceNumber", "LastAppliedReplicationSequenceNumber", "LastReceivedCopySequenceNumber", "LastReceivedReplicationSequenceNumber", "RemoteReplicatorAcknowledgementStatus", "ReplicaId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteReplicatorStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remote_replicator_acknowledgement_status
        if self.remote_replicator_acknowledgement_status:
            _dict['RemoteReplicatorAcknowledgementStatus'] = self.remote_replicator_acknowledgement_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteReplicatorStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IsInBuild": obj.get("IsInBuild"),
            "LastAcknowledgementProcessedTimeUtc": obj.get("LastAcknowledgementProcessedTimeUtc"),
            "LastAppliedCopySequenceNumber": obj.get("LastAppliedCopySequenceNumber"),
            "LastAppliedReplicationSequenceNumber": obj.get("LastAppliedReplicationSequenceNumber"),
            "LastReceivedCopySequenceNumber": obj.get("LastReceivedCopySequenceNumber"),
            "LastReceivedReplicationSequenceNumber": obj.get("LastReceivedReplicationSequenceNumber"),
            "RemoteReplicatorAcknowledgementStatus": RemoteReplicatorAcknowledgementStatus.from_dict(obj["RemoteReplicatorAcknowledgementStatus"]) if obj.get("RemoteReplicatorAcknowledgementStatus") is not None else None,
            "ReplicaId": obj.get("ReplicaId")
        })
        return _obj



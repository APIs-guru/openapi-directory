# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.move_cost import MoveCost
from openapi_client.models.service_correlation_description import ServiceCorrelationDescription
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_client.models.service_placement_policy_description import ServicePlacementPolicyDescription
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.stateful_service_update_description import StatefulServiceUpdateDescription
    from openapi_client.models.stateless_service_update_description import StatelessServiceUpdateDescription

class ServiceUpdateDescription(BaseModel):
    """
    A ServiceUpdateDescription contains all of the information necessary to update a service.
    """ # noqa: E501
    correlation_scheme: Optional[List[ServiceCorrelationDescription]] = Field(default=None, description="A list that describes the correlation of the service with other services.", alias="CorrelationScheme")
    default_move_cost: Optional[MoveCost] = Field(default=None, alias="DefaultMoveCost")
    flags: Optional[StrictStr] = Field(default=None, description="Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified. This property can be a combination of those flags obtained using bitwise 'OR' operator. For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.  - None - Does not indicate any other properties are set. The value is zero. - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services) or the InstanceCount property (for Stateless services) is set. The value is 1. - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2. - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4. - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8. - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16. - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32. - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64. - Correlation - Indicates the CorrelationScheme property is set. The value is 128. - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256. - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512. ", alias="Flags")
    load_metrics: Optional[List[ServiceLoadMetricDescription]] = Field(default=None, description="The service load metrics is given as an array of ServiceLoadMetricDescription objects.", alias="LoadMetrics")
    placement_constraints: Optional[StrictStr] = Field(default=None, description="The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".", alias="PlacementConstraints")
    service_kind: ServiceKind = Field(alias="ServiceKind")
    service_placement_policies: Optional[List[ServicePlacementPolicyDescription]] = Field(default=None, description="A list that describes the correlation of the service with other services.", alias="ServicePlacementPolicies")
    __properties: ClassVar[List[str]] = ["CorrelationScheme", "DefaultMoveCost", "Flags", "LoadMetrics", "PlacementConstraints", "ServiceKind", "ServicePlacementPolicies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'ServiceKind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'StatefulServiceUpdateDescription': 'StatefulServiceUpdateDescription','StatelessServiceUpdateDescription': 'StatelessServiceUpdateDescription'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[StatefulServiceUpdateDescription, StatelessServiceUpdateDescription]]:
        """Create an instance of ServiceUpdateDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in correlation_scheme (list)
        _items = []
        if self.correlation_scheme:
            for _item_correlation_scheme in self.correlation_scheme:
                if _item_correlation_scheme:
                    _items.append(_item_correlation_scheme.to_dict())
            _dict['CorrelationScheme'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_metrics (list)
        _items = []
        if self.load_metrics:
            for _item_load_metrics in self.load_metrics:
                if _item_load_metrics:
                    _items.append(_item_load_metrics.to_dict())
            _dict['LoadMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_placement_policies (list)
        _items = []
        if self.service_placement_policies:
            for _item_service_placement_policies in self.service_placement_policies:
                if _item_service_placement_policies:
                    _items.append(_item_service_placement_policies.to_dict())
            _dict['ServicePlacementPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[StatefulServiceUpdateDescription, StatelessServiceUpdateDescription]]:
        """Create an instance of ServiceUpdateDescription from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'StatefulServiceUpdateDescription':
            return import_module("openapi_client.models.stateful_service_update_description").StatefulServiceUpdateDescription.from_dict(obj)
        if object_type ==  'StatelessServiceUpdateDescription':
            return import_module("openapi_client.models.stateless_service_update_description").StatelessServiceUpdateDescription.from_dict(obj)

        raise ValueError("ServiceUpdateDescription failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



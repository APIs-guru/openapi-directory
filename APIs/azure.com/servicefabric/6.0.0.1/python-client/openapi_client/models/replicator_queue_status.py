# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReplicatorQueueStatus(BaseModel):
    """
    Provides various statistics of the queue used in the service fabric replicator. Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc. Depending on the role of the replicator, the properties in this type imply different meanings. 
    """ # noqa: E501
    committed_sequence_number: Optional[StrictStr] = Field(default=None, description="On a primary replicator, this is semantically the highest sequence number of the operation for which a write quorum of the secondary replicas have sent an acknowledgement. On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from the primary. ", alias="CommittedSequenceNumber")
    completed_sequence_number: Optional[StrictStr] = Field(default=None, description="On a primary replicator, this is semantically the highest sequence number of the operation for which all the secondary replicas have sent an acknowledgement. On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent state. ", alias="CompletedSequenceNumber")
    first_sequence_number: Optional[StrictStr] = Field(default=None, description="On a primary replicator, this is semantically the sequence number of the operation for which all the secondary replicas have sent an acknowledgement. On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue. ", alias="FirstSequenceNumber")
    last_sequence_number: Optional[StrictStr] = Field(default=None, description="Represents the latest sequence number of the operation that is available in the queue.", alias="LastSequenceNumber")
    queue_memory_size: Optional[StrictStr] = Field(default=None, description="Represents the virtual memory consumed by the queue in bytes.", alias="QueueMemorySize")
    queue_utilization_percentage: Optional[StrictInt] = Field(default=None, description="Represents the utilization of the queue. A value of 0 indicates that the queue is empty and a value of 100 indicates the queue is full.", alias="QueueUtilizationPercentage")
    __properties: ClassVar[List[str]] = ["CommittedSequenceNumber", "CompletedSequenceNumber", "FirstSequenceNumber", "LastSequenceNumber", "QueueMemorySize", "QueueUtilizationPercentage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicatorQueueStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicatorQueueStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommittedSequenceNumber": obj.get("CommittedSequenceNumber"),
            "CompletedSequenceNumber": obj.get("CompletedSequenceNumber"),
            "FirstSequenceNumber": obj.get("FirstSequenceNumber"),
            "LastSequenceNumber": obj.get("LastSequenceNumber"),
            "QueueMemorySize": obj.get("QueueMemorySize"),
            "QueueUtilizationPercentage": obj.get("QueueUtilizationPercentage")
        })
        return _obj



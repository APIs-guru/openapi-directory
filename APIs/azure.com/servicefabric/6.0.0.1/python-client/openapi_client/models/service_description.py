# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.move_cost import MoveCost
from openapi_client.models.partition_scheme_description import PartitionSchemeDescription
from openapi_client.models.service_correlation_description import ServiceCorrelationDescription
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_client.models.service_package_activation_mode import ServicePackageActivationMode
from openapi_client.models.service_placement_policy_description import ServicePlacementPolicyDescription
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.stateful_service_description import StatefulServiceDescription
    from openapi_client.models.stateless_service_description import StatelessServiceDescription

class ServiceDescription(BaseModel):
    """
    A ServiceDescription contains all of the information necessary to create a service.
    """ # noqa: E501
    application_name: Optional[StrictStr] = Field(default=None, description="The name of the application, including the 'fabric:' URI scheme.", alias="ApplicationName")
    correlation_scheme: Optional[List[ServiceCorrelationDescription]] = Field(default=None, description="A list that describes the correlation of the service with other services.", alias="CorrelationScheme")
    default_move_cost: Optional[MoveCost] = Field(default=None, alias="DefaultMoveCost")
    initialization_data: Optional[List[StrictInt]] = Field(default=None, description="Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.", alias="InitializationData")
    is_default_move_cost_specified: Optional[StrictBool] = Field(default=None, description="Indicates if the DefaultMoveCost property is specified.", alias="IsDefaultMoveCostSpecified")
    partition_description: PartitionSchemeDescription = Field(alias="PartitionDescription")
    placement_constraints: Optional[StrictStr] = Field(default=None, description="The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".", alias="PlacementConstraints")
    service_dns_name: Optional[StrictStr] = Field(default=None, description="The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.", alias="ServiceDnsName")
    service_kind: ServiceKind = Field(alias="ServiceKind")
    service_load_metrics: Optional[List[ServiceLoadMetricDescription]] = Field(default=None, description="The service load metrics is given as an array of ServiceLoadMetricDescription objects.", alias="ServiceLoadMetrics")
    service_name: StrictStr = Field(description="The full name of the service with 'fabric:' URI scheme.", alias="ServiceName")
    service_package_activation_mode: Optional[ServicePackageActivationMode] = Field(default=None, alias="ServicePackageActivationMode")
    service_placement_policies: Optional[List[ServicePlacementPolicyDescription]] = Field(default=None, description="A list that describes the correlation of the service with other services.", alias="ServicePlacementPolicies")
    service_type_name: StrictStr = Field(description="Name of the service type as specified in the service manifest.", alias="ServiceTypeName")
    __properties: ClassVar[List[str]] = ["ApplicationName", "CorrelationScheme", "DefaultMoveCost", "InitializationData", "IsDefaultMoveCostSpecified", "PartitionDescription", "PlacementConstraints", "ServiceDnsName", "ServiceKind", "ServiceLoadMetrics", "ServiceName", "ServicePackageActivationMode", "ServicePlacementPolicies", "ServiceTypeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'ServiceKind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'StatefulServiceDescription': 'StatefulServiceDescription','StatelessServiceDescription': 'StatelessServiceDescription'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[StatefulServiceDescription, StatelessServiceDescription]]:
        """Create an instance of ServiceDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in correlation_scheme (list)
        _items = []
        if self.correlation_scheme:
            for _item_correlation_scheme in self.correlation_scheme:
                if _item_correlation_scheme:
                    _items.append(_item_correlation_scheme.to_dict())
            _dict['CorrelationScheme'] = _items
        # override the default output from pydantic by calling `to_dict()` of partition_description
        if self.partition_description:
            _dict['PartitionDescription'] = self.partition_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_load_metrics (list)
        _items = []
        if self.service_load_metrics:
            for _item_service_load_metrics in self.service_load_metrics:
                if _item_service_load_metrics:
                    _items.append(_item_service_load_metrics.to_dict())
            _dict['ServiceLoadMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_placement_policies (list)
        _items = []
        if self.service_placement_policies:
            for _item_service_placement_policies in self.service_placement_policies:
                if _item_service_placement_policies:
                    _items.append(_item_service_placement_policies.to_dict())
            _dict['ServicePlacementPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[StatefulServiceDescription, StatelessServiceDescription]]:
        """Create an instance of ServiceDescription from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'StatefulServiceDescription':
            return import_module("openapi_client.models.stateful_service_description").StatefulServiceDescription.from_dict(obj)
        if object_type ==  'StatelessServiceDescription':
            return import_module("openapi_client.models.stateless_service_description").StatelessServiceDescription.from_dict(obj)

        raise ValueError("ServiceDescription failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



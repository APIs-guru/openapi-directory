# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_state import HealthState
from typing import Optional, Set
from typing_extensions import Self

class HealthEvent(BaseModel):
    """
    Represents health information reported on a health entity, such as cluster, application or node, with additional metadata added by the Health Manager. 
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the health information. It represents free text used to add human readable information about the report. The maximum string length for the description is 4096 characters. If the provided string is longer, it will be automatically truncated. When truncated, the last characters of the description contain a marker \"[Truncated]\", and total string size is 4096 characters. The presence of the marker indicates to users that truncation occurred. Note that when truncated, the description has less than 4096 characters from the original string. ", alias="Description")
    health_state: HealthState = Field(alias="HealthState")
    var_property: StrictStr = Field(description="The property of the health information. An entity can have health reports for different properties. The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report. For example, a reporter with SourceId \"LocalWatchdog\" can monitor the state of the available disk on a node, so it can report \"AvailableDisk\" property on that node. The same reporter can monitor the node connectivity, so it can report a property \"Connectivity\" on the same node. In the health store, these reports are treated as separate health events for the specified node.  Together with the SourceId, the property uniquely identifies the health information. ", alias="Property")
    remove_when_expired: Optional[StrictBool] = Field(default=None, description="Value that indicates whether the report is removed from health store when it expires. If set to true, the report is remopved from the health store after it expires. If set to false, the report is treated as an error when expired. The value of this property is false by default. When clients report periodically, they should set RemoveWhenExpired false (default). This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires. This flags the entity as being in Error health state. ", alias="RemoveWhenExpired")
    sequence_number: Optional[StrictStr] = Field(default=None, description="The sequence number for this health report as a numeric string. The report sequence number is used by the health store to detect stale reports. If not specified, a sequence number is auto-generated by the health client when a report is added. ", alias="SequenceNumber")
    source_id: StrictStr = Field(description="The source name which identifies the client/watchdog/system component which generated the health information. ", alias="SourceId")
    time_to_live_in_milli_seconds: Optional[StrictStr] = Field(default=None, description="The duration for which this health report is valid. This field is using ISO8601 format for specifying the duration. When clients report periodically, they should send reports with higher frequency than time to live. If clients report on transition, they can set the time to live to infinite. When time to live expires, the health event that contains the health information is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.  If not specified, time to live defaults to infinite value. ", alias="TimeToLiveInMilliSeconds")
    is_expired: Optional[StrictBool] = Field(default=None, description="Returns true if the health event is expired, otherwise false.", alias="IsExpired")
    last_error_transition_at: Optional[datetime] = Field(default=None, description="If the current health state is 'Error', this property returns the time at which the health report was first reported with 'Error'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Error' health report was received.  If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in 'Error', before transitioning to a different state.  If the health state was never 'Error', the value will be zero date-time. ", alias="LastErrorTransitionAt")
    last_modified_utc_timestamp: Optional[datetime] = Field(default=None, description="The date and time when the health report was last modified by the health store.", alias="LastModifiedUtcTimestamp")
    last_ok_transition_at: Optional[datetime] = Field(default=None, description="If the current health state is 'Ok', this property returns the time at which the health report was first reported with 'Ok'. For periodic reporting, many reports with the same state may have been generated. This property returns the date and time when the first 'Ok' health report was received.  If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last in 'Ok', before transitioning to a different state.  If the health state was never 'Ok', the value will be zero date-time. ", alias="LastOkTransitionAt")
    last_warning_transition_at: Optional[datetime] = Field(default=None, description="If the current health state is 'Warning', this property returns the time at which the health report was first reported with 'Warning'. For periodic reporting, many reports with the same state may have been generated however, this property returns only the date and time at the first 'Warning' health report was received.  If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in 'Warning', before transitioning to a different state.  If the health state was never 'Warning', the value will be zero date-time. ", alias="LastWarningTransitionAt")
    source_utc_timestamp: Optional[datetime] = Field(default=None, description="The date and time when the health report was sent by the source.", alias="SourceUtcTimestamp")
    __properties: ClassVar[List[str]] = ["Description", "HealthState", "Property", "RemoveWhenExpired", "SequenceNumber", "SourceId", "TimeToLiveInMilliSeconds", "IsExpired", "LastErrorTransitionAt", "LastModifiedUtcTimestamp", "LastOkTransitionAt", "LastWarningTransitionAt", "SourceUtcTimestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "HealthState": obj.get("HealthState"),
            "Property": obj.get("Property"),
            "RemoveWhenExpired": obj.get("RemoveWhenExpired"),
            "SequenceNumber": obj.get("SequenceNumber"),
            "SourceId": obj.get("SourceId"),
            "TimeToLiveInMilliSeconds": obj.get("TimeToLiveInMilliSeconds"),
            "IsExpired": obj.get("IsExpired"),
            "LastErrorTransitionAt": obj.get("LastErrorTransitionAt"),
            "LastModifiedUtcTimestamp": obj.get("LastModifiedUtcTimestamp"),
            "LastOkTransitionAt": obj.get("LastOkTransitionAt"),
            "LastWarningTransitionAt": obj.get("LastWarningTransitionAt"),
            "SourceUtcTimestamp": obj.get("SourceUtcTimestamp")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ImageStoreCopyDescription(BaseModel):
    """
    Information about how to copy image store content from one image store relative path to another image store relative path.
    """ # noqa: E501
    check_mark_file: Optional[StrictBool] = Field(default=None, description="Indicates whether to check mark file during copying. The property is true if checking mark file is required, false otherwise. The mark file is used to check whether the folder is well constructed. If the property is true and mark file does not exist, the copy is skipped.", alias="CheckMarkFile")
    remote_destination: StrictStr = Field(description="The relative path of destination image store content to be copied to.", alias="RemoteDestination")
    remote_source: StrictStr = Field(description="The relative path of source image store content to be copied from.", alias="RemoteSource")
    skip_files: Optional[List[StrictStr]] = Field(default=None, description="The list of the file names to be skipped for copying.", alias="SkipFiles")
    __properties: ClassVar[List[str]] = ["CheckMarkFile", "RemoteDestination", "RemoteSource", "SkipFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageStoreCopyDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageStoreCopyDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CheckMarkFile": obj.get("CheckMarkFile"),
            "RemoteDestination": obj.get("RemoteDestination"),
            "RemoteSource": obj.get("RemoteSource"),
            "SkipFiles": obj.get("SkipFiles")
        })
        return _obj



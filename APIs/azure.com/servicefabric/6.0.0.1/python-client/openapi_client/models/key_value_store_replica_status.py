# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.replica_kind import ReplicaKind
from openapi_client.models.replica_status_base import ReplicaStatusBase
from typing import Optional, Set
from typing_extensions import Self

class KeyValueStoreReplicaStatus(ReplicaStatusBase):
    """
    Key value store related information for the replica.
    """ # noqa: E501
    copy_notification_current_key_filter: Optional[StrictStr] = Field(default=None, description="Value indicating the latest key-prefix filter applied to enumeration during the callback. Null if there is no pending callback.", alias="CopyNotificationCurrentKeyFilter")
    copy_notification_current_progress: Optional[StrictStr] = Field(default=None, description="Value indicating the latest number of keys enumerated during the callback. 0 if there is no pending callback.", alias="CopyNotificationCurrentProgress")
    database_logical_size_estimate: Optional[StrictStr] = Field(default=None, description="Value indicating the estimated size of the underlying database.", alias="DatabaseLogicalSizeEstimate")
    database_row_count_estimate: Optional[StrictStr] = Field(default=None, description="Value indicating the estimated number of rows in the underlying database.", alias="DatabaseRowCountEstimate")
    status_details: Optional[StrictStr] = Field(default=None, description="Value indicating the current status details of the replica.", alias="StatusDetails")
    __properties: ClassVar[List[str]] = ["Kind", "CopyNotificationCurrentKeyFilter", "CopyNotificationCurrentProgress", "DatabaseLogicalSizeEstimate", "DatabaseRowCountEstimate", "StatusDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyValueStoreReplicaStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyValueStoreReplicaStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Kind": obj.get("Kind"),
            "CopyNotificationCurrentKeyFilter": obj.get("CopyNotificationCurrentKeyFilter"),
            "CopyNotificationCurrentProgress": obj.get("CopyNotificationCurrentProgress"),
            "DatabaseLogicalSizeEstimate": obj.get("DatabaseLogicalSizeEstimate"),
            "DatabaseRowCountEstimate": obj.get("DatabaseRowCountEstimate"),
            "StatusDetails": obj.get("StatusDetails")
        })
        return _obj



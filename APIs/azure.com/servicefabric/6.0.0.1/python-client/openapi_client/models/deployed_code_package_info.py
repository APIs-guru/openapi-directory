# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.code_package_entry_point import CodePackageEntryPoint
from openapi_client.models.deployment_status import DeploymentStatus
from openapi_client.models.host_isolation_mode import HostIsolationMode
from openapi_client.models.host_type import HostType
from typing import Optional, Set
from typing_extensions import Self

class DeployedCodePackageInfo(BaseModel):
    """
    Information about code package deployed on a Service Fabric node.
    """ # noqa: E501
    host_isolation_mode: Optional[HostIsolationMode] = Field(default=None, alias="HostIsolationMode")
    host_type: Optional[HostType] = Field(default=None, alias="HostType")
    main_entry_point: Optional[CodePackageEntryPoint] = Field(default=None, alias="MainEntryPoint")
    name: Optional[StrictStr] = Field(default=None, description="The name of the code package defined in the service manifest.", alias="Name")
    run_frequency_interval: Optional[StrictStr] = Field(default=None, description="The interval at which code package is run. This is used for periodic code package.", alias="RunFrequencyInterval")
    service_manifest_name: Optional[StrictStr] = Field(default=None, description="The name of the service manifest.", alias="ServiceManifestName")
    service_package_activation_id: Optional[StrictStr] = Field(default=None, description="The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string. ", alias="ServicePackageActivationId")
    setup_entry_point: Optional[CodePackageEntryPoint] = Field(default=None, alias="SetupEntryPoint")
    status: Optional[DeploymentStatus] = Field(default=None, alias="Status")
    version: Optional[StrictStr] = Field(default=None, description="The version of the code package specified in service manifest.", alias="Version")
    __properties: ClassVar[List[str]] = ["HostIsolationMode", "HostType", "MainEntryPoint", "Name", "RunFrequencyInterval", "ServiceManifestName", "ServicePackageActivationId", "SetupEntryPoint", "Status", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeployedCodePackageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of main_entry_point
        if self.main_entry_point:
            _dict['MainEntryPoint'] = self.main_entry_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of setup_entry_point
        if self.setup_entry_point:
            _dict['SetupEntryPoint'] = self.setup_entry_point.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeployedCodePackageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HostIsolationMode": obj.get("HostIsolationMode"),
            "HostType": obj.get("HostType"),
            "MainEntryPoint": CodePackageEntryPoint.from_dict(obj["MainEntryPoint"]) if obj.get("MainEntryPoint") is not None else None,
            "Name": obj.get("Name"),
            "RunFrequencyInterval": obj.get("RunFrequencyInterval"),
            "ServiceManifestName": obj.get("ServiceManifestName"),
            "ServicePackageActivationId": obj.get("ServicePackageActivationId"),
            "SetupEntryPoint": CodePackageEntryPoint.from_dict(obj["SetupEntryPoint"]) if obj.get("SetupEntryPoint") is not None else None,
            "Status": obj.get("Status"),
            "Version": obj.get("Version")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.health_state import HealthState
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_status import ServiceStatus
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.stateful_service_info import StatefulServiceInfo
    from openapi_client.models.stateless_service_info import StatelessServiceInfo

class ServiceInfo(BaseModel):
    """
    Information about a Service Fabric service.
    """ # noqa: E501
    health_state: Optional[HealthState] = Field(default=None, alias="HealthState")
    id: Optional[StrictStr] = Field(default=None, description="The identity of the service. This is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.  Starting in version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions. ", alias="Id")
    is_service_group: Optional[StrictBool] = Field(default=None, description="Whether the service is in a service group.", alias="IsServiceGroup")
    manifest_version: Optional[StrictStr] = Field(default=None, description="The version of the service manifest.", alias="ManifestVersion")
    name: Optional[StrictStr] = Field(default=None, description="The full name of the service with 'fabric:' URI scheme.", alias="Name")
    service_kind: ServiceKind = Field(alias="ServiceKind")
    service_status: Optional[ServiceStatus] = Field(default=None, alias="ServiceStatus")
    type_name: Optional[StrictStr] = Field(default=None, description="Name of the service type as specified in the service manifest.", alias="TypeName")
    __properties: ClassVar[List[str]] = ["HealthState", "Id", "IsServiceGroup", "ManifestVersion", "Name", "ServiceKind", "ServiceStatus", "TypeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'ServiceKind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'StatefulServiceInfo': 'StatefulServiceInfo','StatelessServiceInfo': 'StatelessServiceInfo'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[StatefulServiceInfo, StatelessServiceInfo]]:
        """Create an instance of ServiceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[StatefulServiceInfo, StatelessServiceInfo]]:
        """Create an instance of ServiceInfo from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'StatefulServiceInfo':
            return import_module("openapi_client.models.stateful_service_info").StatefulServiceInfo.from_dict(obj)
        if object_type ==  'StatelessServiceInfo':
            return import_module("openapi_client.models.stateless_service_info").StatelessServiceInfo.from_dict(obj)

        raise ValueError("ServiceInfo failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



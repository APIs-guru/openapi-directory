# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployed_application_status import DeployedApplicationStatus
from typing import Optional, Set
from typing_extensions import Self

class DeployedApplicationInfo(BaseModel):
    """
    Information about application deployed on the node.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.   Starting in version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric://myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions. ", alias="Id")
    log_directory: Optional[StrictStr] = Field(default=None, description="The log directory of the application on the node. The log directory can be used to store application logs.", alias="LogDirectory")
    name: Optional[StrictStr] = Field(default=None, description="The name of the application, including the 'fabric:' URI scheme.", alias="Name")
    status: Optional[DeployedApplicationStatus] = Field(default=None, alias="Status")
    temp_directory: Optional[StrictStr] = Field(default=None, description="The temp directory of the application on the node. The code packages belonging to the application are forked with this directory set as their temporary directory.", alias="TempDirectory")
    type_name: Optional[StrictStr] = Field(default=None, description="The application type name as defined in the application manifest.", alias="TypeName")
    work_directory: Optional[StrictStr] = Field(default=None, description="The work directory of the application on the node. The work directory can be used to store application data.", alias="WorkDirectory")
    __properties: ClassVar[List[str]] = ["Id", "LogDirectory", "Name", "Status", "TempDirectory", "TypeName", "WorkDirectory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeployedApplicationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeployedApplicationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "LogDirectory": obj.get("LogDirectory"),
            "Name": obj.get("Name"),
            "Status": obj.get("Status"),
            "TempDirectory": obj.get("TempDirectory"),
            "TypeName": obj.get("TypeName"),
            "WorkDirectory": obj.get("WorkDirectory")
        })
        return _obj



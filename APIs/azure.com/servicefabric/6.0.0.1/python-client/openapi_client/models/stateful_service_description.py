# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.move_cost import MoveCost
from openapi_client.models.partition_scheme_description import PartitionSchemeDescription
from openapi_client.models.service_correlation_description import ServiceCorrelationDescription
from openapi_client.models.service_description import ServiceDescription
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_client.models.service_package_activation_mode import ServicePackageActivationMode
from openapi_client.models.service_placement_policy_description import ServicePlacementPolicyDescription
from typing import Optional, Set
from typing_extensions import Self

class StatefulServiceDescription(ServiceDescription):
    """
    Describes a stateful service.
    """ # noqa: E501
    flags: Optional[StrictInt] = Field(default=None, description="Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified. This property can be a combination of those flags obtained using bitwise 'OR' operator. For example, if the provided value is 6 then the flags for QuorumLossWaitDuration (2) and StandByReplicaKeepDuration(4) are set.  - None - Does not indicate any other properties are set. The value is zero. - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is 1. - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 2. - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 4. ", alias="Flags")
    has_persisted_state: StrictBool = Field(description="A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.", alias="HasPersistedState")
    min_replica_set_size: Annotated[int, Field(strict=True, ge=1)] = Field(description="The minimum replica set size as a number.", alias="MinReplicaSetSize")
    quorum_loss_wait_duration_seconds: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=None, description="The maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.", alias="QuorumLossWaitDurationSeconds")
    replica_restart_wait_duration_seconds: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=None, description="The duration, in seconds, between when a replica goes down and when a new replica is created.", alias="ReplicaRestartWaitDurationSeconds")
    stand_by_replica_keep_duration_seconds: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=None, description="The definition on how long StandBy replicas should be maintained before being removed.", alias="StandByReplicaKeepDurationSeconds")
    target_replica_set_size: Annotated[int, Field(strict=True, ge=1)] = Field(description="The target replica set size as a number.", alias="TargetReplicaSetSize")
    __properties: ClassVar[List[str]] = ["ApplicationName", "CorrelationScheme", "DefaultMoveCost", "InitializationData", "IsDefaultMoveCostSpecified", "PartitionDescription", "PlacementConstraints", "ServiceDnsName", "ServiceKind", "ServiceLoadMetrics", "ServiceName", "ServicePackageActivationMode", "ServicePlacementPolicies", "ServiceTypeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatefulServiceDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in correlation_scheme (list)
        _items = []
        if self.correlation_scheme:
            for _item_correlation_scheme in self.correlation_scheme:
                if _item_correlation_scheme:
                    _items.append(_item_correlation_scheme.to_dict())
            _dict['CorrelationScheme'] = _items
        # override the default output from pydantic by calling `to_dict()` of partition_description
        if self.partition_description:
            _dict['PartitionDescription'] = self.partition_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_load_metrics (list)
        _items = []
        if self.service_load_metrics:
            for _item_service_load_metrics in self.service_load_metrics:
                if _item_service_load_metrics:
                    _items.append(_item_service_load_metrics.to_dict())
            _dict['ServiceLoadMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_placement_policies (list)
        _items = []
        if self.service_placement_policies:
            for _item_service_placement_policies in self.service_placement_policies:
                if _item_service_placement_policies:
                    _items.append(_item_service_placement_policies.to_dict())
            _dict['ServicePlacementPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatefulServiceDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationName": obj.get("ApplicationName"),
            "CorrelationScheme": [ServiceCorrelationDescription.from_dict(_item) for _item in obj["CorrelationScheme"]] if obj.get("CorrelationScheme") is not None else None,
            "DefaultMoveCost": obj.get("DefaultMoveCost"),
            "InitializationData": obj.get("InitializationData"),
            "IsDefaultMoveCostSpecified": obj.get("IsDefaultMoveCostSpecified"),
            "PartitionDescription": PartitionSchemeDescription.from_dict(obj["PartitionDescription"]) if obj.get("PartitionDescription") is not None else None,
            "PlacementConstraints": obj.get("PlacementConstraints"),
            "ServiceDnsName": obj.get("ServiceDnsName"),
            "ServiceKind": obj.get("ServiceKind"),
            "ServiceLoadMetrics": [ServiceLoadMetricDescription.from_dict(_item) for _item in obj["ServiceLoadMetrics"]] if obj.get("ServiceLoadMetrics") is not None else None,
            "ServiceName": obj.get("ServiceName"),
            "ServicePackageActivationMode": obj.get("ServicePackageActivationMode"),
            "ServicePlacementPolicies": [ServicePlacementPolicyDescription.from_dict(_item) for _item in obj["ServicePlacementPolicies"]] if obj.get("ServicePlacementPolicies") is not None else None,
            "ServiceTypeName": obj.get("ServiceTypeName")
        })
        return _obj



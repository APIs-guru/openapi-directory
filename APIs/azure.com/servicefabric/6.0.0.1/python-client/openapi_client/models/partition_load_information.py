# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.load_metric_report import LoadMetricReport
from typing import Optional, Set
from typing_extensions import Self

class PartitionLoadInformation(BaseModel):
    """
    Represents load information for a partition, which contains the primary and secondary reported load metrics. In case there is no load reported, PartitionLoadInformation will contain the default load for the service of the partition. For default loads, LoadMetricReport's LastReportedUtc is set to 0. 
    """ # noqa: E501
    partition_id: Optional[StrictStr] = Field(default=None, description="An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.", alias="PartitionId")
    primary_load_metric_reports: Optional[List[LoadMetricReport]] = Field(default=None, description="Array of load reports from the primary replica for this partition.", alias="PrimaryLoadMetricReports")
    secondary_load_metric_reports: Optional[List[LoadMetricReport]] = Field(default=None, description="Array of aggregated load reports from all secondary replicas for this partition. Array only contains the latest reported load for each metric. ", alias="SecondaryLoadMetricReports")
    __properties: ClassVar[List[str]] = ["PartitionId", "PrimaryLoadMetricReports", "SecondaryLoadMetricReports"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartitionLoadInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in primary_load_metric_reports (list)
        _items = []
        if self.primary_load_metric_reports:
            for _item_primary_load_metric_reports in self.primary_load_metric_reports:
                if _item_primary_load_metric_reports:
                    _items.append(_item_primary_load_metric_reports.to_dict())
            _dict['PrimaryLoadMetricReports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secondary_load_metric_reports (list)
        _items = []
        if self.secondary_load_metric_reports:
            for _item_secondary_load_metric_reports in self.secondary_load_metric_reports:
                if _item_secondary_load_metric_reports:
                    _items.append(_item_secondary_load_metric_reports.to_dict())
            _dict['SecondaryLoadMetricReports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartitionLoadInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PartitionId": obj.get("PartitionId"),
            "PrimaryLoadMetricReports": [LoadMetricReport.from_dict(_item) for _item in obj["PrimaryLoadMetricReports"]] if obj.get("PrimaryLoadMetricReports") is not None else None,
            "SecondaryLoadMetricReports": [LoadMetricReport.from_dict(_item) for _item in obj["SecondaryLoadMetricReports"]] if obj.get("SecondaryLoadMetricReports") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.chaos_context import ChaosContext
from openapi_client.models.cluster_health_policy import ClusterHealthPolicy
from typing import Optional, Set
from typing_extensions import Self

class ChaosParameters(BaseModel):
    """
    Defines all the parameters to configure a Chaos run. 
    """ # noqa: E501
    cluster_health_policy: Optional[ClusterHealthPolicy] = Field(default=None, alias="ClusterHealthPolicy")
    context: Optional[ChaosContext] = Field(default=None, alias="Context")
    enable_move_replica_faults: Optional[StrictBool] = Field(default=True, description="Enables or disables the move primary and move secondary faults. ", alias="EnableMoveReplicaFaults")
    max_cluster_stabilization_timeout_in_seconds: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=60, description="The maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the health of cluster entities. During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event. ", alias="MaxClusterStabilizationTimeoutInSeconds")
    max_concurrent_faults: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=1, description="MaxConcurrentFaults is the maximum number of concurrent faults induced per iteration. Chaos executes in iterations and two consecutive iterations are separated by a validation phase. The higher the concurrency, the more aggressive the injection of faults -- inducing more complex series of states to uncover bugs. The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up. ", alias="MaxConcurrentFaults")
    time_to_run_in_seconds: Optional[StrictStr] = Field(default='4294967295', description="Total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue). ", alias="TimeToRunInSeconds")
    wait_time_between_faults_in_seconds: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=20, description="Wait time (in seconds) between consecutive faults within a single iteration. The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through. The recommendation is to start with a value between 1 and 5 and exercise caution while moving up. ", alias="WaitTimeBetweenFaultsInSeconds")
    wait_time_between_iterations_in_seconds: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = Field(default=30, description="Time-separation (in seconds) between two consecutive iterations of Chaos. The larger the value, the lower the fault injection rate. ", alias="WaitTimeBetweenIterationsInSeconds")
    __properties: ClassVar[List[str]] = ["ClusterHealthPolicy", "Context", "EnableMoveReplicaFaults", "MaxClusterStabilizationTimeoutInSeconds", "MaxConcurrentFaults", "TimeToRunInSeconds", "WaitTimeBetweenFaultsInSeconds", "WaitTimeBetweenIterationsInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChaosParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster_health_policy
        if self.cluster_health_policy:
            _dict['ClusterHealthPolicy'] = self.cluster_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['Context'] = self.context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChaosParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClusterHealthPolicy": ClusterHealthPolicy.from_dict(obj["ClusterHealthPolicy"]) if obj.get("ClusterHealthPolicy") is not None else None,
            "Context": ChaosContext.from_dict(obj["Context"]) if obj.get("Context") is not None else None,
            "EnableMoveReplicaFaults": obj.get("EnableMoveReplicaFaults") if obj.get("EnableMoveReplicaFaults") is not None else True,
            "MaxClusterStabilizationTimeoutInSeconds": obj.get("MaxClusterStabilizationTimeoutInSeconds") if obj.get("MaxClusterStabilizationTimeoutInSeconds") is not None else 60,
            "MaxConcurrentFaults": obj.get("MaxConcurrentFaults") if obj.get("MaxConcurrentFaults") is not None else 1,
            "TimeToRunInSeconds": obj.get("TimeToRunInSeconds") if obj.get("TimeToRunInSeconds") is not None else '4294967295',
            "WaitTimeBetweenFaultsInSeconds": obj.get("WaitTimeBetweenFaultsInSeconds") if obj.get("WaitTimeBetweenFaultsInSeconds") is not None else 20,
            "WaitTimeBetweenIterationsInSeconds": obj.get("WaitTimeBetweenIterationsInSeconds") if obj.get("WaitTimeBetweenIterationsInSeconds") is not None else 30
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.node_info import NodeInfo

class TestNodeInfo(unittest.TestCase):
    """NodeInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NodeInfo:
        """Test NodeInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NodeInfo`
        """
        model = NodeInfo()
        if include_optional:
            return NodeInfo(
                code_version = '',
                config_version = '',
                fault_domain = '',
                health_state = 'Invalid',
                id = openapi_client.models.node_id.NodeId(
                    id = '', ),
                instance_id = '',
                ip_address_or_fqdn = '',
                is_seed_node = True,
                is_stopped = True,
                name = '',
                node_deactivation_info = openapi_client.models.node_deactivation_info.NodeDeactivationInfo(
                    node_deactivation_intent = 'Invalid', 
                    node_deactivation_status = 'None', 
                    node_deactivation_task = [
                        openapi_client.models.node_deactivation_task.NodeDeactivationTask(
                            node_deactivation_task_id = openapi_client.models.node_deactivation_task_id.NodeDeactivationTaskId(
                                id = '', 
                                node_deactivation_task_type = 'Invalid', ), )
                        ], 
                    pending_safety_checks = [
                        openapi_client.models.safety_check_wrapper.SafetyCheckWrapper(
                            safety_check = openapi_client.models.safety_check.SafetyCheck(
                                kind = 'Invalid', ), )
                        ], ),
                node_down_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                node_down_time_in_seconds = '',
                node_status = 'Invalid',
                node_up_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                node_up_time_in_seconds = '',
                type = '',
                upgrade_domain = ''
            )
        else:
            return NodeInfo(
        )
        """

    def testNodeInfo(self):
        """Test NodeInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.service_replica_description import ServiceReplicaDescription

class TestServiceReplicaDescription(unittest.TestCase):
    """ServiceReplicaDescription unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceReplicaDescription:
        """Test ServiceReplicaDescription
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceReplicaDescription`
        """
        model = ServiceReplicaDescription()
        if include_optional:
            return ServiceReplicaDescription(
                replica_name = '',
                code_packages = [
                    openapi_client.models.container_code_package_properties.ContainerCodePackageProperties(
                        commands = [
                            ''
                            ], 
                        diagnostics = openapi_client.models.diagnostics_ref.DiagnosticsRef(
                            enabled = True, 
                            sink_refs = [
                                ''
                                ], ), 
                        endpoints = [
                            openapi_client.models.endpoint_properties.EndpointProperties(
                                name = '', 
                                port = 56, )
                            ], 
                        entrypoint = '', 
                        environment_variables = [
                            openapi_client.models.environment_variable.EnvironmentVariable(
                                name = '', 
                                type = 'ClearText', 
                                value = '', )
                            ], 
                        image = '', 
                        image_registry_credential = openapi_client.models.image_registry_credential.ImageRegistryCredential(
                            password = '', 
                            password_type = 'ClearText', 
                            server = '', 
                            username = '', ), 
                        instance_view = openapi_client.models.container_instance_view.ContainerInstanceView(
                            current_state = openapi_client.models.container_state.ContainerState(
                                detail_status = '', 
                                exit_code = '', 
                                finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                state = '', ), 
                            events = [
                                openapi_client.models.container_event.ContainerEvent(
                                    count = 56, 
                                    first_timestamp = '', 
                                    last_timestamp = '', 
                                    message = '', 
                                    name = '', )
                                ], 
                            previous_state = openapi_client.models.container_state.ContainerState(
                                detail_status = '', 
                                exit_code = '', 
                                finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                state = '', ), 
                            restart_count = 56, ), 
                        labels = [
                            openapi_client.models.container_label.ContainerLabel(
                                name = '', 
                                value = '', )
                            ], 
                        liveness_probe = [
                            openapi_client.models.probe.Probe(
                                exec = openapi_client.models.probe_exec.ProbeExec(
                                    command = '', ), 
                                failure_threshold = 56, 
                                http_get = openapi_client.models.probe_http_get.ProbeHttpGet(
                                    host = '', 
                                    http_headers = [
                                        openapi_client.models.probe_http_get_headers.ProbeHttpGetHeaders(
                                            name = '', 
                                            value = '', )
                                        ], 
                                    path = '', 
                                    port = 56, 
                                    scheme = 'http', ), 
                                initial_delay_seconds = 56, 
                                period_seconds = 56, 
                                success_threshold = 56, 
                                tcp_socket = openapi_client.models.probe_tcp_socket.ProbeTcpSocket(
                                    port = 56, ), 
                                timeout_seconds = 56, )
                            ], 
                        name = '', 
                        readiness_probe = [
                            openapi_client.models.probe.Probe(
                                failure_threshold = 56, 
                                initial_delay_seconds = 56, 
                                period_seconds = 56, 
                                success_threshold = 56, 
                                timeout_seconds = 56, )
                            ], 
                        reliable_collections_refs = [
                            openapi_client.models.reliable_collections_ref.ReliableCollectionsRef(
                                do_not_persist_state = True, 
                                name = '', )
                            ], 
                        resources = openapi_client.models.resource_requirements.ResourceRequirements(
                            limits = openapi_client.models.resource_limits.ResourceLimits(
                                cpu = 1.337, 
                                memory_in_gb = 1.337, ), 
                            requests = openapi_client.models.resource_requests.ResourceRequests(
                                cpu = 1.337, 
                                memory_in_gb = 1.337, ), ), 
                        settings = [
                            openapi_client.models.setting.Setting(
                                name = '', 
                                value = '', )
                            ], 
                        volume_refs = [
                            openapi_client.models.volume_reference.VolumeReference(
                                destination_path = '', 
                                name = '', 
                                read_only = True, )
                            ], 
                        volumes = [
                            openapi_client.models.application_scoped_volume.ApplicationScopedVolume(
                                creation_parameters = openapi_client.models.application_scoped_volume_creation_parameters.ApplicationScopedVolumeCreationParameters(
                                    description = '', 
                                    kind = 'ServiceFabricVolumeDisk', ), )
                            ], )
                    ],
                diagnostics = openapi_client.models.diagnostics_ref.DiagnosticsRef(
                    enabled = True, 
                    sink_refs = [
                        ''
                        ], ),
                network_refs = [
                    openapi_client.models.network_ref.NetworkRef(
                        endpoint_refs = [
                            openapi_client.models.endpoint_ref.EndpointRef(
                                name = '', )
                            ], 
                        name = '', )
                    ],
                os_type = 'Linux'
            )
        else:
            return ServiceReplicaDescription(
                replica_name = '',
                code_packages = [
                    openapi_client.models.container_code_package_properties.ContainerCodePackageProperties(
                        commands = [
                            ''
                            ], 
                        diagnostics = openapi_client.models.diagnostics_ref.DiagnosticsRef(
                            enabled = True, 
                            sink_refs = [
                                ''
                                ], ), 
                        endpoints = [
                            openapi_client.models.endpoint_properties.EndpointProperties(
                                name = '', 
                                port = 56, )
                            ], 
                        entrypoint = '', 
                        environment_variables = [
                            openapi_client.models.environment_variable.EnvironmentVariable(
                                name = '', 
                                type = 'ClearText', 
                                value = '', )
                            ], 
                        image = '', 
                        image_registry_credential = openapi_client.models.image_registry_credential.ImageRegistryCredential(
                            password = '', 
                            password_type = 'ClearText', 
                            server = '', 
                            username = '', ), 
                        instance_view = openapi_client.models.container_instance_view.ContainerInstanceView(
                            current_state = openapi_client.models.container_state.ContainerState(
                                detail_status = '', 
                                exit_code = '', 
                                finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                state = '', ), 
                            events = [
                                openapi_client.models.container_event.ContainerEvent(
                                    count = 56, 
                                    first_timestamp = '', 
                                    last_timestamp = '', 
                                    message = '', 
                                    name = '', )
                                ], 
                            previous_state = openapi_client.models.container_state.ContainerState(
                                detail_status = '', 
                                exit_code = '', 
                                finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                state = '', ), 
                            restart_count = 56, ), 
                        labels = [
                            openapi_client.models.container_label.ContainerLabel(
                                name = '', 
                                value = '', )
                            ], 
                        liveness_probe = [
                            openapi_client.models.probe.Probe(
                                exec = openapi_client.models.probe_exec.ProbeExec(
                                    command = '', ), 
                                failure_threshold = 56, 
                                http_get = openapi_client.models.probe_http_get.ProbeHttpGet(
                                    host = '', 
                                    http_headers = [
                                        openapi_client.models.probe_http_get_headers.ProbeHttpGetHeaders(
                                            name = '', 
                                            value = '', )
                                        ], 
                                    path = '', 
                                    port = 56, 
                                    scheme = 'http', ), 
                                initial_delay_seconds = 56, 
                                period_seconds = 56, 
                                success_threshold = 56, 
                                tcp_socket = openapi_client.models.probe_tcp_socket.ProbeTcpSocket(
                                    port = 56, ), 
                                timeout_seconds = 56, )
                            ], 
                        name = '', 
                        readiness_probe = [
                            openapi_client.models.probe.Probe(
                                failure_threshold = 56, 
                                initial_delay_seconds = 56, 
                                period_seconds = 56, 
                                success_threshold = 56, 
                                timeout_seconds = 56, )
                            ], 
                        reliable_collections_refs = [
                            openapi_client.models.reliable_collections_ref.ReliableCollectionsRef(
                                do_not_persist_state = True, 
                                name = '', )
                            ], 
                        resources = openapi_client.models.resource_requirements.ResourceRequirements(
                            limits = openapi_client.models.resource_limits.ResourceLimits(
                                cpu = 1.337, 
                                memory_in_gb = 1.337, ), 
                            requests = openapi_client.models.resource_requests.ResourceRequests(
                                cpu = 1.337, 
                                memory_in_gb = 1.337, ), ), 
                        settings = [
                            openapi_client.models.setting.Setting(
                                name = '', 
                                value = '', )
                            ], 
                        volume_refs = [
                            openapi_client.models.volume_reference.VolumeReference(
                                destination_path = '', 
                                name = '', 
                                read_only = True, )
                            ], 
                        volumes = [
                            openapi_client.models.application_scoped_volume.ApplicationScopedVolume(
                                creation_parameters = openapi_client.models.application_scoped_volume_creation_parameters.ApplicationScopedVolumeCreationParameters(
                                    description = '', 
                                    kind = 'ServiceFabricVolumeDisk', ), )
                            ], )
                    ],
                os_type = 'Linux',
        )
        """

    def testServiceReplicaDescription(self):
        """Test ServiceReplicaDescription"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

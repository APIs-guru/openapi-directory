# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.secondary_replicator_status import SecondaryReplicatorStatus

class TestSecondaryReplicatorStatus(unittest.TestCase):
    """SecondaryReplicatorStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecondaryReplicatorStatus:
        """Test SecondaryReplicatorStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecondaryReplicatorStatus`
        """
        model = SecondaryReplicatorStatus()
        if include_optional:
            return SecondaryReplicatorStatus(
                copy_queue_status = openapi_client.models.replicator_queue_status.ReplicatorQueueStatus(
                    committed_sequence_number = '', 
                    completed_sequence_number = '', 
                    first_sequence_number = '', 
                    last_sequence_number = '', 
                    queue_memory_size = '', 
                    queue_utilization_percentage = 56, ),
                is_in_build = True,
                last_acknowledgement_sent_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_copy_operation_received_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_replication_operation_received_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                replication_queue_status = openapi_client.models.replicator_queue_status.ReplicatorQueueStatus(
                    committed_sequence_number = '', 
                    completed_sequence_number = '', 
                    first_sequence_number = '', 
                    last_sequence_number = '', 
                    queue_memory_size = '', 
                    queue_utilization_percentage = 56, )
            )
        else:
            return SecondaryReplicatorStatus(
        )
        """

    def testSecondaryReplicatorStatus(self):
        """Test SecondaryReplicatorStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.probe import Probe

class TestProbe(unittest.TestCase):
    """Probe unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Probe:
        """Test Probe
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Probe`
        """
        model = Probe()
        if include_optional:
            return Probe(
                var_exec = openapi_client.models.probe_exec.ProbeExec(
                    command = '', ),
                failure_threshold = 56,
                http_get = openapi_client.models.probe_http_get.ProbeHttpGet(
                    host = '', 
                    http_headers = [
                        openapi_client.models.probe_http_get_headers.ProbeHttpGetHeaders(
                            name = '', 
                            value = '', )
                        ], 
                    path = '', 
                    port = 56, 
                    scheme = 'http', ),
                initial_delay_seconds = 56,
                period_seconds = 56,
                success_threshold = 56,
                tcp_socket = openapi_client.models.probe_tcp_socket.ProbeTcpSocket(
                    port = 56, ),
                timeout_seconds = 56
            )
        else:
            return Probe(
        )
        """

    def testProbe(self):
        """Test Probe"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

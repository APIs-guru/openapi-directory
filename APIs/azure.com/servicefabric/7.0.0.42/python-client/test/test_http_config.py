# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.http_config import HttpConfig

class TestHttpConfig(unittest.TestCase):
    """HttpConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HttpConfig:
        """Test HttpConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HttpConfig`
        """
        model = HttpConfig()
        if include_optional:
            return HttpConfig(
                hosts = [
                    openapi_client.models.http_host_config.HttpHostConfig(
                        name = '', 
                        routes = [
                            openapi_client.models.http_route_config.HttpRouteConfig(
                                destination = openapi_client.models.gateway_destination.GatewayDestination(
                                    application_name = '', 
                                    endpoint_name = '', 
                                    service_name = '', ), 
                                match = openapi_client.models.http_route_match_rule.HttpRouteMatchRule(
                                    headers = [
                                        openapi_client.models.http_route_match_header.HttpRouteMatchHeader(
                                            name = '', 
                                            type = 'exact', 
                                            value = '', )
                                        ], 
                                    path = openapi_client.models.http_route_match_path.HttpRouteMatchPath(
                                        rewrite = '', 
                                        type = 'prefix', 
                                        value = '', ), ), 
                                name = '', )
                            ], )
                    ],
                name = '',
                port = 56
            )
        else:
            return HttpConfig(
                hosts = [
                    openapi_client.models.http_host_config.HttpHostConfig(
                        name = '', 
                        routes = [
                            openapi_client.models.http_route_config.HttpRouteConfig(
                                destination = openapi_client.models.gateway_destination.GatewayDestination(
                                    application_name = '', 
                                    endpoint_name = '', 
                                    service_name = '', ), 
                                match = openapi_client.models.http_route_match_rule.HttpRouteMatchRule(
                                    headers = [
                                        openapi_client.models.http_route_match_header.HttpRouteMatchHeader(
                                            name = '', 
                                            type = 'exact', 
                                            value = '', )
                                        ], 
                                    path = openapi_client.models.http_route_match_path.HttpRouteMatchPath(
                                        rewrite = '', 
                                        type = 'prefix', 
                                        value = '', ), ), 
                                name = '', )
                            ], )
                    ],
                name = '',
                port = 56,
        )
        """

    def testHttpConfig(self):
        """Test HttpConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

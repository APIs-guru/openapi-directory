# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.remote_replicator_status import RemoteReplicatorStatus

class TestRemoteReplicatorStatus(unittest.TestCase):
    """RemoteReplicatorStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RemoteReplicatorStatus:
        """Test RemoteReplicatorStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RemoteReplicatorStatus`
        """
        model = RemoteReplicatorStatus()
        if include_optional:
            return RemoteReplicatorStatus(
                is_in_build = True,
                last_acknowledgement_processed_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_applied_copy_sequence_number = '',
                last_applied_replication_sequence_number = '',
                last_received_copy_sequence_number = '',
                last_received_replication_sequence_number = '',
                remote_replicator_acknowledgement_status = openapi_client.models.remote_replicator_acknowledgement_status.RemoteReplicatorAcknowledgementStatus(
                    copy_stream_acknowledgement_detail = openapi_client.models.remote_replicator_acknowledgement_detail.RemoteReplicatorAcknowledgementDetail(
                        average_apply_duration = '', 
                        average_receive_duration = '', 
                        not_received_count = '', 
                        received_and_not_applied_count = '', ), 
                    replication_stream_acknowledgement_detail = openapi_client.models.remote_replicator_acknowledgement_detail.RemoteReplicatorAcknowledgementDetail(
                        average_apply_duration = '', 
                        average_receive_duration = '', 
                        not_received_count = '', 
                        received_and_not_applied_count = '', ), ),
                replica_id = ''
            )
        else:
            return RemoteReplicatorStatus(
        )
        """

    def testRemoteReplicatorStatus(self):
        """Test RemoteReplicatorStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

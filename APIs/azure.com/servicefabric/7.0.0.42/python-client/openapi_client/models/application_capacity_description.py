# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.application_metric_description import ApplicationMetricDescription
from typing import Optional, Set
from typing_extensions import Self

class ApplicationCapacityDescription(BaseModel):
    """
    Describes capacity information for services of this application. This description can be used for describing the following. - Reserving the capacity for the services on the nodes - Limiting the total number of nodes that services of this application can run on - Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this application
    """ # noqa: E501
    application_metrics: Optional[List[ApplicationMetricDescription]] = Field(default=None, description="List of application capacity metric description.", alias="ApplicationMetrics")
    maximum_nodes: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=0, description="The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.", alias="MaximumNodes")
    minimum_nodes: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.", alias="MinimumNodes")
    __properties: ClassVar[List[str]] = ["ApplicationMetrics", "MaximumNodes", "MinimumNodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationCapacityDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_metrics (list)
        _items = []
        if self.application_metrics:
            for _item_application_metrics in self.application_metrics:
                if _item_application_metrics:
                    _items.append(_item_application_metrics.to_dict())
            _dict['ApplicationMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationCapacityDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationMetrics": [ApplicationMetricDescription.from_dict(_item) for _item in obj["ApplicationMetrics"]] if obj.get("ApplicationMetrics") is not None else None,
            "MaximumNodes": obj.get("MaximumNodes") if obj.get("MaximumNodes") is not None else 0,
            "MinimumNodes": obj.get("MinimumNodes")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_health_policy_map_item import ApplicationHealthPolicyMapItem
from openapi_client.models.cluster_health_policy import ClusterHealthPolicy
from openapi_client.models.cluster_upgrade_health_policy_object import ClusterUpgradeHealthPolicyObject
from openapi_client.models.monitoring_policy_description import MonitoringPolicyDescription
from openapi_client.models.upgrade_kind import UpgradeKind
from openapi_client.models.upgrade_mode import UpgradeMode
from openapi_client.models.upgrade_sort_order import UpgradeSortOrder
from typing import Optional, Set
from typing_extensions import Self

class ClusterUpgradeDescriptionObject(BaseModel):
    """
    Represents a ServiceFabric cluster upgrade
    """ # noqa: E501
    application_health_policy_map: Optional[List[ApplicationHealthPolicyMapItem]] = Field(default=None, description="Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest). The map is empty by default.", alias="ApplicationHealthPolicyMap")
    cluster_health_policy: Optional[ClusterHealthPolicy] = Field(default=None, alias="ClusterHealthPolicy")
    cluster_upgrade_health_policy: Optional[ClusterUpgradeHealthPolicyObject] = Field(default=None, alias="ClusterUpgradeHealthPolicy")
    code_version: Optional[StrictStr] = Field(default=None, description="The ServiceFabric code version of the cluster.", alias="CodeVersion")
    config_version: Optional[StrictStr] = Field(default=None, description="The cluster configuration version (specified in the cluster manifest).", alias="ConfigVersion")
    enable_delta_health_evaluation: Optional[StrictBool] = Field(default=None, description="When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.", alias="EnableDeltaHealthEvaluation")
    force_restart: Optional[StrictBool] = Field(default=False, description="If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).", alias="ForceRestart")
    monitoring_policy: Optional[MonitoringPolicyDescription] = Field(default=None, alias="MonitoringPolicy")
    rolling_upgrade_mode: Optional[UpgradeMode] = Field(default=UpgradeMode.UNMONITOREDAUTO, alias="RollingUpgradeMode")
    sort_order: Optional[UpgradeSortOrder] = Field(default=UpgradeSortOrder.DEFAULT, alias="SortOrder")
    upgrade_kind: Optional[UpgradeKind] = Field(default=UpgradeKind.ROLLING, alias="UpgradeKind")
    upgrade_replica_set_check_timeout_in_seconds: Optional[StrictInt] = Field(default=None, description="The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).", alias="UpgradeReplicaSetCheckTimeoutInSeconds")
    __properties: ClassVar[List[str]] = ["ApplicationHealthPolicyMap", "ClusterHealthPolicy", "ClusterUpgradeHealthPolicy", "CodeVersion", "ConfigVersion", "EnableDeltaHealthEvaluation", "ForceRestart", "MonitoringPolicy", "RollingUpgradeMode", "SortOrder", "UpgradeKind", "UpgradeReplicaSetCheckTimeoutInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterUpgradeDescriptionObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_health_policy_map (list)
        _items = []
        if self.application_health_policy_map:
            for _item_application_health_policy_map in self.application_health_policy_map:
                if _item_application_health_policy_map:
                    _items.append(_item_application_health_policy_map.to_dict())
            _dict['ApplicationHealthPolicyMap'] = _items
        # override the default output from pydantic by calling `to_dict()` of cluster_health_policy
        if self.cluster_health_policy:
            _dict['ClusterHealthPolicy'] = self.cluster_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_upgrade_health_policy
        if self.cluster_upgrade_health_policy:
            _dict['ClusterUpgradeHealthPolicy'] = self.cluster_upgrade_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring_policy
        if self.monitoring_policy:
            _dict['MonitoringPolicy'] = self.monitoring_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterUpgradeDescriptionObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationHealthPolicyMap": [ApplicationHealthPolicyMapItem.from_dict(_item) for _item in obj["ApplicationHealthPolicyMap"]] if obj.get("ApplicationHealthPolicyMap") is not None else None,
            "ClusterHealthPolicy": ClusterHealthPolicy.from_dict(obj["ClusterHealthPolicy"]) if obj.get("ClusterHealthPolicy") is not None else None,
            "ClusterUpgradeHealthPolicy": ClusterUpgradeHealthPolicyObject.from_dict(obj["ClusterUpgradeHealthPolicy"]) if obj.get("ClusterUpgradeHealthPolicy") is not None else None,
            "CodeVersion": obj.get("CodeVersion"),
            "ConfigVersion": obj.get("ConfigVersion"),
            "EnableDeltaHealthEvaluation": obj.get("EnableDeltaHealthEvaluation"),
            "ForceRestart": obj.get("ForceRestart") if obj.get("ForceRestart") is not None else False,
            "MonitoringPolicy": MonitoringPolicyDescription.from_dict(obj["MonitoringPolicy"]) if obj.get("MonitoringPolicy") is not None else None,
            "RollingUpgradeMode": obj.get("RollingUpgradeMode") if obj.get("RollingUpgradeMode") is not None else UpgradeMode.UNMONITOREDAUTO,
            "SortOrder": obj.get("SortOrder") if obj.get("SortOrder") is not None else UpgradeSortOrder.DEFAULT,
            "UpgradeKind": obj.get("UpgradeKind") if obj.get("UpgradeKind") is not None else UpgradeKind.ROLLING,
            "UpgradeReplicaSetCheckTimeoutInSeconds": obj.get("UpgradeReplicaSetCheckTimeoutInSeconds")
        })
        return _obj



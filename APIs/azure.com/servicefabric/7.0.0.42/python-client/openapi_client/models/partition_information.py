# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.service_partition_kind import ServicePartitionKind
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.int64_range_partition_information import Int64RangePartitionInformation
    from openapi_client.models.named_partition_information import NamedPartitionInformation
    from openapi_client.models.singleton_partition_information import SingletonPartitionInformation

class PartitionInformation(BaseModel):
    """
    Information about the partition identity, partitioning scheme and keys supported by it.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.", alias="Id")
    service_partition_kind: ServicePartitionKind = Field(alias="ServicePartitionKind")
    __properties: ClassVar[List[str]] = ["Id", "ServicePartitionKind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'ServicePartitionKind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'Int64RangePartitionInformation': 'Int64RangePartitionInformation','NamedPartitionInformation': 'NamedPartitionInformation','SingletonPartitionInformation': 'SingletonPartitionInformation'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Int64RangePartitionInformation, NamedPartitionInformation, SingletonPartitionInformation]]:
        """Create an instance of PartitionInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Int64RangePartitionInformation, NamedPartitionInformation, SingletonPartitionInformation]]:
        """Create an instance of PartitionInformation from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'Int64RangePartitionInformation':
            return import_module("openapi_client.models.int64_range_partition_information").Int64RangePartitionInformation.from_dict(obj)
        if object_type ==  'NamedPartitionInformation':
            return import_module("openapi_client.models.named_partition_information").NamedPartitionInformation.from_dict(obj)
        if object_type ==  'SingletonPartitionInformation':
            return import_module("openapi_client.models.singleton_partition_information").SingletonPartitionInformation.from_dict(obj)

        raise ValueError("PartitionInformation failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



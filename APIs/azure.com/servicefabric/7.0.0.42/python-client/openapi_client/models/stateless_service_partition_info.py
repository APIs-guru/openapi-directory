# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.health_state import HealthState
from openapi_client.models.partition_information import PartitionInformation
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_partition_info import ServicePartitionInfo
from openapi_client.models.service_partition_status import ServicePartitionStatus
from typing import Optional, Set
from typing_extensions import Self

class StatelessServicePartitionInfo(ServicePartitionInfo):
    """
    Information about a partition of a stateless Service Fabric service.
    """ # noqa: E501
    instance_count: Optional[StrictInt] = Field(default=None, description="Number of instances of this partition.", alias="InstanceCount")
    min_instance_count: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=1, description="MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.", alias="MinInstanceCount")
    min_instance_percentage: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=0, description="MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.", alias="MinInstancePercentage")
    __properties: ClassVar[List[str]] = ["HealthState", "PartitionInformation", "PartitionStatus", "ServiceKind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatelessServicePartitionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partition_information
        if self.partition_information:
            _dict['PartitionInformation'] = self.partition_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatelessServicePartitionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HealthState": obj.get("HealthState"),
            "PartitionInformation": PartitionInformation.from_dict(obj["PartitionInformation"]) if obj.get("PartitionInformation") is not None else None,
            "PartitionStatus": obj.get("PartitionStatus"),
            "ServiceKind": obj.get("ServiceKind")
        })
        return _obj



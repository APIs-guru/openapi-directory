# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.diagnostics_description import DiagnosticsDescription
from openapi_client.models.health_state import HealthState
from openapi_client.models.resource_status import ResourceStatus
from openapi_client.models.service_resource_description import ServiceResourceDescription
from typing import Optional, Set
from typing_extensions import Self

class ApplicationProperties(BaseModel):
    """
    Describes properties of a application resource.
    """ # noqa: E501
    debug_params: Optional[StrictStr] = Field(default=None, description="Internal - used by Visual Studio to setup the debugging session on the local development environment.", alias="debugParams")
    description: Optional[StrictStr] = Field(default=None, description="User readable description of the application.")
    diagnostics: Optional[DiagnosticsDescription] = None
    health_state: Optional[HealthState] = Field(default=None, alias="healthState")
    service_names: Optional[List[StrictStr]] = Field(default=None, description="Names of the services in the application.", alias="serviceNames")
    services: Optional[List[ServiceResourceDescription]] = Field(default=None, description="Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource.")
    status: Optional[ResourceStatus] = None
    status_details: Optional[StrictStr] = Field(default=None, description="Gives additional information about the current status of the application.", alias="statusDetails")
    unhealthy_evaluation: Optional[StrictStr] = Field(default=None, description="When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.", alias="unhealthyEvaluation")
    __properties: ClassVar[List[str]] = ["debugParams", "description", "diagnostics", "healthState", "serviceNames", "services", "status", "statusDetails", "unhealthyEvaluation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "service_names",
            "status_details",
            "unhealthy_evaluation",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of diagnostics
        if self.diagnostics:
            _dict['diagnostics'] = self.diagnostics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "debugParams": obj.get("debugParams"),
            "description": obj.get("description"),
            "diagnostics": DiagnosticsDescription.from_dict(obj["diagnostics"]) if obj.get("diagnostics") is not None else None,
            "healthState": obj.get("healthState"),
            "serviceNames": obj.get("serviceNames"),
            "services": [ServiceResourceDescription.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "status": obj.get("status"),
            "statusDetails": obj.get("statusDetails"),
            "unhealthyEvaluation": obj.get("unhealthyEvaluation")
        })
        return _obj



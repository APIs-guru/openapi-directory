# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_scaling_policy import AutoScalingPolicy
from openapi_client.models.execution_policy import ExecutionPolicy
from openapi_client.models.health_state import HealthState
from openapi_client.models.resource_status import ResourceStatus
from openapi_client.models.service_identity import ServiceIdentity
from typing import Optional, Set
from typing_extensions import Self

class ServiceProperties(BaseModel):
    """
    Describes properties of a service resource.
    """ # noqa: E501
    auto_scaling_policies: Optional[List[AutoScalingPolicy]] = Field(default=None, description="Auto scaling policies", alias="autoScalingPolicies")
    description: Optional[StrictStr] = Field(default=None, description="User readable description of the service.")
    dns_name: Optional[StrictStr] = Field(default=None, description="Dns name of the service.", alias="dnsName")
    execution_policy: Optional[ExecutionPolicy] = Field(default=None, alias="executionPolicy")
    health_state: Optional[HealthState] = Field(default=None, alias="healthState")
    identity_refs: Optional[List[ServiceIdentity]] = Field(default=None, description="The service identity list.", alias="identityRefs")
    replica_count: Optional[StrictInt] = Field(default=None, description="The number of replicas of the service to create. Defaults to 1 if not specified.", alias="replicaCount")
    status: Optional[ResourceStatus] = None
    status_details: Optional[StrictStr] = Field(default=None, description="Gives additional information about the current status of the service.", alias="statusDetails")
    unhealthy_evaluation: Optional[StrictStr] = Field(default=None, description="When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.", alias="unhealthyEvaluation")
    __properties: ClassVar[List[str]] = ["autoScalingPolicies", "description", "dnsName", "executionPolicy", "healthState", "identityRefs", "replicaCount", "status", "statusDetails", "unhealthyEvaluation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "status_details",
            "unhealthy_evaluation",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in auto_scaling_policies (list)
        _items = []
        if self.auto_scaling_policies:
            for _item_auto_scaling_policies in self.auto_scaling_policies:
                if _item_auto_scaling_policies:
                    _items.append(_item_auto_scaling_policies.to_dict())
            _dict['autoScalingPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of execution_policy
        if self.execution_policy:
            _dict['executionPolicy'] = self.execution_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in identity_refs (list)
        _items = []
        if self.identity_refs:
            for _item_identity_refs in self.identity_refs:
                if _item_identity_refs:
                    _items.append(_item_identity_refs.to_dict())
            _dict['identityRefs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoScalingPolicies": [AutoScalingPolicy.from_dict(_item) for _item in obj["autoScalingPolicies"]] if obj.get("autoScalingPolicies") is not None else None,
            "description": obj.get("description"),
            "dnsName": obj.get("dnsName"),
            "executionPolicy": ExecutionPolicy.from_dict(obj["executionPolicy"]) if obj.get("executionPolicy") is not None else None,
            "healthState": obj.get("healthState"),
            "identityRefs": [ServiceIdentity.from_dict(_item) for _item in obj["identityRefs"]] if obj.get("identityRefs") is not None else None,
            "replicaCount": obj.get("replicaCount"),
            "status": obj.get("status"),
            "statusDetails": obj.get("statusDetails"),
            "unhealthyEvaluation": obj.get("unhealthyEvaluation")
        })
        return _obj



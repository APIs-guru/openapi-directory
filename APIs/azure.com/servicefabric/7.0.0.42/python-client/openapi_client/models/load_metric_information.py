# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.node_id import NodeId
from typing import Optional, Set
from typing_extensions import Self

class LoadMetricInformation(BaseModel):
    """
    Represents data structure that contains load information for a certain metric in a cluster.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="The current action being taken with regard to this metric", alias="Action")
    activity_threshold: Optional[StrictStr] = Field(default=None, description="The Activity Threshold specified for this metric in the system Cluster Manifest.", alias="ActivityThreshold")
    balancing_threshold: Optional[StrictStr] = Field(default=None, description="The balancing threshold for a certain metric.", alias="BalancingThreshold")
    buffered_cluster_capacity_remaining: Optional[StrictStr] = Field(default=None, description="Remaining capacity in the cluster excluding the reserved space.", alias="BufferedClusterCapacityRemaining")
    cluster_buffered_capacity: Optional[StrictStr] = Field(default=None, description="Remaining capacity in the cluster excluding the reserved space. In future releases of Service Fabric this parameter will be deprecated in favor of BufferedClusterCapacityRemaining.", alias="ClusterBufferedCapacity")
    cluster_capacity: Optional[StrictStr] = Field(default=None, description="The total cluster capacity for a given metric", alias="ClusterCapacity")
    cluster_capacity_remaining: Optional[StrictStr] = Field(default=None, description="The remaining capacity for the metric in the cluster.", alias="ClusterCapacityRemaining")
    cluster_load: Optional[StrictStr] = Field(default=None, description="The total cluster load. In future releases of Service Fabric this parameter will be deprecated in favor of CurrentClusterLoad.", alias="ClusterLoad")
    cluster_remaining_buffered_capacity: Optional[StrictStr] = Field(default=None, description="The remaining percentage of cluster total capacity for this metric.", alias="ClusterRemainingBufferedCapacity")
    cluster_remaining_capacity: Optional[StrictStr] = Field(default=None, description="The remaining capacity for the metric in the cluster. In future releases of Service Fabric this parameter will be deprecated in favor of ClusterCapacityRemaining.", alias="ClusterRemainingCapacity")
    current_cluster_load: Optional[StrictStr] = Field(default=None, description="The total cluster load.", alias="CurrentClusterLoad")
    deviation_after: Optional[StrictStr] = Field(default=None, description="The standard average deviation of the metrics after resource balancer run.", alias="DeviationAfter")
    deviation_before: Optional[StrictStr] = Field(default=None, description="The standard average deviation of the metrics before resource balancer run.", alias="DeviationBefore")
    is_balanced_after: Optional[StrictBool] = Field(default=None, description="Value that indicates whether the metrics is balanced or not after resource balancer run.", alias="IsBalancedAfter")
    is_balanced_before: Optional[StrictBool] = Field(default=None, description="Value that indicates whether the metrics is balanced or not before resource balancer run", alias="IsBalancedBefore")
    is_cluster_capacity_violation: Optional[StrictBool] = Field(default=None, description="Indicates that the metric is currently over capacity in the cluster.", alias="IsClusterCapacityViolation")
    max_node_load_node_id: Optional[NodeId] = Field(default=None, alias="MaxNodeLoadNodeId")
    max_node_load_value: Optional[StrictStr] = Field(default=None, description="The maximum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MaximumNodeLoad.", alias="MaxNodeLoadValue")
    maximum_node_load: Optional[StrictStr] = Field(default=None, description="The maximum load on any node for this metric.", alias="MaximumNodeLoad")
    min_node_load_node_id: Optional[NodeId] = Field(default=None, alias="MinNodeLoadNodeId")
    min_node_load_value: Optional[StrictStr] = Field(default=None, description="The minimum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MinimumNodeLoad.", alias="MinNodeLoadValue")
    minimum_node_load: Optional[StrictStr] = Field(default=None, description="The minimum load on any node for this metric.", alias="MinimumNodeLoad")
    name: Optional[StrictStr] = Field(default=None, description="Name of the metric for which this load information is provided.", alias="Name")
    node_buffer_percentage: Optional[StrictStr] = Field(default=None, description="The reserved percentage of total node capacity for this metric.", alias="NodeBufferPercentage")
    planned_load_removal: Optional[StrictStr] = Field(default=None, description="This value represents the load of the replicas that are planned to be removed in the future within the cluster. This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.", alias="PlannedLoadRemoval")
    __properties: ClassVar[List[str]] = ["Action", "ActivityThreshold", "BalancingThreshold", "BufferedClusterCapacityRemaining", "ClusterBufferedCapacity", "ClusterCapacity", "ClusterCapacityRemaining", "ClusterLoad", "ClusterRemainingBufferedCapacity", "ClusterRemainingCapacity", "CurrentClusterLoad", "DeviationAfter", "DeviationBefore", "IsBalancedAfter", "IsBalancedBefore", "IsClusterCapacityViolation", "MaxNodeLoadNodeId", "MaxNodeLoadValue", "MaximumNodeLoad", "MinNodeLoadNodeId", "MinNodeLoadValue", "MinimumNodeLoad", "Name", "NodeBufferPercentage", "PlannedLoadRemoval"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoadMetricInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_node_load_node_id
        if self.max_node_load_node_id:
            _dict['MaxNodeLoadNodeId'] = self.max_node_load_node_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_node_load_node_id
        if self.min_node_load_node_id:
            _dict['MinNodeLoadNodeId'] = self.min_node_load_node_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoadMetricInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Action": obj.get("Action"),
            "ActivityThreshold": obj.get("ActivityThreshold"),
            "BalancingThreshold": obj.get("BalancingThreshold"),
            "BufferedClusterCapacityRemaining": obj.get("BufferedClusterCapacityRemaining"),
            "ClusterBufferedCapacity": obj.get("ClusterBufferedCapacity"),
            "ClusterCapacity": obj.get("ClusterCapacity"),
            "ClusterCapacityRemaining": obj.get("ClusterCapacityRemaining"),
            "ClusterLoad": obj.get("ClusterLoad"),
            "ClusterRemainingBufferedCapacity": obj.get("ClusterRemainingBufferedCapacity"),
            "ClusterRemainingCapacity": obj.get("ClusterRemainingCapacity"),
            "CurrentClusterLoad": obj.get("CurrentClusterLoad"),
            "DeviationAfter": obj.get("DeviationAfter"),
            "DeviationBefore": obj.get("DeviationBefore"),
            "IsBalancedAfter": obj.get("IsBalancedAfter"),
            "IsBalancedBefore": obj.get("IsBalancedBefore"),
            "IsClusterCapacityViolation": obj.get("IsClusterCapacityViolation"),
            "MaxNodeLoadNodeId": NodeId.from_dict(obj["MaxNodeLoadNodeId"]) if obj.get("MaxNodeLoadNodeId") is not None else None,
            "MaxNodeLoadValue": obj.get("MaxNodeLoadValue"),
            "MaximumNodeLoad": obj.get("MaximumNodeLoad"),
            "MinNodeLoadNodeId": NodeId.from_dict(obj["MinNodeLoadNodeId"]) if obj.get("MinNodeLoadNodeId") is not None else None,
            "MinNodeLoadValue": obj.get("MinNodeLoadValue"),
            "MinimumNodeLoad": obj.get("MinimumNodeLoad"),
            "Name": obj.get("Name"),
            "NodeBufferPercentage": obj.get("NodeBufferPercentage"),
            "PlannedLoadRemoval": obj.get("PlannedLoadRemoval")
        })
        return _obj



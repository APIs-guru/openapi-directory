# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_resource_upgrade_state import ApplicationResourceUpgradeState
from openapi_client.models.rolling_upgrade_mode import RollingUpgradeMode
from openapi_client.models.service_upgrade_progress import ServiceUpgradeProgress
from typing import Optional, Set
from typing_extensions import Self

class ApplicationResourceUpgradeProgressInfo(BaseModel):
    """
    This type describes an application resource upgrade.
    """ # noqa: E501
    application_upgrade_status_details: Optional[StrictStr] = Field(default=None, description="Additional detailed information about the status of the pending upgrade.", alias="ApplicationUpgradeStatusDetails")
    failure_timestamp_utc: Optional[StrictStr] = Field(default=None, description="The estimated UTC datetime when the upgrade failed and FailureAction was executed.", alias="FailureTimestampUtc")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Application resource.", alias="Name")
    percent_completed: Optional[StrictStr] = Field(default=None, description="The estimated percent of replicas are completed in the upgrade.", alias="PercentCompleted")
    rolling_upgrade_mode: Optional[RollingUpgradeMode] = Field(default=RollingUpgradeMode.MONITORED, alias="RollingUpgradeMode")
    service_upgrade_progress: Optional[List[ServiceUpgradeProgress]] = Field(default=None, description="List of service upgrade progresses.", alias="ServiceUpgradeProgress")
    start_timestamp_utc: Optional[StrictStr] = Field(default=None, description="The estimated UTC datetime when the upgrade started.", alias="StartTimestampUtc")
    target_application_type_version: Optional[StrictStr] = Field(default=None, description="The target application version for the application upgrade.", alias="TargetApplicationTypeVersion")
    upgrade_duration: Optional[StrictStr] = Field(default='PT0H2M0S', description="The estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="UpgradeDuration")
    upgrade_replica_set_check_timeout_in_seconds: Optional[StrictInt] = Field(default=42949672925, description="The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).", alias="UpgradeReplicaSetCheckTimeoutInSeconds")
    upgrade_state: Optional[ApplicationResourceUpgradeState] = Field(default=None, alias="UpgradeState")
    __properties: ClassVar[List[str]] = ["ApplicationUpgradeStatusDetails", "FailureTimestampUtc", "Name", "PercentCompleted", "RollingUpgradeMode", "ServiceUpgradeProgress", "StartTimestampUtc", "TargetApplicationTypeVersion", "UpgradeDuration", "UpgradeReplicaSetCheckTimeoutInSeconds", "UpgradeState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationResourceUpgradeProgressInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in service_upgrade_progress (list)
        _items = []
        if self.service_upgrade_progress:
            for _item_service_upgrade_progress in self.service_upgrade_progress:
                if _item_service_upgrade_progress:
                    _items.append(_item_service_upgrade_progress.to_dict())
            _dict['ServiceUpgradeProgress'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationResourceUpgradeProgressInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationUpgradeStatusDetails": obj.get("ApplicationUpgradeStatusDetails"),
            "FailureTimestampUtc": obj.get("FailureTimestampUtc"),
            "Name": obj.get("Name"),
            "PercentCompleted": obj.get("PercentCompleted"),
            "RollingUpgradeMode": obj.get("RollingUpgradeMode") if obj.get("RollingUpgradeMode") is not None else RollingUpgradeMode.MONITORED,
            "ServiceUpgradeProgress": [ServiceUpgradeProgress.from_dict(_item) for _item in obj["ServiceUpgradeProgress"]] if obj.get("ServiceUpgradeProgress") is not None else None,
            "StartTimestampUtc": obj.get("StartTimestampUtc"),
            "TargetApplicationTypeVersion": obj.get("TargetApplicationTypeVersion"),
            "UpgradeDuration": obj.get("UpgradeDuration") if obj.get("UpgradeDuration") is not None else 'PT0H2M0S',
            "UpgradeReplicaSetCheckTimeoutInSeconds": obj.get("UpgradeReplicaSetCheckTimeoutInSeconds") if obj.get("UpgradeReplicaSetCheckTimeoutInSeconds") is not None else 42949672925,
            "UpgradeState": obj.get("UpgradeState")
        })
        return _obj



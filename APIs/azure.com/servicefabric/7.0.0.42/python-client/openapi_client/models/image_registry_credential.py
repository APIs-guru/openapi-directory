# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_registry_password_type import ImageRegistryPasswordType
from typing import Optional, Set
from typing_extensions import Self

class ImageRegistryCredential(BaseModel):
    """
    Image registry credential.
    """ # noqa: E501
    password: Optional[StrictStr] = Field(default=None, description="The password for the private registry. The password is required for create or update operations, however it is not returned in the get or list operations. Will be processed based on the type provided.")
    password_type: Optional[ImageRegistryPasswordType] = Field(default=ImageRegistryPasswordType.CLEARTEXT, alias="passwordType")
    server: StrictStr = Field(description="Docker image registry server, without protocol such as `http` and `https`.")
    username: StrictStr = Field(description="The username for the private registry.")
    __properties: ClassVar[List[str]] = ["password", "passwordType", "server", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageRegistryCredential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageRegistryCredential from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "password": obj.get("password"),
            "passwordType": obj.get("passwordType") if obj.get("passwordType") is not None else ImageRegistryPasswordType.CLEARTEXT,
            "server": obj.get("server"),
            "username": obj.get("username")
        })
        return _obj



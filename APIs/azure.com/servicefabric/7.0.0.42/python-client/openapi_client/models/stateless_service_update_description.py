# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.move_cost import MoveCost
from openapi_client.models.scaling_policy_description import ScalingPolicyDescription
from openapi_client.models.service_correlation_description import ServiceCorrelationDescription
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_client.models.service_placement_policy_description import ServicePlacementPolicyDescription
from openapi_client.models.service_update_description import ServiceUpdateDescription
from typing import Optional, Set
from typing_extensions import Self

class StatelessServiceUpdateDescription(ServiceUpdateDescription):
    """
    Describes an update for a stateless service.
    """ # noqa: E501
    instance_close_delay_duration_seconds: Optional[StrictStr] = Field(default=None, description="Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade and disabling node. The endpoint exposed on this instance is removed prior to starting the delay, which prevents new connections to this instance. In addition, clients that have subscribed to service endpoint change events(https://docs.microsoft.com/en-us/dotnet/api/system.fabric.fabricclient.servicemanagementclient.registerservicenotificationfilterasync), can do the following upon receiving the endpoint removal notification:     - Stop sending new requests to this instance.     - Close existing connections after in-flight requests have completed.     - Connect to a different instance of the service partition for future requests.", alias="InstanceCloseDelayDurationSeconds")
    instance_count: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=None, description="The instance count.", alias="InstanceCount")
    min_instance_count: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=1, description="MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.", alias="MinInstanceCount")
    min_instance_percentage: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=0, description="MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.", alias="MinInstancePercentage")
    __properties: ClassVar[List[str]] = ["CorrelationScheme", "DefaultMoveCost", "Flags", "LoadMetrics", "PlacementConstraints", "ScalingPolicies", "ServiceKind", "ServicePlacementPolicies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatelessServiceUpdateDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in correlation_scheme (list)
        _items = []
        if self.correlation_scheme:
            for _item_correlation_scheme in self.correlation_scheme:
                if _item_correlation_scheme:
                    _items.append(_item_correlation_scheme.to_dict())
            _dict['CorrelationScheme'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_metrics (list)
        _items = []
        if self.load_metrics:
            for _item_load_metrics in self.load_metrics:
                if _item_load_metrics:
                    _items.append(_item_load_metrics.to_dict())
            _dict['LoadMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scaling_policies (list)
        _items = []
        if self.scaling_policies:
            for _item_scaling_policies in self.scaling_policies:
                if _item_scaling_policies:
                    _items.append(_item_scaling_policies.to_dict())
            _dict['ScalingPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_placement_policies (list)
        _items = []
        if self.service_placement_policies:
            for _item_service_placement_policies in self.service_placement_policies:
                if _item_service_placement_policies:
                    _items.append(_item_service_placement_policies.to_dict())
            _dict['ServicePlacementPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatelessServiceUpdateDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CorrelationScheme": [ServiceCorrelationDescription.from_dict(_item) for _item in obj["CorrelationScheme"]] if obj.get("CorrelationScheme") is not None else None,
            "DefaultMoveCost": obj.get("DefaultMoveCost"),
            "Flags": obj.get("Flags"),
            "LoadMetrics": [ServiceLoadMetricDescription.from_dict(_item) for _item in obj["LoadMetrics"]] if obj.get("LoadMetrics") is not None else None,
            "PlacementConstraints": obj.get("PlacementConstraints"),
            "ScalingPolicies": [ScalingPolicyDescription.from_dict(_item) for _item in obj["ScalingPolicies"]] if obj.get("ScalingPolicies") is not None else None,
            "ServiceKind": obj.get("ServiceKind"),
            "ServicePlacementPolicies": [ServicePlacementPolicyDescription.from_dict(_item) for _item in obj["ServicePlacementPolicies"]] if obj.get("ServicePlacementPolicies") is not None else None
        })
        return _obj



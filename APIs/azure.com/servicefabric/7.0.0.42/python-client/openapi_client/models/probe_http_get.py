# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.probe_http_get_headers import ProbeHttpGetHeaders
from typing import Optional, Set
from typing_extensions import Self

class ProbeHttpGet(BaseModel):
    """
    Http probe for the container.
    """ # noqa: E501
    host: Optional[StrictStr] = Field(default=None, description="Host IP to connect to.")
    http_headers: Optional[List[ProbeHttpGetHeaders]] = Field(default=None, description="Headers to set in the request.", alias="httpHeaders")
    path: Optional[StrictStr] = Field(default=None, description="Path to access on the HTTP request.")
    port: StrictInt = Field(description="Port to access for probe.")
    scheme: Optional[StrictStr] = Field(default=None, description="Scheme for the http probe. Can be Http or Https.")
    __properties: ClassVar[List[str]] = ["host", "httpHeaders", "path", "port", "scheme"]

    @field_validator('scheme')
    def scheme_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['http', 'https']):
            raise ValueError("must be one of enum values ('http', 'https')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProbeHttpGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in http_headers (list)
        _items = []
        if self.http_headers:
            for _item_http_headers in self.http_headers:
                if _item_http_headers:
                    _items.append(_item_http_headers.to_dict())
            _dict['httpHeaders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProbeHttpGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "host": obj.get("host"),
            "httpHeaders": [ProbeHttpGetHeaders.from_dict(_item) for _item in obj["httpHeaders"]] if obj.get("httpHeaders") is not None else None,
            "path": obj.get("path"),
            "port": obj.get("port"),
            "scheme": obj.get("scheme")
        })
        return _obj



# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.replica_role import ReplicaRole
from openapi_client.models.replicator_queue_status import ReplicatorQueueStatus
from openapi_client.models.replicator_status import ReplicatorStatus
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.secondary_active_replicator_status import SecondaryActiveReplicatorStatus
    from openapi_client.models.secondary_idle_replicator_status import SecondaryIdleReplicatorStatus

class SecondaryReplicatorStatus(ReplicatorStatus):
    """
    Provides statistics about the Service Fabric Replicator, when it is functioning in a ActiveSecondary role.
    """ # noqa: E501
    copy_queue_status: Optional[ReplicatorQueueStatus] = Field(default=None, alias="CopyQueueStatus")
    is_in_build: Optional[StrictBool] = Field(default=None, description="Value that indicates whether the replica is currently being built.", alias="IsInBuild")
    last_acknowledgement_sent_time_utc: Optional[datetime] = Field(default=None, description="The last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator. UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.", alias="LastAcknowledgementSentTimeUtc")
    last_copy_operation_received_time_utc: Optional[datetime] = Field(default=None, description="The last time-stamp (UTC) at which a copy operation was received from the primary. UTC 0 represents an invalid value, indicating that a copy operation message was never received.", alias="LastCopyOperationReceivedTimeUtc")
    last_replication_operation_received_time_utc: Optional[datetime] = Field(default=None, description="The last time-stamp (UTC) at which a replication operation was received from the primary. UTC 0 represents an invalid value, indicating that a replication operation message was never received.", alias="LastReplicationOperationReceivedTimeUtc")
    replication_queue_status: Optional[ReplicatorQueueStatus] = Field(default=None, alias="ReplicationQueueStatus")
    __properties: ClassVar[List[str]] = ["Kind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'SecondaryActiveReplicatorStatus': 'SecondaryActiveReplicatorStatus','SecondaryIdleReplicatorStatus': 'SecondaryIdleReplicatorStatus'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[SecondaryActiveReplicatorStatus, SecondaryIdleReplicatorStatus]]:
        """Create an instance of SecondaryReplicatorStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[SecondaryActiveReplicatorStatus, SecondaryIdleReplicatorStatus]]:
        """Create an instance of SecondaryReplicatorStatus from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'SecondaryActiveReplicatorStatus':
            return import_module("openapi_client.models.secondary_active_replicator_status").SecondaryActiveReplicatorStatus.from_dict(obj)
        if object_type ==  'SecondaryIdleReplicatorStatus':
            return import_module("openapi_client.models.secondary_idle_replicator_status").SecondaryIdleReplicatorStatus.from_dict(obj)

        raise ValueError("SecondaryReplicatorStatus failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



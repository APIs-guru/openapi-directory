# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_evaluation import HealthEvaluation
from openapi_client.models.health_evaluation_kind import HealthEvaluationKind
from openapi_client.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_client.models.health_state import HealthState
from typing import Optional, Set
from typing_extensions import Self

class UpgradeDomainNodesHealthEvaluation(HealthEvaluation):
    """
    Represents health evaluation for cluster nodes in an upgrade domain, containing health evaluations for each unhealthy node that impacted current aggregated health state. Can be returned when evaluating cluster health during cluster upgrade and the aggregated health state is either Error or Warning.
    """ # noqa: E501
    max_percent_unhealthy_nodes: Optional[StrictInt] = Field(default=None, description="Maximum allowed percentage of unhealthy nodes from the ClusterHealthPolicy.", alias="MaxPercentUnhealthyNodes")
    total_count: Optional[StrictInt] = Field(default=None, description="Total number of nodes in the current upgrade domain.", alias="TotalCount")
    unhealthy_evaluations: Optional[List[HealthEvaluationWrapper]] = Field(default=None, description="List of health evaluations that resulted in the current aggregated health state.", alias="UnhealthyEvaluations")
    upgrade_domain_name: Optional[StrictStr] = Field(default=None, description="Name of the upgrade domain where nodes health is currently evaluated.", alias="UpgradeDomainName")
    __properties: ClassVar[List[str]] = ["AggregatedHealthState", "Description", "Kind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeDomainNodesHealthEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeDomainNodesHealthEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AggregatedHealthState": obj.get("AggregatedHealthState"),
            "Description": obj.get("Description"),
            "Kind": obj.get("Kind")
        })
        return _obj



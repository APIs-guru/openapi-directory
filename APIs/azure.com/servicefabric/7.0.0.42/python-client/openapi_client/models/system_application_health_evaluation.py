# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_evaluation import HealthEvaluation
from openapi_client.models.health_evaluation_kind import HealthEvaluationKind
from openapi_client.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_client.models.health_state import HealthState
from typing import Optional, Set
from typing_extensions import Self

class SystemApplicationHealthEvaluation(HealthEvaluation):
    """
    Represents health evaluation for the fabric:/System application, containing information about the data and the algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state of the cluster is either Error or Warning.
    """ # noqa: E501
    unhealthy_evaluations: Optional[List[HealthEvaluationWrapper]] = Field(default=None, description="List of health evaluations that resulted in the current aggregated health state.", alias="UnhealthyEvaluations")
    __properties: ClassVar[List[str]] = ["AggregatedHealthState", "Description", "Kind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemApplicationHealthEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemApplicationHealthEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AggregatedHealthState": obj.get("AggregatedHealthState"),
            "Description": obj.get("Description"),
            "Kind": obj.get("Kind")
        })
        return _obj



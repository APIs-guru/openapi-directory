# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 7.0.0.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.fabric_event_kind import FabricEventKind
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.application_container_instance_exited_event import ApplicationContainerInstanceExitedEvent
    from openapi_client.models.application_created_event import ApplicationCreatedEvent
    from openapi_client.models.application_deleted_event import ApplicationDeletedEvent
    from openapi_client.models.application_event import ApplicationEvent
    from openapi_client.models.application_health_report_expired_event import ApplicationHealthReportExpiredEvent
    from openapi_client.models.application_new_health_report_event import ApplicationNewHealthReportEvent
    from openapi_client.models.application_process_exited_event import ApplicationProcessExitedEvent
    from openapi_client.models.application_upgrade_completed_event import ApplicationUpgradeCompletedEvent
    from openapi_client.models.application_upgrade_domain_completed_event import ApplicationUpgradeDomainCompletedEvent
    from openapi_client.models.application_upgrade_rollback_completed_event import ApplicationUpgradeRollbackCompletedEvent
    from openapi_client.models.application_upgrade_rollback_started_event import ApplicationUpgradeRollbackStartedEvent
    from openapi_client.models.application_upgrade_started_event import ApplicationUpgradeStartedEvent
    from openapi_client.models.chaos_code_package_restart_scheduled_event import ChaosCodePackageRestartScheduledEvent
    from openapi_client.models.chaos_node_restart_scheduled_event import ChaosNodeRestartScheduledEvent
    from openapi_client.models.chaos_partition_primary_move_scheduled_event import ChaosPartitionPrimaryMoveScheduledEvent
    from openapi_client.models.chaos_partition_secondary_move_scheduled_event import ChaosPartitionSecondaryMoveScheduledEvent
    from openapi_client.models.chaos_replica_removal_scheduled_event import ChaosReplicaRemovalScheduledEvent
    from openapi_client.models.chaos_replica_restart_scheduled_event import ChaosReplicaRestartScheduledEvent
    from openapi_client.models.chaos_started_event import ChaosStartedEvent
    from openapi_client.models.chaos_stopped_event import ChaosStoppedEvent
    from openapi_client.models.cluster_event import ClusterEvent
    from openapi_client.models.cluster_health_report_expired_event import ClusterHealthReportExpiredEvent
    from openapi_client.models.cluster_new_health_report_event import ClusterNewHealthReportEvent
    from openapi_client.models.cluster_upgrade_completed_event import ClusterUpgradeCompletedEvent
    from openapi_client.models.cluster_upgrade_domain_completed_event import ClusterUpgradeDomainCompletedEvent
    from openapi_client.models.cluster_upgrade_rollback_completed_event import ClusterUpgradeRollbackCompletedEvent
    from openapi_client.models.cluster_upgrade_rollback_started_event import ClusterUpgradeRollbackStartedEvent
    from openapi_client.models.cluster_upgrade_started_event import ClusterUpgradeStartedEvent
    from openapi_client.models.container_instance_event import ContainerInstanceEvent
    from openapi_client.models.deployed_application_health_report_expired_event import DeployedApplicationHealthReportExpiredEvent
    from openapi_client.models.deployed_application_new_health_report_event import DeployedApplicationNewHealthReportEvent
    from openapi_client.models.deployed_service_package_health_report_expired_event import DeployedServicePackageHealthReportExpiredEvent
    from openapi_client.models.deployed_service_package_new_health_report_event import DeployedServicePackageNewHealthReportEvent
    from openapi_client.models.node_aborted_event import NodeAbortedEvent
    from openapi_client.models.node_added_to_cluster_event import NodeAddedToClusterEvent
    from openapi_client.models.node_closed_event import NodeClosedEvent
    from openapi_client.models.node_deactivate_completed_event import NodeDeactivateCompletedEvent
    from openapi_client.models.node_deactivate_started_event import NodeDeactivateStartedEvent
    from openapi_client.models.node_down_event import NodeDownEvent
    from openapi_client.models.node_event import NodeEvent
    from openapi_client.models.node_health_report_expired_event import NodeHealthReportExpiredEvent
    from openapi_client.models.node_new_health_report_event import NodeNewHealthReportEvent
    from openapi_client.models.node_open_failed_event import NodeOpenFailedEvent
    from openapi_client.models.node_open_succeeded_event import NodeOpenSucceededEvent
    from openapi_client.models.node_removed_from_cluster_event import NodeRemovedFromClusterEvent
    from openapi_client.models.node_up_event import NodeUpEvent
    from openapi_client.models.partition_analysis_event import PartitionAnalysisEvent
    from openapi_client.models.partition_event import PartitionEvent
    from openapi_client.models.partition_health_report_expired_event import PartitionHealthReportExpiredEvent
    from openapi_client.models.partition_new_health_report_event import PartitionNewHealthReportEvent
    from openapi_client.models.partition_primary_move_analysis_event import PartitionPrimaryMoveAnalysisEvent
    from openapi_client.models.partition_reconfigured_event import PartitionReconfiguredEvent
    from openapi_client.models.replica_event import ReplicaEvent
    from openapi_client.models.service_created_event import ServiceCreatedEvent
    from openapi_client.models.service_deleted_event import ServiceDeletedEvent
    from openapi_client.models.service_event import ServiceEvent
    from openapi_client.models.service_health_report_expired_event import ServiceHealthReportExpiredEvent
    from openapi_client.models.service_new_health_report_event import ServiceNewHealthReportEvent
    from openapi_client.models.stateful_replica_health_report_expired_event import StatefulReplicaHealthReportExpiredEvent
    from openapi_client.models.stateful_replica_new_health_report_event import StatefulReplicaNewHealthReportEvent
    from openapi_client.models.stateless_replica_health_report_expired_event import StatelessReplicaHealthReportExpiredEvent
    from openapi_client.models.stateless_replica_new_health_report_event import StatelessReplicaNewHealthReportEvent

class FabricEvent(BaseModel):
    """
    Represents the base for all Fabric Events.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The category of event.", alias="Category")
    event_instance_id: StrictStr = Field(description="The identifier for the FabricEvent instance.", alias="EventInstanceId")
    has_correlated_events: Optional[StrictBool] = Field(default=None, description="Shows there is existing related events available.", alias="HasCorrelatedEvents")
    kind: FabricEventKind = Field(alias="Kind")
    time_stamp: datetime = Field(description="The time event was logged.", alias="TimeStamp")
    __properties: ClassVar[List[str]] = ["Category", "EventInstanceId", "HasCorrelatedEvents", "Kind", "TimeStamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Kind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ApplicationContainerInstanceExitedEvent': 'ApplicationContainerInstanceExitedEvent','ApplicationCreatedEvent': 'ApplicationCreatedEvent','ApplicationDeletedEvent': 'ApplicationDeletedEvent','ApplicationEvent': 'ApplicationEvent','ApplicationHealthReportExpiredEvent': 'ApplicationHealthReportExpiredEvent','ApplicationNewHealthReportEvent': 'ApplicationNewHealthReportEvent','ApplicationProcessExitedEvent': 'ApplicationProcessExitedEvent','ApplicationUpgradeCompletedEvent': 'ApplicationUpgradeCompletedEvent','ApplicationUpgradeDomainCompletedEvent': 'ApplicationUpgradeDomainCompletedEvent','ApplicationUpgradeRollbackCompletedEvent': 'ApplicationUpgradeRollbackCompletedEvent','ApplicationUpgradeRollbackStartedEvent': 'ApplicationUpgradeRollbackStartedEvent','ApplicationUpgradeStartedEvent': 'ApplicationUpgradeStartedEvent','ChaosCodePackageRestartScheduledEvent': 'ChaosCodePackageRestartScheduledEvent','ChaosNodeRestartScheduledEvent': 'ChaosNodeRestartScheduledEvent','ChaosPartitionPrimaryMoveScheduledEvent': 'ChaosPartitionPrimaryMoveScheduledEvent','ChaosPartitionSecondaryMoveScheduledEvent': 'ChaosPartitionSecondaryMoveScheduledEvent','ChaosReplicaRemovalScheduledEvent': 'ChaosReplicaRemovalScheduledEvent','ChaosReplicaRestartScheduledEvent': 'ChaosReplicaRestartScheduledEvent','ChaosStartedEvent': 'ChaosStartedEvent','ChaosStoppedEvent': 'ChaosStoppedEvent','ClusterEvent': 'ClusterEvent','ClusterHealthReportExpiredEvent': 'ClusterHealthReportExpiredEvent','ClusterNewHealthReportEvent': 'ClusterNewHealthReportEvent','ClusterUpgradeCompletedEvent': 'ClusterUpgradeCompletedEvent','ClusterUpgradeDomainCompletedEvent': 'ClusterUpgradeDomainCompletedEvent','ClusterUpgradeRollbackCompletedEvent': 'ClusterUpgradeRollbackCompletedEvent','ClusterUpgradeRollbackStartedEvent': 'ClusterUpgradeRollbackStartedEvent','ClusterUpgradeStartedEvent': 'ClusterUpgradeStartedEvent','ContainerInstanceEvent': 'ContainerInstanceEvent','DeployedApplicationHealthReportExpiredEvent': 'DeployedApplicationHealthReportExpiredEvent','DeployedApplicationNewHealthReportEvent': 'DeployedApplicationNewHealthReportEvent','DeployedServicePackageHealthReportExpiredEvent': 'DeployedServicePackageHealthReportExpiredEvent','DeployedServicePackageNewHealthReportEvent': 'DeployedServicePackageNewHealthReportEvent','NodeAbortedEvent': 'NodeAbortedEvent','NodeAddedToClusterEvent': 'NodeAddedToClusterEvent','NodeClosedEvent': 'NodeClosedEvent','NodeDeactivateCompletedEvent': 'NodeDeactivateCompletedEvent','NodeDeactivateStartedEvent': 'NodeDeactivateStartedEvent','NodeDownEvent': 'NodeDownEvent','NodeEvent': 'NodeEvent','NodeHealthReportExpiredEvent': 'NodeHealthReportExpiredEvent','NodeNewHealthReportEvent': 'NodeNewHealthReportEvent','NodeOpenFailedEvent': 'NodeOpenFailedEvent','NodeOpenSucceededEvent': 'NodeOpenSucceededEvent','NodeRemovedFromClusterEvent': 'NodeRemovedFromClusterEvent','NodeUpEvent': 'NodeUpEvent','PartitionAnalysisEvent': 'PartitionAnalysisEvent','PartitionEvent': 'PartitionEvent','PartitionHealthReportExpiredEvent': 'PartitionHealthReportExpiredEvent','PartitionNewHealthReportEvent': 'PartitionNewHealthReportEvent','PartitionPrimaryMoveAnalysisEvent': 'PartitionPrimaryMoveAnalysisEvent','PartitionReconfiguredEvent': 'PartitionReconfiguredEvent','ReplicaEvent': 'ReplicaEvent','ServiceCreatedEvent': 'ServiceCreatedEvent','ServiceDeletedEvent': 'ServiceDeletedEvent','ServiceEvent': 'ServiceEvent','ServiceHealthReportExpiredEvent': 'ServiceHealthReportExpiredEvent','ServiceNewHealthReportEvent': 'ServiceNewHealthReportEvent','StatefulReplicaHealthReportExpiredEvent': 'StatefulReplicaHealthReportExpiredEvent','StatefulReplicaNewHealthReportEvent': 'StatefulReplicaNewHealthReportEvent','StatelessReplicaHealthReportExpiredEvent': 'StatelessReplicaHealthReportExpiredEvent','StatelessReplicaNewHealthReportEvent': 'StatelessReplicaNewHealthReportEvent'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ApplicationContainerInstanceExitedEvent, ApplicationCreatedEvent, ApplicationDeletedEvent, ApplicationEvent, ApplicationHealthReportExpiredEvent, ApplicationNewHealthReportEvent, ApplicationProcessExitedEvent, ApplicationUpgradeCompletedEvent, ApplicationUpgradeDomainCompletedEvent, ApplicationUpgradeRollbackCompletedEvent, ApplicationUpgradeRollbackStartedEvent, ApplicationUpgradeStartedEvent, ChaosCodePackageRestartScheduledEvent, ChaosNodeRestartScheduledEvent, ChaosPartitionPrimaryMoveScheduledEvent, ChaosPartitionSecondaryMoveScheduledEvent, ChaosReplicaRemovalScheduledEvent, ChaosReplicaRestartScheduledEvent, ChaosStartedEvent, ChaosStoppedEvent, ClusterEvent, ClusterHealthReportExpiredEvent, ClusterNewHealthReportEvent, ClusterUpgradeCompletedEvent, ClusterUpgradeDomainCompletedEvent, ClusterUpgradeRollbackCompletedEvent, ClusterUpgradeRollbackStartedEvent, ClusterUpgradeStartedEvent, ContainerInstanceEvent, DeployedApplicationHealthReportExpiredEvent, DeployedApplicationNewHealthReportEvent, DeployedServicePackageHealthReportExpiredEvent, DeployedServicePackageNewHealthReportEvent, NodeAbortedEvent, NodeAddedToClusterEvent, NodeClosedEvent, NodeDeactivateCompletedEvent, NodeDeactivateStartedEvent, NodeDownEvent, NodeEvent, NodeHealthReportExpiredEvent, NodeNewHealthReportEvent, NodeOpenFailedEvent, NodeOpenSucceededEvent, NodeRemovedFromClusterEvent, NodeUpEvent, PartitionAnalysisEvent, PartitionEvent, PartitionHealthReportExpiredEvent, PartitionNewHealthReportEvent, PartitionPrimaryMoveAnalysisEvent, PartitionReconfiguredEvent, ReplicaEvent, ServiceCreatedEvent, ServiceDeletedEvent, ServiceEvent, ServiceHealthReportExpiredEvent, ServiceNewHealthReportEvent, StatefulReplicaHealthReportExpiredEvent, StatefulReplicaNewHealthReportEvent, StatelessReplicaHealthReportExpiredEvent, StatelessReplicaNewHealthReportEvent]]:
        """Create an instance of FabricEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ApplicationContainerInstanceExitedEvent, ApplicationCreatedEvent, ApplicationDeletedEvent, ApplicationEvent, ApplicationHealthReportExpiredEvent, ApplicationNewHealthReportEvent, ApplicationProcessExitedEvent, ApplicationUpgradeCompletedEvent, ApplicationUpgradeDomainCompletedEvent, ApplicationUpgradeRollbackCompletedEvent, ApplicationUpgradeRollbackStartedEvent, ApplicationUpgradeStartedEvent, ChaosCodePackageRestartScheduledEvent, ChaosNodeRestartScheduledEvent, ChaosPartitionPrimaryMoveScheduledEvent, ChaosPartitionSecondaryMoveScheduledEvent, ChaosReplicaRemovalScheduledEvent, ChaosReplicaRestartScheduledEvent, ChaosStartedEvent, ChaosStoppedEvent, ClusterEvent, ClusterHealthReportExpiredEvent, ClusterNewHealthReportEvent, ClusterUpgradeCompletedEvent, ClusterUpgradeDomainCompletedEvent, ClusterUpgradeRollbackCompletedEvent, ClusterUpgradeRollbackStartedEvent, ClusterUpgradeStartedEvent, ContainerInstanceEvent, DeployedApplicationHealthReportExpiredEvent, DeployedApplicationNewHealthReportEvent, DeployedServicePackageHealthReportExpiredEvent, DeployedServicePackageNewHealthReportEvent, NodeAbortedEvent, NodeAddedToClusterEvent, NodeClosedEvent, NodeDeactivateCompletedEvent, NodeDeactivateStartedEvent, NodeDownEvent, NodeEvent, NodeHealthReportExpiredEvent, NodeNewHealthReportEvent, NodeOpenFailedEvent, NodeOpenSucceededEvent, NodeRemovedFromClusterEvent, NodeUpEvent, PartitionAnalysisEvent, PartitionEvent, PartitionHealthReportExpiredEvent, PartitionNewHealthReportEvent, PartitionPrimaryMoveAnalysisEvent, PartitionReconfiguredEvent, ReplicaEvent, ServiceCreatedEvent, ServiceDeletedEvent, ServiceEvent, ServiceHealthReportExpiredEvent, ServiceNewHealthReportEvent, StatefulReplicaHealthReportExpiredEvent, StatefulReplicaNewHealthReportEvent, StatelessReplicaHealthReportExpiredEvent, StatelessReplicaNewHealthReportEvent]]:
        """Create an instance of FabricEvent from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ApplicationContainerInstanceExitedEvent':
            return import_module("openapi_client.models.application_container_instance_exited_event").ApplicationContainerInstanceExitedEvent.from_dict(obj)
        if object_type ==  'ApplicationCreatedEvent':
            return import_module("openapi_client.models.application_created_event").ApplicationCreatedEvent.from_dict(obj)
        if object_type ==  'ApplicationDeletedEvent':
            return import_module("openapi_client.models.application_deleted_event").ApplicationDeletedEvent.from_dict(obj)
        if object_type ==  'ApplicationEvent':
            return import_module("openapi_client.models.application_event").ApplicationEvent.from_dict(obj)
        if object_type ==  'ApplicationHealthReportExpiredEvent':
            return import_module("openapi_client.models.application_health_report_expired_event").ApplicationHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'ApplicationNewHealthReportEvent':
            return import_module("openapi_client.models.application_new_health_report_event").ApplicationNewHealthReportEvent.from_dict(obj)
        if object_type ==  'ApplicationProcessExitedEvent':
            return import_module("openapi_client.models.application_process_exited_event").ApplicationProcessExitedEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeCompletedEvent':
            return import_module("openapi_client.models.application_upgrade_completed_event").ApplicationUpgradeCompletedEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeDomainCompletedEvent':
            return import_module("openapi_client.models.application_upgrade_domain_completed_event").ApplicationUpgradeDomainCompletedEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeRollbackCompletedEvent':
            return import_module("openapi_client.models.application_upgrade_rollback_completed_event").ApplicationUpgradeRollbackCompletedEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeRollbackStartedEvent':
            return import_module("openapi_client.models.application_upgrade_rollback_started_event").ApplicationUpgradeRollbackStartedEvent.from_dict(obj)
        if object_type ==  'ApplicationUpgradeStartedEvent':
            return import_module("openapi_client.models.application_upgrade_started_event").ApplicationUpgradeStartedEvent.from_dict(obj)
        if object_type ==  'ChaosCodePackageRestartScheduledEvent':
            return import_module("openapi_client.models.chaos_code_package_restart_scheduled_event").ChaosCodePackageRestartScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosNodeRestartScheduledEvent':
            return import_module("openapi_client.models.chaos_node_restart_scheduled_event").ChaosNodeRestartScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosPartitionPrimaryMoveScheduledEvent':
            return import_module("openapi_client.models.chaos_partition_primary_move_scheduled_event").ChaosPartitionPrimaryMoveScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosPartitionSecondaryMoveScheduledEvent':
            return import_module("openapi_client.models.chaos_partition_secondary_move_scheduled_event").ChaosPartitionSecondaryMoveScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosReplicaRemovalScheduledEvent':
            return import_module("openapi_client.models.chaos_replica_removal_scheduled_event").ChaosReplicaRemovalScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosReplicaRestartScheduledEvent':
            return import_module("openapi_client.models.chaos_replica_restart_scheduled_event").ChaosReplicaRestartScheduledEvent.from_dict(obj)
        if object_type ==  'ChaosStartedEvent':
            return import_module("openapi_client.models.chaos_started_event").ChaosStartedEvent.from_dict(obj)
        if object_type ==  'ChaosStoppedEvent':
            return import_module("openapi_client.models.chaos_stopped_event").ChaosStoppedEvent.from_dict(obj)
        if object_type ==  'ClusterEvent':
            return import_module("openapi_client.models.cluster_event").ClusterEvent.from_dict(obj)
        if object_type ==  'ClusterHealthReportExpiredEvent':
            return import_module("openapi_client.models.cluster_health_report_expired_event").ClusterHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'ClusterNewHealthReportEvent':
            return import_module("openapi_client.models.cluster_new_health_report_event").ClusterNewHealthReportEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeCompletedEvent':
            return import_module("openapi_client.models.cluster_upgrade_completed_event").ClusterUpgradeCompletedEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeDomainCompletedEvent':
            return import_module("openapi_client.models.cluster_upgrade_domain_completed_event").ClusterUpgradeDomainCompletedEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeRollbackCompletedEvent':
            return import_module("openapi_client.models.cluster_upgrade_rollback_completed_event").ClusterUpgradeRollbackCompletedEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeRollbackStartedEvent':
            return import_module("openapi_client.models.cluster_upgrade_rollback_started_event").ClusterUpgradeRollbackStartedEvent.from_dict(obj)
        if object_type ==  'ClusterUpgradeStartedEvent':
            return import_module("openapi_client.models.cluster_upgrade_started_event").ClusterUpgradeStartedEvent.from_dict(obj)
        if object_type ==  'ContainerInstanceEvent':
            return import_module("openapi_client.models.container_instance_event").ContainerInstanceEvent.from_dict(obj)
        if object_type ==  'DeployedApplicationHealthReportExpiredEvent':
            return import_module("openapi_client.models.deployed_application_health_report_expired_event").DeployedApplicationHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'DeployedApplicationNewHealthReportEvent':
            return import_module("openapi_client.models.deployed_application_new_health_report_event").DeployedApplicationNewHealthReportEvent.from_dict(obj)
        if object_type ==  'DeployedServicePackageHealthReportExpiredEvent':
            return import_module("openapi_client.models.deployed_service_package_health_report_expired_event").DeployedServicePackageHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'DeployedServicePackageNewHealthReportEvent':
            return import_module("openapi_client.models.deployed_service_package_new_health_report_event").DeployedServicePackageNewHealthReportEvent.from_dict(obj)
        if object_type ==  'NodeAbortedEvent':
            return import_module("openapi_client.models.node_aborted_event").NodeAbortedEvent.from_dict(obj)
        if object_type ==  'NodeAddedToClusterEvent':
            return import_module("openapi_client.models.node_added_to_cluster_event").NodeAddedToClusterEvent.from_dict(obj)
        if object_type ==  'NodeClosedEvent':
            return import_module("openapi_client.models.node_closed_event").NodeClosedEvent.from_dict(obj)
        if object_type ==  'NodeDeactivateCompletedEvent':
            return import_module("openapi_client.models.node_deactivate_completed_event").NodeDeactivateCompletedEvent.from_dict(obj)
        if object_type ==  'NodeDeactivateStartedEvent':
            return import_module("openapi_client.models.node_deactivate_started_event").NodeDeactivateStartedEvent.from_dict(obj)
        if object_type ==  'NodeDownEvent':
            return import_module("openapi_client.models.node_down_event").NodeDownEvent.from_dict(obj)
        if object_type ==  'NodeEvent':
            return import_module("openapi_client.models.node_event").NodeEvent.from_dict(obj)
        if object_type ==  'NodeHealthReportExpiredEvent':
            return import_module("openapi_client.models.node_health_report_expired_event").NodeHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'NodeNewHealthReportEvent':
            return import_module("openapi_client.models.node_new_health_report_event").NodeNewHealthReportEvent.from_dict(obj)
        if object_type ==  'NodeOpenFailedEvent':
            return import_module("openapi_client.models.node_open_failed_event").NodeOpenFailedEvent.from_dict(obj)
        if object_type ==  'NodeOpenSucceededEvent':
            return import_module("openapi_client.models.node_open_succeeded_event").NodeOpenSucceededEvent.from_dict(obj)
        if object_type ==  'NodeRemovedFromClusterEvent':
            return import_module("openapi_client.models.node_removed_from_cluster_event").NodeRemovedFromClusterEvent.from_dict(obj)
        if object_type ==  'NodeUpEvent':
            return import_module("openapi_client.models.node_up_event").NodeUpEvent.from_dict(obj)
        if object_type ==  'PartitionAnalysisEvent':
            return import_module("openapi_client.models.partition_analysis_event").PartitionAnalysisEvent.from_dict(obj)
        if object_type ==  'PartitionEvent':
            return import_module("openapi_client.models.partition_event").PartitionEvent.from_dict(obj)
        if object_type ==  'PartitionHealthReportExpiredEvent':
            return import_module("openapi_client.models.partition_health_report_expired_event").PartitionHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'PartitionNewHealthReportEvent':
            return import_module("openapi_client.models.partition_new_health_report_event").PartitionNewHealthReportEvent.from_dict(obj)
        if object_type ==  'PartitionPrimaryMoveAnalysisEvent':
            return import_module("openapi_client.models.partition_primary_move_analysis_event").PartitionPrimaryMoveAnalysisEvent.from_dict(obj)
        if object_type ==  'PartitionReconfiguredEvent':
            return import_module("openapi_client.models.partition_reconfigured_event").PartitionReconfiguredEvent.from_dict(obj)
        if object_type ==  'ReplicaEvent':
            return import_module("openapi_client.models.replica_event").ReplicaEvent.from_dict(obj)
        if object_type ==  'ServiceCreatedEvent':
            return import_module("openapi_client.models.service_created_event").ServiceCreatedEvent.from_dict(obj)
        if object_type ==  'ServiceDeletedEvent':
            return import_module("openapi_client.models.service_deleted_event").ServiceDeletedEvent.from_dict(obj)
        if object_type ==  'ServiceEvent':
            return import_module("openapi_client.models.service_event").ServiceEvent.from_dict(obj)
        if object_type ==  'ServiceHealthReportExpiredEvent':
            return import_module("openapi_client.models.service_health_report_expired_event").ServiceHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'ServiceNewHealthReportEvent':
            return import_module("openapi_client.models.service_new_health_report_event").ServiceNewHealthReportEvent.from_dict(obj)
        if object_type ==  'StatefulReplicaHealthReportExpiredEvent':
            return import_module("openapi_client.models.stateful_replica_health_report_expired_event").StatefulReplicaHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'StatefulReplicaNewHealthReportEvent':
            return import_module("openapi_client.models.stateful_replica_new_health_report_event").StatefulReplicaNewHealthReportEvent.from_dict(obj)
        if object_type ==  'StatelessReplicaHealthReportExpiredEvent':
            return import_module("openapi_client.models.stateless_replica_health_report_expired_event").StatelessReplicaHealthReportExpiredEvent.from_dict(obj)
        if object_type ==  'StatelessReplicaNewHealthReportEvent':
            return import_module("openapi_client.models.stateless_replica_new_health_report_event").StatelessReplicaNewHealthReportEvent.from_dict(obj)

        raise ValueError("FabricEvent failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



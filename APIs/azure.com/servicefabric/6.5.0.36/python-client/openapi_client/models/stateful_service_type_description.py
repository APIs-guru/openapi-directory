# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.5.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_client.models.service_placement_policy_description import ServicePlacementPolicyDescription
from openapi_client.models.service_type_description import ServiceTypeDescription
from openapi_client.models.service_type_extension_description import ServiceTypeExtensionDescription
from typing import Optional, Set
from typing_extensions import Self

class StatefulServiceTypeDescription(ServiceTypeDescription):
    """
    Describes a stateful service type defined in the service manifest of a provisioned application type.
    """ # noqa: E501
    has_persisted_state: Optional[StrictBool] = Field(default=None, description="A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.", alias="HasPersistedState")
    __properties: ClassVar[List[str]] = ["Extensions", "IsStateful", "Kind", "LoadMetrics", "PlacementConstraints", "ServicePlacementPolicies", "ServiceTypeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatefulServiceTypeDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item_extensions in self.extensions:
                if _item_extensions:
                    _items.append(_item_extensions.to_dict())
            _dict['Extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_metrics (list)
        _items = []
        if self.load_metrics:
            for _item_load_metrics in self.load_metrics:
                if _item_load_metrics:
                    _items.append(_item_load_metrics.to_dict())
            _dict['LoadMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_placement_policies (list)
        _items = []
        if self.service_placement_policies:
            for _item_service_placement_policies in self.service_placement_policies:
                if _item_service_placement_policies:
                    _items.append(_item_service_placement_policies.to_dict())
            _dict['ServicePlacementPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatefulServiceTypeDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Extensions": [ServiceTypeExtensionDescription.from_dict(_item) for _item in obj["Extensions"]] if obj.get("Extensions") is not None else None,
            "IsStateful": obj.get("IsStateful"),
            "Kind": obj.get("Kind"),
            "LoadMetrics": [ServiceLoadMetricDescription.from_dict(_item) for _item in obj["LoadMetrics"]] if obj.get("LoadMetrics") is not None else None,
            "PlacementConstraints": obj.get("PlacementConstraints"),
            "ServicePlacementPolicies": [ServicePlacementPolicyDescription.from_dict(_item) for _item in obj["ServicePlacementPolicies"]] if obj.get("ServicePlacementPolicies") is not None else None,
            "ServiceTypeName": obj.get("ServiceTypeName")
        })
        return _obj



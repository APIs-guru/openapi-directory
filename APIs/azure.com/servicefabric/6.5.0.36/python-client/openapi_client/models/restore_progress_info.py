# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.5.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.epoch import Epoch
from openapi_client.models.fabric_error_error import FabricErrorError
from openapi_client.models.restore_state import RestoreState
from typing import Optional, Set
from typing_extensions import Self

class RestoreProgressInfo(BaseModel):
    """
    Describes the progress of a restore operation on a partition.
    """ # noqa: E501
    failure_error: Optional[FabricErrorError] = Field(default=None, alias="FailureError")
    restore_state: Optional[RestoreState] = Field(default=None, alias="RestoreState")
    restored_epoch: Optional[Epoch] = Field(default=None, alias="RestoredEpoch")
    restored_lsn: Optional[StrictStr] = Field(default=None, description="Restored LSN.", alias="RestoredLsn")
    time_stamp_utc: Optional[datetime] = Field(default=None, description="Timestamp when operation succeeded or failed.", alias="TimeStampUtc")
    __properties: ClassVar[List[str]] = ["FailureError", "RestoreState", "RestoredEpoch", "RestoredLsn", "TimeStampUtc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestoreProgressInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failure_error
        if self.failure_error:
            _dict['FailureError'] = self.failure_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restored_epoch
        if self.restored_epoch:
            _dict['RestoredEpoch'] = self.restored_epoch.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestoreProgressInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FailureError": FabricErrorError.from_dict(obj["FailureError"]) if obj.get("FailureError") is not None else None,
            "RestoreState": obj.get("RestoreState"),
            "RestoredEpoch": Epoch.from_dict(obj["RestoredEpoch"]) if obj.get("RestoredEpoch") is not None else None,
            "RestoredLsn": obj.get("RestoredLsn"),
            "TimeStampUtc": obj.get("TimeStampUtc")
        })
        return _obj



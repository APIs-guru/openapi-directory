# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.5.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployed_application_health_state_filter import DeployedApplicationHealthStateFilter
from openapi_client.models.service_health_state_filter import ServiceHealthStateFilter
from typing import Optional, Set
from typing_extensions import Self

class ApplicationHealthStateFilter(BaseModel):
    """
    Defines matching criteria to determine whether a application should be included in the cluster health chunk. One filter can match zero, one or multiple applications, depending on its properties.
    """ # noqa: E501
    application_name_filter: Optional[StrictStr] = Field(default=None, description="The name of the application that matches the filter, as a fabric uri. The filter is applied only to the specified application, if it exists. If the application doesn't exist, no application is returned in the cluster health chunk based on this filter. If the application exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter.", alias="ApplicationNameFilter")
    application_type_name_filter: Optional[StrictStr] = Field(default=None, description="The name of the application type that matches the filter. If specified, the filter is applied only to applications of the selected application type, if any exists. If no applications of the specified application type exists, no application is returned in the cluster health chunk based on this filter. Each application of the specified application type is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter.", alias="ApplicationTypeNameFilter")
    deployed_application_filters: Optional[List[DeployedApplicationHealthStateFilter]] = Field(default=None, description="Defines a list of filters that specify which deployed applications to be included in the returned cluster health chunk as children of the application. The deployed applications are returned only if the parent application matches a filter. If the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple deployed application filters. For example, it can specify a filter to return all deployed applications with health state Error and another filter to always include a deployed application on a specified node.", alias="DeployedApplicationFilters")
    health_state_filter: Optional[StrictInt] = Field(default=None, description="The filter for the health state of the applications. It allows selecting applications if they match the desired health states. The possible values are integer value of one of the following health states. Only applications that match the filter are returned. All applications are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the application name or the application type name are specified. If the filter has default value and application name is specified, the matching application is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.", alias="HealthStateFilter")
    service_filters: Optional[List[ServiceHealthStateFilter]] = Field(default=None, description="Defines a list of filters that specify which services to be included in the returned cluster health chunk as children of the application. The services are returned only if the parent application matches a filter. If the list is empty, no services are returned. All the services are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple service filters. For example, it can specify a filter to return all services with health state Error and another filter to always include a service identified by its service name.", alias="ServiceFilters")
    __properties: ClassVar[List[str]] = ["ApplicationNameFilter", "ApplicationTypeNameFilter", "DeployedApplicationFilters", "HealthStateFilter", "ServiceFilters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationHealthStateFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployed_application_filters (list)
        _items = []
        if self.deployed_application_filters:
            for _item_deployed_application_filters in self.deployed_application_filters:
                if _item_deployed_application_filters:
                    _items.append(_item_deployed_application_filters.to_dict())
            _dict['DeployedApplicationFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_filters (list)
        _items = []
        if self.service_filters:
            for _item_service_filters in self.service_filters:
                if _item_service_filters:
                    _items.append(_item_service_filters.to_dict())
            _dict['ServiceFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationHealthStateFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationNameFilter": obj.get("ApplicationNameFilter"),
            "ApplicationTypeNameFilter": obj.get("ApplicationTypeNameFilter"),
            "DeployedApplicationFilters": [DeployedApplicationHealthStateFilter.from_dict(_item) for _item in obj["DeployedApplicationFilters"]] if obj.get("DeployedApplicationFilters") is not None else None,
            "HealthStateFilter": obj.get("HealthStateFilter"),
            "ServiceFilters": [ServiceHealthStateFilter.from_dict(_item) for _item in obj["ServiceFilters"]] if obj.get("ServiceFilters") is not None else None
        })
        return _obj



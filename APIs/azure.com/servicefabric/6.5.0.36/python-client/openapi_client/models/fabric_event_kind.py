# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.5.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class FabricEventKind(str, Enum):
    """
    The kind of FabricEvent.
    """

    """
    allowed enum values
    """
    CLUSTEREVENT = 'ClusterEvent'
    CONTAINERINSTANCEEVENT = 'ContainerInstanceEvent'
    NODEEVENT = 'NodeEvent'
    APPLICATIONEVENT = 'ApplicationEvent'
    SERVICEEVENT = 'ServiceEvent'
    PARTITIONEVENT = 'PartitionEvent'
    REPLICAEVENT = 'ReplicaEvent'
    PARTITIONANALYSISEVENT = 'PartitionAnalysisEvent'
    APPLICATIONCREATED = 'ApplicationCreated'
    APPLICATIONDELETED = 'ApplicationDeleted'
    APPLICATIONNEWHEALTHREPORT = 'ApplicationNewHealthReport'
    APPLICATIONHEALTHREPORTEXPIRED = 'ApplicationHealthReportExpired'
    APPLICATIONUPGRADECOMPLETED = 'ApplicationUpgradeCompleted'
    APPLICATIONUPGRADEDOMAINCOMPLETED = 'ApplicationUpgradeDomainCompleted'
    APPLICATIONUPGRADEROLLBACKCOMPLETED = 'ApplicationUpgradeRollbackCompleted'
    APPLICATIONUPGRADEROLLBACKSTARTED = 'ApplicationUpgradeRollbackStarted'
    APPLICATIONUPGRADESTARTED = 'ApplicationUpgradeStarted'
    DEPLOYEDAPPLICATIONNEWHEALTHREPORT = 'DeployedApplicationNewHealthReport'
    DEPLOYEDAPPLICATIONHEALTHREPORTEXPIRED = 'DeployedApplicationHealthReportExpired'
    APPLICATIONPROCESSEXITED = 'ApplicationProcessExited'
    APPLICATIONCONTAINERINSTANCEEXITED = 'ApplicationContainerInstanceExited'
    NODEABORTED = 'NodeAborted'
    NODEADDEDTOCLUSTER = 'NodeAddedToCluster'
    NODECLOSED = 'NodeClosed'
    NODEDEACTIVATECOMPLETED = 'NodeDeactivateCompleted'
    NODEDEACTIVATESTARTED = 'NodeDeactivateStarted'
    NODEDOWN = 'NodeDown'
    NODENEWHEALTHREPORT = 'NodeNewHealthReport'
    NODEHEALTHREPORTEXPIRED = 'NodeHealthReportExpired'
    NODEOPENSUCCEEDED = 'NodeOpenSucceeded'
    NODEOPENFAILED = 'NodeOpenFailed'
    NODEREMOVEDFROMCLUSTER = 'NodeRemovedFromCluster'
    NODEUP = 'NodeUp'
    PARTITIONNEWHEALTHREPORT = 'PartitionNewHealthReport'
    PARTITIONHEALTHREPORTEXPIRED = 'PartitionHealthReportExpired'
    PARTITIONRECONFIGURED = 'PartitionReconfigured'
    PARTITIONPRIMARYMOVEANALYSIS = 'PartitionPrimaryMoveAnalysis'
    SERVICECREATED = 'ServiceCreated'
    SERVICEDELETED = 'ServiceDeleted'
    SERVICENEWHEALTHREPORT = 'ServiceNewHealthReport'
    SERVICEHEALTHREPORTEXPIRED = 'ServiceHealthReportExpired'
    DEPLOYEDSERVICEPACKAGENEWHEALTHREPORT = 'DeployedServicePackageNewHealthReport'
    DEPLOYEDSERVICEPACKAGEHEALTHREPORTEXPIRED = 'DeployedServicePackageHealthReportExpired'
    STATEFULREPLICANEWHEALTHREPORT = 'StatefulReplicaNewHealthReport'
    STATEFULREPLICAHEALTHREPORTEXPIRED = 'StatefulReplicaHealthReportExpired'
    STATELESSREPLICANEWHEALTHREPORT = 'StatelessReplicaNewHealthReport'
    STATELESSREPLICAHEALTHREPORTEXPIRED = 'StatelessReplicaHealthReportExpired'
    CLUSTERNEWHEALTHREPORT = 'ClusterNewHealthReport'
    CLUSTERHEALTHREPORTEXPIRED = 'ClusterHealthReportExpired'
    CLUSTERUPGRADECOMPLETED = 'ClusterUpgradeCompleted'
    CLUSTERUPGRADEDOMAINCOMPLETED = 'ClusterUpgradeDomainCompleted'
    CLUSTERUPGRADEROLLBACKCOMPLETED = 'ClusterUpgradeRollbackCompleted'
    CLUSTERUPGRADEROLLBACKSTARTED = 'ClusterUpgradeRollbackStarted'
    CLUSTERUPGRADESTARTED = 'ClusterUpgradeStarted'
    CHAOSSTOPPED = 'ChaosStopped'
    CHAOSSTARTED = 'ChaosStarted'
    CHAOSCODEPACKAGERESTARTSCHEDULED = 'ChaosCodePackageRestartScheduled'
    CHAOSREPLICAREMOVALSCHEDULED = 'ChaosReplicaRemovalScheduled'
    CHAOSPARTITIONSECONDARYMOVESCHEDULED = 'ChaosPartitionSecondaryMoveScheduled'
    CHAOSPARTITIONPRIMARYMOVESCHEDULED = 'ChaosPartitionPrimaryMoveScheduled'
    CHAOSREPLICARESTARTSCHEDULED = 'ChaosReplicaRestartScheduled'
    CHAOSNODERESTARTSCHEDULED = 'ChaosNodeRestartScheduled'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FabricEventKind from a JSON string"""
        return cls(json.loads(json_str))



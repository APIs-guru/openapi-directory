# coding: utf-8

"""
    Service Fabric Client APIs

    Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    The version of the OpenAPI document: 6.5.0.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.load_metric_report_info import LoadMetricReportInfo
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_operation_name import ServiceOperationName
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.deployed_stateful_service_replica_detail_info import DeployedStatefulServiceReplicaDetailInfo
    from openapi_client.models.deployed_stateless_service_instance_detail_info import DeployedStatelessServiceInstanceDetailInfo

class DeployedServiceReplicaDetailInfo(BaseModel):
    """
    Information about a Service Fabric service replica deployed on a node.
    """ # noqa: E501
    current_service_operation: Optional[ServiceOperationName] = Field(default=None, alias="CurrentServiceOperation")
    current_service_operation_start_time_utc: Optional[datetime] = Field(default=None, description="The start time of the current service operation in UTC format.", alias="CurrentServiceOperationStartTimeUtc")
    partition_id: Optional[StrictStr] = Field(default=None, description="An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.", alias="PartitionId")
    reported_load: Optional[List[LoadMetricReportInfo]] = Field(default=None, description="List of load reported by replica.", alias="ReportedLoad")
    service_kind: ServiceKind = Field(alias="ServiceKind")
    service_name: Optional[StrictStr] = Field(default=None, description="The full name of the service with 'fabric:' URI scheme.", alias="ServiceName")
    __properties: ClassVar[List[str]] = ["CurrentServiceOperation", "CurrentServiceOperationStartTimeUtc", "PartitionId", "ReportedLoad", "ServiceKind", "ServiceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'ServiceKind'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'DeployedStatefulServiceReplicaDetailInfo': 'DeployedStatefulServiceReplicaDetailInfo','DeployedStatelessServiceInstanceDetailInfo': 'DeployedStatelessServiceInstanceDetailInfo'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[DeployedStatefulServiceReplicaDetailInfo, DeployedStatelessServiceInstanceDetailInfo]]:
        """Create an instance of DeployedServiceReplicaDetailInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reported_load (list)
        _items = []
        if self.reported_load:
            for _item_reported_load in self.reported_load:
                if _item_reported_load:
                    _items.append(_item_reported_load.to_dict())
            _dict['ReportedLoad'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[DeployedStatefulServiceReplicaDetailInfo, DeployedStatelessServiceInstanceDetailInfo]]:
        """Create an instance of DeployedServiceReplicaDetailInfo from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'DeployedStatefulServiceReplicaDetailInfo':
            return import_module("openapi_client.models.deployed_stateful_service_replica_detail_info").DeployedStatefulServiceReplicaDetailInfo.from_dict(obj)
        if object_type ==  'DeployedStatelessServiceInstanceDetailInfo':
            return import_module("openapi_client.models.deployed_stateless_service_instance_detail_info").DeployedStatelessServiceInstanceDetailInfo.from_dict(obj)

        raise ValueError("DeployedServiceReplicaDetailInfo failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



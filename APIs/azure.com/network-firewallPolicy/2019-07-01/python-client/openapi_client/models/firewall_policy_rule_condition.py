# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.application_rule_condition import ApplicationRuleCondition
    from openapi_client.models.network_rule_condition import NetworkRuleCondition

class FirewallPolicyRuleCondition(BaseModel):
    """
    Properties of a rule.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the rule condition.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the rule condition.")
    rule_condition_type: StrictStr = Field(description="Rule Condition Type.", alias="ruleConditionType")
    __properties: ClassVar[List[str]] = ["description", "name", "ruleConditionType"]

    @field_validator('rule_condition_type')
    def rule_condition_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ApplicationRuleCondition', 'NetworkRuleCondition']):
            raise ValueError("must be one of enum values ('ApplicationRuleCondition', 'NetworkRuleCondition')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'ruleConditionType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ApplicationRuleCondition': 'ApplicationRuleCondition','NetworkRuleCondition': 'NetworkRuleCondition'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ApplicationRuleCondition, NetworkRuleCondition]]:
        """Create an instance of FirewallPolicyRuleCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ApplicationRuleCondition, NetworkRuleCondition]]:
        """Create an instance of FirewallPolicyRuleCondition from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ApplicationRuleCondition':
            return import_module("openapi_client.models.application_rule_condition").ApplicationRuleCondition.from_dict(obj)
        if object_type ==  'NetworkRuleCondition':
            return import_module("openapi_client.models.network_rule_condition").NetworkRuleCondition.from_dict(obj)

        raise ValueError("FirewallPolicyRuleCondition failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



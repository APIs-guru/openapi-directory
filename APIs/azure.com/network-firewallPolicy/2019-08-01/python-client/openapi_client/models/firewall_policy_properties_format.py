# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.firewall_policy_properties_format_base_policy import FirewallPolicyPropertiesFormatBasePolicy
from typing import Optional, Set
from typing_extensions import Self

class FirewallPolicyPropertiesFormat(BaseModel):
    """
    Firewall Policy definition.
    """ # noqa: E501
    base_policy: Optional[FirewallPolicyPropertiesFormatBasePolicy] = Field(default=None, alias="basePolicy")
    child_policies: Optional[List[FirewallPolicyPropertiesFormatBasePolicy]] = Field(default=None, description="List of references to Child Firewall Policies.", alias="childPolicies")
    firewalls: Optional[List[FirewallPolicyPropertiesFormatBasePolicy]] = Field(default=None, description="List of references to Azure Firewalls that this Firewall Policy is associated with.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    rule_groups: Optional[List[FirewallPolicyPropertiesFormatBasePolicy]] = Field(default=None, description="List of references to FirewallPolicyRuleGroups.", alias="ruleGroups")
    threat_intel_mode: Optional[StrictStr] = Field(default=None, description="The operation mode for Threat Intel.", alias="threatIntelMode")
    __properties: ClassVar[List[str]] = ["basePolicy", "childPolicies", "firewalls", "provisioningState", "ruleGroups", "threatIntelMode"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    @field_validator('threat_intel_mode')
    def threat_intel_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Alert', 'Deny', 'Off']):
            raise ValueError("must be one of enum values ('Alert', 'Deny', 'Off')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirewallPolicyPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "child_policies",
            "firewalls",
            "provisioning_state",
            "rule_groups",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_policy
        if self.base_policy:
            _dict['basePolicy'] = self.base_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in child_policies (list)
        _items = []
        if self.child_policies:
            for _item_child_policies in self.child_policies:
                if _item_child_policies:
                    _items.append(_item_child_policies.to_dict())
            _dict['childPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in firewalls (list)
        _items = []
        if self.firewalls:
            for _item_firewalls in self.firewalls:
                if _item_firewalls:
                    _items.append(_item_firewalls.to_dict())
            _dict['firewalls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rule_groups (list)
        _items = []
        if self.rule_groups:
            for _item_rule_groups in self.rule_groups:
                if _item_rule_groups:
                    _items.append(_item_rule_groups.to_dict())
            _dict['ruleGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirewallPolicyPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basePolicy": FirewallPolicyPropertiesFormatBasePolicy.from_dict(obj["basePolicy"]) if obj.get("basePolicy") is not None else None,
            "childPolicies": [FirewallPolicyPropertiesFormatBasePolicy.from_dict(_item) for _item in obj["childPolicies"]] if obj.get("childPolicies") is not None else None,
            "firewalls": [FirewallPolicyPropertiesFormatBasePolicy.from_dict(_item) for _item in obj["firewalls"]] if obj.get("firewalls") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "ruleGroups": [FirewallPolicyPropertiesFormatBasePolicy.from_dict(_item) for _item in obj["ruleGroups"]] if obj.get("ruleGroups") is not None else None,
            "threatIntelMode": obj.get("threatIntelMode")
        })
        return _obj



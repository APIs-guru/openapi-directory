# coding: utf-8

"""
    EventHubManagementClient

    Azure Event Hubs client

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NamespaceProperties(BaseModel):
    """
    Properties of the Namespace supplied for create or update Namespace operation
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="The time the Namespace was created.", alias="createdAt")
    enabled: Optional[StrictBool] = Field(default=None, description="Specifies whether this instance is enabled.")
    metric_id: Optional[StrictStr] = Field(default=None, description="Identifier for Azure Insights metrics", alias="metricId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the Namespace.", alias="provisioningState")
    service_bus_endpoint: Optional[StrictStr] = Field(default=None, description="Endpoint you can use to perform Service Bus operations.", alias="serviceBusEndpoint")
    status: Optional[StrictStr] = Field(default=None, description="State of the Namespace.")
    updated_at: Optional[datetime] = Field(default=None, description="The time the Namespace was updated.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["createdAt", "enabled", "metricId", "provisioningState", "serviceBusEndpoint", "status", "updatedAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Creating', 'Created', 'Activating', 'Enabling', 'Active', 'Disabling', 'Disabled', 'SoftDeleting', 'SoftDeleted', 'Removing', 'Removed', 'Failed']):
            raise ValueError("must be one of enum values ('Unknown', 'Creating', 'Created', 'Activating', 'Enabling', 'Active', 'Disabling', 'Disabled', 'SoftDeleting', 'SoftDeleted', 'Removing', 'Removed', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NamespaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "metric_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NamespaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "enabled": obj.get("enabled"),
            "metricId": obj.get("metricId"),
            "provisioningState": obj.get("provisioningState"),
            "serviceBusEndpoint": obj.get("serviceBusEndpoint"),
            "status": obj.get("status"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2019-04-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_profile import NetworkProfile
from openapi_client.models.open_shift_managed_cluster_agent_pool_profile import OpenShiftManagedClusterAgentPoolProfile
from openapi_client.models.open_shift_managed_cluster_auth_profile import OpenShiftManagedClusterAuthProfile
from openapi_client.models.open_shift_managed_cluster_master_pool_profile import OpenShiftManagedClusterMasterPoolProfile
from openapi_client.models.open_shift_router_profile import OpenShiftRouterProfile
from typing import Optional, Set
from typing_extensions import Self

class OpenShiftManagedClusterProperties(BaseModel):
    """
    Properties of the OpenShift managed cluster.
    """ # noqa: E501
    agent_pool_profiles: Optional[List[OpenShiftManagedClusterAgentPoolProfile]] = Field(default=None, description="Configuration of OpenShift cluster VMs.", alias="agentPoolProfiles")
    auth_profile: Optional[OpenShiftManagedClusterAuthProfile] = Field(default=None, alias="authProfile")
    cluster_version: Optional[StrictStr] = Field(default=None, description="Version of OpenShift specified when creating the cluster.", alias="clusterVersion")
    fqdn: Optional[StrictStr] = Field(default=None, description="Service generated FQDN for OpenShift API server loadbalancer internal hostname.")
    master_pool_profile: Optional[OpenShiftManagedClusterMasterPoolProfile] = Field(default=None, alias="masterPoolProfile")
    network_profile: Optional[NetworkProfile] = Field(default=None, alias="networkProfile")
    open_shift_version: StrictStr = Field(description="Version of OpenShift specified when creating the cluster.", alias="openShiftVersion")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current deployment or provisioning state, which only appears in the response.", alias="provisioningState")
    public_hostname: Optional[StrictStr] = Field(default=None, description="Service generated FQDN for OpenShift API server.", alias="publicHostname")
    router_profiles: Optional[List[OpenShiftRouterProfile]] = Field(default=None, description="Configuration for OpenShift router(s).", alias="routerProfiles")
    __properties: ClassVar[List[str]] = ["agentPoolProfiles", "authProfile", "clusterVersion", "fqdn", "masterPoolProfile", "networkProfile", "openShiftVersion", "provisioningState", "publicHostname", "routerProfiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenShiftManagedClusterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_version",
            "fqdn",
            "provisioning_state",
            "public_hostname",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in agent_pool_profiles (list)
        _items = []
        if self.agent_pool_profiles:
            for _item_agent_pool_profiles in self.agent_pool_profiles:
                if _item_agent_pool_profiles:
                    _items.append(_item_agent_pool_profiles.to_dict())
            _dict['agentPoolProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of auth_profile
        if self.auth_profile:
            _dict['authProfile'] = self.auth_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of master_pool_profile
        if self.master_pool_profile:
            _dict['masterPoolProfile'] = self.master_pool_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_profile
        if self.network_profile:
            _dict['networkProfile'] = self.network_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in router_profiles (list)
        _items = []
        if self.router_profiles:
            for _item_router_profiles in self.router_profiles:
                if _item_router_profiles:
                    _items.append(_item_router_profiles.to_dict())
            _dict['routerProfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenShiftManagedClusterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentPoolProfiles": [OpenShiftManagedClusterAgentPoolProfile.from_dict(_item) for _item in obj["agentPoolProfiles"]] if obj.get("agentPoolProfiles") is not None else None,
            "authProfile": OpenShiftManagedClusterAuthProfile.from_dict(obj["authProfile"]) if obj.get("authProfile") is not None else None,
            "clusterVersion": obj.get("clusterVersion"),
            "fqdn": obj.get("fqdn"),
            "masterPoolProfile": OpenShiftManagedClusterMasterPoolProfile.from_dict(obj["masterPoolProfile"]) if obj.get("masterPoolProfile") is not None else None,
            "networkProfile": NetworkProfile.from_dict(obj["networkProfile"]) if obj.get("networkProfile") is not None else None,
            "openShiftVersion": obj.get("openShiftVersion"),
            "provisioningState": obj.get("provisioningState"),
            "publicHostname": obj.get("publicHostname"),
            "routerProfiles": [OpenShiftRouterProfile.from_dict(_item) for _item in obj["routerProfiles"]] if obj.get("routerProfiles") is not None else None
        })
        return _obj



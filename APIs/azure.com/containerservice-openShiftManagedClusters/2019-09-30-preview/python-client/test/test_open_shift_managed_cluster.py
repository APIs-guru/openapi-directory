# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2019-09-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.open_shift_managed_cluster import OpenShiftManagedCluster

class TestOpenShiftManagedCluster(unittest.TestCase):
    """OpenShiftManagedCluster unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OpenShiftManagedCluster:
        """Test OpenShiftManagedCluster
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OpenShiftManagedCluster`
        """
        model = OpenShiftManagedCluster()
        if include_optional:
            return OpenShiftManagedCluster(
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = '',
                plan = openapi_client.models.purchase_plan.PurchasePlan(
                    name = '', 
                    product = '', 
                    promotion_code = '', 
                    publisher = '', ),
                properties = openapi_client.models.open_shift_managed_cluster_properties.OpenShiftManagedClusterProperties(
                    agent_pool_profiles = [
                        openapi_client.models.open_shift_managed_cluster_agent_pool_profile.OpenShiftManagedClusterAgentPoolProfile(
                            count = 56, 
                            name = '', 
                            os_type = 'Linux', 
                            role = 'compute', 
                            subnet_cidr = '10.0.0.0/24', 
                            vm_size = 'Standard_D2s_v3', )
                        ], 
                    auth_profile = openapi_client.models.open_shift_managed_cluster_auth_profile.OpenShiftManagedClusterAuthProfile(
                        identity_providers = [
                            openapi_client.models.open_shift_managed_cluster_identity_provider.OpenShiftManagedClusterIdentityProvider(
                                name = '', 
                                provider = openapi_client.models.open_shift_managed_cluster_base_identity_provider.OpenShiftManagedClusterBaseIdentityProvider(
                                    kind = '', ), )
                            ], ), 
                    cluster_version = '', 
                    fqdn = '', 
                    master_pool_profile = openapi_client.models.open_shift_managed_cluster_master_pool_profile.OpenShiftManagedClusterMasterPoolProfile(
                        count = 56, 
                        name = '', 
                        subnet_cidr = '', 
                        vm_size = 'Standard_D2s_v3', ), 
                    monitor_profile = openapi_client.models.open_shift_managed_cluster_monitor_profile.OpenShiftManagedClusterMonitorProfile(
                        enabled = True, 
                        workspace_resource_id = '', ), 
                    network_profile = openapi_client.models.network_profile.NetworkProfile(
                        peer_vnet_id = '', 
                        vnet_cidr = '10.0.0.0/8', 
                        vnet_id = '', ), 
                    open_shift_version = '', 
                    provisioning_state = '', 
                    public_hostname = '', 
                    router_profiles = [
                        openapi_client.models.open_shift_router_profile.OpenShiftRouterProfile(
                            fqdn = '', 
                            name = '', 
                            public_subdomain = '', )
                        ], )
            )
        else:
            return OpenShiftManagedCluster(
                location = '',
        )
        """

    def testOpenShiftManagedCluster(self):
        """Test OpenShiftManagedCluster"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Visual Studio Projects Resource Provider Client

    Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.

    The version of the OpenAPI document: 2018-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pipeline_bootstrap_configuration import PipelineBootstrapConfiguration
from openapi_client.models.pipeline_template_legacy import PipelineTemplateLegacy
from typing import Optional, Set
from typing_extensions import Self

class ProjectResourceProperties(BaseModel):
    """
    Defines the custom properties of project resource.
    """ # noqa: E501
    bootstrap_pipeline_template: Optional[PipelineTemplateLegacy] = Field(default=None, alias="bootstrapPipelineTemplate")
    owner_upn: Optional[StrictStr] = Field(default=None, description="Optional UPN of the owner, on-behalf-of whom the project is being created.", alias="ownerUpn")
    pipeline_bootstrap_configurations: Optional[List[PipelineBootstrapConfiguration]] = Field(default=None, description="Bootstrap configuration for pipelines in Team Project.", alias="pipelineBootstrapConfigurations")
    process_template_id: Optional[StrictStr] = Field(default=None, description="Process template to use in the project.", alias="processTemplateId")
    tfs_unique_identifier: Optional[StrictStr] = Field(default=None, description="Unique identifier of the VSTS project.", alias="tfsUniqueIdentifier")
    version_control_option: Optional[StrictStr] = Field(default=None, description="Version control to use for the default repo created in the project.", alias="versionControlOption")
    __properties: ClassVar[List[str]] = ["bootstrapPipelineTemplate", "ownerUpn", "pipelineBootstrapConfigurations", "processTemplateId", "tfsUniqueIdentifier", "versionControlOption"]

    @field_validator('process_template_id')
    def process_template_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Scrum', 'Agile', 'Cmmi']):
            raise ValueError("must be one of enum values ('Scrum', 'Agile', 'Cmmi')")
        return value

    @field_validator('version_control_option')
    def version_control_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Git', 'Tfvc']):
            raise ValueError("must be one of enum values ('Git', 'Tfvc')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "tfs_unique_identifier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bootstrap_pipeline_template
        if self.bootstrap_pipeline_template:
            _dict['bootstrapPipelineTemplate'] = self.bootstrap_pipeline_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pipeline_bootstrap_configurations (list)
        _items = []
        if self.pipeline_bootstrap_configurations:
            for _item_pipeline_bootstrap_configurations in self.pipeline_bootstrap_configurations:
                if _item_pipeline_bootstrap_configurations:
                    _items.append(_item_pipeline_bootstrap_configurations.to_dict())
            _dict['pipelineBootstrapConfigurations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bootstrapPipelineTemplate": PipelineTemplateLegacy.from_dict(obj["bootstrapPipelineTemplate"]) if obj.get("bootstrapPipelineTemplate") is not None else None,
            "ownerUpn": obj.get("ownerUpn"),
            "pipelineBootstrapConfigurations": [PipelineBootstrapConfiguration.from_dict(_item) for _item in obj["pipelineBootstrapConfigurations"]] if obj.get("pipelineBootstrapConfigurations") is not None else None,
            "processTemplateId": obj.get("processTemplateId"),
            "tfsUniqueIdentifier": obj.get("tfsUniqueIdentifier"),
            "versionControlOption": obj.get("versionControlOption")
        })
        return _obj



# coding: utf-8

"""
    Visual Studio Projects Resource Provider Client

    Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.

    The version of the OpenAPI document: 2018-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from openapi_client.models.application_source import ApplicationSource
from openapi_client.models.application_target import ApplicationTarget
from openapi_client.models.authorization import Authorization
from typing import Optional, Set
from typing_extensions import Self

class PipelineTemplateLegacy(BaseModel):
    """
    Defines a VSTS pipeline template.
    """ # noqa: E501
    application_source: ApplicationSource = Field(alias="applicationSource")
    application_target: ApplicationTarget = Field(alias="applicationTarget")
    authorization_details: Dict[str, Authorization] = Field(description="Global dictionary of authorization details used by the pipeline, with a friendly name as key. Individual resource in the pipeline can reference to a specific authorization info using the friendly name.", alias="authorizationDetails")
    __properties: ClassVar[List[str]] = ["applicationSource", "applicationTarget", "authorizationDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineTemplateLegacy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_source
        if self.application_source:
            _dict['applicationSource'] = self.application_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of application_target
        if self.application_target:
            _dict['applicationTarget'] = self.application_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in authorization_details (dict)
        _field_dict = {}
        if self.authorization_details:
            for _key_authorization_details in self.authorization_details:
                if self.authorization_details[_key_authorization_details]:
                    _field_dict[_key_authorization_details] = self.authorization_details[_key_authorization_details].to_dict()
            _dict['authorizationDetails'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineTemplateLegacy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationSource": ApplicationSource.from_dict(obj["applicationSource"]) if obj.get("applicationSource") is not None else None,
            "applicationTarget": ApplicationTarget.from_dict(obj["applicationTarget"]) if obj.get("applicationTarget") is not None else None,
            "authorizationDetails": dict(
                (_k, Authorization.from_dict(_v))
                for _k, _v in obj["authorizationDetails"].items()
            )
            if obj.get("authorizationDetails") is not None
            else None
        })
        return _obj



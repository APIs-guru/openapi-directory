# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_api_definition import WebAppsList200ResponseValueInnerPropertiesSiteConfigApiDefinition
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_app_settings_inner import WebAppsList200ResponseValueInnerPropertiesSiteConfigAppSettingsInner
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_auto_heal_rules import WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_azure_storage_accounts_value import WebAppsList200ResponseValueInnerPropertiesSiteConfigAzureStorageAccountsValue
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_connection_strings_inner import WebAppsList200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_cors import WebAppsList200ResponseValueInnerPropertiesSiteConfigCors
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_experiments import WebAppsList200ResponseValueInnerPropertiesSiteConfigExperiments
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_handler_mappings_inner import WebAppsList200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_ip_security_restrictions_inner import WebAppsList200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_limits import WebAppsList200ResponseValueInnerPropertiesSiteConfigLimits
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_machine_key import WebAppsList200ResponseValueInnerPropertiesSiteConfigMachineKey
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_push import WebAppsList200ResponseValueInnerPropertiesSiteConfigPush
from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_virtual_applications_inner import WebAppsList200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner
from typing import Optional, Set
from typing_extensions import Self

class WebAppsList200ResponseValueInnerPropertiesSiteConfig(BaseModel):
    """
    Configuration of an App Service app.
    """ # noqa: E501
    always_on: Optional[StrictBool] = Field(default=None, description="<code>true</code> if Always On is enabled; otherwise, <code>false</code>.", alias="alwaysOn")
    api_definition: Optional[WebAppsList200ResponseValueInnerPropertiesSiteConfigApiDefinition] = Field(default=None, alias="apiDefinition")
    app_command_line: Optional[StrictStr] = Field(default=None, description="App command line to launch.", alias="appCommandLine")
    app_settings: Optional[List[WebAppsList200ResponseValueInnerPropertiesSiteConfigAppSettingsInner]] = Field(default=None, description="Application settings.", alias="appSettings")
    auto_heal_enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.", alias="autoHealEnabled")
    auto_heal_rules: Optional[WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules] = Field(default=None, alias="autoHealRules")
    auto_swap_slot_name: Optional[StrictStr] = Field(default=None, description="Auto-swap slot name.", alias="autoSwapSlotName")
    azure_storage_accounts: Optional[Dict[str, WebAppsList200ResponseValueInnerPropertiesSiteConfigAzureStorageAccountsValue]] = Field(default=None, description="User-provided Azure storage accounts.", alias="azureStorageAccounts")
    connection_strings: Optional[List[WebAppsList200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner]] = Field(default=None, description="Connection strings.", alias="connectionStrings")
    cors: Optional[WebAppsList200ResponseValueInnerPropertiesSiteConfigCors] = None
    default_documents: Optional[List[StrictStr]] = Field(default=None, description="Default documents.", alias="defaultDocuments")
    detailed_error_logging_enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.", alias="detailedErrorLoggingEnabled")
    document_root: Optional[StrictStr] = Field(default=None, description="Document root.", alias="documentRoot")
    experiments: Optional[WebAppsList200ResponseValueInnerPropertiesSiteConfigExperiments] = None
    ftps_state: Optional[StrictStr] = Field(default=None, description="State of FTP / FTPS service", alias="ftpsState")
    handler_mappings: Optional[List[WebAppsList200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner]] = Field(default=None, description="Handler mappings.", alias="handlerMappings")
    http20_enabled: Optional[StrictBool] = Field(default=True, description="Http20Enabled: configures a web site to allow clients to connect over http2.0", alias="http20Enabled")
    http_logging_enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.", alias="httpLoggingEnabled")
    ip_security_restrictions: Optional[List[WebAppsList200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner]] = Field(default=None, description="IP security restrictions for main.", alias="ipSecurityRestrictions")
    java_container: Optional[StrictStr] = Field(default=None, description="Java container.", alias="javaContainer")
    java_container_version: Optional[StrictStr] = Field(default=None, description="Java container version.", alias="javaContainerVersion")
    java_version: Optional[StrictStr] = Field(default=None, description="Java version.", alias="javaVersion")
    limits: Optional[WebAppsList200ResponseValueInnerPropertiesSiteConfigLimits] = None
    linux_fx_version: Optional[StrictStr] = Field(default=None, description="Linux App Framework and version", alias="linuxFxVersion")
    load_balancing: Optional[StrictStr] = Field(default=None, description="Site load balancing.", alias="loadBalancing")
    local_my_sql_enabled: Optional[StrictBool] = Field(default=False, description="<code>true</code> to enable local MySQL; otherwise, <code>false</code>.", alias="localMySqlEnabled")
    logs_directory_size_limit: Optional[StrictInt] = Field(default=None, description="HTTP logs directory size limit.", alias="logsDirectorySizeLimit")
    machine_key: Optional[WebAppsList200ResponseValueInnerPropertiesSiteConfigMachineKey] = Field(default=None, alias="machineKey")
    managed_pipeline_mode: Optional[StrictStr] = Field(default=None, description="Managed pipeline mode.", alias="managedPipelineMode")
    managed_service_identity_id: Optional[StrictInt] = Field(default=None, description="Managed Service Identity Id", alias="managedServiceIdentityId")
    min_tls_version: Optional[StrictStr] = Field(default=None, description="MinTlsVersion: configures the minimum version of TLS required for SSL requests", alias="minTlsVersion")
    net_framework_version: Optional[StrictStr] = Field(default='v4.6', description=".NET Framework version.", alias="netFrameworkVersion")
    node_version: Optional[StrictStr] = Field(default=None, description="Version of Node.js.", alias="nodeVersion")
    number_of_workers: Optional[StrictInt] = Field(default=None, description="Number of workers.", alias="numberOfWorkers")
    php_version: Optional[StrictStr] = Field(default=None, description="Version of PHP.", alias="phpVersion")
    publishing_username: Optional[StrictStr] = Field(default=None, description="Publishing user name.", alias="publishingUsername")
    push: Optional[WebAppsList200ResponseValueInnerPropertiesSiteConfigPush] = None
    python_version: Optional[StrictStr] = Field(default=None, description="Version of Python.", alias="pythonVersion")
    remote_debugging_enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.", alias="remoteDebuggingEnabled")
    remote_debugging_version: Optional[StrictStr] = Field(default=None, description="Remote debugging version.", alias="remoteDebuggingVersion")
    request_tracing_enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.", alias="requestTracingEnabled")
    request_tracing_expiration_time: Optional[datetime] = Field(default=None, description="Request tracing expiration time.", alias="requestTracingExpirationTime")
    reserved_instance_count: Optional[Annotated[int, Field(le=10, strict=True, ge=0)]] = Field(default=None, description="Number of reserved instances. This setting only applies to the Consumption Plan", alias="reservedInstanceCount")
    scm_ip_security_restrictions: Optional[List[WebAppsList200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner]] = Field(default=None, description="IP security restrictions for scm.", alias="scmIpSecurityRestrictions")
    scm_ip_security_restrictions_use_main: Optional[StrictBool] = Field(default=None, description="IP security restrictions for scm to use main.", alias="scmIpSecurityRestrictionsUseMain")
    scm_type: Optional[StrictStr] = Field(default=None, description="SCM type.", alias="scmType")
    tracing_options: Optional[StrictStr] = Field(default=None, description="Tracing options.", alias="tracingOptions")
    use32_bit_worker_process: Optional[StrictBool] = Field(default=None, description="<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.", alias="use32BitWorkerProcess")
    virtual_applications: Optional[List[WebAppsList200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner]] = Field(default=None, description="Virtual applications.", alias="virtualApplications")
    vnet_name: Optional[StrictStr] = Field(default=None, description="Virtual Network name.", alias="vnetName")
    web_sockets_enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.", alias="webSocketsEnabled")
    windows_fx_version: Optional[StrictStr] = Field(default=None, description="Xenon App Framework and version", alias="windowsFxVersion")
    x_managed_service_identity_id: Optional[StrictInt] = Field(default=None, description="Explicit Managed Service Identity Id", alias="xManagedServiceIdentityId")
    __properties: ClassVar[List[str]] = ["alwaysOn", "apiDefinition", "appCommandLine", "appSettings", "autoHealEnabled", "autoHealRules", "autoSwapSlotName", "azureStorageAccounts", "connectionStrings", "cors", "defaultDocuments", "detailedErrorLoggingEnabled", "documentRoot", "experiments", "ftpsState", "handlerMappings", "http20Enabled", "httpLoggingEnabled", "ipSecurityRestrictions", "javaContainer", "javaContainerVersion", "javaVersion", "limits", "linuxFxVersion", "loadBalancing", "localMySqlEnabled", "logsDirectorySizeLimit", "machineKey", "managedPipelineMode", "managedServiceIdentityId", "minTlsVersion", "netFrameworkVersion", "nodeVersion", "numberOfWorkers", "phpVersion", "publishingUsername", "push", "pythonVersion", "remoteDebuggingEnabled", "remoteDebuggingVersion", "requestTracingEnabled", "requestTracingExpirationTime", "reservedInstanceCount", "scmIpSecurityRestrictions", "scmIpSecurityRestrictionsUseMain", "scmType", "tracingOptions", "use32BitWorkerProcess", "virtualApplications", "vnetName", "webSocketsEnabled", "windowsFxVersion", "xManagedServiceIdentityId"]

    @field_validator('ftps_state')
    def ftps_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AllAllowed', 'FtpsOnly', 'Disabled']):
            raise ValueError("must be one of enum values ('AllAllowed', 'FtpsOnly', 'Disabled')")
        return value

    @field_validator('load_balancing')
    def load_balancing_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash']):
            raise ValueError("must be one of enum values ('WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash')")
        return value

    @field_validator('managed_pipeline_mode')
    def managed_pipeline_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Integrated', 'Classic']):
            raise ValueError("must be one of enum values ('Integrated', 'Classic')")
        return value

    @field_validator('min_tls_version')
    def min_tls_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1.0', '1.1', '1.2']):
            raise ValueError("must be one of enum values ('1.0', '1.1', '1.2')")
        return value

    @field_validator('scm_type')
    def scm_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive', 'VSO']):
            raise ValueError("must be one of enum values ('None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive', 'VSO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebAppsList200ResponseValueInnerPropertiesSiteConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_definition
        if self.api_definition:
            _dict['apiDefinition'] = self.api_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in app_settings (list)
        _items = []
        if self.app_settings:
            for _item_app_settings in self.app_settings:
                if _item_app_settings:
                    _items.append(_item_app_settings.to_dict())
            _dict['appSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of auto_heal_rules
        if self.auto_heal_rules:
            _dict['autoHealRules'] = self.auto_heal_rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in azure_storage_accounts (dict)
        _field_dict = {}
        if self.azure_storage_accounts:
            for _key_azure_storage_accounts in self.azure_storage_accounts:
                if self.azure_storage_accounts[_key_azure_storage_accounts]:
                    _field_dict[_key_azure_storage_accounts] = self.azure_storage_accounts[_key_azure_storage_accounts].to_dict()
            _dict['azureStorageAccounts'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in connection_strings (list)
        _items = []
        if self.connection_strings:
            for _item_connection_strings in self.connection_strings:
                if _item_connection_strings:
                    _items.append(_item_connection_strings.to_dict())
            _dict['connectionStrings'] = _items
        # override the default output from pydantic by calling `to_dict()` of cors
        if self.cors:
            _dict['cors'] = self.cors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of experiments
        if self.experiments:
            _dict['experiments'] = self.experiments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in handler_mappings (list)
        _items = []
        if self.handler_mappings:
            for _item_handler_mappings in self.handler_mappings:
                if _item_handler_mappings:
                    _items.append(_item_handler_mappings.to_dict())
            _dict['handlerMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ip_security_restrictions (list)
        _items = []
        if self.ip_security_restrictions:
            for _item_ip_security_restrictions in self.ip_security_restrictions:
                if _item_ip_security_restrictions:
                    _items.append(_item_ip_security_restrictions.to_dict())
            _dict['ipSecurityRestrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of limits
        if self.limits:
            _dict['limits'] = self.limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of machine_key
        if self.machine_key:
            _dict['machineKey'] = self.machine_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of push
        if self.push:
            _dict['push'] = self.push.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in scm_ip_security_restrictions (list)
        _items = []
        if self.scm_ip_security_restrictions:
            for _item_scm_ip_security_restrictions in self.scm_ip_security_restrictions:
                if _item_scm_ip_security_restrictions:
                    _items.append(_item_scm_ip_security_restrictions.to_dict())
            _dict['scmIpSecurityRestrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_applications (list)
        _items = []
        if self.virtual_applications:
            for _item_virtual_applications in self.virtual_applications:
                if _item_virtual_applications:
                    _items.append(_item_virtual_applications.to_dict())
            _dict['virtualApplications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebAppsList200ResponseValueInnerPropertiesSiteConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alwaysOn": obj.get("alwaysOn"),
            "apiDefinition": WebAppsList200ResponseValueInnerPropertiesSiteConfigApiDefinition.from_dict(obj["apiDefinition"]) if obj.get("apiDefinition") is not None else None,
            "appCommandLine": obj.get("appCommandLine"),
            "appSettings": [WebAppsList200ResponseValueInnerPropertiesSiteConfigAppSettingsInner.from_dict(_item) for _item in obj["appSettings"]] if obj.get("appSettings") is not None else None,
            "autoHealEnabled": obj.get("autoHealEnabled"),
            "autoHealRules": WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules.from_dict(obj["autoHealRules"]) if obj.get("autoHealRules") is not None else None,
            "autoSwapSlotName": obj.get("autoSwapSlotName"),
            "azureStorageAccounts": dict(
                (_k, WebAppsList200ResponseValueInnerPropertiesSiteConfigAzureStorageAccountsValue.from_dict(_v))
                for _k, _v in obj["azureStorageAccounts"].items()
            )
            if obj.get("azureStorageAccounts") is not None
            else None,
            "connectionStrings": [WebAppsList200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner.from_dict(_item) for _item in obj["connectionStrings"]] if obj.get("connectionStrings") is not None else None,
            "cors": WebAppsList200ResponseValueInnerPropertiesSiteConfigCors.from_dict(obj["cors"]) if obj.get("cors") is not None else None,
            "defaultDocuments": obj.get("defaultDocuments"),
            "detailedErrorLoggingEnabled": obj.get("detailedErrorLoggingEnabled"),
            "documentRoot": obj.get("documentRoot"),
            "experiments": WebAppsList200ResponseValueInnerPropertiesSiteConfigExperiments.from_dict(obj["experiments"]) if obj.get("experiments") is not None else None,
            "ftpsState": obj.get("ftpsState"),
            "handlerMappings": [WebAppsList200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner.from_dict(_item) for _item in obj["handlerMappings"]] if obj.get("handlerMappings") is not None else None,
            "http20Enabled": obj.get("http20Enabled") if obj.get("http20Enabled") is not None else True,
            "httpLoggingEnabled": obj.get("httpLoggingEnabled"),
            "ipSecurityRestrictions": [WebAppsList200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner.from_dict(_item) for _item in obj["ipSecurityRestrictions"]] if obj.get("ipSecurityRestrictions") is not None else None,
            "javaContainer": obj.get("javaContainer"),
            "javaContainerVersion": obj.get("javaContainerVersion"),
            "javaVersion": obj.get("javaVersion"),
            "limits": WebAppsList200ResponseValueInnerPropertiesSiteConfigLimits.from_dict(obj["limits"]) if obj.get("limits") is not None else None,
            "linuxFxVersion": obj.get("linuxFxVersion"),
            "loadBalancing": obj.get("loadBalancing"),
            "localMySqlEnabled": obj.get("localMySqlEnabled") if obj.get("localMySqlEnabled") is not None else False,
            "logsDirectorySizeLimit": obj.get("logsDirectorySizeLimit"),
            "machineKey": WebAppsList200ResponseValueInnerPropertiesSiteConfigMachineKey.from_dict(obj["machineKey"]) if obj.get("machineKey") is not None else None,
            "managedPipelineMode": obj.get("managedPipelineMode"),
            "managedServiceIdentityId": obj.get("managedServiceIdentityId"),
            "minTlsVersion": obj.get("minTlsVersion"),
            "netFrameworkVersion": obj.get("netFrameworkVersion") if obj.get("netFrameworkVersion") is not None else 'v4.6',
            "nodeVersion": obj.get("nodeVersion"),
            "numberOfWorkers": obj.get("numberOfWorkers"),
            "phpVersion": obj.get("phpVersion"),
            "publishingUsername": obj.get("publishingUsername"),
            "push": WebAppsList200ResponseValueInnerPropertiesSiteConfigPush.from_dict(obj["push"]) if obj.get("push") is not None else None,
            "pythonVersion": obj.get("pythonVersion"),
            "remoteDebuggingEnabled": obj.get("remoteDebuggingEnabled"),
            "remoteDebuggingVersion": obj.get("remoteDebuggingVersion"),
            "requestTracingEnabled": obj.get("requestTracingEnabled"),
            "requestTracingExpirationTime": obj.get("requestTracingExpirationTime"),
            "reservedInstanceCount": obj.get("reservedInstanceCount"),
            "scmIpSecurityRestrictions": [WebAppsList200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner.from_dict(_item) for _item in obj["scmIpSecurityRestrictions"]] if obj.get("scmIpSecurityRestrictions") is not None else None,
            "scmIpSecurityRestrictionsUseMain": obj.get("scmIpSecurityRestrictionsUseMain"),
            "scmType": obj.get("scmType"),
            "tracingOptions": obj.get("tracingOptions"),
            "use32BitWorkerProcess": obj.get("use32BitWorkerProcess"),
            "virtualApplications": [WebAppsList200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner.from_dict(_item) for _item in obj["virtualApplications"]] if obj.get("virtualApplications") is not None else None,
            "vnetName": obj.get("vnetName"),
            "webSocketsEnabled": obj.get("webSocketsEnabled"),
            "windowsFxVersion": obj.get("windowsFxVersion"),
            "xManagedServiceIdentityId": obj.get("xManagedServiceIdentityId")
        })
        return _obj



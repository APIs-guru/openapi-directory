# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.web_apps_list200_response_value_inner_properties_site_config_auto_heal_rules import WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules

class TestWebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules(unittest.TestCase):
    """WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules:
        """Test WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules`
        """
        model = WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules()
        if include_optional:
            return WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules(
                actions = openapi_client.models.web_apps_list_200_response_value_inner_properties_site_config_auto_heal_rules_actions.WebApps_List_200_response_value_inner_properties_siteConfig_autoHealRules_actions(
                    action_type = 'Recycle', 
                    custom_action = openapi_client.models.web_apps_list_200_response_value_inner_properties_site_config_auto_heal_rules_actions_custom_action.WebApps_List_200_response_value_inner_properties_siteConfig_autoHealRules_actions_customAction(
                        exe = '', 
                        parameters = '', ), 
                    min_process_execution_time = '', ),
                triggers = openapi_client.models.web_apps_list_200_response_value_inner_properties_site_config_auto_heal_rules_triggers.WebApps_List_200_response_value_inner_properties_siteConfig_autoHealRules_triggers(
                    private_bytes_in_kb = 56, 
                    requests = openapi_client.models.web_apps_list_200_response_value_inner_properties_site_config_auto_heal_rules_triggers_requests.WebApps_List_200_response_value_inner_properties_siteConfig_autoHealRules_triggers_requests(
                        count = 56, 
                        time_interval = '', ), 
                    slow_requests = openapi_client.models.web_apps_list_200_response_value_inner_properties_site_config_auto_heal_rules_triggers_slow_requests.WebApps_List_200_response_value_inner_properties_siteConfig_autoHealRules_triggers_slowRequests(
                        count = 56, 
                        time_interval = '', 
                        time_taken = '', ), 
                    status_codes = [
                        openapi_client.models.web_apps_list_200_response_value_inner_properties_site_config_auto_heal_rules_triggers_status_codes_inner.WebApps_List_200_response_value_inner_properties_siteConfig_autoHealRules_triggers_statusCodes_inner(
                            count = 56, 
                            status = 56, 
                            sub_status = 56, 
                            time_interval = '', 
                            win32_status = 56, )
                        ], )
            )
        else:
            return WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules(
        )
        """

    def testWebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules(self):
        """Test WebAppsList200ResponseValueInnerPropertiesSiteConfigAutoHealRules"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

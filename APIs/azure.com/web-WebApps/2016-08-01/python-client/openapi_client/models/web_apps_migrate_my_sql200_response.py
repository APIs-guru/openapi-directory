# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.web_apps_migrate_my_sql200_response_errors_inner import WebAppsMigrateMySql200ResponseErrorsInner
from typing import Optional, Set
from typing_extensions import Self

class WebAppsMigrateMySql200Response(BaseModel):
    """
    An operation on a resource.
    """ # noqa: E501
    created_time: Optional[datetime] = Field(default=None, description="Time when operation has started.", alias="createdTime")
    errors: Optional[List[WebAppsMigrateMySql200ResponseErrorsInner]] = Field(default=None, description="Any errors associate with the operation.")
    expiration_time: Optional[datetime] = Field(default=None, description="Time when operation will expire.", alias="expirationTime")
    geo_master_operation_id: Optional[StrictStr] = Field(default=None, description="Applicable only for stamp operation ids.", alias="geoMasterOperationId")
    id: Optional[StrictStr] = Field(default=None, description="Operation ID.")
    modified_time: Optional[datetime] = Field(default=None, description="Time when operation has been updated.", alias="modifiedTime")
    name: Optional[StrictStr] = Field(default=None, description="Operation name.")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the operation.")
    __properties: ClassVar[List[str]] = ["createdTime", "errors", "expirationTime", "geoMasterOperationId", "id", "modifiedTime", "name", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['InProgress', 'Failed', 'Succeeded', 'TimedOut', 'Created']):
            raise ValueError("must be one of enum values ('InProgress', 'Failed', 'Succeeded', 'TimedOut', 'Created')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebAppsMigrateMySql200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebAppsMigrateMySql200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdTime": obj.get("createdTime"),
            "errors": [WebAppsMigrateMySql200ResponseErrorsInner.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "expirationTime": obj.get("expirationTime"),
            "geoMasterOperationId": obj.get("geoMasterOperationId"),
            "id": obj.get("id"),
            "modifiedTime": obj.get("modifiedTime"),
            "name": obj.get("name"),
            "status": obj.get("status")
        })
        return _obj



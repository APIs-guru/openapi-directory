# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.web_apps_list200_response_value_inner_properties_snapshot_info_properties_recovery_target import WebAppsList200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget
from typing import Optional, Set
from typing_extensions import Self

class WebAppsList200ResponseValueInnerPropertiesSnapshotInfoProperties(BaseModel):
    """
    SnapshotRecoveryRequest resource specific properties
    """ # noqa: E501
    ignore_conflicting_host_names: Optional[StrictBool] = Field(default=None, description="If true, custom hostname conflicts will be ignored when recovering to a target web app. This setting is only necessary when RecoverConfiguration is enabled.", alias="ignoreConflictingHostNames")
    overwrite: StrictBool = Field(description="If <code>true</code> the recovery operation can overwrite source app; otherwise, <code>false</code>.")
    recover_configuration: Optional[StrictBool] = Field(default=None, description="If true, site configuration, in addition to content, will be reverted.", alias="recoverConfiguration")
    recovery_target: Optional[WebAppsList200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget] = Field(default=None, alias="recoveryTarget")
    snapshot_time: Optional[StrictStr] = Field(default=None, description="Point in time in which the app recovery should be attempted, formatted as a DateTime string.", alias="snapshotTime")
    __properties: ClassVar[List[str]] = ["ignoreConflictingHostNames", "overwrite", "recoverConfiguration", "recoveryTarget", "snapshotTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebAppsList200ResponseValueInnerPropertiesSnapshotInfoProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recovery_target
        if self.recovery_target:
            _dict['recoveryTarget'] = self.recovery_target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebAppsList200ResponseValueInnerPropertiesSnapshotInfoProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ignoreConflictingHostNames": obj.get("ignoreConflictingHostNames"),
            "overwrite": obj.get("overwrite"),
            "recoverConfiguration": obj.get("recoverConfiguration"),
            "recoveryTarget": WebAppsList200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget.from_dict(obj["recoveryTarget"]) if obj.get("recoveryTarget") is not None else None,
            "snapshotTime": obj.get("snapshotTime")
        })
        return _obj



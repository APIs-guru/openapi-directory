# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.perf_mon_sample import PerfMonSample
from typing import Optional, Set
from typing_extensions import Self

class PerfMonSet(BaseModel):
    """
    Metric information.
    """ # noqa: E501
    end_time: Optional[datetime] = Field(default=None, description="End time of the period.", alias="endTime")
    name: Optional[StrictStr] = Field(default=None, description="Unique key name of the counter.")
    start_time: Optional[datetime] = Field(default=None, description="Start time of the period.", alias="startTime")
    time_grain: Optional[StrictStr] = Field(default=None, description="Presented time grain.", alias="timeGrain")
    values: Optional[List[PerfMonSample]] = Field(default=None, description="Collection of workers that are active during this time.")
    __properties: ClassVar[List[str]] = ["endTime", "name", "startTime", "timeGrain", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerfMonSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerfMonSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "name": obj.get("name"),
            "startTime": obj.get("startTime"),
            "timeGrain": obj.get("timeGrain"),
            "values": [PerfMonSample.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None
        })
        return _obj



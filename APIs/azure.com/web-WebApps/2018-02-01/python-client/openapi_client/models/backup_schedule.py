# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BackupSchedule(BaseModel):
    """
    Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
    """ # noqa: E501
    frequency_interval: StrictInt = Field(description="How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)", alias="frequencyInterval")
    frequency_unit: StrictStr = Field(description="The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)", alias="frequencyUnit")
    keep_at_least_one_backup: StrictBool = Field(description="True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.", alias="keepAtLeastOneBackup")
    last_execution_time: Optional[datetime] = Field(default=None, description="Last time when this schedule was triggered.", alias="lastExecutionTime")
    retention_period_in_days: StrictInt = Field(description="After how many days backups should be deleted.", alias="retentionPeriodInDays")
    start_time: Optional[datetime] = Field(default=None, description="When the schedule should start working.", alias="startTime")
    __properties: ClassVar[List[str]] = ["frequencyInterval", "frequencyUnit", "keepAtLeastOneBackup", "lastExecutionTime", "retentionPeriodInDays", "startTime"]

    @field_validator('frequency_unit')
    def frequency_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Day', 'Hour']):
            raise ValueError("must be one of enum values ('Day', 'Hour')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_execution_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frequencyInterval": obj.get("frequencyInterval") if obj.get("frequencyInterval") is not None else 7,
            "frequencyUnit": obj.get("frequencyUnit") if obj.get("frequencyUnit") is not None else 'Day',
            "keepAtLeastOneBackup": obj.get("keepAtLeastOneBackup") if obj.get("keepAtLeastOneBackup") is not None else True,
            "lastExecutionTime": obj.get("lastExecutionTime"),
            "retentionPeriodInDays": obj.get("retentionPeriodInDays") if obj.get("retentionPeriodInDays") is not None else 30,
            "startTime": obj.get("startTime")
        })
        return _obj



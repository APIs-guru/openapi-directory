# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInnerProperties(BaseModel):
    """
    VnetRoute resource specific properties
    """ # noqa: E501
    end_address: Optional[StrictStr] = Field(default=None, description="The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.", alias="endAddress")
    route_type: Optional[StrictStr] = Field(default=None, description="The type of route this is: DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918 INHERITED - Routes inherited from the real Virtual Network routes STATIC - Static route set on the app only  These values will be used for syncing an app's routes with those from a Virtual Network.", alias="routeType")
    start_address: Optional[StrictStr] = Field(default=None, description="The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.", alias="startAddress")
    __properties: ClassVar[List[str]] = ["endAddress", "routeType", "startAddress"]

    @field_validator('route_type')
    def route_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'INHERITED', 'STATIC']):
            raise ValueError("must be one of enum values ('DEFAULT', 'INHERITED', 'STATIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endAddress": obj.get("endAddress"),
            "routeType": obj.get("routeType"),
            "startAddress": obj.get("startAddress")
        })
        return _obj



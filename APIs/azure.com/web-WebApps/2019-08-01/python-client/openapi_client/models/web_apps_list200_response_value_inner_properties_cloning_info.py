# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebAppsList200ResponseValueInnerPropertiesCloningInfo(BaseModel):
    """
    Information needed for cloning operation.
    """ # noqa: E501
    app_settings_overrides: Optional[Dict[str, StrictStr]] = Field(default=None, description="Application setting overrides for cloned app. If specified, these settings override the settings cloned  from source app. Otherwise, application settings from source app are retained.", alias="appSettingsOverrides")
    clone_custom_host_names: Optional[StrictBool] = Field(default=None, description="<code>true</code> to clone custom hostnames from source app; otherwise, <code>false</code>.", alias="cloneCustomHostNames")
    clone_source_control: Optional[StrictBool] = Field(default=None, description="<code>true</code> to clone source control from source app; otherwise, <code>false</code>.", alias="cloneSourceControl")
    configure_load_balancing: Optional[StrictBool] = Field(default=None, description="<code>true</code> to configure load balancing for source and destination app.", alias="configureLoadBalancing")
    correlation_id: Optional[StrictStr] = Field(default=None, description="Correlation ID of cloning operation. This ID ties multiple cloning operations together to use the same snapshot.", alias="correlationId")
    hosting_environment: Optional[StrictStr] = Field(default=None, description="App Service Environment.", alias="hostingEnvironment")
    overwrite: Optional[StrictBool] = Field(default=None, description="<code>true</code> to overwrite destination app; otherwise, <code>false</code>.")
    source_web_app_id: StrictStr = Field(description="ARM resource ID of the source app. App resource ID is of the form  /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and  /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.", alias="sourceWebAppId")
    source_web_app_location: Optional[StrictStr] = Field(default=None, description="Location of source app ex: West US or North Europe", alias="sourceWebAppLocation")
    traffic_manager_profile_id: Optional[StrictStr] = Field(default=None, description="ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form  /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.", alias="trafficManagerProfileId")
    traffic_manager_profile_name: Optional[StrictStr] = Field(default=None, description="Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.", alias="trafficManagerProfileName")
    __properties: ClassVar[List[str]] = ["appSettingsOverrides", "cloneCustomHostNames", "cloneSourceControl", "configureLoadBalancing", "correlationId", "hostingEnvironment", "overwrite", "sourceWebAppId", "sourceWebAppLocation", "trafficManagerProfileId", "trafficManagerProfileName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebAppsList200ResponseValueInnerPropertiesCloningInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebAppsList200ResponseValueInnerPropertiesCloningInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appSettingsOverrides": obj.get("appSettingsOverrides"),
            "cloneCustomHostNames": obj.get("cloneCustomHostNames"),
            "cloneSourceControl": obj.get("cloneSourceControl"),
            "configureLoadBalancing": obj.get("configureLoadBalancing"),
            "correlationId": obj.get("correlationId"),
            "hostingEnvironment": obj.get("hostingEnvironment"),
            "overwrite": obj.get("overwrite"),
            "sourceWebAppId": obj.get("sourceWebAppId"),
            "sourceWebAppLocation": obj.get("sourceWebAppLocation"),
            "trafficManagerProfileId": obj.get("trafficManagerProfileId"),
            "trafficManagerProfileName": obj.get("trafficManagerProfileName")
        })
        return _obj



# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_cpu_statistics import ContainerCpuStatistics
from openapi_client.models.container_memory_statistics import ContainerMemoryStatistics
from openapi_client.models.container_network_interface_statistics import ContainerNetworkInterfaceStatistics
from typing import Optional, Set
from typing_extensions import Self

class ContainerInfo(BaseModel):
    """
    ContainerInfo
    """ # noqa: E501
    current_cpu_stats: Optional[ContainerCpuStatistics] = Field(default=None, alias="currentCpuStats")
    current_time_stamp: Optional[datetime] = Field(default=None, alias="currentTimeStamp")
    eth0: Optional[ContainerNetworkInterfaceStatistics] = None
    id: Optional[StrictStr] = None
    memory_stats: Optional[ContainerMemoryStatistics] = Field(default=None, alias="memoryStats")
    name: Optional[StrictStr] = None
    previous_cpu_stats: Optional[ContainerCpuStatistics] = Field(default=None, alias="previousCpuStats")
    previous_time_stamp: Optional[datetime] = Field(default=None, alias="previousTimeStamp")
    __properties: ClassVar[List[str]] = ["currentCpuStats", "currentTimeStamp", "eth0", "id", "memoryStats", "name", "previousCpuStats", "previousTimeStamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_cpu_stats
        if self.current_cpu_stats:
            _dict['currentCpuStats'] = self.current_cpu_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eth0
        if self.eth0:
            _dict['eth0'] = self.eth0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory_stats
        if self.memory_stats:
            _dict['memoryStats'] = self.memory_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_cpu_stats
        if self.previous_cpu_stats:
            _dict['previousCpuStats'] = self.previous_cpu_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentCpuStats": ContainerCpuStatistics.from_dict(obj["currentCpuStats"]) if obj.get("currentCpuStats") is not None else None,
            "currentTimeStamp": obj.get("currentTimeStamp"),
            "eth0": ContainerNetworkInterfaceStatistics.from_dict(obj["eth0"]) if obj.get("eth0") is not None else None,
            "id": obj.get("id"),
            "memoryStats": ContainerMemoryStatistics.from_dict(obj["memoryStats"]) if obj.get("memoryStats") is not None else None,
            "name": obj.get("name"),
            "previousCpuStats": ContainerCpuStatistics.from_dict(obj["previousCpuStats"]) if obj.get("previousCpuStats") is not None else None,
            "previousTimeStamp": obj.get("previousTimeStamp")
        })
        return _obj



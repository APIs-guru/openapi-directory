# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MSDeployCore(BaseModel):
    """
    MSDeploy ARM PUT core information
    """ # noqa: E501
    app_offline: Optional[StrictBool] = Field(default=None, description="Sets the AppOffline rule while the MSDeploy operation executes. Setting is <code>false</code> by default.", alias="appOffline")
    connection_string: Optional[StrictStr] = Field(default=None, description="SQL Connection String", alias="connectionString")
    db_type: Optional[StrictStr] = Field(default=None, description="Database Type", alias="dbType")
    package_uri: Optional[StrictStr] = Field(default=None, description="Package URI", alias="packageUri")
    set_parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="MSDeploy Parameters. Must not be set if SetParametersXmlFileUri is used.", alias="setParameters")
    set_parameters_xml_file_uri: Optional[StrictStr] = Field(default=None, description="URI of MSDeploy Parameters file. Must not be set if SetParameters is used.", alias="setParametersXmlFileUri")
    skip_app_data: Optional[StrictBool] = Field(default=None, description="Controls whether the MSDeploy operation skips the App_Data directory. If set to <code>true</code>, the existing App_Data directory on the destination will not be deleted, and any App_Data directory in the source will be ignored. Setting is <code>false</code> by default.", alias="skipAppData")
    __properties: ClassVar[List[str]] = ["appOffline", "connectionString", "dbType", "packageUri", "setParameters", "setParametersXmlFileUri", "skipAppData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MSDeployCore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MSDeployCore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appOffline": obj.get("appOffline"),
            "connectionString": obj.get("connectionString"),
            "dbType": obj.get("dbType"),
            "packageUri": obj.get("packageUri"),
            "setParameters": obj.get("setParameters"),
            "setParametersXmlFileUri": obj.get("setParametersXmlFileUri"),
            "skipAppData": obj.get("skipAppData")
        })
        return _obj



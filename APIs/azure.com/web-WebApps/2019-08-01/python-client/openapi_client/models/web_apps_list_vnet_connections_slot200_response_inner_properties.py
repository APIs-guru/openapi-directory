# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.web_apps_list_vnet_connections_slot200_response_inner_properties_routes_inner import WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner
from typing import Optional, Set
from typing_extensions import Self

class WebAppsListVnetConnectionsSlot200ResponseInnerProperties(BaseModel):
    """
    VnetInfo resource specific properties
    """ # noqa: E501
    cert_blob: Optional[StrictStr] = Field(default=None, description="A certificate file (.cer) blob containing the public key of the private key used to authenticate a  Point-To-Site VPN connection.", alias="certBlob")
    cert_thumbprint: Optional[StrictStr] = Field(default=None, description="The client certificate thumbprint.", alias="certThumbprint")
    dns_servers: Optional[StrictStr] = Field(default=None, description="DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.", alias="dnsServers")
    is_swift: Optional[StrictBool] = Field(default=None, description="Flag that is used to denote if this is VNET injection", alias="isSwift")
    resync_required: Optional[StrictBool] = Field(default=None, description="<code>true</code> if a resync is required; otherwise, <code>false</code>.", alias="resyncRequired")
    routes: Optional[List[WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner]] = Field(default=None, description="The routes that this Virtual Network connection uses.")
    vnet_resource_id: Optional[StrictStr] = Field(default=None, description="The Virtual Network's resource ID.", alias="vnetResourceId")
    __properties: ClassVar[List[str]] = ["certBlob", "certThumbprint", "dnsServers", "isSwift", "resyncRequired", "routes", "vnetResourceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebAppsListVnetConnectionsSlot200ResponseInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cert_thumbprint",
            "resync_required",
            "routes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item_routes in self.routes:
                if _item_routes:
                    _items.append(_item_routes.to_dict())
            _dict['routes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebAppsListVnetConnectionsSlot200ResponseInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certBlob": obj.get("certBlob"),
            "certThumbprint": obj.get("certThumbprint"),
            "dnsServers": obj.get("dnsServers"),
            "isSwift": obj.get("isSwift"),
            "resyncRequired": obj.get("resyncRequired"),
            "routes": [WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner.from_dict(_item) for _item in obj["routes"]] if obj.get("routes") is not None else None,
            "vnetResourceId": obj.get("vnetResourceId")
        })
        return _obj



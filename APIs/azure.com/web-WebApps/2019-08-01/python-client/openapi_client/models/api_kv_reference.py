# coding: utf-8

"""
    WebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiKVReference(BaseModel):
    """
    Description of site key vault references.
    """ # noqa: E501
    details: Optional[StrictStr] = None
    identity_type: Optional[StrictStr] = Field(default=None, alias="identityType")
    location: Optional[StrictStr] = None
    reference: Optional[StrictStr] = None
    secret_name: Optional[StrictStr] = Field(default=None, alias="secretName")
    secret_version: Optional[StrictStr] = Field(default=None, alias="secretVersion")
    source: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    vault_name: Optional[StrictStr] = Field(default=None, alias="vaultName")
    __properties: ClassVar[List[str]] = ["details", "identityType", "location", "reference", "secretName", "secretVersion", "source", "status", "vaultName"]

    @field_validator('identity_type')
    def identity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'SystemAssigned', 'UserAssigned']):
            raise ValueError("must be one of enum values ('None', 'SystemAssigned', 'UserAssigned')")
        return value

    @field_validator('location')
    def location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ApplicationSetting']):
            raise ValueError("must be one of enum values ('ApplicationSetting')")
        return value

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KeyVault']):
            raise ValueError("must be one of enum values ('KeyVault')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Initialized', 'Resolved', 'InvalidSyntax', 'MSINotEnabled', 'VaultNotFound', 'SecretNotFound', 'SecretVersionNotFound', 'AccessToKeyVaultDenied', 'OtherReasons']):
            raise ValueError("must be one of enum values ('Initialized', 'Resolved', 'InvalidSyntax', 'MSINotEnabled', 'VaultNotFound', 'SecretNotFound', 'SecretVersionNotFound', 'AccessToKeyVaultDenied', 'OtherReasons')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiKVReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiKVReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "details": obj.get("details"),
            "identityType": obj.get("identityType"),
            "location": obj.get("location"),
            "reference": obj.get("reference"),
            "secretName": obj.get("secretName"),
            "secretVersion": obj.get("secretVersion"),
            "source": obj.get("source"),
            "status": obj.get("status"),
            "vaultName": obj.get("vaultName")
        })
        return _obj



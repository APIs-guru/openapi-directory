# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ServerProperties(BaseModel):
    """
    Represents the properties of a server.
    """ # noqa: E501
    administrator_login: Optional[StrictStr] = Field(default=None, description="Administrator username for the server. Can only be specified when the server is being created (and is required for creation).", alias="administratorLogin")
    administrator_login_password: Optional[StrictStr] = Field(default=None, description="The administrator login password (required for server creation).", alias="administratorLoginPassword")
    external_administrator_login: Optional[StrictStr] = Field(default=None, description="The display name of the Azure Active Directory object with admin permissions on this server. Legacy parameter, always null. To check for Active Directory admin, query .../servers/{serverName}/administrators", alias="externalAdministratorLogin")
    external_administrator_sid: Optional[StrictStr] = Field(default=None, description="The ID of the Active Azure Directory object with admin permissions on this server. Legacy parameter, always null. To check for Active Directory admin, query .../servers/{serverName}/administrators.", alias="externalAdministratorSid")
    fully_qualified_domain_name: Optional[StrictStr] = Field(default=None, description="The fully qualified domain name of the server.", alias="fullyQualifiedDomainName")
    state: Optional[StrictStr] = Field(default=None, description="The state of the server.")
    version: Optional[StrictStr] = Field(default=None, description="The version of the server.")
    __properties: ClassVar[List[str]] = ["administratorLogin", "administratorLoginPassword", "externalAdministratorLogin", "externalAdministratorSid", "fullyQualifiedDomainName", "state", "version"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Ready', 'Disabled']):
            raise ValueError("must be one of enum values ('Ready', 'Disabled')")
        return value

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['2.0', '12.0']):
            raise ValueError("must be one of enum values ('2.0', '12.0')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "external_administrator_login",
            "external_administrator_sid",
            "fully_qualified_domain_name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administratorLogin": obj.get("administratorLogin"),
            "administratorLoginPassword": obj.get("administratorLoginPassword"),
            "externalAdministratorLogin": obj.get("externalAdministratorLogin"),
            "externalAdministratorSid": obj.get("externalAdministratorSid"),
            "fullyQualifiedDomainName": obj.get("fullyQualifiedDomainName"),
            "state": obj.get("state"),
            "version": obj.get("version")
        })
        return _obj



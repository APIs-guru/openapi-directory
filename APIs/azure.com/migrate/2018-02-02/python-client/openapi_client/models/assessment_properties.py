# coding: utf-8

"""
    Azure Migrate

    Move your workloads to Azure.

    The version of the OpenAPI document: 2018-02-02
    Contact: azuremigrate@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AssessmentProperties(BaseModel):
    """
    Properties of an assessment.
    """ # noqa: E501
    azure_hybrid_use_benefit: StrictStr = Field(description="AHUB discount on windows virtual machines.", alias="azureHybridUseBenefit")
    azure_location: StrictStr = Field(description="Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.", alias="azureLocation")
    azure_offer_code: StrictStr = Field(description="Offer code according to which cost estimation is done.", alias="azureOfferCode")
    azure_pricing_tier: StrictStr = Field(description="Pricing tier for Size evaluation.", alias="azurePricingTier")
    azure_storage_redundancy: StrictStr = Field(description="Storage Redundancy type offered by Azure.", alias="azureStorageRedundancy")
    confidence_rating_in_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence rating percentage for assessment. Can be in the range [0, 100].", alias="confidenceRatingInPercentage")
    created_timestamp: Optional[datetime] = Field(default=None, description="Time when this project was created. Date-Time represented in ISO-8601 format.", alias="createdTimestamp")
    currency: StrictStr = Field(description="Currency to report prices in.")
    discount_percentage: Union[StrictFloat, StrictInt] = Field(description="Custom discount percentage to be applied on final costs. Can be in the range [0, 100].", alias="discountPercentage")
    monthly_bandwidth_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.", alias="monthlyBandwidthCost")
    monthly_compute_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.", alias="monthlyComputeCost")
    monthly_storage_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.", alias="monthlyStorageCost")
    number_of_machines: Optional[StrictInt] = Field(default=None, description="Number of assessed machines part of this assessment.", alias="numberOfMachines")
    percentile: StrictStr = Field(description="Percentile of performance data used to recommend Azure size.")
    prices_timestamp: Optional[datetime] = Field(default=None, description="Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.", alias="pricesTimestamp")
    scaling_factor: Union[StrictFloat, StrictInt] = Field(description="Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.", alias="scalingFactor")
    sizing_criterion: StrictStr = Field(description="Assessment sizing criterion.", alias="sizingCriterion")
    stage: StrictStr = Field(description="User configurable setting that describes the status of the assessment.")
    status: Optional[StrictStr] = Field(default=None, description="Whether the assessment has been created and is valid.")
    time_range: StrictStr = Field(description="Time range of performance data used to recommend a size.", alias="timeRange")
    updated_timestamp: Optional[datetime] = Field(default=None, description="Time when this project was last updated. Date-Time represented in ISO-8601 format.", alias="updatedTimestamp")
    __properties: ClassVar[List[str]] = ["azureHybridUseBenefit", "azureLocation", "azureOfferCode", "azurePricingTier", "azureStorageRedundancy", "confidenceRatingInPercentage", "createdTimestamp", "currency", "discountPercentage", "monthlyBandwidthCost", "monthlyComputeCost", "monthlyStorageCost", "numberOfMachines", "percentile", "pricesTimestamp", "scalingFactor", "sizingCriterion", "stage", "status", "timeRange", "updatedTimestamp"]

    @field_validator('azure_hybrid_use_benefit')
    def azure_hybrid_use_benefit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'Yes', 'No']):
            raise ValueError("must be one of enum values ('Unknown', 'Yes', 'No')")
        return value

    @field_validator('azure_location')
    def azure_location_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'EastAsia', 'SoutheastAsia', 'AustraliaEast', 'AustraliaSoutheast', 'BrazilSouth', 'CanadaCentral', 'CanadaEast', 'WestEurope', 'NorthEurope', 'CentralIndia', 'SouthIndia', 'WestIndia', 'JapanEast', 'JapanWest', 'KoreaCentral', 'KoreaSouth', 'UkWest', 'UkSouth', 'NorthCentralUs', 'EastUs', 'WestUs2', 'SouthCentralUs', 'CentralUs', 'EastUs2', 'WestUs', 'WestCentralUs', 'GermanyCentral', 'GermanyNortheast', 'ChinaNorth', 'ChinaEast']):
            raise ValueError("must be one of enum values ('Unknown', 'EastAsia', 'SoutheastAsia', 'AustraliaEast', 'AustraliaSoutheast', 'BrazilSouth', 'CanadaCentral', 'CanadaEast', 'WestEurope', 'NorthEurope', 'CentralIndia', 'SouthIndia', 'WestIndia', 'JapanEast', 'JapanWest', 'KoreaCentral', 'KoreaSouth', 'UkWest', 'UkSouth', 'NorthCentralUs', 'EastUs', 'WestUs2', 'SouthCentralUs', 'CentralUs', 'EastUs2', 'WestUs', 'WestCentralUs', 'GermanyCentral', 'GermanyNortheast', 'ChinaNorth', 'ChinaEast')")
        return value

    @field_validator('azure_offer_code')
    def azure_offer_code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'MSAZR0003P', 'MSAZR0044P', 'MSAZR0059P', 'MSAZR0060P', 'MSAZR0062P', 'MSAZR0063P', 'MSAZR0064P', 'MSAZR0029P', 'MSAZR0022P', 'MSAZR0023P', 'MSAZR0148P', 'MSAZR0025P', 'MSAZR0036P', 'MSAZR0120P', 'MSAZR0121P', 'MSAZR0122P', 'MSAZR0123P', 'MSAZR0124P', 'MSAZR0125P', 'MSAZR0126P', 'MSAZR0127P', 'MSAZR0128P', 'MSAZR0129P', 'MSAZR0130P', 'MSAZR0111P', 'MSAZR0144P', 'MSAZR0149P', 'MSMCAZR0044P', 'MSMCAZR0059P', 'MSMCAZR0060P', 'MSMCAZR0063P', 'MSMCAZR0120P', 'MSMCAZR0121P', 'MSMCAZR0125P', 'MSMCAZR0128P', 'MSAZRDE0003P', 'MSAZRDE0044P']):
            raise ValueError("must be one of enum values ('Unknown', 'MSAZR0003P', 'MSAZR0044P', 'MSAZR0059P', 'MSAZR0060P', 'MSAZR0062P', 'MSAZR0063P', 'MSAZR0064P', 'MSAZR0029P', 'MSAZR0022P', 'MSAZR0023P', 'MSAZR0148P', 'MSAZR0025P', 'MSAZR0036P', 'MSAZR0120P', 'MSAZR0121P', 'MSAZR0122P', 'MSAZR0123P', 'MSAZR0124P', 'MSAZR0125P', 'MSAZR0126P', 'MSAZR0127P', 'MSAZR0128P', 'MSAZR0129P', 'MSAZR0130P', 'MSAZR0111P', 'MSAZR0144P', 'MSAZR0149P', 'MSMCAZR0044P', 'MSMCAZR0059P', 'MSMCAZR0060P', 'MSMCAZR0063P', 'MSMCAZR0120P', 'MSMCAZR0121P', 'MSMCAZR0125P', 'MSMCAZR0128P', 'MSAZRDE0003P', 'MSAZRDE0044P')")
        return value

    @field_validator('azure_pricing_tier')
    def azure_pricing_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Standard', 'Basic']):
            raise ValueError("must be one of enum values ('Standard', 'Basic')")
        return value

    @field_validator('azure_storage_redundancy')
    def azure_storage_redundancy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'LocallyRedundant', 'ZoneRedundant', 'GeoRedundant', 'ReadAccessGeoRedundant']):
            raise ValueError("must be one of enum values ('Unknown', 'LocallyRedundant', 'ZoneRedundant', 'GeoRedundant', 'ReadAccessGeoRedundant')")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unknown', 'USD', 'DKK', 'CAD', 'IDR', 'JPY', 'KRW', 'NZD', 'NOK', 'RUB', 'SAR', 'ZAR', 'SEK', 'TRY', 'GBP', 'MXN', 'MYR', 'INR', 'HKD', 'BRL', 'TWD', 'EUR', 'CHF', 'ARS', 'AUD', 'CNY']):
            raise ValueError("must be one of enum values ('Unknown', 'USD', 'DKK', 'CAD', 'IDR', 'JPY', 'KRW', 'NZD', 'NOK', 'RUB', 'SAR', 'ZAR', 'SEK', 'TRY', 'GBP', 'MXN', 'MYR', 'INR', 'HKD', 'BRL', 'TWD', 'EUR', 'CHF', 'ARS', 'AUD', 'CNY')")
        return value

    @field_validator('percentile')
    def percentile_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Percentile50', 'Percentile90', 'Percentile95', 'Percentile99']):
            raise ValueError("must be one of enum values ('Percentile50', 'Percentile90', 'Percentile95', 'Percentile99')")
        return value

    @field_validator('sizing_criterion')
    def sizing_criterion_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PerformanceBased', 'AsOnPremises']):
            raise ValueError("must be one of enum values ('PerformanceBased', 'AsOnPremises')")
        return value

    @field_validator('stage')
    def stage_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['InProgress', 'UnderReview', 'Approved']):
            raise ValueError("must be one of enum values ('InProgress', 'UnderReview', 'Approved')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Created', 'Updated', 'Running', 'Completed', 'Invalid']):
            raise ValueError("must be one of enum values ('Created', 'Updated', 'Running', 'Completed', 'Invalid')")
        return value

    @field_validator('time_range')
    def time_range_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Day', 'Week', 'Month']):
            raise ValueError("must be one of enum values ('Day', 'Week', 'Month')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssessmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "confidence_rating_in_percentage",
            "created_timestamp",
            "monthly_bandwidth_cost",
            "monthly_compute_cost",
            "monthly_storage_cost",
            "number_of_machines",
            "prices_timestamp",
            "status",
            "updated_timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if confidence_rating_in_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_rating_in_percentage is None and "confidence_rating_in_percentage" in self.model_fields_set:
            _dict['confidenceRatingInPercentage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssessmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureHybridUseBenefit": obj.get("azureHybridUseBenefit"),
            "azureLocation": obj.get("azureLocation"),
            "azureOfferCode": obj.get("azureOfferCode"),
            "azurePricingTier": obj.get("azurePricingTier"),
            "azureStorageRedundancy": obj.get("azureStorageRedundancy"),
            "confidenceRatingInPercentage": obj.get("confidenceRatingInPercentage"),
            "createdTimestamp": obj.get("createdTimestamp"),
            "currency": obj.get("currency"),
            "discountPercentage": obj.get("discountPercentage"),
            "monthlyBandwidthCost": obj.get("monthlyBandwidthCost"),
            "monthlyComputeCost": obj.get("monthlyComputeCost"),
            "monthlyStorageCost": obj.get("monthlyStorageCost"),
            "numberOfMachines": obj.get("numberOfMachines"),
            "percentile": obj.get("percentile"),
            "pricesTimestamp": obj.get("pricesTimestamp"),
            "scalingFactor": obj.get("scalingFactor"),
            "sizingCriterion": obj.get("sizingCriterion"),
            "stage": obj.get("stage"),
            "status": obj.get("status"),
            "timeRange": obj.get("timeRange"),
            "updatedTimestamp": obj.get("updatedTimestamp")
        })
        return _obj



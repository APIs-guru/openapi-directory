# coding: utf-8

"""
    Azure Migrate

    Move your workloads to Azure.

    The version of the OpenAPI document: 2018-02-02
    Contact: azuremigrate@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AssessedDisk(BaseModel):
    """
    A disk assessed for an assessment.
    """ # noqa: E501
    gigabytes_consumed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gigabytes of storage consumed by this disk.", alias="gigabytesConsumed")
    gigabytes_for_recommended_disk_size: Optional[StrictInt] = Field(default=None, description="Gigabytes of storage provided by the recommended Azure disk size.", alias="gigabytesForRecommendedDiskSize")
    gigabytes_provisioned: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gigabytes of storage provisioned for this disk.", alias="gigabytesProvisioned")
    megabytes_per_second_of_read: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Disk throughput in MegaBytes per second.", alias="megabytesPerSecondOfRead")
    megabytes_per_second_of_read_data_points_expected: Optional[StrictInt] = Field(default=None, description="Expected data points for MegaBytes per second of read.", alias="megabytesPerSecondOfReadDataPointsExpected")
    megabytes_per_second_of_read_data_points_received: Optional[StrictInt] = Field(default=None, description="Received data points for MegaBytes per second of read.", alias="megabytesPerSecondOfReadDataPointsReceived")
    megabytes_per_second_of_write: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Disk throughput in MegaBytes per second.", alias="megabytesPerSecondOfWrite")
    megabytes_per_second_of_write_data_points_expected: Optional[StrictInt] = Field(default=None, description="Expected data points for MegaBytes per second of write.", alias="megabytesPerSecondOfWriteDataPointsExpected")
    megabytes_per_second_of_write_data_points_received: Optional[StrictInt] = Field(default=None, description="Received data points for MegaBytes per second of write.", alias="megabytesPerSecondOfWriteDataPointsReceived")
    monthly_storage_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated aggregate storage cost for a 31-day month for this disk.", alias="monthlyStorageCost")
    name: Optional[StrictStr] = Field(default=None, description="Name of the assessed disk.")
    number_of_read_operations_per_second: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of read operations per second for the disk.", alias="numberOfReadOperationsPerSecond")
    number_of_read_operations_per_second_data_points_expected: Optional[StrictInt] = Field(default=None, description="Expected number of data points for read operations per second.", alias="numberOfReadOperationsPerSecondDataPointsExpected")
    number_of_read_operations_per_second_data_points_received: Optional[StrictInt] = Field(default=None, description="Received number of data points for read operations per second.", alias="numberOfReadOperationsPerSecondDataPointsReceived")
    number_of_write_operations_per_second: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of read and write operations per second for the disk.", alias="numberOfWriteOperationsPerSecond")
    number_of_write_operations_per_second_data_points_expected: Optional[StrictInt] = Field(default=None, description="Expected number of data points for write operations per second.", alias="numberOfWriteOperationsPerSecondDataPointsExpected")
    number_of_write_operations_per_second_data_points_received: Optional[StrictInt] = Field(default=None, description="Received number of data points for write operations per second.", alias="numberOfWriteOperationsPerSecondDataPointsReceived")
    recommended_disk_size: Optional[StrictStr] = Field(default=None, description="Recommended Azure size for the disk, given utilization data and preferences set on Assessment.", alias="recommendedDiskSize")
    recommended_disk_type: Optional[StrictStr] = Field(default=None, description="Storage type selected for this disk.", alias="recommendedDiskType")
    suitability: Optional[StrictStr] = Field(default=None, description="Whether this disk is suitable for Azure.")
    suitability_explanation: Optional[StrictStr] = Field(default=None, description="If disk is suitable, this explains the reasons and mitigation steps.", alias="suitabilityExplanation")
    __properties: ClassVar[List[str]] = ["gigabytesConsumed", "gigabytesForRecommendedDiskSize", "gigabytesProvisioned", "megabytesPerSecondOfRead", "megabytesPerSecondOfReadDataPointsExpected", "megabytesPerSecondOfReadDataPointsReceived", "megabytesPerSecondOfWrite", "megabytesPerSecondOfWriteDataPointsExpected", "megabytesPerSecondOfWriteDataPointsReceived", "monthlyStorageCost", "name", "numberOfReadOperationsPerSecond", "numberOfReadOperationsPerSecondDataPointsExpected", "numberOfReadOperationsPerSecondDataPointsReceived", "numberOfWriteOperationsPerSecond", "numberOfWriteOperationsPerSecondDataPointsExpected", "numberOfWriteOperationsPerSecondDataPointsReceived", "recommendedDiskSize", "recommendedDiskType", "suitability", "suitabilityExplanation"]

    @field_validator('recommended_disk_size')
    def recommended_disk_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Standard_S4', 'Standard_S6', 'Standard_S10', 'Standard_S20', 'Standard_S30', 'Standard_S40', 'Standard_S50', 'Premium_P4', 'Premium_P6', 'Premium_P10', 'Premium_P20', 'Premium_P30', 'Premium_P40', 'Premium_P50']):
            raise ValueError("must be one of enum values ('Unknown', 'Standard_S4', 'Standard_S6', 'Standard_S10', 'Standard_S20', 'Standard_S30', 'Standard_S40', 'Standard_S50', 'Premium_P4', 'Premium_P6', 'Premium_P10', 'Premium_P20', 'Premium_P30', 'Premium_P40', 'Premium_P50')")
        return value

    @field_validator('recommended_disk_type')
    def recommended_disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Standard', 'Premium']):
            raise ValueError("must be one of enum values ('Unknown', 'Standard', 'Premium')")
        return value

    @field_validator('suitability')
    def suitability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'NotSuitable', 'Suitable', 'ConditionallySuitable', 'ReadinessUnknown']):
            raise ValueError("must be one of enum values ('Unknown', 'NotSuitable', 'Suitable', 'ConditionallySuitable', 'ReadinessUnknown')")
        return value

    @field_validator('suitability_explanation')
    def suitability_explanation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'NotApplicable', 'DiskSizeGreaterThanSupported', 'NoSuitableDiskSizeForIops', 'NoSuitableDiskSizeForThroughput', 'NoDiskSizeFoundInSelectedLocation', 'NoDiskSizeFoundForSelectedRedundancy', 'InternalErrorOccurredForDiskEvaluation']):
            raise ValueError("must be one of enum values ('Unknown', 'NotApplicable', 'DiskSizeGreaterThanSupported', 'NoSuitableDiskSizeForIops', 'NoSuitableDiskSizeForThroughput', 'NoDiskSizeFoundInSelectedLocation', 'NoDiskSizeFoundForSelectedRedundancy', 'InternalErrorOccurredForDiskEvaluation')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssessedDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gigabytes_consumed",
            "gigabytes_for_recommended_disk_size",
            "gigabytes_provisioned",
            "megabytes_per_second_of_read",
            "megabytes_per_second_of_read_data_points_expected",
            "megabytes_per_second_of_read_data_points_received",
            "megabytes_per_second_of_write",
            "megabytes_per_second_of_write_data_points_expected",
            "megabytes_per_second_of_write_data_points_received",
            "monthly_storage_cost",
            "name",
            "number_of_read_operations_per_second",
            "number_of_read_operations_per_second_data_points_expected",
            "number_of_read_operations_per_second_data_points_received",
            "number_of_write_operations_per_second",
            "number_of_write_operations_per_second_data_points_expected",
            "number_of_write_operations_per_second_data_points_received",
            "recommended_disk_size",
            "recommended_disk_type",
            "suitability",
            "suitability_explanation",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if megabytes_per_second_of_read_data_points_expected (nullable) is None
        # and model_fields_set contains the field
        if self.megabytes_per_second_of_read_data_points_expected is None and "megabytes_per_second_of_read_data_points_expected" in self.model_fields_set:
            _dict['megabytesPerSecondOfReadDataPointsExpected'] = None

        # set to None if megabytes_per_second_of_read_data_points_received (nullable) is None
        # and model_fields_set contains the field
        if self.megabytes_per_second_of_read_data_points_received is None and "megabytes_per_second_of_read_data_points_received" in self.model_fields_set:
            _dict['megabytesPerSecondOfReadDataPointsReceived'] = None

        # set to None if megabytes_per_second_of_write_data_points_expected (nullable) is None
        # and model_fields_set contains the field
        if self.megabytes_per_second_of_write_data_points_expected is None and "megabytes_per_second_of_write_data_points_expected" in self.model_fields_set:
            _dict['megabytesPerSecondOfWriteDataPointsExpected'] = None

        # set to None if megabytes_per_second_of_write_data_points_received (nullable) is None
        # and model_fields_set contains the field
        if self.megabytes_per_second_of_write_data_points_received is None and "megabytes_per_second_of_write_data_points_received" in self.model_fields_set:
            _dict['megabytesPerSecondOfWriteDataPointsReceived'] = None

        # set to None if number_of_read_operations_per_second_data_points_expected (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_read_operations_per_second_data_points_expected is None and "number_of_read_operations_per_second_data_points_expected" in self.model_fields_set:
            _dict['numberOfReadOperationsPerSecondDataPointsExpected'] = None

        # set to None if number_of_read_operations_per_second_data_points_received (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_read_operations_per_second_data_points_received is None and "number_of_read_operations_per_second_data_points_received" in self.model_fields_set:
            _dict['numberOfReadOperationsPerSecondDataPointsReceived'] = None

        # set to None if number_of_write_operations_per_second_data_points_expected (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_write_operations_per_second_data_points_expected is None and "number_of_write_operations_per_second_data_points_expected" in self.model_fields_set:
            _dict['numberOfWriteOperationsPerSecondDataPointsExpected'] = None

        # set to None if number_of_write_operations_per_second_data_points_received (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_write_operations_per_second_data_points_received is None and "number_of_write_operations_per_second_data_points_received" in self.model_fields_set:
            _dict['numberOfWriteOperationsPerSecondDataPointsReceived'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssessedDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gigabytesConsumed": obj.get("gigabytesConsumed"),
            "gigabytesForRecommendedDiskSize": obj.get("gigabytesForRecommendedDiskSize"),
            "gigabytesProvisioned": obj.get("gigabytesProvisioned"),
            "megabytesPerSecondOfRead": obj.get("megabytesPerSecondOfRead"),
            "megabytesPerSecondOfReadDataPointsExpected": obj.get("megabytesPerSecondOfReadDataPointsExpected"),
            "megabytesPerSecondOfReadDataPointsReceived": obj.get("megabytesPerSecondOfReadDataPointsReceived"),
            "megabytesPerSecondOfWrite": obj.get("megabytesPerSecondOfWrite"),
            "megabytesPerSecondOfWriteDataPointsExpected": obj.get("megabytesPerSecondOfWriteDataPointsExpected"),
            "megabytesPerSecondOfWriteDataPointsReceived": obj.get("megabytesPerSecondOfWriteDataPointsReceived"),
            "monthlyStorageCost": obj.get("monthlyStorageCost"),
            "name": obj.get("name"),
            "numberOfReadOperationsPerSecond": obj.get("numberOfReadOperationsPerSecond"),
            "numberOfReadOperationsPerSecondDataPointsExpected": obj.get("numberOfReadOperationsPerSecondDataPointsExpected"),
            "numberOfReadOperationsPerSecondDataPointsReceived": obj.get("numberOfReadOperationsPerSecondDataPointsReceived"),
            "numberOfWriteOperationsPerSecond": obj.get("numberOfWriteOperationsPerSecond"),
            "numberOfWriteOperationsPerSecondDataPointsExpected": obj.get("numberOfWriteOperationsPerSecondDataPointsExpected"),
            "numberOfWriteOperationsPerSecondDataPointsReceived": obj.get("numberOfWriteOperationsPerSecondDataPointsReceived"),
            "recommendedDiskSize": obj.get("recommendedDiskSize"),
            "recommendedDiskType": obj.get("recommendedDiskType"),
            "suitability": obj.get("suitability"),
            "suitabilityExplanation": obj.get("suitabilityExplanation")
        })
        return _obj



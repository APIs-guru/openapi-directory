# coding: utf-8

"""
    Azure Migrate V2

    Assess your workloads for Azure.

    The version of the OpenAPI document: 2019-10-01
    Contact: azuremigrate@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProjectProperties(BaseModel):
    """
    Properties of a project.
    """ # noqa: E501
    assessment_solution_id: Optional[StrictStr] = Field(default=None, description="Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.", alias="assessmentSolutionId")
    created_timestamp: Optional[datetime] = Field(default=None, description="Time when this project was created. Date-Time represented in ISO-8601 format.", alias="createdTimestamp")
    customer_workspace_id: Optional[StrictStr] = Field(default=None, description="The ARM id of service map workspace created by customer.", alias="customerWorkspaceId")
    customer_workspace_location: Optional[StrictStr] = Field(default=None, description="Location of service map workspace created by customer.", alias="customerWorkspaceLocation")
    last_assessment_timestamp: Optional[datetime] = Field(default=None, description="Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.", alias="lastAssessmentTimestamp")
    number_of_assessments: Optional[StrictInt] = Field(default=None, description="Number of assessments created in the project.", alias="numberOfAssessments")
    number_of_groups: Optional[StrictInt] = Field(default=None, description="Number of groups created in the project.", alias="numberOfGroups")
    number_of_machines: Optional[StrictInt] = Field(default=None, description="Number of machines in the project.", alias="numberOfMachines")
    project_status: Optional[StrictStr] = Field(default=None, description="Assessment project status.", alias="projectStatus")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the project.", alias="provisioningState")
    service_endpoint: Optional[StrictStr] = Field(default=None, description="Endpoint at which the collector agent can call agent REST API.", alias="serviceEndpoint")
    updated_timestamp: Optional[datetime] = Field(default=None, description="Time when this project was last updated. Date-Time represented in ISO-8601 format.", alias="updatedTimestamp")
    __properties: ClassVar[List[str]] = ["assessmentSolutionId", "createdTimestamp", "customerWorkspaceId", "customerWorkspaceLocation", "lastAssessmentTimestamp", "numberOfAssessments", "numberOfGroups", "numberOfMachines", "projectStatus", "provisioningState", "serviceEndpoint", "updatedTimestamp"]

    @field_validator('project_status')
    def project_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Inactive']):
            raise ValueError("must be one of enum values ('Active', 'Inactive')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Creating', 'Deleting', 'Failed', 'Moving', 'Succeeded']):
            raise ValueError("must be one of enum values ('Accepted', 'Creating', 'Deleting', 'Failed', 'Moving', 'Succeeded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_timestamp",
            "last_assessment_timestamp",
            "number_of_assessments",
            "number_of_groups",
            "number_of_machines",
            "provisioning_state",
            "service_endpoint",
            "updated_timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_assessment_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_assessment_timestamp is None and "last_assessment_timestamp" in self.model_fields_set:
            _dict['lastAssessmentTimestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assessmentSolutionId": obj.get("assessmentSolutionId"),
            "createdTimestamp": obj.get("createdTimestamp"),
            "customerWorkspaceId": obj.get("customerWorkspaceId"),
            "customerWorkspaceLocation": obj.get("customerWorkspaceLocation"),
            "lastAssessmentTimestamp": obj.get("lastAssessmentTimestamp"),
            "numberOfAssessments": obj.get("numberOfAssessments"),
            "numberOfGroups": obj.get("numberOfGroups"),
            "numberOfMachines": obj.get("numberOfMachines"),
            "projectStatus": obj.get("projectStatus"),
            "provisioningState": obj.get("provisioningState"),
            "serviceEndpoint": obj.get("serviceEndpoint"),
            "updatedTimestamp": obj.get("updatedTimestamp")
        })
        return _obj



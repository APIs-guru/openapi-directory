# coding: utf-8

"""
    Azure Migrate V2

    Assess your workloads for Azure.

    The version of the OpenAPI document: 2019-10-01
    Contact: azuremigrate@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.disk import Disk
from openapi_client.models.network_adapter import NetworkAdapter
from typing import Optional, Set
from typing_extensions import Self

class MachineProperties(BaseModel):
    """
    Properties of a machine.
    """ # noqa: E501
    boot_type: Optional[StrictStr] = Field(default=None, description="Boot type of the machine.", alias="bootType")
    created_timestamp: Optional[datetime] = Field(default=None, description="Time when this machine was created. Date-Time represented in ISO-8601 format.", alias="createdTimestamp")
    datacenter_management_server_arm_id: Optional[StrictStr] = Field(default=None, description="ARM ID of the data center as tracked by the Microsoft.OffAzure.", alias="datacenterManagementServerArmId")
    datacenter_management_server_name: Optional[StrictStr] = Field(default=None, description="Name of the server hosting the datacenter management solution.", alias="datacenterManagementServerName")
    description: Optional[StrictStr] = Field(default=None, description="Description of the machine")
    discovery_machine_arm_id: Optional[StrictStr] = Field(default=None, description="ARM ID of the machine as tracked by the Microsoft.OffAzure.", alias="discoveryMachineArmId")
    disks: Optional[Dict[str, Disk]] = Field(default=None, description="Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object")
    display_name: Optional[StrictStr] = Field(default=None, description="User readable name of the machine as defined by the user in their private datacenter.", alias="displayName")
    groups: Optional[List[StrictStr]] = Field(default=None, description="List of references to the groups that the machine is member of.")
    megabytes_of_memory: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Memory in Megabytes.", alias="megabytesOfMemory")
    network_adapters: Optional[Dict[str, NetworkAdapter]] = Field(default=None, description="Dictionary of network adapters attached to the machine. Key is ID of network adapter. Value is a network adapter object", alias="networkAdapters")
    number_of_cores: Optional[StrictInt] = Field(default=None, description="Processor count.", alias="numberOfCores")
    operating_system_name: Optional[StrictStr] = Field(default=None, description="Operating System name of the machine.", alias="operatingSystemName")
    operating_system_type: Optional[StrictStr] = Field(default=None, description="Operating System type of the machine.", alias="operatingSystemType")
    operating_system_version: Optional[StrictStr] = Field(default=None, description="Operating System version of the machine.", alias="operatingSystemVersion")
    updated_timestamp: Optional[datetime] = Field(default=None, description="Time when this machine was last updated. Date-Time represented in ISO-8601 format.", alias="updatedTimestamp")
    __properties: ClassVar[List[str]] = ["bootType", "createdTimestamp", "datacenterManagementServerArmId", "datacenterManagementServerName", "description", "discoveryMachineArmId", "disks", "displayName", "groups", "megabytesOfMemory", "networkAdapters", "numberOfCores", "operatingSystemName", "operatingSystemType", "operatingSystemVersion", "updatedTimestamp"]

    @field_validator('boot_type')
    def boot_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'EFI', 'BIOS']):
            raise ValueError("must be one of enum values ('Unknown', 'EFI', 'BIOS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MachineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "boot_type",
            "created_timestamp",
            "datacenter_management_server_arm_id",
            "datacenter_management_server_name",
            "description",
            "discovery_machine_arm_id",
            "disks",
            "display_name",
            "groups",
            "megabytes_of_memory",
            "network_adapters",
            "number_of_cores",
            "operating_system_name",
            "operating_system_type",
            "operating_system_version",
            "updated_timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in disks (dict)
        _field_dict = {}
        if self.disks:
            for _key_disks in self.disks:
                if self.disks[_key_disks]:
                    _field_dict[_key_disks] = self.disks[_key_disks].to_dict()
            _dict['disks'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in network_adapters (dict)
        _field_dict = {}
        if self.network_adapters:
            for _key_network_adapters in self.network_adapters:
                if self.network_adapters[_key_network_adapters]:
                    _field_dict[_key_network_adapters] = self.network_adapters[_key_network_adapters].to_dict()
            _dict['networkAdapters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MachineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bootType": obj.get("bootType"),
            "createdTimestamp": obj.get("createdTimestamp"),
            "datacenterManagementServerArmId": obj.get("datacenterManagementServerArmId"),
            "datacenterManagementServerName": obj.get("datacenterManagementServerName"),
            "description": obj.get("description"),
            "discoveryMachineArmId": obj.get("discoveryMachineArmId"),
            "disks": dict(
                (_k, Disk.from_dict(_v))
                for _k, _v in obj["disks"].items()
            )
            if obj.get("disks") is not None
            else None,
            "displayName": obj.get("displayName"),
            "groups": obj.get("groups"),
            "megabytesOfMemory": obj.get("megabytesOfMemory"),
            "networkAdapters": dict(
                (_k, NetworkAdapter.from_dict(_v))
                for _k, _v in obj["networkAdapters"].items()
            )
            if obj.get("networkAdapters") is not None
            else None,
            "numberOfCores": obj.get("numberOfCores"),
            "operatingSystemName": obj.get("operatingSystemName"),
            "operatingSystemType": obj.get("operatingSystemType"),
            "operatingSystemVersion": obj.get("operatingSystemVersion"),
            "updatedTimestamp": obj.get("updatedTimestamp")
        })
        return _obj



# coding: utf-8

"""
    Azure Migrate V2

    Assess your workloads for Azure.

    The version of the OpenAPI document: 2019-10-01
    Contact: azuremigrate@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.collector_agent_properties import CollectorAgentProperties
from typing import Optional, Set
from typing_extensions import Self

class CollectorProperties(BaseModel):
    """
    CollectorProperties
    """ # noqa: E501
    agent_properties: Optional[CollectorAgentProperties] = Field(default=None, alias="agentProperties")
    created_timestamp: Optional[StrictStr] = Field(default=None, description="Time when this collector was created. Date-Time represented in ISO-8601 format.", alias="createdTimestamp")
    discovery_site_id: Optional[StrictStr] = Field(default=None, description="The ARM id of the discovery service site.", alias="discoverySiteId")
    updated_timestamp: Optional[StrictStr] = Field(default=None, description="Time when this collector was updated. Date-Time represented in ISO-8601 format.", alias="updatedTimestamp")
    __properties: ClassVar[List[str]] = ["agentProperties", "createdTimestamp", "discoverySiteId", "updatedTimestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectorProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_timestamp",
            "updated_timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agent_properties
        if self.agent_properties:
            _dict['agentProperties'] = self.agent_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectorProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentProperties": CollectorAgentProperties.from_dict(obj["agentProperties"]) if obj.get("agentProperties") is not None else None,
            "createdTimestamp": obj.get("createdTimestamp"),
            "discoverySiteId": obj.get("discoverySiteId"),
            "updatedTimestamp": obj.get("updatedTimestamp")
        })
        return _obj



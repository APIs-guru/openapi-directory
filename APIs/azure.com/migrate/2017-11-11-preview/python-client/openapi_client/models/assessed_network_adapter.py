# coding: utf-8

"""
    Azure Migrate

    Move your workloads to Azure.

    The version of the OpenAPI document: 2017-11-11-preview
    Contact: azuremigrate@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AssessedNetworkAdapter(BaseModel):
    """
    A network adapter assessed for an assessment.
    """ # noqa: E501
    ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="List of IP Addresses on the network adapter.", alias="ipAddresses")
    mac_address: Optional[StrictStr] = Field(default=None, description="MAC Address of the network adapter.", alias="macAddress")
    megabytes_per_second_received: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Adapter throughput for incoming traffic in MegaBytes per second.", alias="megabytesPerSecondReceived")
    megabytes_per_second_transmitted: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Adapter throughput for outgoing traffic in MegaBytes per second.", alias="megabytesPerSecondTransmitted")
    monthly_bandwidth_costs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly cost estimate for network bandwidth used by this network adapter.", alias="monthlyBandwidthCosts")
    net_gigabytes_transmitted_per_month: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gigabytes transmitted through this adapter each month.", alias="netGigabytesTransmittedPerMonth")
    suitability: Optional[StrictStr] = Field(default=None, description="Whether this adapter is suitable for Azure.")
    suitability_explanation: Optional[StrictStr] = Field(default=None, description="If network adapter is suitable, this explains the reasons and mitigation steps.", alias="suitabilityExplanation")
    __properties: ClassVar[List[str]] = ["ipAddresses", "macAddress", "megabytesPerSecondReceived", "megabytesPerSecondTransmitted", "monthlyBandwidthCosts", "netGigabytesTransmittedPerMonth", "suitability", "suitabilityExplanation"]

    @field_validator('suitability')
    def suitability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'NotSuitable', 'Suitable', 'ConditionallySuitable']):
            raise ValueError("must be one of enum values ('Unknown', 'NotSuitable', 'Suitable', 'ConditionallySuitable')")
        return value

    @field_validator('suitability_explanation')
    def suitability_explanation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'NotApplicable', 'InternalErrorOccured']):
            raise ValueError("must be one of enum values ('Unknown', 'NotApplicable', 'InternalErrorOccured')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssessedNetworkAdapter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ip_addresses",
            "mac_address",
            "megabytes_per_second_received",
            "megabytes_per_second_transmitted",
            "monthly_bandwidth_costs",
            "suitability",
            "suitability_explanation",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssessedNetworkAdapter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipAddresses": obj.get("ipAddresses"),
            "macAddress": obj.get("macAddress"),
            "megabytesPerSecondReceived": obj.get("megabytesPerSecondReceived"),
            "megabytesPerSecondTransmitted": obj.get("megabytesPerSecondTransmitted"),
            "monthlyBandwidthCosts": obj.get("monthlyBandwidthCosts"),
            "netGigabytesTransmittedPerMonth": obj.get("netGigabytesTransmittedPerMonth"),
            "suitability": obj.get("suitability"),
            "suitabilityExplanation": obj.get("suitabilityExplanation")
        })
        return _obj



# coding: utf-8

"""
    DeletedWebApps API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeletedSite(BaseModel):
    """
    A deleted app.
    """ # noqa: E501
    deleted_timestamp: Optional[StrictStr] = Field(default=None, description="Time in UTC when the app was deleted.", alias="deletedTimestamp")
    id: Optional[StrictInt] = Field(default=None, description="Numeric id for the deleted site")
    name: Optional[StrictStr] = Field(default=None, description="Name of the deleted site")
    resource_group: Optional[StrictStr] = Field(default=None, description="ResourceGroup that contained the deleted site", alias="resourceGroup")
    slot: Optional[StrictStr] = Field(default=None, description="Slot of the deleted site")
    subscription: Optional[StrictStr] = Field(default=None, description="Subscription containing the deleted site")
    __properties: ClassVar[List[str]] = ["deletedTimestamp", "id", "name", "resourceGroup", "slot", "subscription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeletedSite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "deleted_timestamp",
            "name",
            "resource_group",
            "slot",
            "subscription",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeletedSite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deletedTimestamp": obj.get("deletedTimestamp"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "resourceGroup": obj.get("resourceGroup"),
            "slot": obj.get("slot"),
            "subscription": obj.get("subscription")
        })
        return _obj



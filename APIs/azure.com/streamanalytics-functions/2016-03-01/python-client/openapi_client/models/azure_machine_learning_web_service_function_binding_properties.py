# coding: utf-8

"""
    StreamAnalyticsManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_machine_learning_web_service_inputs import AzureMachineLearningWebServiceInputs
from openapi_client.models.azure_machine_learning_web_service_output_column import AzureMachineLearningWebServiceOutputColumn
from typing import Optional, Set
from typing_extensions import Self

class AzureMachineLearningWebServiceFunctionBindingProperties(BaseModel):
    """
    The binding properties associated with an Azure Machine learning web service.
    """ # noqa: E501
    api_key: Optional[StrictStr] = Field(default=None, description="The API key used to authenticate with Request-Response endpoint.", alias="apiKey")
    batch_size: Optional[StrictInt] = Field(default=None, description="Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000.", alias="batchSize")
    endpoint: Optional[StrictStr] = Field(default=None, description="The Request-Response execute endpoint of the Azure Machine Learning web service. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs")
    inputs: Optional[AzureMachineLearningWebServiceInputs] = None
    outputs: Optional[List[AzureMachineLearningWebServiceOutputColumn]] = Field(default=None, description="A list of outputs from the Azure Machine Learning web service endpoint execution.")
    __properties: ClassVar[List[str]] = ["apiKey", "batchSize", "endpoint", "inputs", "outputs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureMachineLearningWebServiceFunctionBindingProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inputs
        if self.inputs:
            _dict['inputs'] = self.inputs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureMachineLearningWebServiceFunctionBindingProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiKey": obj.get("apiKey"),
            "batchSize": obj.get("batchSize"),
            "endpoint": obj.get("endpoint"),
            "inputs": AzureMachineLearningWebServiceInputs.from_dict(obj["inputs"]) if obj.get("inputs") is not None else None,
            "outputs": [AzureMachineLearningWebServiceOutputColumn.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Face Client

    An API for face detection, verification, and identification.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FindSimilarRequest(BaseModel):
    """
    Request body for find similar operation.
    """ # noqa: E501
    face_id: StrictStr = Field(description="FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call", alias="faceId")
    face_ids: Optional[Annotated[List[StrictStr], Field(max_length=1000)]] = Field(default=None, description="An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.", alias="faceIds")
    face_list_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="An existing user-specified unique candidate face list, created in Face List - Create a Face List. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.", alias="faceListId")
    large_face_list_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="An existing user-specified unique candidate large face list, created in LargeFaceList - Create. Large face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.", alias="largeFaceListId")
    max_num_of_candidates_returned: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = Field(default=None, description="The number of top similar faces returned. The valid range is [1, 1000].", alias="maxNumOfCandidatesReturned")
    mode: Optional[StrictStr] = Field(default='matchPerson', description="Similar face searching mode. It can be \"matchPerson\" or \"matchFace\".")
    __properties: ClassVar[List[str]] = ["faceId", "faceIds", "faceListId", "largeFaceListId", "maxNumOfCandidatesReturned", "mode"]

    @field_validator('face_list_id')
    def face_list_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9-_]+$/")
        return value

    @field_validator('large_face_list_id')
    def large_face_list_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9-_]+$/")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['matchPerson', 'matchFace']):
            raise ValueError("must be one of enum values ('matchPerson', 'matchFace')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindSimilarRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindSimilarRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "faceId": obj.get("faceId"),
            "faceIds": obj.get("faceIds"),
            "faceListId": obj.get("faceListId"),
            "largeFaceListId": obj.get("largeFaceListId"),
            "maxNumOfCandidatesReturned": obj.get("maxNumOfCandidatesReturned"),
            "mode": obj.get("mode") if obj.get("mode") is not None else 'matchPerson'
        })
        return _obj



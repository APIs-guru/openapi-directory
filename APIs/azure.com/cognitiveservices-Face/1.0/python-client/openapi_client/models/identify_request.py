# coding: utf-8

"""
    Face Client

    An API for face detection, verification, and identification.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class IdentifyRequest(BaseModel):
    """
    Request body for identify face operation.
    """ # noqa: E501
    confidence_threshold: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="A number ranging from 0 to 1 indicating a level of confidence associated with a property.", alias="confidenceThreshold")
    face_ids: Annotated[List[StrictStr], Field(max_length=10)] = Field(description="Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].", alias="faceIds")
    large_person_group_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="LargePersonGroupId of the target large person group, created by LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.", alias="largePersonGroupId")
    max_num_of_candidates_returned: Optional[Annotated[int, Field(le=5, strict=True, ge=1)]] = Field(default=None, description="The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).", alias="maxNumOfCandidatesReturned")
    person_group_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="PersonGroupId of the target person group, created by PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.", alias="personGroupId")
    __properties: ClassVar[List[str]] = ["confidenceThreshold", "faceIds", "largePersonGroupId", "maxNumOfCandidatesReturned", "personGroupId"]

    @field_validator('large_person_group_id')
    def large_person_group_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9-_]+$/")
        return value

    @field_validator('person_group_id')
    def person_group_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9-_]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentifyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentifyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidenceThreshold": obj.get("confidenceThreshold"),
            "faceIds": obj.get("faceIds"),
            "largePersonGroupId": obj.get("largePersonGroupId"),
            "maxNumOfCandidatesReturned": obj.get("maxNumOfCandidatesReturned"),
            "personGroupId": obj.get("personGroupId")
        })
        return _obj



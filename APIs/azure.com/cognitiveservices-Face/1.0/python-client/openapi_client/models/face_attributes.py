# coding: utf-8

"""
    Face Client

    An API for face detection, verification, and identification.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.accessory import Accessory
from openapi_client.models.blur import Blur
from openapi_client.models.emotion import Emotion
from openapi_client.models.exposure import Exposure
from openapi_client.models.facial_hair import FacialHair
from openapi_client.models.hair import Hair
from openapi_client.models.head_pose import HeadPose
from openapi_client.models.makeup import Makeup
from openapi_client.models.noise import Noise
from openapi_client.models.occlusion import Occlusion
from typing import Optional, Set
from typing_extensions import Self

class FaceAttributes(BaseModel):
    """
    Face Attributes
    """ # noqa: E501
    accessories: Optional[List[Accessory]] = Field(default=None, description="Properties describing any accessories on a given face.")
    age: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Age in years")
    blur: Optional[Blur] = None
    emotion: Optional[Emotion] = None
    exposure: Optional[Exposure] = None
    facial_hair: Optional[FacialHair] = Field(default=None, alias="facialHair")
    gender: Optional[StrictStr] = Field(default=None, description="Possible gender of the face.")
    glasses: Optional[StrictStr] = Field(default=None, description="Glasses type if any of the face.")
    hair: Optional[Hair] = None
    head_pose: Optional[HeadPose] = Field(default=None, alias="headPose")
    makeup: Optional[Makeup] = None
    noise: Optional[Noise] = None
    occlusion: Optional[Occlusion] = None
    smile: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="A number ranging from 0 to 1 indicating the intensity level associated with a property.")
    __properties: ClassVar[List[str]] = ["accessories", "age", "blur", "emotion", "exposure", "facialHair", "gender", "glasses", "hair", "headPose", "makeup", "noise", "occlusion", "smile"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['male', 'female']):
            raise ValueError("must be one of enum values ('male', 'female')")
        return value

    @field_validator('glasses')
    def glasses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['noGlasses', 'readingGlasses', 'sunglasses', 'swimmingGoggles']):
            raise ValueError("must be one of enum values ('noGlasses', 'readingGlasses', 'sunglasses', 'swimmingGoggles')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FaceAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accessories (list)
        _items = []
        if self.accessories:
            for _item_accessories in self.accessories:
                if _item_accessories:
                    _items.append(_item_accessories.to_dict())
            _dict['accessories'] = _items
        # override the default output from pydantic by calling `to_dict()` of blur
        if self.blur:
            _dict['blur'] = self.blur.to_dict()
        # override the default output from pydantic by calling `to_dict()` of emotion
        if self.emotion:
            _dict['emotion'] = self.emotion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exposure
        if self.exposure:
            _dict['exposure'] = self.exposure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facial_hair
        if self.facial_hair:
            _dict['facialHair'] = self.facial_hair.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hair
        if self.hair:
            _dict['hair'] = self.hair.to_dict()
        # override the default output from pydantic by calling `to_dict()` of head_pose
        if self.head_pose:
            _dict['headPose'] = self.head_pose.to_dict()
        # override the default output from pydantic by calling `to_dict()` of makeup
        if self.makeup:
            _dict['makeup'] = self.makeup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of noise
        if self.noise:
            _dict['noise'] = self.noise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of occlusion
        if self.occlusion:
            _dict['occlusion'] = self.occlusion.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FaceAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessories": [Accessory.from_dict(_item) for _item in obj["accessories"]] if obj.get("accessories") is not None else None,
            "age": obj.get("age"),
            "blur": Blur.from_dict(obj["blur"]) if obj.get("blur") is not None else None,
            "emotion": Emotion.from_dict(obj["emotion"]) if obj.get("emotion") is not None else None,
            "exposure": Exposure.from_dict(obj["exposure"]) if obj.get("exposure") is not None else None,
            "facialHair": FacialHair.from_dict(obj["facialHair"]) if obj.get("facialHair") is not None else None,
            "gender": obj.get("gender"),
            "glasses": obj.get("glasses"),
            "hair": Hair.from_dict(obj["hair"]) if obj.get("hair") is not None else None,
            "headPose": HeadPose.from_dict(obj["headPose"]) if obj.get("headPose") is not None else None,
            "makeup": Makeup.from_dict(obj["makeup"]) if obj.get("makeup") is not None else None,
            "noise": Noise.from_dict(obj["noise"]) if obj.get("noise") is not None else None,
            "occlusion": Occlusion.from_dict(obj["occlusion"]) if obj.get("occlusion") is not None else None,
            "smile": obj.get("smile")
        })
        return _obj



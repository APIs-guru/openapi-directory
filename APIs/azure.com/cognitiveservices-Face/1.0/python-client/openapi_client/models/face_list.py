# coding: utf-8

"""
    Face Client

    An API for face detection, verification, and identification.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.persisted_face import PersistedFace
from openapi_client.models.recognition_model import RecognitionModel
from typing import Optional, Set
from typing_extensions import Self

class FaceList(BaseModel):
    """
    Face list object.
    """ # noqa: E501
    face_list_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="FaceListId of the target face list.", alias="faceListId")
    persisted_faces: Optional[List[PersistedFace]] = Field(default=None, description="An array of persisted faces within the face list or large face list.", alias="persistedFaces")
    recognition_model: Optional[RecognitionModel] = Field(default=RecognitionModel.ENUM_01, alias="recognitionModel")
    name: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="User defined name, maximum length is 128.")
    user_data: Optional[Annotated[str, Field(strict=True, max_length=16384)]] = Field(default=None, description="User specified data. Length should not exceed 16KB.", alias="userData")
    __properties: ClassVar[List[str]] = ["recognitionModel", "name", "userData"]

    @field_validator('face_list_id')
    def face_list_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9-_]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FaceList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FaceList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recognitionModel": obj.get("recognitionModel") if obj.get("recognitionModel") is not None else RecognitionModel.ENUM_01,
            "name": obj.get("name"),
            "userData": obj.get("userData")
        })
        return _obj



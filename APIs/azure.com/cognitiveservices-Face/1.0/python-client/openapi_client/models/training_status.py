# coding: utf-8

"""
    Face Client

    An API for face detection, verification, and identification.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TrainingStatus(BaseModel):
    """
    Training status object.
    """ # noqa: E501
    created_date_time: datetime = Field(description="A combined UTC date and time string that describes the created time of the person group, large person group or large face list.", alias="createdDateTime")
    last_action_date_time: Optional[datetime] = Field(default=None, description="A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained.", alias="lastActionDateTime")
    last_successful_training_date_time: Optional[datetime] = Field(default=None, description="A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list.", alias="lastSuccessfulTrainingDateTime")
    message: Optional[StrictStr] = Field(default=None, description="Show failure message when training failed (omitted when training succeed).")
    status: StrictStr = Field(description="Training status: notstarted, running, succeeded, failed. If the training process is waiting to perform, the status is notstarted. If the training is ongoing, the status is running. Status succeed means this person group or large person group is ready for Face - Identify, or this large face list is ready for Face - Find Similar. Status failed is often caused by no person or no persisted face exist in the person group or large person group, or no persisted face exist in the large face list.")
    __properties: ClassVar[List[str]] = ["createdDateTime", "lastActionDateTime", "lastSuccessfulTrainingDateTime", "message", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['nonstarted', 'running', 'succeeded', 'failed']):
            raise ValueError("must be one of enum values ('nonstarted', 'running', 'succeeded', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrainingStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrainingStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDateTime": obj.get("createdDateTime"),
            "lastActionDateTime": obj.get("lastActionDateTime"),
            "lastSuccessfulTrainingDateTime": obj.get("lastSuccessfulTrainingDateTime"),
            "message": obj.get("message"),
            "status": obj.get("status")
        })
        return _obj



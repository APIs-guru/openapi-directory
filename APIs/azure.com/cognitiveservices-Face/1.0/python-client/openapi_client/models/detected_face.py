# coding: utf-8

"""
    Face Client

    An API for face detection, verification, and identification.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.face_attributes import FaceAttributes
from openapi_client.models.face_landmarks import FaceLandmarks
from openapi_client.models.face_rectangle import FaceRectangle
from openapi_client.models.recognition_model import RecognitionModel
from typing import Optional, Set
from typing_extensions import Self

class DetectedFace(BaseModel):
    """
    Detected Face object.
    """ # noqa: E501
    face_attributes: Optional[FaceAttributes] = Field(default=None, alias="faceAttributes")
    face_id: Optional[StrictStr] = Field(default=None, alias="faceId")
    face_landmarks: Optional[FaceLandmarks] = Field(default=None, alias="faceLandmarks")
    face_rectangle: FaceRectangle = Field(alias="faceRectangle")
    recognition_model: Optional[RecognitionModel] = Field(default=RecognitionModel.ENUM_01, alias="recognitionModel")
    __properties: ClassVar[List[str]] = ["faceAttributes", "faceId", "faceLandmarks", "faceRectangle", "recognitionModel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetectedFace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of face_attributes
        if self.face_attributes:
            _dict['faceAttributes'] = self.face_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_landmarks
        if self.face_landmarks:
            _dict['faceLandmarks'] = self.face_landmarks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_rectangle
        if self.face_rectangle:
            _dict['faceRectangle'] = self.face_rectangle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetectedFace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "faceAttributes": FaceAttributes.from_dict(obj["faceAttributes"]) if obj.get("faceAttributes") is not None else None,
            "faceId": obj.get("faceId"),
            "faceLandmarks": FaceLandmarks.from_dict(obj["faceLandmarks"]) if obj.get("faceLandmarks") is not None else None,
            "faceRectangle": FaceRectangle.from_dict(obj["faceRectangle"]) if obj.get("faceRectangle") is not None else None,
            "recognitionModel": obj.get("recognitionModel") if obj.get("recognitionModel") is not None else RecognitionModel.ENUM_01
        })
        return _obj



# coding: utf-8

"""
    Face Client

    An API for face detection, verification, and identification.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Snapshot(BaseModel):
    """
    Snapshot object.
    """ # noqa: E501
    account: StrictStr = Field(description="Azure Cognitive Service Face account id of the subscriber who created the snapshot by Snapshot - Take.")
    apply_scope: List[StrictStr] = Field(description="Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.", alias="applyScope")
    created_time: datetime = Field(description="A combined UTC date and time string that describes the created time of the snapshot. E.g. 2018-12-25T11:41:02.2331413Z.", alias="createdTime")
    id: StrictStr = Field(description="Snapshot id.")
    last_update_time: datetime = Field(description="A combined UTC date and time string that describes the last time when the snapshot was created or updated by Snapshot - Update. E.g. 2018-12-25T11:51:27.8705696Z.", alias="lastUpdateTime")
    type: StrictStr = Field(description="Type of the source object in the snapshot, specified by the subscriber who created the snapshot when calling Snapshot - Take. Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported.")
    user_data: Optional[Annotated[str, Field(strict=True, max_length=16384)]] = Field(default=None, description="User specified data about the snapshot for any purpose. Length should not exceed 16KB.", alias="userData")
    __properties: ClassVar[List[str]] = ["account", "applyScope", "createdTime", "id", "lastUpdateTime", "type", "userData"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup']):
            raise ValueError("must be one of enum values ('FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Snapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Snapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "applyScope": obj.get("applyScope"),
            "createdTime": obj.get("createdTime"),
            "id": obj.get("id"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "type": obj.get("type"),
            "userData": obj.get("userData")
        })
        return _obj



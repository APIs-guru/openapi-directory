# coding: utf-8

"""
    Face Client

    An API for face detection, verification, and identification.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.coordinate import Coordinate
from typing import Optional, Set
from typing_extensions import Self

class FaceLandmarks(BaseModel):
    """
    A collection of 27-point face landmarks pointing to the important positions of face components.
    """ # noqa: E501
    eye_left_bottom: Optional[Coordinate] = Field(default=None, alias="eyeLeftBottom")
    eye_left_inner: Optional[Coordinate] = Field(default=None, alias="eyeLeftInner")
    eye_left_outer: Optional[Coordinate] = Field(default=None, alias="eyeLeftOuter")
    eye_left_top: Optional[Coordinate] = Field(default=None, alias="eyeLeftTop")
    eye_right_bottom: Optional[Coordinate] = Field(default=None, alias="eyeRightBottom")
    eye_right_inner: Optional[Coordinate] = Field(default=None, alias="eyeRightInner")
    eye_right_outer: Optional[Coordinate] = Field(default=None, alias="eyeRightOuter")
    eye_right_top: Optional[Coordinate] = Field(default=None, alias="eyeRightTop")
    eyebrow_left_inner: Optional[Coordinate] = Field(default=None, alias="eyebrowLeftInner")
    eyebrow_left_outer: Optional[Coordinate] = Field(default=None, alias="eyebrowLeftOuter")
    eyebrow_right_inner: Optional[Coordinate] = Field(default=None, alias="eyebrowRightInner")
    eyebrow_right_outer: Optional[Coordinate] = Field(default=None, alias="eyebrowRightOuter")
    mouth_left: Optional[Coordinate] = Field(default=None, alias="mouthLeft")
    mouth_right: Optional[Coordinate] = Field(default=None, alias="mouthRight")
    nose_left_alar_out_tip: Optional[Coordinate] = Field(default=None, alias="noseLeftAlarOutTip")
    nose_left_alar_top: Optional[Coordinate] = Field(default=None, alias="noseLeftAlarTop")
    nose_right_alar_out_tip: Optional[Coordinate] = Field(default=None, alias="noseRightAlarOutTip")
    nose_right_alar_top: Optional[Coordinate] = Field(default=None, alias="noseRightAlarTop")
    nose_root_left: Optional[Coordinate] = Field(default=None, alias="noseRootLeft")
    nose_root_right: Optional[Coordinate] = Field(default=None, alias="noseRootRight")
    nose_tip: Optional[Coordinate] = Field(default=None, alias="noseTip")
    pupil_left: Optional[Coordinate] = Field(default=None, alias="pupilLeft")
    pupil_right: Optional[Coordinate] = Field(default=None, alias="pupilRight")
    under_lip_bottom: Optional[Coordinate] = Field(default=None, alias="underLipBottom")
    under_lip_top: Optional[Coordinate] = Field(default=None, alias="underLipTop")
    upper_lip_bottom: Optional[Coordinate] = Field(default=None, alias="upperLipBottom")
    upper_lip_top: Optional[Coordinate] = Field(default=None, alias="upperLipTop")
    __properties: ClassVar[List[str]] = ["eyeLeftBottom", "eyeLeftInner", "eyeLeftOuter", "eyeLeftTop", "eyeRightBottom", "eyeRightInner", "eyeRightOuter", "eyeRightTop", "eyebrowLeftInner", "eyebrowLeftOuter", "eyebrowRightInner", "eyebrowRightOuter", "mouthLeft", "mouthRight", "noseLeftAlarOutTip", "noseLeftAlarTop", "noseRightAlarOutTip", "noseRightAlarTop", "noseRootLeft", "noseRootRight", "noseTip", "pupilLeft", "pupilRight", "underLipBottom", "underLipTop", "upperLipBottom", "upperLipTop"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FaceLandmarks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of eye_left_bottom
        if self.eye_left_bottom:
            _dict['eyeLeftBottom'] = self.eye_left_bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_left_inner
        if self.eye_left_inner:
            _dict['eyeLeftInner'] = self.eye_left_inner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_left_outer
        if self.eye_left_outer:
            _dict['eyeLeftOuter'] = self.eye_left_outer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_left_top
        if self.eye_left_top:
            _dict['eyeLeftTop'] = self.eye_left_top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_right_bottom
        if self.eye_right_bottom:
            _dict['eyeRightBottom'] = self.eye_right_bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_right_inner
        if self.eye_right_inner:
            _dict['eyeRightInner'] = self.eye_right_inner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_right_outer
        if self.eye_right_outer:
            _dict['eyeRightOuter'] = self.eye_right_outer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_right_top
        if self.eye_right_top:
            _dict['eyeRightTop'] = self.eye_right_top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eyebrow_left_inner
        if self.eyebrow_left_inner:
            _dict['eyebrowLeftInner'] = self.eyebrow_left_inner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eyebrow_left_outer
        if self.eyebrow_left_outer:
            _dict['eyebrowLeftOuter'] = self.eyebrow_left_outer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eyebrow_right_inner
        if self.eyebrow_right_inner:
            _dict['eyebrowRightInner'] = self.eyebrow_right_inner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eyebrow_right_outer
        if self.eyebrow_right_outer:
            _dict['eyebrowRightOuter'] = self.eyebrow_right_outer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mouth_left
        if self.mouth_left:
            _dict['mouthLeft'] = self.mouth_left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mouth_right
        if self.mouth_right:
            _dict['mouthRight'] = self.mouth_right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nose_left_alar_out_tip
        if self.nose_left_alar_out_tip:
            _dict['noseLeftAlarOutTip'] = self.nose_left_alar_out_tip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nose_left_alar_top
        if self.nose_left_alar_top:
            _dict['noseLeftAlarTop'] = self.nose_left_alar_top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nose_right_alar_out_tip
        if self.nose_right_alar_out_tip:
            _dict['noseRightAlarOutTip'] = self.nose_right_alar_out_tip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nose_right_alar_top
        if self.nose_right_alar_top:
            _dict['noseRightAlarTop'] = self.nose_right_alar_top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nose_root_left
        if self.nose_root_left:
            _dict['noseRootLeft'] = self.nose_root_left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nose_root_right
        if self.nose_root_right:
            _dict['noseRootRight'] = self.nose_root_right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nose_tip
        if self.nose_tip:
            _dict['noseTip'] = self.nose_tip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pupil_left
        if self.pupil_left:
            _dict['pupilLeft'] = self.pupil_left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pupil_right
        if self.pupil_right:
            _dict['pupilRight'] = self.pupil_right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of under_lip_bottom
        if self.under_lip_bottom:
            _dict['underLipBottom'] = self.under_lip_bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of under_lip_top
        if self.under_lip_top:
            _dict['underLipTop'] = self.under_lip_top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upper_lip_bottom
        if self.upper_lip_bottom:
            _dict['upperLipBottom'] = self.upper_lip_bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upper_lip_top
        if self.upper_lip_top:
            _dict['upperLipTop'] = self.upper_lip_top.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FaceLandmarks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eyeLeftBottom": Coordinate.from_dict(obj["eyeLeftBottom"]) if obj.get("eyeLeftBottom") is not None else None,
            "eyeLeftInner": Coordinate.from_dict(obj["eyeLeftInner"]) if obj.get("eyeLeftInner") is not None else None,
            "eyeLeftOuter": Coordinate.from_dict(obj["eyeLeftOuter"]) if obj.get("eyeLeftOuter") is not None else None,
            "eyeLeftTop": Coordinate.from_dict(obj["eyeLeftTop"]) if obj.get("eyeLeftTop") is not None else None,
            "eyeRightBottom": Coordinate.from_dict(obj["eyeRightBottom"]) if obj.get("eyeRightBottom") is not None else None,
            "eyeRightInner": Coordinate.from_dict(obj["eyeRightInner"]) if obj.get("eyeRightInner") is not None else None,
            "eyeRightOuter": Coordinate.from_dict(obj["eyeRightOuter"]) if obj.get("eyeRightOuter") is not None else None,
            "eyeRightTop": Coordinate.from_dict(obj["eyeRightTop"]) if obj.get("eyeRightTop") is not None else None,
            "eyebrowLeftInner": Coordinate.from_dict(obj["eyebrowLeftInner"]) if obj.get("eyebrowLeftInner") is not None else None,
            "eyebrowLeftOuter": Coordinate.from_dict(obj["eyebrowLeftOuter"]) if obj.get("eyebrowLeftOuter") is not None else None,
            "eyebrowRightInner": Coordinate.from_dict(obj["eyebrowRightInner"]) if obj.get("eyebrowRightInner") is not None else None,
            "eyebrowRightOuter": Coordinate.from_dict(obj["eyebrowRightOuter"]) if obj.get("eyebrowRightOuter") is not None else None,
            "mouthLeft": Coordinate.from_dict(obj["mouthLeft"]) if obj.get("mouthLeft") is not None else None,
            "mouthRight": Coordinate.from_dict(obj["mouthRight"]) if obj.get("mouthRight") is not None else None,
            "noseLeftAlarOutTip": Coordinate.from_dict(obj["noseLeftAlarOutTip"]) if obj.get("noseLeftAlarOutTip") is not None else None,
            "noseLeftAlarTop": Coordinate.from_dict(obj["noseLeftAlarTop"]) if obj.get("noseLeftAlarTop") is not None else None,
            "noseRightAlarOutTip": Coordinate.from_dict(obj["noseRightAlarOutTip"]) if obj.get("noseRightAlarOutTip") is not None else None,
            "noseRightAlarTop": Coordinate.from_dict(obj["noseRightAlarTop"]) if obj.get("noseRightAlarTop") is not None else None,
            "noseRootLeft": Coordinate.from_dict(obj["noseRootLeft"]) if obj.get("noseRootLeft") is not None else None,
            "noseRootRight": Coordinate.from_dict(obj["noseRootRight"]) if obj.get("noseRootRight") is not None else None,
            "noseTip": Coordinate.from_dict(obj["noseTip"]) if obj.get("noseTip") is not None else None,
            "pupilLeft": Coordinate.from_dict(obj["pupilLeft"]) if obj.get("pupilLeft") is not None else None,
            "pupilRight": Coordinate.from_dict(obj["pupilRight"]) if obj.get("pupilRight") is not None else None,
            "underLipBottom": Coordinate.from_dict(obj["underLipBottom"]) if obj.get("underLipBottom") is not None else None,
            "underLipTop": Coordinate.from_dict(obj["underLipTop"]) if obj.get("underLipTop") is not None else None,
            "upperLipBottom": Coordinate.from_dict(obj["upperLipBottom"]) if obj.get("upperLipBottom") is not None else None,
            "upperLipTop": Coordinate.from_dict(obj["upperLipTop"]) if obj.get("upperLipTop") is not None else None
        })
        return _obj



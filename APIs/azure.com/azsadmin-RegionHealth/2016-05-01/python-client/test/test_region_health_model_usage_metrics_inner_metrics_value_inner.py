# coding: utf-8

"""
    InfrastructureInsightsManagementClient

    Region health operation endpoints and objects.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.region_health_model_usage_metrics_inner_metrics_value_inner import RegionHealthModelUsageMetricsInnerMetricsValueInner

class TestRegionHealthModelUsageMetricsInnerMetricsValueInner(unittest.TestCase):
    """RegionHealthModelUsageMetricsInnerMetricsValueInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RegionHealthModelUsageMetricsInnerMetricsValueInner:
        """Test RegionHealthModelUsageMetricsInnerMetricsValueInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RegionHealthModelUsageMetricsInnerMetricsValueInner`
        """
        model = RegionHealthModelUsageMetricsInnerMetricsValueInner()
        if include_optional:
            return RegionHealthModelUsageMetricsInnerMetricsValueInner(
                ma_counter_name = '',
                name = '',
                observed_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                source_name = 'PhysicalNode',
                source_type = '',
                unit = 'One',
                value = 1.337
            )
        else:
            return RegionHealthModelUsageMetricsInnerMetricsValueInner(
        )
        """

    def testRegionHealthModelUsageMetricsInnerMetricsValueInner(self):
        """Test RegionHealthModelUsageMetricsInnerMetricsValueInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

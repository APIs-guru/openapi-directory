# coding: utf-8

"""
    InfrastructureInsightsManagementClient

    Region health operation endpoints and objects.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RegionHealthModelUsageMetricsInnerMetricsValueInner(BaseModel):
    """
    Metrics for a source.
    """ # noqa: E501
    ma_counter_name: Optional[StrictStr] = Field(default=None, description="Name of the counter.", alias="maCounterName")
    name: Optional[StrictStr] = Field(default=None, description="Name of the usage metric.")
    observed_timestamp: Optional[datetime] = Field(default=None, description="Time counter was observed.", alias="observedTimestamp")
    source_name: Optional[StrictStr] = Field(default=None, description="The origin of the metric.", alias="sourceName")
    source_type: Optional[StrictStr] = Field(default=None, description="Type of the source.", alias="sourceType")
    unit: Optional[StrictStr] = Field(default=None, description="The unit of the metric.")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Name of the usage metric.")
    __properties: ClassVar[List[str]] = ["maCounterName", "name", "observedTimestamp", "sourceName", "sourceType", "unit", "value"]

    @field_validator('source_name')
    def source_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PhysicalNode', 'VirtualMachine', 'ResourceProvider']):
            raise ValueError("must be one of enum values ('PhysicalNode', 'VirtualMachine', 'ResourceProvider')")
        return value

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['One', 'Percentage', 'B', 'KB', 'MB', 'GB', 'TB']):
            raise ValueError("must be one of enum values ('One', 'Percentage', 'B', 'KB', 'MB', 'GB', 'TB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegionHealthModelUsageMetricsInnerMetricsValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegionHealthModelUsageMetricsInnerMetricsValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maCounterName": obj.get("maCounterName"),
            "name": obj.get("name"),
            "observedTimestamp": obj.get("observedTimestamp"),
            "sourceName": obj.get("sourceName"),
            "sourceType": obj.get("sourceType"),
            "unit": obj.get("unit"),
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-10-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.advanced_schedule import AdvancedSchedule
from openapi_client.models.schedule_frequency import ScheduleFrequency
from typing import Optional, Set
from typing_extensions import Self

class ScheduleCreateOrUpdateProperties(BaseModel):
    """
    The parameters supplied to the create or update schedule operation.
    """ # noqa: E501
    advanced_schedule: Optional[AdvancedSchedule] = Field(default=None, alias="advancedSchedule")
    description: Optional[StrictStr] = Field(default=None, description="Gets or sets the description of the schedule.")
    expiry_time: Optional[datetime] = Field(default=None, description="Gets or sets the end time of the schedule.", alias="expiryTime")
    frequency: ScheduleFrequency
    interval: Optional[Dict[str, Any]] = Field(default=None, description="Gets or sets the interval of the schedule.")
    start_time: datetime = Field(description="Gets or sets the start time of the schedule.", alias="startTime")
    time_zone: Optional[StrictStr] = Field(default=None, description="Gets or sets the time zone of the schedule.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["advancedSchedule", "description", "expiryTime", "frequency", "interval", "startTime", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleCreateOrUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_schedule
        if self.advanced_schedule:
            _dict['advancedSchedule'] = self.advanced_schedule.to_dict()
        # set to None if expiry_time (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_time is None and "expiry_time" in self.model_fields_set:
            _dict['expiryTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleCreateOrUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedSchedule": AdvancedSchedule.from_dict(obj["advancedSchedule"]) if obj.get("advancedSchedule") is not None else None,
            "description": obj.get("description"),
            "expiryTime": obj.get("expiryTime"),
            "frequency": obj.get("frequency"),
            "interval": obj.get("interval"),
            "startTime": obj.get("startTime"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



# coding: utf-8

"""
    SchedulerManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2014-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_properties import JobProperties

class TestJobProperties(unittest.TestCase):
    """JobProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobProperties:
        """Test JobProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobProperties`
        """
        model = JobProperties()
        if include_optional:
            return JobProperties(
                action = openapi_client.models.job_action.JobAction(
                    error_action = openapi_client.models.job_error_action.JobErrorAction(
                        queue_message = openapi_client.models.storage_queue_message.StorageQueueMessage(
                            message = '', 
                            queue_name = '', 
                            sas_token = '', 
                            storage_account = '', ), 
                        request = openapi_client.models.http_request.HttpRequest(
                            authentication = openapi_client.models.http_authentication.HttpAuthentication(
                                type = 'NotSpecified', ), 
                            body = '', 
                            headers = {
                                'key' : ''
                                }, 
                            method = '', 
                            uri = '', ), 
                        retry_policy = openapi_client.models.retry_policy.RetryPolicy(
                            retry_count = 56, 
                            retry_interval = '', 
                            retry_type = 'None', ), 
                        service_bus_queue_message = openapi_client.models.service_bus_queue_message.ServiceBusQueueMessage(
                            queue_name = '', ), 
                        service_bus_topic_message = openapi_client.models.service_bus_topic_message.ServiceBusTopicMessage(
                            topic_path = '', ), 
                        type = 'Http', ), 
                    queue_message = openapi_client.models.storage_queue_message.StorageQueueMessage(
                        message = '', 
                        queue_name = '', 
                        sas_token = '', 
                        storage_account = '', ), 
                    request = openapi_client.models.http_request.HttpRequest(
                        body = '', 
                        method = '', 
                        uri = '', ), 
                    retry_policy = openapi_client.models.retry_policy.RetryPolicy(
                        retry_count = 56, 
                        retry_interval = '', 
                        retry_type = 'None', ), 
                    service_bus_queue_message = openapi_client.models.service_bus_queue_message.ServiceBusQueueMessage(
                        queue_name = '', ), 
                    service_bus_topic_message = openapi_client.models.service_bus_topic_message.ServiceBusTopicMessage(
                        topic_path = '', ), 
                    type = 'Http', ),
                recurrence = openapi_client.models.job_recurrence.JobRecurrence(
                    count = 56, 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    frequency = 'Minute', 
                    interval = 56, 
                    schedule = openapi_client.models.job_recurrence_schedule.JobRecurrenceSchedule(
                        hours = [
                            56
                            ], 
                        minutes = [
                            56
                            ], 
                        month_days = [
                            56
                            ], 
                        monthly_occurrences = [
                            openapi_client.models.job_recurrence_schedule_monthly_occurrence.JobRecurrenceScheduleMonthlyOccurrence(
                                occurrence = 56, 
                                day = 'Monday', )
                            ], 
                        week_days = [
                            'Monday'
                            ], ), ),
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                state = 'Enabled',
                status = openapi_client.models.job_status.JobStatus(
                    execution_count = 56, 
                    failure_count = 56, 
                    faulted_count = 56, 
                    last_execution_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    next_execution_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return JobProperties(
        )
        """

    def testJobProperties(self):
        """Test JobProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    SchedulerManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2014-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_request import HttpRequest
from openapi_client.models.job_error_action import JobErrorAction
from openapi_client.models.retry_policy import RetryPolicy
from openapi_client.models.service_bus_queue_message import ServiceBusQueueMessage
from openapi_client.models.service_bus_topic_message import ServiceBusTopicMessage
from openapi_client.models.storage_queue_message import StorageQueueMessage
from typing import Optional, Set
from typing_extensions import Self

class JobAction(BaseModel):
    """
    JobAction
    """ # noqa: E501
    error_action: Optional[JobErrorAction] = Field(default=None, alias="errorAction")
    queue_message: Optional[StorageQueueMessage] = Field(default=None, alias="queueMessage")
    request: Optional[HttpRequest] = None
    retry_policy: Optional[RetryPolicy] = Field(default=None, alias="retryPolicy")
    service_bus_queue_message: Optional[ServiceBusQueueMessage] = Field(default=None, alias="serviceBusQueueMessage")
    service_bus_topic_message: Optional[ServiceBusTopicMessage] = Field(default=None, alias="serviceBusTopicMessage")
    type: Optional[StrictStr] = Field(default=None, description="Gets or sets the job action type.")
    __properties: ClassVar[List[str]] = ["errorAction", "queueMessage", "request", "retryPolicy", "serviceBusQueueMessage", "serviceBusTopicMessage", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Http', 'Https', 'StorageQueue', 'ServiceBusQueue', 'ServiceBusTopic']):
            raise ValueError("must be one of enum values ('Http', 'Https', 'StorageQueue', 'ServiceBusQueue', 'ServiceBusTopic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_action
        if self.error_action:
            _dict['errorAction'] = self.error_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of queue_message
        if self.queue_message:
            _dict['queueMessage'] = self.queue_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retry_policy
        if self.retry_policy:
            _dict['retryPolicy'] = self.retry_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_bus_queue_message
        if self.service_bus_queue_message:
            _dict['serviceBusQueueMessage'] = self.service_bus_queue_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_bus_topic_message
        if self.service_bus_topic_message:
            _dict['serviceBusTopicMessage'] = self.service_bus_topic_message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorAction": JobErrorAction.from_dict(obj["errorAction"]) if obj.get("errorAction") is not None else None,
            "queueMessage": StorageQueueMessage.from_dict(obj["queueMessage"]) if obj.get("queueMessage") is not None else None,
            "request": HttpRequest.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "retryPolicy": RetryPolicy.from_dict(obj["retryPolicy"]) if obj.get("retryPolicy") is not None else None,
            "serviceBusQueueMessage": ServiceBusQueueMessage.from_dict(obj["serviceBusQueueMessage"]) if obj.get("serviceBusQueueMessage") is not None else None,
            "serviceBusTopicMessage": ServiceBusTopicMessage.from_dict(obj["serviceBusTopicMessage"]) if obj.get("serviceBusTopicMessage") is not None else None,
            "type": obj.get("type")
        })
        return _obj



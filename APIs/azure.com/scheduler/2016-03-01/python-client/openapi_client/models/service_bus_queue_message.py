# coding: utf-8

"""
    SchedulerManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_bus_authentication import ServiceBusAuthentication
from openapi_client.models.service_bus_brokered_message_properties import ServiceBusBrokeredMessageProperties
from typing import Optional, Set
from typing_extensions import Self

class ServiceBusQueueMessage(BaseModel):
    """
    ServiceBusQueueMessage
    """ # noqa: E501
    queue_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the queue name.", alias="queueName")
    authentication: Optional[ServiceBusAuthentication] = None
    brokered_message_properties: Optional[ServiceBusBrokeredMessageProperties] = Field(default=None, alias="brokeredMessageProperties")
    custom_message_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Gets or sets the custom message properties.", alias="customMessageProperties")
    message: Optional[StrictStr] = Field(default=None, description="Gets or sets the message.")
    namespace: Optional[StrictStr] = Field(default=None, description="Gets or sets the namespace.")
    transport_type: Optional[StrictStr] = Field(default=None, description="Gets or sets the transport type.", alias="transportType")
    __properties: ClassVar[List[str]] = ["authentication", "brokeredMessageProperties", "customMessageProperties", "message", "namespace", "transportType"]

    @field_validator('transport_type')
    def transport_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSpecified', 'NetMessaging', 'AMQP']):
            raise ValueError("must be one of enum values ('NotSpecified', 'NetMessaging', 'AMQP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceBusQueueMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authentication
        if self.authentication:
            _dict['authentication'] = self.authentication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of brokered_message_properties
        if self.brokered_message_properties:
            _dict['brokeredMessageProperties'] = self.brokered_message_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceBusQueueMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authentication": ServiceBusAuthentication.from_dict(obj["authentication"]) if obj.get("authentication") is not None else None,
            "brokeredMessageProperties": ServiceBusBrokeredMessageProperties.from_dict(obj["brokeredMessageProperties"]) if obj.get("brokeredMessageProperties") is not None else None,
            "customMessageProperties": obj.get("customMessageProperties"),
            "message": obj.get("message"),
            "namespace": obj.get("namespace"),
            "transportType": obj.get("transportType")
        })
        return _obj



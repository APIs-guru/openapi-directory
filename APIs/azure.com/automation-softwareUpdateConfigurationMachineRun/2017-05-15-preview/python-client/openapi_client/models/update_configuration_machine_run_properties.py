# coding: utf-8

"""
    Update Management

    APIs for managing software update configurations.

    The version of the OpenAPI document: 2017-05-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_navigation import JobNavigation
from openapi_client.models.software_update_configuration_machine_runs_list_default_response import SoftwareUpdateConfigurationMachineRunsListDefaultResponse
from openapi_client.models.update_configuration_navigation import UpdateConfigurationNavigation
from typing import Optional, Set
from typing_extensions import Self

class UpdateConfigurationMachineRunProperties(BaseModel):
    """
    Software update configuration machine run properties.
    """ # noqa: E501
    configured_duration: Optional[StrictStr] = Field(default=None, description="configured duration for the software update configuration run.", alias="configuredDuration")
    correlation_id: Optional[StrictStr] = Field(default=None, description="correlation id of the software update configuration machine run", alias="correlationId")
    created_by: Optional[StrictStr] = Field(default=None, description="createdBy property, which only appears in the response.", alias="createdBy")
    creation_time: Optional[datetime] = Field(default=None, description="Creation time of the resource, which only appears in the response.", alias="creationTime")
    end_time: Optional[datetime] = Field(default=None, description="End time of the software update configuration machine run.", alias="endTime")
    error: Optional[SoftwareUpdateConfigurationMachineRunsListDefaultResponse] = None
    job: Optional[JobNavigation] = None
    last_modified_by: Optional[StrictStr] = Field(default=None, description="lastModifiedBy property, which only appears in the response.", alias="lastModifiedBy")
    last_modified_time: Optional[datetime] = Field(default=None, description="Last time resource was modified, which only appears in the response.", alias="lastModifiedTime")
    os_type: Optional[StrictStr] = Field(default=None, description="Operating system target of the software update configuration triggered this run", alias="osType")
    software_update_configuration: Optional[UpdateConfigurationNavigation] = Field(default=None, alias="softwareUpdateConfiguration")
    source_computer_id: Optional[StrictStr] = Field(default=None, description="source computer id of the software update configuration machine run", alias="sourceComputerId")
    start_time: Optional[datetime] = Field(default=None, description="Start time of the software update configuration machine run.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Status of the software update configuration machine run.")
    target_computer: Optional[StrictStr] = Field(default=None, description="name of the updated computer", alias="targetComputer")
    target_computer_type: Optional[StrictStr] = Field(default=None, description="type of the updated computer.", alias="targetComputerType")
    __properties: ClassVar[List[str]] = ["configuredDuration", "correlationId", "createdBy", "creationTime", "endTime", "error", "job", "lastModifiedBy", "lastModifiedTime", "osType", "softwareUpdateConfiguration", "sourceComputerId", "startTime", "status", "targetComputer", "targetComputerType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateConfigurationMachineRunProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "configured_duration",
            "correlation_id",
            "created_by",
            "creation_time",
            "end_time",
            "last_modified_by",
            "last_modified_time",
            "os_type",
            "source_computer_id",
            "start_time",
            "status",
            "target_computer",
            "target_computer_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job
        if self.job:
            _dict['job'] = self.job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of software_update_configuration
        if self.software_update_configuration:
            _dict['softwareUpdateConfiguration'] = self.software_update_configuration.to_dict()
        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['endTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateConfigurationMachineRunProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configuredDuration": obj.get("configuredDuration"),
            "correlationId": obj.get("correlationId"),
            "createdBy": obj.get("createdBy"),
            "creationTime": obj.get("creationTime"),
            "endTime": obj.get("endTime"),
            "error": SoftwareUpdateConfigurationMachineRunsListDefaultResponse.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "job": JobNavigation.from_dict(obj["job"]) if obj.get("job") is not None else None,
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "osType": obj.get("osType"),
            "softwareUpdateConfiguration": UpdateConfigurationNavigation.from_dict(obj["softwareUpdateConfiguration"]) if obj.get("softwareUpdateConfiguration") is not None else None,
            "sourceComputerId": obj.get("sourceComputerId"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "targetComputer": obj.get("targetComputer"),
            "targetComputerType": obj.get("targetComputerType")
        })
        return _obj



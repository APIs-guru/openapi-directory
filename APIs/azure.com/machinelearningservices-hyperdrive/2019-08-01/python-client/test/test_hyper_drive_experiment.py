# coding: utf-8

"""
    HyperDrive

    HyperDrive REST API

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.hyper_drive_experiment import HyperDriveExperiment

class TestHyperDriveExperiment(unittest.TestCase):
    """HyperDriveExperiment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HyperDriveExperiment:
        """Test HyperDriveExperiment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HyperDriveExperiment`
        """
        model = HyperDriveExperiment()
        if include_optional:
            return HyperDriveExperiment(
                description = '',
                generator_config = openapi_client.models.hyper_drive_experiment_base_generator_config.HyperDriveExperimentBase_generator_config(
                    name = 'RANDOM', 
                    parameter_space = {
                        'key' : [choice, [[1, 2, 3, 4]]]
                        }, ),
                max_concurrent_jobs = 1,
                max_duration_minutes = 1,
                max_total_jobs = 1,
                name = '',
                platform = 'AML',
                platform_config = openapi_client.models.platform_config.platform_config(),
                policy_config = openapi_client.models.hyper_drive_policy_config_base.HyperDrivePolicyConfigBase(
                    name = 'Default', ),
                primary_metric_config = openapi_client.models.hyper_drive_experiment_base_primary_metric_config.HyperDriveExperimentBase_primary_metric_config(
                    goal = 'MAXIMIZE', 
                    name = '', ),
                study_id = 0,
                all_jobs_generated = True,
                cancellation_requested = True,
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by_user_id = 56,
                experiment_id = '',
                experiment_uri = '',
                hyperdrive_run_id = '',
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = '',
                study_uri = ''
            )
        else:
            return HyperDriveExperiment(
                generator_config = openapi_client.models.hyper_drive_experiment_base_generator_config.HyperDriveExperimentBase_generator_config(
                    name = 'RANDOM', 
                    parameter_space = {
                        'key' : [choice, [[1, 2, 3, 4]]]
                        }, ),
                name = '',
                platform = 'AML',
                platform_config = openapi_client.models.platform_config.platform_config(),
                policy_config = openapi_client.models.hyper_drive_policy_config_base.HyperDrivePolicyConfigBase(
                    name = 'Default', ),
                primary_metric_config = openapi_client.models.hyper_drive_experiment_base_primary_metric_config.HyperDriveExperimentBase_primary_metric_config(
                    goal = 'MAXIMIZE', 
                    name = '', ),
                all_jobs_generated = True,
                cancellation_requested = True,
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by_user_id = 56,
                experiment_id = '',
                hyperdrive_run_id = '',
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = '',
        )
        """

    def testHyperDriveExperiment(self):
        """Test HyperDriveExperiment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    HyperDrive

    HyperDrive REST API

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.hyper_drive_experiment_base_generator_config import HyperDriveExperimentBaseGeneratorConfig
from openapi_client.models.hyper_drive_experiment_base_primary_metric_config import HyperDriveExperimentBasePrimaryMetricConfig
from openapi_client.models.hyper_drive_policy_config_base import HyperDrivePolicyConfigBase
from typing import Optional, Set
from typing_extensions import Self

class HyperDriveCreateExperiment(BaseModel):
    """
    Part of request for HyperDrive_CreateExperiment. Contains configuration details required to create hyperdrive run.
    """ # noqa: E501
    description: Optional[Annotated[str, Field(strict=True, max_length=511)]] = Field(default=None, description="The description for Hyperdrive run.")
    generator_config: HyperDriveExperimentBaseGeneratorConfig
    max_concurrent_jobs: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Maximum number of runs to run concurrently.")
    max_duration_minutes: Optional[Annotated[int, Field(le=43200, strict=True, ge=1)]] = Field(default=None, description="Maximum duration of the Hyperdrive run.")
    max_total_jobs: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = Field(default=None, description="Maximum number of runs.")
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Name of the Hyperdrive run.")
    platform: StrictStr = Field(description="Platform of the Hyperdrive run.")
    platform_config: Dict[str, Any] = Field(description="Platform config object specifying the run definition structure.")
    policy_config: HyperDrivePolicyConfigBase
    primary_metric_config: HyperDriveExperimentBasePrimaryMetricConfig
    study_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Study Id of the Hyperdrive run.")
    user: Annotated[str, Field(strict=True, max_length=255)] = Field(description="User who is creating the Hyperdrive run.")
    __properties: ClassVar[List[str]] = ["description", "generator_config", "max_concurrent_jobs", "max_duration_minutes", "max_total_jobs", "name", "platform", "platform_config", "policy_config", "primary_metric_config", "study_id", "user"]

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AML']):
            raise ValueError("must be one of enum values ('AML')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HyperDriveCreateExperiment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of generator_config
        if self.generator_config:
            _dict['generator_config'] = self.generator_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_config
        if self.policy_config:
            _dict['policy_config'] = self.policy_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_metric_config
        if self.primary_metric_config:
            _dict['primary_metric_config'] = self.primary_metric_config.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if study_id (nullable) is None
        # and model_fields_set contains the field
        if self.study_id is None and "study_id" in self.model_fields_set:
            _dict['study_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HyperDriveCreateExperiment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "generator_config": HyperDriveExperimentBaseGeneratorConfig.from_dict(obj["generator_config"]) if obj.get("generator_config") is not None else None,
            "max_concurrent_jobs": obj.get("max_concurrent_jobs"),
            "max_duration_minutes": obj.get("max_duration_minutes"),
            "max_total_jobs": obj.get("max_total_jobs"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "platform_config": obj.get("platform_config"),
            "policy_config": HyperDrivePolicyConfigBase.from_dict(obj["policy_config"]) if obj.get("policy_config") is not None else None,
            "primary_metric_config": HyperDriveExperimentBasePrimaryMetricConfig.from_dict(obj["primary_metric_config"]) if obj.get("primary_metric_config") is not None else None,
            "study_id": obj.get("study_id"),
            "user": obj.get("user")
        })
        return _obj



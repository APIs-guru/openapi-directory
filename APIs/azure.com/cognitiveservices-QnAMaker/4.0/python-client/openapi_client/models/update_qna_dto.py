# coding: utf-8

"""
    QnAMaker Client

    An API for QnAMaker Service

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.update_context_dto import UpdateContextDTO
from openapi_client.models.update_metadata_dto import UpdateMetadataDTO
from openapi_client.models.update_questions_dto import UpdateQuestionsDTO
from typing import Optional, Set
from typing_extensions import Self

class UpdateQnaDTO(BaseModel):
    """
    PATCH Body schema for Update Qna List
    """ # noqa: E501
    answer: Optional[StrictStr] = Field(default=None, description="Answer text")
    context: Optional[UpdateContextDTO] = Field(default=None, description="Context associated with Qna to be updated.")
    id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Unique id for the Q-A")
    metadata: Optional[UpdateMetadataDTO] = Field(default=None, description="List of metadata associated with the answer to be updated")
    questions: Optional[UpdateQuestionsDTO] = Field(default=None, description="List of questions associated with the answer.")
    source: Optional[Annotated[str, Field(strict=True, max_length=300)]] = Field(default=None, description="Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs")
    __properties: ClassVar[List[str]] = ["answer", "context", "id", "metadata", "questions", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateQnaDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of questions
        if self.questions:
            _dict['questions'] = self.questions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateQnaDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answer": obj.get("answer"),
            "context": UpdateContextDTO.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "id": obj.get("id"),
            "metadata": UpdateMetadataDTO.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "questions": UpdateQuestionsDTO.from_dict(obj["questions"]) if obj.get("questions") is not None else None,
            "source": obj.get("source")
        })
        return _obj



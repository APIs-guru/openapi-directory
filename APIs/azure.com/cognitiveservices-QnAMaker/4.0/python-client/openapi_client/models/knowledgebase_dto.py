# coding: utf-8

"""
    QnAMaker Client

    An API for QnAMaker Service

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KnowledgebaseDTO(BaseModel):
    """
    Response schema for CreateKb operation.
    """ # noqa: E501
    host_name: Optional[StrictStr] = Field(default=None, description="URL host name at which the knowledgebase is hosted.", alias="hostName")
    id: Optional[StrictStr] = Field(default=None, description="Unique id that identifies a knowledgebase.")
    last_accessed_timestamp: Optional[StrictStr] = Field(default=None, description="Time stamp at which the knowledgebase was last accessed (UTC).", alias="lastAccessedTimestamp")
    last_changed_timestamp: Optional[StrictStr] = Field(default=None, description="Time stamp at which the knowledgebase was last modified (UTC).", alias="lastChangedTimestamp")
    last_published_timestamp: Optional[StrictStr] = Field(default=None, description="Time stamp at which the knowledgebase was last published (UTC).", alias="lastPublishedTimestamp")
    name: Optional[StrictStr] = Field(default=None, description="Friendly name of the knowledgebase.")
    sources: Optional[List[StrictStr]] = Field(default=None, description="Custom sources from which Q-A were extracted or explicitly added to the knowledgebase.")
    urls: Optional[List[StrictStr]] = Field(default=None, description="URL sources from which Q-A were extracted and added to the knowledgebase.")
    user_id: Optional[StrictStr] = Field(default=None, description="User who created / owns the knowledgebase.", alias="userId")
    __properties: ClassVar[List[str]] = ["hostName", "id", "lastAccessedTimestamp", "lastChangedTimestamp", "lastPublishedTimestamp", "name", "sources", "urls", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KnowledgebaseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KnowledgebaseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostName": obj.get("hostName"),
            "id": obj.get("id"),
            "lastAccessedTimestamp": obj.get("lastAccessedTimestamp"),
            "lastChangedTimestamp": obj.get("lastChangedTimestamp"),
            "lastPublishedTimestamp": obj.get("lastPublishedTimestamp"),
            "name": obj.get("name"),
            "sources": obj.get("sources"),
            "urls": obj.get("urls"),
            "userId": obj.get("userId")
        })
        return _obj



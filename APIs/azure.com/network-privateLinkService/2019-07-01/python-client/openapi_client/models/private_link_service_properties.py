# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.private_endpoint_connection import PrivateEndpointConnection
from openapi_client.models.private_link_service_ip_configuration import PrivateLinkServiceIpConfiguration
from openapi_client.models.private_link_service_properties_load_balancer_frontend_ip_configurations_inner import PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner
from openapi_client.models.private_link_service_properties_network_interfaces_inner import PrivateLinkServicePropertiesNetworkInterfacesInner
from openapi_client.models.resource_set import ResourceSet
from typing import Optional, Set
from typing_extensions import Self

class PrivateLinkServiceProperties(BaseModel):
    """
    Properties of the private link service.
    """ # noqa: E501
    alias: Optional[StrictStr] = Field(default=None, description="The alias of the private link service.")
    auto_approval: Optional[ResourceSet] = Field(default=None, description="The auto-approval list of the private link service.", alias="autoApproval")
    fqdns: Optional[List[StrictStr]] = Field(default=None, description="The list of Fqdn.")
    ip_configurations: Optional[List[PrivateLinkServiceIpConfiguration]] = Field(default=None, description="An array of private link service IP configurations.", alias="ipConfigurations")
    load_balancer_frontend_ip_configurations: Optional[List[PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner]] = Field(default=None, description="An array of references to the load balancer IP configurations.", alias="loadBalancerFrontendIpConfigurations")
    network_interfaces: Optional[List[PrivateLinkServicePropertiesNetworkInterfacesInner]] = Field(default=None, description="An array of references to the network interfaces created for this private link service.", alias="networkInterfaces")
    private_endpoint_connections: Optional[List[PrivateEndpointConnection]] = Field(default=None, description="An array of list about connections to the private endpoint.", alias="privateEndpointConnections")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    visibility: Optional[ResourceSet] = Field(default=None, description="The visibility list of the private link service.")
    __properties: ClassVar[List[str]] = ["alias", "autoApproval", "fqdns", "ipConfigurations", "loadBalancerFrontendIpConfigurations", "networkInterfaces", "privateEndpointConnections", "provisioningState", "visibility"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateLinkServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "alias",
            "network_interfaces",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_approval
        if self.auto_approval:
            _dict['autoApproval'] = self.auto_approval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ip_configurations (list)
        _items = []
        if self.ip_configurations:
            for _item_ip_configurations in self.ip_configurations:
                if _item_ip_configurations:
                    _items.append(_item_ip_configurations.to_dict())
            _dict['ipConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancer_frontend_ip_configurations (list)
        _items = []
        if self.load_balancer_frontend_ip_configurations:
            for _item_load_balancer_frontend_ip_configurations in self.load_balancer_frontend_ip_configurations:
                if _item_load_balancer_frontend_ip_configurations:
                    _items.append(_item_load_balancer_frontend_ip_configurations.to_dict())
            _dict['loadBalancerFrontendIpConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_interfaces (list)
        _items = []
        if self.network_interfaces:
            for _item_network_interfaces in self.network_interfaces:
                if _item_network_interfaces:
                    _items.append(_item_network_interfaces.to_dict())
            _dict['networkInterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in private_endpoint_connections (list)
        _items = []
        if self.private_endpoint_connections:
            for _item_private_endpoint_connections in self.private_endpoint_connections:
                if _item_private_endpoint_connections:
                    _items.append(_item_private_endpoint_connections.to_dict())
            _dict['privateEndpointConnections'] = _items
        # override the default output from pydantic by calling `to_dict()` of visibility
        if self.visibility:
            _dict['visibility'] = self.visibility.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateLinkServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alias": obj.get("alias"),
            "autoApproval": ResourceSet.from_dict(obj["autoApproval"]) if obj.get("autoApproval") is not None else None,
            "fqdns": obj.get("fqdns"),
            "ipConfigurations": [PrivateLinkServiceIpConfiguration.from_dict(_item) for _item in obj["ipConfigurations"]] if obj.get("ipConfigurations") is not None else None,
            "loadBalancerFrontendIpConfigurations": [PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner.from_dict(_item) for _item in obj["loadBalancerFrontendIpConfigurations"]] if obj.get("loadBalancerFrontendIpConfigurations") is not None else None,
            "networkInterfaces": [PrivateLinkServicePropertiesNetworkInterfacesInner.from_dict(_item) for _item in obj["networkInterfaces"]] if obj.get("networkInterfaces") is not None else None,
            "privateEndpointConnections": [PrivateEndpointConnection.from_dict(_item) for _item in obj["privateEndpointConnections"]] if obj.get("privateEndpointConnections") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "visibility": ResourceSet.from_dict(obj["visibility"]) if obj.get("visibility") is not None else None
        })
        return _obj



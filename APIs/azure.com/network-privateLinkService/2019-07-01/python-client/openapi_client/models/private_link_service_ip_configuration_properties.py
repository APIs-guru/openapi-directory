# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.private_link_service_ip_configuration_properties_subnet import PrivateLinkServiceIpConfigurationPropertiesSubnet
from typing import Optional, Set
from typing_extensions import Self

class PrivateLinkServiceIpConfigurationProperties(BaseModel):
    """
    Properties of private link service IP configuration.
    """ # noqa: E501
    primary: Optional[StrictBool] = Field(default=None, description="Whether the ip configuration is primary or not.")
    private_ip_address: Optional[StrictStr] = Field(default=None, description="The private IP address of the IP configuration.", alias="privateIPAddress")
    private_ip_address_version: Optional[StrictStr] = Field(default=None, description="IP address version.", alias="privateIPAddressVersion")
    private_ip_allocation_method: Optional[StrictStr] = Field(default=None, description="IP address allocation method.", alias="privateIPAllocationMethod")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    subnet: Optional[PrivateLinkServiceIpConfigurationPropertiesSubnet] = None
    __properties: ClassVar[List[str]] = ["primary", "privateIPAddress", "privateIPAddressVersion", "privateIPAllocationMethod", "provisioningState", "subnet"]

    @field_validator('private_ip_address_version')
    def private_ip_address_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IPv4', 'IPv6']):
            raise ValueError("must be one of enum values ('IPv4', 'IPv6')")
        return value

    @field_validator('private_ip_allocation_method')
    def private_ip_allocation_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Static', 'Dynamic']):
            raise ValueError("must be one of enum values ('Static', 'Dynamic')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateLinkServiceIpConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateLinkServiceIpConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "primary": obj.get("primary"),
            "privateIPAddress": obj.get("privateIPAddress"),
            "privateIPAddressVersion": obj.get("privateIPAddressVersion"),
            "privateIPAllocationMethod": obj.get("privateIPAllocationMethod"),
            "provisioningState": obj.get("provisioningState"),
            "subnet": PrivateLinkServiceIpConfigurationPropertiesSubnet.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None
        })
        return _obj



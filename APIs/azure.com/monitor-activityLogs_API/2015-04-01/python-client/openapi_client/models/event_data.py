# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_request_info import HttpRequestInfo
from openapi_client.models.localizable_string import LocalizableString
from openapi_client.models.sender_authorization import SenderAuthorization
from typing import Optional, Set
from typing_extensions import Self

class EventData(BaseModel):
    """
    The Azure event log entries are of type EventData
    """ # noqa: E501
    authorization: Optional[SenderAuthorization] = None
    caller: Optional[StrictStr] = Field(default=None, description="the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability.")
    category: Optional[LocalizableString] = None
    claims: Optional[Dict[str, StrictStr]] = Field(default=None, description="key value pairs to identify ARM permissions.")
    correlation_id: Optional[StrictStr] = Field(default=None, description="the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation.", alias="correlationId")
    description: Optional[StrictStr] = Field(default=None, description="the description of the event.")
    event_data_id: Optional[StrictStr] = Field(default=None, description="the event data Id. This is a unique identifier for an event.", alias="eventDataId")
    event_name: Optional[LocalizableString] = Field(default=None, alias="eventName")
    event_timestamp: Optional[datetime] = Field(default=None, description="the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format.", alias="eventTimestamp")
    http_request: Optional[HttpRequestInfo] = Field(default=None, alias="httpRequest")
    id: Optional[StrictStr] = Field(default=None, description="the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information.")
    level: Optional[StrictStr] = Field(default=None, description="the event level")
    operation_id: Optional[StrictStr] = Field(default=None, description="It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName.", alias="operationId")
    operation_name: Optional[LocalizableString] = Field(default=None, alias="operationName")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="the set of <Key, Value> pairs (usually a Dictionary<String, String>) that includes details about the event.")
    resource_group_name: Optional[StrictStr] = Field(default=None, description="the resource group name of the impacted resource.", alias="resourceGroupName")
    resource_id: Optional[StrictStr] = Field(default=None, description="the resource uri that uniquely identifies the resource that caused this event.", alias="resourceId")
    resource_provider_name: Optional[LocalizableString] = Field(default=None, alias="resourceProviderName")
    resource_type: Optional[LocalizableString] = Field(default=None, alias="resourceType")
    status: Optional[LocalizableString] = None
    sub_status: Optional[LocalizableString] = Field(default=None, alias="subStatus")
    submission_timestamp: Optional[datetime] = Field(default=None, description="the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure.", alias="submissionTimestamp")
    subscription_id: Optional[StrictStr] = Field(default=None, description="the Azure subscription Id usually a GUID.", alias="subscriptionId")
    tenant_id: Optional[StrictStr] = Field(default=None, description="the Azure tenant Id", alias="tenantId")
    __properties: ClassVar[List[str]] = ["authorization", "caller", "category", "claims", "correlationId", "description", "eventDataId", "eventName", "eventTimestamp", "httpRequest", "id", "level", "operationId", "operationName", "properties", "resourceGroupName", "resourceId", "resourceProviderName", "resourceType", "status", "subStatus", "submissionTimestamp", "subscriptionId", "tenantId"]

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Critical', 'Error', 'Warning', 'Informational', 'Verbose']):
            raise ValueError("must be one of enum values ('Critical', 'Error', 'Warning', 'Informational', 'Verbose')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "caller",
            "claims",
            "correlation_id",
            "description",
            "event_data_id",
            "event_timestamp",
            "id",
            "level",
            "operation_id",
            "properties",
            "resource_group_name",
            "resource_id",
            "submission_timestamp",
            "subscription_id",
            "tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authorization
        if self.authorization:
            _dict['authorization'] = self.authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_name
        if self.event_name:
            _dict['eventName'] = self.event_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_request
        if self.http_request:
            _dict['httpRequest'] = self.http_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_name
        if self.operation_name:
            _dict['operationName'] = self.operation_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_provider_name
        if self.resource_provider_name:
            _dict['resourceProviderName'] = self.resource_provider_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_type
        if self.resource_type:
            _dict['resourceType'] = self.resource_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_status
        if self.sub_status:
            _dict['subStatus'] = self.sub_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorization": SenderAuthorization.from_dict(obj["authorization"]) if obj.get("authorization") is not None else None,
            "caller": obj.get("caller"),
            "category": LocalizableString.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "claims": obj.get("claims"),
            "correlationId": obj.get("correlationId"),
            "description": obj.get("description"),
            "eventDataId": obj.get("eventDataId"),
            "eventName": LocalizableString.from_dict(obj["eventName"]) if obj.get("eventName") is not None else None,
            "eventTimestamp": obj.get("eventTimestamp"),
            "httpRequest": HttpRequestInfo.from_dict(obj["httpRequest"]) if obj.get("httpRequest") is not None else None,
            "id": obj.get("id"),
            "level": obj.get("level"),
            "operationId": obj.get("operationId"),
            "operationName": LocalizableString.from_dict(obj["operationName"]) if obj.get("operationName") is not None else None,
            "properties": obj.get("properties"),
            "resourceGroupName": obj.get("resourceGroupName"),
            "resourceId": obj.get("resourceId"),
            "resourceProviderName": LocalizableString.from_dict(obj["resourceProviderName"]) if obj.get("resourceProviderName") is not None else None,
            "resourceType": LocalizableString.from_dict(obj["resourceType"]) if obj.get("resourceType") is not None else None,
            "status": LocalizableString.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "subStatus": LocalizableString.from_dict(obj["subStatus"]) if obj.get("subStatus") is not None else None,
            "submissionTimestamp": obj.get("submissionTimestamp"),
            "subscriptionId": obj.get("subscriptionId"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



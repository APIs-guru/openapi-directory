# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.event_data_collection import EventDataCollection

class TestEventDataCollection(unittest.TestCase):
    """EventDataCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EventDataCollection:
        """Test EventDataCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EventDataCollection`
        """
        model = EventDataCollection()
        if include_optional:
            return EventDataCollection(
                next_link = '',
                value = [
                    openapi_client.models.event_data.EventData(
                        authorization = openapi_client.models.sender_authorization.SenderAuthorization(
                            action = '', 
                            role = '', 
                            scope = '', ), 
                        caller = '', 
                        category = openapi_client.models.localizable_string.LocalizableString(
                            localized_value = '', 
                            value = '', ), 
                        claims = {
                            'key' : ''
                            }, 
                        correlation_id = '', 
                        description = '', 
                        event_data_id = '', 
                        event_name = openapi_client.models.localizable_string.LocalizableString(
                            localized_value = '', 
                            value = '', ), 
                        event_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        http_request = openapi_client.models.http_request_info.HttpRequestInfo(
                            client_ip_address = '', 
                            client_request_id = '', 
                            method = '', 
                            uri = '', ), 
                        id = '', 
                        level = 'Critical', 
                        operation_id = '', 
                        operation_name = , 
                        properties = {
                            'key' : ''
                            }, 
                        resource_group_name = '', 
                        resource_id = '', 
                        resource_provider_name = , 
                        resource_type = , 
                        status = , 
                        sub_status = , 
                        submission_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        subscription_id = '', 
                        tenant_id = '', )
                    ]
            )
        else:
            return EventDataCollection(
                value = [
                    openapi_client.models.event_data.EventData(
                        authorization = openapi_client.models.sender_authorization.SenderAuthorization(
                            action = '', 
                            role = '', 
                            scope = '', ), 
                        caller = '', 
                        category = openapi_client.models.localizable_string.LocalizableString(
                            localized_value = '', 
                            value = '', ), 
                        claims = {
                            'key' : ''
                            }, 
                        correlation_id = '', 
                        description = '', 
                        event_data_id = '', 
                        event_name = openapi_client.models.localizable_string.LocalizableString(
                            localized_value = '', 
                            value = '', ), 
                        event_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        http_request = openapi_client.models.http_request_info.HttpRequestInfo(
                            client_ip_address = '', 
                            client_request_id = '', 
                            method = '', 
                            uri = '', ), 
                        id = '', 
                        level = 'Critical', 
                        operation_id = '', 
                        operation_name = , 
                        properties = {
                            'key' : ''
                            }, 
                        resource_group_name = '', 
                        resource_id = '', 
                        resource_provider_name = , 
                        resource_type = , 
                        status = , 
                        sub_status = , 
                        submission_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        subscription_id = '', 
                        tenant_id = '', )
                    ],
        )
        """

    def testEventDataCollection(self):
        """Test EventDataCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

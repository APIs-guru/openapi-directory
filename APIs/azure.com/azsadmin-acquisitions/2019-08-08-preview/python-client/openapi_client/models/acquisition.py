# coding: utf-8

"""
    StorageManagementClient

    The Admin Storage Management Client.

    The version of the OpenAPI document: 2019-08-08-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.acquisition_status import AcquisitionStatus
from typing import Optional, Set
from typing_extensions import Self

class Acquisition(BaseModel):
    """
    The acquisition of the page BLOB.
    """ # noqa: E501
    acquisitionid: Optional[StrictStr] = Field(default=None, description="The ID of page BLOB acquisition.")
    blob: Optional[StrictStr] = Field(default=None, description="The name of the page BLOB.")
    container: Optional[StrictStr] = Field(default=None, description="The container associated with the page BLOB.")
    file_path: Optional[StrictStr] = Field(default=None, description="The file path of the page BLOB file on storage cluster.", alias="filePath")
    file_path_unc: Optional[StrictStr] = Field(default=None, description="The file path unc of the page BLOB file on storage cluster.", alias="filePathUnc")
    maximumblobsize: Optional[StrictInt] = Field(default=None, description="The maximum size of the page BLOB.")
    status: Optional[AcquisitionStatus] = None
    storageaccount: Optional[StrictStr] = Field(default=None, description="The storage account that holds the page BLOB.")
    susbcriptionid: Optional[StrictStr] = Field(default=None, description="ID of the subscription associated with the page BLOB.")
    __properties: ClassVar[List[str]] = ["acquisitionid", "blob", "container", "filePath", "filePathUnc", "maximumblobsize", "status", "storageaccount", "susbcriptionid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Acquisition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "acquisitionid",
            "blob",
            "container",
            "file_path",
            "file_path_unc",
            "maximumblobsize",
            "storageaccount",
            "susbcriptionid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Acquisition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acquisitionid": obj.get("acquisitionid"),
            "blob": obj.get("blob"),
            "container": obj.get("container"),
            "filePath": obj.get("filePath"),
            "filePathUnc": obj.get("filePathUnc"),
            "maximumblobsize": obj.get("maximumblobsize"),
            "status": obj.get("status"),
            "storageaccount": obj.get("storageaccount"),
            "susbcriptionid": obj.get("susbcriptionid")
        })
        return _obj



# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.recommended_action import RecommendedAction
from typing import Optional, Set
from typing_extensions import Self

class AdvisorProperties(BaseModel):
    """
    Properties for a Database, Server or Elastic Pool Advisor.
    """ # noqa: E501
    advisor_status: Optional[StrictStr] = Field(default=None, description="Gets the status of availability of this advisor to customers. Possible values are 'GA', 'PublicPreview', 'LimitedPublicPreview' and 'PrivatePreview'.", alias="advisorStatus")
    auto_execute_status: StrictStr = Field(description="Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'", alias="autoExecuteStatus")
    auto_execute_status_inherited_from: Optional[StrictStr] = Field(default=None, description="Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are 'Subscription', 'Server', 'ElasticPool', 'Database' and 'Default' (when status is not explicitly set on any level).", alias="autoExecuteStatusInheritedFrom")
    last_checked: Optional[datetime] = Field(default=None, description="Gets the time when the current resource was analyzed for recommendations by this advisor.", alias="lastChecked")
    recommendations_status: Optional[StrictStr] = Field(default=None, description="Gets that status of recommendations for this advisor and reason for not having any recommendations. Possible values include, but are not limited to, 'Ok' (Recommendations available),LowActivity (not enough workload to analyze), 'DbSeemsTuned' (Database is doing well), etc.", alias="recommendationsStatus")
    recommended_actions: Optional[List[RecommendedAction]] = Field(default=None, description="Gets the recommended actions for this advisor.", alias="recommendedActions")
    __properties: ClassVar[List[str]] = ["advisorStatus", "autoExecuteStatus", "autoExecuteStatusInheritedFrom", "lastChecked", "recommendationsStatus", "recommendedActions"]

    @field_validator('advisor_status')
    def advisor_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GA', 'PublicPreview', 'LimitedPublicPreview', 'PrivatePreview']):
            raise ValueError("must be one of enum values ('GA', 'PublicPreview', 'LimitedPublicPreview', 'PrivatePreview')")
        return value

    @field_validator('auto_execute_status')
    def auto_execute_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled', 'Default']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled', 'Default')")
        return value

    @field_validator('auto_execute_status_inherited_from')
    def auto_execute_status_inherited_from_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'Subscription', 'Server', 'ElasticPool', 'Database']):
            raise ValueError("must be one of enum values ('Default', 'Subscription', 'Server', 'ElasticPool', 'Database')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvisorProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "advisor_status",
            "auto_execute_status_inherited_from",
            "last_checked",
            "recommendations_status",
            "recommended_actions",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recommended_actions (list)
        _items = []
        if self.recommended_actions:
            for _item_recommended_actions in self.recommended_actions:
                if _item_recommended_actions:
                    _items.append(_item_recommended_actions.to_dict())
            _dict['recommendedActions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvisorProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advisorStatus": obj.get("advisorStatus"),
            "autoExecuteStatus": obj.get("autoExecuteStatus"),
            "autoExecuteStatusInheritedFrom": obj.get("autoExecuteStatusInheritedFrom"),
            "lastChecked": obj.get("lastChecked"),
            "recommendationsStatus": obj.get("recommendationsStatus"),
            "recommendedActions": [RecommendedAction.from_dict(_item) for _item in obj["recommendedActions"]] if obj.get("recommendedActions") is not None else None
        })
        return _obj



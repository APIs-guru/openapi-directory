# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.recommended_action_error_info import RecommendedActionErrorInfo
from openapi_client.models.recommended_action_impact_record import RecommendedActionImpactRecord
from openapi_client.models.recommended_action_implementation_info import RecommendedActionImplementationInfo
from openapi_client.models.recommended_action_metric_info import RecommendedActionMetricInfo
from openapi_client.models.recommended_action_state_info import RecommendedActionStateInfo
from typing import Optional, Set
from typing_extensions import Self

class RecommendedActionProperties(BaseModel):
    """
    Properties for a Database, Server or Elastic Pool Recommended Action.
    """ # noqa: E501
    details: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Gets additional details specific to this recommended action.")
    error_details: Optional[RecommendedActionErrorInfo] = Field(default=None, alias="errorDetails")
    estimated_impact: Optional[List[RecommendedActionImpactRecord]] = Field(default=None, description="Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change", alias="estimatedImpact")
    execute_action_duration: Optional[StrictStr] = Field(default=None, description="Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation", alias="executeActionDuration")
    execute_action_initiated_by: Optional[StrictStr] = Field(default=None, description="Gets if approval for applying this recommended action was given by user/system.", alias="executeActionInitiatedBy")
    execute_action_initiated_time: Optional[datetime] = Field(default=None, description="Gets the time when this recommended action was approved for execution.", alias="executeActionInitiatedTime")
    execute_action_start_time: Optional[datetime] = Field(default=None, description="Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time", alias="executeActionStartTime")
    implementation_details: Optional[RecommendedActionImplementationInfo] = Field(default=None, alias="implementationDetails")
    is_archived_action: Optional[StrictBool] = Field(default=None, description="Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.", alias="isArchivedAction")
    is_executable_action: Optional[StrictBool] = Field(default=None, description="Gets if this recommended action is actionable by user", alias="isExecutableAction")
    is_revertable_action: Optional[StrictBool] = Field(default=None, description="Gets if changes applied by this recommended action can be reverted by user", alias="isRevertableAction")
    last_refresh: Optional[datetime] = Field(default=None, description="Gets time when this recommended action was last refreshed.", alias="lastRefresh")
    linked_objects: Optional[List[StrictStr]] = Field(default=None, description="Gets the linked objects, if any.", alias="linkedObjects")
    observed_impact: Optional[List[RecommendedActionImpactRecord]] = Field(default=None, description="Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change", alias="observedImpact")
    recommendation_reason: Optional[StrictStr] = Field(default=None, description="Gets the reason for recommending this action. e.g., DuplicateIndex", alias="recommendationReason")
    revert_action_duration: Optional[StrictStr] = Field(default=None, description="Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.", alias="revertActionDuration")
    revert_action_initiated_by: Optional[StrictStr] = Field(default=None, description="Gets if approval for reverting this recommended action was given by user/system.", alias="revertActionInitiatedBy")
    revert_action_initiated_time: Optional[datetime] = Field(default=None, description="Gets the time when this recommended action was approved for revert.", alias="revertActionInitiatedTime")
    revert_action_start_time: Optional[datetime] = Field(default=None, description="Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.", alias="revertActionStartTime")
    score: Optional[StrictInt] = Field(default=None, description="Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact")
    state: RecommendedActionStateInfo
    time_series: Optional[List[RecommendedActionMetricInfo]] = Field(default=None, description="Gets the time series info of metrics for this recommended action e.g., CPU consumption time series", alias="timeSeries")
    valid_since: Optional[datetime] = Field(default=None, description="Gets the time since when this recommended action is valid.", alias="validSince")
    __properties: ClassVar[List[str]] = ["details", "errorDetails", "estimatedImpact", "executeActionDuration", "executeActionInitiatedBy", "executeActionInitiatedTime", "executeActionStartTime", "implementationDetails", "isArchivedAction", "isExecutableAction", "isRevertableAction", "lastRefresh", "linkedObjects", "observedImpact", "recommendationReason", "revertActionDuration", "revertActionInitiatedBy", "revertActionInitiatedTime", "revertActionStartTime", "score", "state", "timeSeries", "validSince"]

    @field_validator('execute_action_initiated_by')
    def execute_action_initiated_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['User', 'System']):
            raise ValueError("must be one of enum values ('User', 'System')")
        return value

    @field_validator('revert_action_initiated_by')
    def revert_action_initiated_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['User', 'System']):
            raise ValueError("must be one of enum values ('User', 'System')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendedActionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "details",
            "estimated_impact",
            "execute_action_duration",
            "execute_action_initiated_by",
            "execute_action_initiated_time",
            "execute_action_start_time",
            "is_archived_action",
            "is_executable_action",
            "is_revertable_action",
            "last_refresh",
            "linked_objects",
            "observed_impact",
            "recommendation_reason",
            "revert_action_duration",
            "revert_action_initiated_by",
            "revert_action_initiated_time",
            "revert_action_start_time",
            "score",
            "time_series",
            "valid_since",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_details
        if self.error_details:
            _dict['errorDetails'] = self.error_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in estimated_impact (list)
        _items = []
        if self.estimated_impact:
            for _item_estimated_impact in self.estimated_impact:
                if _item_estimated_impact:
                    _items.append(_item_estimated_impact.to_dict())
            _dict['estimatedImpact'] = _items
        # override the default output from pydantic by calling `to_dict()` of implementation_details
        if self.implementation_details:
            _dict['implementationDetails'] = self.implementation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in observed_impact (list)
        _items = []
        if self.observed_impact:
            for _item_observed_impact in self.observed_impact:
                if _item_observed_impact:
                    _items.append(_item_observed_impact.to_dict())
            _dict['observedImpact'] = _items
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in time_series (list)
        _items = []
        if self.time_series:
            for _item_time_series in self.time_series:
                if _item_time_series:
                    _items.append(_item_time_series.to_dict())
            _dict['timeSeries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendedActionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "details": obj.get("details"),
            "errorDetails": RecommendedActionErrorInfo.from_dict(obj["errorDetails"]) if obj.get("errorDetails") is not None else None,
            "estimatedImpact": [RecommendedActionImpactRecord.from_dict(_item) for _item in obj["estimatedImpact"]] if obj.get("estimatedImpact") is not None else None,
            "executeActionDuration": obj.get("executeActionDuration"),
            "executeActionInitiatedBy": obj.get("executeActionInitiatedBy"),
            "executeActionInitiatedTime": obj.get("executeActionInitiatedTime"),
            "executeActionStartTime": obj.get("executeActionStartTime"),
            "implementationDetails": RecommendedActionImplementationInfo.from_dict(obj["implementationDetails"]) if obj.get("implementationDetails") is not None else None,
            "isArchivedAction": obj.get("isArchivedAction"),
            "isExecutableAction": obj.get("isExecutableAction"),
            "isRevertableAction": obj.get("isRevertableAction"),
            "lastRefresh": obj.get("lastRefresh"),
            "linkedObjects": obj.get("linkedObjects"),
            "observedImpact": [RecommendedActionImpactRecord.from_dict(_item) for _item in obj["observedImpact"]] if obj.get("observedImpact") is not None else None,
            "recommendationReason": obj.get("recommendationReason"),
            "revertActionDuration": obj.get("revertActionDuration"),
            "revertActionInitiatedBy": obj.get("revertActionInitiatedBy"),
            "revertActionInitiatedTime": obj.get("revertActionInitiatedTime"),
            "revertActionStartTime": obj.get("revertActionStartTime"),
            "score": obj.get("score"),
            "state": RecommendedActionStateInfo.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "timeSeries": [RecommendedActionMetricInfo.from_dict(_item) for _item in obj["timeSeries"]] if obj.get("timeSeries") is not None else None,
            "validSince": obj.get("validSince")
        })
        return _obj



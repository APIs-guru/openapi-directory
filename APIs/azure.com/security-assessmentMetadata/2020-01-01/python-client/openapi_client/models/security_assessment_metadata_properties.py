# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.security_assessment_metadata_partner_data import SecurityAssessmentMetadataPartnerData
from typing import Optional, Set
from typing_extensions import Self

class SecurityAssessmentMetadataProperties(BaseModel):
    """
    Describes properties of an assessment metadata.
    """ # noqa: E501
    assessment_type: StrictStr = Field(description="BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition", alias="assessmentType")
    category: Optional[List[StrictStr]] = None
    description: Optional[StrictStr] = Field(default=None, description="Human readable description of the assessment")
    display_name: StrictStr = Field(description="User friendly display name of the assessment", alias="displayName")
    implementation_effort: Optional[StrictStr] = Field(default=None, description="The implementation effort required to remediate this assessment", alias="implementationEffort")
    partner_data: Optional[SecurityAssessmentMetadataPartnerData] = Field(default=None, alias="partnerData")
    policy_definition_id: Optional[StrictStr] = Field(default=None, description="Azure resource ID of the policy definition that turns this assessment calculation on", alias="policyDefinitionId")
    preview: Optional[StrictBool] = Field(default=None, description="True if this assessment is in preview release status")
    remediation_description: Optional[StrictStr] = Field(default=None, description="Human readable description of what you should do to mitigate this security issue", alias="remediationDescription")
    severity: StrictStr = Field(description="The severity level of the assessment")
    threats: Optional[List[StrictStr]] = None
    user_impact: Optional[StrictStr] = Field(default=None, description="The user impact of the assessment", alias="userImpact")
    __properties: ClassVar[List[str]] = ["assessmentType", "category", "description", "displayName", "implementationEffort", "partnerData", "policyDefinitionId", "preview", "remediationDescription", "severity", "threats", "userImpact"]

    @field_validator('assessment_type')
    def assessment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BuiltIn', 'CustomPolicy', 'CustomerManaged', 'VerifiedPartner']):
            raise ValueError("must be one of enum values ('BuiltIn', 'CustomPolicy', 'CustomerManaged', 'VerifiedPartner')")
        return value

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Compute', 'Networking', 'Data', 'IdentityAndAccess', 'IoT']):
                raise ValueError("each list item must be one of ('Compute', 'Networking', 'Data', 'IdentityAndAccess', 'IoT')")
        return value

    @field_validator('implementation_effort')
    def implementation_effort_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Low', 'Moderate', 'High']):
            raise ValueError("must be one of enum values ('Low', 'Moderate', 'High')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Low', 'Medium', 'High']):
            raise ValueError("must be one of enum values ('Low', 'Medium', 'High')")
        return value

    @field_validator('threats')
    def threats_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['accountBreach', 'dataExfiltration', 'dataSpillage', 'maliciousInsider', 'elevationOfPrivilege', 'threatResistance', 'missingCoverage', 'denialOfService']):
                raise ValueError("each list item must be one of ('accountBreach', 'dataExfiltration', 'dataSpillage', 'maliciousInsider', 'elevationOfPrivilege', 'threatResistance', 'missingCoverage', 'denialOfService')")
        return value

    @field_validator('user_impact')
    def user_impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Low', 'Moderate', 'High']):
            raise ValueError("must be one of enum values ('Low', 'Moderate', 'High')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityAssessmentMetadataProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "policy_definition_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partner_data
        if self.partner_data:
            _dict['partnerData'] = self.partner_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityAssessmentMetadataProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assessmentType": obj.get("assessmentType"),
            "category": obj.get("category"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "implementationEffort": obj.get("implementationEffort"),
            "partnerData": SecurityAssessmentMetadataPartnerData.from_dict(obj["partnerData"]) if obj.get("partnerData") is not None else None,
            "policyDefinitionId": obj.get("policyDefinitionId"),
            "preview": obj.get("preview"),
            "remediationDescription": obj.get("remediationDescription"),
            "severity": obj.get("severity"),
            "threats": obj.get("threats"),
            "userImpact": obj.get("userImpact")
        })
        return _obj



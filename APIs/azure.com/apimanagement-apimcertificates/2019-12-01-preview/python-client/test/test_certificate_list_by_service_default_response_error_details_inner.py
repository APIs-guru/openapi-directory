# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.certificate_list_by_service_default_response_error_details_inner import CertificateListByServiceDefaultResponseErrorDetailsInner

class TestCertificateListByServiceDefaultResponseErrorDetailsInner(unittest.TestCase):
    """CertificateListByServiceDefaultResponseErrorDetailsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CertificateListByServiceDefaultResponseErrorDetailsInner:
        """Test CertificateListByServiceDefaultResponseErrorDetailsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CertificateListByServiceDefaultResponseErrorDetailsInner`
        """
        model = CertificateListByServiceDefaultResponseErrorDetailsInner()
        if include_optional:
            return CertificateListByServiceDefaultResponseErrorDetailsInner(
                code = '',
                message = '',
                target = ''
            )
        else:
            return CertificateListByServiceDefaultResponseErrorDetailsInner(
        )
        """

    def testCertificateListByServiceDefaultResponseErrorDetailsInner(self):
        """Test CertificateListByServiceDefaultResponseErrorDetailsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

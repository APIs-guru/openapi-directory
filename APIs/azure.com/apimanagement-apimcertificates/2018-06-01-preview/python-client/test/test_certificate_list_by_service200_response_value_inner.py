# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.certificate_list_by_service200_response_value_inner import CertificateListByService200ResponseValueInner

class TestCertificateListByService200ResponseValueInner(unittest.TestCase):
    """CertificateListByService200ResponseValueInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CertificateListByService200ResponseValueInner:
        """Test CertificateListByService200ResponseValueInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CertificateListByService200ResponseValueInner`
        """
        model = CertificateListByService200ResponseValueInner()
        if include_optional:
            return CertificateListByService200ResponseValueInner(
                properties = openapi_client.models.certificate_list_by_service_200_response_value_inner_properties.Certificate_ListByService_200_response_value_inner_properties(
                    expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    subject = '', 
                    thumbprint = '', )
            )
        else:
            return CertificateListByService200ResponseValueInner(
        )
        """

    def testCertificateListByService200ResponseValueInner(self):
        """Test CertificateListByService200ResponseValueInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

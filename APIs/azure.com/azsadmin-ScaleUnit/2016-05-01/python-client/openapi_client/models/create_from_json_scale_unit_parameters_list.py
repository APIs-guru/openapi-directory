# coding: utf-8

"""
    FabricAdminClient

    Scale unit operation endpoints and objects.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployment_json_physical_node_parameters import DeploymentJsonPhysicalNodeParameters
from openapi_client.models.network_definition_parameter import NetworkDefinitionParameter
from typing import Optional, Set
from typing_extensions import Self

class CreateFromJsonScaleUnitParametersList(BaseModel):
    """
    A list of input data that allows for creating the new scale unit.
    """ # noqa: E501
    cluster_name: Optional[StrictStr] = Field(default=None, description="Cluster name for the new scale unit.", alias="clusterName")
    infrastructure_network: Optional[NetworkDefinitionParameter] = Field(default=None, alias="infrastructureNetwork")
    net_qos_priority: Optional[StrictInt] = Field(default=None, description="The network QOS priority setting.", alias="netQosPriority")
    physical_nodes: Optional[List[DeploymentJsonPhysicalNodeParameters]] = Field(default=None, description="List of nodes in the scale unit.", alias="physicalNodes")
    software_bgp_asn: Optional[StrictStr] = Field(default=None, description="The software ASN for the cluster's rack.", alias="softwareBgpAsn")
    storage_network: Optional[NetworkDefinitionParameter] = Field(default=None, alias="storageNetwork")
    tor_switch_bgp_asn: Optional[StrictStr] = Field(default=None, description="The ASN for the cluster's rack TOR.", alias="torSwitchBgpAsn")
    tor_switch_bgp_peer_ip: Optional[List[StrictStr]] = Field(default=None, description="The list of IP addresses used for TOR communication.", alias="torSwitchBgpPeerIp")
    __properties: ClassVar[List[str]] = ["clusterName", "infrastructureNetwork", "netQosPriority", "physicalNodes", "softwareBgpAsn", "storageNetwork", "torSwitchBgpAsn", "torSwitchBgpPeerIp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFromJsonScaleUnitParametersList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of infrastructure_network
        if self.infrastructure_network:
            _dict['infrastructureNetwork'] = self.infrastructure_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in physical_nodes (list)
        _items = []
        if self.physical_nodes:
            for _item_physical_nodes in self.physical_nodes:
                if _item_physical_nodes:
                    _items.append(_item_physical_nodes.to_dict())
            _dict['physicalNodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of storage_network
        if self.storage_network:
            _dict['storageNetwork'] = self.storage_network.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFromJsonScaleUnitParametersList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterName": obj.get("clusterName"),
            "infrastructureNetwork": NetworkDefinitionParameter.from_dict(obj["infrastructureNetwork"]) if obj.get("infrastructureNetwork") is not None else None,
            "netQosPriority": obj.get("netQosPriority"),
            "physicalNodes": [DeploymentJsonPhysicalNodeParameters.from_dict(_item) for _item in obj["physicalNodes"]] if obj.get("physicalNodes") is not None else None,
            "softwareBgpAsn": obj.get("softwareBgpAsn"),
            "storageNetwork": NetworkDefinitionParameter.from_dict(obj["storageNetwork"]) if obj.get("storageNetwork") is not None else None,
            "torSwitchBgpAsn": obj.get("torSwitchBgpAsn"),
            "torSwitchBgpPeerIp": obj.get("torSwitchBgpPeerIp")
        })
        return _obj



# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for selecting pricing plans and options.

    The version of the OpenAPI document: 2017-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PricingPlanProperties(BaseModel):
    """
    An Application Insights component daily data volume cap
    """ # noqa: E501
    cap: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Daily data volume cap in GB.")
    max_history_cap: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum daily data volume cap that the user can set for this component.", alias="maxHistoryCap")
    plan_type: Optional[StrictStr] = Field(default=None, description="Pricing Plan Type Name.", alias="planType")
    reset_hour: Optional[StrictInt] = Field(default=None, description="Daily data volume cap UTC reset hour.", alias="resetHour")
    stop_send_notification_when_hit_cap: Optional[StrictBool] = Field(default=None, description="Do not send a notification email when the daily data volume cap is met.", alias="stopSendNotificationWhenHitCap")
    stop_send_notification_when_hit_threshold: Optional[StrictBool] = Field(default=None, description="Reserved, not used for now.", alias="stopSendNotificationWhenHitThreshold")
    warning_threshold: Optional[StrictInt] = Field(default=None, description="Reserved, not used for now.", alias="warningThreshold")
    __properties: ClassVar[List[str]] = ["cap", "maxHistoryCap", "planType", "resetHour", "stopSendNotificationWhenHitCap", "stopSendNotificationWhenHitThreshold", "warningThreshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingPlanProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "max_history_cap",
            "reset_hour",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingPlanProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cap": obj.get("cap"),
            "maxHistoryCap": obj.get("maxHistoryCap"),
            "planType": obj.get("planType"),
            "resetHour": obj.get("resetHour"),
            "stopSendNotificationWhenHitCap": obj.get("stopSendNotificationWhenHitCap"),
            "stopSendNotificationWhenHitThreshold": obj.get("stopSendNotificationWhenHitThreshold"),
            "warningThreshold": obj.get("warningThreshold")
        })
        return _obj



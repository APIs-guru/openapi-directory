# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for selecting pricing plans and options.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_insights_component_feature_capability import ApplicationInsightsComponentFeatureCapability
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInsightsComponentFeature(BaseModel):
    """
    An Application Insights component daily data volume cap status
    """ # noqa: E501
    capabilities: Optional[List[ApplicationInsightsComponentFeatureCapability]] = Field(default=None, description="A list of Application Insights component feature capability.", alias="Capabilities")
    feature_name: Optional[StrictStr] = Field(default=None, description="The pricing feature name.", alias="FeatureName")
    is_hidden: Optional[StrictBool] = Field(default=None, description="Reserved, not used now.", alias="IsHidden")
    is_main_feature: Optional[StrictBool] = Field(default=None, description="Whether can apply addon feature on to it.", alias="IsMainFeature")
    meter_id: Optional[StrictStr] = Field(default=None, description="The meter id used for the feature.", alias="MeterId")
    meter_rate_frequency: Optional[StrictStr] = Field(default=None, description="The meter rate for the feature's meter.", alias="MeterRateFrequency")
    resouce_id: Optional[StrictStr] = Field(default=None, description="Reserved, not used now.", alias="ResouceId")
    supported_addon_features: Optional[StrictStr] = Field(default=None, description="The add on features on main feature.", alias="SupportedAddonFeatures")
    title: Optional[StrictStr] = Field(default=None, description="Display name of the feature.", alias="Title")
    __properties: ClassVar[List[str]] = ["Capabilities", "FeatureName", "IsHidden", "IsMainFeature", "MeterId", "MeterRateFrequency", "ResouceId", "SupportedAddonFeatures", "Title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentFeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "capabilities",
            "feature_name",
            "is_hidden",
            "is_main_feature",
            "meter_id",
            "meter_rate_frequency",
            "resouce_id",
            "supported_addon_features",
            "title",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in capabilities (list)
        _items = []
        if self.capabilities:
            for _item_capabilities in self.capabilities:
                if _item_capabilities:
                    _items.append(_item_capabilities.to_dict())
            _dict['Capabilities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentFeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Capabilities": [ApplicationInsightsComponentFeatureCapability.from_dict(_item) for _item in obj["Capabilities"]] if obj.get("Capabilities") is not None else None,
            "FeatureName": obj.get("FeatureName"),
            "IsHidden": obj.get("IsHidden"),
            "IsMainFeature": obj.get("IsMainFeature"),
            "MeterId": obj.get("MeterId"),
            "MeterRateFrequency": obj.get("MeterRateFrequency"),
            "ResouceId": obj.get("ResouceId"),
            "SupportedAddonFeatures": obj.get("SupportedAddonFeatures"),
            "Title": obj.get("Title")
        })
        return _obj



# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for selecting pricing plans and options.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInsightsComponentFeatureCapabilities(BaseModel):
    """
    An Application Insights component feature capabilities
    """ # noqa: E501
    analytics_integration: Optional[StrictBool] = Field(default=None, description="Reserved, not used now.", alias="AnalyticsIntegration")
    api_access_level: Optional[StrictStr] = Field(default=None, description="Reserved, not used now.", alias="ApiAccessLevel")
    application_map: Optional[StrictBool] = Field(default=None, description="Reserved, not used now.", alias="ApplicationMap")
    burst_throttle_policy: Optional[StrictStr] = Field(default=None, description="Reserved, not used now.", alias="BurstThrottlePolicy")
    daily_cap: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Daily data volume cap in GB.", alias="DailyCap")
    daily_cap_reset_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Daily data volume cap UTC reset hour.", alias="DailyCapResetTime")
    live_stream_metrics: Optional[StrictBool] = Field(default=None, description="Reserved, not used now.", alias="LiveStreamMetrics")
    metadata_class: Optional[StrictStr] = Field(default=None, description="Reserved, not used now.", alias="MetadataClass")
    multiple_step_web_test: Optional[StrictBool] = Field(default=None, description="Whether allow to use multiple steps web test feature.", alias="MultipleStepWebTest")
    open_schema: Optional[StrictBool] = Field(default=None, description="Reserved, not used now.", alias="OpenSchema")
    power_bi_integration: Optional[StrictBool] = Field(default=None, description="Reserved, not used now.", alias="PowerBIIntegration")
    proactive_detection: Optional[StrictBool] = Field(default=None, description="Reserved, not used now.", alias="ProactiveDetection")
    support_export_data: Optional[StrictBool] = Field(default=None, description="Whether allow to use continuous export feature.", alias="SupportExportData")
    throttle_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Reserved, not used now.", alias="ThrottleRate")
    tracking_type: Optional[StrictStr] = Field(default=None, description="The application insights component used tracking type.", alias="TrackingType")
    work_item_integration: Optional[StrictBool] = Field(default=None, description="Whether allow to use work item integration feature.", alias="WorkItemIntegration")
    __properties: ClassVar[List[str]] = ["AnalyticsIntegration", "ApiAccessLevel", "ApplicationMap", "BurstThrottlePolicy", "DailyCap", "DailyCapResetTime", "LiveStreamMetrics", "MetadataClass", "MultipleStepWebTest", "OpenSchema", "PowerBIIntegration", "ProactiveDetection", "SupportExportData", "ThrottleRate", "TrackingType", "WorkItemIntegration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentFeatureCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "analytics_integration",
            "api_access_level",
            "application_map",
            "burst_throttle_policy",
            "daily_cap",
            "daily_cap_reset_time",
            "live_stream_metrics",
            "metadata_class",
            "multiple_step_web_test",
            "open_schema",
            "power_bi_integration",
            "proactive_detection",
            "support_export_data",
            "throttle_rate",
            "tracking_type",
            "work_item_integration",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentFeatureCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AnalyticsIntegration": obj.get("AnalyticsIntegration"),
            "ApiAccessLevel": obj.get("ApiAccessLevel"),
            "ApplicationMap": obj.get("ApplicationMap"),
            "BurstThrottlePolicy": obj.get("BurstThrottlePolicy"),
            "DailyCap": obj.get("DailyCap"),
            "DailyCapResetTime": obj.get("DailyCapResetTime"),
            "LiveStreamMetrics": obj.get("LiveStreamMetrics"),
            "MetadataClass": obj.get("MetadataClass"),
            "MultipleStepWebTest": obj.get("MultipleStepWebTest"),
            "OpenSchema": obj.get("OpenSchema"),
            "PowerBIIntegration": obj.get("PowerBIIntegration"),
            "ProactiveDetection": obj.get("ProactiveDetection"),
            "SupportExportData": obj.get("SupportExportData"),
            "ThrottleRate": obj.get("ThrottleRate"),
            "TrackingType": obj.get("TrackingType"),
            "WorkItemIntegration": obj.get("WorkItemIntegration")
        })
        return _obj



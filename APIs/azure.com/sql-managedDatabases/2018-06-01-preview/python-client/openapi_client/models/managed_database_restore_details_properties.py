# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ManagedDatabaseRestoreDetailsProperties(BaseModel):
    """
    The managed database's restore details properties.
    """ # noqa: E501
    block_reason: Optional[StrictStr] = Field(default=None, description="The reason why restore is in Blocked state.", alias="blockReason")
    current_restoring_file_name: Optional[StrictStr] = Field(default=None, description="Current restoring file name.", alias="currentRestoringFileName")
    last_restored_file_name: Optional[StrictStr] = Field(default=None, description="Last restored file name.", alias="lastRestoredFileName")
    last_restored_file_time: Optional[datetime] = Field(default=None, description="Last restored file time.", alias="lastRestoredFileTime")
    last_uploaded_file_name: Optional[StrictStr] = Field(default=None, description="Last uploaded file name.", alias="lastUploadedFileName")
    last_uploaded_file_time: Optional[datetime] = Field(default=None, description="Last uploaded file time.", alias="lastUploadedFileTime")
    number_of_files_detected: Optional[StrictInt] = Field(default=None, description="Number of files detected.", alias="numberOfFilesDetected")
    percent_completed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percent completed.", alias="percentCompleted")
    status: Optional[StrictStr] = Field(default=None, description="Restore status.")
    unrestorable_files: Optional[List[StrictStr]] = Field(default=None, description="List of unrestorable files.", alias="unrestorableFiles")
    __properties: ClassVar[List[str]] = ["blockReason", "currentRestoringFileName", "lastRestoredFileName", "lastRestoredFileTime", "lastUploadedFileName", "lastUploadedFileTime", "numberOfFilesDetected", "percentCompleted", "status", "unrestorableFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedDatabaseRestoreDetailsProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "block_reason",
            "current_restoring_file_name",
            "last_restored_file_name",
            "last_restored_file_time",
            "last_uploaded_file_name",
            "last_uploaded_file_time",
            "number_of_files_detected",
            "percent_completed",
            "status",
            "unrestorable_files",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedDatabaseRestoreDetailsProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockReason": obj.get("blockReason"),
            "currentRestoringFileName": obj.get("currentRestoringFileName"),
            "lastRestoredFileName": obj.get("lastRestoredFileName"),
            "lastRestoredFileTime": obj.get("lastRestoredFileTime"),
            "lastUploadedFileName": obj.get("lastUploadedFileName"),
            "lastUploadedFileTime": obj.get("lastUploadedFileTime"),
            "numberOfFilesDetected": obj.get("numberOfFilesDetected"),
            "percentCompleted": obj.get("percentCompleted"),
            "status": obj.get("status"),
            "unrestorableFiles": obj.get("unrestorableFiles")
        })
        return _obj



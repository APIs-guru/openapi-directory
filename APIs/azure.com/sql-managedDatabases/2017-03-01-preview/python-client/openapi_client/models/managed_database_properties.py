# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManagedDatabaseProperties(BaseModel):
    """
    The managed database's properties.
    """ # noqa: E501
    catalog_collation: Optional[StrictStr] = Field(default=None, description="Collation of the metadata catalog.", alias="catalogCollation")
    collation: Optional[StrictStr] = Field(default=None, description="Collation of the managed database.")
    create_mode: Optional[StrictStr] = Field(default=None, description="Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.", alias="createMode")
    creation_date: Optional[datetime] = Field(default=None, description="Creation date of the database.", alias="creationDate")
    default_secondary_location: Optional[StrictStr] = Field(default=None, description="Geo paired region.", alias="defaultSecondaryLocation")
    earliest_restore_point: Optional[datetime] = Field(default=None, description="Earliest restore point in time for point in time restore.", alias="earliestRestorePoint")
    failover_group_id: Optional[StrictStr] = Field(default=None, description="Instance Failover Group resource identifier that this managed database belongs to.", alias="failoverGroupId")
    recoverable_database_id: Optional[StrictStr] = Field(default=None, description="The resource identifier of the recoverable database associated with create operation of this database.", alias="recoverableDatabaseId")
    restorable_dropped_database_id: Optional[StrictStr] = Field(default=None, description="The restorable dropped database resource id to restore when creating this database.", alias="restorableDroppedDatabaseId")
    restore_point_in_time: Optional[datetime] = Field(default=None, description="Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.", alias="restorePointInTime")
    source_database_id: Optional[StrictStr] = Field(default=None, description="The resource identifier of the source database associated with create operation of this database.", alias="sourceDatabaseId")
    status: Optional[StrictStr] = Field(default=None, description="Status of the database.")
    storage_container_sas_token: Optional[StrictStr] = Field(default=None, description="Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the storage container sas token.", alias="storageContainerSasToken")
    storage_container_uri: Optional[StrictStr] = Field(default=None, description="Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri of the storage container where backups for this restore are stored.", alias="storageContainerUri")
    __properties: ClassVar[List[str]] = ["catalogCollation", "collation", "createMode", "creationDate", "defaultSecondaryLocation", "earliestRestorePoint", "failoverGroupId", "recoverableDatabaseId", "restorableDroppedDatabaseId", "restorePointInTime", "sourceDatabaseId", "status", "storageContainerSasToken", "storageContainerUri"]

    @field_validator('catalog_collation')
    def catalog_collation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_DEFAULT', 'SQL_Latin1_General_CP1_CI_AS']):
            raise ValueError("must be one of enum values ('DATABASE_DEFAULT', 'SQL_Latin1_General_CP1_CI_AS')")
        return value

    @field_validator('create_mode')
    def create_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery']):
            raise ValueError("must be one of enum values ('Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Online', 'Offline', 'Shutdown', 'Creating', 'Inaccessible', 'Updating']):
            raise ValueError("must be one of enum values ('Online', 'Offline', 'Shutdown', 'Creating', 'Inaccessible', 'Updating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedDatabaseProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_date",
            "default_secondary_location",
            "earliest_restore_point",
            "failover_group_id",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedDatabaseProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "catalogCollation": obj.get("catalogCollation"),
            "collation": obj.get("collation"),
            "createMode": obj.get("createMode"),
            "creationDate": obj.get("creationDate"),
            "defaultSecondaryLocation": obj.get("defaultSecondaryLocation"),
            "earliestRestorePoint": obj.get("earliestRestorePoint"),
            "failoverGroupId": obj.get("failoverGroupId"),
            "recoverableDatabaseId": obj.get("recoverableDatabaseId"),
            "restorableDroppedDatabaseId": obj.get("restorableDroppedDatabaseId"),
            "restorePointInTime": obj.get("restorePointInTime"),
            "sourceDatabaseId": obj.get("sourceDatabaseId"),
            "status": obj.get("status"),
            "storageContainerSasToken": obj.get("storageContainerSasToken"),
            "storageContainerUri": obj.get("storageContainerUri")
        })
        return _obj



# coding: utf-8

"""
    DataShareManagementClient

    Creates a Microsoft.DataShare management client.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InvitationProperties(BaseModel):
    """
    Invitation property bag.
    """ # noqa: E501
    invitation_id: Optional[StrictStr] = Field(default=None, description="unique invitation id", alias="invitationId")
    invitation_status: Optional[StrictStr] = Field(default=None, description="The status of the invitation.", alias="invitationStatus")
    responded_at: Optional[datetime] = Field(default=None, description="The time the recipient responded to the invitation.", alias="respondedAt")
    sent_at: Optional[datetime] = Field(default=None, description="Gets the time at which the invitation was sent.", alias="sentAt")
    target_active_directory_id: Optional[StrictStr] = Field(default=None, description="The target Azure AD Id. Can't be combined with email.", alias="targetActiveDirectoryId")
    target_email: Optional[StrictStr] = Field(default=None, description="The email the invitation is directed to.", alias="targetEmail")
    target_object_id: Optional[StrictStr] = Field(default=None, description="The target user or application Id that invitation is being sent to.  Must be specified along TargetActiveDirectoryId. This enables sending  invitations to specific users or applications in an AD tenant.", alias="targetObjectId")
    user_email: Optional[StrictStr] = Field(default=None, description="Email of the user who created the resource", alias="userEmail")
    user_name: Optional[StrictStr] = Field(default=None, description="Name of the user who created the resource", alias="userName")
    __properties: ClassVar[List[str]] = ["invitationId", "invitationStatus", "respondedAt", "sentAt", "targetActiveDirectoryId", "targetEmail", "targetObjectId", "userEmail", "userName"]

    @field_validator('invitation_status')
    def invitation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Pending', 'Accepted', 'Rejected', 'Withdrawn']):
            raise ValueError("must be one of enum values ('Pending', 'Accepted', 'Rejected', 'Withdrawn')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvitationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "invitation_id",
            "invitation_status",
            "responded_at",
            "sent_at",
            "user_email",
            "user_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvitationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invitationId": obj.get("invitationId"),
            "invitationStatus": obj.get("invitationStatus"),
            "respondedAt": obj.get("respondedAt"),
            "sentAt": obj.get("sentAt"),
            "targetActiveDirectoryId": obj.get("targetActiveDirectoryId"),
            "targetEmail": obj.get("targetEmail"),
            "targetObjectId": obj.get("targetObjectId"),
            "userEmail": obj.get("userEmail"),
            "userName": obj.get("userName")
        })
        return _obj



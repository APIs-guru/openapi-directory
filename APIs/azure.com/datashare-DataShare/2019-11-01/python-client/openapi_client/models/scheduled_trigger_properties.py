# coding: utf-8

"""
    DataShareManagementClient

    Creates a Microsoft.DataShare management client.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScheduledTriggerProperties(BaseModel):
    """
    A Scheduled trigger data transfer object.
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="Time at which the trigger was created.", alias="createdAt")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets the provisioning state", alias="provisioningState")
    recurrence_interval: StrictStr = Field(description="Recurrence Interval", alias="recurrenceInterval")
    synchronization_mode: Optional[StrictStr] = Field(default=None, description="Synchronization mode", alias="synchronizationMode")
    synchronization_time: datetime = Field(description="Synchronization time", alias="synchronizationTime")
    trigger_status: Optional[StrictStr] = Field(default=None, description="Gets the trigger state", alias="triggerStatus")
    user_name: Optional[StrictStr] = Field(default=None, description="Name of the user who created the trigger.", alias="userName")
    __properties: ClassVar[List[str]] = ["createdAt", "provisioningState", "recurrenceInterval", "synchronizationMode", "synchronizationTime", "triggerStatus", "userName"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Creating', 'Deleting', 'Moving', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Creating', 'Deleting', 'Moving', 'Failed')")
        return value

    @field_validator('recurrence_interval')
    def recurrence_interval_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Hour', 'Day']):
            raise ValueError("must be one of enum values ('Hour', 'Day')")
        return value

    @field_validator('synchronization_mode')
    def synchronization_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Incremental', 'FullSync']):
            raise ValueError("must be one of enum values ('Incremental', 'FullSync')")
        return value

    @field_validator('trigger_status')
    def trigger_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Inactive', 'SourceSynchronizationSettingDeleted']):
            raise ValueError("must be one of enum values ('Active', 'Inactive', 'SourceSynchronizationSettingDeleted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduledTriggerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "provisioning_state",
            "trigger_status",
            "user_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduledTriggerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "provisioningState": obj.get("provisioningState"),
            "recurrenceInterval": obj.get("recurrenceInterval"),
            "synchronizationMode": obj.get("synchronizationMode"),
            "synchronizationTime": obj.get("synchronizationTime"),
            "triggerStatus": obj.get("triggerStatus"),
            "userName": obj.get("userName")
        })
        return _obj



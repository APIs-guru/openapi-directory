# coding: utf-8

"""
    DataShareManagementClient

    Creates a Microsoft.DataShare management client.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SynchronizationDetails(BaseModel):
    """
    Synchronization details at data set level
    """ # noqa: E501
    data_set_id: Optional[StrictStr] = Field(default=None, description="Id of data set", alias="dataSetId")
    data_set_type: Optional[StrictStr] = Field(default=None, description="Type of the data set", alias="dataSetType")
    duration_ms: Optional[StrictInt] = Field(default=None, description="Duration of data set level copy", alias="durationMs")
    end_time: Optional[datetime] = Field(default=None, description="End time of data set level copy", alias="endTime")
    files_read: Optional[StrictInt] = Field(default=None, description="The number of files read from the source data set", alias="filesRead")
    files_written: Optional[StrictInt] = Field(default=None, description="The number of files written into the sink data set", alias="filesWritten")
    message: Optional[StrictStr] = Field(default=None, description="Error message if any")
    name: Optional[StrictStr] = Field(default=None, description="Name of the data set")
    rows_copied: Optional[StrictInt] = Field(default=None, description="The number of files copied into the sink data set", alias="rowsCopied")
    rows_read: Optional[StrictInt] = Field(default=None, description="The number of rows read from the source data set.", alias="rowsRead")
    size_read: Optional[StrictInt] = Field(default=None, description="The size of the data read from the source data set in bytes", alias="sizeRead")
    size_written: Optional[StrictInt] = Field(default=None, description="The size of the data written into the sink data set in bytes", alias="sizeWritten")
    start_time: Optional[datetime] = Field(default=None, description="Start time of data set level copy", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Raw Status")
    v_core: Optional[StrictInt] = Field(default=None, description="The vCore units consumed for the data set synchronization", alias="vCore")
    __properties: ClassVar[List[str]] = ["dataSetId", "dataSetType", "durationMs", "endTime", "filesRead", "filesWritten", "message", "name", "rowsCopied", "rowsRead", "sizeRead", "sizeWritten", "startTime", "status", "vCore"]

    @field_validator('data_set_type')
    def data_set_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Blob', 'Container', 'BlobFolder', 'AdlsGen2FileSystem', 'AdlsGen2Folder', 'AdlsGen2File', 'AdlsGen1Folder', 'AdlsGen1File', 'KustoCluster', 'KustoDatabase', 'SqlDBTable', 'SqlDWTable']):
            raise ValueError("must be one of enum values ('Blob', 'Container', 'BlobFolder', 'AdlsGen2FileSystem', 'AdlsGen2Folder', 'AdlsGen2File', 'AdlsGen1Folder', 'AdlsGen1File', 'KustoCluster', 'KustoDatabase', 'SqlDBTable', 'SqlDWTable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SynchronizationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_set_id",
            "data_set_type",
            "duration_ms",
            "end_time",
            "files_read",
            "files_written",
            "message",
            "name",
            "rows_copied",
            "rows_read",
            "size_read",
            "size_written",
            "start_time",
            "status",
            "v_core",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SynchronizationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSetId": obj.get("dataSetId"),
            "dataSetType": obj.get("dataSetType"),
            "durationMs": obj.get("durationMs"),
            "endTime": obj.get("endTime"),
            "filesRead": obj.get("filesRead"),
            "filesWritten": obj.get("filesWritten"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "rowsCopied": obj.get("rowsCopied"),
            "rowsRead": obj.get("rowsRead"),
            "sizeRead": obj.get("sizeRead"),
            "sizeWritten": obj.get("sizeWritten"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "vCore": obj.get("vCore")
        })
        return _obj



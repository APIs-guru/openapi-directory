# coding: utf-8

"""
    DataShareManagementClient

    Creates a Microsoft.DataShare management client.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProviderShareSubscriptionProperties(BaseModel):
    """
    Provider share subscription properties
    """ # noqa: E501
    consumer_email: Optional[StrictStr] = Field(default=None, description="Email of the consumer who created the share subscription", alias="consumerEmail")
    consumer_name: Optional[StrictStr] = Field(default=None, description="Name of the consumer who created the share subscription", alias="consumerName")
    consumer_tenant_name: Optional[StrictStr] = Field(default=None, description="Tenant name of the consumer who created the share subscription", alias="consumerTenantName")
    created_at: Optional[datetime] = Field(default=None, description="created at", alias="createdAt")
    provider_email: Optional[StrictStr] = Field(default=None, description="Email of the provider who created the share", alias="providerEmail")
    provider_name: Optional[StrictStr] = Field(default=None, description="Name of the provider who created the share", alias="providerName")
    share_subscription_object_id: Optional[StrictStr] = Field(default=None, description="share Subscription Object Id", alias="shareSubscriptionObjectId")
    share_subscription_status: Optional[StrictStr] = Field(default=None, description="Gets the status of share subscription", alias="shareSubscriptionStatus")
    shared_at: Optional[datetime] = Field(default=None, description="Shared at", alias="sharedAt")
    __properties: ClassVar[List[str]] = ["consumerEmail", "consumerName", "consumerTenantName", "createdAt", "providerEmail", "providerName", "shareSubscriptionObjectId", "shareSubscriptionStatus", "sharedAt"]

    @field_validator('share_subscription_status')
    def share_subscription_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Revoked', 'SourceDeleted', 'Revoking']):
            raise ValueError("must be one of enum values ('Active', 'Revoked', 'SourceDeleted', 'Revoking')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProviderShareSubscriptionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "consumer_email",
            "consumer_name",
            "consumer_tenant_name",
            "created_at",
            "provider_email",
            "provider_name",
            "share_subscription_object_id",
            "share_subscription_status",
            "shared_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProviderShareSubscriptionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerEmail": obj.get("consumerEmail"),
            "consumerName": obj.get("consumerName"),
            "consumerTenantName": obj.get("consumerTenantName"),
            "createdAt": obj.get("createdAt"),
            "providerEmail": obj.get("providerEmail"),
            "providerName": obj.get("providerName"),
            "shareSubscriptionObjectId": obj.get("shareSubscriptionObjectId"),
            "shareSubscriptionStatus": obj.get("shareSubscriptionStatus"),
            "sharedAt": obj.get("sharedAt")
        })
        return _obj



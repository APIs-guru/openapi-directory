# coding: utf-8

"""
    DataShareManagementClient

    Creates a Microsoft.DataShare management client.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.consumer_source_data_set_list import ConsumerSourceDataSetList
from openapi_client.models.operation_response import OperationResponse
from openapi_client.models.share_subscription import ShareSubscription
from openapi_client.models.share_subscription_list import ShareSubscriptionList
from openapi_client.models.share_subscription_synchronization import ShareSubscriptionSynchronization
from openapi_client.models.share_subscription_synchronization_list import ShareSubscriptionSynchronizationList
from openapi_client.models.source_share_synchronization_setting_list import SourceShareSynchronizationSettingList
from openapi_client.models.synchronization_details_list import SynchronizationDetailsList
from openapi_client.models.synchronize import Synchronize

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ShareSubscriptionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def consumer_source_data_sets_list_by_share_subscription(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConsumerSourceDataSetList:
        """Get source dataSets of a shareSubscription.

        Get source dataSets of a shareSubscription

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._consumer_source_data_sets_list_by_share_subscription_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConsumerSourceDataSetList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def consumer_source_data_sets_list_by_share_subscription_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConsumerSourceDataSetList]:
        """Get source dataSets of a shareSubscription.

        Get source dataSets of a shareSubscription

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._consumer_source_data_sets_list_by_share_subscription_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConsumerSourceDataSetList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def consumer_source_data_sets_list_by_share_subscription_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get source dataSets of a shareSubscription.

        Get source dataSets of a shareSubscription

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._consumer_source_data_sets_list_by_share_subscription_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConsumerSourceDataSetList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _consumer_source_data_sets_list_by_share_subscription_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        skip_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if skip_token is not None:
            
            _query_params.append(('$skipToken', skip_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/ConsumerSourceDataSets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_cancel_synchronization(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription_synchronization: Annotated[ShareSubscriptionSynchronization, Field(description="Share Subscription Synchronization payload.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShareSubscriptionSynchronization:
        """Request cancellation of a data share snapshot

        Request to cancel a synchronization.

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription_synchronization: Share Subscription Synchronization payload. (required)
        :type share_subscription_synchronization: ShareSubscriptionSynchronization
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_cancel_synchronization_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription_synchronization=share_subscription_synchronization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronization",
            '202': "ShareSubscriptionSynchronization",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_cancel_synchronization_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription_synchronization: Annotated[ShareSubscriptionSynchronization, Field(description="Share Subscription Synchronization payload.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShareSubscriptionSynchronization]:
        """Request cancellation of a data share snapshot

        Request to cancel a synchronization.

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription_synchronization: Share Subscription Synchronization payload. (required)
        :type share_subscription_synchronization: ShareSubscriptionSynchronization
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_cancel_synchronization_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription_synchronization=share_subscription_synchronization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronization",
            '202': "ShareSubscriptionSynchronization",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_cancel_synchronization_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription_synchronization: Annotated[ShareSubscriptionSynchronization, Field(description="Share Subscription Synchronization payload.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Request cancellation of a data share snapshot

        Request to cancel a synchronization.

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription_synchronization: Share Subscription Synchronization payload. (required)
        :type share_subscription_synchronization: ShareSubscriptionSynchronization
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_cancel_synchronization_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription_synchronization=share_subscription_synchronization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronization",
            '202': "ShareSubscriptionSynchronization",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_cancel_synchronization_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        share_subscription_synchronization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if share_subscription_synchronization is not None:
            _body_params = share_subscription_synchronization


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/cancelSynchronization',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_create(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription: Annotated[ShareSubscription, Field(description="create parameters for shareSubscription")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShareSubscription:
        """Create shareSubscription in an account.

        Create a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription: create parameters for shareSubscription (required)
        :type share_subscription: ShareSubscription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_create_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription=share_subscription,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscription",
            '201': "ShareSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_create_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription: Annotated[ShareSubscription, Field(description="create parameters for shareSubscription")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShareSubscription]:
        """Create shareSubscription in an account.

        Create a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription: create parameters for shareSubscription (required)
        :type share_subscription: ShareSubscription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_create_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription=share_subscription,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscription",
            '201': "ShareSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_create_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription: Annotated[ShareSubscription, Field(description="create parameters for shareSubscription")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create shareSubscription in an account.

        Create a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription: create parameters for shareSubscription (required)
        :type share_subscription: ShareSubscription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_create_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription=share_subscription,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscription",
            '201': "ShareSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_create_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        share_subscription,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if share_subscription is not None:
            _body_params = share_subscription


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_delete(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OperationResponse:
        """Delete shareSubscription in an account.

        Delete a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationResponse",
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_delete_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OperationResponse]:
        """Delete shareSubscription in an account.

        Delete a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationResponse",
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_delete_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete shareSubscription in an account.

        Delete a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationResponse",
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_delete_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShareSubscription:
        """Get shareSubscription in an account.

        Get a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShareSubscription]:
        """Get shareSubscription in an account.

        Get a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get shareSubscription in an account.

        Get a shareSubscription in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_get_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_list_by_account(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation Token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShareSubscriptionList:
        """List of available share subscriptions under an account.

        List share subscriptions in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation Token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_by_account_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_list_by_account_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation Token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShareSubscriptionList]:
        """List of available share subscriptions under an account.

        List share subscriptions in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation Token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_by_account_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_list_by_account_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation Token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of available share subscriptions under an account.

        List share subscriptions in an account

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation Token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_by_account_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_list_by_account_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        skip_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if skip_token is not None:
            
            _query_params.append(('$skipToken', skip_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_list_source_share_synchronization_settings(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceShareSynchronizationSettingList:
        """Get source share synchronization settings for a shareSubscription.

        Get synchronization settings set on a share

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_source_share_synchronization_settings_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceShareSynchronizationSettingList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_list_source_share_synchronization_settings_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceShareSynchronizationSettingList]:
        """Get source share synchronization settings for a shareSubscription.

        Get synchronization settings set on a share

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_source_share_synchronization_settings_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceShareSynchronizationSettingList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_list_source_share_synchronization_settings_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the shareSubscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get source share synchronization settings for a shareSubscription.

        Get synchronization settings set on a share

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the shareSubscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_source_share_synchronization_settings_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceShareSynchronizationSettingList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_list_source_share_synchronization_settings_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        skip_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if skip_token is not None:
            
            _query_params.append(('$skipToken', skip_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSourceShareSynchronizationSettings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_list_synchronization_details(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the share subscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription_synchronization: Annotated[ShareSubscriptionSynchronization, Field(description="Share Subscription Synchronization payload.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SynchronizationDetailsList:
        """List data set level details for a share subscription synchronization

        List synchronization details

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the share subscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription_synchronization: Share Subscription Synchronization payload. (required)
        :type share_subscription_synchronization: ShareSubscriptionSynchronization
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_synchronization_details_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription_synchronization=share_subscription_synchronization,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SynchronizationDetailsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_list_synchronization_details_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the share subscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription_synchronization: Annotated[ShareSubscriptionSynchronization, Field(description="Share Subscription Synchronization payload.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SynchronizationDetailsList]:
        """List data set level details for a share subscription synchronization

        List synchronization details

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the share subscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription_synchronization: Share Subscription Synchronization payload. (required)
        :type share_subscription_synchronization: ShareSubscriptionSynchronization
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_synchronization_details_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription_synchronization=share_subscription_synchronization,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SynchronizationDetailsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_list_synchronization_details_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the share subscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        share_subscription_synchronization: Annotated[ShareSubscriptionSynchronization, Field(description="Share Subscription Synchronization payload.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List data set level details for a share subscription synchronization

        List synchronization details

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the share subscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param share_subscription_synchronization: Share Subscription Synchronization payload. (required)
        :type share_subscription_synchronization: ShareSubscriptionSynchronization
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_synchronization_details_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            share_subscription_synchronization=share_subscription_synchronization,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SynchronizationDetailsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_list_synchronization_details_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        share_subscription_synchronization,
        skip_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if skip_token is not None:
            
            _query_params.append(('$skipToken', skip_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if share_subscription_synchronization is not None:
            _body_params = share_subscription_synchronization


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizationDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_list_synchronizations(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the share subscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShareSubscriptionSynchronizationList:
        """List Synchronizations in a share subscription.

        List synchronizations of a share subscription

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the share subscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_synchronizations_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronizationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_list_synchronizations_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the share subscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShareSubscriptionSynchronizationList]:
        """List Synchronizations in a share subscription.

        List synchronizations of a share subscription

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the share subscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_synchronizations_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronizationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_list_synchronizations_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of the share subscription.")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Synchronizations in a share subscription.

        List synchronizations of a share subscription

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of the share subscription. (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param skip_token: Continuation token
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_list_synchronizations_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronizationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_list_synchronizations_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        skip_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if skip_token is not None:
            
            _query_params.append(('$skipToken', skip_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def share_subscriptions_synchronize(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of share subscription")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        synchronize: Annotated[Synchronize, Field(description="Synchronize payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShareSubscriptionSynchronization:
        """Initiate an asynchronous data share job

        Initiate a copy

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of share subscription (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param synchronize: Synchronize payload (required)
        :type synchronize: Synchronize
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_synchronize_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            synchronize=synchronize,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronization",
            '202': "ShareSubscriptionSynchronization",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def share_subscriptions_synchronize_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of share subscription")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        synchronize: Annotated[Synchronize, Field(description="Synchronize payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShareSubscriptionSynchronization]:
        """Initiate an asynchronous data share job

        Initiate a copy

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of share subscription (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param synchronize: Synchronize payload (required)
        :type synchronize: Synchronize
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_synchronize_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            synchronize=synchronize,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronization",
            '202': "ShareSubscriptionSynchronization",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def share_subscriptions_synchronize_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        account_name: Annotated[StrictStr, Field(description="The name of the share account.")],
        share_subscription_name: Annotated[StrictStr, Field(description="The name of share subscription")],
        api_version: Annotated[StrictStr, Field(description="The api version to use.")],
        synchronize: Annotated[Synchronize, Field(description="Synchronize payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiate an asynchronous data share job

        Initiate a copy

        :param subscription_id: The subscription identifier (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param account_name: The name of the share account. (required)
        :type account_name: str
        :param share_subscription_name: The name of share subscription (required)
        :type share_subscription_name: str
        :param api_version: The api version to use. (required)
        :type api_version: str
        :param synchronize: Synchronize payload (required)
        :type synchronize: Synchronize
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._share_subscriptions_synchronize_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            share_subscription_name=share_subscription_name,
            api_version=api_version,
            synchronize=synchronize,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShareSubscriptionSynchronization",
            '202': "ShareSubscriptionSynchronization",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _share_subscriptions_synchronize_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        share_subscription_name,
        api_version,
        synchronize,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if share_subscription_name is not None:
            _path_params['shareSubscriptionName'] = share_subscription_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if synchronize is not None:
            _body_params = synchronize


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/Synchronize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



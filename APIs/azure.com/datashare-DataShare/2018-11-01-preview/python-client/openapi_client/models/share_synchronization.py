# coding: utf-8

"""
    DataShareManagementClient

    Creates a Microsoft.DataShare management client.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShareSynchronization(BaseModel):
    """
    A ShareSynchronization data transfer object.
    """ # noqa: E501
    consumer_email: Optional[StrictStr] = Field(default=None, description="Email of the user who created the synchronization", alias="consumerEmail")
    consumer_name: Optional[StrictStr] = Field(default=None, description="Name of the user who created the synchronization", alias="consumerName")
    consumer_tenant_name: Optional[StrictStr] = Field(default=None, description="Tenant name of the consumer who created the synchronization", alias="consumerTenantName")
    duration_ms: Optional[StrictInt] = Field(default=None, description="synchronization duration", alias="durationMs")
    end_time: Optional[datetime] = Field(default=None, description="End time of synchronization", alias="endTime")
    message: Optional[StrictStr] = Field(default=None, description="message of synchronization")
    start_time: Optional[datetime] = Field(default=None, description="start time of synchronization", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Raw Status")
    synchronization_id: Optional[StrictStr] = Field(default=None, description="Synchronization id", alias="synchronizationId")
    synchronization_mode: Optional[StrictStr] = Field(default=None, description="Synchronization mode", alias="synchronizationMode")
    __properties: ClassVar[List[str]] = ["consumerEmail", "consumerName", "consumerTenantName", "durationMs", "endTime", "message", "startTime", "status", "synchronizationId", "synchronizationMode"]

    @field_validator('synchronization_mode')
    def synchronization_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Incremental', 'FullSync']):
            raise ValueError("must be one of enum values ('Incremental', 'FullSync')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShareSynchronization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "synchronization_mode",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShareSynchronization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerEmail": obj.get("consumerEmail"),
            "consumerName": obj.get("consumerName"),
            "consumerTenantName": obj.get("consumerTenantName"),
            "durationMs": obj.get("durationMs"),
            "endTime": obj.get("endTime"),
            "message": obj.get("message"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "synchronizationId": obj.get("synchronizationId"),
            "synchronizationMode": obj.get("synchronizationMode")
        })
        return _obj



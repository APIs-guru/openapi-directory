# coding: utf-8

"""
    DataShareManagementClient

    Creates a Microsoft.DataShare management client.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConsumerInvitationProperties(BaseModel):
    """
    Properties of consumer invitation
    """ # noqa: E501
    data_set_count: Optional[StrictInt] = Field(default=None, description="Number of data sets in a share", alias="dataSetCount")
    description: Optional[StrictStr] = Field(default=None, description="Description shared when the invitation was created")
    invitation_id: StrictStr = Field(description="Unique id of the invitation.", alias="invitationId")
    invitation_status: Optional[StrictStr] = Field(default=None, description="The status of the invitation.", alias="invitationStatus")
    location: Optional[StrictStr] = Field(default=None, description="invitation location")
    provider_email: Optional[StrictStr] = Field(default=None, description="Email of the provider who created the resource", alias="providerEmail")
    provider_name: Optional[StrictStr] = Field(default=None, description="Name of the provider who created the resource", alias="providerName")
    provider_tenant_name: Optional[StrictStr] = Field(default=None, description="Tenant name of the provider who created the resource", alias="providerTenantName")
    responded_at: Optional[datetime] = Field(default=None, description="The time the recipient responded to the invitation.", alias="respondedAt")
    sent_at: Optional[datetime] = Field(default=None, description="Gets the time at which the invitation was sent.", alias="sentAt")
    share_name: Optional[StrictStr] = Field(default=None, description="Gets the source share Name.", alias="shareName")
    terms_of_use: Optional[StrictStr] = Field(default=None, description="Terms of use shared when the invitation was created", alias="termsOfUse")
    user_email: Optional[StrictStr] = Field(default=None, description="Email of the user who created the resource", alias="userEmail")
    user_name: Optional[StrictStr] = Field(default=None, description="Name of the user who created the resource", alias="userName")
    __properties: ClassVar[List[str]] = ["dataSetCount", "description", "invitationId", "invitationStatus", "location", "providerEmail", "providerName", "providerTenantName", "respondedAt", "sentAt", "shareName", "termsOfUse", "userEmail", "userName"]

    @field_validator('invitation_status')
    def invitation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Pending', 'Accepted', 'Rejected', 'Withdrawn']):
            raise ValueError("must be one of enum values ('Pending', 'Accepted', 'Rejected', 'Withdrawn')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerInvitationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_set_count",
            "description",
            "invitation_status",
            "location",
            "provider_email",
            "provider_name",
            "provider_tenant_name",
            "responded_at",
            "sent_at",
            "share_name",
            "terms_of_use",
            "user_email",
            "user_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerInvitationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSetCount": obj.get("dataSetCount"),
            "description": obj.get("description"),
            "invitationId": obj.get("invitationId"),
            "invitationStatus": obj.get("invitationStatus"),
            "location": obj.get("location"),
            "providerEmail": obj.get("providerEmail"),
            "providerName": obj.get("providerName"),
            "providerTenantName": obj.get("providerTenantName"),
            "respondedAt": obj.get("respondedAt"),
            "sentAt": obj.get("sentAt"),
            "shareName": obj.get("shareName"),
            "termsOfUse": obj.get("termsOfUse"),
            "userEmail": obj.get("userEmail"),
            "userName": obj.get("userName")
        })
        return _obj



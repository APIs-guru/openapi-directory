# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2015-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StorageAccount(BaseModel):
    """
    The storage Account.
    """ # noqa: E501
    container: Optional[StrictStr] = Field(default=None, description="The container in the storage account, only to be specified for WASB storage accounts.")
    file_system: Optional[StrictStr] = Field(default=None, description="The filesystem, only to be specified for Azure Data Lake Storage Gen 2.", alias="fileSystem")
    is_default: Optional[StrictBool] = Field(default=None, description="Whether or not the storage account is the default storage account.", alias="isDefault")
    key: Optional[StrictStr] = Field(default=None, description="The storage account access key.")
    msi_resource_id: Optional[StrictStr] = Field(default=None, description="The managed identity (MSI) that is allowed to access the storage account, only to be specified for Azure Data Lake Storage Gen 2.", alias="msiResourceId")
    name: Optional[StrictStr] = Field(default=None, description="The name of the storage account.")
    resource_id: Optional[StrictStr] = Field(default=None, description="The resource ID of storage account, only to be specified for Azure Data Lake Storage Gen 2.", alias="resourceId")
    __properties: ClassVar[List[str]] = ["container", "fileSystem", "isDefault", "key", "msiResourceId", "name", "resourceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "container": obj.get("container"),
            "fileSystem": obj.get("fileSystem"),
            "isDefault": obj.get("isDefault"),
            "key": obj.get("key"),
            "msiResourceId": obj.get("msiResourceId"),
            "name": obj.get("name"),
            "resourceId": obj.get("resourceId")
        })
        return _obj



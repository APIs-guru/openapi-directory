# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2015-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_definition import ClusterDefinition
from openapi_client.models.compute_profile import ComputeProfile
from openapi_client.models.connectivity_endpoint import ConnectivityEndpoint
from openapi_client.models.disk_encryption_properties import DiskEncryptionProperties
from openapi_client.models.errors import Errors
from openapi_client.models.kafka_rest_properties import KafkaRestProperties
from openapi_client.models.quota_info import QuotaInfo
from openapi_client.models.security_profile import SecurityProfile
from typing import Optional, Set
from typing_extensions import Self

class ClusterGetProperties(BaseModel):
    """
    The properties of cluster.
    """ # noqa: E501
    cluster_definition: ClusterDefinition = Field(alias="clusterDefinition")
    cluster_state: Optional[StrictStr] = Field(default=None, description="The state of the cluster.", alias="clusterState")
    cluster_version: Optional[StrictStr] = Field(default=None, description="The version of the cluster.", alias="clusterVersion")
    compute_profile: Optional[ComputeProfile] = Field(default=None, alias="computeProfile")
    connectivity_endpoints: Optional[List[ConnectivityEndpoint]] = Field(default=None, description="The list of connectivity endpoints.", alias="connectivityEndpoints")
    created_date: Optional[StrictStr] = Field(default=None, description="The date on which the cluster was created.", alias="createdDate")
    disk_encryption_properties: Optional[DiskEncryptionProperties] = Field(default=None, alias="diskEncryptionProperties")
    errors: Optional[List[Errors]] = Field(default=None, description="The list of errors.")
    kafka_rest_properties: Optional[KafkaRestProperties] = Field(default=None, alias="kafkaRestProperties")
    os_type: Optional[StrictStr] = Field(default=None, description="The type of operating system.", alias="osType")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    quota_info: Optional[QuotaInfo] = Field(default=None, alias="quotaInfo")
    security_profile: Optional[SecurityProfile] = Field(default=None, alias="securityProfile")
    tier: Optional[StrictStr] = Field(default=None, description="The cluster tier.")
    __properties: ClassVar[List[str]] = ["clusterDefinition", "clusterState", "clusterVersion", "computeProfile", "connectivityEndpoints", "createdDate", "diskEncryptionProperties", "errors", "kafkaRestProperties", "osType", "provisioningState", "quotaInfo", "securityProfile", "tier"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['InProgress', 'Failed', 'Succeeded', 'Canceled', 'Deleting']):
            raise ValueError("must be one of enum values ('InProgress', 'Failed', 'Succeeded', 'Canceled', 'Deleting')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard', 'Premium']):
            raise ValueError("must be one of enum values ('Standard', 'Premium')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterGetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster_definition
        if self.cluster_definition:
            _dict['clusterDefinition'] = self.cluster_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_profile
        if self.compute_profile:
            _dict['computeProfile'] = self.compute_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in connectivity_endpoints (list)
        _items = []
        if self.connectivity_endpoints:
            for _item_connectivity_endpoints in self.connectivity_endpoints:
                if _item_connectivity_endpoints:
                    _items.append(_item_connectivity_endpoints.to_dict())
            _dict['connectivityEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of disk_encryption_properties
        if self.disk_encryption_properties:
            _dict['diskEncryptionProperties'] = self.disk_encryption_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of kafka_rest_properties
        if self.kafka_rest_properties:
            _dict['kafkaRestProperties'] = self.kafka_rest_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quota_info
        if self.quota_info:
            _dict['quotaInfo'] = self.quota_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_profile
        if self.security_profile:
            _dict['securityProfile'] = self.security_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterGetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterDefinition": ClusterDefinition.from_dict(obj["clusterDefinition"]) if obj.get("clusterDefinition") is not None else None,
            "clusterState": obj.get("clusterState"),
            "clusterVersion": obj.get("clusterVersion"),
            "computeProfile": ComputeProfile.from_dict(obj["computeProfile"]) if obj.get("computeProfile") is not None else None,
            "connectivityEndpoints": [ConnectivityEndpoint.from_dict(_item) for _item in obj["connectivityEndpoints"]] if obj.get("connectivityEndpoints") is not None else None,
            "createdDate": obj.get("createdDate"),
            "diskEncryptionProperties": DiskEncryptionProperties.from_dict(obj["diskEncryptionProperties"]) if obj.get("diskEncryptionProperties") is not None else None,
            "errors": [Errors.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "kafkaRestProperties": KafkaRestProperties.from_dict(obj["kafkaRestProperties"]) if obj.get("kafkaRestProperties") is not None else None,
            "osType": obj.get("osType"),
            "provisioningState": obj.get("provisioningState"),
            "quotaInfo": QuotaInfo.from_dict(obj["quotaInfo"]) if obj.get("quotaInfo") is not None else None,
            "securityProfile": SecurityProfile.from_dict(obj["securityProfile"]) if obj.get("securityProfile") is not None else None,
            "tier": obj.get("tier")
        })
        return _obj



# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2015-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.compute_profile import ComputeProfile

class TestComputeProfile(unittest.TestCase):
    """ComputeProfile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ComputeProfile:
        """Test ComputeProfile
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ComputeProfile`
        """
        model = ComputeProfile()
        if include_optional:
            return ComputeProfile(
                roles = [
                    openapi_client.models.role.Role(
                        autoscale = openapi_client.models.autoscale.Autoscale(
                            capacity = openapi_client.models.autoscale_capacity.AutoscaleCapacity(
                                max_instance_count = 56, 
                                min_instance_count = 56, ), 
                            recurrence = openapi_client.models.autoscale_recurrence.AutoscaleRecurrence(
                                schedule = [
                                    openapi_client.models.autoscale_schedule.AutoscaleSchedule(
                                        days = [
                                            'Monday'
                                            ], 
                                        time_and_capacity = openapi_client.models.autoscale_time_and_capacity.AutoscaleTimeAndCapacity(
                                            max_instance_count = 56, 
                                            min_instance_count = 56, 
                                            time = '', ), )
                                    ], 
                                time_zone = '', ), ), 
                        data_disks_groups = [
                            openapi_client.models.data_disks_groups.DataDisksGroups(
                                disk_size_gb = 56, 
                                disks_per_node = 56, 
                                storage_account_type = '', )
                            ], 
                        hardware_profile = openapi_client.models.hardware_profile.HardwareProfile(
                            vm_size = '', ), 
                        min_instance_count = 56, 
                        name = '', 
                        os_profile = openapi_client.models.os_profile.OsProfile(
                            linux_operating_system_profile = openapi_client.models.linux_operating_system_profile.LinuxOperatingSystemProfile(
                                password = '', 
                                ssh_profile = openapi_client.models.ssh_profile.SshProfile(
                                    public_keys = [
                                        openapi_client.models.ssh_public_key.SshPublicKey(
                                            certificate_data = '', )
                                        ], ), 
                                username = '', ), ), 
                        script_actions = [
                            openapi_client.models.role_script_actions_inner.Role_scriptActions_inner(
                                name = '', 
                                parameters = '', 
                                uri = '', )
                            ], 
                        target_instance_count = 56, 
                        virtual_network_profile = openapi_client.models.virtual_network_profile.VirtualNetworkProfile(
                            id = '', 
                            subnet = '', ), )
                    ]
            )
        else:
            return ComputeProfile(
        )
        """

    def testComputeProfile(self):
        """Test ComputeProfile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

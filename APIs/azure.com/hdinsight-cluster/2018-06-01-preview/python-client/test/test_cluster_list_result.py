# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cluster_list_result import ClusterListResult

class TestClusterListResult(unittest.TestCase):
    """ClusterListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClusterListResult:
        """Test ClusterListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClusterListResult`
        """
        model = ClusterListResult()
        if include_optional:
            return ClusterListResult(
                next_link = '',
                value = [
                    openapi_client.models.cluster.Cluster(
                        etag = '', 
                        identity = openapi_client.models.cluster_identity.ClusterIdentity(
                            principal_id = '', 
                            tenant_id = '', 
                            type = 'SystemAssigned', 
                            user_assigned_identities = {
                                'key' : openapi_client.models.cluster_identity_user_assigned_identities_value.ClusterIdentity_userAssignedIdentities_value(
                                    client_id = '', 
                                    principal_id = '', )
                                }, ), 
                        properties = openapi_client.models.cluster_get_properties.ClusterGetProperties(
                            cluster_definition = openapi_client.models.cluster_definition.ClusterDefinition(
                                blueprint = '', 
                                component_version = {
                                    'key' : ''
                                    }, 
                                configurations = openapi_client.models.configurations.configurations(), 
                                kind = '', ), 
                            cluster_state = '', 
                            cluster_version = '', 
                            compute_profile = openapi_client.models.compute_profile.ComputeProfile(
                                roles = [
                                    openapi_client.models.role.Role(
                                        autoscale = openapi_client.models.autoscale.Autoscale(
                                            capacity = openapi_client.models.autoscale_capacity.AutoscaleCapacity(
                                                max_instance_count = 56, 
                                                min_instance_count = 56, ), 
                                            recurrence = openapi_client.models.autoscale_recurrence.AutoscaleRecurrence(
                                                schedule = [
                                                    openapi_client.models.autoscale_schedule.AutoscaleSchedule(
                                                        days = [
                                                            'Monday'
                                                            ], 
                                                        time_and_capacity = openapi_client.models.autoscale_time_and_capacity.AutoscaleTimeAndCapacity(
                                                            max_instance_count = 56, 
                                                            min_instance_count = 56, 
                                                            time = '', ), )
                                                    ], 
                                                time_zone = '', ), ), 
                                        data_disks_groups = [
                                            openapi_client.models.data_disks_groups.DataDisksGroups(
                                                disk_size_gb = 56, 
                                                disks_per_node = 56, 
                                                storage_account_type = '', )
                                            ], 
                                        hardware_profile = openapi_client.models.hardware_profile.HardwareProfile(
                                            vm_size = '', ), 
                                        min_instance_count = 56, 
                                        name = '', 
                                        os_profile = openapi_client.models.os_profile.OsProfile(
                                            linux_operating_system_profile = openapi_client.models.linux_operating_system_profile.LinuxOperatingSystemProfile(
                                                password = '', 
                                                ssh_profile = openapi_client.models.ssh_profile.SshProfile(
                                                    public_keys = [
                                                        openapi_client.models.ssh_public_key.SshPublicKey(
                                                            certificate_data = '', )
                                                        ], ), 
                                                username = '', ), ), 
                                        script_actions = [
                                            openapi_client.models.role_script_actions_inner.Role_scriptActions_inner(
                                                name = '', 
                                                parameters = '', 
                                                uri = '', )
                                            ], 
                                        target_instance_count = 56, 
                                        virtual_network_profile = openapi_client.models.virtual_network_profile.VirtualNetworkProfile(
                                            id = '', 
                                            subnet = '', ), )
                                    ], ), 
                            connectivity_endpoints = [
                                openapi_client.models.connectivity_endpoint.ConnectivityEndpoint(
                                    location = '', 
                                    name = '', 
                                    port = 56, 
                                    protocol = '', )
                                ], 
                            created_date = '', 
                            disk_encryption_properties = openapi_client.models.disk_encryption_properties.DiskEncryptionProperties(
                                encryption_algorithm = 'RSA-OAEP', 
                                key_name = '', 
                                key_version = '', 
                                msi_resource_id = '', 
                                vault_uri = '', ), 
                            errors = [
                                openapi_client.models.errors.Errors(
                                    code = '', 
                                    message = '', )
                                ], 
                            kafka_rest_properties = openapi_client.models.kafka_rest_properties.KafkaRestProperties(
                                client_group_info = openapi_client.models.client_group_info.ClientGroupInfo(
                                    group_id = '', 
                                    group_name = '', ), ), 
                            os_type = 'Windows', 
                            provisioning_state = 'InProgress', 
                            quota_info = openapi_client.models.quota_info.QuotaInfo(
                                cores_used = 56, ), 
                            security_profile = openapi_client.models.security_profile.SecurityProfile(
                                aadds_resource_id = '', 
                                cluster_users_group_dns = [
                                    ''
                                    ], 
                                directory_type = 'ActiveDirectory', 
                                domain = '', 
                                domain_user_password = '', 
                                domain_username = '', 
                                ldaps_urls = [
                                    ''
                                    ], 
                                msi_resource_id = '', 
                                organizational_unit_dn = '', ), 
                            tier = 'Standard', ), )
                    ]
            )
        else:
            return ClusterListResult(
        )
        """

    def testClusterListResult(self):
        """Test ClusterListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

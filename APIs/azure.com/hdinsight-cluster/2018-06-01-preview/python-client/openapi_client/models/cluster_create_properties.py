# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_definition import ClusterDefinition
from openapi_client.models.compute_profile import ComputeProfile
from openapi_client.models.disk_encryption_properties import DiskEncryptionProperties
from openapi_client.models.kafka_rest_properties import KafkaRestProperties
from openapi_client.models.security_profile import SecurityProfile
from openapi_client.models.storage_profile import StorageProfile
from typing import Optional, Set
from typing_extensions import Self

class ClusterCreateProperties(BaseModel):
    """
    The cluster create parameters.
    """ # noqa: E501
    cluster_definition: Optional[ClusterDefinition] = Field(default=None, alias="clusterDefinition")
    cluster_version: Optional[StrictStr] = Field(default=None, description="The version of the cluster.", alias="clusterVersion")
    compute_profile: Optional[ComputeProfile] = Field(default=None, alias="computeProfile")
    disk_encryption_properties: Optional[DiskEncryptionProperties] = Field(default=None, alias="diskEncryptionProperties")
    kafka_rest_properties: Optional[KafkaRestProperties] = Field(default=None, alias="kafkaRestProperties")
    os_type: Optional[StrictStr] = Field(default=None, description="The type of operating system.", alias="osType")
    security_profile: Optional[SecurityProfile] = Field(default=None, alias="securityProfile")
    storage_profile: Optional[StorageProfile] = Field(default=None, alias="storageProfile")
    tier: Optional[StrictStr] = Field(default=None, description="The cluster tier.")
    __properties: ClassVar[List[str]] = ["clusterDefinition", "clusterVersion", "computeProfile", "diskEncryptionProperties", "kafkaRestProperties", "osType", "securityProfile", "storageProfile", "tier"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard', 'Premium']):
            raise ValueError("must be one of enum values ('Standard', 'Premium')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterCreateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster_definition
        if self.cluster_definition:
            _dict['clusterDefinition'] = self.cluster_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_profile
        if self.compute_profile:
            _dict['computeProfile'] = self.compute_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disk_encryption_properties
        if self.disk_encryption_properties:
            _dict['diskEncryptionProperties'] = self.disk_encryption_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kafka_rest_properties
        if self.kafka_rest_properties:
            _dict['kafkaRestProperties'] = self.kafka_rest_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_profile
        if self.security_profile:
            _dict['securityProfile'] = self.security_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_profile
        if self.storage_profile:
            _dict['storageProfile'] = self.storage_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterCreateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterDefinition": ClusterDefinition.from_dict(obj["clusterDefinition"]) if obj.get("clusterDefinition") is not None else None,
            "clusterVersion": obj.get("clusterVersion"),
            "computeProfile": ComputeProfile.from_dict(obj["computeProfile"]) if obj.get("computeProfile") is not None else None,
            "diskEncryptionProperties": DiskEncryptionProperties.from_dict(obj["diskEncryptionProperties"]) if obj.get("diskEncryptionProperties") is not None else None,
            "kafkaRestProperties": KafkaRestProperties.from_dict(obj["kafkaRestProperties"]) if obj.get("kafkaRestProperties") is not None else None,
            "osType": obj.get("osType"),
            "securityProfile": SecurityProfile.from_dict(obj["securityProfile"]) if obj.get("securityProfile") is not None else None,
            "storageProfile": StorageProfile.from_dict(obj["storageProfile"]) if obj.get("storageProfile") is not None else None,
            "tier": obj.get("tier")
        })
        return _obj



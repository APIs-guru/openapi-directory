# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, SecretStr, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SecurityProfile(BaseModel):
    """
    The security profile which contains Ssh public key for the HDInsight cluster.
    """ # noqa: E501
    aadds_resource_id: Optional[StrictStr] = Field(default=None, description="The resource ID of the user's Azure Active Directory Domain Service.", alias="aaddsResourceId")
    cluster_users_group_dns: Optional[List[StrictStr]] = Field(default=None, description="Optional. The Distinguished Names for cluster user groups", alias="clusterUsersGroupDNs")
    directory_type: Optional[StrictStr] = Field(default=None, description="The directory type.", alias="directoryType")
    domain: Optional[StrictStr] = Field(default=None, description="The organization's active directory domain.")
    domain_user_password: Optional[SecretStr] = Field(default=None, description="The domain admin password.", alias="domainUserPassword")
    domain_username: Optional[StrictStr] = Field(default=None, description="The domain user account that will have admin privileges on the cluster.", alias="domainUsername")
    ldaps_urls: Optional[List[StrictStr]] = Field(default=None, description="The LDAPS protocol URLs to communicate with the Active Directory.", alias="ldapsUrls")
    msi_resource_id: Optional[StrictStr] = Field(default=None, description="User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.", alias="msiResourceId")
    organizational_unit_dn: Optional[StrictStr] = Field(default=None, description="The organizational unit within the Active Directory to place the cluster and service accounts.", alias="organizationalUnitDN")
    __properties: ClassVar[List[str]] = ["aaddsResourceId", "clusterUsersGroupDNs", "directoryType", "domain", "domainUserPassword", "domainUsername", "ldapsUrls", "msiResourceId", "organizationalUnitDN"]

    @field_validator('directory_type')
    def directory_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ActiveDirectory']):
            raise ValueError("must be one of enum values ('ActiveDirectory')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aaddsResourceId": obj.get("aaddsResourceId"),
            "clusterUsersGroupDNs": obj.get("clusterUsersGroupDNs"),
            "directoryType": obj.get("directoryType"),
            "domain": obj.get("domain"),
            "domainUserPassword": obj.get("domainUserPassword"),
            "domainUsername": obj.get("domainUsername"),
            "ldapsUrls": obj.get("ldapsUrls"),
            "msiResourceId": obj.get("msiResourceId"),
            "organizationalUnitDN": obj.get("organizationalUnitDN")
        })
        return _obj



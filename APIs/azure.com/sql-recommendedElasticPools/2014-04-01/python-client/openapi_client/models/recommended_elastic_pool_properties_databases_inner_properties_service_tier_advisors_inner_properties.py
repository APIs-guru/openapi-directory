# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.recommended_elastic_pool_properties_databases_inner_properties_service_tier_advisors_inner_properties_service_level_objective_usage_metrics_inner import RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInnerPropertiesServiceLevelObjectiveUsageMetricsInner
from typing import Optional, Set
from typing_extensions import Self

class RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInnerProperties(BaseModel):
    """
    Represents the properties of a Service Tier Advisor.
    """ # noqa: E501
    active_time_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The activeTimeRatio for service tier advisor.", alias="activeTimeRatio")
    avg_dtu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets avgDtu for service tier advisor.", alias="avgDtu")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets confidence for service tier advisor.")
    current_service_level_objective: Optional[StrictStr] = Field(default=None, description="Gets or sets currentServiceLevelObjective for service tier advisor.", alias="currentServiceLevelObjective")
    current_service_level_objective_id: Optional[StrictStr] = Field(default=None, description="Gets or sets currentServiceLevelObjectiveId for service tier advisor.", alias="currentServiceLevelObjectiveId")
    database_size_based_recommendation_service_level_objective: Optional[StrictStr] = Field(default=None, description="Gets or sets databaseSizeBasedRecommendationServiceLevelObjective for service tier advisor.", alias="databaseSizeBasedRecommendationServiceLevelObjective")
    database_size_based_recommendation_service_level_objective_id: Optional[StrictStr] = Field(default=None, description="Gets or sets databaseSizeBasedRecommendationServiceLevelObjectiveId for service tier advisor.", alias="databaseSizeBasedRecommendationServiceLevelObjectiveId")
    disaster_plan_based_recommendation_service_level_objective: Optional[StrictStr] = Field(default=None, description="Gets or sets disasterPlanBasedRecommendationServiceLevelObjective for service tier advisor.", alias="disasterPlanBasedRecommendationServiceLevelObjective")
    disaster_plan_based_recommendation_service_level_objective_id: Optional[StrictStr] = Field(default=None, description="Gets or sets disasterPlanBasedRecommendationServiceLevelObjectiveId for service tier advisor.", alias="disasterPlanBasedRecommendationServiceLevelObjectiveId")
    max_dtu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets maxDtu for service tier advisor.", alias="maxDtu")
    max_size_in_gb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets maxSizeInGB for service tier advisor.", alias="maxSizeInGB")
    min_dtu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets minDtu for service tier advisor.", alias="minDtu")
    observation_period_end: Optional[datetime] = Field(default=None, description="The observation period start (ISO8601 format).", alias="observationPeriodEnd")
    observation_period_start: Optional[datetime] = Field(default=None, description="The observation period start (ISO8601 format).", alias="observationPeriodStart")
    overall_recommendation_service_level_objective: Optional[StrictStr] = Field(default=None, description="Gets or sets overallRecommendationServiceLevelObjective for service tier advisor.", alias="overallRecommendationServiceLevelObjective")
    overall_recommendation_service_level_objective_id: Optional[StrictStr] = Field(default=None, description="Gets or sets overallRecommendationServiceLevelObjectiveId for service tier advisor.", alias="overallRecommendationServiceLevelObjectiveId")
    service_level_objective_usage_metrics: Optional[List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInnerPropertiesServiceLevelObjectiveUsageMetricsInner]] = Field(default=None, description="Gets or sets serviceLevelObjectiveUsageMetrics for the service tier advisor.", alias="serviceLevelObjectiveUsageMetrics")
    usage_based_recommendation_service_level_objective: Optional[StrictStr] = Field(default=None, description="Gets or sets usageBasedRecommendationServiceLevelObjective for service tier advisor.", alias="usageBasedRecommendationServiceLevelObjective")
    usage_based_recommendation_service_level_objective_id: Optional[StrictStr] = Field(default=None, description="Gets or sets usageBasedRecommendationServiceLevelObjectiveId for service tier advisor.", alias="usageBasedRecommendationServiceLevelObjectiveId")
    __properties: ClassVar[List[str]] = ["activeTimeRatio", "avgDtu", "confidence", "currentServiceLevelObjective", "currentServiceLevelObjectiveId", "databaseSizeBasedRecommendationServiceLevelObjective", "databaseSizeBasedRecommendationServiceLevelObjectiveId", "disasterPlanBasedRecommendationServiceLevelObjective", "disasterPlanBasedRecommendationServiceLevelObjectiveId", "maxDtu", "maxSizeInGB", "minDtu", "observationPeriodEnd", "observationPeriodStart", "overallRecommendationServiceLevelObjective", "overallRecommendationServiceLevelObjectiveId", "serviceLevelObjectiveUsageMetrics", "usageBasedRecommendationServiceLevelObjective", "usageBasedRecommendationServiceLevelObjectiveId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active_time_ratio",
            "avg_dtu",
            "confidence",
            "current_service_level_objective",
            "current_service_level_objective_id",
            "database_size_based_recommendation_service_level_objective",
            "database_size_based_recommendation_service_level_objective_id",
            "disaster_plan_based_recommendation_service_level_objective",
            "disaster_plan_based_recommendation_service_level_objective_id",
            "max_dtu",
            "max_size_in_gb",
            "min_dtu",
            "observation_period_end",
            "observation_period_start",
            "overall_recommendation_service_level_objective",
            "overall_recommendation_service_level_objective_id",
            "service_level_objective_usage_metrics",
            "usage_based_recommendation_service_level_objective",
            "usage_based_recommendation_service_level_objective_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in service_level_objective_usage_metrics (list)
        _items = []
        if self.service_level_objective_usage_metrics:
            for _item_service_level_objective_usage_metrics in self.service_level_objective_usage_metrics:
                if _item_service_level_objective_usage_metrics:
                    _items.append(_item_service_level_objective_usage_metrics.to_dict())
            _dict['serviceLevelObjectiveUsageMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeTimeRatio": obj.get("activeTimeRatio"),
            "avgDtu": obj.get("avgDtu"),
            "confidence": obj.get("confidence"),
            "currentServiceLevelObjective": obj.get("currentServiceLevelObjective"),
            "currentServiceLevelObjectiveId": obj.get("currentServiceLevelObjectiveId"),
            "databaseSizeBasedRecommendationServiceLevelObjective": obj.get("databaseSizeBasedRecommendationServiceLevelObjective"),
            "databaseSizeBasedRecommendationServiceLevelObjectiveId": obj.get("databaseSizeBasedRecommendationServiceLevelObjectiveId"),
            "disasterPlanBasedRecommendationServiceLevelObjective": obj.get("disasterPlanBasedRecommendationServiceLevelObjective"),
            "disasterPlanBasedRecommendationServiceLevelObjectiveId": obj.get("disasterPlanBasedRecommendationServiceLevelObjectiveId"),
            "maxDtu": obj.get("maxDtu"),
            "maxSizeInGB": obj.get("maxSizeInGB"),
            "minDtu": obj.get("minDtu"),
            "observationPeriodEnd": obj.get("observationPeriodEnd"),
            "observationPeriodStart": obj.get("observationPeriodStart"),
            "overallRecommendationServiceLevelObjective": obj.get("overallRecommendationServiceLevelObjective"),
            "overallRecommendationServiceLevelObjectiveId": obj.get("overallRecommendationServiceLevelObjectiveId"),
            "serviceLevelObjectiveUsageMetrics": [RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInnerPropertiesServiceLevelObjectiveUsageMetricsInner.from_dict(_item) for _item in obj["serviceLevelObjectiveUsageMetrics"]] if obj.get("serviceLevelObjectiveUsageMetrics") is not None else None,
            "usageBasedRecommendationServiceLevelObjective": obj.get("usageBasedRecommendationServiceLevelObjective"),
            "usageBasedRecommendationServiceLevelObjectiveId": obj.get("usageBasedRecommendationServiceLevelObjectiveId")
        })
        return _obj



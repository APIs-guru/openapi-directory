# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.recommended_elastic_pool_metric import RecommendedElasticPoolMetric
from openapi_client.models.recommended_elastic_pool_properties_databases_inner import RecommendedElasticPoolPropertiesDatabasesInner
from typing import Optional, Set
from typing_extensions import Self

class RecommendedElasticPoolProperties(BaseModel):
    """
    Represents the properties of a recommended elastic pool.
    """ # noqa: E501
    database_dtu_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum DTU for the database.", alias="databaseDtuMax")
    database_dtu_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The minimum DTU for the database.", alias="databaseDtuMin")
    database_edition: Optional[StrictStr] = Field(default=None, description="The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all the valid editions.", alias="databaseEdition")
    databases: Optional[List[RecommendedElasticPoolPropertiesDatabasesInner]] = Field(default=None, description="The list of databases in this pool. Expanded property")
    dtu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The DTU for the recommended elastic pool.")
    max_observed_dtu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets maximum observed DTU.", alias="maxObservedDtu")
    max_observed_storage_mb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets maximum observed storage in megabytes.", alias="maxObservedStorageMB")
    metrics: Optional[List[RecommendedElasticPoolMetric]] = Field(default=None, description="The list of databases housed in the server. Expanded property")
    observation_period_end: Optional[datetime] = Field(default=None, description="The observation period start (ISO8601 format).", alias="observationPeriodEnd")
    observation_period_start: Optional[datetime] = Field(default=None, description="The observation period start (ISO8601 format).", alias="observationPeriodStart")
    storage_mb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets storage size in megabytes.", alias="storageMB")
    __properties: ClassVar[List[str]] = ["databaseDtuMax", "databaseDtuMin", "databaseEdition", "databases", "dtu", "maxObservedDtu", "maxObservedStorageMB", "metrics", "observationPeriodEnd", "observationPeriodStart", "storageMB"]

    @field_validator('database_edition')
    def database_edition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Basic', 'Standard', 'Premium', 'GeneralPurpose', 'BusinessCritical']):
            raise ValueError("must be one of enum values ('Basic', 'Standard', 'Premium', 'GeneralPurpose', 'BusinessCritical')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendedElasticPoolProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "database_edition",
            "databases",
            "max_observed_dtu",
            "max_observed_storage_mb",
            "metrics",
            "observation_period_end",
            "observation_period_start",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in databases (list)
        _items = []
        if self.databases:
            for _item_databases in self.databases:
                if _item_databases:
                    _items.append(_item_databases.to_dict())
            _dict['databases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendedElasticPoolProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "databaseDtuMax": obj.get("databaseDtuMax"),
            "databaseDtuMin": obj.get("databaseDtuMin"),
            "databaseEdition": obj.get("databaseEdition"),
            "databases": [RecommendedElasticPoolPropertiesDatabasesInner.from_dict(_item) for _item in obj["databases"]] if obj.get("databases") is not None else None,
            "dtu": obj.get("dtu"),
            "maxObservedDtu": obj.get("maxObservedDtu"),
            "maxObservedStorageMB": obj.get("maxObservedStorageMB"),
            "metrics": [RecommendedElasticPoolMetric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "observationPeriodEnd": obj.get("observationPeriodEnd"),
            "observationPeriodStart": obj.get("observationPeriodStart"),
            "storageMB": obj.get("storageMB")
        })
        return _obj



# coding: utf-8

"""
    AzureStack Azure Bridge Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compute_role import ComputeRole
from openapi_client.models.data_disk_image import DataDiskImage
from openapi_client.models.operating_system import OperatingSystem
from openapi_client.models.os_disk_image import OsDiskImage
from openapi_client.models.uri import Uri
from typing import Optional, Set
from typing_extensions import Self

class ExtendedProductProperties(BaseModel):
    """
    Product information.
    """ # noqa: E501
    compute_role: Optional[ComputeRole] = Field(default=None, alias="computeRole")
    is_system_extension: Optional[StrictBool] = Field(default=None, description="Specifies if product is a Virtual Machine Extension.", alias="isSystemExtension")
    source_blob: Optional[Uri] = Field(default=None, alias="sourceBlob")
    support_multiple_extensions: Optional[StrictBool] = Field(default=None, description="Indicates if specified product supports multiple extensions.", alias="supportMultipleExtensions")
    version: Optional[StrictStr] = Field(default=None, description="Specifies product version.")
    vm_os_type: Optional[OperatingSystem] = Field(default=None, alias="vmOsType")
    vm_scale_set_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if virtual machine Scale Set is enabled in the specified product.", alias="vmScaleSetEnabled")
    data_disk_images: Optional[List[DataDiskImage]] = Field(default=None, description="List of attached data disks.", alias="dataDiskImages")
    os_disk_image: Optional[OsDiskImage] = Field(default=None, alias="osDiskImage")
    __properties: ClassVar[List[str]] = ["computeRole", "isSystemExtension", "sourceBlob", "supportMultipleExtensions", "version", "vmOsType", "vmScaleSetEnabled", "dataDiskImages", "osDiskImage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedProductProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_system_extension",
            "support_multiple_extensions",
            "version",
            "vm_scale_set_enabled",
            "data_disk_images",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_blob
        if self.source_blob:
            _dict['sourceBlob'] = self.source_blob.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_disk_images (list)
        _items = []
        if self.data_disk_images:
            for _item_data_disk_images in self.data_disk_images:
                if _item_data_disk_images:
                    _items.append(_item_data_disk_images.to_dict())
            _dict['dataDiskImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of os_disk_image
        if self.os_disk_image:
            _dict['osDiskImage'] = self.os_disk_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedProductProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeRole": obj.get("computeRole"),
            "isSystemExtension": obj.get("isSystemExtension"),
            "sourceBlob": Uri.from_dict(obj["sourceBlob"]) if obj.get("sourceBlob") is not None else None,
            "supportMultipleExtensions": obj.get("supportMultipleExtensions"),
            "version": obj.get("version"),
            "vmOsType": obj.get("vmOsType"),
            "vmScaleSetEnabled": obj.get("vmScaleSetEnabled"),
            "dataDiskImages": [DataDiskImage.from_dict(_item) for _item in obj["dataDiskImages"]] if obj.get("dataDiskImages") is not None else None,
            "osDiskImage": OsDiskImage.from_dict(obj["osDiskImage"]) if obj.get("osDiskImage") is not None else None
        })
        return _obj



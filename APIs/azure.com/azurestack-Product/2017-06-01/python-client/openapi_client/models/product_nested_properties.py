# coding: utf-8

"""
    AzureStack Azure Bridge Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compatibility import Compatibility
from openapi_client.models.icon_uris import IconUris
from openapi_client.models.product_link import ProductLink
from openapi_client.models.product_properties import ProductProperties
from typing import Optional, Set
from typing_extensions import Self

class ProductNestedProperties(BaseModel):
    """
    Properties portion of the product resource.
    """ # noqa: E501
    billing_part_number: Optional[StrictStr] = Field(default=None, description="The part number used for billing purposes.", alias="billingPartNumber")
    compatibility: Optional[Compatibility] = None
    description: Optional[StrictStr] = Field(default=None, description="The description of the product.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the product.", alias="displayName")
    gallery_item_identity: Optional[StrictStr] = Field(default=None, description="The identifier of the gallery item corresponding to the product.", alias="galleryItemIdentity")
    icon_uris: Optional[IconUris] = Field(default=None, alias="iconUris")
    legal_terms: Optional[StrictStr] = Field(default=None, description="The legal terms.", alias="legalTerms")
    links: Optional[List[ProductLink]] = Field(default=None, description="Additional links available for this product.")
    offer: Optional[StrictStr] = Field(default=None, description="The offer representing the product.")
    offer_version: Optional[StrictStr] = Field(default=None, description="The version of the product offer.", alias="offerVersion")
    payload_length: Optional[StrictInt] = Field(default=None, description="The length of product content.", alias="payloadLength")
    privacy_policy: Optional[StrictStr] = Field(default=None, description="The privacy policy.", alias="privacyPolicy")
    product_kind: Optional[StrictStr] = Field(default=None, description="The kind of the product (virtualMachine or virtualMachineExtension)", alias="productKind")
    product_properties: Optional[ProductProperties] = Field(default=None, alias="productProperties")
    publisher_display_name: Optional[StrictStr] = Field(default=None, description="The user-friendly name of the product publisher.", alias="publisherDisplayName")
    publisher_identifier: Optional[StrictStr] = Field(default=None, description="Publisher identifier.", alias="publisherIdentifier")
    sku: Optional[StrictStr] = Field(default=None, description="The product SKU.")
    vm_extension_type: Optional[StrictStr] = Field(default=None, description="The type of the Virtual Machine Extension.", alias="vmExtensionType")
    __properties: ClassVar[List[str]] = ["billingPartNumber", "compatibility", "description", "displayName", "galleryItemIdentity", "iconUris", "legalTerms", "links", "offer", "offerVersion", "payloadLength", "privacyPolicy", "productKind", "productProperties", "publisherDisplayName", "publisherIdentifier", "sku", "vmExtensionType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductNestedProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compatibility
        if self.compatibility:
            _dict['compatibility'] = self.compatibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of icon_uris
        if self.icon_uris:
            _dict['iconUris'] = self.icon_uris.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of product_properties
        if self.product_properties:
            _dict['productProperties'] = self.product_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductNestedProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingPartNumber": obj.get("billingPartNumber"),
            "compatibility": Compatibility.from_dict(obj["compatibility"]) if obj.get("compatibility") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "galleryItemIdentity": obj.get("galleryItemIdentity"),
            "iconUris": IconUris.from_dict(obj["iconUris"]) if obj.get("iconUris") is not None else None,
            "legalTerms": obj.get("legalTerms"),
            "links": [ProductLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "offer": obj.get("offer"),
            "offerVersion": obj.get("offerVersion"),
            "payloadLength": obj.get("payloadLength"),
            "privacyPolicy": obj.get("privacyPolicy"),
            "productKind": obj.get("productKind"),
            "productProperties": ProductProperties.from_dict(obj["productProperties"]) if obj.get("productProperties") is not None else None,
            "publisherDisplayName": obj.get("publisherDisplayName"),
            "publisherIdentifier": obj.get("publisherIdentifier"),
            "sku": obj.get("sku"),
            "vmExtensionType": obj.get("vmExtensionType")
        })
        return _obj



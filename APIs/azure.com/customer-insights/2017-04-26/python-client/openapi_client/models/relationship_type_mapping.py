# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-04-26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from openapi_client.models.relationship_type_field_mapping import RelationshipTypeFieldMapping
from typing import Optional, Set
from typing_extensions import Self

class RelationshipTypeMapping(BaseModel):
    """
    Maps fields in Profile to their corresponding StrongIds in Related Profile.
    """ # noqa: E501
    field_mappings: List[RelationshipTypeFieldMapping] = Field(description="Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.", alias="fieldMappings")
    __properties: ClassVar[List[str]] = ["fieldMappings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RelationshipTypeMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in field_mappings (list)
        _items = []
        if self.field_mappings:
            for _item_field_mappings in self.field_mappings:
                if _item_field_mappings:
                    _items.append(_item_field_mappings.to_dict())
            _dict['fieldMappings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RelationshipTypeMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fieldMappings": [RelationshipTypeFieldMapping.from_dict(_item) for _item in obj["fieldMappings"]] if obj.get("fieldMappings") is not None else None
        })
        return _obj



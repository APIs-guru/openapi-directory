# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-04-26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_source_precedence import DataSourcePrecedence
from openapi_client.models.profile_enum_valid_values_format import ProfileEnumValidValuesFormat
from typing import Optional, Set
from typing_extensions import Self

class PropertyDefinition(BaseModel):
    """
    Property definition.
    """ # noqa: E501
    array_value_separator: Optional[StrictStr] = Field(default=None, description="Array value separator for properties with isArray set.", alias="arrayValueSeparator")
    data_source_precedence_rules: Optional[List[DataSourcePrecedence]] = Field(default=None, description="This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.", alias="dataSourcePrecedenceRules")
    enum_valid_values: Optional[List[ProfileEnumValidValuesFormat]] = Field(default=None, description="Describes valid values for an enum property.", alias="enumValidValues")
    field_name: StrictStr = Field(description="Name of the property.", alias="fieldName")
    field_type: StrictStr = Field(description="Type of the property.", alias="fieldType")
    is_array: Optional[StrictBool] = Field(default=None, description="Indicates if the property is actually an array of the fieldType above on the data api.", alias="isArray")
    is_available_in_graph: Optional[StrictBool] = Field(default=None, description="Whether property is available in graph or not.", alias="isAvailableInGraph")
    is_enum: Optional[StrictBool] = Field(default=None, description="Indicates if the property is an enum.", alias="isEnum")
    is_flag_enum: Optional[StrictBool] = Field(default=None, description="Indicates if the property is an flag enum.", alias="isFlagEnum")
    is_image: Optional[StrictBool] = Field(default=None, description="Whether the property is an Image.", alias="isImage")
    is_localized_string: Optional[StrictBool] = Field(default=None, description="Whether the property is a localized string.", alias="isLocalizedString")
    is_name: Optional[StrictBool] = Field(default=None, description="Whether the property is a name or a part of name.", alias="isName")
    is_required: Optional[StrictBool] = Field(default=None, description="Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.", alias="isRequired")
    max_length: Optional[StrictInt] = Field(default=None, description="Max length of string. Used only if type is string.", alias="maxLength")
    property_id: Optional[StrictStr] = Field(default=None, description="The ID associated with the property.", alias="propertyId")
    schema_item_prop_link: Optional[StrictStr] = Field(default=None, description="URL encoded schema.org item prop link for the property.", alias="schemaItemPropLink")
    __properties: ClassVar[List[str]] = ["arrayValueSeparator", "dataSourcePrecedenceRules", "enumValidValues", "fieldName", "fieldType", "isArray", "isAvailableInGraph", "isEnum", "isFlagEnum", "isImage", "isLocalizedString", "isName", "isRequired", "maxLength", "propertyId", "schemaItemPropLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertyDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_source_precedence_rules",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_source_precedence_rules (list)
        _items = []
        if self.data_source_precedence_rules:
            for _item_data_source_precedence_rules in self.data_source_precedence_rules:
                if _item_data_source_precedence_rules:
                    _items.append(_item_data_source_precedence_rules.to_dict())
            _dict['dataSourcePrecedenceRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in enum_valid_values (list)
        _items = []
        if self.enum_valid_values:
            for _item_enum_valid_values in self.enum_valid_values:
                if _item_enum_valid_values:
                    _items.append(_item_enum_valid_values.to_dict())
            _dict['enumValidValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertyDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayValueSeparator": obj.get("arrayValueSeparator"),
            "dataSourcePrecedenceRules": [DataSourcePrecedence.from_dict(_item) for _item in obj["dataSourcePrecedenceRules"]] if obj.get("dataSourcePrecedenceRules") is not None else None,
            "enumValidValues": [ProfileEnumValidValuesFormat.from_dict(_item) for _item in obj["enumValidValues"]] if obj.get("enumValidValues") is not None else None,
            "fieldName": obj.get("fieldName"),
            "fieldType": obj.get("fieldType"),
            "isArray": obj.get("isArray"),
            "isAvailableInGraph": obj.get("isAvailableInGraph"),
            "isEnum": obj.get("isEnum"),
            "isFlagEnum": obj.get("isFlagEnum"),
            "isImage": obj.get("isImage"),
            "isLocalizedString": obj.get("isLocalizedString"),
            "isName": obj.get("isName"),
            "isRequired": obj.get("isRequired"),
            "maxLength": obj.get("maxLength"),
            "propertyId": obj.get("propertyId"),
            "schemaItemPropLink": obj.get("schemaItemPropLink")
        })
        return _obj



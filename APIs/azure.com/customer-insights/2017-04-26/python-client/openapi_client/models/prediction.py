# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-04-26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.prediction_grades_inner import PredictionGradesInner
from openapi_client.models.prediction_mappings import PredictionMappings
from openapi_client.models.prediction_system_generated_entities import PredictionSystemGeneratedEntities
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class Prediction(BaseModel):
    """
    The prediction definition.
    """ # noqa: E501
    auto_analyze: StrictBool = Field(description="Whether do auto analyze.", alias="autoAnalyze")
    description: Optional[Dict[str, StrictStr]] = Field(default=None, description="Description of the prediction.")
    display_name: Optional[Dict[str, StrictStr]] = Field(default=None, description="Display name of the prediction.", alias="displayName")
    grades: Optional[List[PredictionGradesInner]] = Field(default=None, description="The prediction grades.")
    involved_interaction_types: Optional[List[StrictStr]] = Field(default=None, description="Interaction types involved in the prediction.", alias="involvedInteractionTypes")
    involved_kpi_types: Optional[List[StrictStr]] = Field(default=None, description="KPI types involved in the prediction.", alias="involvedKpiTypes")
    involved_relationships: Optional[List[StrictStr]] = Field(default=None, description="Relationships involved in the prediction.", alias="involvedRelationships")
    mappings: PredictionMappings
    negative_outcome_expression: StrictStr = Field(description="Negative outcome expression.", alias="negativeOutcomeExpression")
    positive_outcome_expression: StrictStr = Field(description="Positive outcome expression.", alias="positiveOutcomeExpression")
    prediction_name: Optional[StrictStr] = Field(default=None, description="Name of the prediction.", alias="predictionName")
    primary_profile_type: StrictStr = Field(description="Primary profile type.", alias="primaryProfileType")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    scope_expression: StrictStr = Field(description="Scope expression.", alias="scopeExpression")
    score_label: StrictStr = Field(description="Score label.", alias="scoreLabel")
    system_generated_entities: Optional[PredictionSystemGeneratedEntities] = Field(default=None, alias="systemGeneratedEntities")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The hub name.", alias="tenantId")
    __properties: ClassVar[List[str]] = ["autoAnalyze", "description", "displayName", "grades", "involvedInteractionTypes", "involvedKpiTypes", "involvedRelationships", "mappings", "negativeOutcomeExpression", "positiveOutcomeExpression", "predictionName", "primaryProfileType", "provisioningState", "scopeExpression", "scoreLabel", "systemGeneratedEntities", "tenantId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Prediction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grades (list)
        _items = []
        if self.grades:
            for _item_grades in self.grades:
                if _item_grades:
                    _items.append(_item_grades.to_dict())
            _dict['grades'] = _items
        # override the default output from pydantic by calling `to_dict()` of mappings
        if self.mappings:
            _dict['mappings'] = self.mappings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_generated_entities
        if self.system_generated_entities:
            _dict['systemGeneratedEntities'] = self.system_generated_entities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Prediction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoAnalyze": obj.get("autoAnalyze"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "grades": [PredictionGradesInner.from_dict(_item) for _item in obj["grades"]] if obj.get("grades") is not None else None,
            "involvedInteractionTypes": obj.get("involvedInteractionTypes"),
            "involvedKpiTypes": obj.get("involvedKpiTypes"),
            "involvedRelationships": obj.get("involvedRelationships"),
            "mappings": PredictionMappings.from_dict(obj["mappings"]) if obj.get("mappings") is not None else None,
            "negativeOutcomeExpression": obj.get("negativeOutcomeExpression"),
            "positiveOutcomeExpression": obj.get("positiveOutcomeExpression"),
            "predictionName": obj.get("predictionName"),
            "primaryProfileType": obj.get("primaryProfileType"),
            "provisioningState": obj.get("provisioningState"),
            "scopeExpression": obj.get("scopeExpression"),
            "scoreLabel": obj.get("scoreLabel"),
            "systemGeneratedEntities": PredictionSystemGeneratedEntities.from_dict(obj["systemGeneratedEntities"]) if obj.get("systemGeneratedEntities") is not None else None,
            "tenantId": obj.get("tenantId")
        })
        return _obj



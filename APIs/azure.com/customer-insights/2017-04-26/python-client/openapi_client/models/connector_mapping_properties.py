# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-04-26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connector_mapping_availability import ConnectorMappingAvailability
from openapi_client.models.connector_mapping_complete_operation import ConnectorMappingCompleteOperation
from openapi_client.models.connector_mapping_error_management import ConnectorMappingErrorManagement
from openapi_client.models.connector_mapping_format import ConnectorMappingFormat
from openapi_client.models.connector_mapping_structure import ConnectorMappingStructure
from typing import Optional, Set
from typing_extensions import Self

class ConnectorMappingProperties(BaseModel):
    """
    The connector mapping properties.
    """ # noqa: E501
    availability: ConnectorMappingAvailability
    complete_operation: ConnectorMappingCompleteOperation = Field(alias="completeOperation")
    error_management: ConnectorMappingErrorManagement = Field(alias="errorManagement")
    file_filter: Optional[StrictStr] = Field(default=None, description="The file filter for the mapping.", alias="fileFilter")
    folder_path: Optional[StrictStr] = Field(default=None, description="The folder path for the mapping.", alias="folderPath")
    format: ConnectorMappingFormat
    has_header: Optional[StrictBool] = Field(default=None, description="If the file contains a header or not.", alias="hasHeader")
    structure: List[ConnectorMappingStructure] = Field(description="Ingestion mapping information at property level.")
    __properties: ClassVar[List[str]] = ["availability", "completeOperation", "errorManagement", "fileFilter", "folderPath", "format", "hasHeader", "structure"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectorMappingProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of availability
        if self.availability:
            _dict['availability'] = self.availability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of complete_operation
        if self.complete_operation:
            _dict['completeOperation'] = self.complete_operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_management
        if self.error_management:
            _dict['errorManagement'] = self.error_management.to_dict()
        # override the default output from pydantic by calling `to_dict()` of format
        if self.format:
            _dict['format'] = self.format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in structure (list)
        _items = []
        if self.structure:
            for _item_structure in self.structure:
                if _item_structure:
                    _items.append(_item_structure.to_dict())
            _dict['structure'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectorMappingProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availability": ConnectorMappingAvailability.from_dict(obj["availability"]) if obj.get("availability") is not None else None,
            "completeOperation": ConnectorMappingCompleteOperation.from_dict(obj["completeOperation"]) if obj.get("completeOperation") is not None else None,
            "errorManagement": ConnectorMappingErrorManagement.from_dict(obj["errorManagement"]) if obj.get("errorManagement") is not None else None,
            "fileFilter": obj.get("fileFilter"),
            "folderPath": obj.get("folderPath"),
            "format": ConnectorMappingFormat.from_dict(obj["format"]) if obj.get("format") is not None else None,
            "hasHeader": obj.get("hasHeader"),
            "structure": [ConnectorMappingStructure.from_dict(_item) for _item in obj["structure"]] if obj.get("structure") is not None else None
        })
        return _obj



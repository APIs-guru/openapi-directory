# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-04-26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assignment_principal import AssignmentPrincipal
from openapi_client.models.provisioning_state import ProvisioningState
from openapi_client.models.resource_set_description import ResourceSetDescription
from typing import Optional, Set
from typing_extensions import Self

class RoleAssignment(BaseModel):
    """
    The Role Assignment definition.
    """ # noqa: E501
    assignment_name: Optional[StrictStr] = Field(default=None, description="The name of the metadata object.", alias="assignmentName")
    conflation_policies: Optional[ResourceSetDescription] = Field(default=None, alias="conflationPolicies")
    connectors: Optional[ResourceSetDescription] = None
    description: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized description for the metadata.")
    display_name: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized display names for the metadata.", alias="displayName")
    interactions: Optional[ResourceSetDescription] = None
    kpis: Optional[ResourceSetDescription] = None
    links: Optional[ResourceSetDescription] = None
    principals: List[AssignmentPrincipal] = Field(description="The principals being assigned to.")
    profiles: Optional[ResourceSetDescription] = None
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    relationship_links: Optional[ResourceSetDescription] = Field(default=None, alias="relationshipLinks")
    relationships: Optional[ResourceSetDescription] = None
    role: StrictStr = Field(description="Type of roles.")
    role_assignments: Optional[ResourceSetDescription] = Field(default=None, alias="roleAssignments")
    sas_policies: Optional[ResourceSetDescription] = Field(default=None, alias="sasPolicies")
    segments: Optional[ResourceSetDescription] = None
    tenant_id: Optional[StrictStr] = Field(default=None, description="The hub name.", alias="tenantId")
    views: Optional[ResourceSetDescription] = None
    widget_types: Optional[ResourceSetDescription] = Field(default=None, alias="widgetTypes")
    __properties: ClassVar[List[str]] = ["assignmentName", "conflationPolicies", "connectors", "description", "displayName", "interactions", "kpis", "links", "principals", "profiles", "provisioningState", "relationshipLinks", "relationships", "role", "roleAssignments", "sasPolicies", "segments", "tenantId", "views", "widgetTypes"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Admin', 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin', 'DataReader']):
            raise ValueError("must be one of enum values ('Admin', 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin', 'DataReader')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "assignment_name",
            "tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conflation_policies
        if self.conflation_policies:
            _dict['conflationPolicies'] = self.conflation_policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connectors
        if self.connectors:
            _dict['connectors'] = self.connectors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interactions
        if self.interactions:
            _dict['interactions'] = self.interactions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kpis
        if self.kpis:
            _dict['kpis'] = self.kpis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in principals (list)
        _items = []
        if self.principals:
            for _item_principals in self.principals:
                if _item_principals:
                    _items.append(_item_principals.to_dict())
            _dict['principals'] = _items
        # override the default output from pydantic by calling `to_dict()` of profiles
        if self.profiles:
            _dict['profiles'] = self.profiles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relationship_links
        if self.relationship_links:
            _dict['relationshipLinks'] = self.relationship_links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relationships
        if self.relationships:
            _dict['relationships'] = self.relationships.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_assignments
        if self.role_assignments:
            _dict['roleAssignments'] = self.role_assignments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sas_policies
        if self.sas_policies:
            _dict['sasPolicies'] = self.sas_policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segments
        if self.segments:
            _dict['segments'] = self.segments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of views
        if self.views:
            _dict['views'] = self.views.to_dict()
        # override the default output from pydantic by calling `to_dict()` of widget_types
        if self.widget_types:
            _dict['widgetTypes'] = self.widget_types.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignmentName": obj.get("assignmentName"),
            "conflationPolicies": ResourceSetDescription.from_dict(obj["conflationPolicies"]) if obj.get("conflationPolicies") is not None else None,
            "connectors": ResourceSetDescription.from_dict(obj["connectors"]) if obj.get("connectors") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "interactions": ResourceSetDescription.from_dict(obj["interactions"]) if obj.get("interactions") is not None else None,
            "kpis": ResourceSetDescription.from_dict(obj["kpis"]) if obj.get("kpis") is not None else None,
            "links": ResourceSetDescription.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "principals": [AssignmentPrincipal.from_dict(_item) for _item in obj["principals"]] if obj.get("principals") is not None else None,
            "profiles": ResourceSetDescription.from_dict(obj["profiles"]) if obj.get("profiles") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "relationshipLinks": ResourceSetDescription.from_dict(obj["relationshipLinks"]) if obj.get("relationshipLinks") is not None else None,
            "relationships": ResourceSetDescription.from_dict(obj["relationships"]) if obj.get("relationships") is not None else None,
            "role": obj.get("role"),
            "roleAssignments": ResourceSetDescription.from_dict(obj["roleAssignments"]) if obj.get("roleAssignments") is not None else None,
            "sasPolicies": ResourceSetDescription.from_dict(obj["sasPolicies"]) if obj.get("sasPolicies") is not None else None,
            "segments": ResourceSetDescription.from_dict(obj["segments"]) if obj.get("segments") is not None else None,
            "tenantId": obj.get("tenantId"),
            "views": ResourceSetDescription.from_dict(obj["views"]) if obj.get("views") is not None else None,
            "widgetTypes": ResourceSetDescription.from_dict(obj["widgetTypes"]) if obj.get("widgetTypes") is not None else None
        })
        return _obj



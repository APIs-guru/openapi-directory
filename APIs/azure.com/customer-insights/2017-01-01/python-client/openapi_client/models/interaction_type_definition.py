# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_source import DataSource
from openapi_client.models.data_source_precedence import DataSourcePrecedence
from openapi_client.models.participant import Participant
from openapi_client.models.property_definition import PropertyDefinition
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class InteractionTypeDefinition(BaseModel):
    """
    The Interaction Type Definition
    """ # noqa: E501
    data_source_precedence_rules: Optional[List[DataSourcePrecedence]] = Field(default=None, description="This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.", alias="dataSourcePrecedenceRules")
    default_data_source: Optional[DataSource] = Field(default=None, alias="defaultDataSource")
    id_property_names: Optional[List[StrictStr]] = Field(default=None, description="The id property names. Properties which uniquely identify an interaction instance.", alias="idPropertyNames")
    is_activity: Optional[StrictBool] = Field(default=None, description="An interaction can be tagged as an activity only during create. This enables the interaction to be editable and can enable merging of properties from multiple data sources based on precedence, which is defined at a link level.", alias="isActivity")
    participant_profiles: Optional[List[Participant]] = Field(default=None, description="Profiles that participated in the interaction.", alias="participantProfiles")
    primary_participant_profile_property_name: Optional[StrictStr] = Field(default=None, description="The primary participant property name for an interaction ,This is used to logically represent the agent of the interaction, Specify the participant name here from ParticipantName.", alias="primaryParticipantProfilePropertyName")
    api_entity_set_name: Optional[StrictStr] = Field(default=None, description="The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.", alias="apiEntitySetName")
    entity_type: Optional[StrictStr] = Field(default=None, description="Type of entity.", alias="entityType")
    fields: Optional[List[PropertyDefinition]] = Field(default=None, description="The properties of the Profile.")
    instances_count: Optional[StrictInt] = Field(default=None, description="The instance count.", alias="instancesCount")
    last_changed_utc: Optional[datetime] = Field(default=None, description="The last changed time for the type definition.", alias="lastChangedUtc")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    schema_item_type_link: Optional[StrictStr] = Field(default=None, description="The schema org link. This helps ACI identify and suggest semantic models.", alias="schemaItemTypeLink")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The hub name.", alias="tenantId")
    timestamp_field_name: Optional[StrictStr] = Field(default=None, description="The timestamp property name. Represents the time when the interaction or profile update happened.", alias="timestampFieldName")
    type_name: Optional[StrictStr] = Field(default=None, description="The name of the entity.", alias="typeName")
    attributes: Optional[Dict[str, List[StrictStr]]] = Field(default=None, description="The attributes for the Type.")
    description: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized descriptions for the property.")
    display_name: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized display names for the property.", alias="displayName")
    large_image: Optional[StrictStr] = Field(default=None, description="Large Image associated with the Property or EntityType.", alias="largeImage")
    localized_attributes: Optional[Dict[str, Dict[str, StrictStr]]] = Field(default=None, description="Any custom localized attributes for the Type.", alias="localizedAttributes")
    medium_image: Optional[StrictStr] = Field(default=None, description="Medium Image associated with the Property or EntityType.", alias="mediumImage")
    small_image: Optional[StrictStr] = Field(default=None, description="Small Image associated with the Property or EntityType.", alias="smallImage")
    __properties: ClassVar[List[str]] = ["apiEntitySetName", "entityType", "fields", "instancesCount", "lastChangedUtc", "provisioningState", "schemaItemTypeLink", "tenantId", "timestampFieldName", "typeName", "attributes", "description", "displayName", "largeImage", "localizedAttributes", "mediumImage", "smallImage"]

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Profile', 'Interaction', 'Relationship']):
            raise ValueError("must be one of enum values ('None', 'Profile', 'Interaction', 'Relationship')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InteractionTypeDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_source_precedence_rules",
            "last_changed_utc",
            "tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InteractionTypeDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiEntitySetName": obj.get("apiEntitySetName"),
            "entityType": obj.get("entityType"),
            "fields": [PropertyDefinition.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "instancesCount": obj.get("instancesCount"),
            "lastChangedUtc": obj.get("lastChangedUtc"),
            "provisioningState": obj.get("provisioningState"),
            "schemaItemTypeLink": obj.get("schemaItemTypeLink"),
            "tenantId": obj.get("tenantId"),
            "timestampFieldName": obj.get("timestampFieldName"),
            "typeName": obj.get("typeName"),
            "attributes": obj.get("attributes"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "largeImage": obj.get("largeImage"),
            "localizedAttributes": obj.get("localizedAttributes"),
            "mediumImage": obj.get("mediumImage"),
            "smallImage": obj.get("smallImage")
        })
        return _obj



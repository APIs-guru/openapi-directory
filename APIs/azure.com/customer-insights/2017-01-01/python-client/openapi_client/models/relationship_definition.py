# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.property_definition import PropertyDefinition
from openapi_client.models.provisioning_state import ProvisioningState
from openapi_client.models.relationship_type_mapping import RelationshipTypeMapping
from typing import Optional, Set
from typing_extensions import Self

class RelationshipDefinition(BaseModel):
    """
    The definition of Relationship.
    """ # noqa: E501
    cardinality: Optional[StrictStr] = Field(default=None, description="The Relationship Cardinality.")
    description: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized descriptions for the Relationship.")
    display_name: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized display name for the Relationship.", alias="displayName")
    expiry_date_time_utc: Optional[datetime] = Field(default=None, description="The expiry date time in UTC.", alias="expiryDateTimeUtc")
    fields: Optional[List[PropertyDefinition]] = Field(default=None, description="The properties of the Relationship.")
    lookup_mappings: Optional[List[RelationshipTypeMapping]] = Field(default=None, description="Optional property to be used to map fields in profile to their strong ids in related profile.", alias="lookupMappings")
    profile_type: StrictStr = Field(description="Profile type.", alias="profileType")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    related_profile_type: StrictStr = Field(description="Related profile being referenced.", alias="relatedProfileType")
    relationship_guid_id: Optional[StrictStr] = Field(default=None, description="The relationship guid id.", alias="relationshipGuidId")
    relationship_name: Optional[StrictStr] = Field(default=None, description="The Relationship name.", alias="relationshipName")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The hub name.", alias="tenantId")
    __properties: ClassVar[List[str]] = ["cardinality", "description", "displayName", "expiryDateTimeUtc", "fields", "lookupMappings", "profileType", "provisioningState", "relatedProfileType", "relationshipGuidId", "relationshipName", "tenantId"]

    @field_validator('cardinality')
    def cardinality_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OneToOne', 'OneToMany', 'ManyToMany']):
            raise ValueError("must be one of enum values ('OneToOne', 'OneToMany', 'ManyToMany')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RelationshipDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "relationship_guid_id",
            "relationship_name",
            "tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lookup_mappings (list)
        _items = []
        if self.lookup_mappings:
            for _item_lookup_mappings in self.lookup_mappings:
                if _item_lookup_mappings:
                    _items.append(_item_lookup_mappings.to_dict())
            _dict['lookupMappings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RelationshipDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardinality": obj.get("cardinality"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "expiryDateTimeUtc": obj.get("expiryDateTimeUtc"),
            "fields": [PropertyDefinition.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "lookupMappings": [RelationshipTypeMapping.from_dict(_item) for _item in obj["lookupMappings"]] if obj.get("lookupMappings") is not None else None,
            "profileType": obj.get("profileType"),
            "provisioningState": obj.get("provisioningState"),
            "relatedProfileType": obj.get("relatedProfileType"),
            "relationshipGuidId": obj.get("relationshipGuidId"),
            "relationshipName": obj.get("relationshipName"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connector_mapping_properties import ConnectorMappingProperties
from openapi_client.models.connector_type import ConnectorType
from typing import Optional, Set
from typing_extensions import Self

class ConnectorMapping(BaseModel):
    """
    The connector mapping definition.
    """ # noqa: E501
    connector_mapping_name: Optional[StrictStr] = Field(default=None, description="The connector mapping name", alias="connectorMappingName")
    connector_name: Optional[StrictStr] = Field(default=None, description="The connector name.", alias="connectorName")
    connector_type: Optional[ConnectorType] = Field(default=None, alias="connectorType")
    created: Optional[datetime] = Field(default=None, description="The created time.")
    data_format_id: Optional[StrictStr] = Field(default=None, description="The DataFormat ID.", alias="dataFormatId")
    description: Optional[StrictStr] = Field(default=None, description="The description of the connector mapping.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name for the connector mapping.", alias="displayName")
    entity_type: StrictStr = Field(description="Defines which entity type the file should map to.", alias="entityType")
    entity_type_name: StrictStr = Field(description="The mapping entity name.", alias="entityTypeName")
    last_modified: Optional[datetime] = Field(default=None, description="The last modified time.", alias="lastModified")
    mapping_properties: ConnectorMappingProperties = Field(alias="mappingProperties")
    next_run_time: Optional[datetime] = Field(default=None, description="The next run time based on customer's settings.", alias="nextRunTime")
    run_id: Optional[StrictStr] = Field(default=None, description="The RunId.", alias="runId")
    state: Optional[StrictStr] = Field(default=None, description="State of connector mapping.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The hub name.", alias="tenantId")
    __properties: ClassVar[List[str]] = ["connectorMappingName", "connectorName", "connectorType", "created", "dataFormatId", "description", "displayName", "entityType", "entityTypeName", "lastModified", "mappingProperties", "nextRunTime", "runId", "state", "tenantId"]

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['None', 'Profile', 'Interaction', 'Relationship']):
            raise ValueError("must be one of enum values ('None', 'Profile', 'Interaction', 'Relationship')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Created', 'Failed', 'Ready', 'Running', 'Stopped', 'Expiring']):
            raise ValueError("must be one of enum values ('Creating', 'Created', 'Failed', 'Ready', 'Running', 'Stopped', 'Expiring')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectorMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connector_mapping_name",
            "connector_name",
            "created",
            "data_format_id",
            "last_modified",
            "next_run_time",
            "run_id",
            "state",
            "tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mapping_properties
        if self.mapping_properties:
            _dict['mappingProperties'] = self.mapping_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectorMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectorMappingName": obj.get("connectorMappingName"),
            "connectorName": obj.get("connectorName"),
            "connectorType": obj.get("connectorType"),
            "created": obj.get("created"),
            "dataFormatId": obj.get("dataFormatId"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "entityType": obj.get("entityType"),
            "entityTypeName": obj.get("entityTypeName"),
            "lastModified": obj.get("lastModified"),
            "mappingProperties": ConnectorMappingProperties.from_dict(obj["mappingProperties"]) if obj.get("mappingProperties") is not None else None,
            "nextRunTime": obj.get("nextRunTime"),
            "runId": obj.get("runId"),
            "state": obj.get("state"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



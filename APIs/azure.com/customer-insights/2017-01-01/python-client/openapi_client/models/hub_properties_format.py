# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hub_billing_info_format import HubBillingInfoFormat
from typing import Optional, Set
from typing_extensions import Self

class HubPropertiesFormat(BaseModel):
    """
    Properties of hub.
    """ # noqa: E501
    api_endpoint: Optional[StrictStr] = Field(default=None, description="API endpoint URL of the hub.", alias="apiEndpoint")
    hub_billing_info: Optional[HubBillingInfoFormat] = Field(default=None, alias="hubBillingInfo")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the hub.", alias="provisioningState")
    tenant_features: Optional[StrictInt] = Field(default=None, description="The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.", alias="tenantFeatures")
    web_endpoint: Optional[StrictStr] = Field(default=None, description="Web endpoint URL of the hub.", alias="webEndpoint")
    __properties: ClassVar[List[str]] = ["apiEndpoint", "hubBillingInfo", "provisioningState", "tenantFeatures", "webEndpoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HubPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_endpoint",
            "provisioning_state",
            "web_endpoint",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hub_billing_info
        if self.hub_billing_info:
            _dict['hubBillingInfo'] = self.hub_billing_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HubPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiEndpoint": obj.get("apiEndpoint"),
            "hubBillingInfo": HubBillingInfoFormat.from_dict(obj["hubBillingInfo"]) if obj.get("hubBillingInfo") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "tenantFeatures": obj.get("tenantFeatures"),
            "webEndpoint": obj.get("webEndpoint")
        })
        return _obj



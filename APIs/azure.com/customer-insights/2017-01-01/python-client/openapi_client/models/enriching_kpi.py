# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.kpi_alias import KpiAlias
from openapi_client.models.kpi_extract import KpiExtract
from openapi_client.models.kpi_group_by_metadata import KpiGroupByMetadata
from openapi_client.models.kpi_participant_profiles_metadata import KpiParticipantProfilesMetadata
from openapi_client.models.kpi_thresholds import KpiThresholds
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class EnrichingKpi(BaseModel):
    """
    The enriching KPI definition.
    """ # noqa: E501
    aliases: Optional[List[KpiAlias]] = Field(default=None, description="The aliases.")
    calculation_window: StrictStr = Field(description="The calculation window.", alias="calculationWindow")
    calculation_window_field_name: Optional[StrictStr] = Field(default=None, description="Name of calculation window field.", alias="calculationWindowFieldName")
    description: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized description for the KPI.")
    display_name: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized display name for the KPI.", alias="displayName")
    entity_type: StrictStr = Field(description="The mapping entity type.", alias="entityType")
    entity_type_name: StrictStr = Field(description="The mapping entity name.", alias="entityTypeName")
    expression: StrictStr = Field(description="The computation expression for the KPI.")
    extracts: Optional[List[KpiExtract]] = Field(default=None, description="The KPI extracts.")
    filter: Optional[StrictStr] = Field(default=None, description="The filter expression for the KPI.")
    function: StrictStr = Field(description="The computation function for the KPI.")
    group_by: Optional[List[StrictStr]] = Field(default=None, description="the group by properties for the KPI.", alias="groupBy")
    group_by_metadata: Optional[List[KpiGroupByMetadata]] = Field(default=None, description="The KPI GroupByMetadata.", alias="groupByMetadata")
    kpi_name: Optional[StrictStr] = Field(default=None, description="The KPI name.", alias="kpiName")
    participant_profiles_metadata: Optional[List[KpiParticipantProfilesMetadata]] = Field(default=None, description="The participant profiles.", alias="participantProfilesMetadata")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The hub name.", alias="tenantId")
    thres_holds: Optional[KpiThresholds] = Field(default=None, alias="thresHolds")
    unit: Optional[StrictStr] = Field(default=None, description="The unit of measurement for the KPI.")
    __properties: ClassVar[List[str]] = ["aliases", "calculationWindow", "calculationWindowFieldName", "description", "displayName", "entityType", "entityTypeName", "expression", "extracts", "filter", "function", "groupBy", "groupByMetadata", "kpiName", "participantProfilesMetadata", "provisioningState", "tenantId", "thresHolds", "unit"]

    @field_validator('calculation_window')
    def calculation_window_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Lifetime', 'Hour', 'Day', 'Week', 'Month']):
            raise ValueError("must be one of enum values ('Lifetime', 'Hour', 'Day', 'Week', 'Month')")
        return value

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['None', 'Profile', 'Interaction', 'Relationship']):
            raise ValueError("must be one of enum values ('None', 'Profile', 'Interaction', 'Relationship')")
        return value

    @field_validator('function')
    def function_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Sum', 'Avg', 'Min', 'Max', 'Last', 'Count', 'None', 'CountDistinct']):
            raise ValueError("must be one of enum values ('Sum', 'Avg', 'Min', 'Max', 'Last', 'Count', 'None', 'CountDistinct')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnrichingKpi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "group_by_metadata",
            "kpi_name",
            "participant_profiles_metadata",
            "tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aliases (list)
        _items = []
        if self.aliases:
            for _item_aliases in self.aliases:
                if _item_aliases:
                    _items.append(_item_aliases.to_dict())
            _dict['aliases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extracts (list)
        _items = []
        if self.extracts:
            for _item_extracts in self.extracts:
                if _item_extracts:
                    _items.append(_item_extracts.to_dict())
            _dict['extracts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_by_metadata (list)
        _items = []
        if self.group_by_metadata:
            for _item_group_by_metadata in self.group_by_metadata:
                if _item_group_by_metadata:
                    _items.append(_item_group_by_metadata.to_dict())
            _dict['groupByMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in participant_profiles_metadata (list)
        _items = []
        if self.participant_profiles_metadata:
            for _item_participant_profiles_metadata in self.participant_profiles_metadata:
                if _item_participant_profiles_metadata:
                    _items.append(_item_participant_profiles_metadata.to_dict())
            _dict['participantProfilesMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of thres_holds
        if self.thres_holds:
            _dict['thresHolds'] = self.thres_holds.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnrichingKpi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aliases": [KpiAlias.from_dict(_item) for _item in obj["aliases"]] if obj.get("aliases") is not None else None,
            "calculationWindow": obj.get("calculationWindow"),
            "calculationWindowFieldName": obj.get("calculationWindowFieldName"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "entityType": obj.get("entityType"),
            "entityTypeName": obj.get("entityTypeName"),
            "expression": obj.get("expression"),
            "extracts": [KpiExtract.from_dict(_item) for _item in obj["extracts"]] if obj.get("extracts") is not None else None,
            "filter": obj.get("filter"),
            "function": obj.get("function"),
            "groupBy": obj.get("groupBy"),
            "groupByMetadata": [KpiGroupByMetadata.from_dict(_item) for _item in obj["groupByMetadata"]] if obj.get("groupByMetadata") is not None else None,
            "kpiName": obj.get("kpiName"),
            "participantProfilesMetadata": [KpiParticipantProfilesMetadata.from_dict(_item) for _item in obj["participantProfilesMetadata"]] if obj.get("participantProfilesMetadata") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "tenantId": obj.get("tenantId"),
            "thresHolds": KpiThresholds.from_dict(obj["thresHolds"]) if obj.get("thresHolds") is not None else None,
            "unit": obj.get("unit")
        })
        return _obj



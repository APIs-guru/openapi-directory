# coding: utf-8

"""
    CustomerInsightsManagementClient

    The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.participant_property_reference import ParticipantPropertyReference
from openapi_client.models.provisioning_state import ProvisioningState
from openapi_client.models.type_properties_mapping import TypePropertiesMapping
from typing import Optional, Set
from typing_extensions import Self

class LinkDefinition(BaseModel):
    """
    The definition of Link.
    """ # noqa: E501
    description: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized descriptions for the Link.")
    display_name: Optional[Dict[str, StrictStr]] = Field(default=None, description="Localized display name for the Link.", alias="displayName")
    link_name: Optional[StrictStr] = Field(default=None, description="The link name.", alias="linkName")
    mappings: Optional[List[TypePropertiesMapping]] = Field(default=None, description="The set of properties mappings between the source and target Types.")
    operation_type: Optional[StrictStr] = Field(default=None, description="Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.", alias="operationType")
    participant_property_references: List[ParticipantPropertyReference] = Field(description="The properties that represent the participating profile.", alias="participantPropertyReferences")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    reference_only: Optional[StrictBool] = Field(default=None, description="Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.", alias="referenceOnly")
    source_interaction_type: StrictStr = Field(description="Name of the source Interaction Type.", alias="sourceInteractionType")
    target_profile_type: StrictStr = Field(description="Name of the target Profile Type.", alias="targetProfileType")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The hub name.", alias="tenantId")
    __properties: ClassVar[List[str]] = ["description", "displayName", "linkName", "mappings", "operationType", "participantPropertyReferences", "provisioningState", "referenceOnly", "sourceInteractionType", "targetProfileType", "tenantId"]

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Upsert', 'Delete']):
            raise ValueError("must be one of enum values ('Upsert', 'Delete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LinkDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "link_name",
            "tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mappings (list)
        _items = []
        if self.mappings:
            for _item_mappings in self.mappings:
                if _item_mappings:
                    _items.append(_item_mappings.to_dict())
            _dict['mappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in participant_property_references (list)
        _items = []
        if self.participant_property_references:
            for _item_participant_property_references in self.participant_property_references:
                if _item_participant_property_references:
                    _items.append(_item_participant_property_references.to_dict())
            _dict['participantPropertyReferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LinkDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "linkName": obj.get("linkName"),
            "mappings": [TypePropertiesMapping.from_dict(_item) for _item in obj["mappings"]] if obj.get("mappings") is not None else None,
            "operationType": obj.get("operationType"),
            "participantPropertyReferences": [ParticipantPropertyReference.from_dict(_item) for _item in obj["participantPropertyReferences"]] if obj.get("participantPropertyReferences") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "referenceOnly": obj.get("referenceOnly"),
            "sourceInteractionType": obj.get("sourceInteractionType"),
            "targetProfileType": obj.get("targetProfileType"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



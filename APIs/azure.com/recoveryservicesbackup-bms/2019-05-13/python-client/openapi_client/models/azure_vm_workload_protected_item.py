# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-05-13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.azure_vm_workload_protected_item_extended_info import AzureVmWorkloadProtectedItemExtendedInfo
from openapi_client.models.error_detail import ErrorDetail
from openapi_client.models.protected_item import ProtectedItem
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.azure_vm_workload_sap_ase_database_protected_item import AzureVmWorkloadSAPAseDatabaseProtectedItem
    from openapi_client.models.azure_vm_workload_sap_hana_database_protected_item import AzureVmWorkloadSAPHanaDatabaseProtectedItem
    from openapi_client.models.azure_vm_workload_sql_database_protected_item import AzureVmWorkloadSQLDatabaseProtectedItem

class AzureVmWorkloadProtectedItem(ProtectedItem):
    """
    Azure VM workload-specific protected item.
    """ # noqa: E501
    extended_info: Optional[AzureVmWorkloadProtectedItemExtendedInfo] = Field(default=None, alias="extendedInfo")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of the DB represented by this backup item.", alias="friendlyName")
    last_backup_error_detail: Optional[ErrorDetail] = Field(default=None, alias="lastBackupErrorDetail")
    last_backup_status: Optional[StrictStr] = Field(default=None, description="Last backup operation status. Possible values: Healthy, Unhealthy.", alias="lastBackupStatus")
    last_backup_time: Optional[datetime] = Field(default=None, description="Timestamp of the last backup operation on this backup item.", alias="lastBackupTime")
    parent_name: Optional[StrictStr] = Field(default=None, description="Parent name of the DB such as Instance or Availability Group.", alias="parentName")
    parent_type: Optional[StrictStr] = Field(default=None, description="Parent type of protected item, example: for a DB, standalone server or distributed", alias="parentType")
    protected_item_data_source_id: Optional[StrictStr] = Field(default=None, description="Data ID of the protected item.", alias="protectedItemDataSourceId")
    protected_item_health_status: Optional[StrictStr] = Field(default=None, description="Health status of the backup item, evaluated based on last heartbeat received", alias="protectedItemHealthStatus")
    protection_state: Optional[StrictStr] = Field(default=None, description="Backup state of this backup item.", alias="protectionState")
    protection_status: Optional[StrictStr] = Field(default=None, description="Backup status of this backup item.", alias="protectionStatus")
    server_name: Optional[StrictStr] = Field(default=None, description="Host/Cluster Name for instance or AG", alias="serverName")
    __properties: ClassVar[List[str]] = ["backupManagementType", "backupSetName", "containerName", "createMode", "deferredDeleteTimeInUTC", "deferredDeleteTimeRemaining", "isDeferredDeleteScheduleUpcoming", "isRehydrate", "isScheduledForDeferredDelete", "lastRecoveryPoint", "policyId", "protectedItemType", "sourceResourceId", "workloadType"]

    @field_validator('last_backup_status')
    def last_backup_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Healthy', 'Unhealthy', 'IRPending']):
            raise ValueError("must be one of enum values ('Invalid', 'Healthy', 'Unhealthy', 'IRPending')")
        return value

    @field_validator('protected_item_health_status')
    def protected_item_health_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Healthy', 'Unhealthy', 'NotReachable', 'IRPending']):
            raise ValueError("must be one of enum values ('Invalid', 'Healthy', 'Unhealthy', 'NotReachable', 'IRPending')")
        return value

    @field_validator('protection_state')
    def protection_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'IRPending', 'Protected', 'ProtectionError', 'ProtectionStopped', 'ProtectionPaused']):
            raise ValueError("must be one of enum values ('Invalid', 'IRPending', 'Protected', 'ProtectionError', 'ProtectionStopped', 'ProtectionPaused')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'protectedItemType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AzureVmWorkloadSAPAseDatabaseProtectedItem': 'AzureVmWorkloadSAPAseDatabaseProtectedItem','AzureVmWorkloadSAPHanaDatabaseProtectedItem': 'AzureVmWorkloadSAPHanaDatabaseProtectedItem','AzureVmWorkloadSQLDatabaseProtectedItem': 'AzureVmWorkloadSQLDatabaseProtectedItem'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AzureVmWorkloadSAPAseDatabaseProtectedItem, AzureVmWorkloadSAPHanaDatabaseProtectedItem, AzureVmWorkloadSQLDatabaseProtectedItem]]:
        """Create an instance of AzureVmWorkloadProtectedItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AzureVmWorkloadSAPAseDatabaseProtectedItem, AzureVmWorkloadSAPHanaDatabaseProtectedItem, AzureVmWorkloadSQLDatabaseProtectedItem]]:
        """Create an instance of AzureVmWorkloadProtectedItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AzureVmWorkloadSAPAseDatabaseProtectedItem':
            return import_module("openapi_client.models.azure_vm_workload_sap_ase_database_protected_item").AzureVmWorkloadSAPAseDatabaseProtectedItem.from_dict(obj)
        if object_type ==  'AzureVmWorkloadSAPHanaDatabaseProtectedItem':
            return import_module("openapi_client.models.azure_vm_workload_sap_hana_database_protected_item").AzureVmWorkloadSAPHanaDatabaseProtectedItem.from_dict(obj)
        if object_type ==  'AzureVmWorkloadSQLDatabaseProtectedItem':
            return import_module("openapi_client.models.azure_vm_workload_sql_database_protected_item").AzureVmWorkloadSQLDatabaseProtectedItem.from_dict(obj)

        raise ValueError("AzureVmWorkloadProtectedItem failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



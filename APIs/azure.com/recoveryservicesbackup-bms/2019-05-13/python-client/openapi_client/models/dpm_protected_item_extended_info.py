# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-05-13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DPMProtectedItemExtendedInfo(BaseModel):
    """
    Additional information of DPM Protected item.
    """ # noqa: E501
    disk_storage_used_in_bytes: Optional[StrictStr] = Field(default=None, description="Used Disk storage in bytes.", alias="diskStorageUsedInBytes")
    is_collocated: Optional[StrictBool] = Field(default=None, description="To check if backup item is collocated.", alias="isCollocated")
    is_present_on_cloud: Optional[StrictBool] = Field(default=None, description="To check if backup item is cloud protected.", alias="isPresentOnCloud")
    last_backup_status: Optional[StrictStr] = Field(default=None, description="Last backup status information on backup item.", alias="lastBackupStatus")
    last_refreshed_at: Optional[datetime] = Field(default=None, description="Last refresh time on backup item.", alias="lastRefreshedAt")
    oldest_recovery_point: Optional[datetime] = Field(default=None, description="Oldest cloud recovery point time.", alias="oldestRecoveryPoint")
    on_premise_latest_recovery_point: Optional[datetime] = Field(default=None, description="latest disk recovery point time.", alias="onPremiseLatestRecoveryPoint")
    on_premise_oldest_recovery_point: Optional[datetime] = Field(default=None, description="Oldest disk recovery point time.", alias="onPremiseOldestRecoveryPoint")
    on_premise_recovery_point_count: Optional[StrictInt] = Field(default=None, description="disk recovery point count.", alias="onPremiseRecoveryPointCount")
    protectable_object_load_path: Optional[Dict[str, StrictStr]] = Field(default=None, description="Attribute to provide information on various DBs.", alias="protectableObjectLoadPath")
    protected: Optional[StrictBool] = Field(default=None, description="To check if backup item is disk protected.")
    protection_group_name: Optional[StrictStr] = Field(default=None, description="Protection group name of the backup item.", alias="protectionGroupName")
    recovery_point_count: Optional[StrictInt] = Field(default=None, description="cloud recovery point count.", alias="recoveryPointCount")
    total_disk_storage_size_in_bytes: Optional[StrictStr] = Field(default=None, description="total Disk storage in bytes.", alias="totalDiskStorageSizeInBytes")
    __properties: ClassVar[List[str]] = ["diskStorageUsedInBytes", "isCollocated", "isPresentOnCloud", "lastBackupStatus", "lastRefreshedAt", "oldestRecoveryPoint", "onPremiseLatestRecoveryPoint", "onPremiseOldestRecoveryPoint", "onPremiseRecoveryPointCount", "protectableObjectLoadPath", "protected", "protectionGroupName", "recoveryPointCount", "totalDiskStorageSizeInBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DPMProtectedItemExtendedInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DPMProtectedItemExtendedInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskStorageUsedInBytes": obj.get("diskStorageUsedInBytes"),
            "isCollocated": obj.get("isCollocated"),
            "isPresentOnCloud": obj.get("isPresentOnCloud"),
            "lastBackupStatus": obj.get("lastBackupStatus"),
            "lastRefreshedAt": obj.get("lastRefreshedAt"),
            "oldestRecoveryPoint": obj.get("oldestRecoveryPoint"),
            "onPremiseLatestRecoveryPoint": obj.get("onPremiseLatestRecoveryPoint"),
            "onPremiseOldestRecoveryPoint": obj.get("onPremiseOldestRecoveryPoint"),
            "onPremiseRecoveryPointCount": obj.get("onPremiseRecoveryPointCount"),
            "protectableObjectLoadPath": obj.get("protectableObjectLoadPath"),
            "protected": obj.get("protected"),
            "protectionGroupName": obj.get("protectionGroupName"),
            "recoveryPointCount": obj.get("recoveryPointCount"),
            "totalDiskStorageSizeInBytes": obj.get("totalDiskStorageSizeInBytes")
        })
        return _obj



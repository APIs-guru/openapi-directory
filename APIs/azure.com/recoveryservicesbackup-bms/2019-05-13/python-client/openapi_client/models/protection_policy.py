# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-05-13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.azure_file_share_protection_policy import AzureFileShareProtectionPolicy
    from openapi_client.models.azure_iaa_svm_protection_policy import AzureIaaSVMProtectionPolicy
    from openapi_client.models.azure_sql_protection_policy import AzureSqlProtectionPolicy
    from openapi_client.models.azure_vm_workload_protection_policy import AzureVmWorkloadProtectionPolicy
    from openapi_client.models.generic_protection_policy import GenericProtectionPolicy
    from openapi_client.models.mab_protection_policy import MabProtectionPolicy

class ProtectionPolicy(BaseModel):
    """
    Base class for backup policy. Workload-specific backup policies are derived from this class.
    """ # noqa: E501
    backup_management_type: StrictStr = Field(description="This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.", alias="backupManagementType")
    protected_items_count: Optional[StrictInt] = Field(default=None, description="Number of items associated with this policy.", alias="protectedItemsCount")
    __properties: ClassVar[List[str]] = ["backupManagementType", "protectedItemsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'backupManagementType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AzureFileShareProtectionPolicy': 'AzureFileShareProtectionPolicy','AzureIaaSVMProtectionPolicy': 'AzureIaaSVMProtectionPolicy','AzureSqlProtectionPolicy': 'AzureSqlProtectionPolicy','AzureVmWorkloadProtectionPolicy': 'AzureVmWorkloadProtectionPolicy','GenericProtectionPolicy': 'GenericProtectionPolicy','MabProtectionPolicy': 'MabProtectionPolicy'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AzureFileShareProtectionPolicy, AzureIaaSVMProtectionPolicy, AzureSqlProtectionPolicy, AzureVmWorkloadProtectionPolicy, GenericProtectionPolicy, MabProtectionPolicy]]:
        """Create an instance of ProtectionPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AzureFileShareProtectionPolicy, AzureIaaSVMProtectionPolicy, AzureSqlProtectionPolicy, AzureVmWorkloadProtectionPolicy, GenericProtectionPolicy, MabProtectionPolicy]]:
        """Create an instance of ProtectionPolicy from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AzureFileShareProtectionPolicy':
            return import_module("openapi_client.models.azure_file_share_protection_policy").AzureFileShareProtectionPolicy.from_dict(obj)
        if object_type ==  'AzureIaaSVMProtectionPolicy':
            return import_module("openapi_client.models.azure_iaa_svm_protection_policy").AzureIaaSVMProtectionPolicy.from_dict(obj)
        if object_type ==  'AzureSqlProtectionPolicy':
            return import_module("openapi_client.models.azure_sql_protection_policy").AzureSqlProtectionPolicy.from_dict(obj)
        if object_type ==  'AzureVmWorkloadProtectionPolicy':
            return import_module("openapi_client.models.azure_vm_workload_protection_policy").AzureVmWorkloadProtectionPolicy.from_dict(obj)
        if object_type ==  'GenericProtectionPolicy':
            return import_module("openapi_client.models.generic_protection_policy").GenericProtectionPolicy.from_dict(obj)
        if object_type ==  'MabProtectionPolicy':
            return import_module("openapi_client.models.mab_protection_policy").MabProtectionPolicy.from_dict(obj)

        raise ValueError("ProtectionPolicy failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



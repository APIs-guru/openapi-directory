# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.azure_vm_workload_protectable_item import AzureVmWorkloadProtectableItem
from openapi_client.models.pre_backup_validation import PreBackupValidation
from typing import Optional, Set
from typing_extensions import Self

class AzureVmWorkloadSAPAseSystemProtectableItem(AzureVmWorkloadProtectableItem):
    """
    Azure VM workload-specific protectable item representing SAP ASE System.
    """ # noqa: E501
    __properties: ClassVar[List[str]] = ["isAutoProtectable", "isAutoProtected", "parentName", "parentUniqueName", "prebackupvalidation", "serverName", "subinquireditemcount", "subprotectableitemcount", "backupManagementType", "friendlyName", "protectableItemType", "protectionState", "workloadType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureVmWorkloadSAPAseSystemProtectableItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prebackupvalidation
        if self.prebackupvalidation:
            _dict['prebackupvalidation'] = self.prebackupvalidation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureVmWorkloadSAPAseSystemProtectableItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isAutoProtectable": obj.get("isAutoProtectable"),
            "isAutoProtected": obj.get("isAutoProtected"),
            "parentName": obj.get("parentName"),
            "parentUniqueName": obj.get("parentUniqueName"),
            "prebackupvalidation": PreBackupValidation.from_dict(obj["prebackupvalidation"]) if obj.get("prebackupvalidation") is not None else None,
            "serverName": obj.get("serverName"),
            "subinquireditemcount": obj.get("subinquireditemcount"),
            "subprotectableitemcount": obj.get("subprotectableitemcount"),
            "backupManagementType": obj.get("backupManagementType"),
            "friendlyName": obj.get("friendlyName"),
            "protectableItemType": obj.get("protectableItemType"),
            "protectionState": obj.get("protectionState"),
            "workloadType": obj.get("workloadType")
        })
        return _obj



# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.pre_backup_validation import PreBackupValidation
from openapi_client.models.workload_protectable_item import WorkloadProtectableItem
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.azure_vm_workload_sap_ase_system_protectable_item import AzureVmWorkloadSAPAseSystemProtectableItem
    from openapi_client.models.azure_vm_workload_sap_hana_database_protectable_item import AzureVmWorkloadSAPHanaDatabaseProtectableItem
    from openapi_client.models.azure_vm_workload_sap_hana_system_protectable_item import AzureVmWorkloadSAPHanaSystemProtectableItem
    from openapi_client.models.azure_vm_workload_sql_availability_group_protectable_item import AzureVmWorkloadSQLAvailabilityGroupProtectableItem
    from openapi_client.models.azure_vm_workload_sql_database_protectable_item import AzureVmWorkloadSQLDatabaseProtectableItem
    from openapi_client.models.azure_vm_workload_sql_instance_protectable_item import AzureVmWorkloadSQLInstanceProtectableItem

class AzureVmWorkloadProtectableItem(WorkloadProtectableItem):
    """
    Azure VM workload-specific protectable item.
    """ # noqa: E501
    is_auto_protectable: Optional[StrictBool] = Field(default=None, description="Indicates if protectable item is auto-protectable", alias="isAutoProtectable")
    is_auto_protected: Optional[StrictBool] = Field(default=None, description="Indicates if protectable item is auto-protected", alias="isAutoProtected")
    parent_name: Optional[StrictStr] = Field(default=None, description="Name for instance or AG", alias="parentName")
    parent_unique_name: Optional[StrictStr] = Field(default=None, description="Parent Unique Name is added to provide the service formatted URI Name of the Parent  Only Applicable for data bases where the parent would be either Instance or a SQL AG.", alias="parentUniqueName")
    prebackupvalidation: Optional[PreBackupValidation] = None
    server_name: Optional[StrictStr] = Field(default=None, description="Host/Cluster Name for instance or AG", alias="serverName")
    subinquireditemcount: Optional[StrictInt] = Field(default=None, description="For instance or AG, indicates number of DB's present")
    subprotectableitemcount: Optional[StrictInt] = Field(default=None, description="For instance or AG, indicates number of DB's to be protected")
    __properties: ClassVar[List[str]] = ["backupManagementType", "friendlyName", "protectableItemType", "protectionState", "workloadType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'protectableItemType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AzureVmWorkloadSAPAseSystemProtectableItem': 'AzureVmWorkloadSAPAseSystemProtectableItem','AzureVmWorkloadSAPHanaDatabaseProtectableItem': 'AzureVmWorkloadSAPHanaDatabaseProtectableItem','AzureVmWorkloadSAPHanaSystemProtectableItem': 'AzureVmWorkloadSAPHanaSystemProtectableItem','AzureVmWorkloadSQLAvailabilityGroupProtectableItem': 'AzureVmWorkloadSQLAvailabilityGroupProtectableItem','AzureVmWorkloadSQLDatabaseProtectableItem': 'AzureVmWorkloadSQLDatabaseProtectableItem','AzureVmWorkloadSQLInstanceProtectableItem': 'AzureVmWorkloadSQLInstanceProtectableItem'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AzureVmWorkloadSAPAseSystemProtectableItem, AzureVmWorkloadSAPHanaDatabaseProtectableItem, AzureVmWorkloadSAPHanaSystemProtectableItem, AzureVmWorkloadSQLAvailabilityGroupProtectableItem, AzureVmWorkloadSQLDatabaseProtectableItem, AzureVmWorkloadSQLInstanceProtectableItem]]:
        """Create an instance of AzureVmWorkloadProtectableItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AzureVmWorkloadSAPAseSystemProtectableItem, AzureVmWorkloadSAPHanaDatabaseProtectableItem, AzureVmWorkloadSAPHanaSystemProtectableItem, AzureVmWorkloadSQLAvailabilityGroupProtectableItem, AzureVmWorkloadSQLDatabaseProtectableItem, AzureVmWorkloadSQLInstanceProtectableItem]]:
        """Create an instance of AzureVmWorkloadProtectableItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AzureVmWorkloadSAPAseSystemProtectableItem':
            return import_module("openapi_client.models.azure_vm_workload_sap_ase_system_protectable_item").AzureVmWorkloadSAPAseSystemProtectableItem.from_dict(obj)
        if object_type ==  'AzureVmWorkloadSAPHanaDatabaseProtectableItem':
            return import_module("openapi_client.models.azure_vm_workload_sap_hana_database_protectable_item").AzureVmWorkloadSAPHanaDatabaseProtectableItem.from_dict(obj)
        if object_type ==  'AzureVmWorkloadSAPHanaSystemProtectableItem':
            return import_module("openapi_client.models.azure_vm_workload_sap_hana_system_protectable_item").AzureVmWorkloadSAPHanaSystemProtectableItem.from_dict(obj)
        if object_type ==  'AzureVmWorkloadSQLAvailabilityGroupProtectableItem':
            return import_module("openapi_client.models.azure_vm_workload_sql_availability_group_protectable_item").AzureVmWorkloadSQLAvailabilityGroupProtectableItem.from_dict(obj)
        if object_type ==  'AzureVmWorkloadSQLDatabaseProtectableItem':
            return import_module("openapi_client.models.azure_vm_workload_sql_database_protectable_item").AzureVmWorkloadSQLDatabaseProtectableItem.from_dict(obj)
        if object_type ==  'AzureVmWorkloadSQLInstanceProtectableItem':
            return import_module("openapi_client.models.azure_vm_workload_sql_instance_protectable_item").AzureVmWorkloadSQLInstanceProtectableItem.from_dict(obj)

        raise ValueError("AzureVmWorkloadProtectableItem failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



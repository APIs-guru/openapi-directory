# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.backup_engine_extended_info import BackupEngineExtendedInfo
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.azure_backup_server_engine import AzureBackupServerEngine
    from openapi_client.models.dpm_backup_engine import DpmBackupEngine

class BackupEngineBase(BaseModel):
    """
    The base backup engine class. All workload specific backup engines derive from this class.
    """ # noqa: E501
    azure_backup_agent_version: Optional[StrictStr] = Field(default=None, description="Backup agent version", alias="azureBackupAgentVersion")
    backup_engine_id: Optional[StrictStr] = Field(default=None, description="ID of the backup engine.", alias="backupEngineId")
    backup_engine_state: Optional[StrictStr] = Field(default=None, description="Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}", alias="backupEngineState")
    backup_engine_type: Optional[StrictStr] = Field(default=None, description="Type of the backup engine.", alias="backupEngineType")
    backup_management_type: Optional[StrictStr] = Field(default=None, description="Type of backup management for the backup engine.", alias="backupManagementType")
    can_re_register: Optional[StrictBool] = Field(default=None, description="Flag indicating if the backup engine be registered, once already registered.", alias="canReRegister")
    dpm_version: Optional[StrictStr] = Field(default=None, description="Backup engine version", alias="dpmVersion")
    extended_info: Optional[BackupEngineExtendedInfo] = Field(default=None, alias="extendedInfo")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of the backup engine.", alias="friendlyName")
    health_status: Optional[StrictStr] = Field(default=None, description="Backup status of the backup engine.", alias="healthStatus")
    is_azure_backup_agent_upgrade_available: Optional[StrictBool] = Field(default=None, description="To check if backup agent upgrade available", alias="isAzureBackupAgentUpgradeAvailable")
    is_dpm_upgrade_available: Optional[StrictBool] = Field(default=None, description="To check if backup engine upgrade available", alias="isDpmUpgradeAvailable")
    registration_status: Optional[StrictStr] = Field(default=None, description="Registration status of the backup engine with the Recovery Services Vault.", alias="registrationStatus")
    __properties: ClassVar[List[str]] = ["azureBackupAgentVersion", "backupEngineId", "backupEngineState", "backupEngineType", "backupManagementType", "canReRegister", "dpmVersion", "extendedInfo", "friendlyName", "healthStatus", "isAzureBackupAgentUpgradeAvailable", "isDpmUpgradeAvailable", "registrationStatus"]

    @field_validator('backup_engine_type')
    def backup_engine_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'DpmBackupEngine', 'AzureBackupServerEngine']):
            raise ValueError("must be one of enum values ('Invalid', 'DpmBackupEngine', 'AzureBackupServerEngine')")
        return value

    @field_validator('backup_management_type')
    def backup_management_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer', 'AzureSql', 'AzureStorage', 'AzureWorkload', 'DefaultBackup']):
            raise ValueError("must be one of enum values ('Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer', 'AzureSql', 'AzureStorage', 'AzureWorkload', 'DefaultBackup')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'backupEngineType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AzureBackupServerEngine': 'AzureBackupServerEngine','DpmBackupEngine': 'DpmBackupEngine'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AzureBackupServerEngine, DpmBackupEngine]]:
        """Create an instance of BackupEngineBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extended_info
        if self.extended_info:
            _dict['extendedInfo'] = self.extended_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AzureBackupServerEngine, DpmBackupEngine]]:
        """Create an instance of BackupEngineBase from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AzureBackupServerEngine':
            return import_module("openapi_client.models.azure_backup_server_engine").AzureBackupServerEngine.from_dict(obj)
        if object_type ==  'DpmBackupEngine':
            return import_module("openapi_client.models.dpm_backup_engine").DpmBackupEngine.from_dict(obj)

        raise ValueError("BackupEngineBase failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-06-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job import Job
from openapi_client.models.mab_error_info import MabErrorInfo
from openapi_client.models.mab_job_extended_info import MabJobExtendedInfo
from typing import Optional, Set
from typing_extensions import Self

class MabJob(Job):
    """
    MAB workload-specific job.
    """ # noqa: E501
    actions_info: Optional[List[StrictStr]] = Field(default=None, description="The state/actions applicable on jobs like cancel/retry.", alias="actionsInfo")
    duration: Optional[StrictStr] = Field(default=None, description="Time taken by job to run.")
    error_details: Optional[List[MabErrorInfo]] = Field(default=None, description="The errors.", alias="errorDetails")
    extended_info: Optional[MabJobExtendedInfo] = Field(default=None, alias="extendedInfo")
    mab_server_name: Optional[StrictStr] = Field(default=None, description="Name of server protecting the DS.", alias="mabServerName")
    mab_server_type: Optional[StrictStr] = Field(default=None, description="Server type of MAB container.", alias="mabServerType")
    workload_type: Optional[StrictStr] = Field(default=None, description="Workload type of backup item.", alias="workloadType")
    __properties: ClassVar[List[str]] = ["activityId", "backupManagementType", "endTime", "entityFriendlyName", "jobType", "operation", "startTime", "status"]

    @field_validator('actions_info')
    def actions_info_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Invalid', 'Cancellable', 'Retriable']):
                raise ValueError("each list item must be one of ('Invalid', 'Cancellable', 'Retriable')")
        return value

    @field_validator('mab_server_type')
    def mab_server_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Unknown', 'IaasVMContainer', 'IaasVMServiceContainer', 'DPMContainer', 'AzureBackupServerContainer', 'MABContainer', 'Cluster', 'AzureSqlContainer', 'Windows', 'VCenter', 'VMAppContainer', 'SQLAGWorkLoadContainer', 'StorageContainer', 'GenericContainer']):
            raise ValueError("must be one of enum values ('Invalid', 'Unknown', 'IaasVMContainer', 'IaasVMServiceContainer', 'DPMContainer', 'AzureBackupServerContainer', 'MABContainer', 'Cluster', 'AzureSqlContainer', 'Windows', 'VCenter', 'VMAppContainer', 'SQLAGWorkLoadContainer', 'StorageContainer', 'GenericContainer')")
        return value

    @field_validator('workload_type')
    def workload_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'VM', 'FileFolder', 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'VMwareVM', 'SystemState', 'Client', 'GenericDataSource', 'SQLDataBase', 'AzureFileShare', 'SAPHanaDatabase', 'SAPAseDatabase']):
            raise ValueError("must be one of enum values ('Invalid', 'VM', 'FileFolder', 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'VMwareVM', 'SystemState', 'Client', 'GenericDataSource', 'SQLDataBase', 'AzureFileShare', 'SAPHanaDatabase', 'SAPAseDatabase')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MabJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MabJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityId": obj.get("activityId"),
            "backupManagementType": obj.get("backupManagementType"),
            "endTime": obj.get("endTime"),
            "entityFriendlyName": obj.get("entityFriendlyName"),
            "jobType": obj.get("jobType"),
            "operation": obj.get("operation"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status")
        })
        return _obj



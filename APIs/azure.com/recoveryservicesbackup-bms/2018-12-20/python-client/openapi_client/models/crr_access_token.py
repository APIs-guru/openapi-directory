# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-12-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CrrAccessToken(BaseModel):
    """
    Container level access token for CRR
    """ # noqa: E501
    access_token_string: Optional[StrictStr] = Field(default=None, description="Access token used for authentication", alias="accessTokenString")
    backup_management_type: Optional[StrictStr] = Field(default=None, description="Backup Management Type", alias="backupManagementType")
    container_name: Optional[StrictStr] = Field(default=None, description="Container Unique name", alias="containerName")
    container_type: Optional[StrictStr] = Field(default=None, description="Container Type", alias="containerType")
    coordinator_service_stamp_id: Optional[StrictStr] = Field(default=None, description="CoordinatorServiceStampId to be used by BCM in restore call", alias="coordinatorServiceStampId")
    coordinator_service_stamp_uri: Optional[StrictStr] = Field(default=None, description="CoordinatorServiceStampUri to be used by BCM in restore call", alias="coordinatorServiceStampUri")
    datasource_container_name: Optional[StrictStr] = Field(default=None, description="Datasource Container Unique Name", alias="datasourceContainerName")
    datasource_id: Optional[StrictStr] = Field(default=None, description="Datasource Id", alias="datasourceId")
    datasource_name: Optional[StrictStr] = Field(default=None, description="Datasource Friendly Name", alias="datasourceName")
    datasource_type: Optional[StrictStr] = Field(default=None, description="Datasource Type", alias="datasourceType")
    protection_service_stamp_id: Optional[StrictStr] = Field(default=None, description="ProtectionServiceStampId to be used by BCM in restore call", alias="protectionServiceStampId")
    protection_service_stamp_uri: Optional[StrictStr] = Field(default=None, description="ProtectionServiceStampUri to be used by BCM in restore call", alias="protectionServiceStampUri")
    recovery_point_id: Optional[StrictStr] = Field(default=None, description="Recovery Point Id", alias="recoveryPointId")
    recovery_point_time: Optional[StrictStr] = Field(default=None, description="Recovery Point Time", alias="recoveryPointTime")
    resource_group_name: Optional[StrictStr] = Field(default=None, description="Resource Group name of the source vault", alias="resourceGroupName")
    resource_id: Optional[StrictStr] = Field(default=None, description="Resource Id of the source vault", alias="resourceId")
    resource_name: Optional[StrictStr] = Field(default=None, description="Resource Name of the source vault", alias="resourceName")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription Id of the source vault", alias="subscriptionId")
    token_extended_information: Optional[StrictStr] = Field(default=None, description="Extended Information about the token like FileSpec etc.", alias="tokenExtendedInformation")
    __properties: ClassVar[List[str]] = ["accessTokenString", "backupManagementType", "containerName", "containerType", "coordinatorServiceStampId", "coordinatorServiceStampUri", "datasourceContainerName", "datasourceId", "datasourceName", "datasourceType", "protectionServiceStampId", "protectionServiceStampUri", "recoveryPointId", "recoveryPointTime", "resourceGroupName", "resourceId", "resourceName", "subscriptionId", "tokenExtendedInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrrAccessToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrrAccessToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessTokenString": obj.get("accessTokenString"),
            "backupManagementType": obj.get("backupManagementType"),
            "containerName": obj.get("containerName"),
            "containerType": obj.get("containerType"),
            "coordinatorServiceStampId": obj.get("coordinatorServiceStampId"),
            "coordinatorServiceStampUri": obj.get("coordinatorServiceStampUri"),
            "datasourceContainerName": obj.get("datasourceContainerName"),
            "datasourceId": obj.get("datasourceId"),
            "datasourceName": obj.get("datasourceName"),
            "datasourceType": obj.get("datasourceType"),
            "protectionServiceStampId": obj.get("protectionServiceStampId"),
            "protectionServiceStampUri": obj.get("protectionServiceStampUri"),
            "recoveryPointId": obj.get("recoveryPointId"),
            "recoveryPointTime": obj.get("recoveryPointTime"),
            "resourceGroupName": obj.get("resourceGroupName"),
            "resourceId": obj.get("resourceId"),
            "resourceName": obj.get("resourceName"),
            "subscriptionId": obj.get("subscriptionId"),
            "tokenExtendedInformation": obj.get("tokenExtendedInformation")
        })
        return _obj



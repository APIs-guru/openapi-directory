# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-12-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.azure_iaa_svm_job_task_details import AzureIaaSVMJobTaskDetails
from typing import Optional, Set
from typing_extensions import Self

class AzureIaaSVMJobExtendedInfo(BaseModel):
    """
    Azure IaaS VM workload-specific additional information for job.
    """ # noqa: E501
    dynamic_error_message: Optional[StrictStr] = Field(default=None, description="Non localized error message on job execution.", alias="dynamicErrorMessage")
    estimated_remaining_duration: Optional[StrictStr] = Field(default=None, description="Time remaining for execution of this job.", alias="estimatedRemainingDuration")
    internal_property_bag: Optional[Dict[str, StrictStr]] = Field(default=None, description="Job internal properties.", alias="internalPropertyBag")
    progress_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Indicates progress of the job. Null if it has not started or completed.", alias="progressPercentage")
    property_bag: Optional[Dict[str, StrictStr]] = Field(default=None, description="Job properties.", alias="propertyBag")
    tasks_list: Optional[List[AzureIaaSVMJobTaskDetails]] = Field(default=None, description="List of tasks associated with this job.", alias="tasksList")
    __properties: ClassVar[List[str]] = ["dynamicErrorMessage", "estimatedRemainingDuration", "internalPropertyBag", "progressPercentage", "propertyBag", "tasksList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureIaaSVMJobExtendedInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tasks_list (list)
        _items = []
        if self.tasks_list:
            for _item_tasks_list in self.tasks_list:
                if _item_tasks_list:
                    _items.append(_item_tasks_list.to_dict())
            _dict['tasksList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureIaaSVMJobExtendedInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dynamicErrorMessage": obj.get("dynamicErrorMessage"),
            "estimatedRemainingDuration": obj.get("estimatedRemainingDuration"),
            "internalPropertyBag": obj.get("internalPropertyBag"),
            "progressPercentage": obj.get("progressPercentage"),
            "propertyBag": obj.get("propertyBag"),
            "tasksList": [AzureIaaSVMJobTaskDetails.from_dict(_item) for _item in obj["tasksList"]] if obj.get("tasksList") is not None else None
        })
        return _obj



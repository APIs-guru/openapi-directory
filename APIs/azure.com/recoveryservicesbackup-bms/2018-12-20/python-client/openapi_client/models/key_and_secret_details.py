# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-12-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bek_details import BEKDetails
from openapi_client.models.kek_details import KEKDetails
from typing import Optional, Set
from typing_extensions import Self

class KeyAndSecretDetails(BaseModel):
    """
    BEK is bitlocker key.  KEK is encryption key for BEK  If the VM was encrypted then we will store following details :  1. Secret(BEK) - Url + Backup Data + vaultId.  2. Key(KEK) - Url + Backup Data + vaultId.  3. EncryptionMechanism  BEK and KEK can potentially have different vault ids.
    """ # noqa: E501
    bek_details: Optional[BEKDetails] = Field(default=None, alias="bekDetails")
    encryption_mechanism: Optional[StrictStr] = Field(default=None, description="Encryption mechanism: None/ SinglePass/ DoublePass", alias="encryptionMechanism")
    kek_details: Optional[KEKDetails] = Field(default=None, alias="kekDetails")
    __properties: ClassVar[List[str]] = ["bekDetails", "encryptionMechanism", "kekDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyAndSecretDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bek_details
        if self.bek_details:
            _dict['bekDetails'] = self.bek_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kek_details
        if self.kek_details:
            _dict['kekDetails'] = self.kek_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyAndSecretDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bekDetails": BEKDetails.from_dict(obj["bekDetails"]) if obj.get("bekDetails") is not None else None,
            "encryptionMechanism": obj.get("encryptionMechanism"),
            "kekDetails": KEKDetails.from_dict(obj["kekDetails"]) if obj.get("kekDetails") is not None else None
        })
        return _obj



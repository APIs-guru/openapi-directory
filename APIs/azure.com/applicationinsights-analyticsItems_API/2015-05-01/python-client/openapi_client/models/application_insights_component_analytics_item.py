# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for saved items.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_insights_component_analytics_item_properties import ApplicationInsightsComponentAnalyticsItemProperties
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInsightsComponentAnalyticsItem(BaseModel):
    """
    Properties that define an Analytics item that is associated to an Application Insights component.
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default=None, description="The content of this item", alias="Content")
    id: Optional[StrictStr] = Field(default=None, description="Internally assigned unique id of the item definition.", alias="Id")
    name: Optional[StrictStr] = Field(default=None, description="The user-defined name of the item.", alias="Name")
    properties: Optional[ApplicationInsightsComponentAnalyticsItemProperties] = Field(default=None, alias="Properties")
    scope: Optional[StrictStr] = Field(default=None, description="Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component.", alias="Scope")
    time_created: Optional[StrictStr] = Field(default=None, description="Date and time in UTC when this item was created.", alias="TimeCreated")
    time_modified: Optional[StrictStr] = Field(default=None, description="Date and time in UTC of the last modification that was made to this item.", alias="TimeModified")
    type: Optional[StrictStr] = Field(default=None, description="Enum indicating the type of the Analytics item.", alias="Type")
    version: Optional[StrictStr] = Field(default=None, description="This instance's version of the data model. This can change as new features are added.", alias="Version")
    __properties: ClassVar[List[str]] = ["Content", "Id", "Name", "Properties", "Scope", "TimeCreated", "TimeModified", "Type", "Version"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['shared', 'user']):
            raise ValueError("must be one of enum values ('shared', 'user')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['query', 'function', 'folder', 'recent']):
            raise ValueError("must be one of enum values ('query', 'function', 'folder', 'recent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentAnalyticsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "time_created",
            "time_modified",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['Properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentAnalyticsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Content": obj.get("Content"),
            "Id": obj.get("Id"),
            "Name": obj.get("Name"),
            "Properties": ApplicationInsightsComponentAnalyticsItemProperties.from_dict(obj["Properties"]) if obj.get("Properties") is not None else None,
            "Scope": obj.get("Scope"),
            "TimeCreated": obj.get("TimeCreated"),
            "TimeModified": obj.get("TimeModified"),
            "Type": obj.get("Type"),
            "Version": obj.get("Version")
        })
        return _obj



# coding: utf-8

"""
    NetworkExperiments

    These are the Network Experiment APIs. 

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.latency_scorecard import LatencyScorecard
from openapi_client.models.timeseries import Timeseries

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ReportsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def reports_get_latency_scorecards(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=80, description="Name of the Resource group within the Azure subscription.")],
        profile_name: Annotated[str, Field(strict=True, description="The Profile identifier associated with the Tenant and Partner")],
        experiment_name: Annotated[str, Field(strict=True, description="The Experiment identifier associated with the Experiment")],
        aggregation_interval: Annotated[StrictStr, Field(description="The aggregation interval of the Latency Scorecard")],
        end_date_time_utc: Annotated[Optional[StrictStr], Field(description="The end DateTime of the Latency Scorecard in UTC")] = None,
        country: Annotated[Optional[StrictStr], Field(description="The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LatencyScorecard:
        """Gets a Latency Scorecard for a given Experiment


        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param profile_name: The Profile identifier associated with the Tenant and Partner (required)
        :type profile_name: str
        :param experiment_name: The Experiment identifier associated with the Experiment (required)
        :type experiment_name: str
        :param aggregation_interval: The aggregation interval of the Latency Scorecard (required)
        :type aggregation_interval: str
        :param end_date_time_utc: The end DateTime of the Latency Scorecard in UTC
        :type end_date_time_utc: str
        :param country: The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reports_get_latency_scorecards_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            profile_name=profile_name,
            experiment_name=experiment_name,
            aggregation_interval=aggregation_interval,
            end_date_time_utc=end_date_time_utc,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LatencyScorecard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reports_get_latency_scorecards_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=80, description="Name of the Resource group within the Azure subscription.")],
        profile_name: Annotated[str, Field(strict=True, description="The Profile identifier associated with the Tenant and Partner")],
        experiment_name: Annotated[str, Field(strict=True, description="The Experiment identifier associated with the Experiment")],
        aggregation_interval: Annotated[StrictStr, Field(description="The aggregation interval of the Latency Scorecard")],
        end_date_time_utc: Annotated[Optional[StrictStr], Field(description="The end DateTime of the Latency Scorecard in UTC")] = None,
        country: Annotated[Optional[StrictStr], Field(description="The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LatencyScorecard]:
        """Gets a Latency Scorecard for a given Experiment


        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param profile_name: The Profile identifier associated with the Tenant and Partner (required)
        :type profile_name: str
        :param experiment_name: The Experiment identifier associated with the Experiment (required)
        :type experiment_name: str
        :param aggregation_interval: The aggregation interval of the Latency Scorecard (required)
        :type aggregation_interval: str
        :param end_date_time_utc: The end DateTime of the Latency Scorecard in UTC
        :type end_date_time_utc: str
        :param country: The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reports_get_latency_scorecards_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            profile_name=profile_name,
            experiment_name=experiment_name,
            aggregation_interval=aggregation_interval,
            end_date_time_utc=end_date_time_utc,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LatencyScorecard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reports_get_latency_scorecards_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=80, description="Name of the Resource group within the Azure subscription.")],
        profile_name: Annotated[str, Field(strict=True, description="The Profile identifier associated with the Tenant and Partner")],
        experiment_name: Annotated[str, Field(strict=True, description="The Experiment identifier associated with the Experiment")],
        aggregation_interval: Annotated[StrictStr, Field(description="The aggregation interval of the Latency Scorecard")],
        end_date_time_utc: Annotated[Optional[StrictStr], Field(description="The end DateTime of the Latency Scorecard in UTC")] = None,
        country: Annotated[Optional[StrictStr], Field(description="The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a Latency Scorecard for a given Experiment


        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param profile_name: The Profile identifier associated with the Tenant and Partner (required)
        :type profile_name: str
        :param experiment_name: The Experiment identifier associated with the Experiment (required)
        :type experiment_name: str
        :param aggregation_interval: The aggregation interval of the Latency Scorecard (required)
        :type aggregation_interval: str
        :param end_date_time_utc: The end DateTime of the Latency Scorecard in UTC
        :type end_date_time_utc: str
        :param country: The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reports_get_latency_scorecards_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            profile_name=profile_name,
            experiment_name=experiment_name,
            aggregation_interval=aggregation_interval,
            end_date_time_utc=end_date_time_utc,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LatencyScorecard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _reports_get_latency_scorecards_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        profile_name,
        experiment_name,
        aggregation_interval,
        end_date_time_utc,
        country,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if profile_name is not None:
            _path_params['profileName'] = profile_name
        if experiment_name is not None:
            _path_params['experimentName'] = experiment_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if end_date_time_utc is not None:
            
            _query_params.append(('endDateTimeUTC', end_date_time_utc))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if aggregation_interval is not None:
            
            _query_params.append(('aggregationInterval', aggregation_interval))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/LatencyScorecard',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def reports_get_timeseries(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=80, description="Name of the Resource group within the Azure subscription.")],
        profile_name: Annotated[str, Field(strict=True, description="The Profile identifier associated with the Tenant and Partner")],
        experiment_name: Annotated[str, Field(strict=True, description="The Experiment identifier associated with the Experiment")],
        start_date_time_utc: Annotated[datetime, Field(description="The start DateTime of the Timeseries in UTC")],
        end_date_time_utc: Annotated[datetime, Field(description="The end DateTime of the Timeseries in UTC")],
        aggregation_interval: Annotated[StrictStr, Field(description="The aggregation interval of the Timeseries")],
        timeseries_type: Annotated[StrictStr, Field(description="The type of Timeseries")],
        endpoint: Annotated[Optional[StrictStr], Field(description="The specific endpoint")] = None,
        country: Annotated[Optional[StrictStr], Field(description="The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Timeseries:
        """Gets a Timeseries for a given Experiment


        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param profile_name: The Profile identifier associated with the Tenant and Partner (required)
        :type profile_name: str
        :param experiment_name: The Experiment identifier associated with the Experiment (required)
        :type experiment_name: str
        :param start_date_time_utc: The start DateTime of the Timeseries in UTC (required)
        :type start_date_time_utc: datetime
        :param end_date_time_utc: The end DateTime of the Timeseries in UTC (required)
        :type end_date_time_utc: datetime
        :param aggregation_interval: The aggregation interval of the Timeseries (required)
        :type aggregation_interval: str
        :param timeseries_type: The type of Timeseries (required)
        :type timeseries_type: str
        :param endpoint: The specific endpoint
        :type endpoint: str
        :param country: The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reports_get_timeseries_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            profile_name=profile_name,
            experiment_name=experiment_name,
            start_date_time_utc=start_date_time_utc,
            end_date_time_utc=end_date_time_utc,
            aggregation_interval=aggregation_interval,
            timeseries_type=timeseries_type,
            endpoint=endpoint,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Timeseries",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reports_get_timeseries_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=80, description="Name of the Resource group within the Azure subscription.")],
        profile_name: Annotated[str, Field(strict=True, description="The Profile identifier associated with the Tenant and Partner")],
        experiment_name: Annotated[str, Field(strict=True, description="The Experiment identifier associated with the Experiment")],
        start_date_time_utc: Annotated[datetime, Field(description="The start DateTime of the Timeseries in UTC")],
        end_date_time_utc: Annotated[datetime, Field(description="The end DateTime of the Timeseries in UTC")],
        aggregation_interval: Annotated[StrictStr, Field(description="The aggregation interval of the Timeseries")],
        timeseries_type: Annotated[StrictStr, Field(description="The type of Timeseries")],
        endpoint: Annotated[Optional[StrictStr], Field(description="The specific endpoint")] = None,
        country: Annotated[Optional[StrictStr], Field(description="The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Timeseries]:
        """Gets a Timeseries for a given Experiment


        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param profile_name: The Profile identifier associated with the Tenant and Partner (required)
        :type profile_name: str
        :param experiment_name: The Experiment identifier associated with the Experiment (required)
        :type experiment_name: str
        :param start_date_time_utc: The start DateTime of the Timeseries in UTC (required)
        :type start_date_time_utc: datetime
        :param end_date_time_utc: The end DateTime of the Timeseries in UTC (required)
        :type end_date_time_utc: datetime
        :param aggregation_interval: The aggregation interval of the Timeseries (required)
        :type aggregation_interval: str
        :param timeseries_type: The type of Timeseries (required)
        :type timeseries_type: str
        :param endpoint: The specific endpoint
        :type endpoint: str
        :param country: The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reports_get_timeseries_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            profile_name=profile_name,
            experiment_name=experiment_name,
            start_date_time_utc=start_date_time_utc,
            end_date_time_utc=end_date_time_utc,
            aggregation_interval=aggregation_interval,
            timeseries_type=timeseries_type,
            endpoint=endpoint,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Timeseries",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reports_get_timeseries_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=80, description="Name of the Resource group within the Azure subscription.")],
        profile_name: Annotated[str, Field(strict=True, description="The Profile identifier associated with the Tenant and Partner")],
        experiment_name: Annotated[str, Field(strict=True, description="The Experiment identifier associated with the Experiment")],
        start_date_time_utc: Annotated[datetime, Field(description="The start DateTime of the Timeseries in UTC")],
        end_date_time_utc: Annotated[datetime, Field(description="The end DateTime of the Timeseries in UTC")],
        aggregation_interval: Annotated[StrictStr, Field(description="The aggregation interval of the Timeseries")],
        timeseries_type: Annotated[StrictStr, Field(description="The type of Timeseries")],
        endpoint: Annotated[Optional[StrictStr], Field(description="The specific endpoint")] = None,
        country: Annotated[Optional[StrictStr], Field(description="The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a Timeseries for a given Experiment


        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param profile_name: The Profile identifier associated with the Tenant and Partner (required)
        :type profile_name: str
        :param experiment_name: The Experiment identifier associated with the Experiment (required)
        :type experiment_name: str
        :param start_date_time_utc: The start DateTime of the Timeseries in UTC (required)
        :type start_date_time_utc: datetime
        :param end_date_time_utc: The end DateTime of the Timeseries in UTC (required)
        :type end_date_time_utc: datetime
        :param aggregation_interval: The aggregation interval of the Timeseries (required)
        :type aggregation_interval: str
        :param timeseries_type: The type of Timeseries (required)
        :type timeseries_type: str
        :param endpoint: The specific endpoint
        :type endpoint: str
        :param country: The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
        :type country: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reports_get_timeseries_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            profile_name=profile_name,
            experiment_name=experiment_name,
            start_date_time_utc=start_date_time_utc,
            end_date_time_utc=end_date_time_utc,
            aggregation_interval=aggregation_interval,
            timeseries_type=timeseries_type,
            endpoint=endpoint,
            country=country,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Timeseries",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _reports_get_timeseries_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        profile_name,
        experiment_name,
        start_date_time_utc,
        end_date_time_utc,
        aggregation_interval,
        timeseries_type,
        endpoint,
        country,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if profile_name is not None:
            _path_params['profileName'] = profile_name
        if experiment_name is not None:
            _path_params['experimentName'] = experiment_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_date_time_utc is not None:
            if isinstance(start_date_time_utc, datetime):
                _query_params.append(
                    (
                        'startDateTimeUTC',
                        start_date_time_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDateTimeUTC', start_date_time_utc))
            
        if end_date_time_utc is not None:
            if isinstance(end_date_time_utc, datetime):
                _query_params.append(
                    (
                        'endDateTimeUTC',
                        end_date_time_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDateTimeUTC', end_date_time_utc))
            
        if aggregation_interval is not None:
            
            _query_params.append(('aggregationInterval', aggregation_interval))
            
        if timeseries_type is not None:
            
            _query_params.append(('timeseriesType', timeseries_type))
            
        if endpoint is not None:
            
            _query_params.append(('endpoint', endpoint))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/Timeseries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



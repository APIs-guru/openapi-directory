# coding: utf-8

"""
    NetworkExperiments

    These are the Network Experiment APIs. 

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.latency_metric import LatencyMetric
from typing import Optional, Set
from typing_extensions import Self

class LatencyScorecardProperties(BaseModel):
    """
    Defines a the properties of a Latency Scorecard
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Latency Scorecard")
    end_date_time_utc: Optional[datetime] = Field(default=None, description="The end time of the Latency Scorecard in UTC", alias="endDateTimeUTC")
    endpoint_a: Optional[StrictStr] = Field(default=None, description="The A endpoint in the scorecard", alias="endpointA")
    endpoint_b: Optional[StrictStr] = Field(default=None, description="The B endpoint in the scorecard", alias="endpointB")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the Latency Scorecard")
    latency_metrics: Optional[List[LatencyMetric]] = Field(default=None, description="The latency metrics of the Latency Scorecard", alias="latencyMetrics")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Latency Scorecard")
    start_date_time_utc: Optional[datetime] = Field(default=None, description="The start time of the Latency Scorecard in UTC", alias="startDateTimeUTC")
    __properties: ClassVar[List[str]] = ["country", "description", "endDateTimeUTC", "endpointA", "endpointB", "id", "latencyMetrics", "name", "startDateTimeUTC"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LatencyScorecardProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "country",
            "description",
            "end_date_time_utc",
            "endpoint_a",
            "endpoint_b",
            "id",
            "name",
            "start_date_time_utc",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in latency_metrics (list)
        _items = []
        if self.latency_metrics:
            for _item_latency_metrics in self.latency_metrics:
                if _item_latency_metrics:
                    _items.append(_item_latency_metrics.to_dict())
            _dict['latencyMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LatencyScorecardProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "description": obj.get("description"),
            "endDateTimeUTC": obj.get("endDateTimeUTC"),
            "endpointA": obj.get("endpointA"),
            "endpointB": obj.get("endpointB"),
            "id": obj.get("id"),
            "latencyMetrics": [LatencyMetric.from_dict(_item) for _item in obj["latencyMetrics"]] if obj.get("latencyMetrics") is not None else None,
            "name": obj.get("name"),
            "startDateTimeUTC": obj.get("startDateTimeUTC")
        })
        return _obj



# coding: utf-8

"""
    NetworkExperiments

    These are the Network Experiment APIs. 

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LatencyMetric(BaseModel):
    """
    Defines the properties of a latency metric used in the latency scorecard
    """ # noqa: E501
    a_c_lower95_ci: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lower end of the 95% confidence interval for endpoint A", alias="aCLower95CI")
    a_h_upper95_ci: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The upper end of the 95% confidence interval for endpoint A", alias="aHUpper95CI")
    a_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The metric value of the A endpoint", alias="aValue")
    b_c_lower95_ci: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lower end of the 95% confidence interval for endpoint B", alias="bCLower95CI")
    b_upper95_ci: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The upper end of the 95% confidence interval for endpoint B", alias="bUpper95CI")
    b_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The metric value of the B endpoint", alias="bValue")
    delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The difference in value between endpoint A and B")
    delta_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percent difference between endpoint A and B", alias="deltaPercent")
    end_date_time_utc: Optional[StrictStr] = Field(default=None, description="The end time of the Latency Scorecard in UTC", alias="endDateTimeUTC")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Latency Metric")
    __properties: ClassVar[List[str]] = ["aCLower95CI", "aHUpper95CI", "aValue", "bCLower95CI", "bUpper95CI", "bValue", "delta", "deltaPercent", "endDateTimeUTC", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LatencyMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "a_c_lower95_ci",
            "a_h_upper95_ci",
            "a_value",
            "b_c_lower95_ci",
            "b_upper95_ci",
            "b_value",
            "delta",
            "delta_percent",
            "end_date_time_utc",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LatencyMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aCLower95CI": obj.get("aCLower95CI"),
            "aHUpper95CI": obj.get("aHUpper95CI"),
            "aValue": obj.get("aValue"),
            "bCLower95CI": obj.get("bCLower95CI"),
            "bUpper95CI": obj.get("bUpper95CI"),
            "bValue": obj.get("bValue"),
            "delta": obj.get("delta"),
            "deltaPercent": obj.get("deltaPercent"),
            "endDateTimeUTC": obj.get("endDateTimeUTC"),
            "name": obj.get("name")
        })
        return _obj



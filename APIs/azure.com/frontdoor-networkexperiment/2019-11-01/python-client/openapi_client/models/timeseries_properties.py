# coding: utf-8

"""
    NetworkExperiments

    These are the Network Experiment APIs. 

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.timeseries_data_point import TimeseriesDataPoint
from typing import Optional, Set
from typing_extensions import Self

class TimeseriesProperties(BaseModel):
    """
    Defines the properties of a timeseries
    """ # noqa: E501
    aggregation_interval: Optional[StrictStr] = Field(default=None, description="The aggregation interval of the Timeseries", alias="aggregationInterval")
    country: Optional[StrictStr] = Field(default=None, description="The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html")
    end_date_time_utc: Optional[StrictStr] = Field(default=None, description="The end DateTime of the Timeseries in UTC", alias="endDateTimeUTC")
    endpoint: Optional[StrictStr] = Field(default=None, description="The endpoint associated with the Timeseries data point")
    start_date_time_utc: Optional[StrictStr] = Field(default=None, description="The start DateTime of the Timeseries in UTC", alias="startDateTimeUTC")
    timeseries_data: Optional[List[TimeseriesDataPoint]] = Field(default=None, description="The set of data points for the timeseries", alias="timeseriesData")
    timeseries_type: Optional[StrictStr] = Field(default=None, description="The type of Timeseries", alias="timeseriesType")
    __properties: ClassVar[List[str]] = ["aggregationInterval", "country", "endDateTimeUTC", "endpoint", "startDateTimeUTC", "timeseriesData", "timeseriesType"]

    @field_validator('aggregation_interval')
    def aggregation_interval_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Hourly', 'Daily']):
            raise ValueError("must be one of enum values ('Hourly', 'Daily')")
        return value

    @field_validator('timeseries_type')
    def timeseries_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MeasurementCounts', 'LatencyP50', 'LatencyP75', 'LatencyP95']):
            raise ValueError("must be one of enum values ('MeasurementCounts', 'LatencyP50', 'LatencyP75', 'LatencyP95')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeseriesProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in timeseries_data (list)
        _items = []
        if self.timeseries_data:
            for _item_timeseries_data in self.timeseries_data:
                if _item_timeseries_data:
                    _items.append(_item_timeseries_data.to_dict())
            _dict['timeseriesData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeseriesProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationInterval": obj.get("aggregationInterval"),
            "country": obj.get("country"),
            "endDateTimeUTC": obj.get("endDateTimeUTC"),
            "endpoint": obj.get("endpoint"),
            "startDateTimeUTC": obj.get("startDateTimeUTC"),
            "timeseriesData": [TimeseriesDataPoint.from_dict(_item) for _item in obj["timeseriesData"]] if obj.get("timeseriesData") is not None else None,
            "timeseriesType": obj.get("timeseriesType")
        })
        return _obj



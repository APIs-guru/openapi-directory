# coding: utf-8

"""
    ServiceBusManagementClient

    Azure Service Bus client

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_availability_status import EntityAvailabilityStatus
from openapi_client.models.entity_status import EntityStatus
from openapi_client.models.message_count_details import MessageCountDetails
from typing import Optional, Set
from typing_extensions import Self

class QueueProperties(BaseModel):
    """
    The Queue Properties definition.
    """ # noqa: E501
    accessed_at: Optional[datetime] = Field(default=None, description="Last time a message was sent, or the last time there was a receive request to this queue.", alias="accessedAt")
    auto_delete_on_idle: Optional[StrictStr] = Field(default=None, description="the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.", alias="autoDeleteOnIdle")
    count_details: Optional[MessageCountDetails] = Field(default=None, alias="countDetails")
    created_at: Optional[datetime] = Field(default=None, description="The exact time the message was created.", alias="createdAt")
    dead_lettering_on_message_expiration: Optional[StrictBool] = Field(default=None, description="A value that indicates whether this queue has dead letter support when a message expires.", alias="deadLetteringOnMessageExpiration")
    default_message_time_to_live: Optional[StrictStr] = Field(default=None, description="The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.", alias="defaultMessageTimeToLive")
    duplicate_detection_history_time_window: Optional[StrictStr] = Field(default=None, description="TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.", alias="duplicateDetectionHistoryTimeWindow")
    enable_batched_operations: Optional[StrictBool] = Field(default=None, description="A value that indicates whether server-side batched operations are enabled.", alias="enableBatchedOperations")
    enable_express: Optional[StrictBool] = Field(default=None, description="A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.", alias="enableExpress")
    enable_partitioning: Optional[StrictBool] = Field(default=None, description="A value that indicates whether the queue is to be partitioned across multiple message brokers.", alias="enablePartitioning")
    entity_availability_status: Optional[EntityAvailabilityStatus] = Field(default=None, alias="entityAvailabilityStatus")
    is_anonymous_accessible: Optional[StrictBool] = Field(default=None, description="A value that indicates whether the message is accessible anonymously.", alias="isAnonymousAccessible")
    lock_duration: Optional[StrictStr] = Field(default=None, description="The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.", alias="lockDuration")
    max_delivery_count: Optional[StrictInt] = Field(default=None, description="The maximum delivery count. A message is automatically deadlettered after this number of deliveries.", alias="maxDeliveryCount")
    max_size_in_megabytes: Optional[StrictInt] = Field(default=None, description="The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.", alias="maxSizeInMegabytes")
    message_count: Optional[StrictInt] = Field(default=None, description="The number of messages in the queue.", alias="messageCount")
    requires_duplicate_detection: Optional[StrictBool] = Field(default=None, description="A value indicating if this queue requires duplicate detection.", alias="requiresDuplicateDetection")
    requires_session: Optional[StrictBool] = Field(default=None, description="A value that indicates whether the queue supports the concept of sessions.", alias="requiresSession")
    size_in_bytes: Optional[StrictInt] = Field(default=None, description="The size of the queue, in bytes.", alias="sizeInBytes")
    status: Optional[EntityStatus] = None
    support_ordering: Optional[StrictBool] = Field(default=None, description="A value that indicates whether the queue supports ordering.", alias="supportOrdering")
    updated_at: Optional[datetime] = Field(default=None, description="The exact time the message was updated.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["accessedAt", "autoDeleteOnIdle", "countDetails", "createdAt", "deadLetteringOnMessageExpiration", "defaultMessageTimeToLive", "duplicateDetectionHistoryTimeWindow", "enableBatchedOperations", "enableExpress", "enablePartitioning", "entityAvailabilityStatus", "isAnonymousAccessible", "lockDuration", "maxDeliveryCount", "maxSizeInMegabytes", "messageCount", "requiresDuplicateDetection", "requiresSession", "sizeInBytes", "status", "supportOrdering", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueueProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "accessed_at",
            "created_at",
            "message_count",
            "size_in_bytes",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of count_details
        if self.count_details:
            _dict['countDetails'] = self.count_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueueProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessedAt": obj.get("accessedAt"),
            "autoDeleteOnIdle": obj.get("autoDeleteOnIdle"),
            "countDetails": MessageCountDetails.from_dict(obj["countDetails"]) if obj.get("countDetails") is not None else None,
            "createdAt": obj.get("createdAt"),
            "deadLetteringOnMessageExpiration": obj.get("deadLetteringOnMessageExpiration"),
            "defaultMessageTimeToLive": obj.get("defaultMessageTimeToLive"),
            "duplicateDetectionHistoryTimeWindow": obj.get("duplicateDetectionHistoryTimeWindow"),
            "enableBatchedOperations": obj.get("enableBatchedOperations"),
            "enableExpress": obj.get("enableExpress"),
            "enablePartitioning": obj.get("enablePartitioning"),
            "entityAvailabilityStatus": obj.get("entityAvailabilityStatus"),
            "isAnonymousAccessible": obj.get("isAnonymousAccessible"),
            "lockDuration": obj.get("lockDuration"),
            "maxDeliveryCount": obj.get("maxDeliveryCount"),
            "maxSizeInMegabytes": obj.get("maxSizeInMegabytes"),
            "messageCount": obj.get("messageCount"),
            "requiresDuplicateDetection": obj.get("requiresDuplicateDetection"),
            "requiresSession": obj.get("requiresSession"),
            "sizeInBytes": obj.get("sizeInBytes"),
            "status": obj.get("status"),
            "supportOrdering": obj.get("supportOrdering"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



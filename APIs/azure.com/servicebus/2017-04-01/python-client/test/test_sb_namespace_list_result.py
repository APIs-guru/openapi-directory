# coding: utf-8

"""
    ServiceBusManagementClient

    Azure Service Bus client

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sb_namespace_list_result import SBNamespaceListResult

class TestSBNamespaceListResult(unittest.TestCase):
    """SBNamespaceListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SBNamespaceListResult:
        """Test SBNamespaceListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SBNamespaceListResult`
        """
        model = SBNamespaceListResult()
        if include_optional:
            return SBNamespaceListResult(
                next_link = '',
                value = [
                    openapi_client.models.sb_namespace.SBNamespace(
                        properties = openapi_client.models.sb_namespace_properties.SBNamespaceProperties(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            metric_id = '', 
                            provisioning_state = '', 
                            service_bus_endpoint = '', 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        sku = openapi_client.models.sb_sku.SBSku(
                            capacity = 56, 
                            name = 'Basic', 
                            tier = 'Basic', ), )
                    ]
            )
        else:
            return SBNamespaceListResult(
        )
        """

    def testSBNamespaceListResult(self):
        """Test SBNamespaceListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

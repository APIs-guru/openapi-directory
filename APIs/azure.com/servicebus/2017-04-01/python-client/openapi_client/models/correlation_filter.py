# coding: utf-8

"""
    ServiceBusManagementClient

    Azure Service Bus client

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CorrelationFilter(BaseModel):
    """
    Represents the correlation filter expression.
    """ # noqa: E501
    content_type: Optional[StrictStr] = Field(default=None, description="Content type of the message.", alias="contentType")
    correlation_id: Optional[StrictStr] = Field(default=None, description="Identifier of the correlation.", alias="correlationId")
    label: Optional[StrictStr] = Field(default=None, description="Application specific label.")
    message_id: Optional[StrictStr] = Field(default=None, description="Identifier of the message.", alias="messageId")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="dictionary object for custom filters")
    reply_to: Optional[StrictStr] = Field(default=None, description="Address of the queue to reply to.", alias="replyTo")
    reply_to_session_id: Optional[StrictStr] = Field(default=None, description="Session identifier to reply to.", alias="replyToSessionId")
    requires_preprocessing: Optional[StrictBool] = Field(default=True, description="Value that indicates whether the rule action requires preprocessing.", alias="requiresPreprocessing")
    session_id: Optional[StrictStr] = Field(default=None, description="Session identifier.", alias="sessionId")
    to: Optional[StrictStr] = Field(default=None, description="Address to send to.")
    __properties: ClassVar[List[str]] = ["contentType", "correlationId", "label", "messageId", "properties", "replyTo", "replyToSessionId", "requiresPreprocessing", "sessionId", "to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CorrelationFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CorrelationFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentType": obj.get("contentType"),
            "correlationId": obj.get("correlationId"),
            "label": obj.get("label"),
            "messageId": obj.get("messageId"),
            "properties": obj.get("properties"),
            "replyTo": obj.get("replyTo"),
            "replyToSessionId": obj.get("replyToSessionId"),
            "requiresPreprocessing": obj.get("requiresPreprocessing") if obj.get("requiresPreprocessing") is not None else True,
            "sessionId": obj.get("sessionId"),
            "to": obj.get("to")
        })
        return _obj



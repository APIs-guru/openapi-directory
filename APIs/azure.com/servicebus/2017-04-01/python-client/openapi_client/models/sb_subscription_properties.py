# coding: utf-8

"""
    ServiceBusManagementClient

    Azure Service Bus client

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_status import EntityStatus
from openapi_client.models.message_count_details import MessageCountDetails
from typing import Optional, Set
from typing_extensions import Self

class SBSubscriptionProperties(BaseModel):
    """
    Description of Subscription Resource.
    """ # noqa: E501
    accessed_at: Optional[datetime] = Field(default=None, description="Last time there was a receive request to this subscription.", alias="accessedAt")
    auto_delete_on_idle: Optional[StrictStr] = Field(default=None, description="ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.", alias="autoDeleteOnIdle")
    count_details: Optional[MessageCountDetails] = Field(default=None, alias="countDetails")
    created_at: Optional[datetime] = Field(default=None, description="Exact time the message was created.", alias="createdAt")
    dead_lettering_on_filter_evaluation_exceptions: Optional[StrictBool] = Field(default=None, description="Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.", alias="deadLetteringOnFilterEvaluationExceptions")
    dead_lettering_on_message_expiration: Optional[StrictBool] = Field(default=None, description="Value that indicates whether a subscription has dead letter support when a message expires.", alias="deadLetteringOnMessageExpiration")
    default_message_time_to_live: Optional[StrictStr] = Field(default=None, description="ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.", alias="defaultMessageTimeToLive")
    duplicate_detection_history_time_window: Optional[StrictStr] = Field(default=None, description="ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.", alias="duplicateDetectionHistoryTimeWindow")
    enable_batched_operations: Optional[StrictBool] = Field(default=None, description="Value that indicates whether server-side batched operations are enabled.", alias="enableBatchedOperations")
    forward_dead_lettered_messages_to: Optional[StrictStr] = Field(default=None, description="Queue/Topic name to forward the Dead Letter message", alias="forwardDeadLetteredMessagesTo")
    forward_to: Optional[StrictStr] = Field(default=None, description="Queue/Topic name to forward the messages", alias="forwardTo")
    lock_duration: Optional[StrictStr] = Field(default=None, description="ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.", alias="lockDuration")
    max_delivery_count: Optional[StrictInt] = Field(default=None, description="Number of maximum deliveries.", alias="maxDeliveryCount")
    message_count: Optional[StrictInt] = Field(default=None, description="Number of messages.", alias="messageCount")
    requires_session: Optional[StrictBool] = Field(default=None, description="Value indicating if a subscription supports the concept of sessions.", alias="requiresSession")
    status: Optional[EntityStatus] = None
    updated_at: Optional[datetime] = Field(default=None, description="The exact time the message was updated.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["accessedAt", "autoDeleteOnIdle", "countDetails", "createdAt", "deadLetteringOnFilterEvaluationExceptions", "deadLetteringOnMessageExpiration", "defaultMessageTimeToLive", "duplicateDetectionHistoryTimeWindow", "enableBatchedOperations", "forwardDeadLetteredMessagesTo", "forwardTo", "lockDuration", "maxDeliveryCount", "messageCount", "requiresSession", "status", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SBSubscriptionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "accessed_at",
            "created_at",
            "message_count",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of count_details
        if self.count_details:
            _dict['countDetails'] = self.count_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SBSubscriptionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessedAt": obj.get("accessedAt"),
            "autoDeleteOnIdle": obj.get("autoDeleteOnIdle"),
            "countDetails": MessageCountDetails.from_dict(obj["countDetails"]) if obj.get("countDetails") is not None else None,
            "createdAt": obj.get("createdAt"),
            "deadLetteringOnFilterEvaluationExceptions": obj.get("deadLetteringOnFilterEvaluationExceptions"),
            "deadLetteringOnMessageExpiration": obj.get("deadLetteringOnMessageExpiration"),
            "defaultMessageTimeToLive": obj.get("defaultMessageTimeToLive"),
            "duplicateDetectionHistoryTimeWindow": obj.get("duplicateDetectionHistoryTimeWindow"),
            "enableBatchedOperations": obj.get("enableBatchedOperations"),
            "forwardDeadLetteredMessagesTo": obj.get("forwardDeadLetteredMessagesTo"),
            "forwardTo": obj.get("forwardTo"),
            "lockDuration": obj.get("lockDuration"),
            "maxDeliveryCount": obj.get("maxDeliveryCount"),
            "messageCount": obj.get("messageCount"),
            "requiresSession": obj.get("requiresSession"),
            "status": obj.get("status"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



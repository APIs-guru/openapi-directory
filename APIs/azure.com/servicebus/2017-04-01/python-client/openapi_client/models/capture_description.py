# coding: utf-8

"""
    ServiceBusManagementClient

    Azure Service Bus client

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.destination import Destination
from typing import Optional, Set
from typing_extensions import Self

class CaptureDescription(BaseModel):
    """
    Properties to configure capture description for eventhub
    """ # noqa: E501
    destination: Optional[Destination] = None
    enabled: Optional[StrictBool] = Field(default=None, description="A value that indicates whether capture description is enabled. ")
    encoding: Optional[StrictStr] = Field(default=None, description="Enumerates the possible values for the encoding format of capture description.")
    interval_in_seconds: Optional[Annotated[int, Field(le=900, strict=True, ge=60)]] = Field(default=None, description="The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds", alias="intervalInSeconds")
    size_limit_in_bytes: Optional[Annotated[int, Field(le=524288000, strict=True, ge=10485760)]] = Field(default=None, description="The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 and 524288000 bytes", alias="sizeLimitInBytes")
    __properties: ClassVar[List[str]] = ["destination", "enabled", "encoding", "intervalInSeconds", "sizeLimitInBytes"]

    @field_validator('encoding')
    def encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Avro', 'AvroDeflate']):
            raise ValueError("must be one of enum values ('Avro', 'AvroDeflate')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CaptureDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CaptureDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destination": Destination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "enabled": obj.get("enabled"),
            "encoding": obj.get("encoding"),
            "intervalInSeconds": obj.get("intervalInSeconds"),
            "sizeLimitInBytes": obj.get("sizeLimitInBytes")
        })
        return _obj



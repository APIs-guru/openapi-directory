# coding: utf-8

"""
    ServiceBusManagementClient

    Azure Service Bus client

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.rule import Rule
from openapi_client.models.sb_subscription import SBSubscription
from openapi_client.models.sb_subscription_list_result import SBSubscriptionListResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SubscriptionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rules_get(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        rule_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The rule name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Rule:
        """rules_get

        Retrieves the description for the specified rule.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param rule_name: The rule name. (required)
        :type rule_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rules_get_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            rule_name=rule_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Rule",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rules_get_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        rule_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The rule name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Rule]:
        """rules_get

        Retrieves the description for the specified rule.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param rule_name: The rule name. (required)
        :type rule_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rules_get_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            rule_name=rule_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Rule",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rules_get_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        rule_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The rule name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """rules_get

        Retrieves the description for the specified rule.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param rule_name: The rule name. (required)
        :type rule_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rules_get_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            rule_name=rule_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Rule",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rules_get_serialize(
        self,
        resource_group_name,
        namespace_name,
        topic_name,
        subscription_name,
        rule_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if topic_name is not None:
            _path_params['topicName'] = topic_name
        if subscription_name is not None:
            _path_params['subscriptionName'] = subscription_name
        if rule_name is not None:
            _path_params['ruleName'] = rule_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscriptions_create_or_update(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[SBSubscription, Field(description="Parameters supplied to create a subscription resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SBSubscription:
        """subscriptions_create_or_update

        Creates a topic subscription.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to create a subscription resource. (required)
        :type parameters: SBSubscription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_create_or_update_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscriptions_create_or_update_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[SBSubscription, Field(description="Parameters supplied to create a subscription resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SBSubscription]:
        """subscriptions_create_or_update

        Creates a topic subscription.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to create a subscription resource. (required)
        :type parameters: SBSubscription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_create_or_update_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscriptions_create_or_update_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[SBSubscription, Field(description="Parameters supplied to create a subscription resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscriptions_create_or_update

        Creates a topic subscription.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to create a subscription resource. (required)
        :type parameters: SBSubscription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_create_or_update_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscriptions_create_or_update_serialize(
        self,
        resource_group_name,
        namespace_name,
        topic_name,
        subscription_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if topic_name is not None:
            _path_params['topicName'] = topic_name
        if subscription_name is not None:
            _path_params['subscriptionName'] = subscription_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscriptions_delete(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """subscriptions_delete

        Deletes a subscription from the specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_delete_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscriptions_delete_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """subscriptions_delete

        Deletes a subscription from the specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_delete_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscriptions_delete_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscriptions_delete

        Deletes a subscription from the specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_delete_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscriptions_delete_serialize(
        self,
        resource_group_name,
        namespace_name,
        topic_name,
        subscription_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if topic_name is not None:
            _path_params['topicName'] = topic_name
        if subscription_name is not None:
            _path_params['subscriptionName'] = subscription_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscriptions_get(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SBSubscription:
        """subscriptions_get

        Returns a subscription description for the specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_get_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscriptions_get_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SBSubscription]:
        """subscriptions_get

        Returns a subscription description for the specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_get_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscriptions_get_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        subscription_name: Annotated[str, Field(min_length=1, strict=True, max_length=50, description="The subscription name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscriptions_get

        Returns a subscription description for the specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param subscription_name: The subscription name. (required)
        :type subscription_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_get_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            subscription_name=subscription_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscriptions_get_serialize(
        self,
        resource_group_name,
        namespace_name,
        topic_name,
        subscription_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if topic_name is not None:
            _path_params['topicName'] = topic_name
        if subscription_name is not None:
            _path_params['subscriptionName'] = subscription_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def subscriptions_list_by_topic(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        skip: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SBSubscriptionListResult:
        """subscriptions_list_by_topic

        List all the subscriptions under a specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param skip: Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
        :type skip: int
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_list_by_topic_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            api_version=api_version,
            subscription_id=subscription_id,
            skip=skip,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscriptionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def subscriptions_list_by_topic_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        skip: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SBSubscriptionListResult]:
        """subscriptions_list_by_topic

        List all the subscriptions under a specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param skip: Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
        :type skip: int
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_list_by_topic_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            api_version=api_version,
            subscription_id=subscription_id,
            skip=skip,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscriptionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def subscriptions_list_by_topic_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of the Resource group within the Azure subscription.")],
        namespace_name: Annotated[str, Field(min_length=6, strict=True, max_length=50, description="The namespace name")],
        topic_name: Annotated[str, Field(min_length=1, strict=True, description="The topic name.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        skip: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="May be used to limit the number of results to the most recent N usageDetails.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """subscriptions_list_by_topic

        List all the subscriptions under a specified topic.

        :param resource_group_name: Name of the Resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param namespace_name: The namespace name (required)
        :type namespace_name: str
        :param topic_name: The topic name. (required)
        :type topic_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param skip: Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
        :type skip: int
        :param top: May be used to limit the number of results to the most recent N usageDetails.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._subscriptions_list_by_topic_serialize(
            resource_group_name=resource_group_name,
            namespace_name=namespace_name,
            topic_name=topic_name,
            api_version=api_version,
            subscription_id=subscription_id,
            skip=skip,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SBSubscriptionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _subscriptions_list_by_topic_serialize(
        self,
        resource_group_name,
        namespace_name,
        topic_name,
        api_version,
        subscription_id,
        skip,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if topic_name is not None:
            _path_params['topicName'] = topic_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



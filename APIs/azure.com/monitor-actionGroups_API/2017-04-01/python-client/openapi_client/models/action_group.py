# coding: utf-8

"""
    Azure Action Groups

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.automation_runbook_receiver import AutomationRunbookReceiver
from openapi_client.models.azure_app_push_receiver import AzureAppPushReceiver
from openapi_client.models.email_receiver import EmailReceiver
from openapi_client.models.itsm_receiver import ItsmReceiver
from openapi_client.models.sms_receiver import SmsReceiver
from openapi_client.models.webhook_receiver import WebhookReceiver
from typing import Optional, Set
from typing_extensions import Self

class ActionGroup(BaseModel):
    """
    An Azure action group.
    """ # noqa: E501
    automation_runbook_receivers: Optional[List[AutomationRunbookReceiver]] = Field(default=None, description="The list of AutomationRunbook receivers that are part of this action group.", alias="automationRunbookReceivers")
    azure_app_push_receivers: Optional[List[AzureAppPushReceiver]] = Field(default=None, description="The list of AzureAppPush receivers that are part of this action group.", alias="azureAppPushReceivers")
    email_receivers: Optional[List[EmailReceiver]] = Field(default=None, description="The list of email receivers that are part of this action group.", alias="emailReceivers")
    enabled: StrictBool = Field(description="Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.")
    group_short_name: Annotated[str, Field(strict=True, max_length=12)] = Field(description="The short name of the action group. This will be used in SMS messages.", alias="groupShortName")
    itsm_receivers: Optional[List[ItsmReceiver]] = Field(default=None, description="The list of ITSM receivers that are part of this action group.", alias="itsmReceivers")
    sms_receivers: Optional[List[SmsReceiver]] = Field(default=None, description="The list of SMS receivers that are part of this action group.", alias="smsReceivers")
    webhook_receivers: Optional[List[WebhookReceiver]] = Field(default=None, description="The list of webhook receivers that are part of this action group.", alias="webhookReceivers")
    __properties: ClassVar[List[str]] = ["automationRunbookReceivers", "azureAppPushReceivers", "emailReceivers", "enabled", "groupShortName", "itsmReceivers", "smsReceivers", "webhookReceivers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in automation_runbook_receivers (list)
        _items = []
        if self.automation_runbook_receivers:
            for _item_automation_runbook_receivers in self.automation_runbook_receivers:
                if _item_automation_runbook_receivers:
                    _items.append(_item_automation_runbook_receivers.to_dict())
            _dict['automationRunbookReceivers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in azure_app_push_receivers (list)
        _items = []
        if self.azure_app_push_receivers:
            for _item_azure_app_push_receivers in self.azure_app_push_receivers:
                if _item_azure_app_push_receivers:
                    _items.append(_item_azure_app_push_receivers.to_dict())
            _dict['azureAppPushReceivers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in email_receivers (list)
        _items = []
        if self.email_receivers:
            for _item_email_receivers in self.email_receivers:
                if _item_email_receivers:
                    _items.append(_item_email_receivers.to_dict())
            _dict['emailReceivers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in itsm_receivers (list)
        _items = []
        if self.itsm_receivers:
            for _item_itsm_receivers in self.itsm_receivers:
                if _item_itsm_receivers:
                    _items.append(_item_itsm_receivers.to_dict())
            _dict['itsmReceivers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sms_receivers (list)
        _items = []
        if self.sms_receivers:
            for _item_sms_receivers in self.sms_receivers:
                if _item_sms_receivers:
                    _items.append(_item_sms_receivers.to_dict())
            _dict['smsReceivers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in webhook_receivers (list)
        _items = []
        if self.webhook_receivers:
            for _item_webhook_receivers in self.webhook_receivers:
                if _item_webhook_receivers:
                    _items.append(_item_webhook_receivers.to_dict())
            _dict['webhookReceivers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automationRunbookReceivers": [AutomationRunbookReceiver.from_dict(_item) for _item in obj["automationRunbookReceivers"]] if obj.get("automationRunbookReceivers") is not None else None,
            "azureAppPushReceivers": [AzureAppPushReceiver.from_dict(_item) for _item in obj["azureAppPushReceivers"]] if obj.get("azureAppPushReceivers") is not None else None,
            "emailReceivers": [EmailReceiver.from_dict(_item) for _item in obj["emailReceivers"]] if obj.get("emailReceivers") is not None else None,
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "groupShortName": obj.get("groupShortName"),
            "itsmReceivers": [ItsmReceiver.from_dict(_item) for _item in obj["itsmReceivers"]] if obj.get("itsmReceivers") is not None else None,
            "smsReceivers": [SmsReceiver.from_dict(_item) for _item in obj["smsReceivers"]] if obj.get("smsReceivers") is not None else None,
            "webhookReceivers": [WebhookReceiver.from_dict(_item) for _item in obj["webhookReceivers"]] if obj.get("webhookReceivers") is not None else None
        })
        return _obj



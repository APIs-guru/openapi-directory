# coding: utf-8

"""
    Azure Action Groups

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ItsmReceiver(BaseModel):
    """
    An Itsm receiver.
    """ # noqa: E501
    connection_id: StrictStr = Field(description="Unique identification of ITSM connection among multiple defined in above workspace.", alias="connectionId")
    name: StrictStr = Field(description="The name of the Itsm receiver. Names must be unique across all receivers within an action group.")
    region: StrictStr = Field(description="Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'")
    ticket_configuration: StrictStr = Field(description="JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.", alias="ticketConfiguration")
    workspace_id: StrictStr = Field(description="OMS LA instance identifier.", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["connectionId", "name", "region", "ticketConfiguration", "workspaceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItsmReceiver from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItsmReceiver from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionId": obj.get("connectionId"),
            "name": obj.get("name"),
            "region": obj.get("region"),
            "ticketConfiguration": obj.get("ticketConfiguration"),
            "workspaceId": obj.get("workspaceId")
        })
        return _obj



# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for getting the network connectivity status of your Azure API Management deployment. When the API Management service is deployed inside a Virtual Network, it needs to have access to other Azure resources it depends on. This also gives details about the DNS Servers visible to Azure API Management deployment.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.connectivity_status_contract import ConnectivityStatusContract
from typing import Optional, Set
from typing_extensions import Self

class NetworkStatusContract(BaseModel):
    """
    Network Status details.
    """ # noqa: E501
    connectivity_status: List[ConnectivityStatusContract] = Field(description="Gets the list of Connectivity Status to the Resources on which the service depends upon.", alias="connectivityStatus")
    dns_servers: List[StrictStr] = Field(description="Gets the list of DNS servers IPV4 addresses.", alias="dnsServers")
    __properties: ClassVar[List[str]] = ["connectivityStatus", "dnsServers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkStatusContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in connectivity_status (list)
        _items = []
        if self.connectivity_status:
            for _item_connectivity_status in self.connectivity_status:
                if _item_connectivity_status:
                    _items.append(_item_connectivity_status.to_dict())
            _dict['connectivityStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkStatusContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectivityStatus": [ConnectivityStatusContract.from_dict(_item) for _item in obj["connectivityStatus"]] if obj.get("connectivityStatus") is not None else None,
            "dnsServers": obj.get("dnsServers")
        })
        return _obj



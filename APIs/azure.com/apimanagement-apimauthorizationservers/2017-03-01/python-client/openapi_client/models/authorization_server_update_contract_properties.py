# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).

    The version of the OpenAPI document: 2017-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.token_body_parameter_contract import TokenBodyParameterContract
from typing import Optional, Set
from typing_extensions import Self

class AuthorizationServerUpdateContractProperties(BaseModel):
    """
    External OAuth authorization server Update settings contract.
    """ # noqa: E501
    authorization_endpoint: Optional[StrictStr] = Field(default=None, description="OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.", alias="authorizationEndpoint")
    client_id: Optional[StrictStr] = Field(default=None, description="Client or app id registered with this authorization server.", alias="clientId")
    client_registration_endpoint: Optional[StrictStr] = Field(default=None, description="Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.", alias="clientRegistrationEndpoint")
    display_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=50)]] = Field(default=None, description="User-friendly authorization server name.", alias="displayName")
    grant_types: Optional[List[StrictStr]] = Field(default=None, description="Form of an authorization grant, which the client uses to request the access token.", alias="grantTypes")
    authorization_methods: Optional[List[StrictStr]] = Field(default=None, description="HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.", alias="authorizationMethods")
    bearer_token_sending_methods: Optional[List[StrictStr]] = Field(default=None, description="Specifies the mechanism by which access token is passed to the API. ", alias="bearerTokenSendingMethods")
    client_authentication_method: Optional[List[StrictStr]] = Field(default=None, description="Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.", alias="clientAuthenticationMethod")
    client_secret: Optional[StrictStr] = Field(default=None, description="Client or app secret registered with this authorization server.", alias="clientSecret")
    default_scope: Optional[StrictStr] = Field(default=None, description="Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.", alias="defaultScope")
    description: Optional[StrictStr] = Field(default=None, description="Description of the authorization server. Can contain HTML formatting tags.")
    resource_owner_password: Optional[StrictStr] = Field(default=None, description="Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.", alias="resourceOwnerPassword")
    resource_owner_username: Optional[StrictStr] = Field(default=None, description="Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.", alias="resourceOwnerUsername")
    support_state: Optional[StrictBool] = Field(default=None, description="If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.", alias="supportState")
    token_body_parameters: Optional[List[TokenBodyParameterContract]] = Field(default=None, description="Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\"name\" : \"name value\", \"value\": \"a value\"}.", alias="tokenBodyParameters")
    token_endpoint: Optional[StrictStr] = Field(default=None, description="OAuth token endpoint. Contains absolute URI to entity being referenced.", alias="tokenEndpoint")
    __properties: ClassVar[List[str]] = ["authorizationMethods", "bearerTokenSendingMethods", "clientAuthenticationMethod", "clientSecret", "defaultScope", "description", "resourceOwnerPassword", "resourceOwnerUsername", "supportState", "tokenBodyParameters", "tokenEndpoint"]

    @field_validator('grant_types')
    def grant_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['authorizationCode', 'implicit', 'resourceOwnerPassword', 'clientCredentials']):
                raise ValueError("each list item must be one of ('authorizationCode', 'implicit', 'resourceOwnerPassword', 'clientCredentials')")
        return value

    @field_validator('authorization_methods')
    def authorization_methods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['HEAD', 'OPTIONS', 'TRACE', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE']):
                raise ValueError("each list item must be one of ('HEAD', 'OPTIONS', 'TRACE', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE')")
        return value

    @field_validator('bearer_token_sending_methods')
    def bearer_token_sending_methods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['authorizationHeader', 'query']):
                raise ValueError("each list item must be one of ('authorizationHeader', 'query')")
        return value

    @field_validator('client_authentication_method')
    def client_authentication_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Basic', 'Body']):
                raise ValueError("each list item must be one of ('Basic', 'Body')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorizationServerUpdateContractProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in token_body_parameters (list)
        _items = []
        if self.token_body_parameters:
            for _item_token_body_parameters in self.token_body_parameters:
                if _item_token_body_parameters:
                    _items.append(_item_token_body_parameters.to_dict())
            _dict['tokenBodyParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorizationServerUpdateContractProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationMethods": obj.get("authorizationMethods"),
            "bearerTokenSendingMethods": obj.get("bearerTokenSendingMethods"),
            "clientAuthenticationMethod": obj.get("clientAuthenticationMethod"),
            "clientSecret": obj.get("clientSecret"),
            "defaultScope": obj.get("defaultScope"),
            "description": obj.get("description"),
            "resourceOwnerPassword": obj.get("resourceOwnerPassword"),
            "resourceOwnerUsername": obj.get("resourceOwnerUsername"),
            "supportState": obj.get("supportState"),
            "tokenBodyParameters": [TokenBodyParameterContract.from_dict(_item) for _item in obj["tokenBodyParameters"]] if obj.get("tokenBodyParameters") is not None else None,
            "tokenEndpoint": obj.get("tokenEndpoint")
        })
        return _obj



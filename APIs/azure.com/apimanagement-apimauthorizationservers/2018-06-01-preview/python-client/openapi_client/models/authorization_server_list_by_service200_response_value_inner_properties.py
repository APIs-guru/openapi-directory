# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AuthorizationServerListByService200ResponseValueInnerProperties(BaseModel):
    """
    External OAuth authorization server settings Properties.
    """ # noqa: E501
    authorization_endpoint: StrictStr = Field(description="OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.", alias="authorizationEndpoint")
    client_id: StrictStr = Field(description="Client or app id registered with this authorization server.", alias="clientId")
    client_registration_endpoint: StrictStr = Field(description="Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.", alias="clientRegistrationEndpoint")
    display_name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="User-friendly authorization server name.", alias="displayName")
    grant_types: List[StrictStr] = Field(description="Form of an authorization grant, which the client uses to request the access token.", alias="grantTypes")
    __properties: ClassVar[List[str]] = ["authorizationEndpoint", "clientId", "clientRegistrationEndpoint", "displayName", "grantTypes"]

    @field_validator('grant_types')
    def grant_types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['authorizationCode', 'implicit', 'resourceOwnerPassword', 'clientCredentials']):
                raise ValueError("each list item must be one of ('authorizationCode', 'implicit', 'resourceOwnerPassword', 'clientCredentials')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorizationServerListByService200ResponseValueInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorizationServerListByService200ResponseValueInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationEndpoint": obj.get("authorizationEndpoint"),
            "clientId": obj.get("clientId"),
            "clientRegistrationEndpoint": obj.get("clientRegistrationEndpoint"),
            "displayName": obj.get("displayName"),
            "grantTypes": obj.get("grantTypes")
        })
        return _obj



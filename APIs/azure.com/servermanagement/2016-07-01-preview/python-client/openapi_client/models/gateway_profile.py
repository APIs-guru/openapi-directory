# coding: utf-8

"""
    ServerManagement

    REST API for Azure Server Management Service.

    The version of the OpenAPI document: 2016-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayProfile(BaseModel):
    """
    JSON properties that the gateway service uses know how to communicate with the resource.
    """ # noqa: E501
    data_plane_service_base_address: Optional[StrictStr] = Field(default=None, description="The Dataplane connection URL.", alias="dataPlaneServiceBaseAddress")
    environment: Optional[StrictStr] = Field(default=None, description="The environment for the gateway (DEV, DogFood, or Production).")
    gateway_id: Optional[StrictStr] = Field(default=None, description="The ID of the gateway.", alias="gatewayId")
    messaging_account: Optional[StrictStr] = Field(default=None, description="Messaging Account.", alias="messagingAccount")
    messaging_key: Optional[StrictStr] = Field(default=None, description="Messaging Key.", alias="messagingKey")
    messaging_namespace: Optional[StrictStr] = Field(default=None, description="Messaging namespace.", alias="messagingNamespace")
    request_queue: Optional[StrictStr] = Field(default=None, description="Request queue name.", alias="requestQueue")
    response_topic: Optional[StrictStr] = Field(default=None, description="Response topic name.", alias="responseTopic")
    status_blob_signature: Optional[StrictStr] = Field(default=None, description="The gateway status blob SAS URL.", alias="statusBlobSignature")
    upgrade_manifest_url: Optional[StrictStr] = Field(default=None, description="Gateway upgrade manifest URL.", alias="upgradeManifestUrl")
    __properties: ClassVar[List[str]] = ["dataPlaneServiceBaseAddress", "environment", "gatewayId", "messagingAccount", "messagingKey", "messagingNamespace", "requestQueue", "responseTopic", "statusBlobSignature", "upgradeManifestUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataPlaneServiceBaseAddress": obj.get("dataPlaneServiceBaseAddress"),
            "environment": obj.get("environment"),
            "gatewayId": obj.get("gatewayId"),
            "messagingAccount": obj.get("messagingAccount"),
            "messagingKey": obj.get("messagingKey"),
            "messagingNamespace": obj.get("messagingNamespace"),
            "requestQueue": obj.get("requestQueue"),
            "responseTopic": obj.get("responseTopic"),
            "statusBlobSignature": obj.get("statusBlobSignature"),
            "upgradeManifestUrl": obj.get("upgradeManifestUrl")
        })
        return _obj



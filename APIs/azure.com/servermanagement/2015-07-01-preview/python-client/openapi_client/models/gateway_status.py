# coding: utf-8

"""
    ServerManagement

    REST API for Azure Server Management Service.

    The version of the OpenAPI document: 2015-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GatewayStatus(BaseModel):
    """
    Expanded gateway status information.
    """ # noqa: E501
    available_memory_m_byte: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The available memory on the gateway host machine in megabytes.", alias="availableMemoryMByte")
    friendly_os_name: Optional[StrictStr] = Field(default=None, description="The Plaintext description of the OS on the gateway.", alias="friendlyOsName")
    gateway_cpu_utilization_percent: Optional[Union[Annotated[float, Field(le=1E+2, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="The CPU utilization of the gateway process (numeric value between 0 and 100).", alias="gatewayCpuUtilizationPercent")
    gateway_id: Optional[StrictStr] = Field(default=None, description="The gateway resource ID.", alias="gatewayId")
    gateway_version: Optional[StrictStr] = Field(default=None, description="The version of the gateway that is installed on the system.", alias="gatewayVersion")
    gateway_working_set_m_byte: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The working set size of the gateway process in megabytes.", alias="gatewayWorkingSetMByte")
    installed_date: Optional[datetime] = Field(default=None, description="The date the gateway was installed.", alias="installedDate")
    logical_processor_count: Optional[StrictInt] = Field(default=None, description="Number of logical processors in the gateway system.", alias="logicalProcessorCount")
    name: Optional[StrictStr] = Field(default=None, description="The computer name of the gateway system.")
    status_updated: Optional[datetime] = Field(default=None, description="UTC date and time when gateway status was last updated.", alias="statusUpdated")
    total_cpu_utilization_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="CPU Utilization of the whole system.", alias="totalCpuUtilizationPercent")
    __properties: ClassVar[List[str]] = ["availableMemoryMByte", "friendlyOsName", "gatewayCpuUtilizationPercent", "gatewayId", "gatewayVersion", "gatewayWorkingSetMByte", "installedDate", "logicalProcessorCount", "name", "statusUpdated", "totalCpuUtilizationPercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableMemoryMByte": obj.get("availableMemoryMByte"),
            "friendlyOsName": obj.get("friendlyOsName"),
            "gatewayCpuUtilizationPercent": obj.get("gatewayCpuUtilizationPercent"),
            "gatewayId": obj.get("gatewayId"),
            "gatewayVersion": obj.get("gatewayVersion"),
            "gatewayWorkingSetMByte": obj.get("gatewayWorkingSetMByte"),
            "installedDate": obj.get("installedDate"),
            "logicalProcessorCount": obj.get("logicalProcessorCount"),
            "name": obj.get("name"),
            "statusUpdated": obj.get("statusUpdated"),
            "totalCpuUtilizationPercent": obj.get("totalCpuUtilizationPercent")
        })
        return _obj



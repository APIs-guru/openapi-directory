# coding: utf-8

"""
    ServerManagement

    REST API for Azure Server Management Service.

    The version of the OpenAPI document: 2015-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.prompt_field_description import PromptFieldDescription
from typing import Optional, Set
from typing_extensions import Self

class PowerShellCommandResult(BaseModel):
    """
    PowerShellCommandResult
    """ # noqa: E501
    background_color: Optional[StrictStr] = Field(default=None, description="The HTML color string representing the background color.", alias="backgroundColor")
    caption: Optional[StrictStr] = Field(default=None, description="Text that precedes the prompt.")
    descriptions: Optional[List[PromptFieldDescription]] = Field(default=None, description="Collection of PromptFieldDescription objects that contains the user input")
    exit_code: Optional[StrictInt] = Field(default=None, description="The exit code from a executable that was called from PowerShell.", alias="exitCode")
    foreground_color: Optional[StrictStr] = Field(default=None, description="The HTML color string representing the foreground color.", alias="foregroundColor")
    id: Optional[StrictInt] = Field(default=None, description="ID of the prompt message.")
    message: Optional[StrictStr] = Field(default=None, description="Text of the prompt.")
    message_type: Optional[StrictInt] = Field(default=None, description="The type of message.", alias="messageType")
    prompt: Optional[StrictStr] = Field(default=None, description="The interactive prompt message.")
    value: Optional[StrictStr] = Field(default=None, description="Actual result text from the PowerShell Command.")
    __properties: ClassVar[List[str]] = ["backgroundColor", "caption", "descriptions", "exitCode", "foregroundColor", "id", "message", "messageType", "prompt", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PowerShellCommandResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in descriptions (list)
        _items = []
        if self.descriptions:
            for _item_descriptions in self.descriptions:
                if _item_descriptions:
                    _items.append(_item_descriptions.to_dict())
            _dict['descriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PowerShellCommandResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": obj.get("backgroundColor"),
            "caption": obj.get("caption"),
            "descriptions": [PromptFieldDescription.from_dict(_item) for _item in obj["descriptions"]] if obj.get("descriptions") is not None else None,
            "exitCode": obj.get("exitCode"),
            "foregroundColor": obj.get("foregroundColor"),
            "id": obj.get("id"),
            "message": obj.get("message"),
            "messageType": obj.get("messageType"),
            "prompt": obj.get("prompt"),
            "value": obj.get("value")
        })
        return _obj



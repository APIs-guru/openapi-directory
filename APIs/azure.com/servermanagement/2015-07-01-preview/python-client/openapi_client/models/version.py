# coding: utf-8

"""
    ServerManagement

    REST API for Azure Server Management Service.

    The version of the OpenAPI document: 2015-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Version(BaseModel):
    """
    A multipart-numeric version number.
    """ # noqa: E501
    build: Optional[StrictInt] = Field(default=None, description="The third number of the version.")
    major: Optional[StrictInt] = Field(default=None, description="The leftmost number of the version.")
    major_revision: Optional[StrictInt] = Field(default=None, description="The MSW of the fourth part.", alias="majorRevision")
    minor: Optional[StrictInt] = Field(default=None, description="The second leftmost number of the version.")
    minor_revision: Optional[StrictInt] = Field(default=None, description="The LSW of the fourth part.", alias="minorRevision")
    revision: Optional[StrictInt] = Field(default=None, description="The fourth number of the version.")
    __properties: ClassVar[List[str]] = ["build", "major", "majorRevision", "minor", "minorRevision", "revision"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build": obj.get("build"),
            "major": obj.get("major"),
            "majorRevision": obj.get("majorRevision"),
            "minor": obj.get("minor"),
            "minorRevision": obj.get("minorRevision"),
            "revision": obj.get("revision")
        })
        return _obj



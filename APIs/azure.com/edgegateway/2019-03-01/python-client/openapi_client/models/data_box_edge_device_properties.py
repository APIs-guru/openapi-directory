# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataBoxEdgeDeviceProperties(BaseModel):
    """
    The properties of the Data Box Edge/Gateway device.
    """ # noqa: E501
    configured_role_types: Optional[List[StrictStr]] = Field(default=None, description="Type of compute roles configured.", alias="configuredRoleTypes")
    culture: Optional[StrictStr] = Field(default=None, description="The Data Box Edge/Gateway device culture.")
    data_box_edge_device_status: Optional[StrictStr] = Field(default=None, description="The status of the Data Box Edge/Gateway device.", alias="dataBoxEdgeDeviceStatus")
    description: Optional[StrictStr] = Field(default=None, description="The Description of the Data Box Edge/Gateway device.")
    device_hcs_version: Optional[StrictStr] = Field(default=None, description="The device software version number of the device (eg: 1.2.18105.6).", alias="deviceHcsVersion")
    device_local_capacity: Optional[StrictInt] = Field(default=None, description="The Data Box Edge/Gateway device local capacity in MB.", alias="deviceLocalCapacity")
    device_model: Optional[StrictStr] = Field(default=None, description="The Data Box Edge/Gateway device model.", alias="deviceModel")
    device_software_version: Optional[StrictStr] = Field(default=None, description="The Data Box Edge/Gateway device software version.", alias="deviceSoftwareVersion")
    device_type: Optional[StrictStr] = Field(default=None, description="The type of the Data Box Edge/Gateway device.", alias="deviceType")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The Data Box Edge/Gateway device name.", alias="friendlyName")
    model_description: Optional[StrictStr] = Field(default=None, description="The description of the Data Box Edge/Gateway device model.", alias="modelDescription")
    serial_number: Optional[StrictStr] = Field(default=None, description="The Serial Number of Data Box Edge/Gateway device.", alias="serialNumber")
    time_zone: Optional[StrictStr] = Field(default=None, description="The Data Box Edge/Gateway device timezone.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["configuredRoleTypes", "culture", "dataBoxEdgeDeviceStatus", "description", "deviceHcsVersion", "deviceLocalCapacity", "deviceModel", "deviceSoftwareVersion", "deviceType", "friendlyName", "modelDescription", "serialNumber", "timeZone"]

    @field_validator('configured_role_types')
    def configured_role_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['IOT', 'ASA', 'Functions', 'Cognitive']):
                raise ValueError("each list item must be one of ('IOT', 'ASA', 'Functions', 'Cognitive')")
        return value

    @field_validator('data_box_edge_device_status')
    def data_box_edge_device_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ReadyToSetup', 'Online', 'Offline', 'NeedsAttention', 'Disconnected', 'PartiallyDisconnected']):
            raise ValueError("must be one of enum values ('ReadyToSetup', 'Online', 'Offline', 'NeedsAttention', 'Disconnected', 'PartiallyDisconnected')")
        return value

    @field_validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DataBoxEdgeDevice']):
            raise ValueError("must be one of enum values ('DataBoxEdgeDevice')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataBoxEdgeDeviceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "configured_role_types",
            "culture",
            "device_hcs_version",
            "device_local_capacity",
            "device_model",
            "device_software_version",
            "device_type",
            "serial_number",
            "time_zone",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataBoxEdgeDeviceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configuredRoleTypes": obj.get("configuredRoleTypes"),
            "culture": obj.get("culture"),
            "dataBoxEdgeDeviceStatus": obj.get("dataBoxEdgeDeviceStatus"),
            "description": obj.get("description"),
            "deviceHcsVersion": obj.get("deviceHcsVersion"),
            "deviceLocalCapacity": obj.get("deviceLocalCapacity"),
            "deviceModel": obj.get("deviceModel"),
            "deviceSoftwareVersion": obj.get("deviceSoftwareVersion"),
            "deviceType": obj.get("deviceType"),
            "friendlyName": obj.get("friendlyName"),
            "modelDescription": obj.get("modelDescription"),
            "serialNumber": obj.get("serialNumber"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.contact_details import ContactDetails
from openapi_client.models.order_status import OrderStatus
from openapi_client.models.tracking_info import TrackingInfo
from typing import Optional, Set
from typing_extensions import Self

class OrderProperties(BaseModel):
    """
    Order properties.
    """ # noqa: E501
    contact_information: ContactDetails = Field(alias="contactInformation")
    current_status: Optional[OrderStatus] = Field(default=None, alias="currentStatus")
    delivery_tracking_info: Optional[List[TrackingInfo]] = Field(default=None, description="Tracking information for the package delivered to the customer whether it has an original or a replacement device.", alias="deliveryTrackingInfo")
    order_history: Optional[List[OrderStatus]] = Field(default=None, description="List of status changes in the order.", alias="orderHistory")
    return_tracking_info: Optional[List[TrackingInfo]] = Field(default=None, description="Tracking information for the package returned from the customer whether it has an original or a replacement device.", alias="returnTrackingInfo")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the device.", alias="serialNumber")
    shipping_address: Address = Field(alias="shippingAddress")
    __properties: ClassVar[List[str]] = ["contactInformation", "currentStatus", "deliveryTrackingInfo", "orderHistory", "returnTrackingInfo", "serialNumber", "shippingAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "delivery_tracking_info",
            "order_history",
            "return_tracking_info",
            "serial_number",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact_information
        if self.contact_information:
            _dict['contactInformation'] = self.contact_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_status
        if self.current_status:
            _dict['currentStatus'] = self.current_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in delivery_tracking_info (list)
        _items = []
        if self.delivery_tracking_info:
            for _item_delivery_tracking_info in self.delivery_tracking_info:
                if _item_delivery_tracking_info:
                    _items.append(_item_delivery_tracking_info.to_dict())
            _dict['deliveryTrackingInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_history (list)
        _items = []
        if self.order_history:
            for _item_order_history in self.order_history:
                if _item_order_history:
                    _items.append(_item_order_history.to_dict())
            _dict['orderHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in return_tracking_info (list)
        _items = []
        if self.return_tracking_info:
            for _item_return_tracking_info in self.return_tracking_info:
                if _item_return_tracking_info:
                    _items.append(_item_return_tracking_info.to_dict())
            _dict['returnTrackingInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contactInformation": ContactDetails.from_dict(obj["contactInformation"]) if obj.get("contactInformation") is not None else None,
            "currentStatus": OrderStatus.from_dict(obj["currentStatus"]) if obj.get("currentStatus") is not None else None,
            "deliveryTrackingInfo": [TrackingInfo.from_dict(_item) for _item in obj["deliveryTrackingInfo"]] if obj.get("deliveryTrackingInfo") is not None else None,
            "orderHistory": [OrderStatus.from_dict(_item) for _item in obj["orderHistory"]] if obj.get("orderHistory") is not None else None,
            "returnTrackingInfo": [TrackingInfo.from_dict(_item) for _item in obj["returnTrackingInfo"]] if obj.get("returnTrackingInfo") is not None else None,
            "serialNumber": obj.get("serialNumber"),
            "shippingAddress": Address.from_dict(obj["shippingAddress"]) if obj.get("shippingAddress") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.progress_type import ProgressType
from typing import Optional, Set
from typing_extensions import Self

class SyncProgressStatus(BaseModel):
    """
    Sync Session status object.
    """ # noqa: E501
    applied_bytes: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Applied bytes", alias="appliedBytes")
    applied_item_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Applied item count.", alias="appliedItemCount")
    per_item_error_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Per item error count", alias="perItemErrorCount")
    progress_timestamp: Optional[datetime] = Field(default=None, description="Progress timestamp", alias="progressTimestamp")
    sync_direction: Optional[ProgressType] = Field(default=None, alias="syncDirection")
    total_bytes: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Total bytes", alias="totalBytes")
    total_item_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Total item count", alias="totalItemCount")
    __properties: ClassVar[List[str]] = ["appliedBytes", "appliedItemCount", "perItemErrorCount", "progressTimestamp", "syncDirection", "totalBytes", "totalItemCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncProgressStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncProgressStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedBytes": obj.get("appliedBytes"),
            "appliedItemCount": obj.get("appliedItemCount"),
            "perItemErrorCount": obj.get("perItemErrorCount"),
            "progressTimestamp": obj.get("progressTimestamp"),
            "syncDirection": obj.get("syncDirection"),
            "totalBytes": obj.get("totalBytes"),
            "totalItemCount": obj.get("totalItemCount")
        })
        return _obj



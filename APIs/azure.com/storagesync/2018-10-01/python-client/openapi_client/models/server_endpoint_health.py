# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_state import HealthState
from openapi_client.models.offline_data_transfer_state import OfflineDataTransferState
from openapi_client.models.sync_progress_status import SyncProgressStatus
from openapi_client.models.sync_session_status import SyncSessionStatus
from typing import Optional, Set
from typing_extensions import Self

class ServerEndpointHealth(BaseModel):
    """
    ServerEndpoint Health object.
    """ # noqa: E501
    combined_health: Optional[HealthState] = Field(default=None, alias="combinedHealth")
    current_progress: Optional[SyncProgressStatus] = Field(default=None, alias="currentProgress")
    download_health: Optional[HealthState] = Field(default=None, alias="downloadHealth")
    download_status: Optional[SyncSessionStatus] = Field(default=None, alias="downloadStatus")
    last_updated_timestamp: Optional[datetime] = Field(default=None, description="Last Updated Timestamp", alias="lastUpdatedTimestamp")
    offline_data_transfer_status: Optional[OfflineDataTransferState] = Field(default=None, alias="offlineDataTransferStatus")
    upload_health: Optional[HealthState] = Field(default=None, alias="uploadHealth")
    upload_status: Optional[SyncSessionStatus] = Field(default=None, alias="uploadStatus")
    __properties: ClassVar[List[str]] = ["combinedHealth", "currentProgress", "downloadHealth", "downloadStatus", "lastUpdatedTimestamp", "offlineDataTransferStatus", "uploadHealth", "uploadStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerEndpointHealth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_progress
        if self.current_progress:
            _dict['currentProgress'] = self.current_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of download_status
        if self.download_status:
            _dict['downloadStatus'] = self.download_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload_status
        if self.upload_status:
            _dict['uploadStatus'] = self.upload_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerEndpointHealth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "combinedHealth": obj.get("combinedHealth"),
            "currentProgress": SyncProgressStatus.from_dict(obj["currentProgress"]) if obj.get("currentProgress") is not None else None,
            "downloadHealth": obj.get("downloadHealth"),
            "downloadStatus": SyncSessionStatus.from_dict(obj["downloadStatus"]) if obj.get("downloadStatus") is not None else None,
            "lastUpdatedTimestamp": obj.get("lastUpdatedTimestamp"),
            "offlineDataTransferStatus": obj.get("offlineDataTransferStatus"),
            "uploadHealth": obj.get("uploadHealth"),
            "uploadStatus": SyncSessionStatus.from_dict(obj["uploadStatus"]) if obj.get("uploadStatus") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2017-06-05-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.feature_status import FeatureStatus
from openapi_client.models.progress_type import ProgressType
from typing import Optional, Set
from typing_extensions import Self

class ServerEndpointProperties(BaseModel):
    """
    ServerEndpoint Properties object.
    """ # noqa: E501
    byte_progress: Optional[StrictInt] = Field(default=None, description="Bytes in progress", alias="byteProgress")
    byte_total: Optional[StrictInt] = Field(default=None, description="Bytes total", alias="byteTotal")
    cloud_tiering: Optional[FeatureStatus] = Field(default=None, alias="cloudTiering")
    current_progress_type: Optional[ProgressType] = Field(default=None, alias="currentProgressType")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly Name", alias="friendlyName")
    item_download_error_count: Optional[StrictInt] = Field(default=None, description="Item download error count.", alias="itemDownloadErrorCount")
    item_progress_count: Optional[StrictInt] = Field(default=None, description="Item Progress Count", alias="itemProgressCount")
    item_total_count: Optional[StrictInt] = Field(default=None, description="Item Total Count", alias="itemTotalCount")
    item_upload_error_count: Optional[StrictInt] = Field(default=None, description="Item Upload Error Count.", alias="itemUploadErrorCount")
    last_sync_success: Optional[datetime] = Field(default=None, description="Last Sync Success", alias="lastSyncSuccess")
    last_workflow_id: Optional[StrictStr] = Field(default=None, description="ServerEndpoint lastWorkflowId", alias="lastWorkflowId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="ServerEndpoint Provisioning State", alias="provisioningState")
    server_local_path: Optional[StrictStr] = Field(default=None, description="Server folder used for data synchronization", alias="serverLocalPath")
    server_resource_id: Optional[StrictStr] = Field(default=None, description="Arm resource identifier.", alias="serverResourceId")
    sync_error_context: Optional[StrictStr] = Field(default=None, description="sync error context.", alias="syncErrorContext")
    sync_error_direction: Optional[ProgressType] = Field(default=None, alias="syncErrorDirection")
    sync_error_state: Optional[StrictStr] = Field(default=None, description="Sync Error State", alias="syncErrorState")
    sync_error_state_timestamp: Optional[datetime] = Field(default=None, description="Sync Error State Timestamp", alias="syncErrorStateTimestamp")
    total_progress: Optional[StrictInt] = Field(default=None, description="Total progress", alias="totalProgress")
    volume_free_space_percent: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="Level of free space to be maintained by Cloud Tiering if it is enabled.", alias="volumeFreeSpacePercent")
    __properties: ClassVar[List[str]] = ["byteProgress", "byteTotal", "cloudTiering", "currentProgressType", "friendlyName", "itemDownloadErrorCount", "itemProgressCount", "itemTotalCount", "itemUploadErrorCount", "lastSyncSuccess", "lastWorkflowId", "provisioningState", "serverLocalPath", "serverResourceId", "syncErrorContext", "syncErrorDirection", "syncErrorState", "syncErrorStateTimestamp", "totalProgress", "volumeFreeSpacePercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerEndpointProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerEndpointProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "byteProgress": obj.get("byteProgress"),
            "byteTotal": obj.get("byteTotal"),
            "cloudTiering": obj.get("cloudTiering"),
            "currentProgressType": obj.get("currentProgressType"),
            "friendlyName": obj.get("friendlyName"),
            "itemDownloadErrorCount": obj.get("itemDownloadErrorCount"),
            "itemProgressCount": obj.get("itemProgressCount"),
            "itemTotalCount": obj.get("itemTotalCount"),
            "itemUploadErrorCount": obj.get("itemUploadErrorCount"),
            "lastSyncSuccess": obj.get("lastSyncSuccess"),
            "lastWorkflowId": obj.get("lastWorkflowId"),
            "provisioningState": obj.get("provisioningState"),
            "serverLocalPath": obj.get("serverLocalPath"),
            "serverResourceId": obj.get("serverResourceId"),
            "syncErrorContext": obj.get("syncErrorContext"),
            "syncErrorDirection": obj.get("syncErrorDirection"),
            "syncErrorState": obj.get("syncErrorState"),
            "syncErrorStateTimestamp": obj.get("syncErrorStateTimestamp"),
            "totalProgress": obj.get("totalProgress"),
            "volumeFreeSpacePercent": obj.get("volumeFreeSpacePercent")
        })
        return _obj



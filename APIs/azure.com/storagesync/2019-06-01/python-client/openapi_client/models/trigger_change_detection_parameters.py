# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TriggerChangeDetectionParameters(BaseModel):
    """
    The parameters used when calling trigger change detection action on cloud endpoint.
    """ # noqa: E501
    change_detection_mode: Optional[StrictStr] = Field(default=None, description="Change Detection Mode. Applies to a directory specified in directoryPath parameter.", alias="changeDetectionMode")
    directory_path: Optional[StrictStr] = Field(default=None, description="Relative path to a directory Azure File share for which change detection is to be performed.", alias="directoryPath")
    paths: Optional[List[StrictStr]] = Field(default=None, description="Array of relative paths on the Azure File share to be included in the change detection. Can be files and directories.")
    __properties: ClassVar[List[str]] = ["changeDetectionMode", "directoryPath", "paths"]

    @field_validator('change_detection_mode')
    def change_detection_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'Recursive']):
            raise ValueError("must be one of enum values ('Default', 'Recursive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TriggerChangeDetectionParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TriggerChangeDetectionParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeDetectionMode": obj.get("changeDetectionMode"),
            "directoryPath": obj.get("directoryPath"),
            "paths": obj.get("paths")
        })
        return _obj



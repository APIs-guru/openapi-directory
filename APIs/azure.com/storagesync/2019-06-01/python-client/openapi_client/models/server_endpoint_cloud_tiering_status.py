# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.server_endpoint_cloud_tiering_health_state import ServerEndpointCloudTieringHealthState
from typing import Optional, Set
from typing_extensions import Self

class ServerEndpointCloudTieringStatus(BaseModel):
    """
    Server endpoint cloud tiering status object.
    """ # noqa: E501
    health: Optional[ServerEndpointCloudTieringHealthState] = None
    last_cloud_tiering_result: Optional[StrictInt] = Field(default=None, description="Last cloud tiering result (HResult)", alias="lastCloudTieringResult")
    last_success_timestamp: Optional[datetime] = Field(default=None, description="Last cloud tiering success timestamp", alias="lastSuccessTimestamp")
    last_updated_timestamp: Optional[datetime] = Field(default=None, description="Last updated timestamp", alias="lastUpdatedTimestamp")
    __properties: ClassVar[List[str]] = ["health", "lastCloudTieringResult", "lastSuccessTimestamp", "lastUpdatedTimestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerEndpointCloudTieringStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_cloud_tiering_result",
            "last_success_timestamp",
            "last_updated_timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerEndpointCloudTieringStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "health": obj.get("health"),
            "lastCloudTieringResult": obj.get("lastCloudTieringResult"),
            "lastSuccessTimestamp": obj.get("lastSuccessTimestamp"),
            "lastUpdatedTimestamp": obj.get("lastUpdatedTimestamp")
        })
        return _obj



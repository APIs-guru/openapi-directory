# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RegisteredServerCreateParametersProperties(BaseModel):
    """
    RegisteredServerCreateParametersProperties
    """ # noqa: E501
    agent_version: Optional[StrictStr] = Field(default=None, description="Registered Server Agent Version", alias="agentVersion")
    cluster_id: Optional[StrictStr] = Field(default=None, description="Registered Server clusterId", alias="clusterId")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Registered Server clusterName", alias="clusterName")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly Name", alias="friendlyName")
    last_heart_beat: Optional[StrictStr] = Field(default=None, description="Registered Server last heart beat", alias="lastHeartBeat")
    server_certificate: Optional[StrictStr] = Field(default=None, description="Registered Server Certificate", alias="serverCertificate")
    server_id: Optional[StrictStr] = Field(default=None, description="Registered Server serverId", alias="serverId")
    server_os_version: Optional[StrictStr] = Field(default=None, description="Registered Server OS Version", alias="serverOSVersion")
    server_role: Optional[StrictStr] = Field(default=None, description="Registered Server serverRole", alias="serverRole")
    __properties: ClassVar[List[str]] = ["agentVersion", "clusterId", "clusterName", "friendlyName", "lastHeartBeat", "serverCertificate", "serverId", "serverOSVersion", "serverRole"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegisteredServerCreateParametersProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegisteredServerCreateParametersProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentVersion": obj.get("agentVersion"),
            "clusterId": obj.get("clusterId"),
            "clusterName": obj.get("clusterName"),
            "friendlyName": obj.get("friendlyName"),
            "lastHeartBeat": obj.get("lastHeartBeat"),
            "serverCertificate": obj.get("serverCertificate"),
            "serverId": obj.get("serverId"),
            "serverOSVersion": obj.get("serverOSVersion"),
            "serverRole": obj.get("serverRole")
        })
        return _obj



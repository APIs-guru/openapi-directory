# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.server_endpoint_offline_data_transfer_state import ServerEndpointOfflineDataTransferState
from openapi_client.models.server_endpoint_sync_activity_state import ServerEndpointSyncActivityState
from openapi_client.models.server_endpoint_sync_activity_status import ServerEndpointSyncActivityStatus
from openapi_client.models.server_endpoint_sync_health_state import ServerEndpointSyncHealthState
from openapi_client.models.server_endpoint_sync_session_status import ServerEndpointSyncSessionStatus
from typing import Optional, Set
from typing_extensions import Self

class ServerEndpointSyncStatus(BaseModel):
    """
    Server Endpoint sync status
    """ # noqa: E501
    combined_health: Optional[ServerEndpointSyncHealthState] = Field(default=None, alias="combinedHealth")
    download_activity: Optional[ServerEndpointSyncActivityStatus] = Field(default=None, alias="downloadActivity")
    download_health: Optional[ServerEndpointSyncHealthState] = Field(default=None, alias="downloadHealth")
    download_status: Optional[ServerEndpointSyncSessionStatus] = Field(default=None, alias="downloadStatus")
    last_updated_timestamp: Optional[datetime] = Field(default=None, description="Last Updated Timestamp", alias="lastUpdatedTimestamp")
    offline_data_transfer_status: Optional[ServerEndpointOfflineDataTransferState] = Field(default=None, alias="offlineDataTransferStatus")
    sync_activity: Optional[ServerEndpointSyncActivityState] = Field(default=None, alias="syncActivity")
    total_persistent_files_not_syncing_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Total count of persistent files not syncing (combined upload + download).", alias="totalPersistentFilesNotSyncingCount")
    upload_activity: Optional[ServerEndpointSyncActivityStatus] = Field(default=None, alias="uploadActivity")
    upload_health: Optional[ServerEndpointSyncHealthState] = Field(default=None, alias="uploadHealth")
    upload_status: Optional[ServerEndpointSyncSessionStatus] = Field(default=None, alias="uploadStatus")
    __properties: ClassVar[List[str]] = ["combinedHealth", "downloadActivity", "downloadHealth", "downloadStatus", "lastUpdatedTimestamp", "offlineDataTransferStatus", "syncActivity", "totalPersistentFilesNotSyncingCount", "uploadActivity", "uploadHealth", "uploadStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerEndpointSyncStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_updated_timestamp",
            "total_persistent_files_not_syncing_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of download_activity
        if self.download_activity:
            _dict['downloadActivity'] = self.download_activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of download_status
        if self.download_status:
            _dict['downloadStatus'] = self.download_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload_activity
        if self.upload_activity:
            _dict['uploadActivity'] = self.upload_activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload_status
        if self.upload_status:
            _dict['uploadStatus'] = self.upload_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerEndpointSyncStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "combinedHealth": obj.get("combinedHealth"),
            "downloadActivity": ServerEndpointSyncActivityStatus.from_dict(obj["downloadActivity"]) if obj.get("downloadActivity") is not None else None,
            "downloadHealth": obj.get("downloadHealth"),
            "downloadStatus": ServerEndpointSyncSessionStatus.from_dict(obj["downloadStatus"]) if obj.get("downloadStatus") is not None else None,
            "lastUpdatedTimestamp": obj.get("lastUpdatedTimestamp"),
            "offlineDataTransferStatus": obj.get("offlineDataTransferStatus"),
            "syncActivity": obj.get("syncActivity"),
            "totalPersistentFilesNotSyncingCount": obj.get("totalPersistentFilesNotSyncingCount"),
            "uploadActivity": ServerEndpointSyncActivityStatus.from_dict(obj["uploadActivity"]) if obj.get("uploadActivity") is not None else None,
            "uploadHealth": obj.get("uploadHealth"),
            "uploadStatus": ServerEndpointSyncSessionStatus.from_dict(obj["uploadStatus"]) if obj.get("uploadStatus") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2019-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.files_not_syncing_error import FilesNotSyncingError
from typing import Optional, Set
from typing_extensions import Self

class SyncSessionStatus(BaseModel):
    """
    Sync Session status object.
    """ # noqa: E501
    files_not_syncing_errors: Optional[List[FilesNotSyncingError]] = Field(default=None, description="Array of per-item errors coming from the last sync session. Reserved for future use.", alias="filesNotSyncingErrors")
    last_sync_per_item_error_count: Optional[StrictInt] = Field(default=None, description="Last sync per item error count.", alias="lastSyncPerItemErrorCount")
    last_sync_result: Optional[StrictInt] = Field(default=None, description="Last sync result (HResult)", alias="lastSyncResult")
    last_sync_success_timestamp: Optional[datetime] = Field(default=None, description="Last sync success timestamp", alias="lastSyncSuccessTimestamp")
    last_sync_timestamp: Optional[datetime] = Field(default=None, description="Last sync timestamp", alias="lastSyncTimestamp")
    persistent_files_not_syncing_count: Optional[StrictInt] = Field(default=None, description="Count of persistent files not syncing. Reserved for future use.", alias="persistentFilesNotSyncingCount")
    transient_files_not_syncing_count: Optional[StrictInt] = Field(default=None, description="Count of transient files not syncing. Reserved for future use.", alias="transientFilesNotSyncingCount")
    __properties: ClassVar[List[str]] = ["filesNotSyncingErrors", "lastSyncPerItemErrorCount", "lastSyncResult", "lastSyncSuccessTimestamp", "lastSyncTimestamp", "persistentFilesNotSyncingCount", "transientFilesNotSyncingCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncSessionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "files_not_syncing_errors",
            "last_sync_per_item_error_count",
            "last_sync_result",
            "last_sync_success_timestamp",
            "last_sync_timestamp",
            "persistent_files_not_syncing_count",
            "transient_files_not_syncing_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files_not_syncing_errors (list)
        _items = []
        if self.files_not_syncing_errors:
            for _item_files_not_syncing_errors in self.files_not_syncing_errors:
                if _item_files_not_syncing_errors:
                    _items.append(_item_files_not_syncing_errors.to_dict())
            _dict['filesNotSyncingErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncSessionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filesNotSyncingErrors": [FilesNotSyncingError.from_dict(_item) for _item in obj["filesNotSyncingErrors"]] if obj.get("filesNotSyncingErrors") is not None else None,
            "lastSyncPerItemErrorCount": obj.get("lastSyncPerItemErrorCount"),
            "lastSyncResult": obj.get("lastSyncResult"),
            "lastSyncSuccessTimestamp": obj.get("lastSyncSuccessTimestamp"),
            "lastSyncTimestamp": obj.get("lastSyncTimestamp"),
            "persistentFilesNotSyncingCount": obj.get("persistentFilesNotSyncingCount"),
            "transientFilesNotSyncingCount": obj.get("transientFilesNotSyncingCount")
        })
        return _obj



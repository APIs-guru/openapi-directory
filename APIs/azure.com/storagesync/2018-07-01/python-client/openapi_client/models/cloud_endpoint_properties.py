# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CloudEndpointProperties(BaseModel):
    """
    CloudEndpoint Properties object.
    """ # noqa: E501
    backup_enabled: Optional[StrictBool] = Field(default=None, description="Backup Enabled", alias="backupEnabled")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly Name", alias="friendlyName")
    last_operation_name: Optional[StrictStr] = Field(default=None, description="Resource Last Operation Name", alias="lastOperationName")
    last_workflow_id: Optional[StrictStr] = Field(default=None, description="CloudEndpoint lastWorkflowId", alias="lastWorkflowId")
    partnership_id: Optional[StrictStr] = Field(default=None, description="Partnership Id", alias="partnershipId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="CloudEndpoint Provisioning State", alias="provisioningState")
    storage_account_resource_id: Optional[StrictStr] = Field(default=None, description="Storage Account Resource Id", alias="storageAccountResourceId")
    storage_account_share_name: Optional[StrictStr] = Field(default=None, description="Storage Account Share name", alias="storageAccountShareName")
    storage_account_tenant_id: Optional[StrictStr] = Field(default=None, description="Storage Account Tenant Id", alias="storageAccountTenantId")
    __properties: ClassVar[List[str]] = ["backupEnabled", "friendlyName", "lastOperationName", "lastWorkflowId", "partnershipId", "provisioningState", "storageAccountResourceId", "storageAccountShareName", "storageAccountTenantId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudEndpointProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "backup_enabled",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudEndpointProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupEnabled": obj.get("backupEnabled"),
            "friendlyName": obj.get("friendlyName"),
            "lastOperationName": obj.get("lastOperationName"),
            "lastWorkflowId": obj.get("lastWorkflowId"),
            "partnershipId": obj.get("partnershipId"),
            "provisioningState": obj.get("provisioningState"),
            "storageAccountResourceId": obj.get("storageAccountResourceId"),
            "storageAccountShareName": obj.get("storageAccountShareName"),
            "storageAccountTenantId": obj.get("storageAccountTenantId")
        })
        return _obj



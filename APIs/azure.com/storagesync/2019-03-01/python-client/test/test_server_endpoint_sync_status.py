# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.server_endpoint_sync_status import ServerEndpointSyncStatus

class TestServerEndpointSyncStatus(unittest.TestCase):
    """ServerEndpointSyncStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServerEndpointSyncStatus:
        """Test ServerEndpointSyncStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServerEndpointSyncStatus`
        """
        model = ServerEndpointSyncStatus()
        if include_optional:
            return ServerEndpointSyncStatus(
                combined_health = 'Healthy',
                download_activity = openapi_client.models.sync_activity_status.SyncActivityStatus(
                    applied_bytes = 56, 
                    applied_item_count = 56, 
                    per_item_error_count = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    total_bytes = 56, 
                    total_item_count = 56, ),
                download_health = 'Healthy',
                download_status = openapi_client.models.sync_session_status.SyncSessionStatus(
                    files_not_syncing_errors = [
                        openapi_client.models.files_not_syncing_error.FilesNotSyncingError(
                            error_code = 56, 
                            persistent_count = 56, 
                            transient_count = 56, )
                        ], 
                    last_sync_per_item_error_count = 56, 
                    last_sync_result = 56, 
                    last_sync_success_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_sync_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    persistent_files_not_syncing_count = 56, 
                    transient_files_not_syncing_count = 56, ),
                last_updated_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                offline_data_transfer_status = 'InProgress',
                sync_activity = 'Upload',
                total_persistent_files_not_syncing_count = 56,
                upload_activity = openapi_client.models.sync_activity_status.SyncActivityStatus(
                    applied_bytes = 56, 
                    applied_item_count = 56, 
                    per_item_error_count = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    total_bytes = 56, 
                    total_item_count = 56, ),
                upload_health = 'Healthy',
                upload_status = openapi_client.models.sync_session_status.SyncSessionStatus(
                    files_not_syncing_errors = [
                        openapi_client.models.files_not_syncing_error.FilesNotSyncingError(
                            error_code = 56, 
                            persistent_count = 56, 
                            transient_count = 56, )
                        ], 
                    last_sync_per_item_error_count = 56, 
                    last_sync_result = 56, 
                    last_sync_success_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_sync_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    persistent_files_not_syncing_count = 56, 
                    transient_files_not_syncing_count = 56, )
            )
        else:
            return ServerEndpointSyncStatus(
        )
        """

    def testServerEndpointSyncStatus(self):
        """Test ServerEndpointSyncStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Microsoft Storage Sync

    Microsoft Storage Sync Service API

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.feature_status import FeatureStatus
from openapi_client.models.server_endpoint_sync_status import ServerEndpointSyncStatus
from typing import Optional, Set
from typing_extensions import Self

class ServerEndpointProperties(BaseModel):
    """
    ServerEndpoint Properties object.
    """ # noqa: E501
    cloud_tiering: Optional[FeatureStatus] = Field(default=None, alias="cloudTiering")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly Name", alias="friendlyName")
    last_operation_name: Optional[StrictStr] = Field(default=None, description="Resource Last Operation Name", alias="lastOperationName")
    last_workflow_id: Optional[StrictStr] = Field(default=None, description="ServerEndpoint lastWorkflowId", alias="lastWorkflowId")
    offline_data_transfer: Optional[FeatureStatus] = Field(default=None, alias="offlineDataTransfer")
    offline_data_transfer_share_name: Optional[StrictStr] = Field(default=None, description="Offline data transfer share name", alias="offlineDataTransferShareName")
    offline_data_transfer_storage_account_resource_id: Optional[StrictStr] = Field(default=None, description="Offline data transfer storage account resource ID", alias="offlineDataTransferStorageAccountResourceId")
    offline_data_transfer_storage_account_tenant_id: Optional[StrictStr] = Field(default=None, description="Offline data transfer storage account tenant ID", alias="offlineDataTransferStorageAccountTenantId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="ServerEndpoint Provisioning State", alias="provisioningState")
    server_local_path: Optional[StrictStr] = Field(default=None, description="Server folder used for data synchronization", alias="serverLocalPath")
    server_resource_id: Optional[StrictStr] = Field(default=None, description="Arm resource identifier.", alias="serverResourceId")
    sync_status: Optional[ServerEndpointSyncStatus] = Field(default=None, alias="syncStatus")
    tier_files_older_than_days: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Tier files older than days.", alias="tierFilesOlderThanDays")
    volume_free_space_percent: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="Level of free space to be maintained by Cloud Tiering if it is enabled.", alias="volumeFreeSpacePercent")
    __properties: ClassVar[List[str]] = ["cloudTiering", "friendlyName", "lastOperationName", "lastWorkflowId", "offlineDataTransfer", "offlineDataTransferShareName", "offlineDataTransferStorageAccountResourceId", "offlineDataTransferStorageAccountTenantId", "provisioningState", "serverLocalPath", "serverResourceId", "syncStatus", "tierFilesOlderThanDays", "volumeFreeSpacePercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerEndpointProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_operation_name",
            "last_workflow_id",
            "offline_data_transfer_storage_account_resource_id",
            "offline_data_transfer_storage_account_tenant_id",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sync_status
        if self.sync_status:
            _dict['syncStatus'] = self.sync_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerEndpointProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudTiering": obj.get("cloudTiering"),
            "friendlyName": obj.get("friendlyName"),
            "lastOperationName": obj.get("lastOperationName"),
            "lastWorkflowId": obj.get("lastWorkflowId"),
            "offlineDataTransfer": obj.get("offlineDataTransfer"),
            "offlineDataTransferShareName": obj.get("offlineDataTransferShareName"),
            "offlineDataTransferStorageAccountResourceId": obj.get("offlineDataTransferStorageAccountResourceId"),
            "offlineDataTransferStorageAccountTenantId": obj.get("offlineDataTransferStorageAccountTenantId"),
            "provisioningState": obj.get("provisioningState"),
            "serverLocalPath": obj.get("serverLocalPath"),
            "serverResourceId": obj.get("serverResourceId"),
            "syncStatus": ServerEndpointSyncStatus.from_dict(obj["syncStatus"]) if obj.get("syncStatus") is not None else None,
            "tierFilesOlderThanDays": obj.get("tierFilesOlderThanDays"),
            "volumeFreeSpacePercent": obj.get("volumeFreeSpacePercent")
        })
        return _obj



# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.query_statistic import QueryStatistic
from typing import Optional, Set
from typing_extensions import Self

class TopQueries(BaseModel):
    """
    A database query.
    """ # noqa: E501
    aggregation_function: Optional[StrictStr] = Field(default=None, description="The function that is used to aggregate each query's metrics.", alias="aggregationFunction")
    execution_type: Optional[StrictStr] = Field(default=None, description="The execution type that is used to filter the query instances that are returned.", alias="executionType")
    interval_type: Optional[StrictStr] = Field(default=None, description="The duration of the interval (ISO8601 duration format).", alias="intervalType")
    number_of_top_queries: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of requested queries.", alias="numberOfTopQueries")
    observation_end_time: Optional[datetime] = Field(default=None, description="The end time for queries that are returned (ISO8601 format)", alias="observationEndTime")
    observation_start_time: Optional[datetime] = Field(default=None, description="The start time for queries that are returned (ISO8601 format)", alias="observationStartTime")
    observed_metric: Optional[StrictStr] = Field(default=None, description="The type of metric to use for ordering the top metrics.", alias="observedMetric")
    queries: Optional[List[QueryStatistic]] = Field(default=None, description="The list of queries.")
    __properties: ClassVar[List[str]] = ["aggregationFunction", "executionType", "intervalType", "numberOfTopQueries", "observationEndTime", "observationStartTime", "observedMetric", "queries"]

    @field_validator('aggregation_function')
    def aggregation_function_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['min', 'max', 'avg', 'sum']):
            raise ValueError("must be one of enum values ('min', 'max', 'avg', 'sum')")
        return value

    @field_validator('execution_type')
    def execution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['any', 'regular', 'irregular', 'aborted', 'exception']):
            raise ValueError("must be one of enum values ('any', 'regular', 'irregular', 'aborted', 'exception')")
        return value

    @field_validator('observed_metric')
    def observed_metric_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cpu', 'io', 'logio', 'duration', 'executionCount']):
            raise ValueError("must be one of enum values ('cpu', 'io', 'logio', 'duration', 'executionCount')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TopQueries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "aggregation_function",
            "execution_type",
            "interval_type",
            "number_of_top_queries",
            "observation_end_time",
            "observation_start_time",
            "observed_metric",
            "queries",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in queries (list)
        _items = []
        if self.queries:
            for _item_queries in self.queries:
                if _item_queries:
                    _items.append(_item_queries.to_dict())
            _dict['queries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TopQueries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationFunction": obj.get("aggregationFunction"),
            "executionType": obj.get("executionType"),
            "intervalType": obj.get("intervalType"),
            "numberOfTopQueries": obj.get("numberOfTopQueries"),
            "observationEndTime": obj.get("observationEndTime"),
            "observationStartTime": obj.get("observationStartTime"),
            "observedMetric": obj.get("observedMetric"),
            "queries": [QueryStatistic.from_dict(_item) for _item in obj["queries"]] if obj.get("queries") is not None else None
        })
        return _obj



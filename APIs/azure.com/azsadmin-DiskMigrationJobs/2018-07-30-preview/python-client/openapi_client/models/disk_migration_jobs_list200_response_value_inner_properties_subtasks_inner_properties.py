# coding: utf-8

"""
    ComputeDiskAdminManagementClient

    The Admin Compute Disk Management Client.

    The version of the OpenAPI document: 2018-07-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties(BaseModel):
    """
    Disk migration child task properties.
    """ # noqa: E501
    disk_id: Optional[StrictStr] = Field(default=None, description="The id of disk.", alias="diskId")
    end_time: Optional[datetime] = Field(default=None, description="The task end time.", alias="endTime")
    migration_subtask_status: Optional[StrictStr] = Field(default=None, description="Migration child task status.", alias="migrationSubtaskStatus")
    reason: Optional[StrictStr] = Field(default=None, description="The reason of task failure.")
    source_share: Optional[StrictStr] = Field(default=None, description="The source share of migration task.", alias="sourceShare")
    start_time: Optional[datetime] = Field(default=None, description="The task start time.", alias="startTime")
    target_disk_state_for_migration: Optional[StrictStr] = Field(default=None, description="Disk State.", alias="targetDiskStateForMigration")
    target_share: Optional[StrictStr] = Field(default=None, description="The target share of migration task.", alias="targetShare")
    __properties: ClassVar[List[str]] = ["diskId", "endTime", "migrationSubtaskStatus", "reason", "sourceShare", "startTime", "targetDiskStateForMigration", "targetShare"]

    @field_validator('migration_subtask_status')
    def migration_subtask_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Undefined', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Pending', 'Skipped']):
            raise ValueError("must be one of enum values ('Undefined', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Pending', 'Skipped')")
        return value

    @field_validator('target_disk_state_for_migration')
    def target_disk_state_for_migration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Undefined', 'Unattached', 'Attached', 'Reserved', 'ActiveSAS', 'Unknown', 'All', 'Recommended', 'OfflineMigration', 'OnlineMigration']):
            raise ValueError("must be one of enum values ('Undefined', 'Unattached', 'Attached', 'Reserved', 'ActiveSAS', 'Unknown', 'All', 'Recommended', 'OfflineMigration', 'OnlineMigration')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "disk_id",
            "end_time",
            "reason",
            "source_share",
            "start_time",
            "target_share",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskId": obj.get("diskId"),
            "endTime": obj.get("endTime"),
            "migrationSubtaskStatus": obj.get("migrationSubtaskStatus"),
            "reason": obj.get("reason"),
            "sourceShare": obj.get("sourceShare"),
            "startTime": obj.get("startTime"),
            "targetDiskStateForMigration": obj.get("targetDiskStateForMigration"),
            "targetShare": obj.get("targetShare")
        })
        return _obj



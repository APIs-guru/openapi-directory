# coding: utf-8

"""
    ComputeDiskAdminManagementClient

    The Admin Compute Disk Management Client.

    The version of the OpenAPI document: 2018-07-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DiskMigrationJobsCreateRequestInnerProperties(BaseModel):
    """
    Managed disk properties.
    """ # noqa: E501
    actual_size_gb: Optional[StrictInt] = Field(default=None, description="The actual size of disk in GB.", alias="actualSizeGB")
    disk_id: Optional[StrictStr] = Field(default=None, description="The disk id.", alias="diskId")
    disk_sku: Optional[StrictStr] = Field(default=None, description="Disk Sku.", alias="diskSku")
    disk_type: Optional[StrictStr] = Field(default=None, description="Disk resource type.", alias="diskType")
    managed_by: Optional[StrictStr] = Field(default=None, description="Compute resource Uri which owns this disk.", alias="managedBy")
    provision_size_gb: Optional[StrictInt] = Field(default=None, description="The provision size of disk in GB.", alias="provisionSizeGB")
    share_path: Optional[StrictStr] = Field(default=None, description="The disk share path.", alias="sharePath")
    status: Optional[StrictStr] = Field(default=None, description="Disk State.")
    user_resource_id: Optional[StrictStr] = Field(default=None, description="The disk resource Uri from user view.", alias="userResourceId")
    __properties: ClassVar[List[str]] = ["actualSizeGB", "diskId", "diskSku", "diskType", "managedBy", "provisionSizeGB", "sharePath", "status", "userResourceId"]

    @field_validator('disk_sku')
    def disk_sku_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS', 'StandardSSD_LRS', 'UltraSSD_LRS']):
            raise ValueError("must be one of enum values ('Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS', 'StandardSSD_LRS', 'UltraSSD_LRS')")
        return value

    @field_validator('disk_type')
    def disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Undefined', 'Disk', 'Snapshot', 'RestorePoint', 'ManagedBlob']):
            raise ValueError("must be one of enum values ('Undefined', 'Disk', 'Snapshot', 'RestorePoint', 'ManagedBlob')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Undefined', 'Unattached', 'Attached', 'Reserved', 'ActiveSAS', 'Unknown', 'All', 'Recommended', 'OfflineMigration', 'OnlineMigration']):
            raise ValueError("must be one of enum values ('Undefined', 'Unattached', 'Attached', 'Reserved', 'ActiveSAS', 'Unknown', 'All', 'Recommended', 'OfflineMigration', 'OnlineMigration')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiskMigrationJobsCreateRequestInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "actual_size_gb",
            "managed_by",
            "provision_size_gb",
            "user_resource_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiskMigrationJobsCreateRequestInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actualSizeGB": obj.get("actualSizeGB"),
            "diskId": obj.get("diskId"),
            "diskSku": obj.get("diskSku"),
            "diskType": obj.get("diskType"),
            "managedBy": obj.get("managedBy"),
            "provisionSizeGB": obj.get("provisionSizeGB"),
            "sharePath": obj.get("sharePath"),
            "status": obj.get("status"),
            "userResourceId": obj.get("userResourceId")
        })
        return _obj



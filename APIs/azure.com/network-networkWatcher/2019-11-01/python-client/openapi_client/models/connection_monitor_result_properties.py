# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connection_monitor_destination import ConnectionMonitorDestination
from openapi_client.models.connection_monitor_endpoint import ConnectionMonitorEndpoint
from openapi_client.models.connection_monitor_output import ConnectionMonitorOutput
from openapi_client.models.connection_monitor_source import ConnectionMonitorSource
from openapi_client.models.connection_monitor_test_configuration import ConnectionMonitorTestConfiguration
from openapi_client.models.connection_monitor_test_group import ConnectionMonitorTestGroup
from typing import Optional, Set
from typing_extensions import Self

class ConnectionMonitorResultProperties(BaseModel):
    """
    Describes the properties of a connection monitor.
    """ # noqa: E501
    connection_monitor_type: Optional[StrictStr] = Field(default=None, description="Type of connection monitor.", alias="connectionMonitorType")
    monitoring_status: Optional[StrictStr] = Field(default=None, description="The monitoring status of the connection monitor.", alias="monitoringStatus")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    start_time: Optional[datetime] = Field(default=None, description="The date and time when the connection monitor was started.", alias="startTime")
    auto_start: Optional[StrictBool] = Field(default=True, description="Determines if the connection monitor will start automatically once created.", alias="autoStart")
    destination: Optional[ConnectionMonitorDestination] = None
    endpoints: Optional[List[ConnectionMonitorEndpoint]] = Field(default=None, description="List of connection monitor endpoints.")
    monitoring_interval_in_seconds: Optional[StrictInt] = Field(default=None, description="Monitoring interval in seconds.", alias="monitoringIntervalInSeconds")
    notes: Optional[StrictStr] = Field(default=None, description="Optional notes to be associated with the connection monitor.")
    outputs: Optional[List[ConnectionMonitorOutput]] = Field(default=None, description="List of connection monitor outputs.")
    source: Optional[ConnectionMonitorSource] = None
    test_configurations: Optional[List[ConnectionMonitorTestConfiguration]] = Field(default=None, description="List of connection monitor test configurations.", alias="testConfigurations")
    test_groups: Optional[List[ConnectionMonitorTestGroup]] = Field(default=None, description="List of connection monitor test groups.", alias="testGroups")
    __properties: ClassVar[List[str]] = ["autoStart", "destination", "endpoints", "monitoringIntervalInSeconds", "notes", "outputs", "source", "testConfigurations", "testGroups"]

    @field_validator('connection_monitor_type')
    def connection_monitor_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MultiEndpoint', 'SingleSourceDestination']):
            raise ValueError("must be one of enum values ('MultiEndpoint', 'SingleSourceDestination')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectionMonitorResultProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connection_monitor_type",
            "monitoring_status",
            "provisioning_state",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in test_configurations (list)
        _items = []
        if self.test_configurations:
            for _item_test_configurations in self.test_configurations:
                if _item_test_configurations:
                    _items.append(_item_test_configurations.to_dict())
            _dict['testConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in test_groups (list)
        _items = []
        if self.test_groups:
            for _item_test_groups in self.test_groups:
                if _item_test_groups:
                    _items.append(_item_test_groups.to_dict())
            _dict['testGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectionMonitorResultProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoStart": obj.get("autoStart") if obj.get("autoStart") is not None else True,
            "destination": ConnectionMonitorDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "endpoints": [ConnectionMonitorEndpoint.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "monitoringIntervalInSeconds": obj.get("monitoringIntervalInSeconds"),
            "notes": obj.get("notes"),
            "outputs": [ConnectionMonitorOutput.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "source": ConnectionMonitorSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "testConfigurations": [ConnectionMonitorTestConfiguration.from_dict(_item) for _item in obj["testConfigurations"]] if obj.get("testConfigurations") is not None else None,
            "testGroups": [ConnectionMonitorTestGroup.from_dict(_item) for _item in obj["testGroups"]] if obj.get("testGroups") is not None else None
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2017-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SecurityRuleAssociationsEffectiveSecurityRulesInner(BaseModel):
    """
    Effective network security rules.
    """ # noqa: E501
    access: Optional[StrictStr] = Field(default=None, description="Whether network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.")
    destination_address_prefix: Optional[StrictStr] = Field(default=None, description="The destination address prefix.", alias="destinationAddressPrefix")
    destination_address_prefixes: Optional[List[StrictStr]] = Field(default=None, description="The destination address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).", alias="destinationAddressPrefixes")
    destination_port_range: Optional[StrictStr] = Field(default=None, description="The destination port or range.", alias="destinationPortRange")
    destination_port_ranges: Optional[List[StrictStr]] = Field(default=None, description="The destination port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*)", alias="destinationPortRanges")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of the rule. Possible values are: 'Inbound and Outbound'.")
    expanded_destination_address_prefix: Optional[List[StrictStr]] = Field(default=None, description="Expanded destination address prefix.", alias="expandedDestinationAddressPrefix")
    expanded_source_address_prefix: Optional[List[StrictStr]] = Field(default=None, description="The expanded source address prefix.", alias="expandedSourceAddressPrefix")
    name: Optional[StrictStr] = Field(default=None, description="The name of the security rule specified by the user (if created by the user).")
    priority: Optional[StrictInt] = Field(default=None, description="The priority of the rule.")
    protocol: Optional[StrictStr] = Field(default=None, description="The network protocol this rule applies to. Possible values are: 'Tcp', 'Udp', and 'All'.")
    source_address_prefix: Optional[StrictStr] = Field(default=None, description="The source address prefix.", alias="sourceAddressPrefix")
    source_address_prefixes: Optional[List[StrictStr]] = Field(default=None, description="The source address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).", alias="sourceAddressPrefixes")
    source_port_range: Optional[StrictStr] = Field(default=None, description="The source port or range.", alias="sourcePortRange")
    source_port_ranges: Optional[List[StrictStr]] = Field(default=None, description="The source port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*)", alias="sourcePortRanges")
    __properties: ClassVar[List[str]] = ["access", "destinationAddressPrefix", "destinationAddressPrefixes", "destinationPortRange", "destinationPortRanges", "direction", "expandedDestinationAddressPrefix", "expandedSourceAddressPrefix", "name", "priority", "protocol", "sourceAddressPrefix", "sourceAddressPrefixes", "sourcePortRange", "sourcePortRanges"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Allow', 'Deny']):
            raise ValueError("must be one of enum values ('Allow', 'Deny')")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Inbound', 'Outbound']):
            raise ValueError("must be one of enum values ('Inbound', 'Outbound')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Tcp', 'Udp', 'All']):
            raise ValueError("must be one of enum values ('Tcp', 'Udp', 'All')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityRuleAssociationsEffectiveSecurityRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityRuleAssociationsEffectiveSecurityRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": obj.get("access"),
            "destinationAddressPrefix": obj.get("destinationAddressPrefix"),
            "destinationAddressPrefixes": obj.get("destinationAddressPrefixes"),
            "destinationPortRange": obj.get("destinationPortRange"),
            "destinationPortRanges": obj.get("destinationPortRanges"),
            "direction": obj.get("direction"),
            "expandedDestinationAddressPrefix": obj.get("expandedDestinationAddressPrefix"),
            "expandedSourceAddressPrefix": obj.get("expandedSourceAddressPrefix"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "protocol": obj.get("protocol"),
            "sourceAddressPrefix": obj.get("sourceAddressPrefix"),
            "sourceAddressPrefixes": obj.get("sourceAddressPrefixes"),
            "sourcePortRange": obj.get("sourcePortRange"),
            "sourcePortRanges": obj.get("sourcePortRanges")
        })
        return _obj



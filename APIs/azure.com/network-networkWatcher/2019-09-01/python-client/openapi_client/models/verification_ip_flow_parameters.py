# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.direction import Direction
from typing import Optional, Set
from typing_extensions import Self

class VerificationIPFlowParameters(BaseModel):
    """
    Parameters that define the IP flow to be verified.
    """ # noqa: E501
    direction: Direction
    local_ip_address: StrictStr = Field(description="The local IP address. Acceptable values are valid IPv4 addresses.", alias="localIPAddress")
    local_port: StrictStr = Field(description="The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.", alias="localPort")
    protocol: StrictStr = Field(description="Protocol to be verified on.")
    remote_ip_address: StrictStr = Field(description="The remote IP address. Acceptable values are valid IPv4 addresses.", alias="remoteIPAddress")
    remote_port: StrictStr = Field(description="The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.", alias="remotePort")
    target_nic_resource_id: Optional[StrictStr] = Field(default=None, description="The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).", alias="targetNicResourceId")
    target_resource_id: StrictStr = Field(description="The ID of the target resource to perform next-hop on.", alias="targetResourceId")
    __properties: ClassVar[List[str]] = ["direction", "localIPAddress", "localPort", "protocol", "remoteIPAddress", "remotePort", "targetNicResourceId", "targetResourceId"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['TCP', 'UDP']):
            raise ValueError("must be one of enum values ('TCP', 'UDP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerificationIPFlowParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerificationIPFlowParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "direction": obj.get("direction"),
            "localIPAddress": obj.get("localIPAddress"),
            "localPort": obj.get("localPort"),
            "protocol": obj.get("protocol"),
            "remoteIPAddress": obj.get("remoteIPAddress"),
            "remotePort": obj.get("remotePort"),
            "targetNicResourceId": obj.get("targetNicResourceId"),
            "targetResourceId": obj.get("targetResourceId")
        })
        return _obj



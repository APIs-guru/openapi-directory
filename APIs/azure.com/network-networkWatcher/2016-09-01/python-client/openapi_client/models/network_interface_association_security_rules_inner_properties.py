# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterfaceAssociationSecurityRulesInnerProperties(BaseModel):
    """
    NetworkInterfaceAssociationSecurityRulesInnerProperties
    """ # noqa: E501
    access: StrictStr = Field(description="The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.")
    description: Optional[StrictStr] = Field(default=None, description="A description for this rule. Restricted to 140 chars.")
    destination_address_prefix: StrictStr = Field(description="The destination address prefix. CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.", alias="destinationAddressPrefix")
    destination_port_range: Optional[StrictStr] = Field(default=None, description="The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.", alias="destinationPortRange")
    direction: StrictStr = Field(description="The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.")
    priority: Optional[StrictInt] = Field(default=None, description="The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.")
    protocol: StrictStr = Field(description="Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    source_address_prefix: StrictStr = Field(description="The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ", alias="sourceAddressPrefix")
    source_port_range: Optional[StrictStr] = Field(default=None, description="The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.", alias="sourcePortRange")
    __properties: ClassVar[List[str]] = ["access", "description", "destinationAddressPrefix", "destinationPortRange", "direction", "priority", "protocol", "provisioningState", "sourceAddressPrefix", "sourcePortRange"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Allow', 'Deny']):
            raise ValueError("must be one of enum values ('Allow', 'Deny')")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Inbound', 'Outbound']):
            raise ValueError("must be one of enum values ('Inbound', 'Outbound')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Tcp', 'Udp', '*']):
            raise ValueError("must be one of enum values ('Tcp', 'Udp', '*')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterfaceAssociationSecurityRulesInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterfaceAssociationSecurityRulesInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": obj.get("access"),
            "description": obj.get("description"),
            "destinationAddressPrefix": obj.get("destinationAddressPrefix"),
            "destinationPortRange": obj.get("destinationPortRange"),
            "direction": obj.get("direction"),
            "priority": obj.get("priority"),
            "protocol": obj.get("protocol"),
            "provisioningState": obj.get("provisioningState"),
            "sourceAddressPrefix": obj.get("sourceAddressPrefix"),
            "sourcePortRange": obj.get("sourcePortRange")
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing_extensions import Annotated
from openapi_client.models.available_providers_list import AvailableProvidersList
from openapi_client.models.available_providers_list_parameters import AvailableProvidersListParameters
from openapi_client.models.azure_reachability_report import AzureReachabilityReport
from openapi_client.models.azure_reachability_report_parameters import AzureReachabilityReportParameters
from openapi_client.models.connectivity_information import ConnectivityInformation
from openapi_client.models.connectivity_parameters import ConnectivityParameters
from openapi_client.models.flow_log_information import FlowLogInformation
from openapi_client.models.flow_log_status_parameters import FlowLogStatusParameters
from openapi_client.models.network_watcher import NetworkWatcher
from openapi_client.models.network_watcher_list_result import NetworkWatcherListResult
from openapi_client.models.network_watchers_update_tags_request import NetworkWatchersUpdateTagsRequest
from openapi_client.models.next_hop_parameters import NextHopParameters
from openapi_client.models.next_hop_result import NextHopResult
from openapi_client.models.query_troubleshooting_parameters import QueryTroubleshootingParameters
from openapi_client.models.security_group_view_parameters import SecurityGroupViewParameters
from openapi_client.models.security_group_view_result import SecurityGroupViewResult
from openapi_client.models.topology import Topology
from openapi_client.models.topology_parameters import TopologyParameters
from openapi_client.models.troubleshooting_parameters import TroubleshootingParameters
from openapi_client.models.troubleshooting_result import TroubleshootingResult
from openapi_client.models.verification_ip_flow_parameters import VerificationIPFlowParameters
from openapi_client.models.verification_ip_flow_result import VerificationIPFlowResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class NetworkWatchersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def network_watchers_check_connectivity(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[ConnectivityParameters, Field(description="Parameters that determine how the connectivity check will be performed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConnectivityInformation:
        """network_watchers_check_connectivity

        Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that determine how the connectivity check will be performed. (required)
        :type parameters: ConnectivityParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_check_connectivity_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConnectivityInformation",
            '202': "ConnectivityInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_check_connectivity_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[ConnectivityParameters, Field(description="Parameters that determine how the connectivity check will be performed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConnectivityInformation]:
        """network_watchers_check_connectivity

        Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that determine how the connectivity check will be performed. (required)
        :type parameters: ConnectivityParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_check_connectivity_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConnectivityInformation",
            '202': "ConnectivityInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_check_connectivity_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[ConnectivityParameters, Field(description="Parameters that determine how the connectivity check will be performed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_check_connectivity

        Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that determine how the connectivity check will be performed. (required)
        :type parameters: ConnectivityParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_check_connectivity_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConnectivityInformation",
            '202': "ConnectivityInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_check_connectivity_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_create_or_update(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NetworkWatcher, Field(description="Parameters that define the network watcher resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetworkWatcher:
        """network_watchers_create_or_update

        Creates or updates a network watcher in the specified resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the network watcher resource. (required)
        :type parameters: NetworkWatcher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_create_or_update_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
            '201': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_create_or_update_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NetworkWatcher, Field(description="Parameters that define the network watcher resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetworkWatcher]:
        """network_watchers_create_or_update

        Creates or updates a network watcher in the specified resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the network watcher resource. (required)
        :type parameters: NetworkWatcher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_create_or_update_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
            '201': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_create_or_update_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NetworkWatcher, Field(description="Parameters that define the network watcher resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_create_or_update

        Creates or updates a network watcher in the specified resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the network watcher resource. (required)
        :type parameters: NetworkWatcher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_create_or_update_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
            '201': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_create_or_update_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_delete(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """network_watchers_delete

        Deletes the specified network watcher resource.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_delete_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_delete_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """network_watchers_delete

        Deletes the specified network watcher resource.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_delete_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_delete_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_delete

        Deletes the specified network watcher resource.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_delete_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_delete_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_get(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetworkWatcher:
        """network_watchers_get

        Gets the specified network watcher by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_get_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetworkWatcher]:
        """network_watchers_get

        Gets the specified network watcher by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_get_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_get

        Gets the specified network watcher by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_get_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_get_azure_reachability_report(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[AzureReachabilityReportParameters, Field(description="Parameters that determine Azure reachability report configuration.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AzureReachabilityReport:
        """network_watchers_get_azure_reachability_report

        Gets the relative latency score for internet service providers from a specified location to Azure regions.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that determine Azure reachability report configuration. (required)
        :type parameters: AzureReachabilityReportParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_azure_reachability_report_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AzureReachabilityReport",
            '202': "AzureReachabilityReport",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_get_azure_reachability_report_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[AzureReachabilityReportParameters, Field(description="Parameters that determine Azure reachability report configuration.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AzureReachabilityReport]:
        """network_watchers_get_azure_reachability_report

        Gets the relative latency score for internet service providers from a specified location to Azure regions.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that determine Azure reachability report configuration. (required)
        :type parameters: AzureReachabilityReportParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_azure_reachability_report_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AzureReachabilityReport",
            '202': "AzureReachabilityReport",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_get_azure_reachability_report_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[AzureReachabilityReportParameters, Field(description="Parameters that determine Azure reachability report configuration.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_get_azure_reachability_report

        Gets the relative latency score for internet service providers from a specified location to Azure regions.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that determine Azure reachability report configuration. (required)
        :type parameters: AzureReachabilityReportParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_azure_reachability_report_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AzureReachabilityReport",
            '202': "AzureReachabilityReport",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_get_azure_reachability_report_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_get_flow_log_status(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[FlowLogStatusParameters, Field(description="Parameters that define a resource to query flow log and traffic analytics (optional) status.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FlowLogInformation:
        """network_watchers_get_flow_log_status

        Queries status of flow log and traffic analytics (optional) on a specified resource.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define a resource to query flow log and traffic analytics (optional) status. (required)
        :type parameters: FlowLogStatusParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_flow_log_status_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlowLogInformation",
            '202': "FlowLogInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_get_flow_log_status_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[FlowLogStatusParameters, Field(description="Parameters that define a resource to query flow log and traffic analytics (optional) status.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FlowLogInformation]:
        """network_watchers_get_flow_log_status

        Queries status of flow log and traffic analytics (optional) on a specified resource.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define a resource to query flow log and traffic analytics (optional) status. (required)
        :type parameters: FlowLogStatusParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_flow_log_status_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlowLogInformation",
            '202': "FlowLogInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_get_flow_log_status_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[FlowLogStatusParameters, Field(description="Parameters that define a resource to query flow log and traffic analytics (optional) status.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_get_flow_log_status

        Queries status of flow log and traffic analytics (optional) on a specified resource.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define a resource to query flow log and traffic analytics (optional) status. (required)
        :type parameters: FlowLogStatusParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_flow_log_status_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlowLogInformation",
            '202': "FlowLogInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_get_flow_log_status_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_get_next_hop(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NextHopParameters, Field(description="Parameters that define the source and destination endpoint.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NextHopResult:
        """network_watchers_get_next_hop

        Gets the next hop from the specified VM.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the source and destination endpoint. (required)
        :type parameters: NextHopParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_next_hop_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NextHopResult",
            '202': "NextHopResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_get_next_hop_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NextHopParameters, Field(description="Parameters that define the source and destination endpoint.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NextHopResult]:
        """network_watchers_get_next_hop

        Gets the next hop from the specified VM.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the source and destination endpoint. (required)
        :type parameters: NextHopParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_next_hop_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NextHopResult",
            '202': "NextHopResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_get_next_hop_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NextHopParameters, Field(description="Parameters that define the source and destination endpoint.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_get_next_hop

        Gets the next hop from the specified VM.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the source and destination endpoint. (required)
        :type parameters: NextHopParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_next_hop_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NextHopResult",
            '202': "NextHopResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_get_next_hop_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_get_topology(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[TopologyParameters, Field(description="Parameters that define the representation of topology.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Topology:
        """network_watchers_get_topology

        Gets the current network topology by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the representation of topology. (required)
        :type parameters: TopologyParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_topology_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Topology",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_get_topology_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[TopologyParameters, Field(description="Parameters that define the representation of topology.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Topology]:
        """network_watchers_get_topology

        Gets the current network topology by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the representation of topology. (required)
        :type parameters: TopologyParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_topology_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Topology",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_get_topology_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[TopologyParameters, Field(description="Parameters that define the representation of topology.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_get_topology

        Gets the current network topology by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the representation of topology. (required)
        :type parameters: TopologyParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_topology_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Topology",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_get_topology_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_get_troubleshooting(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[TroubleshootingParameters, Field(description="Parameters that define the resource to troubleshoot.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TroubleshootingResult:
        """network_watchers_get_troubleshooting

        Initiate troubleshooting on a specified resource

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the resource to troubleshoot. (required)
        :type parameters: TroubleshootingParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_troubleshooting_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TroubleshootingResult",
            '202': "TroubleshootingResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_get_troubleshooting_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[TroubleshootingParameters, Field(description="Parameters that define the resource to troubleshoot.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TroubleshootingResult]:
        """network_watchers_get_troubleshooting

        Initiate troubleshooting on a specified resource

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the resource to troubleshoot. (required)
        :type parameters: TroubleshootingParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_troubleshooting_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TroubleshootingResult",
            '202': "TroubleshootingResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_get_troubleshooting_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[TroubleshootingParameters, Field(description="Parameters that define the resource to troubleshoot.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_get_troubleshooting

        Initiate troubleshooting on a specified resource

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the resource to troubleshoot. (required)
        :type parameters: TroubleshootingParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_troubleshooting_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TroubleshootingResult",
            '202': "TroubleshootingResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_get_troubleshooting_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_get_troubleshooting_result(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[QueryTroubleshootingParameters, Field(description="Parameters that define the resource to query the troubleshooting result.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TroubleshootingResult:
        """network_watchers_get_troubleshooting_result

        Get the last completed troubleshooting result on a specified resource

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the resource to query the troubleshooting result. (required)
        :type parameters: QueryTroubleshootingParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_troubleshooting_result_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TroubleshootingResult",
            '202': "TroubleshootingResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_get_troubleshooting_result_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[QueryTroubleshootingParameters, Field(description="Parameters that define the resource to query the troubleshooting result.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TroubleshootingResult]:
        """network_watchers_get_troubleshooting_result

        Get the last completed troubleshooting result on a specified resource

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the resource to query the troubleshooting result. (required)
        :type parameters: QueryTroubleshootingParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_troubleshooting_result_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TroubleshootingResult",
            '202': "TroubleshootingResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_get_troubleshooting_result_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[QueryTroubleshootingParameters, Field(description="Parameters that define the resource to query the troubleshooting result.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_get_troubleshooting_result

        Get the last completed troubleshooting result on a specified resource

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the resource to query the troubleshooting result. (required)
        :type parameters: QueryTroubleshootingParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_troubleshooting_result_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TroubleshootingResult",
            '202': "TroubleshootingResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_get_troubleshooting_result_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_get_vm_security_rules(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[SecurityGroupViewParameters, Field(description="Parameters that define the VM to check security groups for.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityGroupViewResult:
        """network_watchers_get_vm_security_rules

        Gets the configured and effective security group rules on the specified VM.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the VM to check security groups for. (required)
        :type parameters: SecurityGroupViewParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_vm_security_rules_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityGroupViewResult",
            '202': "SecurityGroupViewResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_get_vm_security_rules_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[SecurityGroupViewParameters, Field(description="Parameters that define the VM to check security groups for.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityGroupViewResult]:
        """network_watchers_get_vm_security_rules

        Gets the configured and effective security group rules on the specified VM.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the VM to check security groups for. (required)
        :type parameters: SecurityGroupViewParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_vm_security_rules_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityGroupViewResult",
            '202': "SecurityGroupViewResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_get_vm_security_rules_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[SecurityGroupViewParameters, Field(description="Parameters that define the VM to check security groups for.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_get_vm_security_rules

        Gets the configured and effective security group rules on the specified VM.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the VM to check security groups for. (required)
        :type parameters: SecurityGroupViewParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_get_vm_security_rules_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityGroupViewResult",
            '202': "SecurityGroupViewResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_get_vm_security_rules_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_list(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetworkWatcherListResult:
        """network_watchers_list

        Gets all network watchers by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_serialize(
            resource_group_name=resource_group_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcherListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_list_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetworkWatcherListResult]:
        """network_watchers_list

        Gets all network watchers by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_serialize(
            resource_group_name=resource_group_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcherListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_list_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_list

        Gets all network watchers by resource group.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_serialize(
            resource_group_name=resource_group_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcherListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_list_serialize(
        self,
        resource_group_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_list_all(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetworkWatcherListResult:
        """network_watchers_list_all

        Gets all network watchers by subscription.

        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_all_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcherListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_list_all_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetworkWatcherListResult]:
        """network_watchers_list_all

        Gets all network watchers by subscription.

        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_all_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcherListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_list_all_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_list_all

        Gets all network watchers by subscription.

        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_all_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcherListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_list_all_serialize(
        self,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_list_available_providers(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[AvailableProvidersListParameters, Field(description="Parameters that scope the list of available providers.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AvailableProvidersList:
        """network_watchers_list_available_providers

        Lists all available internet service providers for a specified Azure region.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that scope the list of available providers. (required)
        :type parameters: AvailableProvidersListParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_available_providers_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableProvidersList",
            '202': "AvailableProvidersList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_list_available_providers_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[AvailableProvidersListParameters, Field(description="Parameters that scope the list of available providers.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AvailableProvidersList]:
        """network_watchers_list_available_providers

        Lists all available internet service providers for a specified Azure region.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that scope the list of available providers. (required)
        :type parameters: AvailableProvidersListParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_available_providers_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableProvidersList",
            '202': "AvailableProvidersList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_list_available_providers_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[AvailableProvidersListParameters, Field(description="Parameters that scope the list of available providers.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_list_available_providers

        Lists all available internet service providers for a specified Azure region.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that scope the list of available providers. (required)
        :type parameters: AvailableProvidersListParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_list_available_providers_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableProvidersList",
            '202': "AvailableProvidersList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_list_available_providers_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_set_flow_log_configuration(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[FlowLogInformation, Field(description="Parameters that define the configuration of flow log.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FlowLogInformation:
        """network_watchers_set_flow_log_configuration

        Configures flow log and traffic analytics (optional) on a specified resource.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the configuration of flow log. (required)
        :type parameters: FlowLogInformation
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_set_flow_log_configuration_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlowLogInformation",
            '202': "FlowLogInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_set_flow_log_configuration_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[FlowLogInformation, Field(description="Parameters that define the configuration of flow log.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FlowLogInformation]:
        """network_watchers_set_flow_log_configuration

        Configures flow log and traffic analytics (optional) on a specified resource.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the configuration of flow log. (required)
        :type parameters: FlowLogInformation
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_set_flow_log_configuration_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlowLogInformation",
            '202': "FlowLogInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_set_flow_log_configuration_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the network watcher resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher resource.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[FlowLogInformation, Field(description="Parameters that define the configuration of flow log.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_set_flow_log_configuration

        Configures flow log and traffic analytics (optional) on a specified resource.

        :param resource_group_name: The name of the network watcher resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher resource. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the configuration of flow log. (required)
        :type parameters: FlowLogInformation
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_set_flow_log_configuration_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlowLogInformation",
            '202': "FlowLogInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_set_flow_log_configuration_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_update_tags(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NetworkWatchersUpdateTagsRequest, Field(description="Parameters supplied to update network watcher tags.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NetworkWatcher:
        """network_watchers_update_tags

        Updates a network watcher tags.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to update network watcher tags. (required)
        :type parameters: NetworkWatchersUpdateTagsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_update_tags_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_update_tags_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NetworkWatchersUpdateTagsRequest, Field(description="Parameters supplied to update network watcher tags.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NetworkWatcher]:
        """network_watchers_update_tags

        Updates a network watcher tags.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to update network watcher tags. (required)
        :type parameters: NetworkWatchersUpdateTagsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_update_tags_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_update_tags_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[NetworkWatchersUpdateTagsRequest, Field(description="Parameters supplied to update network watcher tags.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_update_tags

        Updates a network watcher tags.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to update network watcher tags. (required)
        :type parameters: NetworkWatchersUpdateTagsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_update_tags_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NetworkWatcher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_update_tags_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def network_watchers_verify_ip_flow(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[VerificationIPFlowParameters, Field(description="Parameters that define the IP flow to be verified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerificationIPFlowResult:
        """network_watchers_verify_ip_flow

        Verify IP flow from the specified VM to a location given the currently configured NSG rules.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the IP flow to be verified. (required)
        :type parameters: VerificationIPFlowParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_verify_ip_flow_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerificationIPFlowResult",
            '202': "VerificationIPFlowResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def network_watchers_verify_ip_flow_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[VerificationIPFlowParameters, Field(description="Parameters that define the IP flow to be verified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerificationIPFlowResult]:
        """network_watchers_verify_ip_flow

        Verify IP flow from the specified VM to a location given the currently configured NSG rules.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the IP flow to be verified. (required)
        :type parameters: VerificationIPFlowParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_verify_ip_flow_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerificationIPFlowResult",
            '202': "VerificationIPFlowResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def network_watchers_verify_ip_flow_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        network_watcher_name: Annotated[StrictStr, Field(description="The name of the network watcher.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        parameters: Annotated[VerificationIPFlowParameters, Field(description="Parameters that define the IP flow to be verified.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """network_watchers_verify_ip_flow

        Verify IP flow from the specified VM to a location given the currently configured NSG rules.

        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param network_watcher_name: The name of the network watcher. (required)
        :type network_watcher_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param subscription_id: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param parameters: Parameters that define the IP flow to be verified. (required)
        :type parameters: VerificationIPFlowParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._network_watchers_verify_ip_flow_serialize(
            resource_group_name=resource_group_name,
            network_watcher_name=network_watcher_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerificationIPFlowResult",
            '202': "VerificationIPFlowResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _network_watchers_verify_ip_flow_serialize(
        self,
        resource_group_name,
        network_watcher_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if network_watcher_name is not None:
            _path_params['networkWatcherName'] = network_watcher_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



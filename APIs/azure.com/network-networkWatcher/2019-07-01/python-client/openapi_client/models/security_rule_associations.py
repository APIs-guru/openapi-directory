# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_interface_association import NetworkInterfaceAssociation
from openapi_client.models.network_interface_association_security_rules_inner import NetworkInterfaceAssociationSecurityRulesInner
from openapi_client.models.security_rule_associations_effective_security_rules_inner import SecurityRuleAssociationsEffectiveSecurityRulesInner
from openapi_client.models.subnet_association import SubnetAssociation
from typing import Optional, Set
from typing_extensions import Self

class SecurityRuleAssociations(BaseModel):
    """
    All security rules associated with the network interface.
    """ # noqa: E501
    default_security_rules: Optional[List[NetworkInterfaceAssociationSecurityRulesInner]] = Field(default=None, description="Collection of default security rules of the network security group.", alias="defaultSecurityRules")
    effective_security_rules: Optional[List[SecurityRuleAssociationsEffectiveSecurityRulesInner]] = Field(default=None, description="Collection of effective security rules.", alias="effectiveSecurityRules")
    network_interface_association: Optional[NetworkInterfaceAssociation] = Field(default=None, alias="networkInterfaceAssociation")
    subnet_association: Optional[SubnetAssociation] = Field(default=None, alias="subnetAssociation")
    __properties: ClassVar[List[str]] = ["defaultSecurityRules", "effectiveSecurityRules", "networkInterfaceAssociation", "subnetAssociation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityRuleAssociations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in default_security_rules (list)
        _items = []
        if self.default_security_rules:
            for _item_default_security_rules in self.default_security_rules:
                if _item_default_security_rules:
                    _items.append(_item_default_security_rules.to_dict())
            _dict['defaultSecurityRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in effective_security_rules (list)
        _items = []
        if self.effective_security_rules:
            for _item_effective_security_rules in self.effective_security_rules:
                if _item_effective_security_rules:
                    _items.append(_item_effective_security_rules.to_dict())
            _dict['effectiveSecurityRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_interface_association
        if self.network_interface_association:
            _dict['networkInterfaceAssociation'] = self.network_interface_association.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet_association
        if self.subnet_association:
            _dict['subnetAssociation'] = self.subnet_association.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityRuleAssociations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultSecurityRules": [NetworkInterfaceAssociationSecurityRulesInner.from_dict(_item) for _item in obj["defaultSecurityRules"]] if obj.get("defaultSecurityRules") is not None else None,
            "effectiveSecurityRules": [SecurityRuleAssociationsEffectiveSecurityRulesInner.from_dict(_item) for _item in obj["effectiveSecurityRules"]] if obj.get("effectiveSecurityRules") is not None else None,
            "networkInterfaceAssociation": NetworkInterfaceAssociation.from_dict(obj["networkInterfaceAssociation"]) if obj.get("networkInterfaceAssociation") is not None else None,
            "subnetAssociation": SubnetAssociation.from_dict(obj["subnetAssociation"]) if obj.get("subnetAssociation") is not None else None
        })
        return _obj



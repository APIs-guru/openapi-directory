# coding: utf-8

"""
    iotHubClient

    Use this API to manage the IoT hubs in your Azure subscription.

    The version of the OpenAPI document: 2019-11-04
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.routing_event_hub_properties import RoutingEventHubProperties
from openapi_client.models.routing_service_bus_queue_endpoint_properties import RoutingServiceBusQueueEndpointProperties
from openapi_client.models.routing_service_bus_topic_endpoint_properties import RoutingServiceBusTopicEndpointProperties
from openapi_client.models.routing_storage_container_properties import RoutingStorageContainerProperties
from typing import Optional, Set
from typing_extensions import Self

class RoutingEndpoints(BaseModel):
    """
    The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is allowed across all endpoint types for free hubs.
    """ # noqa: E501
    event_hubs: Optional[List[RoutingEventHubProperties]] = Field(default=None, description="The list of Event Hubs endpoints that IoT hub routes messages to, based on the routing rules. This list does not include the built-in Event Hubs endpoint.", alias="eventHubs")
    service_bus_queues: Optional[List[RoutingServiceBusQueueEndpointProperties]] = Field(default=None, description="The list of Service Bus queue endpoints that IoT hub routes the messages to, based on the routing rules.", alias="serviceBusQueues")
    service_bus_topics: Optional[List[RoutingServiceBusTopicEndpointProperties]] = Field(default=None, description="The list of Service Bus topic endpoints that the IoT hub routes the messages to, based on the routing rules.", alias="serviceBusTopics")
    storage_containers: Optional[List[RoutingStorageContainerProperties]] = Field(default=None, description="The list of storage container endpoints that IoT hub routes messages to, based on the routing rules.", alias="storageContainers")
    __properties: ClassVar[List[str]] = ["eventHubs", "serviceBusQueues", "serviceBusTopics", "storageContainers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutingEndpoints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in event_hubs (list)
        _items = []
        if self.event_hubs:
            for _item_event_hubs in self.event_hubs:
                if _item_event_hubs:
                    _items.append(_item_event_hubs.to_dict())
            _dict['eventHubs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_bus_queues (list)
        _items = []
        if self.service_bus_queues:
            for _item_service_bus_queues in self.service_bus_queues:
                if _item_service_bus_queues:
                    _items.append(_item_service_bus_queues.to_dict())
            _dict['serviceBusQueues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_bus_topics (list)
        _items = []
        if self.service_bus_topics:
            for _item_service_bus_topics in self.service_bus_topics:
                if _item_service_bus_topics:
                    _items.append(_item_service_bus_topics.to_dict())
            _dict['serviceBusTopics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in storage_containers (list)
        _items = []
        if self.storage_containers:
            for _item_storage_containers in self.storage_containers:
                if _item_storage_containers:
                    _items.append(_item_storage_containers.to_dict())
            _dict['storageContainers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutingEndpoints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventHubs": [RoutingEventHubProperties.from_dict(_item) for _item in obj["eventHubs"]] if obj.get("eventHubs") is not None else None,
            "serviceBusQueues": [RoutingServiceBusQueueEndpointProperties.from_dict(_item) for _item in obj["serviceBusQueues"]] if obj.get("serviceBusQueues") is not None else None,
            "serviceBusTopics": [RoutingServiceBusTopicEndpointProperties.from_dict(_item) for _item in obj["serviceBusTopics"]] if obj.get("serviceBusTopics") is not None else None,
            "storageContainers": [RoutingStorageContainerProperties.from_dict(_item) for _item in obj["storageContainers"]] if obj.get("storageContainers") is not None else None
        })
        return _obj



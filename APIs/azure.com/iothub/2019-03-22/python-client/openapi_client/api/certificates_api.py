# coding: utf-8

"""
    iotHubClient

    Use this API to manage the IoT hubs in your Azure subscription.

    The version of the OpenAPI document: 2019-03-22
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.certificate_body_description import CertificateBodyDescription
from openapi_client.models.certificate_description import CertificateDescription
from openapi_client.models.certificate_list_description import CertificateListDescription
from openapi_client.models.certificate_verification_description import CertificateVerificationDescription
from openapi_client.models.certificate_with_nonce_description import CertificateWithNonceDescription

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CertificatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def certificates_create_or_update(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        certificate_description: Annotated[CertificateBodyDescription, Field(description="The certificate body.")],
        if_match: Annotated[Optional[StrictStr], Field(description="ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CertificateDescription:
        """Upload the certificate to the IoT hub.

        Adds new or replaces existing certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param certificate_description: The certificate body. (required)
        :type certificate_description: CertificateBodyDescription
        :param if_match: ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_create_or_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            certificate_description=certificate_description,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
            '201': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificates_create_or_update_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        certificate_description: Annotated[CertificateBodyDescription, Field(description="The certificate body.")],
        if_match: Annotated[Optional[StrictStr], Field(description="ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CertificateDescription]:
        """Upload the certificate to the IoT hub.

        Adds new or replaces existing certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param certificate_description: The certificate body. (required)
        :type certificate_description: CertificateBodyDescription
        :param if_match: ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_create_or_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            certificate_description=certificate_description,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
            '201': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificates_create_or_update_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        certificate_description: Annotated[CertificateBodyDescription, Field(description="The certificate body.")],
        if_match: Annotated[Optional[StrictStr], Field(description="ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload the certificate to the IoT hub.

        Adds new or replaces existing certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param certificate_description: The certificate body. (required)
        :type certificate_description: CertificateBodyDescription
        :param if_match: ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_create_or_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            certificate_description=certificate_description,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
            '201': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificates_create_or_update_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        resource_name,
        certificate_name,
        certificate_description,
        if_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if resource_name is not None:
            _path_params['resourceName'] = resource_name
        if certificate_name is not None:
            _path_params['certificateName'] = certificate_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter
        if certificate_description is not None:
            _body_params = certificate_description


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificates_delete(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an X509 certificate.

        Deletes an existing X509 certificate or does nothing if it does not exist.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_delete_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificates_delete_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an X509 certificate.

        Deletes an existing X509 certificate or does nothing if it does not exist.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_delete_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificates_delete_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an X509 certificate.

        Deletes an existing X509 certificate or does nothing if it does not exist.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_delete_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificates_delete_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        resource_name,
        certificate_name,
        if_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if resource_name is not None:
            _path_params['resourceName'] = resource_name
        if certificate_name is not None:
            _path_params['certificateName'] = certificate_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificates_generate_verification_code(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CertificateWithNonceDescription:
        """Generate verification code for proof of possession flow.

        Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_generate_verification_code_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateWithNonceDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificates_generate_verification_code_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CertificateWithNonceDescription]:
        """Generate verification code for proof of possession flow.

        Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_generate_verification_code_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateWithNonceDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificates_generate_verification_code_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate verification code for proof of possession flow.

        Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_generate_verification_code_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateWithNonceDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificates_generate_verification_code_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        resource_name,
        certificate_name,
        if_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if resource_name is not None:
            _path_params['resourceName'] = resource_name
        if certificate_name is not None:
            _path_params['certificateName'] = certificate_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificates_get(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CertificateDescription:
        """Get the certificate.

        Returns the certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificates_get_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CertificateDescription]:
        """Get the certificate.

        Returns the certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificates_get_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the certificate.

        Returns the certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificates_get_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        resource_name,
        certificate_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if resource_name is not None:
            _path_params['resourceName'] = resource_name
        if certificate_name is not None:
            _path_params['certificateName'] = certificate_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificates_list_by_iot_hub(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CertificateListDescription:
        """Get the certificate list.

        Returns the list of certificates.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_list_by_iot_hub_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateListDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificates_list_by_iot_hub_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CertificateListDescription]:
        """Get the certificate list.

        Returns the list of certificates.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_list_by_iot_hub_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateListDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificates_list_by_iot_hub_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the certificate list.

        Returns the list of certificates.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_list_by_iot_hub_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateListDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificates_list_by_iot_hub_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        resource_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if resource_name is not None:
            _path_params['resourceName'] = resource_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificates_verify(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        certificate_verification_body: Annotated[CertificateVerificationDescription, Field(description="The name of the certificate")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CertificateDescription:
        """Verify certificate's private key possession.

        Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param certificate_verification_body: The name of the certificate (required)
        :type certificate_verification_body: CertificateVerificationDescription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_verify_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            certificate_verification_body=certificate_verification_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificates_verify_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        certificate_verification_body: Annotated[CertificateVerificationDescription, Field(description="The name of the certificate")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CertificateDescription]:
        """Verify certificate's private key possession.

        Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param certificate_verification_body: The name of the certificate (required)
        :type certificate_verification_body: CertificateVerificationDescription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_verify_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            certificate_verification_body=certificate_verification_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificates_verify_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the IoT hub.")],
        resource_name: Annotated[StrictStr, Field(description="The name of the IoT hub.")],
        certificate_name: Annotated[str, Field(strict=True, description="The name of the certificate")],
        if_match: Annotated[StrictStr, Field(description="ETag of the Certificate.")],
        certificate_verification_body: Annotated[CertificateVerificationDescription, Field(description="The name of the certificate")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verify certificate's private key possession.

        Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.

        :param api_version: The version of the API. (required)
        :type api_version: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the IoT hub. (required)
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. (required)
        :type resource_name: str
        :param certificate_name: The name of the certificate (required)
        :type certificate_name: str
        :param if_match: ETag of the Certificate. (required)
        :type if_match: str
        :param certificate_verification_body: The name of the certificate (required)
        :type certificate_verification_body: CertificateVerificationDescription
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificates_verify_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            if_match=if_match,
            certificate_verification_body=certificate_verification_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificates_verify_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        resource_name,
        certificate_name,
        if_match,
        certificate_verification_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if resource_name is not None:
            _path_params['resourceName'] = resource_name
        if certificate_name is not None:
            _path_params['certificateName'] = certificate_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter
        if certificate_verification_body is not None:
            _body_params = certificate_verification_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



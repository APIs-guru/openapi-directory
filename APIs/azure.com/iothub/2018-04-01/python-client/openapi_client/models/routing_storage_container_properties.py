# coding: utf-8

"""
    iotHubClient

    Use this API to manage the IoT hubs in your Azure subscription.

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RoutingStorageContainerProperties(BaseModel):
    """
    The properties related to a storage container endpoint.
    """ # noqa: E501
    batch_frequency_in_seconds: Optional[Annotated[int, Field(le=720, strict=True, ge=60)]] = Field(default=None, description="Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.", alias="batchFrequencyInSeconds")
    connection_string: StrictStr = Field(description="The connection string of the storage account.", alias="connectionString")
    container_name: StrictStr = Field(description="The name of storage container in the storage account.", alias="containerName")
    encoding: Optional[StrictStr] = Field(default=None, description="Encoding that is used to serialize messages to blobs. Supported values are 'avro' and 'avroDeflate'. Default value is 'avro'.")
    file_name_format: Optional[StrictStr] = Field(default=None, description="File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.", alias="fileNameFormat")
    max_chunk_size_in_bytes: Optional[Annotated[int, Field(le=524288000, strict=True, ge=10485760)]] = Field(default=None, description="Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).", alias="maxChunkSizeInBytes")
    name: Annotated[str, Field(strict=True)] = Field(description="The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, operationsMonitoringEvents, fileNotifications, $default. Endpoint names must be unique across endpoint types.")
    resource_group: Optional[StrictStr] = Field(default=None, description="The name of the resource group of the storage account.", alias="resourceGroup")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The subscription identifier of the storage account.", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["batchFrequencyInSeconds", "connectionString", "containerName", "encoding", "fileNameFormat", "maxChunkSizeInBytes", "name", "resourceGroup", "subscriptionId"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z0-9-._]{1,64}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9-._]{1,64}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutingStorageContainerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutingStorageContainerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchFrequencyInSeconds": obj.get("batchFrequencyInSeconds"),
            "connectionString": obj.get("connectionString"),
            "containerName": obj.get("containerName"),
            "encoding": obj.get("encoding"),
            "fileNameFormat": obj.get("fileNameFormat"),
            "maxChunkSizeInBytes": obj.get("maxChunkSizeInBytes"),
            "name": obj.get("name"),
            "resourceGroup": obj.get("resourceGroup"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj



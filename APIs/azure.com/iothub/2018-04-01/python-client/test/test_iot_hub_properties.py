# coding: utf-8

"""
    iotHubClient

    Use this API to manage the IoT hubs in your Azure subscription.

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.iot_hub_properties import IotHubProperties

class TestIotHubProperties(unittest.TestCase):
    """IotHubProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IotHubProperties:
        """Test IotHubProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IotHubProperties`
        """
        model = IotHubProperties()
        if include_optional:
            return IotHubProperties(
                authorization_policies = [
                    openapi_client.models.shared_access_signature_authorization_rule.SharedAccessSignatureAuthorizationRule(
                        key_name = '', 
                        primary_key = '', 
                        rights = 'RegistryRead', 
                        secondary_key = '', )
                    ],
                cloud_to_device = openapi_client.models.cloud_to_device_properties.CloudToDeviceProperties(
                    default_ttl_as_iso8601 = '', 
                    feedback = openapi_client.models.feedback_properties.FeedbackProperties(
                        lock_duration_as_iso8601 = '', 
                        max_delivery_count = 1, 
                        ttl_as_iso8601 = '', ), 
                    max_delivery_count = 1, ),
                comments = '',
                enable_file_upload_notifications = True,
                event_hub_endpoints = {
                    'key' : openapi_client.models.event_hub_properties.EventHubProperties(
                        endpoint = '', 
                        partition_count = 56, 
                        partition_ids = [
                            ''
                            ], 
                        path = '', 
                        retention_time_in_days = 56, )
                    },
                features = 'None',
                host_name = '',
                ip_filter_rules = [
                    openapi_client.models.ip_filter_rule.IpFilterRule(
                        action = 'Accept', 
                        filter_name = '', 
                        ip_mask = '', )
                    ],
                messaging_endpoints = {
                    'key' : openapi_client.models.messaging_endpoint_properties.MessagingEndpointProperties(
                        lock_duration_as_iso8601 = '', 
                        max_delivery_count = 1, 
                        ttl_as_iso8601 = '', )
                    },
                operations_monitoring_properties = openapi_client.models.operations_monitoring_properties.OperationsMonitoringProperties(
                    events = {
                        'None' : 'None'
                        }, ),
                provisioning_state = '',
                routing = openapi_client.models.routing_properties.RoutingProperties(
                    endpoints = openapi_client.models.routing_endpoints.RoutingEndpoints(
                        event_hubs = [
                            openapi_client.models.routing_event_hub_properties.RoutingEventHubProperties(
                                connection_string = '', 
                                name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                                resource_group = '', 
                                subscription_id = '', )
                            ], 
                        service_bus_queues = [
                            openapi_client.models.routing_service_bus_queue_endpoint_properties.RoutingServiceBusQueueEndpointProperties(
                                connection_string = '', 
                                name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                                resource_group = '', 
                                subscription_id = '', )
                            ], 
                        service_bus_topics = [
                            openapi_client.models.routing_service_bus_topic_endpoint_properties.RoutingServiceBusTopicEndpointProperties(
                                connection_string = '', 
                                name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                                resource_group = '', 
                                subscription_id = '', )
                            ], 
                        storage_containers = [
                            openapi_client.models.routing_storage_container_properties.RoutingStorageContainerProperties(
                                batch_frequency_in_seconds = 6E+1, 
                                connection_string = '', 
                                container_name = '', 
                                encoding = '', 
                                file_name_format = '', 
                                max_chunk_size_in_bytes = 1.048576E+7, 
                                name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                                resource_group = '', 
                                subscription_id = '', )
                            ], ), 
                    fallback_route = openapi_client.models.fallback_route_properties.FallbackRouteProperties(
                        condition = '', 
                        endpoint_names = [
                            ''
                            ], 
                        is_enabled = True, 
                        name = '', 
                        source = 'DeviceMessages', ), 
                    routes = [
                        openapi_client.models.route_properties.RouteProperties(
                            condition = '', 
                            endpoint_names = [
                                ''
                                ], 
                            is_enabled = True, 
                            name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                            source = 'Invalid', )
                        ], ),
                state = '',
                storage_endpoints = {
                    'key' : openapi_client.models.storage_endpoint_properties.StorageEndpointProperties(
                        connection_string = '', 
                        container_name = '', 
                        sas_ttl_as_iso8601 = '', )
                    }
            )
        else:
            return IotHubProperties(
        )
        """

    def testIotHubProperties(self):
        """Test IotHubProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

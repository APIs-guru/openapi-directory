# coding: utf-8

"""
    iotHubClient

    Use this API to manage the IoT hubs in your Azure subscription.

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.routing_properties import RoutingProperties

class TestRoutingProperties(unittest.TestCase):
    """RoutingProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RoutingProperties:
        """Test RoutingProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RoutingProperties`
        """
        model = RoutingProperties()
        if include_optional:
            return RoutingProperties(
                endpoints = openapi_client.models.routing_endpoints.RoutingEndpoints(
                    event_hubs = [
                        openapi_client.models.routing_event_hub_properties.RoutingEventHubProperties(
                            connection_string = '', 
                            name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                            resource_group = '', 
                            subscription_id = '', )
                        ], 
                    service_bus_queues = [
                        openapi_client.models.routing_service_bus_queue_endpoint_properties.RoutingServiceBusQueueEndpointProperties(
                            connection_string = '', 
                            name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                            resource_group = '', 
                            subscription_id = '', )
                        ], 
                    service_bus_topics = [
                        openapi_client.models.routing_service_bus_topic_endpoint_properties.RoutingServiceBusTopicEndpointProperties(
                            connection_string = '', 
                            name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                            resource_group = '', 
                            subscription_id = '', )
                        ], 
                    storage_containers = [
                        openapi_client.models.routing_storage_container_properties.RoutingStorageContainerProperties(
                            batch_frequency_in_seconds = 6E+1, 
                            connection_string = '', 
                            container_name = '', 
                            encoding = '', 
                            file_name_format = '', 
                            max_chunk_size_in_bytes = 1.048576E+7, 
                            name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                            resource_group = '', 
                            subscription_id = '', )
                        ], ),
                fallback_route = openapi_client.models.fallback_route_properties.FallbackRouteProperties(
                    condition = '', 
                    endpoint_names = [
                        ''
                        ], 
                    is_enabled = True, 
                    name = '', 
                    source = 'DeviceMessages', ),
                routes = [
                    openapi_client.models.route_properties.RouteProperties(
                        condition = '', 
                        endpoint_names = [
                            ''
                            ], 
                        is_enabled = True, 
                        name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                        source = 'Invalid', )
                    ]
            )
        else:
            return RoutingProperties(
        )
        """

    def testRoutingProperties(self):
        """Test RoutingProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

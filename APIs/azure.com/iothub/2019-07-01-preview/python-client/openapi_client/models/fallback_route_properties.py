# coding: utf-8

"""
    iotHubClient

    Use this API to manage the IoT hubs in your Azure subscription.

    The version of the OpenAPI document: 2019-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FallbackRouteProperties(BaseModel):
    """
    The properties of the fallback route. IoT Hub uses these properties when it routes messages to the fallback endpoint.
    """ # noqa: E501
    condition: Optional[StrictStr] = Field(default=None, description="The condition which is evaluated in order to apply the fallback route. If the condition is not provided it will evaluate to true by default. For grammar, See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language")
    endpoint_names: Annotated[List[StrictStr], Field(min_length=1, max_length=1)] = Field(description="The list of endpoints to which the messages that satisfy the condition are routed to. Currently only 1 endpoint is allowed.", alias="endpointNames")
    is_enabled: StrictBool = Field(description="Used to specify whether the fallback route is enabled.", alias="isEnabled")
    name: Optional[StrictStr] = Field(default=None, description="The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.")
    source: StrictStr = Field(description="The source to which the routing rule is to be applied to. For example, DeviceMessages")
    __properties: ClassVar[List[str]] = ["condition", "endpointNames", "isEnabled", "name", "source"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DeviceMessages']):
            raise ValueError("must be one of enum values ('DeviceMessages')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FallbackRouteProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FallbackRouteProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "condition": obj.get("condition"),
            "endpointNames": obj.get("endpointNames"),
            "isEnabled": obj.get("isEnabled"),
            "name": obj.get("name"),
            "source": obj.get("source")
        })
        return _obj



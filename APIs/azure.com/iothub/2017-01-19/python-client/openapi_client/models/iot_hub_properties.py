# coding: utf-8

"""
    iotHubClient

    Use this API to manage the IoT hubs in your Azure subscription.

    The version of the OpenAPI document: 2017-01-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_to_device_properties import CloudToDeviceProperties
from openapi_client.models.event_hub_properties import EventHubProperties
from openapi_client.models.ip_filter_rule import IpFilterRule
from openapi_client.models.messaging_endpoint_properties import MessagingEndpointProperties
from openapi_client.models.operations_monitoring_properties import OperationsMonitoringProperties
from openapi_client.models.routing_properties import RoutingProperties
from openapi_client.models.shared_access_signature_authorization_rule import SharedAccessSignatureAuthorizationRule
from openapi_client.models.storage_endpoint_properties import StorageEndpointProperties
from typing import Optional, Set
from typing_extensions import Self

class IotHubProperties(BaseModel):
    """
    The properties of an IoT hub.
    """ # noqa: E501
    authorization_policies: Optional[List[SharedAccessSignatureAuthorizationRule]] = Field(default=None, description="The shared access policies you can use to secure a connection to the IoT hub.", alias="authorizationPolicies")
    cloud_to_device: Optional[CloudToDeviceProperties] = Field(default=None, alias="cloudToDevice")
    comments: Optional[StrictStr] = Field(default=None, description="Comments.")
    enable_file_upload_notifications: Optional[StrictBool] = Field(default=None, description="If True, file upload notifications are enabled.", alias="enableFileUploadNotifications")
    event_hub_endpoints: Optional[Dict[str, EventHubProperties]] = Field(default=None, description="The Event Hub-compatible endpoint properties. The possible keys to this dictionary are events and operationsMonitoringEvents. Both of these keys have to be present in the dictionary while making create or update calls for the IoT hub.", alias="eventHubEndpoints")
    features: Optional[StrictStr] = Field(default=None, description="The capabilities and features enabled for the IoT hub.")
    host_name: Optional[StrictStr] = Field(default=None, description="The name of the host.", alias="hostName")
    ip_filter_rules: Optional[List[IpFilterRule]] = Field(default=None, description="The IP filter rules.", alias="ipFilterRules")
    messaging_endpoints: Optional[Dict[str, MessagingEndpointProperties]] = Field(default=None, description="The messaging endpoint properties for the file upload notification queue.", alias="messagingEndpoints")
    operations_monitoring_properties: Optional[OperationsMonitoringProperties] = Field(default=None, alias="operationsMonitoringProperties")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state.", alias="provisioningState")
    routing: Optional[RoutingProperties] = None
    storage_endpoints: Optional[Dict[str, StorageEndpointProperties]] = Field(default=None, description="The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.", alias="storageEndpoints")
    __properties: ClassVar[List[str]] = ["authorizationPolicies", "cloudToDevice", "comments", "enableFileUploadNotifications", "eventHubEndpoints", "features", "hostName", "ipFilterRules", "messagingEndpoints", "operationsMonitoringProperties", "provisioningState", "routing", "storageEndpoints"]

    @field_validator('features')
    def features_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'DeviceManagement']):
            raise ValueError("must be one of enum values ('None', 'DeviceManagement')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IotHubProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "host_name",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorization_policies (list)
        _items = []
        if self.authorization_policies:
            for _item_authorization_policies in self.authorization_policies:
                if _item_authorization_policies:
                    _items.append(_item_authorization_policies.to_dict())
            _dict['authorizationPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of cloud_to_device
        if self.cloud_to_device:
            _dict['cloudToDevice'] = self.cloud_to_device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in event_hub_endpoints (dict)
        _field_dict = {}
        if self.event_hub_endpoints:
            for _key_event_hub_endpoints in self.event_hub_endpoints:
                if self.event_hub_endpoints[_key_event_hub_endpoints]:
                    _field_dict[_key_event_hub_endpoints] = self.event_hub_endpoints[_key_event_hub_endpoints].to_dict()
            _dict['eventHubEndpoints'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in ip_filter_rules (list)
        _items = []
        if self.ip_filter_rules:
            for _item_ip_filter_rules in self.ip_filter_rules:
                if _item_ip_filter_rules:
                    _items.append(_item_ip_filter_rules.to_dict())
            _dict['ipFilterRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in messaging_endpoints (dict)
        _field_dict = {}
        if self.messaging_endpoints:
            for _key_messaging_endpoints in self.messaging_endpoints:
                if self.messaging_endpoints[_key_messaging_endpoints]:
                    _field_dict[_key_messaging_endpoints] = self.messaging_endpoints[_key_messaging_endpoints].to_dict()
            _dict['messagingEndpoints'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of operations_monitoring_properties
        if self.operations_monitoring_properties:
            _dict['operationsMonitoringProperties'] = self.operations_monitoring_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routing
        if self.routing:
            _dict['routing'] = self.routing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in storage_endpoints (dict)
        _field_dict = {}
        if self.storage_endpoints:
            for _key_storage_endpoints in self.storage_endpoints:
                if self.storage_endpoints[_key_storage_endpoints]:
                    _field_dict[_key_storage_endpoints] = self.storage_endpoints[_key_storage_endpoints].to_dict()
            _dict['storageEndpoints'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IotHubProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationPolicies": [SharedAccessSignatureAuthorizationRule.from_dict(_item) for _item in obj["authorizationPolicies"]] if obj.get("authorizationPolicies") is not None else None,
            "cloudToDevice": CloudToDeviceProperties.from_dict(obj["cloudToDevice"]) if obj.get("cloudToDevice") is not None else None,
            "comments": obj.get("comments"),
            "enableFileUploadNotifications": obj.get("enableFileUploadNotifications"),
            "eventHubEndpoints": dict(
                (_k, EventHubProperties.from_dict(_v))
                for _k, _v in obj["eventHubEndpoints"].items()
            )
            if obj.get("eventHubEndpoints") is not None
            else None,
            "features": obj.get("features"),
            "hostName": obj.get("hostName"),
            "ipFilterRules": [IpFilterRule.from_dict(_item) for _item in obj["ipFilterRules"]] if obj.get("ipFilterRules") is not None else None,
            "messagingEndpoints": dict(
                (_k, MessagingEndpointProperties.from_dict(_v))
                for _k, _v in obj["messagingEndpoints"].items()
            )
            if obj.get("messagingEndpoints") is not None
            else None,
            "operationsMonitoringProperties": OperationsMonitoringProperties.from_dict(obj["operationsMonitoringProperties"]) if obj.get("operationsMonitoringProperties") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "routing": RoutingProperties.from_dict(obj["routing"]) if obj.get("routing") is not None else None,
            "storageEndpoints": dict(
                (_k, StorageEndpointProperties.from_dict(_v))
                for _k, _v in obj["storageEndpoints"].items()
            )
            if obj.get("storageEndpoints") is not None
            else None
        })
        return _obj



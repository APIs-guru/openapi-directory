# coding: utf-8

"""
    iotHubClient

    Use this API to manage the IoT hubs in your Azure subscription.

    The version of the OpenAPI document: 2017-01-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JobResponse(BaseModel):
    """
    The properties of the Job Response object.
    """ # noqa: E501
    end_time_utc: Optional[StrictStr] = Field(default=None, description="The time the job stopped processing.", alias="endTimeUtc")
    failure_reason: Optional[StrictStr] = Field(default=None, description="If status == failed, this string containing the reason for the failure.", alias="failureReason")
    job_id: Optional[StrictStr] = Field(default=None, description="The job identifier.", alias="jobId")
    parent_job_id: Optional[StrictStr] = Field(default=None, description="The job identifier of the parent job, if any.", alias="parentJobId")
    start_time_utc: Optional[StrictStr] = Field(default=None, description="The start time of the job.", alias="startTimeUtc")
    status: Optional[StrictStr] = Field(default=None, description="The status of the job.")
    status_message: Optional[StrictStr] = Field(default=None, description="The status message for the job.", alias="statusMessage")
    type: Optional[StrictStr] = Field(default=None, description="The type of the job.")
    __properties: ClassVar[List[str]] = ["endTimeUtc", "failureReason", "jobId", "parentJobId", "startTimeUtc", "status", "statusMessage", "type"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'enqueued', 'running', 'completed', 'failed', 'cancelled']):
            raise ValueError("must be one of enum values ('unknown', 'enqueued', 'running', 'completed', 'failed', 'cancelled')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'export', 'import', 'backup', 'readDeviceProperties', 'writeDeviceProperties', 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice', 'firmwareUpdate']):
            raise ValueError("must be one of enum values ('unknown', 'export', 'import', 'backup', 'readDeviceProperties', 'writeDeviceProperties', 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice', 'firmwareUpdate')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time_utc",
            "failure_reason",
            "job_id",
            "parent_job_id",
            "start_time_utc",
            "status",
            "status_message",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTimeUtc": obj.get("endTimeUtc"),
            "failureReason": obj.get("failureReason"),
            "jobId": obj.get("jobId"),
            "parentJobId": obj.get("parentJobId"),
            "startTimeUtc": obj.get("startTimeUtc"),
            "status": obj.get("status"),
            "statusMessage": obj.get("statusMessage"),
            "type": obj.get("type")
        })
        return _obj



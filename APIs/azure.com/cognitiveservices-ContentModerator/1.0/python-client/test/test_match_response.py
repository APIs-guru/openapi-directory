# coding: utf-8

"""
    Content Moderator Client

    You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.match_response import MatchResponse

class TestMatchResponse(unittest.TestCase):
    """MatchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MatchResponse:
        """Test MatchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MatchResponse`
        """
        model = MatchResponse()
        if include_optional:
            return MatchResponse(
                cache_id = '',
                is_match = True,
                matches = [
                    openapi_client.models.match.Match(
                        label = '', 
                        match_id = 56, 
                        score = 1.337, 
                        source = '', 
                        tags = [
                            56
                            ], )
                    ],
                status = openapi_client.models.status.Status(
                    code = 56, 
                    description = '', 
                    exception = '', ),
                tracking_id = ''
            )
        else:
            return MatchResponse(
        )
        """

    def testMatchResponse(self):
        """Test MatchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

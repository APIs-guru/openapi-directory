# coding: utf-8

"""
    Content Moderator Client

    You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.key_value_pair import KeyValuePair
from typing import Optional, Set
from typing_extensions import Self

class Review(BaseModel):
    """
    The Review object.
    """ # noqa: E501
    callback_endpoint: Optional[StrictStr] = Field(default=None, description="The callback endpoint.", alias="CallbackEndpoint")
    content: Optional[StrictStr] = Field(default=None, description="The content value.", alias="Content")
    content_id: Optional[StrictStr] = Field(default=None, description="Id of the content.", alias="ContentId")
    created_by: Optional[StrictStr] = Field(default=None, description="The reviewer name.", alias="CreatedBy")
    metadata: Optional[List[KeyValuePair]] = Field(default=None, description="Array of KeyValue.", alias="Metadata")
    review_id: Optional[StrictStr] = Field(default=None, description="Id of the review.", alias="ReviewId")
    reviewer_result_tags: Optional[List[KeyValuePair]] = Field(default=None, description="Array of KeyValue with Reviewer set Tags.", alias="ReviewerResultTags")
    status: Optional[StrictStr] = Field(default=None, description="The status string (<Pending, Complete>).", alias="Status")
    sub_team: Optional[StrictStr] = Field(default=None, description="Name of the subteam.", alias="SubTeam")
    type: Optional[StrictStr] = Field(default=None, description="The type of content.", alias="Type")
    __properties: ClassVar[List[str]] = ["CallbackEndpoint", "Content", "ContentId", "CreatedBy", "Metadata", "ReviewId", "ReviewerResultTags", "Status", "SubTeam", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Review from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['Metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviewer_result_tags (list)
        _items = []
        if self.reviewer_result_tags:
            for _item_reviewer_result_tags in self.reviewer_result_tags:
                if _item_reviewer_result_tags:
                    _items.append(_item_reviewer_result_tags.to_dict())
            _dict['ReviewerResultTags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Review from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CallbackEndpoint": obj.get("CallbackEndpoint"),
            "Content": obj.get("Content"),
            "ContentId": obj.get("ContentId"),
            "CreatedBy": obj.get("CreatedBy"),
            "Metadata": [KeyValuePair.from_dict(_item) for _item in obj["Metadata"]] if obj.get("Metadata") is not None else None,
            "ReviewId": obj.get("ReviewId"),
            "ReviewerResultTags": [KeyValuePair.from_dict(_item) for _item in obj["ReviewerResultTags"]] if obj.get("ReviewerResultTags") is not None else None,
            "Status": obj.get("Status"),
            "SubTeam": obj.get("SubTeam"),
            "Type": obj.get("Type")
        })
        return _obj



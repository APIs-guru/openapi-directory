# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_name import MetricName
from openapi_client.models.metric_value import MetricValue
from typing import Optional, Set
from typing_extensions import Self

class Metric(BaseModel):
    """
    Database metrics.
    """ # noqa: E501
    end_time: Optional[datetime] = Field(default=None, description="The end time for the metric (ISO-8601 format).", alias="endTime")
    metric_values: Optional[List[MetricValue]] = Field(default=None, description="The metric values for the specified time window and timestep.", alias="metricValues")
    name: Optional[MetricName] = None
    start_time: Optional[datetime] = Field(default=None, description="The start time for the metric (ISO-8601 format).", alias="startTime")
    time_grain: Optional[StrictStr] = Field(default=None, description="The time step to be used to summarize the metric values.", alias="timeGrain")
    unit: Optional[StrictStr] = Field(default=None, description="The unit of the metric.")
    __properties: ClassVar[List[str]] = ["endTime", "metricValues", "name", "startTime", "timeGrain", "unit"]

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['count', 'bytes', 'seconds', 'percent', 'countPerSecond', 'bytesPerSecond']):
            raise ValueError("must be one of enum values ('count', 'bytes', 'seconds', 'percent', 'countPerSecond', 'bytesPerSecond')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "metric_values",
            "start_time",
            "time_grain",
            "unit",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metric_values (list)
        _items = []
        if self.metric_values:
            for _item_metric_values in self.metric_values:
                if _item_metric_values:
                    _items.append(_item_metric_values.to_dict())
            _dict['metricValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "metricValues": [MetricValue.from_dict(_item) for _item in obj["metricValues"]] if obj.get("metricValues") is not None else None,
            "name": MetricName.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "startTime": obj.get("startTime"),
            "timeGrain": obj.get("timeGrain"),
            "unit": obj.get("unit")
        })
        return _obj



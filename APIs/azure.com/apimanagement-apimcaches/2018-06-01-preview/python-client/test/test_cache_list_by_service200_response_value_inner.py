# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on Cache entity in your Azure API Management deployment. Azure API Management also allows for caching responses in an external Azure Cache for Redis. For more information refer to [External Redis Cache in ApiManagement](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-cache-external).

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cache_list_by_service200_response_value_inner import CacheListByService200ResponseValueInner

class TestCacheListByService200ResponseValueInner(unittest.TestCase):
    """CacheListByService200ResponseValueInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CacheListByService200ResponseValueInner:
        """Test CacheListByService200ResponseValueInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CacheListByService200ResponseValueInner`
        """
        model = CacheListByService200ResponseValueInner()
        if include_optional:
            return CacheListByService200ResponseValueInner(
                properties = openapi_client.models.cache_list_by_service_200_response_value_inner_properties.Cache_ListByService_200_response_value_inner_properties(
                    connection_string = '', 
                    description = '', 
                    resource_id = '', )
            )
        else:
            return CacheListByService200ResponseValueInner(
        )
        """

    def testCacheListByService200ResponseValueInner(self):
        """Test CacheListByService200ResponseValueInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2015-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.script_actions_get_execution_detail200_response_all_of_execution_summary_inner import ScriptActionsGetExecutionDetail200ResponseAllOfExecutionSummaryInner
from typing import Optional, Set
from typing_extensions import Self

class ScriptActionsGetExecutionDetail200Response(BaseModel):
    """
    The execution details of a script action.
    """ # noqa: E501
    application_name: Optional[StrictStr] = Field(default=None, description="The application name of the script action, if any.", alias="applicationName")
    name: StrictStr = Field(description="The name of the script action.")
    parameters: Optional[StrictStr] = Field(default=None, description="The parameters for the script")
    roles: List[StrictStr] = Field(description="The list of roles where script will be executed.")
    uri: StrictStr = Field(description="The URI to the script.")
    debug_information: Optional[StrictStr] = Field(default=None, description="The script action execution debug information.", alias="debugInformation")
    end_time: Optional[StrictStr] = Field(default=None, description="The end time of script action execution.", alias="endTime")
    execution_summary: Optional[List[ScriptActionsGetExecutionDetail200ResponseAllOfExecutionSummaryInner]] = Field(default=None, description="The summary of script action execution result.", alias="executionSummary")
    operation: Optional[StrictStr] = Field(default=None, description="The reason why the script action was executed.")
    script_execution_id: Optional[StrictInt] = Field(default=None, description="The execution id of the script action.", alias="scriptExecutionId")
    start_time: Optional[StrictStr] = Field(default=None, description="The start time of script action execution.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The current execution status of the script action.")
    __properties: ClassVar[List[str]] = ["applicationName", "name", "parameters", "roles", "uri", "debugInformation", "endTime", "executionSummary", "operation", "scriptExecutionId", "startTime", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScriptActionsGetExecutionDetail200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "application_name",
            "debug_information",
            "end_time",
            "execution_summary",
            "operation",
            "script_execution_id",
            "start_time",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in execution_summary (list)
        _items = []
        if self.execution_summary:
            for _item_execution_summary in self.execution_summary:
                if _item_execution_summary:
                    _items.append(_item_execution_summary.to_dict())
            _dict['executionSummary'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScriptActionsGetExecutionDetail200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationName": obj.get("applicationName"),
            "name": obj.get("name"),
            "parameters": obj.get("parameters"),
            "roles": obj.get("roles"),
            "uri": obj.get("uri"),
            "debugInformation": obj.get("debugInformation"),
            "endTime": obj.get("endTime"),
            "executionSummary": [ScriptActionsGetExecutionDetail200ResponseAllOfExecutionSummaryInner.from_dict(_item) for _item in obj["executionSummary"]] if obj.get("executionSummary") is not None else None,
            "operation": obj.get("operation"),
            "scriptExecutionId": obj.get("scriptExecutionId"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    StorageManagementClient

    The Admin Storage Management Client.

    The version of the OpenAPI document: 2015-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.shares_list_metric_definitions200_response_value_inner_metric_availabilities_inner import SharesListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner
from openapi_client.models.shares_list_metric_definitions200_response_value_inner_name import SharesListMetricDefinitions200ResponseValueInnerName
from typing import Optional, Set
from typing_extensions import Self

class SharesListMetricDefinitions200ResponseValueInner(BaseModel):
    """
    Metric definition.
    """ # noqa: E501
    metric_availabilities: Optional[List[SharesListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner]] = Field(default=None, description="Metric availabilities.", alias="metricAvailabilities")
    name: Optional[SharesListMetricDefinitions200ResponseValueInnerName] = None
    primary_aggregation_type: Optional[StrictStr] = Field(default=None, description="Aggregate type.", alias="primaryAggregationType")
    unit: Optional[StrictStr] = Field(default=None, description="Metric unit.")
    __properties: ClassVar[List[str]] = ["metricAvailabilities", "name", "primaryAggregationType", "unit"]

    @field_validator('primary_aggregation_type')
    def primary_aggregation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Average', 'Total', 'Minimum', 'Maximum', 'Last']):
            raise ValueError("must be one of enum values ('None', 'Average', 'Total', 'Minimum', 'Maximum', 'Last')")
        return value

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Count', 'Bytes', 'Seconds', 'CountPerSecond', 'BytesPerSecond']):
            raise ValueError("must be one of enum values ('Count', 'Bytes', 'Seconds', 'CountPerSecond', 'BytesPerSecond')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SharesListMetricDefinitions200ResponseValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "metric_availabilities",
            "primary_aggregation_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metric_availabilities (list)
        _items = []
        if self.metric_availabilities:
            for _item_metric_availabilities in self.metric_availabilities:
                if _item_metric_availabilities:
                    _items.append(_item_metric_availabilities.to_dict())
            _dict['metricAvailabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharesListMetricDefinitions200ResponseValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metricAvailabilities": [SharesListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner.from_dict(_item) for _item in obj["metricAvailabilities"]] if obj.get("metricAvailabilities") is not None else None,
            "name": SharesListMetricDefinitions200ResponseValueInnerName.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "primaryAggregationType": obj.get("primaryAggregationType"),
            "unit": obj.get("unit")
        })
        return _obj



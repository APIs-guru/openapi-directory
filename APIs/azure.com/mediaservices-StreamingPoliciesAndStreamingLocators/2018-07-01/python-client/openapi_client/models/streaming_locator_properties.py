# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.streaming_locator_content_key import StreamingLocatorContentKey
from typing import Optional, Set
from typing_extensions import Self

class StreamingLocatorProperties(BaseModel):
    """
    Properties of the Streaming Locator.
    """ # noqa: E501
    alternative_media_id: Optional[StrictStr] = Field(default=None, description="Alternative Media ID of this Streaming Locator", alias="alternativeMediaId")
    asset_name: StrictStr = Field(description="Asset Name", alias="assetName")
    content_keys: Optional[List[StreamingLocatorContentKey]] = Field(default=None, description="The ContentKeys used by this Streaming Locator.", alias="contentKeys")
    created: Optional[datetime] = Field(default=None, description="The creation time of the Streaming Locator.")
    default_content_key_policy_name: Optional[StrictStr] = Field(default=None, description="Name of the default ContentKeyPolicy used by this Streaming Locator.", alias="defaultContentKeyPolicyName")
    end_time: Optional[datetime] = Field(default=None, description="The end time of the Streaming Locator.", alias="endTime")
    filters: Optional[List[StrictStr]] = Field(default=None, description="A list of asset or account filters which apply to this streaming locator")
    start_time: Optional[datetime] = Field(default=None, description="The start time of the Streaming Locator.", alias="startTime")
    streaming_locator_id: Optional[StrictStr] = Field(default=None, description="The StreamingLocatorId of the Streaming Locator.", alias="streamingLocatorId")
    streaming_policy_name: StrictStr = Field(description="Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'", alias="streamingPolicyName")
    __properties: ClassVar[List[str]] = ["alternativeMediaId", "assetName", "contentKeys", "created", "defaultContentKeyPolicyName", "endTime", "filters", "startTime", "streamingLocatorId", "streamingPolicyName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamingLocatorProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in content_keys (list)
        _items = []
        if self.content_keys:
            for _item_content_keys in self.content_keys:
                if _item_content_keys:
                    _items.append(_item_content_keys.to_dict())
            _dict['contentKeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamingLocatorProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternativeMediaId": obj.get("alternativeMediaId"),
            "assetName": obj.get("assetName"),
            "contentKeys": [StreamingLocatorContentKey.from_dict(_item) for _item in obj["contentKeys"]] if obj.get("contentKeys") is not None else None,
            "created": obj.get("created"),
            "defaultContentKeyPolicyName": obj.get("defaultContentKeyPolicyName"),
            "endTime": obj.get("endTime"),
            "filters": obj.get("filters"),
            "startTime": obj.get("startTime"),
            "streamingLocatorId": obj.get("streamingLocatorId"),
            "streamingPolicyName": obj.get("streamingPolicyName")
        })
        return _obj



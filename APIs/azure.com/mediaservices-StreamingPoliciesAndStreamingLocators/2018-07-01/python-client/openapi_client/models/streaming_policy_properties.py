# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.common_encryption_cbcs import CommonEncryptionCbcs
from openapi_client.models.common_encryption_cenc import CommonEncryptionCenc
from openapi_client.models.envelope_encryption import EnvelopeEncryption
from openapi_client.models.no_encryption import NoEncryption
from typing import Optional, Set
from typing_extensions import Self

class StreamingPolicyProperties(BaseModel):
    """
    Class to specify properties of Streaming Policy
    """ # noqa: E501
    common_encryption_cbcs: Optional[CommonEncryptionCbcs] = Field(default=None, alias="commonEncryptionCbcs")
    common_encryption_cenc: Optional[CommonEncryptionCenc] = Field(default=None, alias="commonEncryptionCenc")
    created: Optional[datetime] = Field(default=None, description="Creation time of Streaming Policy")
    default_content_key_policy_name: Optional[StrictStr] = Field(default=None, description="Default ContentKey used by current Streaming Policy", alias="defaultContentKeyPolicyName")
    envelope_encryption: Optional[EnvelopeEncryption] = Field(default=None, alias="envelopeEncryption")
    no_encryption: Optional[NoEncryption] = Field(default=None, alias="noEncryption")
    __properties: ClassVar[List[str]] = ["commonEncryptionCbcs", "commonEncryptionCenc", "created", "defaultContentKeyPolicyName", "envelopeEncryption", "noEncryption"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamingPolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_encryption_cbcs
        if self.common_encryption_cbcs:
            _dict['commonEncryptionCbcs'] = self.common_encryption_cbcs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of common_encryption_cenc
        if self.common_encryption_cenc:
            _dict['commonEncryptionCenc'] = self.common_encryption_cenc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of envelope_encryption
        if self.envelope_encryption:
            _dict['envelopeEncryption'] = self.envelope_encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of no_encryption
        if self.no_encryption:
            _dict['noEncryption'] = self.no_encryption.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamingPolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonEncryptionCbcs": CommonEncryptionCbcs.from_dict(obj["commonEncryptionCbcs"]) if obj.get("commonEncryptionCbcs") is not None else None,
            "commonEncryptionCenc": CommonEncryptionCenc.from_dict(obj["commonEncryptionCenc"]) if obj.get("commonEncryptionCenc") is not None else None,
            "created": obj.get("created"),
            "defaultContentKeyPolicyName": obj.get("defaultContentKeyPolicyName"),
            "envelopeEncryption": EnvelopeEncryption.from_dict(obj["envelopeEncryption"]) if obj.get("envelopeEncryption") is not None else None,
            "noEncryption": NoEncryption.from_dict(obj["noEncryption"]) if obj.get("noEncryption") is not None else None
        })
        return _obj



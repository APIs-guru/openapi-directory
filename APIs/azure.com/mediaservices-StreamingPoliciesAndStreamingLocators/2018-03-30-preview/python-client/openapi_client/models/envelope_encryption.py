# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-03-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enabled_protocols import EnabledProtocols
from openapi_client.models.streaming_policy_content_keys import StreamingPolicyContentKeys
from openapi_client.models.track_selection import TrackSelection
from typing import Optional, Set
from typing_extensions import Self

class EnvelopeEncryption(BaseModel):
    """
    Class for EnvelopeEncryption encryption scheme
    """ # noqa: E501
    clear_tracks: Optional[List[TrackSelection]] = Field(default=None, description="Representing which tracks should not be encrypted", alias="clearTracks")
    content_keys: Optional[StreamingPolicyContentKeys] = Field(default=None, alias="contentKeys")
    custom_license_acquisition_url_template: Optional[StrictStr] = Field(default=None, description="LicenseAcquisitionUrlTemplate is used to point to user specified service to delivery content keys", alias="customLicenseAcquisitionUrlTemplate")
    enabled_protocols: Optional[EnabledProtocols] = Field(default=None, alias="enabledProtocols")
    __properties: ClassVar[List[str]] = ["clearTracks", "contentKeys", "customLicenseAcquisitionUrlTemplate", "enabledProtocols"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvelopeEncryption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clear_tracks (list)
        _items = []
        if self.clear_tracks:
            for _item_clear_tracks in self.clear_tracks:
                if _item_clear_tracks:
                    _items.append(_item_clear_tracks.to_dict())
            _dict['clearTracks'] = _items
        # override the default output from pydantic by calling `to_dict()` of content_keys
        if self.content_keys:
            _dict['contentKeys'] = self.content_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enabled_protocols
        if self.enabled_protocols:
            _dict['enabledProtocols'] = self.enabled_protocols.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvelopeEncryption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clearTracks": [TrackSelection.from_dict(_item) for _item in obj["clearTracks"]] if obj.get("clearTracks") is not None else None,
            "contentKeys": StreamingPolicyContentKeys.from_dict(obj["contentKeys"]) if obj.get("contentKeys") is not None else None,
            "customLicenseAcquisitionUrlTemplate": obj.get("customLicenseAcquisitionUrlTemplate"),
            "enabledProtocols": EnabledProtocols.from_dict(obj["enabledProtocols"]) if obj.get("enabledProtocols") is not None else None
        })
        return _obj



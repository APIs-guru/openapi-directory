# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.automation_action import AutomationAction
from openapi_client.models.automation_scope import AutomationScope
from openapi_client.models.automation_source import AutomationSource
from typing import Optional, Set
from typing_extensions import Self

class AutomationProperties(BaseModel):
    """
    A set of properties that defines the behavior of the automation configuration. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
    """ # noqa: E501
    actions: Optional[List[AutomationAction]] = Field(default=None, description="A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.")
    description: Optional[StrictStr] = Field(default=None, description="The security automation description.")
    is_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether the security automation is enabled.", alias="isEnabled")
    scopes: Optional[List[AutomationScope]] = Field(default=None, description="A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.")
    sources: Optional[List[AutomationSource]] = Field(default=None, description="A collection of the source event types which evaluate the security automation set of rules.")
    __properties: ClassVar[List[str]] = ["actions", "description", "isEnabled", "scopes", "sources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutomationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scopes (list)
        _items = []
        if self.scopes:
            for _item_scopes in self.scopes:
                if _item_scopes:
                    _items.append(_item_scopes.to_dict())
            _dict['scopes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutomationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [AutomationAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "description": obj.get("description"),
            "isEnabled": obj.get("isEnabled"),
            "scopes": [AutomationScope.from_dict(_item) for _item in obj["scopes"]] if obj.get("scopes") is not None else None,
            "sources": [AutomationSource.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None
        })
        return _obj



# coding: utf-8

"""
    KeyVaultClient

    The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

    The version of the OpenAPI document: 7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.storage_account_attributes import StorageAccountAttributes
from typing import Optional, Set
from typing_extensions import Self

class StorageAccountUpdateParameters(BaseModel):
    """
    The storage account update parameters.
    """ # noqa: E501
    active_key_name: Optional[StrictStr] = Field(default=None, description="The current active storage account key name.", alias="activeKeyName")
    attributes: Optional[StorageAccountAttributes] = None
    auto_regenerate_key: Optional[StrictBool] = Field(default=None, description="whether keyvault should manage the storage account for the user.", alias="autoRegenerateKey")
    regeneration_period: Optional[StrictStr] = Field(default=None, description="The key regeneration time duration specified in ISO-8601 format.", alias="regenerationPeriod")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Application specific metadata in the form of key-value pairs.")
    __properties: ClassVar[List[str]] = ["activeKeyName", "attributes", "autoRegenerateKey", "regenerationPeriod", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageAccountUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageAccountUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeKeyName": obj.get("activeKeyName"),
            "attributes": StorageAccountAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "autoRegenerateKey": obj.get("autoRegenerateKey"),
            "regenerationPeriod": obj.get("regenerationPeriod"),
            "tags": obj.get("tags")
        })
        return _obj



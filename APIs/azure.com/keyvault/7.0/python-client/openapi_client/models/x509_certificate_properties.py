# coding: utf-8

"""
    KeyVaultClient

    The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

    The version of the OpenAPI document: 7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.subject_alternative_names import SubjectAlternativeNames
from typing import Optional, Set
from typing_extensions import Self

class X509CertificateProperties(BaseModel):
    """
    Properties of the X509 component of a certificate.
    """ # noqa: E501
    ekus: Optional[List[StrictStr]] = Field(default=None, description="The enhanced key usage.")
    key_usage: Optional[List[StrictStr]] = Field(default=None, description="List of key usages.")
    sans: Optional[SubjectAlternativeNames] = None
    subject: Optional[StrictStr] = Field(default=None, description="The subject name. Should be a valid X509 distinguished Name.")
    validity_months: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The duration that the certificate is valid in months.")
    __properties: ClassVar[List[str]] = ["ekus", "key_usage", "sans", "subject", "validity_months"]

    @field_validator('key_usage')
    def key_usage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['digitalSignature', 'nonRepudiation', 'keyEncipherment', 'dataEncipherment', 'keyAgreement', 'keyCertSign', 'cRLSign', 'encipherOnly', 'decipherOnly']):
                raise ValueError("each list item must be one of ('digitalSignature', 'nonRepudiation', 'keyEncipherment', 'dataEncipherment', 'keyAgreement', 'keyCertSign', 'cRLSign', 'encipherOnly', 'decipherOnly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of X509CertificateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sans
        if self.sans:
            _dict['sans'] = self.sans.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of X509CertificateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ekus": obj.get("ekus"),
            "key_usage": obj.get("key_usage"),
            "sans": SubjectAlternativeNames.from_dict(obj["sans"]) if obj.get("sans") is not None else None,
            "subject": obj.get("subject"),
            "validity_months": obj.get("validity_months")
        })
        return _obj



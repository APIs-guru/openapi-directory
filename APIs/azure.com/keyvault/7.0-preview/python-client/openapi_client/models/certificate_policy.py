# coding: utf-8

"""
    KeyVaultClient

    The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

    The version of the OpenAPI document: 7.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_attributes import CertificateAttributes
from openapi_client.models.issuer_parameters import IssuerParameters
from openapi_client.models.key_properties import KeyProperties
from openapi_client.models.lifetime_action import LifetimeAction
from openapi_client.models.secret_properties import SecretProperties
from openapi_client.models.x509_certificate_properties import X509CertificateProperties
from typing import Optional, Set
from typing_extensions import Self

class CertificatePolicy(BaseModel):
    """
    Management policy for a certificate.
    """ # noqa: E501
    attributes: Optional[CertificateAttributes] = None
    id: Optional[StrictStr] = Field(default=None, description="The certificate id.")
    issuer: Optional[IssuerParameters] = None
    key_props: Optional[KeyProperties] = None
    lifetime_actions: Optional[List[LifetimeAction]] = Field(default=None, description="Actions that will be performed by Key Vault over the lifetime of a certificate.")
    secret_props: Optional[SecretProperties] = None
    x509_props: Optional[X509CertificateProperties] = None
    __properties: ClassVar[List[str]] = ["attributes", "id", "issuer", "key_props", "lifetime_actions", "secret_props", "x509_props"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificatePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            _dict['issuer'] = self.issuer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_props
        if self.key_props:
            _dict['key_props'] = self.key_props.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lifetime_actions (list)
        _items = []
        if self.lifetime_actions:
            for _item_lifetime_actions in self.lifetime_actions:
                if _item_lifetime_actions:
                    _items.append(_item_lifetime_actions.to_dict())
            _dict['lifetime_actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of secret_props
        if self.secret_props:
            _dict['secret_props'] = self.secret_props.to_dict()
        # override the default output from pydantic by calling `to_dict()` of x509_props
        if self.x509_props:
            _dict['x509_props'] = self.x509_props.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificatePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": CertificateAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "id": obj.get("id"),
            "issuer": IssuerParameters.from_dict(obj["issuer"]) if obj.get("issuer") is not None else None,
            "key_props": KeyProperties.from_dict(obj["key_props"]) if obj.get("key_props") is not None else None,
            "lifetime_actions": [LifetimeAction.from_dict(_item) for _item in obj["lifetime_actions"]] if obj.get("lifetime_actions") is not None else None,
            "secret_props": SecretProperties.from_dict(obj["secret_props"]) if obj.get("secret_props") is not None else None,
            "x509_props": X509CertificateProperties.from_dict(obj["x509_props"]) if obj.get("x509_props") is not None else None
        })
        return _obj



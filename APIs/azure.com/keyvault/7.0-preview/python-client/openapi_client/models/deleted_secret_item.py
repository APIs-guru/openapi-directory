# coding: utf-8

"""
    KeyVaultClient

    The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

    The version of the OpenAPI document: 7.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.secret_attributes import SecretAttributes
from typing import Optional, Set
from typing_extensions import Self

class DeletedSecretItem(BaseModel):
    """
    The deleted secret item containing metadata about the deleted secret.
    """ # noqa: E501
    deleted_date: Optional[StrictInt] = Field(default=None, description="The time when the secret was deleted, in UTC", alias="deletedDate")
    recovery_id: Optional[StrictStr] = Field(default=None, description="The url of the recovery object, used to identify and recover the deleted secret.", alias="recoveryId")
    scheduled_purge_date: Optional[StrictInt] = Field(default=None, description="The time when the secret is scheduled to be purged, in UTC", alias="scheduledPurgeDate")
    attributes: Optional[SecretAttributes] = None
    content_type: Optional[StrictStr] = Field(default=None, description="Type of the secret value such as a password.", alias="contentType")
    id: Optional[StrictStr] = Field(default=None, description="Secret identifier.")
    managed: Optional[StrictBool] = Field(default=None, description="True if the secret's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Application specific metadata in the form of key-value pairs.")
    __properties: ClassVar[List[str]] = ["attributes", "contentType", "id", "managed", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeletedSecretItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "deleted_date",
            "scheduled_purge_date",
            "managed",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeletedSecretItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": SecretAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "contentType": obj.get("contentType"),
            "id": obj.get("id"),
            "managed": obj.get("managed"),
            "tags": obj.get("tags")
        })
        return _obj



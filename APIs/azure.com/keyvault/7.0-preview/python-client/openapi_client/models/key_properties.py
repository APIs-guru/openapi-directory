# coding: utf-8

"""
    KeyVaultClient

    The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

    The version of the OpenAPI document: 7.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KeyProperties(BaseModel):
    """
    Properties of the key pair backing a certificate.
    """ # noqa: E501
    crv: Optional[StrictStr] = Field(default=None, description="Elliptic curve name. For valid values, see JsonWebKeyCurveName.")
    exportable: Optional[StrictBool] = Field(default=None, description="Indicates if the private key can be exported.")
    key_size: Optional[StrictInt] = Field(default=None, description="The key size in bits. For example: 2048, 3072, or 4096 for RSA.")
    kty: Optional[StrictStr] = Field(default=None, description="The type of key pair to be used for the certificate.")
    reuse_key: Optional[StrictBool] = Field(default=None, description="Indicates if the same key pair will be used on certificate renewal.")
    __properties: ClassVar[List[str]] = ["crv", "exportable", "key_size", "kty", "reuse_key"]

    @field_validator('crv')
    def crv_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['P-256', 'P-384', 'P-521', 'P-256K']):
            raise ValueError("must be one of enum values ('P-256', 'P-384', 'P-521', 'P-256K')")
        return value

    @field_validator('kty')
    def kty_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct']):
            raise ValueError("must be one of enum values ('EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crv": obj.get("crv"),
            "exportable": obj.get("exportable"),
            "key_size": obj.get("key_size"),
            "kty": obj.get("kty"),
            "reuse_key": obj.get("reuse_key")
        })
        return _obj



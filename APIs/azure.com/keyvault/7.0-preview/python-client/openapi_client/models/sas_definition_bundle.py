# coding: utf-8

"""
    KeyVaultClient

    The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

    The version of the OpenAPI document: 7.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sas_definition_attributes import SasDefinitionAttributes
from typing import Optional, Set
from typing_extensions import Self

class SasDefinitionBundle(BaseModel):
    """
    A SAS definition bundle consists of key vault SAS definition details plus its attributes.
    """ # noqa: E501
    attributes: Optional[SasDefinitionAttributes] = None
    id: Optional[StrictStr] = Field(default=None, description="The SAS definition id.")
    sas_type: Optional[StrictStr] = Field(default=None, description="The type of SAS token the SAS definition will create.", alias="sasType")
    sid: Optional[StrictStr] = Field(default=None, description="Storage account SAS definition secret id.")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Application specific metadata in the form of key-value pairs")
    template_uri: Optional[StrictStr] = Field(default=None, description="The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.", alias="templateUri")
    validity_period: Optional[StrictStr] = Field(default=None, description="The validity period of SAS tokens created according to the SAS definition.", alias="validityPeriod")
    __properties: ClassVar[List[str]] = ["attributes", "id", "sasType", "sid", "tags", "templateUri", "validityPeriod"]

    @field_validator('sas_type')
    def sas_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['account', 'service']):
            raise ValueError("must be one of enum values ('account', 'service')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SasDefinitionBundle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "sas_type",
            "sid",
            "tags",
            "template_uri",
            "validity_period",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SasDefinitionBundle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": SasDefinitionAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "id": obj.get("id"),
            "sasType": obj.get("sasType"),
            "sid": obj.get("sid"),
            "tags": obj.get("tags"),
            "templateUri": obj.get("templateUri"),
            "validityPeriod": obj.get("validityPeriod")
        })
        return _obj



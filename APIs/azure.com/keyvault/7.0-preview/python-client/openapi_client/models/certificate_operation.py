# coding: utf-8

"""
    KeyVaultClient

    The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

    The version of the OpenAPI document: 7.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.error import Error
from openapi_client.models.issuer_parameters import IssuerParameters
from typing import Optional, Set
from typing_extensions import Self

class CertificateOperation(BaseModel):
    """
    A certificate operation is returned in case of asynchronous requests.
    """ # noqa: E501
    cancellation_requested: Optional[StrictBool] = Field(default=None, description="Indicates if cancellation was requested on the certificate operation.")
    csr: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="The certificate signing request (CSR) that is being used in the certificate operation.")
    error: Optional[Error] = None
    id: Optional[StrictStr] = Field(default=None, description="The certificate id.")
    issuer: Optional[IssuerParameters] = None
    request_id: Optional[StrictStr] = Field(default=None, description="Identifier for the certificate operation.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the certificate operation.")
    status_details: Optional[StrictStr] = Field(default=None, description="The status details of the certificate operation.")
    target: Optional[StrictStr] = Field(default=None, description="Location which contains the result of the certificate operation.")
    __properties: ClassVar[List[str]] = ["cancellation_requested", "csr", "error", "id", "issuer", "request_id", "status", "status_details", "target"]

    @field_validator('csr')
    def csr_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            _dict['issuer'] = self.issuer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancellation_requested": obj.get("cancellation_requested"),
            "csr": obj.get("csr"),
            "error": Error.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "id": obj.get("id"),
            "issuer": IssuerParameters.from_dict(obj["issuer"]) if obj.get("issuer") is not None else None,
            "request_id": obj.get("request_id"),
            "status": obj.get("status"),
            "status_details": obj.get("status_details"),
            "target": obj.get("target")
        })
        return _obj



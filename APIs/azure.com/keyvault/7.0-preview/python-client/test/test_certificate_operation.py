# coding: utf-8

"""
    KeyVaultClient

    The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

    The version of the OpenAPI document: 7.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.certificate_operation import CertificateOperation

class TestCertificateOperation(unittest.TestCase):
    """CertificateOperation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CertificateOperation:
        """Test CertificateOperation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CertificateOperation`
        """
        model = CertificateOperation()
        if include_optional:
            return CertificateOperation(
                cancellation_requested = True,
                csr = 'YQ==',
                error = openapi_client.models.error.Error(
                    code = '', 
                    innererror = openapi_client.models.error.Error(
                        code = '', 
                        message = '', ), 
                    message = '', ),
                id = '',
                issuer = openapi_client.models.issuer_parameters.IssuerParameters(
                    cert_transparency = True, 
                    cty = '', 
                    name = '', ),
                request_id = '',
                status = '',
                status_details = '',
                target = ''
            )
        else:
            return CertificateOperation(
        )
        """

    def testCertificateOperation(self):
        """Test CertificateOperation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

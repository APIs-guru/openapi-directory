# coding: utf-8

"""
    KeyVaultManagementClient

    The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.

    The version of the OpenAPI document: 2018-02-14-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_policy_entry import AccessPolicyEntry
from openapi_client.models.network_rule_set import NetworkRuleSet
from openapi_client.models.sku import Sku
from typing import Optional, Set
from typing_extensions import Self

class VaultProperties(BaseModel):
    """
    Properties of the vault
    """ # noqa: E501
    access_policies: Optional[List[AccessPolicyEntry]] = Field(default=None, description="An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.", alias="accessPolicies")
    create_mode: Optional[StrictStr] = Field(default=None, description="The vault's create mode to indicate whether the vault need to be recovered or not.", alias="createMode")
    enable_purge_protection: Optional[StrictBool] = Field(default=None, description="Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.", alias="enablePurgeProtection")
    enable_soft_delete: Optional[StrictBool] = Field(default=None, description="Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.", alias="enableSoftDelete")
    enabled_for_deployment: Optional[StrictBool] = Field(default=None, description="Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.", alias="enabledForDeployment")
    enabled_for_disk_encryption: Optional[StrictBool] = Field(default=None, description="Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.", alias="enabledForDiskEncryption")
    enabled_for_template_deployment: Optional[StrictBool] = Field(default=None, description="Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.", alias="enabledForTemplateDeployment")
    network_acls: Optional[NetworkRuleSet] = Field(default=None, alias="networkAcls")
    sku: Sku
    tenant_id: StrictStr = Field(description="The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.", alias="tenantId")
    vault_uri: Optional[StrictStr] = Field(default=None, description="The URI of the vault for performing operations on keys and secrets.", alias="vaultUri")
    __properties: ClassVar[List[str]] = ["accessPolicies", "createMode", "enablePurgeProtection", "enableSoftDelete", "enabledForDeployment", "enabledForDiskEncryption", "enabledForTemplateDeployment", "networkAcls", "sku", "tenantId", "vaultUri"]

    @field_validator('create_mode')
    def create_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['recover', 'default']):
            raise ValueError("must be one of enum values ('recover', 'default')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VaultProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_policies (list)
        _items = []
        if self.access_policies:
            for _item_access_policies in self.access_policies:
                if _item_access_policies:
                    _items.append(_item_access_policies.to_dict())
            _dict['accessPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_acls
        if self.network_acls:
            _dict['networkAcls'] = self.network_acls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VaultProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessPolicies": [AccessPolicyEntry.from_dict(_item) for _item in obj["accessPolicies"]] if obj.get("accessPolicies") is not None else None,
            "createMode": obj.get("createMode"),
            "enablePurgeProtection": obj.get("enablePurgeProtection"),
            "enableSoftDelete": obj.get("enableSoftDelete"),
            "enabledForDeployment": obj.get("enabledForDeployment"),
            "enabledForDiskEncryption": obj.get("enabledForDiskEncryption"),
            "enabledForTemplateDeployment": obj.get("enabledForTemplateDeployment"),
            "networkAcls": NetworkRuleSet.from_dict(obj["networkAcls"]) if obj.get("networkAcls") is not None else None,
            "sku": Sku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "tenantId": obj.get("tenantId"),
            "vaultUri": obj.get("vaultUri")
        })
        return _obj



# coding: utf-8

"""
    KeyVaultManagementClient

    The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.

    The version of the OpenAPI document: 2018-02-14-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.vault import Vault

class TestVault(unittest.TestCase):
    """Vault unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Vault:
        """Test Vault
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Vault`
        """
        model = Vault()
        if include_optional:
            return Vault(
                properties = openapi_client.models.vault_properties.VaultProperties(
                    access_policies = [
                        openapi_client.models.access_policy_entry.AccessPolicyEntry(
                            application_id = '', 
                            object_id = '', 
                            permissions = openapi_client.models.permissions.Permissions(
                                certificates = [
                                    'get'
                                    ], 
                                keys = [
                                    'encrypt'
                                    ], 
                                secrets = [
                                    'get'
                                    ], 
                                storage = [
                                    'get'
                                    ], ), 
                            tenant_id = '', )
                        ], 
                    create_mode = 'recover', 
                    enable_purge_protection = True, 
                    enable_soft_delete = True, 
                    enabled_for_deployment = True, 
                    enabled_for_disk_encryption = True, 
                    enabled_for_template_deployment = True, 
                    network_acls = openapi_client.models.network_rule_set.NetworkRuleSet(
                        bypass = 'AzureServices', 
                        default_action = 'Allow', 
                        ip_rules = [
                            openapi_client.models.ip_rule.IPRule(
                                value = '', )
                            ], 
                        virtual_network_rules = [
                            openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                                id = '', )
                            ], ), 
                    sku = openapi_client.models.sku.Sku(
                        family = 'A', 
                        name = 'standard', ), 
                    tenant_id = '', 
                    vault_uri = '', ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return Vault(
                properties = openapi_client.models.vault_properties.VaultProperties(
                    access_policies = [
                        openapi_client.models.access_policy_entry.AccessPolicyEntry(
                            application_id = '', 
                            object_id = '', 
                            permissions = openapi_client.models.permissions.Permissions(
                                certificates = [
                                    'get'
                                    ], 
                                keys = [
                                    'encrypt'
                                    ], 
                                secrets = [
                                    'get'
                                    ], 
                                storage = [
                                    'get'
                                    ], ), 
                            tenant_id = '', )
                        ], 
                    create_mode = 'recover', 
                    enable_purge_protection = True, 
                    enable_soft_delete = True, 
                    enabled_for_deployment = True, 
                    enabled_for_disk_encryption = True, 
                    enabled_for_template_deployment = True, 
                    network_acls = openapi_client.models.network_rule_set.NetworkRuleSet(
                        bypass = 'AzureServices', 
                        default_action = 'Allow', 
                        ip_rules = [
                            openapi_client.models.ip_rule.IPRule(
                                value = '', )
                            ], 
                        virtual_network_rules = [
                            openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                                id = '', )
                            ], ), 
                    sku = openapi_client.models.sku.Sku(
                        family = 'A', 
                        name = 'standard', ), 
                    tenant_id = '', 
                    vault_uri = '', ),
                location = '',
        )
        """

    def testVault(self):
        """Test Vault"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

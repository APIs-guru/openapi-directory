# coding: utf-8

"""
    KeyVaultManagementClient

    The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeletedVaultProperties(BaseModel):
    """
    Properties of the deleted vault.
    """ # noqa: E501
    deletion_date: Optional[datetime] = Field(default=None, description="The deleted date.", alias="deletionDate")
    location: Optional[StrictStr] = Field(default=None, description="The location of the original vault.")
    scheduled_purge_date: Optional[datetime] = Field(default=None, description="The scheduled purged date.", alias="scheduledPurgeDate")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Tags of the original vault.")
    vault_id: Optional[StrictStr] = Field(default=None, description="The resource id of the original vault.", alias="vaultId")
    __properties: ClassVar[List[str]] = ["deletionDate", "location", "scheduledPurgeDate", "tags", "vaultId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeletedVaultProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "deletion_date",
            "location",
            "scheduled_purge_date",
            "tags",
            "vault_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeletedVaultProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deletionDate": obj.get("deletionDate"),
            "location": obj.get("location"),
            "scheduledPurgeDate": obj.get("scheduledPurgeDate"),
            "tags": obj.get("tags"),
            "vaultId": obj.get("vaultId")
        })
        return _obj



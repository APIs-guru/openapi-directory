# coding: utf-8

"""
    SharedImageGalleryServiceClient

    Shared Image Gallery Service Client.

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disallowed import Disallowed
from openapi_client.models.gallery_image_identifier import GalleryImageIdentifier
from openapi_client.models.image_purchase_plan import ImagePurchasePlan
from openapi_client.models.recommended_machine_configuration import RecommendedMachineConfiguration
from typing import Optional, Set
from typing_extensions import Self

class GalleryImageProperties(BaseModel):
    """
    Describes the properties of a gallery Image Definition.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of this gallery Image Definition resource. This property is updatable.")
    disallowed: Optional[Disallowed] = None
    end_of_life_date: Optional[datetime] = Field(default=None, description="The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.", alias="endOfLifeDate")
    eula: Optional[StrictStr] = Field(default=None, description="The Eula agreement for the gallery Image Definition.")
    identifier: GalleryImageIdentifier
    os_state: StrictStr = Field(description="This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.", alias="osState")
    os_type: StrictStr = Field(description="This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**", alias="osType")
    privacy_statement_uri: Optional[StrictStr] = Field(default=None, description="The privacy statement uri.", alias="privacyStatementUri")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    purchase_plan: Optional[ImagePurchasePlan] = Field(default=None, alias="purchasePlan")
    recommended: Optional[RecommendedMachineConfiguration] = None
    release_note_uri: Optional[StrictStr] = Field(default=None, description="The release note uri.", alias="releaseNoteUri")
    __properties: ClassVar[List[str]] = ["description", "disallowed", "endOfLifeDate", "eula", "identifier", "osState", "osType", "privacyStatementUri", "provisioningState", "purchasePlan", "recommended", "releaseNoteUri"]

    @field_validator('os_state')
    def os_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Generalized', 'Specialized']):
            raise ValueError("must be one of enum values ('Generalized', 'Specialized')")
        return value

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting', 'Migrating']):
            raise ValueError("must be one of enum values ('Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting', 'Migrating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GalleryImageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disallowed
        if self.disallowed:
            _dict['disallowed'] = self.disallowed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identifier
        if self.identifier:
            _dict['identifier'] = self.identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchase_plan
        if self.purchase_plan:
            _dict['purchasePlan'] = self.purchase_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recommended
        if self.recommended:
            _dict['recommended'] = self.recommended.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GalleryImageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "disallowed": Disallowed.from_dict(obj["disallowed"]) if obj.get("disallowed") is not None else None,
            "endOfLifeDate": obj.get("endOfLifeDate"),
            "eula": obj.get("eula"),
            "identifier": GalleryImageIdentifier.from_dict(obj["identifier"]) if obj.get("identifier") is not None else None,
            "osState": obj.get("osState"),
            "osType": obj.get("osType"),
            "privacyStatementUri": obj.get("privacyStatementUri"),
            "provisioningState": obj.get("provisioningState"),
            "purchasePlan": ImagePurchasePlan.from_dict(obj["purchasePlan"]) if obj.get("purchasePlan") is not None else None,
            "recommended": RecommendedMachineConfiguration.from_dict(obj["recommended"]) if obj.get("recommended") is not None else None,
            "releaseNoteUri": obj.get("releaseNoteUri")
        })
        return _obj



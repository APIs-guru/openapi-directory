# coding: utf-8

"""
    SharedImageGalleryServiceClient

    Shared Image Gallery Service Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.target_region import TargetRegion
from typing import Optional, Set
from typing_extensions import Self

class GalleryImageVersionPublishingProfile(BaseModel):
    """
    The publishing profile of a gallery Image Version.
    """ # noqa: E501
    end_of_life_date: Optional[datetime] = Field(default=None, description="The end of life date of the gallery Image Version. This property can be used for decommissioning purposes. This property is updatable.", alias="endOfLifeDate")
    exclude_from_latest: Optional[StrictBool] = Field(default=None, description="If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.", alias="excludeFromLatest")
    published_date: Optional[datetime] = Field(default=None, description="The timestamp for when the gallery Image Version is published.", alias="publishedDate")
    replica_count: Optional[StrictInt] = Field(default=None, description="The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.", alias="replicaCount")
    storage_account_type: Optional[StrictStr] = Field(default=None, description="Specifies the storage account type to be used to store the image. This property is not updatable.", alias="storageAccountType")
    target_regions: Optional[List[TargetRegion]] = Field(default=None, description="The target regions where the Image Version is going to be replicated to. This property is updatable.", alias="targetRegions")
    __properties: ClassVar[List[str]] = ["endOfLifeDate", "excludeFromLatest", "publishedDate", "replicaCount", "storageAccountType", "targetRegions"]

    @field_validator('storage_account_type')
    def storage_account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard_LRS', 'Standard_ZRS']):
            raise ValueError("must be one of enum values ('Standard_LRS', 'Standard_ZRS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GalleryImageVersionPublishingProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "published_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in target_regions (list)
        _items = []
        if self.target_regions:
            for _item_target_regions in self.target_regions:
                if _item_target_regions:
                    _items.append(_item_target_regions.to_dict())
            _dict['targetRegions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GalleryImageVersionPublishingProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endOfLifeDate": obj.get("endOfLifeDate"),
            "excludeFromLatest": obj.get("excludeFromLatest"),
            "publishedDate": obj.get("publishedDate"),
            "replicaCount": obj.get("replicaCount"),
            "storageAccountType": obj.get("storageAccountType"),
            "targetRegions": [TargetRegion.from_dict(_item) for _item in obj["targetRegions"]] if obj.get("targetRegions") is not None else None
        })
        return _obj



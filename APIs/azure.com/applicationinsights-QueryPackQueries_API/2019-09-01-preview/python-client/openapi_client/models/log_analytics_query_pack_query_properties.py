# coding: utf-8

"""
    Azure Log Analytics Query Packs

    Azure Log Analytics API reference for management of saved Queries within Query Packs.

    The version of the OpenAPI document: 2019-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LogAnalyticsQueryPackQueryProperties(BaseModel):
    """
    Properties that define an Log Analytics QueryPack-Query resource.
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default=None, description="Object Id of user creating the query.")
    body: StrictStr = Field(description="Body of the query.")
    categories: Optional[List[StrictStr]] = Field(default=None, description="Categories associated with the query.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the query.")
    display_name: StrictStr = Field(description="Unique display name for your query within the Query Pack.", alias="displayName")
    labels: Optional[List[StrictStr]] = Field(default=None, description="Labels associated with the query.")
    linked_resource_id: Optional[StrictStr] = Field(default=None, description="Resource id associated with the query.", alias="linkedResourceId")
    query_id: Optional[StrictStr] = Field(default=None, description="The unique ID of your application. This field cannot be changed.", alias="queryId")
    resource_types: Optional[List[StrictStr]] = Field(default=None, description="Resource Types associated with the query.", alias="resourceTypes")
    time_created: Optional[datetime] = Field(default=None, description="Creation Date for the Log Analytics Query, in ISO 8601 format.", alias="timeCreated")
    time_modified: Optional[datetime] = Field(default=None, description="Last modified date of the Log Analytics Query, in ISO 8601 format.", alias="timeModified")
    __properties: ClassVar[List[str]] = ["author", "body", "categories", "description", "displayName", "labels", "linkedResourceId", "queryId", "resourceTypes", "timeCreated", "timeModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogAnalyticsQueryPackQueryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "author",
            "query_id",
            "time_created",
            "time_modified",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogAnalyticsQueryPackQueryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "body": obj.get("body"),
            "categories": obj.get("categories"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "labels": obj.get("labels"),
            "linkedResourceId": obj.get("linkedResourceId"),
            "queryId": obj.get("queryId"),
            "resourceTypes": obj.get("resourceTypes"),
            "timeCreated": obj.get("timeCreated"),
            "timeModified": obj.get("timeModified")
        })
        return _obj



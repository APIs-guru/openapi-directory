# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.query_request import QueryRequest

class TestQueryRequest(unittest.TestCase):
    """QueryRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryRequest:
        """Test QueryRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryRequest`
        """
        model = QueryRequest()
        if include_optional:
            return QueryRequest(
                aggregate_series = openapi_client.models.aggregate_series.AggregateSeries(
                    filter = openapi_client.models.tsx.Tsx(
                        tsx = '', ), 
                    inline_variables = {
                        'key' : openapi_client.models.variable.Variable(
                            kind = '', )
                        }, 
                    interval = '', 
                    projected_variables = [
                        ''
                        ], 
                    search_span = openapi_client.models.date_time_range.DateTimeRange(
                        from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    time_series_id = [
                        None
                        ], ),
                get_events = openapi_client.models.get_events.GetEvents(
                    filter = openapi_client.models.tsx.Tsx(
                        tsx = '', ), 
                    projected_properties = [
                        openapi_client.models.event_property.EventProperty(
                            name = '', 
                            type = 'Bool', )
                        ], 
                    search_span = openapi_client.models.date_time_range.DateTimeRange(
                        from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    take = 56, 
                    time_series_id = [
                        None
                        ], ),
                get_series = openapi_client.models.get_series.GetSeries(
                    filter = openapi_client.models.tsx.Tsx(
                        tsx = '', ), 
                    inline_variables = {
                        'key' : openapi_client.models.variable.Variable(
                            kind = '', )
                        }, 
                    projected_variables = [
                        ''
                        ], 
                    search_span = openapi_client.models.date_time_range.DateTimeRange(
                        from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    take = 56, 
                    time_series_id = [
                        None
                        ], )
            )
        else:
            return QueryRequest(
        )
        """

    def testQueryRequest(self):
        """Test QueryRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

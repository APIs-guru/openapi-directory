# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_instances_request import SearchInstancesRequest

class TestSearchInstancesRequest(unittest.TestCase):
    """SearchInstancesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchInstancesRequest:
        """Test SearchInstancesRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchInstancesRequest`
        """
        model = SearchInstancesRequest()
        if include_optional:
            return SearchInstancesRequest(
                hierarchies = openapi_client.models.search_instances_hierarchies_parameters.SearchInstancesHierarchiesParameters(
                    expand = openapi_client.models.hierarchies_expand_parameter.HierarchiesExpandParameter(
                        kind = 'UntilChildren', ), 
                    page_size = 56, 
                    sort = openapi_client.models.hierarchies_sort_parameter.HierarchiesSortParameter(
                        by = 'CumulativeInstanceCount', ), ),
                instances = openapi_client.models.search_instances_parameters.SearchInstancesParameters(
                    highlights = True, 
                    page_size = 56, 
                    recursive = True, 
                    sort = openapi_client.models.instances_sort_parameter.InstancesSortParameter(
                        by = 'Rank', ), ),
                path = [
                    ''
                    ],
                search_string = ''
            )
        else:
            return SearchInstancesRequest(
                search_string = '',
        )
        """

    def testSearchInstancesRequest(self):
        """Test SearchInstancesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

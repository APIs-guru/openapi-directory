# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.date_time_range import DateTimeRange
from openapi_client.models.event_property import EventProperty
from openapi_client.models.tsx import Tsx
from typing import Optional, Set
from typing_extensions import Self

class GetEvents(BaseModel):
    """
    Get Events query. Allows to retrieve raw events for a given Time Series ID and search span.
    """ # noqa: E501
    filter: Optional[Tsx] = None
    projected_properties: Optional[List[EventProperty]] = Field(default=None, description="Projected properties is an array of properties which you want to project. These properties must appear in the events; otherwise, they are not returned.", alias="projectedProperties")
    search_span: DateTimeRange = Field(alias="searchSpan")
    take: Optional[StrictInt] = Field(default=None, description="Maximum number of property values in the whole response set, not the maximum number of property values per page. Defaults to 10,000 when not set. Maximum value of take can be 250,000.")
    time_series_id: Annotated[List[Dict[str, Any]], Field(min_length=1)] = Field(description="A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.", alias="timeSeriesId")
    __properties: ClassVar[List[str]] = ["filter", "projectedProperties", "searchSpan", "take", "timeSeriesId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEvents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in projected_properties (list)
        _items = []
        if self.projected_properties:
            for _item_projected_properties in self.projected_properties:
                if _item_projected_properties:
                    _items.append(_item_projected_properties.to_dict())
            _dict['projectedProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of search_span
        if self.search_span:
            _dict['searchSpan'] = self.search_span.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEvents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": Tsx.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "projectedProperties": [EventProperty.from_dict(_item) for _item in obj["projectedProperties"]] if obj.get("projectedProperties") is not None else None,
            "searchSpan": DateTimeRange.from_dict(obj["searchSpan"]) if obj.get("searchSpan") is not None else None,
            "take": obj.get("take"),
            "timeSeriesId": obj.get("timeSeriesId")
        })
        return _obj



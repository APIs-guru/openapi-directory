# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.instance_hit_highlights import InstanceHitHighlights
from typing import Optional, Set
from typing_extensions import Self

class InstanceHit(BaseModel):
    """
    Time series instance that is returned by instances search call. Returned instance matched the search request and contains highlighted text to be displayed to the user if it is set to 'true'.
    """ # noqa: E501
    hierarchy_ids: Optional[List[StrictStr]] = Field(default=None, description="List of time series hierarchy IDs that time series instance which matched the search request belongs to. Cannot be used to lookup hierarchies. May be null.", alias="hierarchyIds")
    highlights: Optional[InstanceHitHighlights] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the time series instance that matched the search request. May be null.")
    time_series_id: Optional[Annotated[List[Dict[str, Any]], Field(min_length=1)]] = Field(default=None, description="A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.", alias="timeSeriesId")
    type_id: Optional[StrictStr] = Field(default=None, description="Represents the type that time series instance which matched the search request belongs to. Never null.", alias="typeId")
    __properties: ClassVar[List[str]] = ["hierarchyIds", "highlights", "name", "timeSeriesId", "typeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceHit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "hierarchy_ids",
            "name",
            "type_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of highlights
        if self.highlights:
            _dict['highlights'] = self.highlights.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceHit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hierarchyIds": obj.get("hierarchyIds"),
            "highlights": InstanceHitHighlights.from_dict(obj["highlights"]) if obj.get("highlights") is not None else None,
            "name": obj.get("name"),
            "timeSeriesId": obj.get("timeSeriesId"),
            "typeId": obj.get("typeId")
        })
        return _obj



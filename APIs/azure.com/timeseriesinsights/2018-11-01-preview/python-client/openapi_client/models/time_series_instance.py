# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TimeSeriesInstance(BaseModel):
    """
    Time series instances are the time series themselves. In most cases, the deviceId or assetId is the unique identifier of the asset in the environment. Instances have descriptive information associated with them called instance fields. At a minimum, instance fields include hierarchy information. They can also include useful, descriptive data like the manufacturer, operator, or the last service date.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="This optional field contains description about the instance.")
    hierarchy_ids: Optional[List[StrictStr]] = Field(default=None, description="Set of time series hierarchy IDs that the instance belong to. May be null.", alias="hierarchyIds")
    instance_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Set of key-value pairs that contain user-defined instance properties. May be null.", alias="instanceFields")
    name: Optional[StrictStr] = Field(default=None, description="Optional name of the instance which is unique in an environment. Names acts as a mutable alias or display name of the time series instance. Mutable, may be null.")
    time_series_id: Annotated[List[Dict[str, Any]], Field(min_length=1)] = Field(description="A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.", alias="timeSeriesId")
    type_id: StrictStr = Field(description="This represents the type that this instance belongs to. Never null.", alias="typeId")
    __properties: ClassVar[List[str]] = ["description", "hierarchyIds", "instanceFields", "name", "timeSeriesId", "typeId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeSeriesInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeSeriesInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "hierarchyIds": obj.get("hierarchyIds"),
            "instanceFields": obj.get("instanceFields"),
            "name": obj.get("name"),
            "timeSeriesId": obj.get("timeSeriesId"),
            "typeId": obj.get("typeId")
        })
        return _obj



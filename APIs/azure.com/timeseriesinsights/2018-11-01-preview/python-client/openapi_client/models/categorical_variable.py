# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.interpolation import Interpolation
from openapi_client.models.time_series_aggregate_category import TimeSeriesAggregateCategory
from openapi_client.models.time_series_default_category import TimeSeriesDefaultCategory
from openapi_client.models.tsx import Tsx
from openapi_client.models.variable import Variable
from typing import Optional, Set
from typing_extensions import Self

class CategoricalVariable(Variable):
    """
    Categorical variable represents signal that needs to be analyzed based on the count or duration of occurrence of limited set of defined values.
    """ # noqa: E501
    categories: Optional[List[TimeSeriesAggregateCategory]] = None
    default_category: Optional[TimeSeriesDefaultCategory] = Field(default=None, alias="defaultCategory")
    interpolation: Optional[Interpolation] = None
    value: Optional[Tsx] = None
    __properties: ClassVar[List[str]] = ["filter", "kind", "categories", "defaultCategory", "interpolation", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CategoricalVariable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_category
        if self.default_category:
            _dict['defaultCategory'] = self.default_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interpolation
        if self.interpolation:
            _dict['interpolation'] = self.interpolation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CategoricalVariable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": Tsx.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "kind": obj.get("kind"),
            "categories": [TimeSeriesAggregateCategory.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "defaultCategory": TimeSeriesDefaultCategory.from_dict(obj["defaultCategory"]) if obj.get("defaultCategory") is not None else None,
            "interpolation": Interpolation.from_dict(obj["interpolation"]) if obj.get("interpolation") is not None else None,
            "value": Tsx.from_dict(obj["value"]) if obj.get("value") is not None else None
        })
        return _obj



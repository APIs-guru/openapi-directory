# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.date_time_range import DateTimeRange
from openapi_client.models.tsx import Tsx
from openapi_client.models.variable import Variable
from typing import Optional, Set
from typing_extensions import Self

class AggregateSeries(BaseModel):
    """
    Aggregate Series query. Allows to calculate an aggregated time series from events for a given Time Series ID and search span.
    """ # noqa: E501
    filter: Optional[Tsx] = None
    inline_variables: Optional[Dict[str, Variable]] = Field(default=None, description="This allows the user the optionally define inline-variables apart from the ones already defined in the model. When the inline variable names have the same name as the model, the inline variable definition takes precedence. Can be null.", alias="inlineVariables")
    interval: StrictStr = Field(description="Interval size is specified in ISO-8601 duration format. All intervals are the same size. One month is always converted to 30 days, and one year is always 365 days. Examples: 1 minute is \"PT1M\", 1 millisecond is \"PT0.001S\". For more information, see https://www.w3.org/TR/xmlschema-2/#duration")
    projected_variables: Optional[List[StrictStr]] = Field(default=None, description="This allows the user to optionally select the variables that needs to be projected. When it is null or not set, all the variables from inlineVariables and model are returned. Can be null.", alias="projectedVariables")
    search_span: DateTimeRange = Field(alias="searchSpan")
    time_series_id: Annotated[List[Dict[str, Any]], Field(min_length=1)] = Field(description="A single Time Series ID value that is an array of primitive values that uniquely identifies a time series instance (e.g. a single device). Note that a single Time Series ID can be composite if multiple properties are specified as Time Series ID at environment creation time. The position and type of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API. Cannot be empty.", alias="timeSeriesId")
    __properties: ClassVar[List[str]] = ["filter", "inlineVariables", "interval", "projectedVariables", "searchSpan", "timeSeriesId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AggregateSeries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in inline_variables (dict)
        _field_dict = {}
        if self.inline_variables:
            for _key_inline_variables in self.inline_variables:
                if self.inline_variables[_key_inline_variables]:
                    _field_dict[_key_inline_variables] = self.inline_variables[_key_inline_variables].to_dict()
            _dict['inlineVariables'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of search_span
        if self.search_span:
            _dict['searchSpan'] = self.search_span.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AggregateSeries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": Tsx.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "inlineVariables": dict(
                (_k, Variable.from_dict(_v))
                for _k, _v in obj["inlineVariables"].items()
            )
            if obj.get("inlineVariables") is not None
            else None,
            "interval": obj.get("interval"),
            "projectedVariables": obj.get("projectedVariables"),
            "searchSpan": DateTimeRange.from_dict(obj["searchSpan"]) if obj.get("searchSpan") is not None else None,
            "timeSeriesId": obj.get("timeSeriesId")
        })
        return _obj



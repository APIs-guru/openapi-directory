# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tsi_error_details import TsiErrorDetails
from typing import Optional, Set
from typing_extensions import Self

class TsiErrorBody(BaseModel):
    """
    A particular API error with an error code and a message.
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Language-independent, human-readable string that defines a service-specific error code. This code serves as a more specific indicator for the HTTP error code specified in the response. Can be used to programmatically handle specific error cases.")
    details: Optional[List[TsiErrorDetails]] = Field(default=None, description="Contains additional error information. May be null.")
    inner_error: Optional[TsiErrorBody] = Field(default=None, alias="innerError")
    message: Optional[StrictStr] = Field(default=None, description="Human-readable, language-independent representation of the error. It is intended as an aid to developers and is not suitable for exposure to end users.")
    target: Optional[StrictStr] = Field(default=None, description="Target of the particular error (for example, the name of the property in error). May be null.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["code", "details", "innerError", "message", "target"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TsiErrorBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "code",
            "details",
            "message",
            "target",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item_details in self.details:
                if _item_details:
                    _items.append(_item_details.to_dict())
            _dict['details'] = _items
        # override the default output from pydantic by calling `to_dict()` of inner_error
        if self.inner_error:
            _dict['innerError'] = self.inner_error.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TsiErrorBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "details": [TsiErrorDetails.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None,
            "innerError": TsiErrorBody.from_dict(obj["innerError"]) if obj.get("innerError") is not None else None,
            "message": obj.get("message"),
            "target": obj.get("target")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

# TODO: Rewrite to not use raise_errors
TsiErrorBody.model_rebuild(raise_errors=False)


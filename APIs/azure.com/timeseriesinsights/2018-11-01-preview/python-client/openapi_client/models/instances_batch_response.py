# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_or_error import InstanceOrError
from openapi_client.models.tsi_error_body import TsiErrorBody
from typing import Optional, Set
from typing_extensions import Self

class InstancesBatchResponse(BaseModel):
    """
    Response of a single operation on a batch of instances. Only one of \"get\", \"put\", \"update\" or \"delete\" will be set based on the request.
    """ # noqa: E501
    delete: Optional[List[TsiErrorBody]] = Field(default=None, description="List of error objects corresponding by position to the \"delete\" array in the request. Null means the instance has been deleted, or did not exist. Error object is set when operation is unsuccessful (e.g. when there are events associated with this time series instance).")
    get: Optional[List[InstanceOrError]] = Field(default=None, description="List of instance or error objects corresponding by position to the \"get\" array in the request. Instance object is set when operation is successful and error object is set when operation is unsuccessful.")
    put: Optional[List[InstanceOrError]] = Field(default=None, description="List of error objects corresponding by position to the \"put\" array in the request. Error object is set when operation is unsuccessful.")
    update: Optional[List[InstanceOrError]] = Field(default=None, description="List of error objects corresponding by position to the \"update\" array in the request. Instance object is set when operation is successful and error object is set when operation is unsuccessful.")
    __properties: ClassVar[List[str]] = ["delete", "get", "put", "update"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstancesBatchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "delete",
            "get",
            "put",
            "update",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in delete (list)
        _items = []
        if self.delete:
            for _item_delete in self.delete:
                if _item_delete:
                    _items.append(_item_delete.to_dict())
            _dict['delete'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in get (list)
        _items = []
        if self.get:
            for _item_get in self.get:
                if _item_get:
                    _items.append(_item_get.to_dict())
            _dict['get'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in put (list)
        _items = []
        if self.put:
            for _item_put in self.put:
                if _item_put:
                    _items.append(_item_put.to_dict())
            _dict['put'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in update (list)
        _items = []
        if self.update:
            for _item_update in self.update:
                if _item_update:
                    _items.append(_item_update.to_dict())
            _dict['update'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstancesBatchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delete": [TsiErrorBody.from_dict(_item) for _item in obj["delete"]] if obj.get("delete") is not None else None,
            "get": [InstanceOrError.from_dict(_item) for _item in obj["get"]] if obj.get("get") is not None else None,
            "put": [InstanceOrError.from_dict(_item) for _item in obj["put"]] if obj.get("put") is not None else None,
            "update": [InstanceOrError.from_dict(_item) for _item in obj["update"]] if obj.get("update") is not None else None
        })
        return _obj



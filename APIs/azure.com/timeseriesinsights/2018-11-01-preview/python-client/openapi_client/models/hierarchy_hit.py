# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HierarchyHit(BaseModel):
    """
    The hierarchy node which contains the instances matching the query based on the input. May be empty or null.
    """ # noqa: E501
    cumulative_instance_count: Optional[StrictInt] = Field(default=None, description="Total number of instances that belong to this node and it's subtrees matching the query.", alias="cumulativeInstanceCount")
    hierarchy_nodes: Optional[SearchHierarchyNodesResponse] = Field(default=None, alias="hierarchyNodes")
    name: Optional[StrictStr] = Field(default=None, description="Name of the hierarchy node. May be empty, cannot be null.")
    __properties: ClassVar[List[str]] = ["cumulativeInstanceCount", "hierarchyNodes", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HierarchyHit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cumulative_instance_count",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hierarchy_nodes
        if self.hierarchy_nodes:
            _dict['hierarchyNodes'] = self.hierarchy_nodes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HierarchyHit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cumulativeInstanceCount": obj.get("cumulativeInstanceCount"),
            "hierarchyNodes": SearchHierarchyNodesResponse.from_dict(obj["hierarchyNodes"]) if obj.get("hierarchyNodes") is not None else None,
            "name": obj.get("name")
        })
        return _obj

from openapi_client.models.search_hierarchy_nodes_response import SearchHierarchyNodesResponse
# TODO: Rewrite to not use raise_errors
HierarchyHit.model_rebuild(raise_errors=False)


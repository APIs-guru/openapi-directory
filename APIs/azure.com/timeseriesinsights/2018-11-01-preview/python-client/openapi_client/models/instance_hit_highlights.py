# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights environment data plane client for PAYG (Preview L1 SKU) environments.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InstanceHitHighlights(BaseModel):
    """
    Highlighted text of time series instance to be displayed to the user. Highlighting inserts <hit> and </hit> tags in the portions of text that matched the search string. Do not use any of the highlighted properties to do further API calls.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Highlighted description of time series instance. May be null.")
    hierarchy_ids: Optional[List[StrictStr]] = Field(default=None, description="List of highlighted time series hierarchy IDs that time series instance belongs to. Cannot be used to lookup hierarchies. May be null.", alias="hierarchyIds")
    hierarchy_names: Optional[List[StrictStr]] = Field(default=None, description="List of highlighted time series hierarchy names that time series instance belongs to. Cannot be used to lookup hierarchies. May be null.", alias="hierarchyNames")
    instance_field_names: Optional[List[StrictStr]] = Field(default=None, description="List of highlighted time series instance field names. May be null.", alias="instanceFieldNames")
    instance_field_values: Optional[List[StrictStr]] = Field(default=None, description="List of highlighted time series instance field values. May be null.", alias="instanceFieldValues")
    name: Optional[StrictStr] = Field(default=None, description="Highlighted name of time series instance. May be null.")
    time_series_id: Optional[List[StrictStr]] = Field(default=None, description="List of highlighted string values of Time Series ID for displaying. Cannot be used to lookup instance.", alias="timeSeriesId")
    type_name: Optional[StrictStr] = Field(default=None, description="Highlighted time series type name that this instance belongs to.", alias="typeName")
    __properties: ClassVar[List[str]] = ["description", "hierarchyIds", "hierarchyNames", "instanceFieldNames", "instanceFieldValues", "name", "timeSeriesId", "typeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceHitHighlights from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "hierarchy_ids",
            "hierarchy_names",
            "instance_field_names",
            "instance_field_values",
            "name",
            "time_series_id",
            "type_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceHitHighlights from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "hierarchyIds": obj.get("hierarchyIds"),
            "hierarchyNames": obj.get("hierarchyNames"),
            "instanceFieldNames": obj.get("instanceFieldNames"),
            "instanceFieldValues": obj.get("instanceFieldValues"),
            "name": obj.get("name"),
            "timeSeriesId": obj.get("timeSeriesId"),
            "typeName": obj.get("typeName")
        })
        return _obj



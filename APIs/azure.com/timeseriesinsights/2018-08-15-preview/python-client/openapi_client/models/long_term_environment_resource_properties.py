# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights client

    The version of the OpenAPI document: 2018-08-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment_status import EnvironmentStatus
from openapi_client.models.long_term_storage_configuration_output import LongTermStorageConfigurationOutput
from openapi_client.models.provisioning_state import ProvisioningState
from openapi_client.models.time_series_id_property import TimeSeriesIdProperty
from openapi_client.models.warm_store_configuration_properties import WarmStoreConfigurationProperties
from typing import Optional, Set
from typing_extensions import Self

class LongTermEnvironmentResourceProperties(BaseModel):
    """
    Properties of the long-term environment.
    """ # noqa: E501
    storage_configuration: LongTermStorageConfigurationOutput = Field(alias="storageConfiguration")
    time_series_id_properties: List[TimeSeriesIdProperty] = Field(description="The list of event properties which will be used to define the environment's time series id.", alias="timeSeriesIdProperties")
    warm_store_configuration: Optional[WarmStoreConfigurationProperties] = Field(default=None, alias="warmStoreConfiguration")
    data_access_fqdn: Optional[StrictStr] = Field(default=None, description="The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.", alias="dataAccessFqdn")
    data_access_id: Optional[StrictStr] = Field(default=None, description="An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.", alias="dataAccessId")
    status: Optional[EnvironmentStatus] = None
    creation_time: Optional[datetime] = Field(default=None, description="The time the resource was created.", alias="creationTime")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    __properties: ClassVar[List[str]] = ["dataAccessFqdn", "dataAccessId", "status", "creationTime", "provisioningState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LongTermEnvironmentResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_access_fqdn",
            "data_access_id",
            "creation_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LongTermEnvironmentResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataAccessFqdn": obj.get("dataAccessFqdn"),
            "dataAccessId": obj.get("dataAccessId"),
            "status": EnvironmentStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "creationTime": obj.get("creationTime"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



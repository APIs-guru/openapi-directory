# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights client

    The version of the OpenAPI document: 2018-08-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class EventHubEventSourceResourceProperties(BaseModel):
    """
    Properties of the EventHub event source resource.
    """ # noqa: E501
    consumer_group_name: StrictStr = Field(description="The name of the event hub's consumer group that holds the partitions from which events will be read.", alias="consumerGroupName")
    event_hub_name: StrictStr = Field(description="The name of the event hub.", alias="eventHubName")
    key_name: StrictStr = Field(description="The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.", alias="keyName")
    service_bus_namespace: StrictStr = Field(description="The name of the service bus that contains the event hub.", alias="serviceBusNamespace")
    event_source_resource_id: StrictStr = Field(description="The resource id of the event source in Azure Resource Manager.", alias="eventSourceResourceId")
    timestamp_property_name: Optional[StrictStr] = Field(default=None, description="The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.", alias="timestampPropertyName")
    creation_time: Optional[datetime] = Field(default=None, description="The time the resource was created.", alias="creationTime")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    __properties: ClassVar[List[str]] = ["consumerGroupName", "eventHubName", "keyName", "serviceBusNamespace", "eventSourceResourceId", "timestampPropertyName", "creationTime", "provisioningState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventHubEventSourceResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventHubEventSourceResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerGroupName": obj.get("consumerGroupName"),
            "eventHubName": obj.get("eventHubName"),
            "keyName": obj.get("keyName"),
            "serviceBusNamespace": obj.get("serviceBusNamespace"),
            "eventSourceResourceId": obj.get("eventSourceResourceId"),
            "timestampPropertyName": obj.get("timestampPropertyName"),
            "creationTime": obj.get("creationTime"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights client

    The version of the OpenAPI document: 2017-11-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment_status import EnvironmentStatus
from openapi_client.models.partition_key_property import PartitionKeyProperty
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentResourceProperties(BaseModel):
    """
    Properties of the environment.
    """ # noqa: E501
    data_access_fqdn: Optional[StrictStr] = Field(default=None, description="The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.", alias="dataAccessFqdn")
    data_access_id: Optional[StrictStr] = Field(default=None, description="An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.", alias="dataAccessId")
    status: Optional[EnvironmentStatus] = None
    data_retention_time: StrictStr = Field(description="ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.", alias="dataRetentionTime")
    partition_key_properties: Optional[List[PartitionKeyProperty]] = Field(default=None, description="The list of partition keys according to which the data in the environment will be ordered.", alias="partitionKeyProperties")
    storage_limit_exceeded_behavior: Optional[StrictStr] = Field(default=None, description="The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If \"PauseIngress\" is specified, new events will not be read from the event source. If \"PurgeOldData\" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.", alias="storageLimitExceededBehavior")
    creation_time: Optional[datetime] = Field(default=None, description="The time the resource was created.", alias="creationTime")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    __properties: ClassVar[List[str]] = ["dataRetentionTime", "partitionKeyProperties", "storageLimitExceededBehavior", "creationTime", "provisioningState"]

    @field_validator('storage_limit_exceeded_behavior')
    def storage_limit_exceeded_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PurgeOldData', 'PauseIngress']):
            raise ValueError("must be one of enum values ('PurgeOldData', 'PauseIngress')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_access_fqdn",
            "data_access_id",
            "creation_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in partition_key_properties (list)
        _items = []
        if self.partition_key_properties:
            for _item_partition_key_properties in self.partition_key_properties:
                if _item_partition_key_properties:
                    _items.append(_item_partition_key_properties.to_dict())
            _dict['partitionKeyProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataRetentionTime": obj.get("dataRetentionTime"),
            "partitionKeyProperties": [PartitionKeyProperty.from_dict(_item) for _item in obj["partitionKeyProperties"]] if obj.get("partitionKeyProperties") is not None else None,
            "storageLimitExceededBehavior": obj.get("storageLimitExceededBehavior"),
            "creationTime": obj.get("creationTime"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



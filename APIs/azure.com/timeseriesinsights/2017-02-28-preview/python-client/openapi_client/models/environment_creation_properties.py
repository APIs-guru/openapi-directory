# coding: utf-8

"""
    TimeSeriesInsightsClient

    Time Series Insights client

    The version of the OpenAPI document: 2017-02-28-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentCreationProperties(BaseModel):
    """
    Properties used to create an environment.
    """ # noqa: E501
    data_retention_time: StrictStr = Field(description="ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.", alias="dataRetentionTime")
    storage_limit_exceeded_behavior: Optional[StrictStr] = Field(default=None, description="The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If \"PauseIngress\" is specified, new events will not be read from the event source. If \"PurgeOldData\" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.", alias="storageLimitExceededBehavior")
    __properties: ClassVar[List[str]] = ["dataRetentionTime", "storageLimitExceededBehavior"]

    @field_validator('storage_limit_exceeded_behavior')
    def storage_limit_exceeded_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PurgeOldData', 'PauseIngress']):
            raise ValueError("must be one of enum values ('PurgeOldData', 'PauseIngress')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentCreationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentCreationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataRetentionTime": obj.get("dataRetentionTime"),
            "storageLimitExceededBehavior": obj.get("storageLimitExceededBehavior")
        })
        return _obj



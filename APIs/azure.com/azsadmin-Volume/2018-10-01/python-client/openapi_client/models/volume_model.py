# coding: utf-8

"""
    FabricAdminClient

    Volume operation endpoints and objects.

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VolumeModel(BaseModel):
    """
    Properties of a volume.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.")
    health_status: Optional[StrictStr] = Field(default=None, description="Health status of the volume.", alias="healthStatus")
    operational_status: Optional[StrictStr] = Field(default=None, description="Operational status of the volume.", alias="operationalStatus")
    remaining_capacity_gb: Optional[StrictInt] = Field(default=None, description="Remaining capacity in GB of the volume.", alias="remainingCapacityGB")
    repair_status: Optional[StrictStr] = Field(default=None, description="Repair status of the volume. Empty if no repair job running, something like 'Running, 90%' when repairing.", alias="repairStatus")
    total_capacity_gb: Optional[StrictInt] = Field(default=None, description="Total capacity in GB of the volume.", alias="totalCapacityGB")
    volume_label: Optional[StrictStr] = Field(default=None, description="Volume label.", alias="volumeLabel")
    __properties: ClassVar[List[str]] = ["action", "description", "healthStatus", "operationalStatus", "remainingCapacityGB", "repairStatus", "totalCapacityGB", "volumeLabel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "description": obj.get("description"),
            "healthStatus": obj.get("healthStatus"),
            "operationalStatus": obj.get("operationalStatus"),
            "remainingCapacityGB": obj.get("remainingCapacityGB"),
            "repairStatus": obj.get("repairStatus"),
            "totalCapacityGB": obj.get("totalCapacityGB"),
            "volumeLabel": obj.get("volumeLabel")
        })
        return _obj



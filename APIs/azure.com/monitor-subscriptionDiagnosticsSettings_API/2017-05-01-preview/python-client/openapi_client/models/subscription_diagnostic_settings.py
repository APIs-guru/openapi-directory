# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.subscription_log_settings import SubscriptionLogSettings
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionDiagnosticSettings(BaseModel):
    """
    The subscription diagnostic settings.
    """ # noqa: E501
    event_hub_authorization_rule_id: Optional[StrictStr] = Field(default=None, description="The resource Id for the event hub authorization rule.", alias="eventHubAuthorizationRuleId")
    event_hub_name: Optional[StrictStr] = Field(default=None, description="The name of the event hub. If none is specified, the default event hub will be selected.", alias="eventHubName")
    logs: Optional[List[SubscriptionLogSettings]] = Field(default=None, description="The list of logs settings.")
    service_bus_rule_id: Optional[StrictStr] = Field(default=None, description="The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.", alias="serviceBusRuleId")
    storage_account_id: Optional[StrictStr] = Field(default=None, description="The resource ID of the storage account to which you would like to send Diagnostic Logs.", alias="storageAccountId")
    workspace_id: Optional[StrictStr] = Field(default=None, description="The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["eventHubAuthorizationRuleId", "eventHubName", "logs", "serviceBusRuleId", "storageAccountId", "workspaceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionDiagnosticSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in logs (list)
        _items = []
        if self.logs:
            for _item_logs in self.logs:
                if _item_logs:
                    _items.append(_item_logs.to_dict())
            _dict['logs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionDiagnosticSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventHubAuthorizationRuleId": obj.get("eventHubAuthorizationRuleId"),
            "eventHubName": obj.get("eventHubName"),
            "logs": [SubscriptionLogSettings.from_dict(_item) for _item in obj["logs"]] if obj.get("logs") is not None else None,
            "serviceBusRuleId": obj.get("serviceBusRuleId"),
            "storageAccountId": obj.get("storageAccountId"),
            "workspaceId": obj.get("workspaceId")
        })
        return _obj



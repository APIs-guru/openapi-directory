# coding: utf-8

"""
    UsageManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RateCardQueryParameters(BaseModel):
    """
    Parameters that are used in the odata $filter query parameter for providing RateCard information.
    """ # noqa: E501
    currency: StrictStr = Field(description="The currency in which the rates need to be provided.", alias="Currency")
    locale: StrictStr = Field(description="The culture in which the resource metadata needs to be localized.", alias="Locale")
    offer_durable_id: Annotated[str, Field(strict=True)] = Field(description="The Offer ID parameter consists of the 'MS-AZR-' prefix, plus the Offer ID number (e.g., MS-AZR-0026P). See https://azure.microsoft.com/en-us/support/legal/offer-details/ for more information on the list of available Offer IDs, country/region availability, and billing currency.", alias="OfferDurableId")
    region_info: StrictStr = Field(description="2 letter ISO code where the offer was purchased.", alias="RegionInfo")
    __properties: ClassVar[List[str]] = ["Currency", "Locale", "OfferDurableId", "RegionInfo"]

    @field_validator('offer_durable_id')
    def offer_durable_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^MS-AZR-\d{4}P(-\d{4}P)*$", value):
            raise ValueError(r"must validate the regular expression /^MS-AZR-\d{4}P(-\d{4}P)*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RateCardQueryParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RateCardQueryParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Currency": obj.get("Currency"),
            "Locale": obj.get("Locale"),
            "OfferDurableId": obj.get("OfferDurableId"),
            "RegionInfo": obj.get("RegionInfo")
        })
        return _obj



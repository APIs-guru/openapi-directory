# coding: utf-8

"""
    UsageManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.info_field import InfoField
from typing import Optional, Set
from typing_extensions import Self

class UsageSample(BaseModel):
    """
    Describes a sample of the usageAggregation.
    """ # noqa: E501
    info_fields: Optional[InfoField] = Field(default=None, alias="infoFields")
    instance_data: Optional[StrictStr] = Field(default=None, description="Key-value pairs of instance details represented as a string.", alias="instanceData")
    meter_category: Optional[StrictStr] = Field(default=None, description="Category of the consumed resource.", alias="meterCategory")
    meter_id: Optional[StrictStr] = Field(default=None, description="Unique ID for the resource that was consumed (aka ResourceID).", alias="meterId")
    meter_name: Optional[StrictStr] = Field(default=None, description="Friendly name of the resource being consumed.", alias="meterName")
    meter_region: Optional[StrictStr] = Field(default=None, description="Region of the meterId used for billing purposes", alias="meterRegion")
    meter_sub_category: Optional[StrictStr] = Field(default=None, description="Sub-category of the consumed resource.", alias="meterSubCategory")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the resource consumption that occurred in this time frame.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The subscription identifier for the Azure user.", alias="subscriptionId")
    unit: Optional[StrictStr] = Field(default=None, description="The unit in which the usage for this resource is being counted, e.g. Hours, GB.")
    usage_end_time: Optional[datetime] = Field(default=None, description="UTC end time for the usage bucket to which this usage aggregate belongs.", alias="usageEndTime")
    usage_start_time: Optional[datetime] = Field(default=None, description="UTC start time for the usage bucket to which this usage aggregate belongs.", alias="usageStartTime")
    __properties: ClassVar[List[str]] = ["infoFields", "instanceData", "meterCategory", "meterId", "meterName", "meterRegion", "meterSubCategory", "quantity", "subscriptionId", "unit", "usageEndTime", "usageStartTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageSample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of info_fields
        if self.info_fields:
            _dict['infoFields'] = self.info_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageSample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "infoFields": InfoField.from_dict(obj["infoFields"]) if obj.get("infoFields") is not None else None,
            "instanceData": obj.get("instanceData"),
            "meterCategory": obj.get("meterCategory"),
            "meterId": obj.get("meterId"),
            "meterName": obj.get("meterName"),
            "meterRegion": obj.get("meterRegion"),
            "meterSubCategory": obj.get("meterSubCategory"),
            "quantity": obj.get("quantity"),
            "subscriptionId": obj.get("subscriptionId"),
            "unit": obj.get("unit"),
            "usageEndTime": obj.get("usageEndTime"),
            "usageStartTime": obj.get("usageStartTime")
        })
        return _obj



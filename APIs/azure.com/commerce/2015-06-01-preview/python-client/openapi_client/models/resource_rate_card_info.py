# coding: utf-8

"""
    UsageManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.meter_info import MeterInfo
from openapi_client.models.offer_term_info import OfferTermInfo
from typing import Optional, Set
from typing_extensions import Self

class ResourceRateCardInfo(BaseModel):
    """
    Price and Metadata information for resources
    """ # noqa: E501
    currency: Optional[StrictStr] = Field(default=None, description="The currency in which the rates are provided.", alias="Currency")
    is_tax_included: Optional[StrictBool] = Field(default=None, description="All rates are pretax, so this will always be returned as 'false'.", alias="IsTaxIncluded")
    locale: Optional[StrictStr] = Field(default=None, description="The culture in which the resource information is localized.", alias="Locale")
    meters: Optional[List[MeterInfo]] = Field(default=None, description="A list of meters.", alias="Meters")
    offer_terms: Optional[List[OfferTermInfo]] = Field(default=None, description="A list of offer terms.", alias="OfferTerms")
    __properties: ClassVar[List[str]] = ["Currency", "IsTaxIncluded", "Locale", "Meters", "OfferTerms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceRateCardInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in meters (list)
        _items = []
        if self.meters:
            for _item_meters in self.meters:
                if _item_meters:
                    _items.append(_item_meters.to_dict())
            _dict['Meters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in offer_terms (list)
        _items = []
        if self.offer_terms:
            for _item_offer_terms in self.offer_terms:
                if _item_offer_terms:
                    _items.append(_item_offer_terms.to_dict())
            _dict['OfferTerms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceRateCardInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Currency": obj.get("Currency"),
            "IsTaxIncluded": obj.get("IsTaxIncluded"),
            "Locale": obj.get("Locale"),
            "Meters": [MeterInfo.from_dict(_item) for _item in obj["Meters"]] if obj.get("Meters") is not None else None,
            "OfferTerms": [OfferTermInfo.from_dict(_item) for _item in obj["OfferTerms"]] if obj.get("OfferTerms") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Software Plan RP

    Azure software plans let users create and manage licenses for various software used in Azure.

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.hybrid_use_benefit_list_result import HybridUseBenefitListResult

class TestHybridUseBenefitListResult(unittest.TestCase):
    """HybridUseBenefitListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HybridUseBenefitListResult:
        """Test HybridUseBenefitListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HybridUseBenefitListResult`
        """
        model = HybridUseBenefitListResult()
        if include_optional:
            return HybridUseBenefitListResult(
                next_link = '',
                value = [
                    openapi_client.models.hybrid_use_benefit_model.HybridUseBenefitModel(
                        etag = 56, 
                        properties = openapi_client.models.hybrid_use_benefit_properties.HybridUseBenefitProperties(
                            created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_updated_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            provisioning_state = 'Succeeded', ), 
                        sku = openapi_client.models.sku.Sku(
                            name = '', ), )
                    ]
            )
        else:
            return HybridUseBenefitListResult(
        )
        """

    def testHybridUseBenefitListResult(self):
        """Test HybridUseBenefitListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

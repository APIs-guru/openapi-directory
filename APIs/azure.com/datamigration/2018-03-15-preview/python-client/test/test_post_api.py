# coding: utf-8

"""
    Azure Data Migration Service Resource Provider

    The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.

    The version of the OpenAPI document: 2018-03-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.post_api import POSTApi


class TestPOSTApi(unittest.TestCase):
    """POSTApi unit test stubs"""

    def setUp(self) -> None:
        self.api = POSTApi()

    def tearDown(self) -> None:
        pass

    def test_services_check_children_name_availability_0(self) -> None:
        """Test case for services_check_children_name_availability_0

        Check nested resource name validity and availability
        """
        pass

    def test_services_check_name_availability_0(self) -> None:
        """Test case for services_check_name_availability_0

        Check name validity and availability
        """
        pass

    def test_services_check_status_1(self) -> None:
        """Test case for services_check_status_1

        Check service health status
        """
        pass

    def test_services_start_1(self) -> None:
        """Test case for services_start_1

        Start service
        """
        pass

    def test_services_stop_1(self) -> None:
        """Test case for services_stop_1

        Stop service
        """
        pass

    def test_tasks_cancel_1(self) -> None:
        """Test case for tasks_cancel_1

        Cancel a task
        """
        pass


if __name__ == '__main__':
    unittest.main()

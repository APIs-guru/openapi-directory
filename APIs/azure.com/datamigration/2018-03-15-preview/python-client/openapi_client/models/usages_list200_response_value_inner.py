# coding: utf-8

"""
    Azure Data Migration Service Resource Provider

    The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.

    The version of the OpenAPI document: 2018-03-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.usages_list200_response_value_inner_name import UsagesList200ResponseValueInnerName
from typing import Optional, Set
from typing_extensions import Self

class UsagesList200ResponseValueInner(BaseModel):
    """
    Describes a quota for or usage details about a resource
    """ # noqa: E501
    current_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current value of the quota. If null or missing, the current value cannot be determined in the context of the request.", alias="currentValue")
    id: Optional[StrictStr] = Field(default=None, description="The resource ID of the quota object")
    limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum value of the quota. If null or missing, the quota has no maximum, in which case it merely tracks usage.")
    name: Optional[UsagesList200ResponseValueInnerName] = None
    unit: Optional[StrictStr] = Field(default=None, description="The unit for the quota, such as Count, Bytes, BytesPerSecond, etc.")
    __properties: ClassVar[List[str]] = ["currentValue", "id", "limit", "name", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsagesList200ResponseValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsagesList200ResponseValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentValue": obj.get("currentValue"),
            "id": obj.get("id"),
            "limit": obj.get("limit"),
            "name": UsagesList200ResponseValueInnerName.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "unit": obj.get("unit")
        })
        return _obj



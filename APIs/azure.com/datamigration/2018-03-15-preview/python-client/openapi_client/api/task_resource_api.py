# coding: utf-8

"""
    Azure Data Migration Service Resource Provider

    The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.

    The version of the OpenAPI document: 2018-03-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.tasks_get200_response import TasksGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class TaskResourceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def tasks_cancel(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TasksGet200Response:
        """Cancel a task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it's currently queued or running.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_cancel_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tasks_cancel_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TasksGet200Response]:
        """Cancel a task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it's currently queued or running.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_cancel_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tasks_cancel_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel a task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it's currently queued or running.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_cancel_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tasks_cancel_serialize(
        self,
        subscription_id,
        group_name,
        service_name,
        project_name,
        task_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if group_name is not None:
            _path_params['groupName'] = group_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        if project_name is not None:
            _path_params['projectName'] = project_name
        if task_name is not None:
            _path_params['taskName'] = task_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tasks_create_or_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        parameters: Annotated[TasksGet200Response, Field(description="Information about the task")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TasksGet200Response:
        """Create or update task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param parameters: Information about the task (required)
        :type parameters: TasksGet200Response
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_create_or_update_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
            '201': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tasks_create_or_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        parameters: Annotated[TasksGet200Response, Field(description="Information about the task")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TasksGet200Response]:
        """Create or update task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param parameters: Information about the task (required)
        :type parameters: TasksGet200Response
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_create_or_update_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
            '201': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tasks_create_or_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        parameters: Annotated[TasksGet200Response, Field(description="Information about the task")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create or update task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param parameters: Information about the task (required)
        :type parameters: TasksGet200Response
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_create_or_update_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
            '201': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tasks_create_or_update_serialize(
        self,
        subscription_id,
        group_name,
        service_name,
        project_name,
        task_name,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if group_name is not None:
            _path_params['groupName'] = group_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        if project_name is not None:
            _path_params['projectName'] = project_name
        if task_name is not None:
            _path_params['taskName'] = task_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tasks_delete(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        delete_running_tasks: Annotated[Optional[StrictBool], Field(description="Delete the resource even if it contains running tasks")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it's running.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param delete_running_tasks: Delete the resource even if it contains running tasks
        :type delete_running_tasks: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_delete_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            delete_running_tasks=delete_running_tasks,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tasks_delete_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        delete_running_tasks: Annotated[Optional[StrictBool], Field(description="Delete the resource even if it contains running tasks")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it's running.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param delete_running_tasks: Delete the resource even if it contains running tasks
        :type delete_running_tasks: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_delete_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            delete_running_tasks=delete_running_tasks,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tasks_delete_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        delete_running_tasks: Annotated[Optional[StrictBool], Field(description="Delete the resource even if it contains running tasks")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it's running.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param delete_running_tasks: Delete the resource even if it contains running tasks
        :type delete_running_tasks: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_delete_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            delete_running_tasks=delete_running_tasks,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tasks_delete_serialize(
        self,
        subscription_id,
        group_name,
        service_name,
        project_name,
        task_name,
        api_version,
        delete_running_tasks,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if group_name is not None:
            _path_params['groupName'] = group_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        if project_name is not None:
            _path_params['projectName'] = project_name
        if task_name is not None:
            _path_params['taskName'] = task_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if delete_running_tasks is not None:
            
            _query_params.append(('deleteRunningTasks', delete_running_tasks))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tasks_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        expand: Annotated[Optional[StrictStr], Field(description="Expand the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TasksGet200Response:
        """Get task information

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param expand: Expand the response
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_get_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tasks_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        expand: Annotated[Optional[StrictStr], Field(description="Expand the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TasksGet200Response]:
        """Get task information

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param expand: Expand the response
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_get_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tasks_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        expand: Annotated[Optional[StrictStr], Field(description="Expand the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get task information

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param expand: Expand the response
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_get_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tasks_get_serialize(
        self,
        subscription_id,
        group_name,
        service_name,
        project_name,
        task_name,
        api_version,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if group_name is not None:
            _path_params['groupName'] = group_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        if project_name is not None:
            _path_params['projectName'] = project_name
        if task_name is not None:
            _path_params['taskName'] = task_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tasks_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        parameters: Annotated[TasksGet200Response, Field(description="Information about the task")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TasksGet200Response:
        """Create or update task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param parameters: Information about the task (required)
        :type parameters: TasksGet200Response
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_update_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tasks_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        parameters: Annotated[TasksGet200Response, Field(description="Information about the task")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TasksGet200Response]:
        """Create or update task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param parameters: Information about the task (required)
        :type parameters: TasksGet200Response
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_update_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tasks_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Identifier of the subscription")],
        group_name: Annotated[StrictStr, Field(description="Name of the resource group")],
        service_name: Annotated[StrictStr, Field(description="Name of the service")],
        project_name: Annotated[StrictStr, Field(description="Name of the project")],
        task_name: Annotated[StrictStr, Field(description="Name of the Task")],
        api_version: Annotated[StrictStr, Field(description="Version of the API")],
        parameters: Annotated[TasksGet200Response, Field(description="Information about the task")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create or update task

        The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.

        :param subscription_id: Identifier of the subscription (required)
        :type subscription_id: str
        :param group_name: Name of the resource group (required)
        :type group_name: str
        :param service_name: Name of the service (required)
        :type service_name: str
        :param project_name: Name of the project (required)
        :type project_name: str
        :param task_name: Name of the Task (required)
        :type task_name: str
        :param api_version: Version of the API (required)
        :type api_version: str
        :param parameters: Information about the task (required)
        :type parameters: TasksGet200Response
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tasks_update_serialize(
            subscription_id=subscription_id,
            group_name=group_name,
            service_name=service_name,
            project_name=project_name,
            task_name=task_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TasksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tasks_update_serialize(
        self,
        subscription_id,
        group_name,
        service_name,
        project_name,
        task_name,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if group_name is not None:
            _path_params['groupName'] = group_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        if project_name is not None:
            _path_params['projectName'] = project_name
        if task_name is not None:
            _path_params['taskName'] = task_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



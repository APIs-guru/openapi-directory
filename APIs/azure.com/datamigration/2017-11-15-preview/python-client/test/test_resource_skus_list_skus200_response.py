# coding: utf-8

"""
    Azure Data Migration Service Resource Provider

    The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.

    The version of the OpenAPI document: 2017-11-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.resource_skus_list_skus200_response import ResourceSkusListSkus200Response

class TestResourceSkusListSkus200Response(unittest.TestCase):
    """ResourceSkusListSkus200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResourceSkusListSkus200Response:
        """Test ResourceSkusListSkus200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResourceSkusListSkus200Response`
        """
        model = ResourceSkusListSkus200Response()
        if include_optional:
            return ResourceSkusListSkus200Response(
                next_link = '',
                value = [
                    openapi_client.models.resource_skus_list_skus_200_response_value_inner.ResourceSkus_ListSkus_200_response_value_inner(
                        api_versions = [
                            ''
                            ], 
                        capabilities = [
                            openapi_client.models.resource_skus_list_skus_200_response_value_inner_capabilities_inner.ResourceSkus_ListSkus_200_response_value_inner_capabilities_inner(
                                name = '', 
                                value = '', )
                            ], 
                        capacity = openapi_client.models.resource_skus_list_skus_200_response_value_inner_capacity.ResourceSkus_ListSkus_200_response_value_inner_capacity(
                            default = 56, 
                            maximum = 56, 
                            minimum = 56, 
                            scale_type = 'Automatic', ), 
                        costs = [
                            openapi_client.models.resource_skus_list_skus_200_response_value_inner_costs_inner.ResourceSkus_ListSkus_200_response_value_inner_costs_inner(
                                extended_unit = '', 
                                meter_id = '', 
                                quantity = 56, )
                            ], 
                        family = '', 
                        kind = '', 
                        locations = [
                            ''
                            ], 
                        name = '', 
                        resource_type = '', 
                        restrictions = [
                            openapi_client.models.resource_skus_list_skus_200_response_value_inner_restrictions_inner.ResourceSkus_ListSkus_200_response_value_inner_restrictions_inner(
                                reason_code = 'QuotaId', 
                                type = 'location', 
                                values = [
                                    ''
                                    ], )
                            ], 
                        size = '', 
                        tier = '', )
                    ]
            )
        else:
            return ResourceSkusListSkus200Response(
                value = [
                    openapi_client.models.resource_skus_list_skus_200_response_value_inner.ResourceSkus_ListSkus_200_response_value_inner(
                        api_versions = [
                            ''
                            ], 
                        capabilities = [
                            openapi_client.models.resource_skus_list_skus_200_response_value_inner_capabilities_inner.ResourceSkus_ListSkus_200_response_value_inner_capabilities_inner(
                                name = '', 
                                value = '', )
                            ], 
                        capacity = openapi_client.models.resource_skus_list_skus_200_response_value_inner_capacity.ResourceSkus_ListSkus_200_response_value_inner_capacity(
                            default = 56, 
                            maximum = 56, 
                            minimum = 56, 
                            scale_type = 'Automatic', ), 
                        costs = [
                            openapi_client.models.resource_skus_list_skus_200_response_value_inner_costs_inner.ResourceSkus_ListSkus_200_response_value_inner_costs_inner(
                                extended_unit = '', 
                                meter_id = '', 
                                quantity = 56, )
                            ], 
                        family = '', 
                        kind = '', 
                        locations = [
                            ''
                            ], 
                        name = '', 
                        resource_type = '', 
                        restrictions = [
                            openapi_client.models.resource_skus_list_skus_200_response_value_inner_restrictions_inner.ResourceSkus_ListSkus_200_response_value_inner_restrictions_inner(
                                reason_code = 'QuotaId', 
                                type = 'location', 
                                values = [
                                    ''
                                    ], )
                            ], 
                        size = '', 
                        tier = '', )
                    ],
        )
        """

    def testResourceSkusListSkus200Response(self):
        """Test ResourceSkusListSkus200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

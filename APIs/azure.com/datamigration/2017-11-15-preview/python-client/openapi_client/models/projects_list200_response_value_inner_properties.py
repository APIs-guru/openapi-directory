# coding: utf-8

"""
    Azure Data Migration Service Resource Provider

    The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.

    The version of the OpenAPI document: 2017-11-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.projects_list200_response_value_inner_properties_databases_info_inner import ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner
from openapi_client.models.projects_list200_response_value_inner_properties_source_connection_info import ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo
from typing import Optional, Set
from typing_extensions import Self

class ProjectsList200ResponseValueInnerProperties(BaseModel):
    """
    Project-specific properties
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="UTC Date and time when project was created", alias="creationTime")
    databases_info: Optional[List[ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner]] = Field(default=None, description="List of DatabaseInfo", alias="databasesInfo")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The project's provisioning state", alias="provisioningState")
    source_connection_info: Optional[ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo] = Field(default=None, alias="sourceConnectionInfo")
    source_platform: StrictStr = Field(description="Source platform of the project", alias="sourcePlatform")
    target_connection_info: Optional[ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo] = Field(default=None, alias="targetConnectionInfo")
    target_platform: StrictStr = Field(description="Target platform of the project", alias="targetPlatform")
    __properties: ClassVar[List[str]] = ["creationTime", "databasesInfo", "provisioningState", "sourceConnectionInfo", "sourcePlatform", "targetConnectionInfo", "targetPlatform"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Deleting', 'Succeeded']):
            raise ValueError("must be one of enum values ('Deleting', 'Succeeded')")
        return value

    @field_validator('source_platform')
    def source_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SQL', 'Unknown']):
            raise ValueError("must be one of enum values ('SQL', 'Unknown')")
        return value

    @field_validator('target_platform')
    def target_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SQLDB', 'Unknown']):
            raise ValueError("must be one of enum values ('SQLDB', 'Unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectsList200ResponseValueInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in databases_info (list)
        _items = []
        if self.databases_info:
            for _item_databases_info in self.databases_info:
                if _item_databases_info:
                    _items.append(_item_databases_info.to_dict())
            _dict['databasesInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of source_connection_info
        if self.source_connection_info:
            _dict['sourceConnectionInfo'] = self.source_connection_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_connection_info
        if self.target_connection_info:
            _dict['targetConnectionInfo'] = self.target_connection_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectsList200ResponseValueInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "databasesInfo": [ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner.from_dict(_item) for _item in obj["databasesInfo"]] if obj.get("databasesInfo") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "sourceConnectionInfo": ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo.from_dict(obj["sourceConnectionInfo"]) if obj.get("sourceConnectionInfo") is not None else None,
            "sourcePlatform": obj.get("sourcePlatform"),
            "targetConnectionInfo": ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo.from_dict(obj["targetConnectionInfo"]) if obj.get("targetConnectionInfo") is not None else None,
            "targetPlatform": obj.get("targetPlatform")
        })
        return _obj



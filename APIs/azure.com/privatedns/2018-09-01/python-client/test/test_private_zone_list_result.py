# coding: utf-8

"""
    PrivateDnsManagementClient

    The Private DNS Management Client.

    The version of the OpenAPI document: 2018-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.private_zone_list_result import PrivateZoneListResult

class TestPrivateZoneListResult(unittest.TestCase):
    """PrivateZoneListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrivateZoneListResult:
        """Test PrivateZoneListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrivateZoneListResult`
        """
        model = PrivateZoneListResult()
        if include_optional:
            return PrivateZoneListResult(
                next_link = '',
                value = [
                    openapi_client.models.private_zone.PrivateZone(
                        etag = '', 
                        properties = openapi_client.models.private_zone_properties.PrivateZoneProperties(
                            max_number_of_record_sets = 56, 
                            max_number_of_virtual_network_links = 56, 
                            max_number_of_virtual_network_links_with_registration = 56, 
                            number_of_record_sets = 56, 
                            number_of_virtual_network_links = 56, 
                            number_of_virtual_network_links_with_registration = 56, 
                            provisioning_state = 'Creating', ), )
                    ]
            )
        else:
            return PrivateZoneListResult(
        )
        """

    def testPrivateZoneListResult(self):
        """Test PrivateZoneListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

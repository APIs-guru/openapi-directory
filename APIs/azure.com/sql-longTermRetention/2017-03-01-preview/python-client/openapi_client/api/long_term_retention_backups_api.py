# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.long_term_retention_backup import LongTermRetentionBackup
from openapi_client.models.long_term_retention_backup_list_result import LongTermRetentionBackupListResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LongTermRetentionBackupsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def long_term_retention_backups_delete(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """long_term_retention_backups_delete

        Deletes a long term retention backup.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_delete_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_delete_with_http_info(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """long_term_retention_backups_delete

        Deletes a long term retention backup.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_delete_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_delete_without_preload_content(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_delete

        Deletes a long term retention backup.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_delete_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_delete_serialize(
        self,
        location_name,
        long_term_retention_server_name,
        long_term_retention_database_name,
        backup_name,
        subscription_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_name is not None:
            _path_params['locationName'] = location_name
        if long_term_retention_server_name is not None:
            _path_params['longTermRetentionServerName'] = long_term_retention_server_name
        if long_term_retention_database_name is not None:
            _path_params['longTermRetentionDatabaseName'] = long_term_retention_database_name
        if backup_name is not None:
            _path_params['backupName'] = backup_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_delete_by_resource_group(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """long_term_retention_backups_delete_by_resource_group

        Deletes a long term retention backup.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_delete_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_delete_by_resource_group_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """long_term_retention_backups_delete_by_resource_group

        Deletes a long term retention backup.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_delete_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_delete_by_resource_group_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_delete_by_resource_group

        Deletes a long term retention backup.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_delete_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_delete_by_resource_group_serialize(
        self,
        resource_group_name,
        location_name,
        long_term_retention_server_name,
        long_term_retention_database_name,
        backup_name,
        subscription_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if location_name is not None:
            _path_params['locationName'] = location_name
        if long_term_retention_server_name is not None:
            _path_params['longTermRetentionServerName'] = long_term_retention_server_name
        if long_term_retention_database_name is not None:
            _path_params['longTermRetentionDatabaseName'] = long_term_retention_database_name
        if backup_name is not None:
            _path_params['backupName'] = backup_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_get(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database.")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LongTermRetentionBackup:
        """long_term_retention_backups_get

        Gets a long term retention backup.

        :param location_name: The location of the database. (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_get_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_get_with_http_info(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database.")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LongTermRetentionBackup]:
        """long_term_retention_backups_get

        Gets a long term retention backup.

        :param location_name: The location of the database. (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_get_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_get_without_preload_content(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database.")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_get

        Gets a long term retention backup.

        :param location_name: The location of the database. (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_get_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_get_serialize(
        self,
        location_name,
        long_term_retention_server_name,
        long_term_retention_database_name,
        backup_name,
        subscription_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_name is not None:
            _path_params['locationName'] = location_name
        if long_term_retention_server_name is not None:
            _path_params['longTermRetentionServerName'] = long_term_retention_server_name
        if long_term_retention_database_name is not None:
            _path_params['longTermRetentionDatabaseName'] = long_term_retention_database_name
        if backup_name is not None:
            _path_params['backupName'] = backup_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_get_by_resource_group(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database.")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LongTermRetentionBackup:
        """long_term_retention_backups_get_by_resource_group

        Gets a long term retention backup.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database. (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_get_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_get_by_resource_group_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database.")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LongTermRetentionBackup]:
        """long_term_retention_backups_get_by_resource_group

        Gets a long term retention backup.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database. (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_get_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_get_by_resource_group_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database.")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        backup_name: Annotated[StrictStr, Field(description="The backup name.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_get_by_resource_group

        Gets a long term retention backup.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database. (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param backup_name: The backup name. (required)
        :type backup_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_get_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            backup_name=backup_name,
            subscription_id=subscription_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_get_by_resource_group_serialize(
        self,
        resource_group_name,
        location_name,
        long_term_retention_server_name,
        long_term_retention_database_name,
        backup_name,
        subscription_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if location_name is not None:
            _path_params['locationName'] = location_name
        if long_term_retention_server_name is not None:
            _path_params['longTermRetentionServerName'] = long_term_retention_server_name
        if long_term_retention_database_name is not None:
            _path_params['longTermRetentionDatabaseName'] = long_term_retention_database_name
        if backup_name is not None:
            _path_params['backupName'] = backup_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_list_by_database(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LongTermRetentionBackupListResult:
        """long_term_retention_backups_list_by_database

        Lists all long term retention backups for a database.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_database_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_list_by_database_with_http_info(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LongTermRetentionBackupListResult]:
        """long_term_retention_backups_list_by_database

        Lists all long term retention backups for a database.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_database_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_list_by_database_without_preload_content(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_list_by_database

        Lists all long term retention backups for a database.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_database_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_list_by_database_serialize(
        self,
        location_name,
        long_term_retention_server_name,
        long_term_retention_database_name,
        subscription_id,
        api_version,
        only_latest_per_database,
        database_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_name is not None:
            _path_params['locationName'] = location_name
        if long_term_retention_server_name is not None:
            _path_params['longTermRetentionServerName'] = long_term_retention_server_name
        if long_term_retention_database_name is not None:
            _path_params['longTermRetentionDatabaseName'] = long_term_retention_database_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if only_latest_per_database is not None:
            
            _query_params.append(('onlyLatestPerDatabase', only_latest_per_database))
            
        if database_state is not None:
            
            _query_params.append(('databaseState', database_state))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_list_by_location(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LongTermRetentionBackupListResult:
        """long_term_retention_backups_list_by_location

        Lists the long term retention backups for a given location.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_location_serialize(
            location_name=location_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_list_by_location_with_http_info(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LongTermRetentionBackupListResult]:
        """long_term_retention_backups_list_by_location

        Lists the long term retention backups for a given location.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_location_serialize(
            location_name=location_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_list_by_location_without_preload_content(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_list_by_location

        Lists the long term retention backups for a given location.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_location_serialize(
            location_name=location_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_list_by_location_serialize(
        self,
        location_name,
        subscription_id,
        api_version,
        only_latest_per_database,
        database_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_name is not None:
            _path_params['locationName'] = location_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if only_latest_per_database is not None:
            
            _query_params.append(('onlyLatestPerDatabase', only_latest_per_database))
            
        if database_state is not None:
            
            _query_params.append(('databaseState', database_state))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_list_by_resource_group_database(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LongTermRetentionBackupListResult:
        """long_term_retention_backups_list_by_resource_group_database

        Lists all long term retention backups for a database.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_database_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_list_by_resource_group_database_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LongTermRetentionBackupListResult]:
        """long_term_retention_backups_list_by_resource_group_database

        Lists all long term retention backups for a database.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_database_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_list_by_resource_group_database_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        long_term_retention_database_name: Annotated[StrictStr, Field(description="The name of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_list_by_resource_group_database

        Lists all long term retention backups for a database.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param long_term_retention_database_name: The name of the database (required)
        :type long_term_retention_database_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_database_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            long_term_retention_database_name=long_term_retention_database_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_list_by_resource_group_database_serialize(
        self,
        resource_group_name,
        location_name,
        long_term_retention_server_name,
        long_term_retention_database_name,
        subscription_id,
        api_version,
        only_latest_per_database,
        database_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if location_name is not None:
            _path_params['locationName'] = location_name
        if long_term_retention_server_name is not None:
            _path_params['longTermRetentionServerName'] = long_term_retention_server_name
        if long_term_retention_database_name is not None:
            _path_params['longTermRetentionDatabaseName'] = long_term_retention_database_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if only_latest_per_database is not None:
            
            _query_params.append(('onlyLatestPerDatabase', only_latest_per_database))
            
        if database_state is not None:
            
            _query_params.append(('databaseState', database_state))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_list_by_resource_group_location(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LongTermRetentionBackupListResult:
        """long_term_retention_backups_list_by_resource_group_location

        Lists the long term retention backups for a given location.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_location_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_list_by_resource_group_location_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LongTermRetentionBackupListResult]:
        """long_term_retention_backups_list_by_resource_group_location

        Lists the long term retention backups for a given location.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_location_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_list_by_resource_group_location_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_list_by_resource_group_location

        Lists the long term retention backups for a given location.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_location_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_list_by_resource_group_location_serialize(
        self,
        resource_group_name,
        location_name,
        subscription_id,
        api_version,
        only_latest_per_database,
        database_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if location_name is not None:
            _path_params['locationName'] = location_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if only_latest_per_database is not None:
            
            _query_params.append(('onlyLatestPerDatabase', only_latest_per_database))
            
        if database_state is not None:
            
            _query_params.append(('databaseState', database_state))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_list_by_resource_group_server(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LongTermRetentionBackupListResult:
        """long_term_retention_backups_list_by_resource_group_server

        Lists the long term retention backups for a given server.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_server_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_list_by_resource_group_server_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LongTermRetentionBackupListResult]:
        """long_term_retention_backups_list_by_resource_group_server

        Lists the long term retention backups for a given server.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_server_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_list_by_resource_group_server_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.")],
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_list_by_resource_group_server

        Lists the long term retention backups for a given server.

        :param resource_group_name: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
        :type resource_group_name: str
        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_resource_group_server_serialize(
            resource_group_name=resource_group_name,
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_list_by_resource_group_server_serialize(
        self,
        resource_group_name,
        location_name,
        long_term_retention_server_name,
        subscription_id,
        api_version,
        only_latest_per_database,
        database_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if location_name is not None:
            _path_params['locationName'] = location_name
        if long_term_retention_server_name is not None:
            _path_params['longTermRetentionServerName'] = long_term_retention_server_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if only_latest_per_database is not None:
            
            _query_params.append(('onlyLatestPerDatabase', only_latest_per_database))
            
        if database_state is not None:
            
            _query_params.append(('databaseState', database_state))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def long_term_retention_backups_list_by_server(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LongTermRetentionBackupListResult:
        """long_term_retention_backups_list_by_server

        Lists the long term retention backups for a given server.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_server_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def long_term_retention_backups_list_by_server_with_http_info(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LongTermRetentionBackupListResult]:
        """long_term_retention_backups_list_by_server

        Lists the long term retention backups for a given server.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_server_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def long_term_retention_backups_list_by_server_without_preload_content(
        self,
        location_name: Annotated[StrictStr, Field(description="The location of the database")],
        long_term_retention_server_name: Annotated[StrictStr, Field(description="The name of the server")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        only_latest_per_database: Annotated[Optional[StrictBool], Field(description="Whether or not to only get the latest backup for each database.")] = None,
        database_state: Annotated[Optional[StrictStr], Field(description="Whether to query against just live databases, just deleted databases, or all databases.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """long_term_retention_backups_list_by_server

        Lists the long term retention backups for a given server.

        :param location_name: The location of the database (required)
        :type location_name: str
        :param long_term_retention_server_name: The name of the server (required)
        :type long_term_retention_server_name: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param only_latest_per_database: Whether or not to only get the latest backup for each database.
        :type only_latest_per_database: bool
        :param database_state: Whether to query against just live databases, just deleted databases, or all databases.
        :type database_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._long_term_retention_backups_list_by_server_serialize(
            location_name=location_name,
            long_term_retention_server_name=long_term_retention_server_name,
            subscription_id=subscription_id,
            api_version=api_version,
            only_latest_per_database=only_latest_per_database,
            database_state=database_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LongTermRetentionBackupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _long_term_retention_backups_list_by_server_serialize(
        self,
        location_name,
        long_term_retention_server_name,
        subscription_id,
        api_version,
        only_latest_per_database,
        database_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location_name is not None:
            _path_params['locationName'] = location_name
        if long_term_retention_server_name is not None:
            _path_params['longTermRetentionServerName'] = long_term_retention_server_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if only_latest_per_database is not None:
            
            _query_params.append(('onlyLatestPerDatabase', only_latest_per_database))
            
        if database_state is not None:
            
            _query_params.append(('databaseState', database_state))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



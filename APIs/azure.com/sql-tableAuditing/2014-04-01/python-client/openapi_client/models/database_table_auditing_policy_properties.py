# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DatabaseTableAuditingPolicyProperties(BaseModel):
    """
    Properties of a database table auditing policy.
    """ # noqa: E501
    use_server_default: Optional[StrictStr] = Field(default=None, description="Whether server default is enabled or disabled.", alias="useServerDefault")
    audit_logs_table_name: Optional[StrictStr] = Field(default=None, description="The audit logs table name.", alias="auditLogsTableName")
    auditing_state: Optional[StrictStr] = Field(default=None, description="The state of the policy.", alias="auditingState")
    event_types_to_audit: Optional[StrictStr] = Field(default=None, description="Comma-separated list of event types to audit.", alias="eventTypesToAudit")
    full_audit_logs_table_name: Optional[StrictStr] = Field(default=None, description="The full audit logs table name.", alias="fullAuditLogsTableName")
    retention_days: Optional[StrictStr] = Field(default=None, description="The number of days to keep in the audit logs.", alias="retentionDays")
    storage_account_key: Optional[StrictStr] = Field(default=None, description="The key of the auditing storage account.", alias="storageAccountKey")
    storage_account_name: Optional[StrictStr] = Field(default=None, description="The table storage account name", alias="storageAccountName")
    storage_account_resource_group_name: Optional[StrictStr] = Field(default=None, description="The table storage account resource group name", alias="storageAccountResourceGroupName")
    storage_account_secondary_key: Optional[StrictStr] = Field(default=None, description="The secondary key of the auditing storage account.", alias="storageAccountSecondaryKey")
    storage_account_subscription_id: Optional[StrictStr] = Field(default=None, description="The table storage subscription Id.", alias="storageAccountSubscriptionId")
    storage_table_endpoint: Optional[StrictStr] = Field(default=None, description="The storage table endpoint.", alias="storageTableEndpoint")
    __properties: ClassVar[List[str]] = ["auditLogsTableName", "auditingState", "eventTypesToAudit", "fullAuditLogsTableName", "retentionDays", "storageAccountKey", "storageAccountName", "storageAccountResourceGroupName", "storageAccountSecondaryKey", "storageAccountSubscriptionId", "storageTableEndpoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseTableAuditingPolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseTableAuditingPolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auditLogsTableName": obj.get("auditLogsTableName"),
            "auditingState": obj.get("auditingState"),
            "eventTypesToAudit": obj.get("eventTypesToAudit"),
            "fullAuditLogsTableName": obj.get("fullAuditLogsTableName"),
            "retentionDays": obj.get("retentionDays"),
            "storageAccountKey": obj.get("storageAccountKey"),
            "storageAccountName": obj.get("storageAccountName"),
            "storageAccountResourceGroupName": obj.get("storageAccountResourceGroupName"),
            "storageAccountSecondaryKey": obj.get("storageAccountSecondaryKey"),
            "storageAccountSubscriptionId": obj.get("storageAccountSubscriptionId"),
            "storageTableEndpoint": obj.get("storageTableEndpoint")
        })
        return _obj



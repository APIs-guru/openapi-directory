# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.private_cloud import PrivateCloud

class TestPrivateCloud(unittest.TestCase):
    """PrivateCloud unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrivateCloud:
        """Test PrivateCloud
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrivateCloud`
        """
        model = PrivateCloud()
        if include_optional:
            return PrivateCloud(
                id = '',
                location = '',
                name = '',
                properties = openapi_client.models.private_cloud_properties.PrivateCloudProperties(
                    availability_zone_id = '', 
                    availability_zone_name = '', 
                    clusters_number = 56, 
                    created_by = '', 
                    created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    dns_servers = [
                        ''
                        ], 
                    expires = '', 
                    nsx_type = '', 
                    placement_group_id = '', 
                    placement_group_name = '', 
                    private_cloud_id = '', 
                    resource_pools = [
                        openapi_client.models.resource_pool.ResourcePool(
                            id = '', 
                            location = '', 
                            name = '', 
                            private_cloud_id = '', 
                            properties = openapi_client.models.resource_pool_properties.ResourcePoolProperties(
                                full_name = '', ), 
                            type = '', )
                        ], 
                    state = '', 
                    total_cpu_cores = 56, 
                    total_nodes = 56, 
                    total_ram = 56, 
                    total_storage = 1.337, 
                    type = '', 
                    v_sphere_version = '', 
                    vcenter_fqdn = '', 
                    vcenter_refid = '', 
                    virtual_machine_templates = [
                        openapi_client.models.virtual_machine_template.VirtualMachineTemplate(
                            id = '', 
                            location = '', 
                            name = '', 
                            type = '', )
                        ], 
                    virtual_networks = [
                        openapi_client.models.virtual_network.VirtualNetwork(
                            assignable = True, 
                            id = '', 
                            location = '', 
                            name = '', 
                            type = '', )
                        ], 
                    vr_ops_enabled = True, ),
                type = 'Microsoft.VMwareCloudSimple/privateClouds'
            )
        else:
            return PrivateCloud(
        )
        """

    def testPrivateCloud(self):
        """Test PrivateCloud"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

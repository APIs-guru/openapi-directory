# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_machine_template import VirtualMachineTemplate

class TestVirtualMachineTemplate(unittest.TestCase):
    """VirtualMachineTemplate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualMachineTemplate:
        """Test VirtualMachineTemplate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualMachineTemplate`
        """
        model = VirtualMachineTemplate()
        if include_optional:
            return VirtualMachineTemplate(
                id = '',
                location = '',
                name = '',
                properties = openapi_client.models.virtual_machine_template_properties.VirtualMachineTemplateProperties(
                    amount_of_ram = 56, 
                    controllers = [
                        openapi_client.models.virtual_disk_controller.VirtualDiskController(
                            id = '', 
                            name = '', 
                            sub_type = '', 
                            type = '', )
                        ], 
                    description = '', 
                    disks = [
                        openapi_client.models.virtual_disk.VirtualDisk(
                            controller_id = '', 
                            independence_mode = 'persistent', 
                            total_size = 56, 
                            virtual_disk_id = '', 
                            virtual_disk_name = '', )
                        ], 
                    expose_to_guest_vm = True, 
                    guest_os = '', 
                    guest_os_type = '', 
                    nics = [
                        openapi_client.models.virtual_nic.VirtualNic(
                            customization = openapi_client.models.guest_osnic_customization.GuestOSNICCustomization(
                                allocation = 'static', 
                                dns_servers = [
                                    '4.7.238.1'
                                    ], 
                                gateway = [
                                    '4.7.238.1'
                                    ], 
                                ip_address = '4.7.238.1', 
                                mask = '4.7.238.1', 
                                primary_wins_server = '4.7.238.1', 
                                secondary_wins_server = '4.7.238.1', ), 
                            ip_addresses = [
                                ''
                                ], 
                            mac_address = '', 
                            network = openapi_client.models.virtual_network.VirtualNetwork(
                                assignable = True, 
                                id = '', 
                                location = '', 
                                name = '', 
                                type = '', ), 
                            nic_type = 'E1000', 
                            power_on_boot = True, 
                            virtual_nic_id = '', 
                            virtual_nic_name = '', )
                        ], 
                    number_of_cores = 56, 
                    path = 'Datacenter/Workload VMs', 
                    private_cloud_id = '', 
                    v_sphere_networks = [
                        ''
                        ], 
                    v_sphere_tags = [
                        ''
                        ], 
                    vmwaretools = '', ),
                type = ''
            )
        else:
            return VirtualMachineTemplate(
        )
        """

    def testVirtualMachineTemplate(self):
        """Test VirtualMachineTemplate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

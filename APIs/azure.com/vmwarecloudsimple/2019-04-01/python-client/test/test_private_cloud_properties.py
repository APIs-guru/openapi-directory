# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.private_cloud_properties import PrivateCloudProperties

class TestPrivateCloudProperties(unittest.TestCase):
    """PrivateCloudProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrivateCloudProperties:
        """Test PrivateCloudProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrivateCloudProperties`
        """
        model = PrivateCloudProperties()
        if include_optional:
            return PrivateCloudProperties(
                availability_zone_id = '',
                availability_zone_name = '',
                clusters_number = 56,
                created_by = '',
                created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dns_servers = [
                    ''
                    ],
                expires = '',
                nsx_type = '',
                placement_group_id = '',
                placement_group_name = '',
                private_cloud_id = '',
                resource_pools = [
                    openapi_client.models.resource_pool.ResourcePool(
                        id = '', 
                        location = '', 
                        name = '', 
                        private_cloud_id = '', 
                        properties = openapi_client.models.resource_pool_properties.ResourcePoolProperties(
                            full_name = '', ), 
                        type = '', )
                    ],
                state = '',
                total_cpu_cores = 56,
                total_nodes = 56,
                total_ram = 56,
                total_storage = 1.337,
                type = '',
                v_sphere_version = '',
                vcenter_fqdn = '',
                vcenter_refid = '',
                virtual_machine_templates = [
                    openapi_client.models.virtual_machine_template.VirtualMachineTemplate(
                        id = '', 
                        location = '', 
                        name = '', 
                        properties = openapi_client.models.virtual_machine_template_properties.VirtualMachineTemplateProperties(
                            amount_of_ram = 56, 
                            controllers = [
                                openapi_client.models.virtual_disk_controller.VirtualDiskController(
                                    id = '', 
                                    name = '', 
                                    sub_type = '', 
                                    type = '', )
                                ], 
                            description = '', 
                            disks = [
                                openapi_client.models.virtual_disk.VirtualDisk(
                                    controller_id = '', 
                                    independence_mode = 'persistent', 
                                    total_size = 56, 
                                    virtual_disk_id = '', 
                                    virtual_disk_name = '', )
                                ], 
                            expose_to_guest_vm = True, 
                            guest_os = '', 
                            guest_os_type = '', 
                            nics = [
                                openapi_client.models.virtual_nic.VirtualNic(
                                    customization = openapi_client.models.guest_osnic_customization.GuestOSNICCustomization(
                                        allocation = 'static', 
                                        dns_servers = [
                                            '4.7.238.1'
                                            ], 
                                        gateway = [
                                            '4.7.238.1'
                                            ], 
                                        ip_address = '4.7.238.1', 
                                        mask = '4.7.238.1', 
                                        primary_wins_server = '4.7.238.1', 
                                        secondary_wins_server = '4.7.238.1', ), 
                                    ip_addresses = [
                                        ''
                                        ], 
                                    mac_address = '', 
                                    network = openapi_client.models.virtual_network.VirtualNetwork(
                                        assignable = True, 
                                        id = '', 
                                        location = '', 
                                        name = '', 
                                        type = '', ), 
                                    nic_type = 'E1000', 
                                    power_on_boot = True, 
                                    virtual_nic_id = '', 
                                    virtual_nic_name = '', )
                                ], 
                            number_of_cores = 56, 
                            path = 'Datacenter/Workload VMs', 
                            private_cloud_id = '', 
                            v_sphere_networks = [
                                ''
                                ], 
                            v_sphere_tags = [
                                ''
                                ], 
                            vmwaretools = '', ), 
                        type = '', )
                    ],
                virtual_networks = [
                    openapi_client.models.virtual_network.VirtualNetwork(
                        assignable = True, 
                        id = '', 
                        location = '', 
                        name = '', 
                        properties = openapi_client.models.virtual_network_properties.VirtualNetworkProperties(
                            private_cloud_id = '', ), 
                        type = '', )
                    ],
                vr_ops_enabled = True
            )
        else:
            return PrivateCloudProperties(
        )
        """

    def testPrivateCloudProperties(self):
        """Test PrivateCloudProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

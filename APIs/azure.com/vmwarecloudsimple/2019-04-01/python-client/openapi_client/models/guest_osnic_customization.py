# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GuestOSNICCustomization(BaseModel):
    """
    Guest OS nic customization
    """ # noqa: E501
    allocation: Optional[StrictStr] = Field(default=None, description="IP address allocation method")
    dns_servers: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="List of dns servers to use", alias="dnsServers")
    gateway: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Gateway addresses assigned to nic")
    ip_address: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="ipAddress")
    mask: Optional[Annotated[str, Field(strict=True)]] = None
    primary_wins_server: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="primaryWinsServer")
    secondary_wins_server: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="secondaryWinsServer")
    __properties: ClassVar[List[str]] = ["allocation", "dnsServers", "gateway", "ipAddress", "mask", "primaryWinsServer", "secondaryWinsServer"]

    @field_validator('allocation')
    def allocation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['static', 'dynamic']):
            raise ValueError("must be one of enum values ('static', 'dynamic')")
        return value

    @field_validator('ip_address')
    def ip_address_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", value):
            raise ValueError(r"must validate the regular expression /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/")
        return value

    @field_validator('mask')
    def mask_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", value):
            raise ValueError(r"must validate the regular expression /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/")
        return value

    @field_validator('primary_wins_server')
    def primary_wins_server_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", value):
            raise ValueError(r"must validate the regular expression /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/")
        return value

    @field_validator('secondary_wins_server')
    def secondary_wins_server_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", value):
            raise ValueError(r"must validate the regular expression /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuestOSNICCustomization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuestOSNICCustomization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocation": obj.get("allocation"),
            "dnsServers": obj.get("dnsServers"),
            "gateway": obj.get("gateway"),
            "ipAddress": obj.get("ipAddress"),
            "mask": obj.get("mask"),
            "primaryWinsServer": obj.get("primaryWinsServer"),
            "secondaryWinsServer": obj.get("secondaryWinsServer")
        })
        return _obj



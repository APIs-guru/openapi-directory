# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.resource_pool import ResourcePool
from openapi_client.models.virtual_machine_template import VirtualMachineTemplate
from openapi_client.models.virtual_network import VirtualNetwork
from typing import Optional, Set
from typing_extensions import Self

class PrivateCloudProperties(BaseModel):
    """
    Properties of private
    """ # noqa: E501
    availability_zone_id: Optional[StrictStr] = Field(default=None, description="Availability Zone id, e.g. \"az1\"", alias="availabilityZoneId")
    availability_zone_name: Optional[StrictStr] = Field(default=None, description="Availability Zone name, e.g. \"Availability Zone 1\"", alias="availabilityZoneName")
    clusters_number: Optional[StrictInt] = Field(default=None, description="Number of clusters", alias="clustersNumber")
    created_by: Optional[StrictStr] = Field(default=None, description="User's emails who created cloud", alias="createdBy")
    created_on: Optional[datetime] = Field(default=None, description="When private cloud was created", alias="createdOn")
    dns_servers: Optional[List[StrictStr]] = Field(default=None, description="Array of DNS servers", alias="dnsServers")
    expires: Optional[StrictStr] = Field(default=None, description="Expiration date of PC")
    nsx_type: Optional[StrictStr] = Field(default=None, description="Nsx Type, e.g. \"Advanced\"", alias="nsxType")
    placement_group_id: Optional[StrictStr] = Field(default=None, description="Placement Group id, e.g. \"n1\"", alias="placementGroupId")
    placement_group_name: Optional[StrictStr] = Field(default=None, description="Placement Group name", alias="placementGroupName")
    private_cloud_id: Optional[StrictStr] = Field(default=None, description="Id of a private cloud", alias="privateCloudId")
    resource_pools: Optional[List[ResourcePool]] = Field(default=None, description="The list of Resource Pools", alias="resourcePools")
    state: Optional[StrictStr] = Field(default=None, description="Private Cloud state, e.g. \"operational\"")
    total_cpu_cores: Optional[StrictInt] = Field(default=None, description="Number of cores", alias="totalCpuCores")
    total_nodes: Optional[StrictInt] = Field(default=None, description="Number of nodes", alias="totalNodes")
    total_ram: Optional[StrictInt] = Field(default=None, description="Memory size", alias="totalRam")
    total_storage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Disk space in TB", alias="totalStorage")
    type: Optional[StrictStr] = Field(default=None, description="Virtualization type e.g. \"vSphere\"")
    v_sphere_version: Optional[StrictStr] = Field(default=None, description="e.g. \"6.5u2\"", alias="vSphereVersion")
    vcenter_fqdn: Optional[StrictStr] = Field(default=None, description="FQDN for vcenter access", alias="vcenterFqdn")
    vcenter_refid: Optional[StrictStr] = Field(default=None, description="Vcenter ip address", alias="vcenterRefid")
    virtual_machine_templates: Optional[List[VirtualMachineTemplate]] = Field(default=None, description="The list of Virtual Machine Templates", alias="virtualMachineTemplates")
    virtual_networks: Optional[List[VirtualNetwork]] = Field(default=None, description="The list of Virtual Networks", alias="virtualNetworks")
    vr_ops_enabled: Optional[StrictBool] = Field(default=None, description="Is Vrops enabled/disabled", alias="vrOpsEnabled")
    __properties: ClassVar[List[str]] = ["availabilityZoneId", "availabilityZoneName", "clustersNumber", "createdBy", "createdOn", "dnsServers", "expires", "nsxType", "placementGroupId", "placementGroupName", "privateCloudId", "resourcePools", "state", "totalCpuCores", "totalNodes", "totalRam", "totalStorage", "type", "vSphereVersion", "vcenterFqdn", "vcenterRefid", "virtualMachineTemplates", "virtualNetworks", "vrOpsEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateCloudProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resource_pools (list)
        _items = []
        if self.resource_pools:
            for _item_resource_pools in self.resource_pools:
                if _item_resource_pools:
                    _items.append(_item_resource_pools.to_dict())
            _dict['resourcePools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_machine_templates (list)
        _items = []
        if self.virtual_machine_templates:
            for _item_virtual_machine_templates in self.virtual_machine_templates:
                if _item_virtual_machine_templates:
                    _items.append(_item_virtual_machine_templates.to_dict())
            _dict['virtualMachineTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_networks (list)
        _items = []
        if self.virtual_networks:
            for _item_virtual_networks in self.virtual_networks:
                if _item_virtual_networks:
                    _items.append(_item_virtual_networks.to_dict())
            _dict['virtualNetworks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateCloudProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilityZoneId": obj.get("availabilityZoneId"),
            "availabilityZoneName": obj.get("availabilityZoneName"),
            "clustersNumber": obj.get("clustersNumber"),
            "createdBy": obj.get("createdBy"),
            "createdOn": obj.get("createdOn"),
            "dnsServers": obj.get("dnsServers"),
            "expires": obj.get("expires"),
            "nsxType": obj.get("nsxType"),
            "placementGroupId": obj.get("placementGroupId"),
            "placementGroupName": obj.get("placementGroupName"),
            "privateCloudId": obj.get("privateCloudId"),
            "resourcePools": [ResourcePool.from_dict(_item) for _item in obj["resourcePools"]] if obj.get("resourcePools") is not None else None,
            "state": obj.get("state"),
            "totalCpuCores": obj.get("totalCpuCores"),
            "totalNodes": obj.get("totalNodes"),
            "totalRam": obj.get("totalRam"),
            "totalStorage": obj.get("totalStorage"),
            "type": obj.get("type"),
            "vSphereVersion": obj.get("vSphereVersion"),
            "vcenterFqdn": obj.get("vcenterFqdn"),
            "vcenterRefid": obj.get("vcenterRefid"),
            "virtualMachineTemplates": [VirtualMachineTemplate.from_dict(_item) for _item in obj["virtualMachineTemplates"]] if obj.get("virtualMachineTemplates") is not None else None,
            "virtualNetworks": [VirtualNetwork.from_dict(_item) for _item in obj["virtualNetworks"]] if obj.get("virtualNetworks") is not None else None,
            "vrOpsEnabled": obj.get("vrOpsEnabled")
        })
        return _obj



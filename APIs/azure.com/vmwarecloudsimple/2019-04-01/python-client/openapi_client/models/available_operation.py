# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.available_operation_display import AvailableOperationDisplay
from openapi_client.models.available_operation_display_property_service_specification import AvailableOperationDisplayPropertyServiceSpecification
from typing import Optional, Set
from typing_extensions import Self

class AvailableOperation(BaseModel):
    """
    Resource provider available operation model
    """ # noqa: E501
    display: Optional[AvailableOperationDisplay] = None
    is_data_action: Optional[StrictBool] = Field(default=False, description="Indicating whether the operation is a data action or not", alias="isDataAction")
    name: Optional[StrictStr] = Field(default=None, description="{resourceProviderNamespace}/{resourceType}/{read|write|delete|action}")
    origin: Optional[StrictStr] = Field(default=None, description="The origin of operation")
    properties: Optional[AvailableOperationDisplayPropertyServiceSpecification] = None
    __properties: ClassVar[List[str]] = ["display", "isDataAction", "name", "origin", "properties"]

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['user', 'system', 'user,system']):
            raise ValueError("must be one of enum values ('user', 'system', 'user,system')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display
        if self.display:
            _dict['display'] = self.display.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display": AvailableOperationDisplay.from_dict(obj["display"]) if obj.get("display") is not None else None,
            "isDataAction": obj.get("isDataAction") if obj.get("isDataAction") is not None else False,
            "name": obj.get("name"),
            "origin": obj.get("origin"),
            "properties": AvailableOperationDisplayPropertyServiceSpecification.from_dict(obj["properties"]) if obj.get("properties") is not None else None
        })
        return _obj



# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.customization_host_name import CustomizationHostName
from openapi_client.models.customization_identity_user_data import CustomizationIdentityUserData
from typing import Optional, Set
from typing_extensions import Self

class CustomizationIdentity(BaseModel):
    """
    CustomizationIdentity
    """ # noqa: E501
    data: Optional[StrictStr] = Field(default=None, description="Windows Text Identity. Prepared data")
    host_name: Optional[CustomizationHostName] = Field(default=None, alias="hostName")
    type: Optional[StrictStr] = Field(default=None, description="Identity type")
    user_data: Optional[CustomizationIdentityUserData] = Field(default=None, alias="userData")
    __properties: ClassVar[List[str]] = ["data", "hostName", "type", "userData"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WINDOWS_TEXT', 'WINDOWS', 'LINUX']):
            raise ValueError("must be one of enum values ('WINDOWS_TEXT', 'WINDOWS', 'LINUX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomizationIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of host_name
        if self.host_name:
            _dict['hostName'] = self.host_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_data
        if self.user_data:
            _dict['userData'] = self.user_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomizationIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": obj.get("data"),
            "hostName": CustomizationHostName.from_dict(obj["hostName"]) if obj.get("hostName") is not None else None,
            "type": obj.get("type"),
            "userData": CustomizationIdentityUserData.from_dict(obj["userData"]) if obj.get("userData") is not None else None
        })
        return _obj



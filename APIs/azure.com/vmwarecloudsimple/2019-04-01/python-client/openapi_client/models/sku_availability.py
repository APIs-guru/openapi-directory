# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SkuAvailability(BaseModel):
    """
    SKU availability model
    """ # noqa: E501
    dedicated_availability_zone_id: Optional[StrictStr] = Field(default=None, description="CloudSimple Availability Zone id", alias="dedicatedAvailabilityZoneId")
    dedicated_availability_zone_name: Optional[StrictStr] = Field(default=None, description="CloudSimple Availability Zone Name", alias="dedicatedAvailabilityZoneName")
    dedicated_placement_group_id: Optional[StrictStr] = Field(default=None, description="CloudSimple Placement Group Id", alias="dedicatedPlacementGroupId")
    dedicated_placement_group_name: Optional[StrictStr] = Field(default=None, description="CloudSimple Placement Group name", alias="dedicatedPlacementGroupName")
    limit: StrictInt = Field(description="indicates how many resources of a given SKU is available in a AZ->PG")
    resource_type: Optional[StrictStr] = Field(default=None, description="resource type e.g. DedicatedCloudNodes", alias="resourceType")
    sku_id: Optional[StrictStr] = Field(default=None, description="sku id", alias="skuId")
    sku_name: Optional[StrictStr] = Field(default=None, description="sku name", alias="skuName")
    __properties: ClassVar[List[str]] = ["dedicatedAvailabilityZoneId", "dedicatedAvailabilityZoneName", "dedicatedPlacementGroupId", "dedicatedPlacementGroupName", "limit", "resourceType", "skuId", "skuName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SkuAvailability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SkuAvailability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dedicatedAvailabilityZoneId": obj.get("dedicatedAvailabilityZoneId"),
            "dedicatedAvailabilityZoneName": obj.get("dedicatedAvailabilityZoneName"),
            "dedicatedPlacementGroupId": obj.get("dedicatedPlacementGroupId"),
            "dedicatedPlacementGroupName": obj.get("dedicatedPlacementGroupName"),
            "limit": obj.get("limit"),
            "resourceType": obj.get("resourceType"),
            "skuId": obj.get("skuId"),
            "skuName": obj.get("skuName")
        })
        return _obj



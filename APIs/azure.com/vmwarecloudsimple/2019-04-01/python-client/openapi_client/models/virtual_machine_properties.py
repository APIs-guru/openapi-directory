# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guest_os_customization import GuestOSCustomization
from openapi_client.models.resource_pool import ResourcePool
from openapi_client.models.virtual_disk import VirtualDisk
from openapi_client.models.virtual_disk_controller import VirtualDiskController
from openapi_client.models.virtual_nic import VirtualNic
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineProperties(BaseModel):
    """
    Properties of virtual machine
    """ # noqa: E501
    amount_of_ram: StrictInt = Field(description="The amount of memory", alias="amountOfRam")
    controllers: Optional[List[VirtualDiskController]] = Field(default=None, description="The list of Virtual Disks' Controllers")
    customization: Optional[GuestOSCustomization] = None
    disks: Optional[List[VirtualDisk]] = Field(default=None, description="The list of Virtual Disks")
    dnsname: Optional[StrictStr] = Field(default=None, description="The DNS name of Virtual Machine in VCenter")
    expose_to_guest_vm: Optional[StrictBool] = Field(default=None, description="Expose Guest OS or not", alias="exposeToGuestVM")
    folder: Optional[StrictStr] = Field(default=None, description="The path to virtual machine folder in VCenter")
    guest_os: Optional[StrictStr] = Field(default=None, description="The name of Guest OS", alias="guestOS")
    guest_os_type: Optional[StrictStr] = Field(default=None, description="The Guest OS type", alias="guestOSType")
    nics: Optional[List[VirtualNic]] = Field(default=None, description="The list of Virtual NICs")
    number_of_cores: StrictInt = Field(description="The number of CPU cores", alias="numberOfCores")
    password: Optional[StrictStr] = Field(default=None, description="Password for login. Deprecated - use customization property")
    private_cloud_id: StrictStr = Field(description="Private Cloud Id", alias="privateCloudId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource", alias="provisioningState")
    public_ip: Optional[StrictStr] = Field(default=None, description="The public ip of Virtual Machine", alias="publicIP")
    resource_pool: Optional[ResourcePool] = Field(default=None, alias="resourcePool")
    status: Optional[StrictStr] = Field(default=None, description="The status of Virtual machine")
    template_id: Optional[StrictStr] = Field(default=None, description="Virtual Machine Template Id", alias="templateId")
    username: Optional[StrictStr] = Field(default=None, description="Username for login. Deprecated - use customization property")
    v_sphere_networks: Optional[List[StrictStr]] = Field(default=None, description="The list of Virtual VSphere Networks", alias="vSphereNetworks")
    vm_id: Optional[StrictStr] = Field(default=None, description="The internal id of Virtual Machine in VCenter", alias="vmId")
    vmwaretools: Optional[StrictStr] = Field(default=None, description="VMware tools version")
    __properties: ClassVar[List[str]] = ["amountOfRam", "controllers", "customization", "disks", "dnsname", "exposeToGuestVM", "folder", "guestOS", "guestOSType", "nics", "numberOfCores", "password", "privateCloudId", "provisioningState", "publicIP", "resourcePool", "status", "templateId", "username", "vSphereNetworks", "vmId", "vmwaretools"]

    @field_validator('guest_os_type')
    def guest_os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['linux', 'windows', 'other']):
            raise ValueError("must be one of enum values ('linux', 'windows', 'other')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['running', 'suspended', 'poweredoff', 'updating', 'deallocating', 'deleting']):
            raise ValueError("must be one of enum values ('running', 'suspended', 'poweredoff', 'updating', 'deallocating', 'deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "controllers",
            "dnsname",
            "folder",
            "guest_os",
            "guest_os_type",
            "provisioning_state",
            "public_ip",
            "status",
            "vm_id",
            "vmwaretools",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in controllers (list)
        _items = []
        if self.controllers:
            for _item_controllers in self.controllers:
                if _item_controllers:
                    _items.append(_item_controllers.to_dict())
            _dict['controllers'] = _items
        # override the default output from pydantic by calling `to_dict()` of customization
        if self.customization:
            _dict['customization'] = self.customization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nics (list)
        _items = []
        if self.nics:
            for _item_nics in self.nics:
                if _item_nics:
                    _items.append(_item_nics.to_dict())
            _dict['nics'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_pool
        if self.resource_pool:
            _dict['resourcePool'] = self.resource_pool.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amountOfRam": obj.get("amountOfRam"),
            "controllers": [VirtualDiskController.from_dict(_item) for _item in obj["controllers"]] if obj.get("controllers") is not None else None,
            "customization": GuestOSCustomization.from_dict(obj["customization"]) if obj.get("customization") is not None else None,
            "disks": [VirtualDisk.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "dnsname": obj.get("dnsname"),
            "exposeToGuestVM": obj.get("exposeToGuestVM"),
            "folder": obj.get("folder"),
            "guestOS": obj.get("guestOS"),
            "guestOSType": obj.get("guestOSType"),
            "nics": [VirtualNic.from_dict(_item) for _item in obj["nics"]] if obj.get("nics") is not None else None,
            "numberOfCores": obj.get("numberOfCores"),
            "password": obj.get("password"),
            "privateCloudId": obj.get("privateCloudId"),
            "provisioningState": obj.get("provisioningState"),
            "publicIP": obj.get("publicIP"),
            "resourcePool": ResourcePool.from_dict(obj["resourcePool"]) if obj.get("resourcePool") is not None else None,
            "status": obj.get("status"),
            "templateId": obj.get("templateId"),
            "username": obj.get("username"),
            "vSphereNetworks": obj.get("vSphereNetworks"),
            "vmId": obj.get("vmId"),
            "vmwaretools": obj.get("vmwaretools")
        })
        return _obj



# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guest_osnic_customization import GuestOSNICCustomization
from openapi_client.models.virtual_network import VirtualNetwork
from typing import Optional, Set
from typing_extensions import Self

class VirtualNic(BaseModel):
    """
    Virtual NIC model
    """ # noqa: E501
    customization: Optional[GuestOSNICCustomization] = None
    ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="NIC ip address", alias="ipAddresses")
    mac_address: Optional[StrictStr] = Field(default=None, description="NIC MAC address", alias="macAddress")
    network: VirtualNetwork
    nic_type: StrictStr = Field(description="NIC type", alias="nicType")
    power_on_boot: Optional[StrictBool] = Field(default=None, description="Is NIC powered on/off on boot", alias="powerOnBoot")
    virtual_nic_id: Optional[StrictStr] = Field(default=None, description="NIC id", alias="virtualNicId")
    virtual_nic_name: Optional[StrictStr] = Field(default=None, description="NIC name", alias="virtualNicName")
    __properties: ClassVar[List[str]] = ["customization", "ipAddresses", "macAddress", "network", "nicType", "powerOnBoot", "virtualNicId", "virtualNicName"]

    @field_validator('nic_type')
    def nic_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['E1000', 'E1000E', 'PCNET32', 'VMXNET', 'VMXNET2', 'VMXNET3']):
            raise ValueError("must be one of enum values ('E1000', 'E1000E', 'PCNET32', 'VMXNET', 'VMXNET2', 'VMXNET3')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualNic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "virtual_nic_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customization
        if self.customization:
            _dict['customization'] = self.customization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualNic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customization": GuestOSNICCustomization.from_dict(obj["customization"]) if obj.get("customization") is not None else None,
            "ipAddresses": obj.get("ipAddresses"),
            "macAddress": obj.get("macAddress"),
            "network": VirtualNetwork.from_dict(obj["network"]) if obj.get("network") is not None else None,
            "nicType": obj.get("nicType"),
            "powerOnBoot": obj.get("powerOnBoot"),
            "virtualNicId": obj.get("virtualNicId"),
            "virtualNicName": obj.get("virtualNicName")
        })
        return _obj



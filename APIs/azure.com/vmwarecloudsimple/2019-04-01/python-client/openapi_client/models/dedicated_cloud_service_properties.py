# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DedicatedCloudServiceProperties(BaseModel):
    """
    Properties of dedicated cloud service
    """ # noqa: E501
    gateway_subnet: StrictStr = Field(description="gateway Subnet for the account. It will collect the subnet address and always treat it as /28", alias="gatewaySubnet")
    is_account_onboarded: Optional[StrictStr] = Field(default=None, description="indicates whether account onboarded or not in a given region", alias="isAccountOnboarded")
    nodes: Optional[StrictInt] = Field(default=None, description="total nodes purchased")
    service_url: Optional[StrictStr] = Field(default=None, description="link to a service management web portal", alias="serviceURL")
    __properties: ClassVar[List[str]] = ["gatewaySubnet", "isAccountOnboarded", "nodes", "serviceURL"]

    @field_validator('is_account_onboarded')
    def is_account_onboarded_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['notOnBoarded', 'onBoarded', 'onBoardingFailed', 'onBoarding']):
            raise ValueError("must be one of enum values ('notOnBoarded', 'onBoarded', 'onBoardingFailed', 'onBoarding')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DedicatedCloudServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_account_onboarded",
            "nodes",
            "service_url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DedicatedCloudServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gatewaySubnet": obj.get("gatewaySubnet"),
            "isAccountOnboarded": obj.get("isAccountOnboarded"),
            "nodes": obj.get("nodes"),
            "serviceURL": obj.get("serviceURL")
        })
        return _obj



# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sku_description import SkuDescription
from typing import Optional, Set
from typing_extensions import Self

class DedicatedCloudNodeProperties(BaseModel):
    """
    Properties of dedicated cloud node
    """ # noqa: E501
    availability_zone_id: StrictStr = Field(description="Availability Zone id, e.g. \"az1\"", alias="availabilityZoneId")
    availability_zone_name: Optional[StrictStr] = Field(default=None, description="Availability Zone name, e.g. \"Availability Zone 1\"", alias="availabilityZoneName")
    cloud_rack_name: Optional[StrictStr] = Field(default=None, description="VMWare Cloud Rack Name", alias="cloudRackName")
    created: Optional[Dict[str, Any]] = Field(default=None, description="date time the resource was created")
    nodes_count: StrictInt = Field(description="count of nodes to create", alias="nodesCount")
    placement_group_id: StrictStr = Field(description="Placement Group id, e.g. \"n1\"", alias="placementGroupId")
    placement_group_name: Optional[StrictStr] = Field(default=None, description="Placement Name, e.g. \"Placement Group 1\"", alias="placementGroupName")
    private_cloud_id: Optional[StrictStr] = Field(default=None, description="Private Cloud Id", alias="privateCloudId")
    private_cloud_name: Optional[StrictStr] = Field(default=None, description="Resource Pool Name", alias="privateCloudName")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource", alias="provisioningState")
    purchase_id: StrictStr = Field(description="purchase id", alias="purchaseId")
    sku_description: Optional[SkuDescription] = Field(default=None, alias="skuDescription")
    status: Optional[StrictStr] = Field(default=None, description="Node status, indicates is private cloud set up on this node or not")
    vmware_cluster_name: Optional[StrictStr] = Field(default=None, description="VMWare Cluster Name", alias="vmwareClusterName")
    __properties: ClassVar[List[str]] = ["availabilityZoneId", "availabilityZoneName", "cloudRackName", "created", "nodesCount", "placementGroupId", "placementGroupName", "privateCloudId", "privateCloudName", "provisioningState", "purchaseId", "skuDescription", "status", "vmwareClusterName"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unused', 'used']):
            raise ValueError("must be one of enum values ('unused', 'used')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DedicatedCloudNodeProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "availability_zone_name",
            "cloud_rack_name",
            "created",
            "placement_group_name",
            "private_cloud_id",
            "private_cloud_name",
            "provisioning_state",
            "status",
            "vmware_cluster_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sku_description
        if self.sku_description:
            _dict['skuDescription'] = self.sku_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DedicatedCloudNodeProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilityZoneId": obj.get("availabilityZoneId"),
            "availabilityZoneName": obj.get("availabilityZoneName"),
            "cloudRackName": obj.get("cloudRackName"),
            "created": obj.get("created"),
            "nodesCount": obj.get("nodesCount"),
            "placementGroupId": obj.get("placementGroupId"),
            "placementGroupName": obj.get("placementGroupName"),
            "privateCloudId": obj.get("privateCloudId"),
            "privateCloudName": obj.get("privateCloudName"),
            "provisioningState": obj.get("provisioningState"),
            "purchaseId": obj.get("purchaseId"),
            "skuDescription": SkuDescription.from_dict(obj["skuDescription"]) if obj.get("skuDescription") is not None else None,
            "status": obj.get("status"),
            "vmwareClusterName": obj.get("vmwareClusterName")
        })
        return _obj



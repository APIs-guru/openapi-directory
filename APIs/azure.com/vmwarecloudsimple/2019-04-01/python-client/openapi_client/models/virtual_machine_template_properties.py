# coding: utf-8

"""
    VMwareCloudSimple

    Description of the new service

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.virtual_disk import VirtualDisk
from openapi_client.models.virtual_disk_controller import VirtualDiskController
from openapi_client.models.virtual_nic import VirtualNic
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineTemplateProperties(BaseModel):
    """
    Properties of virtual machine template
    """ # noqa: E501
    amount_of_ram: Optional[StrictInt] = Field(default=None, description="The amount of memory", alias="amountOfRam")
    controllers: Optional[List[VirtualDiskController]] = Field(default=None, description="The list of Virtual Disk Controllers")
    description: Optional[StrictStr] = Field(default=None, description="The description of Virtual Machine Template")
    disks: Optional[List[VirtualDisk]] = Field(default=None, description="The list of Virtual Disks")
    expose_to_guest_vm: Optional[StrictBool] = Field(default=None, description="Expose Guest OS or not", alias="exposeToGuestVM")
    guest_os: Optional[StrictStr] = Field(default=None, description="The Guest OS", alias="guestOS")
    guest_os_type: Optional[StrictStr] = Field(default=None, description="The Guest OS types", alias="guestOSType")
    nics: Optional[List[VirtualNic]] = Field(default=None, description="The list of Virtual NICs")
    number_of_cores: Optional[StrictInt] = Field(default=None, description="The number of CPU cores", alias="numberOfCores")
    path: Optional[StrictStr] = Field(default=None, description="path to folder")
    private_cloud_id: StrictStr = Field(description="The Private Cloud Id", alias="privateCloudId")
    v_sphere_networks: Optional[List[StrictStr]] = Field(default=None, description="The list of VSphere networks", alias="vSphereNetworks")
    v_sphere_tags: Optional[List[StrictStr]] = Field(default=None, description="The tags from VSphere", alias="vSphereTags")
    vmwaretools: Optional[StrictStr] = Field(default=None, description="The VMware tools version")
    __properties: ClassVar[List[str]] = ["amountOfRam", "controllers", "description", "disks", "exposeToGuestVM", "guestOS", "guestOSType", "nics", "numberOfCores", "path", "privateCloudId", "vSphereNetworks", "vSphereTags", "vmwaretools"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineTemplateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "guest_os",
            "guest_os_type",
            "vmwaretools",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in controllers (list)
        _items = []
        if self.controllers:
            for _item_controllers in self.controllers:
                if _item_controllers:
                    _items.append(_item_controllers.to_dict())
            _dict['controllers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nics (list)
        _items = []
        if self.nics:
            for _item_nics in self.nics:
                if _item_nics:
                    _items.append(_item_nics.to_dict())
            _dict['nics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineTemplateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amountOfRam": obj.get("amountOfRam"),
            "controllers": [VirtualDiskController.from_dict(_item) for _item in obj["controllers"]] if obj.get("controllers") is not None else None,
            "description": obj.get("description"),
            "disks": [VirtualDisk.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "exposeToGuestVM": obj.get("exposeToGuestVM"),
            "guestOS": obj.get("guestOS"),
            "guestOSType": obj.get("guestOSType"),
            "nics": [VirtualNic.from_dict(_item) for _item in obj["nics"]] if obj.get("nics") is not None else None,
            "numberOfCores": obj.get("numberOfCores"),
            "path": obj.get("path"),
            "privateCloudId": obj.get("privateCloudId"),
            "vSphereNetworks": obj.get("vSphereNetworks"),
            "vSphereTags": obj.get("vSphereTags"),
            "vmwaretools": obj.get("vmwaretools")
        })
        return _obj



# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    APIs for Azure Smart Detector Alert Rules CRUD operations.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action_groups_information import ActionGroupsInformation
from openapi_client.models.detector import Detector
from openapi_client.models.throttling_information import ThrottlingInformation
from typing import Optional, Set
from typing_extensions import Self

class AlertRuleProperties(BaseModel):
    """
    The alert rule properties.
    """ # noqa: E501
    action_groups: ActionGroupsInformation = Field(alias="actionGroups")
    description: Optional[StrictStr] = Field(default=None, description="The alert rule description.")
    detector: Detector
    frequency: StrictStr = Field(description="The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.")
    scope: List[StrictStr] = Field(description="The alert rule resources scope.")
    severity: StrictStr = Field(description="The alert rule severity.")
    state: StrictStr = Field(description="The alert rule state.")
    throttling: Optional[ThrottlingInformation] = None
    __properties: ClassVar[List[str]] = ["actionGroups", "description", "detector", "frequency", "scope", "severity", "state", "throttling"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4']):
            raise ValueError("must be one of enum values ('Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action_groups
        if self.action_groups:
            _dict['actionGroups'] = self.action_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detector
        if self.detector:
            _dict['detector'] = self.detector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of throttling
        if self.throttling:
            _dict['throttling'] = self.throttling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertRuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionGroups": ActionGroupsInformation.from_dict(obj["actionGroups"]) if obj.get("actionGroups") is not None else None,
            "description": obj.get("description"),
            "detector": Detector.from_dict(obj["detector"]) if obj.get("detector") is not None else None,
            "frequency": obj.get("frequency"),
            "scope": obj.get("scope"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "throttling": ThrottlingInformation.from_dict(obj["throttling"]) if obj.get("throttling") is not None else None
        })
        return _obj



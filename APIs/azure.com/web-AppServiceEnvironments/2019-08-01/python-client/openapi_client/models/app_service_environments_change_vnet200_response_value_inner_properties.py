# coding: utf-8

"""
    AppServiceEnvironments API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_service_environments_change_vnet200_response_value_inner_properties_cloning_info import AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo
from openapi_client.models.app_service_environments_change_vnet200_response_value_inner_properties_host_name_ssl_states_inner import AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner
from openapi_client.models.app_service_environments_change_vnet200_response_value_inner_properties_hosting_environment_profile import AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile
from openapi_client.models.app_service_environments_change_vnet200_response_value_inner_properties_site_config import AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig
from openapi_client.models.app_service_environments_change_vnet200_response_value_inner_properties_slot_swap_status import AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus
from typing import Optional, Set
from typing_extensions import Self

class AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties(BaseModel):
    """
    Site resource specific properties
    """ # noqa: E501
    availability_state: Optional[StrictStr] = Field(default=None, description="Management information availability state for the app.", alias="availabilityState")
    client_affinity_enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.", alias="clientAffinityEnabled")
    client_cert_enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.", alias="clientCertEnabled")
    client_cert_exclusion_paths: Optional[StrictStr] = Field(default=None, description="client certificate authentication comma-separated exclusion paths", alias="clientCertExclusionPaths")
    cloning_info: Optional[AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo] = Field(default=None, alias="cloningInfo")
    container_size: Optional[StrictInt] = Field(default=None, description="Size of the function container.", alias="containerSize")
    daily_memory_time_quota: Optional[StrictInt] = Field(default=None, description="Maximum allowed daily memory-time quota (applicable on dynamic apps only).", alias="dailyMemoryTimeQuota")
    default_host_name: Optional[StrictStr] = Field(default=None, description="Default hostname of the app. Read-only.", alias="defaultHostName")
    enabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).")
    enabled_host_names: Optional[List[StrictStr]] = Field(default=None, description="Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise, the app is not served on those hostnames.", alias="enabledHostNames")
    host_name_ssl_states: Optional[List[AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner]] = Field(default=None, description="Hostname SSL states are used to manage the SSL bindings for app's hostnames.", alias="hostNameSslStates")
    host_names: Optional[List[StrictStr]] = Field(default=None, description="Hostnames associated with the app.", alias="hostNames")
    host_names_disabled: Optional[StrictBool] = Field(default=None, description="<code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.  If <code>true</code>, the app is only accessible via API management process.", alias="hostNamesDisabled")
    hosting_environment_profile: Optional[AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile] = Field(default=None, alias="hostingEnvironmentProfile")
    https_only: Optional[StrictBool] = Field(default=None, description="HttpsOnly: configures a web site to accept only https requests. Issues redirect for http requests", alias="httpsOnly")
    hyper_v: Optional[StrictBool] = Field(default=False, description="Hyper-V sandbox.", alias="hyperV")
    in_progress_operation_id: Optional[StrictStr] = Field(default=None, description="Specifies an operation id if this site has a pending operation.", alias="inProgressOperationId")
    is_default_container: Optional[StrictBool] = Field(default=None, description="<code>true</code> if the app is a default container; otherwise, <code>false</code>.", alias="isDefaultContainer")
    is_xenon: Optional[StrictBool] = Field(default=False, description="Obsolete: Hyper-V sandbox.", alias="isXenon")
    last_modified_time_utc: Optional[datetime] = Field(default=None, description="Last time the app was modified, in UTC. Read-only.", alias="lastModifiedTimeUtc")
    max_number_of_workers: Optional[StrictInt] = Field(default=None, description="Maximum number of workers. This only applies to Functions container.", alias="maxNumberOfWorkers")
    outbound_ip_addresses: Optional[StrictStr] = Field(default=None, description="List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.", alias="outboundIpAddresses")
    possible_outbound_ip_addresses: Optional[StrictStr] = Field(default=None, description="List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.", alias="possibleOutboundIpAddresses")
    redundancy_mode: Optional[StrictStr] = Field(default=None, description="Site redundancy mode", alias="redundancyMode")
    repository_site_name: Optional[StrictStr] = Field(default=None, description="Name of the repository site.", alias="repositorySiteName")
    reserved: Optional[StrictBool] = Field(default=False, description="<code>true</code> if reserved; otherwise, <code>false</code>.")
    resource_group: Optional[StrictStr] = Field(default=None, description="Name of the resource group the app belongs to. Read-only.", alias="resourceGroup")
    scm_site_also_stopped: Optional[StrictBool] = Field(default=False, description="<code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.", alias="scmSiteAlsoStopped")
    server_farm_id: Optional[StrictStr] = Field(default=None, description="Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".", alias="serverFarmId")
    site_config: Optional[AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig] = Field(default=None, alias="siteConfig")
    slot_swap_status: Optional[AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus] = Field(default=None, alias="slotSwapStatus")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the app.")
    suspended_till: Optional[datetime] = Field(default=None, description="App suspended till in case memory-time quota is exceeded.", alias="suspendedTill")
    target_swap_slot: Optional[StrictStr] = Field(default=None, description="Specifies which deployment slot this app will swap into. Read-only.", alias="targetSwapSlot")
    traffic_manager_host_names: Optional[List[StrictStr]] = Field(default=None, description="Azure Traffic Manager hostnames associated with the app. Read-only.", alias="trafficManagerHostNames")
    usage_state: Optional[StrictStr] = Field(default=None, description="State indicating whether the app has exceeded its quota usage. Read-only.", alias="usageState")
    __properties: ClassVar[List[str]] = ["availabilityState", "clientAffinityEnabled", "clientCertEnabled", "clientCertExclusionPaths", "cloningInfo", "containerSize", "dailyMemoryTimeQuota", "defaultHostName", "enabled", "enabledHostNames", "hostNameSslStates", "hostNames", "hostNamesDisabled", "hostingEnvironmentProfile", "httpsOnly", "hyperV", "inProgressOperationId", "isDefaultContainer", "isXenon", "lastModifiedTimeUtc", "maxNumberOfWorkers", "outboundIpAddresses", "possibleOutboundIpAddresses", "redundancyMode", "repositorySiteName", "reserved", "resourceGroup", "scmSiteAlsoStopped", "serverFarmId", "siteConfig", "slotSwapStatus", "state", "suspendedTill", "targetSwapSlot", "trafficManagerHostNames", "usageState"]

    @field_validator('availability_state')
    def availability_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Normal', 'Limited', 'DisasterRecoveryMode']):
            raise ValueError("must be one of enum values ('Normal', 'Limited', 'DisasterRecoveryMode')")
        return value

    @field_validator('redundancy_mode')
    def redundancy_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Manual', 'Failover', 'ActiveActive', 'GeoRedundant']):
            raise ValueError("must be one of enum values ('None', 'Manual', 'Failover', 'ActiveActive', 'GeoRedundant')")
        return value

    @field_validator('usage_state')
    def usage_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Normal', 'Exceeded']):
            raise ValueError("must be one of enum values ('Normal', 'Exceeded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "availability_state",
            "default_host_name",
            "enabled_host_names",
            "host_names",
            "in_progress_operation_id",
            "is_default_container",
            "last_modified_time_utc",
            "max_number_of_workers",
            "outbound_ip_addresses",
            "possible_outbound_ip_addresses",
            "repository_site_name",
            "resource_group",
            "state",
            "suspended_till",
            "target_swap_slot",
            "traffic_manager_host_names",
            "usage_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloning_info
        if self.cloning_info:
            _dict['cloningInfo'] = self.cloning_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in host_name_ssl_states (list)
        _items = []
        if self.host_name_ssl_states:
            for _item_host_name_ssl_states in self.host_name_ssl_states:
                if _item_host_name_ssl_states:
                    _items.append(_item_host_name_ssl_states.to_dict())
            _dict['hostNameSslStates'] = _items
        # override the default output from pydantic by calling `to_dict()` of hosting_environment_profile
        if self.hosting_environment_profile:
            _dict['hostingEnvironmentProfile'] = self.hosting_environment_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site_config
        if self.site_config:
            _dict['siteConfig'] = self.site_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slot_swap_status
        if self.slot_swap_status:
            _dict['slotSwapStatus'] = self.slot_swap_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilityState": obj.get("availabilityState"),
            "clientAffinityEnabled": obj.get("clientAffinityEnabled"),
            "clientCertEnabled": obj.get("clientCertEnabled"),
            "clientCertExclusionPaths": obj.get("clientCertExclusionPaths"),
            "cloningInfo": AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo.from_dict(obj["cloningInfo"]) if obj.get("cloningInfo") is not None else None,
            "containerSize": obj.get("containerSize"),
            "dailyMemoryTimeQuota": obj.get("dailyMemoryTimeQuota"),
            "defaultHostName": obj.get("defaultHostName"),
            "enabled": obj.get("enabled"),
            "enabledHostNames": obj.get("enabledHostNames"),
            "hostNameSslStates": [AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner.from_dict(_item) for _item in obj["hostNameSslStates"]] if obj.get("hostNameSslStates") is not None else None,
            "hostNames": obj.get("hostNames"),
            "hostNamesDisabled": obj.get("hostNamesDisabled"),
            "hostingEnvironmentProfile": AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile.from_dict(obj["hostingEnvironmentProfile"]) if obj.get("hostingEnvironmentProfile") is not None else None,
            "httpsOnly": obj.get("httpsOnly"),
            "hyperV": obj.get("hyperV") if obj.get("hyperV") is not None else False,
            "inProgressOperationId": obj.get("inProgressOperationId"),
            "isDefaultContainer": obj.get("isDefaultContainer"),
            "isXenon": obj.get("isXenon") if obj.get("isXenon") is not None else False,
            "lastModifiedTimeUtc": obj.get("lastModifiedTimeUtc"),
            "maxNumberOfWorkers": obj.get("maxNumberOfWorkers"),
            "outboundIpAddresses": obj.get("outboundIpAddresses"),
            "possibleOutboundIpAddresses": obj.get("possibleOutboundIpAddresses"),
            "redundancyMode": obj.get("redundancyMode"),
            "repositorySiteName": obj.get("repositorySiteName"),
            "reserved": obj.get("reserved") if obj.get("reserved") is not None else False,
            "resourceGroup": obj.get("resourceGroup"),
            "scmSiteAlsoStopped": obj.get("scmSiteAlsoStopped") if obj.get("scmSiteAlsoStopped") is not None else False,
            "serverFarmId": obj.get("serverFarmId"),
            "siteConfig": AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.from_dict(obj["siteConfig"]) if obj.get("siteConfig") is not None else None,
            "slotSwapStatus": AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus.from_dict(obj["slotSwapStatus"]) if obj.get("slotSwapStatus") is not None else None,
            "state": obj.get("state"),
            "suspendedTill": obj.get("suspendedTill"),
            "targetSwapSlot": obj.get("targetSwapSlot"),
            "trafficManagerHostNames": obj.get("trafficManagerHostNames"),
            "usageState": obj.get("usageState")
        })
        return _obj



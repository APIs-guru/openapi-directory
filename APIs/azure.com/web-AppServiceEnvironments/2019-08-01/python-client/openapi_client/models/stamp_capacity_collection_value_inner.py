# coding: utf-8

"""
    AppServiceEnvironments API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StampCapacityCollectionValueInner(BaseModel):
    """
    Stamp capacity information.
    """ # noqa: E501
    available_capacity: Optional[StrictInt] = Field(default=None, description="Available capacity (# of machines, bytes of storage etc...).", alias="availableCapacity")
    compute_mode: Optional[StrictStr] = Field(default=None, description="Shared/dedicated workers.", alias="computeMode")
    exclude_from_capacity_allocation: Optional[StrictBool] = Field(default=None, description="If <code>true</code>, it includes basic apps. Basic apps are not used for capacity allocation.", alias="excludeFromCapacityAllocation")
    is_applicable_for_all_compute_modes: Optional[StrictBool] = Field(default=None, description="<code>true</code> if capacity is applicable for all apps; otherwise, <code>false</code>.", alias="isApplicableForAllComputeModes")
    is_linux: Optional[StrictBool] = Field(default=None, description="Is this a linux stamp capacity", alias="isLinux")
    name: Optional[StrictStr] = Field(default=None, description="Name of the stamp.")
    site_mode: Optional[StrictStr] = Field(default=None, description="Shared or Dedicated.", alias="siteMode")
    total_capacity: Optional[StrictInt] = Field(default=None, description="Total capacity (# of machines, bytes of storage etc...).", alias="totalCapacity")
    unit: Optional[StrictStr] = Field(default=None, description="Name of the unit.")
    worker_size: Optional[StrictStr] = Field(default=None, description="Size of the machines.", alias="workerSize")
    worker_size_id: Optional[StrictInt] = Field(default=None, description="Size ID of machines:  0 - Small 1 - Medium 2 - Large", alias="workerSizeId")
    __properties: ClassVar[List[str]] = ["availableCapacity", "computeMode", "excludeFromCapacityAllocation", "isApplicableForAllComputeModes", "isLinux", "name", "siteMode", "totalCapacity", "unit", "workerSize", "workerSizeId"]

    @field_validator('compute_mode')
    def compute_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Shared', 'Dedicated', 'Dynamic']):
            raise ValueError("must be one of enum values ('Shared', 'Dedicated', 'Dynamic')")
        return value

    @field_validator('worker_size')
    def worker_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Small', 'Medium', 'Large', 'D1', 'D2', 'D3', 'NestedSmall', 'Default']):
            raise ValueError("must be one of enum values ('Small', 'Medium', 'Large', 'D1', 'D2', 'D3', 'NestedSmall', 'Default')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StampCapacityCollectionValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StampCapacityCollectionValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableCapacity": obj.get("availableCapacity"),
            "computeMode": obj.get("computeMode"),
            "excludeFromCapacityAllocation": obj.get("excludeFromCapacityAllocation"),
            "isApplicableForAllComputeModes": obj.get("isApplicableForAllComputeModes"),
            "isLinux": obj.get("isLinux"),
            "name": obj.get("name"),
            "siteMode": obj.get("siteMode"),
            "totalCapacity": obj.get("totalCapacity"),
            "unit": obj.get("unit"),
            "workerSize": obj.get("workerSize"),
            "workerSizeId": obj.get("workerSizeId")
        })
        return _obj



# coding: utf-8

"""
    AppServiceEnvironments API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.app_service_environments_list_metrics200_response_value_inner_metric_values_inner_properties_inner import AppServiceEnvironmentsListMetrics200ResponseValueInnerMetricValuesInnerPropertiesInner
from typing import Optional, Set
from typing_extensions import Self

class AppServiceEnvironmentsListMetrics200ResponseValueInnerMetricValuesInner(BaseModel):
    """
    Value of resource metric.
    """ # noqa: E501
    average: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value average.")
    count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value count.")
    maximum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value maximum.")
    minimum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value minimum.")
    properties: Optional[List[AppServiceEnvironmentsListMetrics200ResponseValueInnerMetricValuesInnerPropertiesInner]] = Field(default=None, description="Resource metric properties collection.")
    timestamp: Optional[StrictStr] = Field(default=None, description="Value timestamp.")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value total.")
    __properties: ClassVar[List[str]] = ["average", "count", "maximum", "minimum", "properties", "timestamp", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsListMetrics200ResponseValueInnerMetricValuesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "average",
            "count",
            "maximum",
            "minimum",
            "properties",
            "timestamp",
            "total",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsListMetrics200ResponseValueInnerMetricValuesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "average": obj.get("average"),
            "count": obj.get("count"),
            "maximum": obj.get("maximum"),
            "minimum": obj.get("minimum"),
            "properties": [AppServiceEnvironmentsListMetrics200ResponseValueInnerMetricValuesInnerPropertiesInner.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "timestamp": obj.get("timestamp"),
            "total": obj.get("total")
        })
        return _obj



# coding: utf-8

"""
    AppServiceEnvironments API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_service_environments_change_vnet200_response_value_inner_properties_hosting_environment_profile import AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile
from typing import Optional, Set
from typing_extensions import Self

class AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties(BaseModel):
    """
    AppServicePlan resource specific properties
    """ # noqa: E501
    free_offer_expiration_time: Optional[datetime] = Field(default=None, description="The time when the server farm free offer expires.", alias="freeOfferExpirationTime")
    geo_region: Optional[StrictStr] = Field(default=None, description="Geographical location for the App Service plan.", alias="geoRegion")
    hosting_environment_profile: Optional[AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile] = Field(default=None, alias="hostingEnvironmentProfile")
    hyper_v: Optional[StrictBool] = Field(default=False, description="If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.", alias="hyperV")
    is_spot: Optional[StrictBool] = Field(default=None, description="If <code>true</code>, this App Service Plan owns spot instances.", alias="isSpot")
    is_xenon: Optional[StrictBool] = Field(default=False, description="Obsolete: If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.", alias="isXenon")
    maximum_elastic_worker_count: Optional[StrictInt] = Field(default=None, description="Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan", alias="maximumElasticWorkerCount")
    maximum_number_of_workers: Optional[StrictInt] = Field(default=None, description="Maximum number of instances that can be assigned to this App Service plan.", alias="maximumNumberOfWorkers")
    number_of_sites: Optional[StrictInt] = Field(default=None, description="Number of apps assigned to this App Service plan.", alias="numberOfSites")
    per_site_scaling: Optional[StrictBool] = Field(default=False, description="If <code>true</code>, apps assigned to this App Service plan can be scaled independently. If <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.", alias="perSiteScaling")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the App Service Environment.", alias="provisioningState")
    reserved: Optional[StrictBool] = Field(default=False, description="If Linux app service plan <code>true</code>, <code>false</code> otherwise.")
    resource_group: Optional[StrictStr] = Field(default=None, description="Resource group of the App Service plan.", alias="resourceGroup")
    spot_expiration_time: Optional[datetime] = Field(default=None, description="The time when the server farm expires. Valid only if it is a spot server farm.", alias="spotExpirationTime")
    status: Optional[StrictStr] = Field(default=None, description="App Service plan status.")
    subscription: Optional[StrictStr] = Field(default=None, description="App Service plan subscription.")
    target_worker_count: Optional[StrictInt] = Field(default=None, description="Scaling worker count.", alias="targetWorkerCount")
    target_worker_size_id: Optional[StrictInt] = Field(default=None, description="Scaling worker size ID.", alias="targetWorkerSizeId")
    worker_tier_name: Optional[StrictStr] = Field(default=None, description="Target worker tier assigned to the App Service plan.", alias="workerTierName")
    __properties: ClassVar[List[str]] = ["freeOfferExpirationTime", "geoRegion", "hostingEnvironmentProfile", "hyperV", "isSpot", "isXenon", "maximumElasticWorkerCount", "maximumNumberOfWorkers", "numberOfSites", "perSiteScaling", "provisioningState", "reserved", "resourceGroup", "spotExpirationTime", "status", "subscription", "targetWorkerCount", "targetWorkerSizeId", "workerTierName"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting']):
            raise ValueError("must be one of enum values ('Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Ready', 'Pending', 'Creating']):
            raise ValueError("must be one of enum values ('Ready', 'Pending', 'Creating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "geo_region",
            "maximum_number_of_workers",
            "number_of_sites",
            "provisioning_state",
            "resource_group",
            "status",
            "subscription",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hosting_environment_profile
        if self.hosting_environment_profile:
            _dict['hostingEnvironmentProfile'] = self.hosting_environment_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "freeOfferExpirationTime": obj.get("freeOfferExpirationTime"),
            "geoRegion": obj.get("geoRegion"),
            "hostingEnvironmentProfile": AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile.from_dict(obj["hostingEnvironmentProfile"]) if obj.get("hostingEnvironmentProfile") is not None else None,
            "hyperV": obj.get("hyperV") if obj.get("hyperV") is not None else False,
            "isSpot": obj.get("isSpot"),
            "isXenon": obj.get("isXenon") if obj.get("isXenon") is not None else False,
            "maximumElasticWorkerCount": obj.get("maximumElasticWorkerCount"),
            "maximumNumberOfWorkers": obj.get("maximumNumberOfWorkers"),
            "numberOfSites": obj.get("numberOfSites"),
            "perSiteScaling": obj.get("perSiteScaling") if obj.get("perSiteScaling") is not None else False,
            "provisioningState": obj.get("provisioningState"),
            "reserved": obj.get("reserved") if obj.get("reserved") is not None else False,
            "resourceGroup": obj.get("resourceGroup"),
            "spotExpirationTime": obj.get("spotExpirationTime"),
            "status": obj.get("status"),
            "subscription": obj.get("subscription"),
            "targetWorkerCount": obj.get("targetWorkerCount"),
            "targetWorkerSizeId": obj.get("targetWorkerSizeId"),
            "workerTierName": obj.get("workerTierName")
        })
        return _obj



# coding: utf-8

"""
    AppServiceEnvironments API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_service_environment_resource import AppServiceEnvironmentResource

class TestAppServiceEnvironmentResource(unittest.TestCase):
    """AppServiceEnvironmentResource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppServiceEnvironmentResource:
        """Test AppServiceEnvironmentResource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppServiceEnvironmentResource`
        """
        model = AppServiceEnvironmentResource()
        if include_optional:
            return AppServiceEnvironmentResource(
                properties = openapi_client.models.properties.properties(
                    allowed_multi_sizes = '', 
                    allowed_worker_sizes = '', 
                    api_management_account_id = '', 
                    cluster_settings = [
                        None
                        ], 
                    database_edition = '', 
                    database_service_objective = '', 
                    default_front_end_scale_factor = 56, 
                    dns_suffix = '', 
                    dynamic_cache_enabled = True, 
                    environment_capacities = [
                        None
                        ], 
                    environment_is_healthy = True, 
                    environment_status = '', 
                    front_end_scale_factor = 56, 
                    has_linux_workers = True, 
                    internal_load_balancing_mode = 'None', 
                    ipssl_address_count = 56, 
                    last_action = '', 
                    last_action_result = '', 
                    location = '', 
                    maximum_number_of_machines = 56, 
                    multi_role_count = 56, 
                    multi_size = '', 
                    name = '', 
                    network_access_control_list = [
                        None
                        ], 
                    provisioning_state = 'Succeeded', 
                    resource_group = '', 
                    ssl_cert_key_vault_id = '', 
                    ssl_cert_key_vault_secret_name = '', 
                    status = 'Preparing', 
                    subscription_id = '', 
                    suspended = True, 
                    upgrade_domains = 56, 
                    user_whitelisted_ip_ranges = [
                        ''
                        ], 
                    vip_mappings = [
                        None
                        ], 
                    virtual_network = openapi_client.models.virtual_network.virtualNetwork(
                        id = '', 
                        name = '', 
                        subnet = '', 
                        type = '', ), 
                    vnet_name = '', 
                    vnet_resource_group_name = '', 
                    vnet_subnet_name = '', 
                    worker_pools = [
                        None
                        ], ),
                id = '',
                kind = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return AppServiceEnvironmentResource(
                location = '',
        )
        """

    def testAppServiceEnvironmentResource(self):
        """Test AppServiceEnvironmentResource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

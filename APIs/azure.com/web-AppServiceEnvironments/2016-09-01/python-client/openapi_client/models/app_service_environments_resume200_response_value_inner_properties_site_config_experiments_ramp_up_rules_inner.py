# coding: utf-8

"""
    AppServiceEnvironments API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner(BaseModel):
    """
    Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.
    """ # noqa: E501
    action_host_name: Optional[StrictStr] = Field(default=None, description="Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.", alias="actionHostName")
    change_decision_callback_url: Optional[StrictStr] = Field(default=None, description="Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts. https://www.siteextensions.net/packages/TiPCallback/", alias="changeDecisionCallbackUrl")
    change_interval_in_minutes: Optional[StrictInt] = Field(default=None, description="Specifies interval in minutes to reevaluate ReroutePercentage.", alias="changeIntervalInMinutes")
    change_step: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="In auto ramp up scenario this is the step to add/remove from <code>ReroutePercentage</code> until it reaches  <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specified in <code>ChangeIntervalInMinutes</code>. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.", alias="changeStep")
    max_reroute_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies upper boundary below which ReroutePercentage will stay.", alias="maxReroutePercentage")
    min_reroute_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies lower boundary above which ReroutePercentage will stay.", alias="minReroutePercentage")
    name: Optional[StrictStr] = Field(default=None, description="Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.")
    reroute_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of the traffic which will be redirected to <code>ActionHostName</code>.", alias="reroutePercentage")
    __properties: ClassVar[List[str]] = ["actionHostName", "changeDecisionCallbackUrl", "changeIntervalInMinutes", "changeStep", "maxReroutePercentage", "minReroutePercentage", "name", "reroutePercentage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionHostName": obj.get("actionHostName"),
            "changeDecisionCallbackUrl": obj.get("changeDecisionCallbackUrl"),
            "changeIntervalInMinutes": obj.get("changeIntervalInMinutes"),
            "changeStep": obj.get("changeStep"),
            "maxReroutePercentage": obj.get("maxReroutePercentage"),
            "minReroutePercentage": obj.get("minReroutePercentage"),
            "name": obj.get("name"),
            "reroutePercentage": obj.get("reroutePercentage")
        })
        return _obj



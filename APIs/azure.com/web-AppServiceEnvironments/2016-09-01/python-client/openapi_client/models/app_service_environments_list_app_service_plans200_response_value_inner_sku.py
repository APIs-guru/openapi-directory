# coding: utf-8

"""
    AppServiceEnvironments API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_service_environments_list_app_service_plans200_response_value_inner_sku_capabilities_inner import AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSkuCapabilitiesInner
from openapi_client.models.app_service_environments_list_app_service_plans200_response_value_inner_sku_sku_capacity import AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSkuSkuCapacity
from typing import Optional, Set
from typing_extensions import Self

class AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSku(BaseModel):
    """
    Description of a SKU for a scalable resource.
    """ # noqa: E501
    capabilities: Optional[List[AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSkuCapabilitiesInner]] = Field(default=None, description="Capabilities of the SKU, e.g., is traffic manager enabled?")
    capacity: Optional[StrictInt] = Field(default=None, description="Current number of instances assigned to the resource.")
    family: Optional[StrictStr] = Field(default=None, description="Family code of the resource SKU.")
    locations: Optional[List[StrictStr]] = Field(default=None, description="Locations of the SKU.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource SKU.")
    size: Optional[StrictStr] = Field(default=None, description="Size specifier of the resource SKU.")
    sku_capacity: Optional[AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSkuSkuCapacity] = Field(default=None, alias="skuCapacity")
    tier: Optional[StrictStr] = Field(default=None, description="Service tier of the resource SKU.")
    __properties: ClassVar[List[str]] = ["capabilities", "capacity", "family", "locations", "name", "size", "skuCapacity", "tier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSku from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in capabilities (list)
        _items = []
        if self.capabilities:
            for _item_capabilities in self.capabilities:
                if _item_capabilities:
                    _items.append(_item_capabilities.to_dict())
            _dict['capabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of sku_capacity
        if self.sku_capacity:
            _dict['skuCapacity'] = self.sku_capacity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSku from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": [AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSkuCapabilitiesInner.from_dict(_item) for _item in obj["capabilities"]] if obj.get("capabilities") is not None else None,
            "capacity": obj.get("capacity"),
            "family": obj.get("family"),
            "locations": obj.get("locations"),
            "name": obj.get("name"),
            "size": obj.get("size"),
            "skuCapacity": AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerSkuSkuCapacity.from_dict(obj["skuCapacity"]) if obj.get("skuCapacity") is not None else None,
            "tier": obj.get("tier")
        })
        return _obj



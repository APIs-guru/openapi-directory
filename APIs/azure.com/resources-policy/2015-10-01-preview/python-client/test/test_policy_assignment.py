# coding: utf-8

"""
    PolicyClient

    To manage and control access to your resources, you can define customized policies and assign them at a scope.

    The version of the OpenAPI document: 2015-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.policy_assignment import PolicyAssignment

class TestPolicyAssignment(unittest.TestCase):
    """PolicyAssignment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PolicyAssignment:
        """Test PolicyAssignment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PolicyAssignment`
        """
        model = PolicyAssignment()
        if include_optional:
            return PolicyAssignment(
                id = '',
                name = '',
                properties = openapi_client.models.policy_assignment_properties.PolicyAssignmentProperties(
                    display_name = '', 
                    policy_definition_id = '', 
                    scope = '', ),
                type = ''
            )
        else:
            return PolicyAssignment(
        )
        """

    def testPolicyAssignment(self):
        """Test PolicyAssignment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

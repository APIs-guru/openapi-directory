# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to manage Azure API Management deployment.

    The version of the OpenAPI document: 2016-07-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_region import AdditionalRegion
from openapi_client.models.virtual_network_configuration import VirtualNetworkConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ApiManagementServiceManageDeploymentsParameters(BaseModel):
    """
    Parameters supplied to the ManageDeployments operation.
    """ # noqa: E501
    additional_locations: Optional[List[AdditionalRegion]] = Field(default=None, description="Additional data center locations for the API Management service.", alias="additionalLocations")
    location: StrictStr = Field(description="Location of the API Management service Azure data center.")
    sku_type: StrictStr = Field(description="SKU type of the API Management service.", alias="skuType")
    sku_unit_count: Optional[StrictInt] = Field(default=1, description="SKU Unit count of the API Management service. Default value is 1.", alias="skuUnitCount")
    vpn_configuration: Optional[VirtualNetworkConfiguration] = Field(default=None, alias="vpnConfiguration")
    vpn_type: Optional[StrictStr] = Field(default='None', description="The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that the API Management service deployment is set up inside a Virtual Network having an Intranet Facing Endpoint only. When vpnConfiguration is specified, vpnType must be specified.", alias="vpnType")
    __properties: ClassVar[List[str]] = ["additionalLocations", "location", "skuType", "skuUnitCount", "vpnConfiguration", "vpnType"]

    @field_validator('sku_type')
    def sku_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Developer', 'Standard', 'Premium']):
            raise ValueError("must be one of enum values ('Developer', 'Standard', 'Premium')")
        return value

    @field_validator('vpn_type')
    def vpn_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'External', 'Internal']):
            raise ValueError("must be one of enum values ('None', 'External', 'Internal')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiManagementServiceManageDeploymentsParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_locations (list)
        _items = []
        if self.additional_locations:
            for _item_additional_locations in self.additional_locations:
                if _item_additional_locations:
                    _items.append(_item_additional_locations.to_dict())
            _dict['additionalLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of vpn_configuration
        if self.vpn_configuration:
            _dict['vpnConfiguration'] = self.vpn_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiManagementServiceManageDeploymentsParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalLocations": [AdditionalRegion.from_dict(_item) for _item in obj["additionalLocations"]] if obj.get("additionalLocations") is not None else None,
            "location": obj.get("location"),
            "skuType": obj.get("skuType"),
            "skuUnitCount": obj.get("skuUnitCount") if obj.get("skuUnitCount") is not None else 1,
            "vpnConfiguration": VirtualNetworkConfiguration.from_dict(obj["vpnConfiguration"]) if obj.get("vpnConfiguration") is not None else None,
            "vpnType": obj.get("vpnType") if obj.get("vpnType") is not None else 'None'
        })
        return _obj



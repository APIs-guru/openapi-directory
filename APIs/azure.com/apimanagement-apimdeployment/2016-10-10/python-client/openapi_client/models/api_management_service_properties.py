# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to manage Azure API Management deployment.

    The version of the OpenAPI document: 2016-10-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.additional_region import AdditionalRegion
from openapi_client.models.hostname_configuration import HostnameConfiguration
from openapi_client.models.virtual_network_configuration import VirtualNetworkConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ApiManagementServiceProperties(BaseModel):
    """
    Properties of an API Management service resource description.
    """ # noqa: E501
    additional_locations: Optional[List[AdditionalRegion]] = Field(default=None, description="Additional datacenter locations of the API Management service.", alias="additionalLocations")
    addresser_email: Optional[StrictStr] = Field(default=None, description="Addresser email.", alias="addresserEmail")
    created_at_utc: Optional[datetime] = Field(default=None, description="Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.", alias="createdAtUtc")
    custom_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Custom properties of the API Management service, like disabling TLS 1.0.", alias="customProperties")
    hostname_configurations: Optional[List[HostnameConfiguration]] = Field(default=None, description="Custom hostname configuration of the API Management service.", alias="hostnameConfigurations")
    management_api_url: Optional[StrictStr] = Field(default=None, description="Management API endpoint URL of the API Management service.", alias="managementApiUrl")
    portal_url: Optional[StrictStr] = Field(default=None, description="Publisher portal endpoint Url of the API Management service.", alias="portalUrl")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.", alias="provisioningState")
    publisher_email: Annotated[str, Field(strict=True, max_length=100)] = Field(description="Publisher email.", alias="publisherEmail")
    publisher_name: StrictStr = Field(description="Publisher name.", alias="publisherName")
    runtime_url: Optional[StrictStr] = Field(default=None, description="Proxy endpoint URL of the API Management service.", alias="runtimeUrl")
    scm_url: Optional[StrictStr] = Field(default=None, description="SCM endpoint URL of the API Management service.", alias="scmUrl")
    static_ips: Optional[List[StrictStr]] = Field(default=None, description="Static IP addresses of the API Management service virtual machines. Available only for Standard and Premium SKU.", alias="staticIPs")
    target_provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the API Management service, which is targeted by the long running operation started on the service.", alias="targetProvisioningState")
    vpn_type: Optional[StrictStr] = Field(default='None', description="The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.", alias="vpnType")
    vpnconfiguration: Optional[VirtualNetworkConfiguration] = None
    __properties: ClassVar[List[str]] = ["additionalLocations", "addresserEmail", "createdAtUtc", "customProperties", "hostnameConfigurations", "managementApiUrl", "portalUrl", "provisioningState", "publisherEmail", "publisherName", "runtimeUrl", "scmUrl", "staticIPs", "targetProvisioningState", "vpnType", "vpnconfiguration"]

    @field_validator('vpn_type')
    def vpn_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'External', 'Internal']):
            raise ValueError("must be one of enum values ('None', 'External', 'Internal')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiManagementServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at_utc",
            "management_api_url",
            "portal_url",
            "provisioning_state",
            "runtime_url",
            "scm_url",
            "static_ips",
            "target_provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_locations (list)
        _items = []
        if self.additional_locations:
            for _item_additional_locations in self.additional_locations:
                if _item_additional_locations:
                    _items.append(_item_additional_locations.to_dict())
            _dict['additionalLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hostname_configurations (list)
        _items = []
        if self.hostname_configurations:
            for _item_hostname_configurations in self.hostname_configurations:
                if _item_hostname_configurations:
                    _items.append(_item_hostname_configurations.to_dict())
            _dict['hostnameConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of vpnconfiguration
        if self.vpnconfiguration:
            _dict['vpnconfiguration'] = self.vpnconfiguration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiManagementServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalLocations": [AdditionalRegion.from_dict(_item) for _item in obj["additionalLocations"]] if obj.get("additionalLocations") is not None else None,
            "addresserEmail": obj.get("addresserEmail"),
            "createdAtUtc": obj.get("createdAtUtc"),
            "customProperties": obj.get("customProperties"),
            "hostnameConfigurations": [HostnameConfiguration.from_dict(_item) for _item in obj["hostnameConfigurations"]] if obj.get("hostnameConfigurations") is not None else None,
            "managementApiUrl": obj.get("managementApiUrl"),
            "portalUrl": obj.get("portalUrl"),
            "provisioningState": obj.get("provisioningState"),
            "publisherEmail": obj.get("publisherEmail"),
            "publisherName": obj.get("publisherName"),
            "runtimeUrl": obj.get("runtimeUrl"),
            "scmUrl": obj.get("scmUrl"),
            "staticIPs": obj.get("staticIPs"),
            "targetProvisioningState": obj.get("targetProvisioningState"),
            "vpnType": obj.get("vpnType") if obj.get("vpnType") is not None else 'None',
            "vpnconfiguration": VirtualNetworkConfiguration.from_dict(obj["vpnconfiguration"]) if obj.get("vpnconfiguration") is not None else None
        })
        return _obj



# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to manage Azure API Management deployment.

    The version of the OpenAPI document: 2016-10-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.virtual_network_configuration import VirtualNetworkConfiguration
from typing import Optional, Set
from typing_extensions import Self

class AdditionalRegion(BaseModel):
    """
    Description of an additional API Management resource location.
    """ # noqa: E501
    location: StrictStr = Field(description="The location name of the additional region among Azure Data center regions.")
    sku_type: StrictStr = Field(description="The SKU type in the location.", alias="skuType")
    sku_unit_count: Optional[Annotated[int, Field(le=10, strict=True)]] = Field(default=1, description="The SKU Unit count at the location. The maximum SKU Unit count depends on the SkuType. Maximum allowed for Developer SKU is 1, for Standard SKU is 4, and for Premium SKU is 10, at a location.", alias="skuUnitCount")
    static_ips: Optional[List[StrictStr]] = Field(default=None, description="Static IP addresses of the location's virtual machines.", alias="staticIPs")
    vpnconfiguration: Optional[VirtualNetworkConfiguration] = None
    __properties: ClassVar[List[str]] = ["location", "skuType", "skuUnitCount", "staticIPs", "vpnconfiguration"]

    @field_validator('sku_type')
    def sku_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Developer', 'Standard', 'Premium']):
            raise ValueError("must be one of enum values ('Developer', 'Standard', 'Premium')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdditionalRegion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "static_ips",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vpnconfiguration
        if self.vpnconfiguration:
            _dict['vpnconfiguration'] = self.vpnconfiguration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdditionalRegion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": obj.get("location"),
            "skuType": obj.get("skuType"),
            "skuUnitCount": obj.get("skuUnitCount") if obj.get("skuUnitCount") is not None else 1,
            "staticIPs": obj.get("staticIPs"),
            "vpnconfiguration": VirtualNetworkConfiguration.from_dict(obj["vpnconfiguration"]) if obj.get("vpnconfiguration") is not None else None
        })
        return _obj



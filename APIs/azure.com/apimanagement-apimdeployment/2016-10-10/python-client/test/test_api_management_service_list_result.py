# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to manage Azure API Management deployment.

    The version of the OpenAPI document: 2016-10-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_management_service_list_result import ApiManagementServiceListResult

class TestApiManagementServiceListResult(unittest.TestCase):
    """ApiManagementServiceListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiManagementServiceListResult:
        """Test ApiManagementServiceListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiManagementServiceListResult`
        """
        model = ApiManagementServiceListResult()
        if include_optional:
            return ApiManagementServiceListResult(
                next_link = '',
                value = [
                    openapi_client.models.api_management_service_resource.ApiManagementServiceResource(
                        etag = '', 
                        properties = openapi_client.models.api_management_service_properties.ApiManagementServiceProperties(
                            additional_locations = [
                                openapi_client.models.additional_region.AdditionalRegion(
                                    location = '', 
                                    sku_type = 'Developer', 
                                    sku_unit_count = 56, 
                                    static_ips = [
                                        ''
                                        ], 
                                    vpnconfiguration = openapi_client.models.virtual_network_configuration.VirtualNetworkConfiguration(
                                        location = '', 
                                        subnet_resource_id = '/subscriptions/k$?x u&K}qz^sEC(lJ)=,j/resourceGroups/*&6`$cClu+k& &su[-lzF6V+V6rEtCO?%28nxs\"k8z(!\\6\\$TMxo:,sWVoim9gsbE`buHkrTt{/providers/Microsoft~ClassicNetwork/virtualNetworks/p~hu~%,Dc'g.?UG.cUdHsc0dEk]zZ}N52jBJ^2eA['M^pgNAJ Lz'UrdK{=/subnets/3Bx&1in{}Uo`H[{_=S:?;Td@', 
                                        subnetname = '', 
                                        vnetid = '', ), )
                                ], 
                            addresser_email = '', 
                            created_at_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            custom_properties = {
                                'key' : ''
                                }, 
                            hostname_configurations = [
                                openapi_client.models.hostname_configuration.HostnameConfiguration(
                                    certificate = openapi_client.models.certificate_information.CertificateInformation(
                                        expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        subject = '', 
                                        thumbprint = '', ), 
                                    hostname = '', 
                                    type = 'Proxy', )
                                ], 
                            management_api_url = '', 
                            portal_url = '', 
                            provisioning_state = '', 
                            publisher_email = '', 
                            publisher_name = '', 
                            runtime_url = '', 
                            scm_url = '', 
                            static_ips = [
                                ''
                                ], 
                            target_provisioning_state = '', 
                            vpn_type = 'None', 
                            vpnconfiguration = openapi_client.models.virtual_network_configuration.VirtualNetworkConfiguration(
                                location = '', 
                                subnet_resource_id = '/subscriptions/k$?x u&K}qz^sEC(lJ)=,j/resourceGroups/*&6`$cClu+k& &su[-lzF6V+V6rEtCO?%28nxs\"k8z(!\\6\\$TMxo:,sWVoim9gsbE`buHkrTt{/providers/Microsoft~ClassicNetwork/virtualNetworks/p~hu~%,Dc'g.?UG.cUdHsc0dEk]zZ}N52jBJ^2eA['M^pgNAJ Lz'UrdK{=/subnets/3Bx&1in{}Uo`H[{_=S:?;Td@', 
                                subnetname = '', 
                                vnetid = '', ), ), 
                        sku = openapi_client.models.api_management_service_sku_properties.ApiManagementServiceSkuProperties(
                            capacity = 56, 
                            name = 'Developer', ), )
                    ]
            )
        else:
            return ApiManagementServiceListResult(
                value = [
                    openapi_client.models.api_management_service_resource.ApiManagementServiceResource(
                        etag = '', 
                        properties = openapi_client.models.api_management_service_properties.ApiManagementServiceProperties(
                            additional_locations = [
                                openapi_client.models.additional_region.AdditionalRegion(
                                    location = '', 
                                    sku_type = 'Developer', 
                                    sku_unit_count = 56, 
                                    static_ips = [
                                        ''
                                        ], 
                                    vpnconfiguration = openapi_client.models.virtual_network_configuration.VirtualNetworkConfiguration(
                                        location = '', 
                                        subnet_resource_id = '/subscriptions/k$?x u&K}qz^sEC(lJ)=,j/resourceGroups/*&6`$cClu+k& &su[-lzF6V+V6rEtCO?%28nxs\"k8z(!\\6\\$TMxo:,sWVoim9gsbE`buHkrTt{/providers/Microsoft~ClassicNetwork/virtualNetworks/p~hu~%,Dc'g.?UG.cUdHsc0dEk]zZ}N52jBJ^2eA['M^pgNAJ Lz'UrdK{=/subnets/3Bx&1in{}Uo`H[{_=S:?;Td@', 
                                        subnetname = '', 
                                        vnetid = '', ), )
                                ], 
                            addresser_email = '', 
                            created_at_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            custom_properties = {
                                'key' : ''
                                }, 
                            hostname_configurations = [
                                openapi_client.models.hostname_configuration.HostnameConfiguration(
                                    certificate = openapi_client.models.certificate_information.CertificateInformation(
                                        expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        subject = '', 
                                        thumbprint = '', ), 
                                    hostname = '', 
                                    type = 'Proxy', )
                                ], 
                            management_api_url = '', 
                            portal_url = '', 
                            provisioning_state = '', 
                            publisher_email = '', 
                            publisher_name = '', 
                            runtime_url = '', 
                            scm_url = '', 
                            static_ips = [
                                ''
                                ], 
                            target_provisioning_state = '', 
                            vpn_type = 'None', 
                            vpnconfiguration = openapi_client.models.virtual_network_configuration.VirtualNetworkConfiguration(
                                location = '', 
                                subnet_resource_id = '/subscriptions/k$?x u&K}qz^sEC(lJ)=,j/resourceGroups/*&6`$cClu+k& &su[-lzF6V+V6rEtCO?%28nxs\"k8z(!\\6\\$TMxo:,sWVoim9gsbE`buHkrTt{/providers/Microsoft~ClassicNetwork/virtualNetworks/p~hu~%,Dc'g.?UG.cUdHsc0dEk]zZ}N52jBJ^2eA['M^pgNAJ Lz'UrdK{=/subnets/3Bx&1in{}Uo`H[{_=S:?;Td@', 
                                subnetname = '', 
                                vnetid = '', ), ), 
                        sku = openapi_client.models.api_management_service_sku_properties.ApiManagementServiceSkuProperties(
                            capacity = 56, 
                            name = 'Developer', ), )
                    ],
        )
        """

    def testApiManagementServiceListResult(self):
        """Test ApiManagementServiceListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

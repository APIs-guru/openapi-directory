# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to manage Azure API Management deployment.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_management_service_sku_properties import ApiManagementServiceSkuProperties
from openapi_client.models.virtual_network_configuration import VirtualNetworkConfiguration
from typing import Optional, Set
from typing_extensions import Self

class AdditionalLocation(BaseModel):
    """
    Description of an additional API Management resource location.
    """ # noqa: E501
    disable_gateway: Optional[StrictBool] = Field(default=False, description="Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in this additional location.", alias="disableGateway")
    gateway_regional_url: Optional[StrictStr] = Field(default=None, description="Gateway URL of the API Management service in the Region.", alias="gatewayRegionalUrl")
    location: StrictStr = Field(description="The location name of the additional region among Azure Data center regions.")
    private_ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard and Premium SKU.", alias="privateIPAddresses")
    public_ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard and Premium SKU.", alias="publicIPAddresses")
    sku: ApiManagementServiceSkuProperties
    virtual_network_configuration: Optional[VirtualNetworkConfiguration] = Field(default=None, alias="virtualNetworkConfiguration")
    __properties: ClassVar[List[str]] = ["disableGateway", "gatewayRegionalUrl", "location", "privateIPAddresses", "publicIPAddresses", "sku", "virtualNetworkConfiguration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdditionalLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gateway_regional_url",
            "private_ip_addresses",
            "public_ip_addresses",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_network_configuration
        if self.virtual_network_configuration:
            _dict['virtualNetworkConfiguration'] = self.virtual_network_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdditionalLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disableGateway": obj.get("disableGateway") if obj.get("disableGateway") is not None else False,
            "gatewayRegionalUrl": obj.get("gatewayRegionalUrl"),
            "location": obj.get("location"),
            "privateIPAddresses": obj.get("privateIPAddresses"),
            "publicIPAddresses": obj.get("publicIPAddresses"),
            "sku": ApiManagementServiceSkuProperties.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "virtualNetworkConfiguration": VirtualNetworkConfiguration.from_dict(obj["virtualNetworkConfiguration"]) if obj.get("virtualNetworkConfiguration") is not None else None
        })
        return _obj



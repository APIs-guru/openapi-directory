# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to manage Azure API Management deployment.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_management_service_update_properties import ApiManagementServiceUpdateProperties

class TestApiManagementServiceUpdateProperties(unittest.TestCase):
    """ApiManagementServiceUpdateProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiManagementServiceUpdateProperties:
        """Test ApiManagementServiceUpdateProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiManagementServiceUpdateProperties`
        """
        model = ApiManagementServiceUpdateProperties()
        if include_optional:
            return ApiManagementServiceUpdateProperties(
                publisher_email = '',
                publisher_name = '',
                additional_locations = [
                    openapi_client.models.additional_location.AdditionalLocation(
                        disable_gateway = True, 
                        gateway_regional_url = '', 
                        location = '', 
                        private_ip_addresses = [
                            ''
                            ], 
                        public_ip_addresses = [
                            ''
                            ], 
                        sku = openapi_client.models.api_management_service_sku_properties.ApiManagementServiceSkuProperties(
                            capacity = 56, 
                            name = 'Developer', ), 
                        virtual_network_configuration = openapi_client.models.virtual_network_configuration.VirtualNetworkConfiguration(
                            subnet_resource_id = '/subscriptions/k$?x u&K}qz^sEC(lJ)=,j/resourceGroups/*&6`$cClu+k& &su[-lzF6V+V6rEtCO?%28nxs\"k8z(!\\6\\$TMxo:,sWVoim9gsbE`buHkrTt{/providers/Microsoft~ClassicNetwork/virtualNetworks/p~hu~%,Dc'g.?UG.cUdHsc0dEk]zZ}N52jBJ^2eA['M^pgNAJ Lz'UrdK{=/subnets/3Bx&1in{}Uo`H[{_=S:?;Td@', 
                            subnetname = '', 
                            vnetid = '', ), )
                    ],
                api_version_constraint = openapi_client.models.api_version_constraint.ApiVersionConstraint(
                    min_api_version = '2019-01-01', ),
                certificates = [
                    openapi_client.models.certificate_configuration.CertificateConfiguration(
                        certificate = openapi_client.models.certificate_information.CertificateInformation(
                            expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            subject = '', 
                            thumbprint = '', ), 
                        certificate_password = '', 
                        encoded_certificate = '', 
                        store_name = 'CertificateAuthority', )
                    ],
                created_at_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                custom_properties = {
                    'key' : ''
                    },
                developer_portal_url = '',
                disable_gateway = True,
                enable_client_certificate = True,
                gateway_regional_url = '',
                gateway_url = '',
                hostname_configurations = [
                    openapi_client.models.hostname_configuration.HostnameConfiguration(
                        certificate = openapi_client.models.certificate_information.CertificateInformation(
                            expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            subject = '', 
                            thumbprint = '', ), 
                        certificate_password = '', 
                        default_ssl_binding = True, 
                        encoded_certificate = '', 
                        host_name = '', 
                        key_vault_id = '', 
                        negotiate_client_certificate = True, 
                        type = 'Proxy', )
                    ],
                management_api_url = '',
                notification_sender_email = '',
                portal_url = '',
                private_ip_addresses = [
                    ''
                    ],
                provisioning_state = '',
                public_ip_addresses = [
                    ''
                    ],
                scm_url = '',
                target_provisioning_state = '',
                virtual_network_configuration = openapi_client.models.virtual_network_configuration.VirtualNetworkConfiguration(
                    subnet_resource_id = '/subscriptions/k$?x u&K}qz^sEC(lJ)=,j/resourceGroups/*&6`$cClu+k& &su[-lzF6V+V6rEtCO?%28nxs\"k8z(!\\6\\$TMxo:,sWVoim9gsbE`buHkrTt{/providers/Microsoft~ClassicNetwork/virtualNetworks/p~hu~%,Dc'g.?UG.cUdHsc0dEk]zZ}N52jBJ^2eA['M^pgNAJ Lz'UrdK{=/subnets/3Bx&1in{}Uo`H[{_=S:?;Td@', 
                    subnetname = '', 
                    vnetid = '', ),
                virtual_network_type = 'None'
            )
        else:
            return ApiManagementServiceUpdateProperties(
        )
        """

    def testApiManagementServiceUpdateProperties(self):
        """Test ApiManagementServiceUpdateProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

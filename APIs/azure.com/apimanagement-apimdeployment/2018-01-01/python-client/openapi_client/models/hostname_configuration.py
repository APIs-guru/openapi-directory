# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to manage Azure API Management deployment.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_information import CertificateInformation
from typing import Optional, Set
from typing_extensions import Self

class HostnameConfiguration(BaseModel):
    """
    Custom hostname configuration.
    """ # noqa: E501
    certificate: Optional[CertificateInformation] = None
    certificate_password: Optional[StrictStr] = Field(default=None, description="Certificate Password.", alias="certificatePassword")
    default_ssl_binding: Optional[StrictBool] = Field(default=False, description="Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.", alias="defaultSslBinding")
    encoded_certificate: Optional[StrictStr] = Field(default=None, description="Base64 Encoded certificate.", alias="encodedCertificate")
    host_name: StrictStr = Field(description="Hostname to configure on the Api Management service.", alias="hostName")
    key_vault_id: Optional[StrictStr] = Field(default=None, description="Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*", alias="keyVaultId")
    negotiate_client_certificate: Optional[StrictBool] = Field(default=False, description="Specify true to always negotiate client certificate on the hostname. Default Value is false.", alias="negotiateClientCertificate")
    type: StrictStr = Field(description="Hostname type.")
    __properties: ClassVar[List[str]] = ["certificate", "certificatePassword", "defaultSslBinding", "encodedCertificate", "hostName", "keyVaultId", "negotiateClientCertificate", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Proxy', 'Portal', 'Management', 'Scm']):
            raise ValueError("must be one of enum values ('Proxy', 'Portal', 'Management', 'Scm')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HostnameConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate
        if self.certificate:
            _dict['certificate'] = self.certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HostnameConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificate": CertificateInformation.from_dict(obj["certificate"]) if obj.get("certificate") is not None else None,
            "certificatePassword": obj.get("certificatePassword"),
            "defaultSslBinding": obj.get("defaultSslBinding") if obj.get("defaultSslBinding") is not None else False,
            "encodedCertificate": obj.get("encodedCertificate"),
            "hostName": obj.get("hostName"),
            "keyVaultId": obj.get("keyVaultId"),
            "negotiateClientCertificate": obj.get("negotiateClientCertificate") if obj.get("negotiateClientCertificate") is not None else False,
            "type": obj.get("type")
        })
        return _obj



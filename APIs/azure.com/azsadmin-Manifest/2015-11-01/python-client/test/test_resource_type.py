# coding: utf-8

"""
    SubscriptionsManagementClient

    The Admin Subscriptions Management Client.

    The version of the OpenAPI document: 2015-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.resource_type import ResourceType

class TestResourceType(unittest.TestCase):
    """ResourceType unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResourceType:
        """Test ResourceType
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResourceType`
        """
        model = ResourceType()
        if include_optional:
            return ResourceType(
                allowed_unauthorized_actions = [
                    ''
                    ],
                api_profiles = openapi_client.models.api_profile_list.ApiProfileList(
                    next_link = '', 
                    value = [
                        openapi_client.models.api_profile.ApiProfile(
                            api_version = '', 
                            profile_version = '', )
                        ], ),
                authorization_action_mappings = openapi_client.models.authorization_action_mapping_list.AuthorizationActionMappingList(
                    next_link = '', 
                    value = [
                        openapi_client.models.authorization_action_mapping.AuthorizationActionMapping(
                            desired = '', 
                            original = '', )
                        ], ),
                endpoints = openapi_client.models.resource_provider_endpoint_list.ResourceProviderEndpointList(
                    next_link = '', 
                    value = [
                        openapi_client.models.resource_provider_endpoint.ResourceProviderEndpoint(
                            api_versions = [
                                ''
                                ], 
                            enabled = True, 
                            endpoint_uri = '', 
                            timeout = '', )
                        ], ),
                in_global_location = True,
                linked_access_checks = openapi_client.models.linked_access_check_list.LinkedAccessCheckList(
                    next_link = '', 
                    value = [
                        openapi_client.models.linked_access_check.LinkedAccessCheck(
                            action_name = '', 
                            linked_action = '', 
                            linked_action_verb = '', 
                            linked_property = '', 
                            linked_type = '', )
                        ], ),
                linked_notification_rules = openapi_client.models.linked_notification_rule_list.LinkedNotificationRuleList(
                    next_link = '', 
                    value = [
                        openapi_client.models.linked_notification_rule.LinkedNotificationRule(
                            actions = [
                                ''
                                ], )
                        ], ),
                linked_operation_rules = openapi_client.models.linked_operation_rule_list.LinkedOperationRuleList(
                    next_link = '', 
                    value = [
                        openapi_client.models.linked_operation_rule.LinkedOperationRule(
                            depends_on_types = [
                                ''
                                ], 
                            linked_action = 'NotSpecified', 
                            linked_operation = 'None', )
                        ], ),
                marketplace_type = 'NotSpecified',
                metered_resource_ids = [
                    ''
                    ],
                name = '',
                resource_deletion_policy = 'NotSpecified',
                routing_type = 'Default'
            )
        else:
            return ResourceType(
        )
        """

    def testResourceType(self):
        """Test ResourceType"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

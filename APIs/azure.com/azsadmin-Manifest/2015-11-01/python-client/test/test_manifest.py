# coding: utf-8

"""
    SubscriptionsManagementClient

    The Admin Subscriptions Management Client.

    The version of the OpenAPI document: 2015-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.manifest import Manifest

class TestManifest(unittest.TestCase):
    """Manifest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Manifest:
        """Test Manifest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Manifest`
        """
        model = Manifest()
        if include_optional:
            return Manifest(
                always_routable = True,
                display_name = '',
                enabled = True,
                extension_collection = openapi_client.models.extension_collection_definition.ExtensionCollectionDefinition(
                    extensions = openapi_client.models.extension_list.ExtensionList(
                        next_link = '', 
                        value = [
                            openapi_client.models.extension_definition.ExtensionDefinition(
                                name = '', 
                                obsolete_bundles_bitmask = 56, 
                                properties = openapi_client.models.extension_properties_definition.ExtensionPropertiesDefinition(
                                    quota_create_blade_name = '', 
                                    resource_provider_dashboard_blade_name = '', ), 
                                resource_access = openapi_client.models.resource_access_list.ResourceAccessList(
                                    next_link = '', ), 
                                uri = '', )
                            ], ), 
                    version = '', ),
                linked_notification_rules = openapi_client.models.fanout_linked_notification_rule_list.FanoutLinkedNotificationRuleList(
                    next_link = '', 
                    value = [
                        openapi_client.models.fanout_linked_notification_rule.FanoutLinkedNotificationRule(
                            actions = [
                                ''
                                ], 
                            endpoints = openapi_client.models.resource_provider_endpoint_list.ResourceProviderEndpointList(
                                next_link = '', ), )
                        ], ),
                metadata = None,
                name = '',
                namespace = '',
                provider_authorization = openapi_client.models.resource_provider_authorization.ResourceProviderAuthorization(
                    application_id = '', 
                    role_definition_id = '', ),
                provider_location = '',
                provider_type = 'NotSpecified',
                provisioning_state = 'Accepted',
                resource_group_name = '',
                resource_hydration_accounts = openapi_client.models.azure_resource_hydration_account_list.AzureResourceHydrationAccountList(
                    next_link = '', 
                    value = [
                        openapi_client.models.azure_resource_hydration_account.AzureResourceHydrationAccount(
                            account_name = '', 
                            encrypted_key = '', 
                            max_child_resource_consistency_job_limit = 56, 
                            subscription_id = '', )
                        ], ),
                resource_location = '',
                resource_tags = None,
                resource_types = openapi_client.models.resource_type_list.ResourceTypeList(
                    next_link = '', 
                    value = [
                        openapi_client.models.resource_type.ResourceType(
                            allowed_unauthorized_actions = [
                                ''
                                ], 
                            api_profiles = openapi_client.models.api_profile_list.ApiProfileList(
                                next_link = '', ), 
                            authorization_action_mappings = openapi_client.models.authorization_action_mapping_list.AuthorizationActionMappingList(
                                next_link = '', ), 
                            endpoints = openapi_client.models.resource_provider_endpoint_list.ResourceProviderEndpointList(
                                next_link = '', ), 
                            in_global_location = True, 
                            linked_access_checks = openapi_client.models.linked_access_check_list.LinkedAccessCheckList(
                                next_link = '', ), 
                            linked_notification_rules = openapi_client.models.linked_notification_rule_list.LinkedNotificationRuleList(
                                next_link = '', ), 
                            linked_operation_rules = openapi_client.models.linked_operation_rule_list.LinkedOperationRuleList(
                                next_link = '', ), 
                            marketplace_type = 'NotSpecified', 
                            metered_resource_ids = [
                                ''
                                ], 
                            name = '', 
                            resource_deletion_policy = 'NotSpecified', 
                            routing_type = 'Default', )
                        ], ),
                routing_resource_manager_type = 'Default',
                subscription_id = ''
            )
        else:
            return Manifest(
        )
        """

    def testManifest(self):
        """Test Manifest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

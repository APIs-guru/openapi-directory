# coding: utf-8

"""
    SubscriptionsManagementClient

    The Admin Subscriptions Management Client.

    The version of the OpenAPI document: 2015-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_resource_hydration_account_list import AzureResourceHydrationAccountList
from openapi_client.models.extension_collection_definition import ExtensionCollectionDefinition
from openapi_client.models.fanout_linked_notification_rule_list import FanoutLinkedNotificationRuleList
from openapi_client.models.manifest_provisioning_state import ManifestProvisioningState
from openapi_client.models.resource_provider_authorization import ResourceProviderAuthorization
from openapi_client.models.resource_provider_type import ResourceProviderType
from openapi_client.models.resource_type_list import ResourceTypeList
from typing import Optional, Set
from typing_extensions import Self

class Manifest(BaseModel):
    """
    The manifest.
    """ # noqa: E501
    always_routable: Optional[StrictBool] = Field(default=None, description="A value indicating whether the manifest is always routable by all subscriptions.", alias="alwaysRoutable")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name.", alias="displayName")
    enabled: Optional[StrictBool] = Field(default=None, description="A value indicating whether this resource provider is enabled.")
    extension_collection: Optional[ExtensionCollectionDefinition] = Field(default=None, alias="extensionCollection")
    linked_notification_rules: Optional[FanoutLinkedNotificationRuleList] = Field(default=None, alias="linkedNotificationRules")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata.")
    name: Optional[StrictStr] = Field(default=None, description="The unique identifier of the registration.")
    namespace: Optional[StrictStr] = Field(default=None, description="The namespace.")
    provider_authorization: Optional[ResourceProviderAuthorization] = Field(default=None, alias="providerAuthorization")
    provider_location: Optional[StrictStr] = Field(default=None, description="The location of the provider.", alias="providerLocation")
    provider_type: Optional[ResourceProviderType] = Field(default=None, alias="providerType")
    provisioning_state: Optional[ManifestProvisioningState] = Field(default=None, alias="provisioningState")
    resource_group_name: Optional[StrictStr] = Field(default=None, description="The name of the resource group.", alias="resourceGroupName")
    resource_hydration_accounts: Optional[AzureResourceHydrationAccountList] = Field(default=None, alias="resourceHydrationAccounts")
    resource_location: Optional[StrictStr] = Field(default=None, description="The location of the resource.", alias="resourceLocation")
    resource_tags: Optional[Dict[str, Any]] = Field(default=None, description="The resource tags.", alias="resourceTags")
    resource_types: Optional[ResourceTypeList] = Field(default=None, alias="resourceTypes")
    routing_resource_manager_type: Optional[StrictStr] = Field(default=None, description="Resource manager type.", alias="routingResourceManagerType")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The subscription ID under which RP is registered.", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["alwaysRoutable", "displayName", "enabled", "extensionCollection", "linkedNotificationRules", "metadata", "name", "namespace", "providerAuthorization", "providerLocation", "providerType", "provisioningState", "resourceGroupName", "resourceHydrationAccounts", "resourceLocation", "resourceTags", "resourceTypes", "routingResourceManagerType", "subscriptionId"]

    @field_validator('routing_resource_manager_type')
    def routing_resource_manager_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'Admin']):
            raise ValueError("must be one of enum values ('Default', 'Admin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Manifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extension_collection
        if self.extension_collection:
            _dict['extensionCollection'] = self.extension_collection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_notification_rules
        if self.linked_notification_rules:
            _dict['linkedNotificationRules'] = self.linked_notification_rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider_authorization
        if self.provider_authorization:
            _dict['providerAuthorization'] = self.provider_authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_hydration_accounts
        if self.resource_hydration_accounts:
            _dict['resourceHydrationAccounts'] = self.resource_hydration_accounts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_types
        if self.resource_types:
            _dict['resourceTypes'] = self.resource_types.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Manifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alwaysRoutable": obj.get("alwaysRoutable"),
            "displayName": obj.get("displayName"),
            "enabled": obj.get("enabled"),
            "extensionCollection": ExtensionCollectionDefinition.from_dict(obj["extensionCollection"]) if obj.get("extensionCollection") is not None else None,
            "linkedNotificationRules": FanoutLinkedNotificationRuleList.from_dict(obj["linkedNotificationRules"]) if obj.get("linkedNotificationRules") is not None else None,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "providerAuthorization": ResourceProviderAuthorization.from_dict(obj["providerAuthorization"]) if obj.get("providerAuthorization") is not None else None,
            "providerLocation": obj.get("providerLocation"),
            "providerType": obj.get("providerType"),
            "provisioningState": obj.get("provisioningState"),
            "resourceGroupName": obj.get("resourceGroupName"),
            "resourceHydrationAccounts": AzureResourceHydrationAccountList.from_dict(obj["resourceHydrationAccounts"]) if obj.get("resourceHydrationAccounts") is not None else None,
            "resourceLocation": obj.get("resourceLocation"),
            "resourceTags": obj.get("resourceTags"),
            "resourceTypes": ResourceTypeList.from_dict(obj["resourceTypes"]) if obj.get("resourceTypes") is not None else None,
            "routingResourceManagerType": obj.get("routingResourceManagerType"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj



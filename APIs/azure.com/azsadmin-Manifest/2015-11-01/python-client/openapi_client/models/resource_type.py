# coding: utf-8

"""
    SubscriptionsManagementClient

    The Admin Subscriptions Management Client.

    The version of the OpenAPI document: 2015-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_profile_list import ApiProfileList
from openapi_client.models.authorization_action_mapping_list import AuthorizationActionMappingList
from openapi_client.models.linked_access_check_list import LinkedAccessCheckList
from openapi_client.models.linked_notification_rule_list import LinkedNotificationRuleList
from openapi_client.models.linked_operation_rule_list import LinkedOperationRuleList
from openapi_client.models.marketplace_type import MarketplaceType
from openapi_client.models.resource_deletion_policy import ResourceDeletionPolicy
from openapi_client.models.resource_provider_endpoint_list import ResourceProviderEndpointList
from openapi_client.models.routing_type import RoutingType
from typing import Optional, Set
from typing_extensions import Self

class ResourceType(BaseModel):
    """
    The resource type definition.
    """ # noqa: E501
    allowed_unauthorized_actions: Optional[List[StrictStr]] = Field(default=None, description="The allowed unauthorized actions.", alias="allowedUnauthorizedActions")
    api_profiles: Optional[ApiProfileList] = Field(default=None, alias="apiProfiles")
    authorization_action_mappings: Optional[AuthorizationActionMappingList] = Field(default=None, alias="authorizationActionMappings")
    endpoints: Optional[ResourceProviderEndpointList] = None
    in_global_location: Optional[StrictBool] = Field(default=None, description="A value indicating whether the resource type is in global location.", alias="inGlobalLocation")
    linked_access_checks: Optional[LinkedAccessCheckList] = Field(default=None, alias="linkedAccessChecks")
    linked_notification_rules: Optional[LinkedNotificationRuleList] = Field(default=None, alias="linkedNotificationRules")
    linked_operation_rules: Optional[LinkedOperationRuleList] = Field(default=None, alias="linkedOperationRules")
    marketplace_type: Optional[MarketplaceType] = Field(default=None, alias="marketplaceType")
    metered_resource_ids: Optional[List[StrictStr]] = Field(default=None, description="The metered resource ids.", alias="meteredResourceIds")
    name: Optional[StrictStr] = Field(default=None, description="The name.")
    resource_deletion_policy: Optional[ResourceDeletionPolicy] = Field(default=None, alias="resourceDeletionPolicy")
    routing_type: Optional[RoutingType] = Field(default=None, alias="routingType")
    __properties: ClassVar[List[str]] = ["allowedUnauthorizedActions", "apiProfiles", "authorizationActionMappings", "endpoints", "inGlobalLocation", "linkedAccessChecks", "linkedNotificationRules", "linkedOperationRules", "marketplaceType", "meteredResourceIds", "name", "resourceDeletionPolicy", "routingType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_profiles
        if self.api_profiles:
            _dict['apiProfiles'] = self.api_profiles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorization_action_mappings
        if self.authorization_action_mappings:
            _dict['authorizationActionMappings'] = self.authorization_action_mappings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of endpoints
        if self.endpoints:
            _dict['endpoints'] = self.endpoints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_access_checks
        if self.linked_access_checks:
            _dict['linkedAccessChecks'] = self.linked_access_checks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_notification_rules
        if self.linked_notification_rules:
            _dict['linkedNotificationRules'] = self.linked_notification_rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_operation_rules
        if self.linked_operation_rules:
            _dict['linkedOperationRules'] = self.linked_operation_rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedUnauthorizedActions": obj.get("allowedUnauthorizedActions"),
            "apiProfiles": ApiProfileList.from_dict(obj["apiProfiles"]) if obj.get("apiProfiles") is not None else None,
            "authorizationActionMappings": AuthorizationActionMappingList.from_dict(obj["authorizationActionMappings"]) if obj.get("authorizationActionMappings") is not None else None,
            "endpoints": ResourceProviderEndpointList.from_dict(obj["endpoints"]) if obj.get("endpoints") is not None else None,
            "inGlobalLocation": obj.get("inGlobalLocation"),
            "linkedAccessChecks": LinkedAccessCheckList.from_dict(obj["linkedAccessChecks"]) if obj.get("linkedAccessChecks") is not None else None,
            "linkedNotificationRules": LinkedNotificationRuleList.from_dict(obj["linkedNotificationRules"]) if obj.get("linkedNotificationRules") is not None else None,
            "linkedOperationRules": LinkedOperationRuleList.from_dict(obj["linkedOperationRules"]) if obj.get("linkedOperationRules") is not None else None,
            "marketplaceType": obj.get("marketplaceType"),
            "meteredResourceIds": obj.get("meteredResourceIds"),
            "name": obj.get("name"),
            "resourceDeletionPolicy": obj.get("resourceDeletionPolicy"),
            "routingType": obj.get("routingType")
        })
        return _obj



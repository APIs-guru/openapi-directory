# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BGPCommunity(BaseModel):
    """
    Contains bgp community information offered in Service Community resources.
    """ # noqa: E501
    community_name: Optional[StrictStr] = Field(default=None, description="The name of the bgp community. e.g. Skype.", alias="communityName")
    community_prefixes: Optional[List[StrictStr]] = Field(default=None, description="The prefixes that the bgp community contains.", alias="communityPrefixes")
    community_value: Optional[StrictStr] = Field(default=None, description="The value of the bgp community. For more information: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.", alias="communityValue")
    is_authorized_to_use: Optional[StrictBool] = Field(default=None, description="Customer is authorized to use bgp community or not.", alias="isAuthorizedToUse")
    service_group: Optional[StrictStr] = Field(default=None, description="The service group of the bgp community contains.", alias="serviceGroup")
    service_supported_region: Optional[StrictStr] = Field(default=None, description="The region which the service support. e.g. For O365, region is Global.", alias="serviceSupportedRegion")
    __properties: ClassVar[List[str]] = ["communityName", "communityPrefixes", "communityValue", "isAuthorizedToUse", "serviceGroup", "serviceSupportedRegion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BGPCommunity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BGPCommunity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "communityName": obj.get("communityName"),
            "communityPrefixes": obj.get("communityPrefixes"),
            "communityValue": obj.get("communityValue"),
            "isAuthorizedToUse": obj.get("isAuthorizedToUse"),
            "serviceGroup": obj.get("serviceGroup"),
            "serviceSupportedRegion": obj.get("serviceSupportedRegion")
        })
        return _obj



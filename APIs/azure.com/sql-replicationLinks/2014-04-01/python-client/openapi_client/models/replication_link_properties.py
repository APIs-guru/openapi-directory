# coding: utf-8

"""
    Azure SQL Database replication links

    Provides read, delete, and failover functionality for Azure SQL Database replication links.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReplicationLinkProperties(BaseModel):
    """
    Represents the properties of a database replication link.
    """ # noqa: E501
    is_termination_allowed: Optional[StrictBool] = Field(default=None, description="Legacy value indicating whether termination is allowed.  Currently always returns true.", alias="isTerminationAllowed")
    partner_database: Optional[StrictStr] = Field(default=None, description="The name of the partner database.", alias="partnerDatabase")
    partner_location: Optional[StrictStr] = Field(default=None, description="The Azure Region of the partner database.", alias="partnerLocation")
    partner_role: Optional[StrictStr] = Field(default=None, description="The role of the partner database in the replication link.", alias="partnerRole")
    partner_server: Optional[StrictStr] = Field(default=None, description="The name of the server hosting the partner database.", alias="partnerServer")
    percent_complete: Optional[StrictInt] = Field(default=None, description="The percentage of seeding complete for the replication link.", alias="percentComplete")
    replication_mode: Optional[StrictStr] = Field(default=None, description="Replication mode of this replication link.", alias="replicationMode")
    replication_state: Optional[StrictStr] = Field(default=None, description="The replication state for the replication link.", alias="replicationState")
    role: Optional[StrictStr] = Field(default=None, description="The role of the database in the replication link.")
    start_time: Optional[datetime] = Field(default=None, description="The start time for the replication link.", alias="startTime")
    __properties: ClassVar[List[str]] = ["isTerminationAllowed", "partnerDatabase", "partnerLocation", "partnerRole", "partnerServer", "percentComplete", "replicationMode", "replicationState", "role", "startTime"]

    @field_validator('partner_role')
    def partner_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Primary', 'Secondary', 'NonReadableSecondary', 'Source', 'Copy']):
            raise ValueError("must be one of enum values ('Primary', 'Secondary', 'NonReadableSecondary', 'Source', 'Copy')")
        return value

    @field_validator('replication_state')
    def replication_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING', 'SEEDING', 'CATCH_UP', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('PENDING', 'SEEDING', 'CATCH_UP', 'SUSPENDED')")
        return value

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Primary', 'Secondary', 'NonReadableSecondary', 'Source', 'Copy']):
            raise ValueError("must be one of enum values ('Primary', 'Secondary', 'NonReadableSecondary', 'Source', 'Copy')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationLinkProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_termination_allowed",
            "partner_database",
            "partner_location",
            "partner_role",
            "partner_server",
            "percent_complete",
            "replication_mode",
            "replication_state",
            "role",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationLinkProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isTerminationAllowed": obj.get("isTerminationAllowed"),
            "partnerDatabase": obj.get("partnerDatabase"),
            "partnerLocation": obj.get("partnerLocation"),
            "partnerRole": obj.get("partnerRole"),
            "partnerServer": obj.get("partnerServer"),
            "percentComplete": obj.get("percentComplete"),
            "replicationMode": obj.get("replicationMode"),
            "replicationState": obj.get("replicationState"),
            "role": obj.get("role"),
            "startTime": obj.get("startTime")
        })
        return _obj



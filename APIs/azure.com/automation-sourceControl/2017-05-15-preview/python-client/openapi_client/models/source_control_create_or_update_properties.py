# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-05-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.source_control_security_token_properties import SourceControlSecurityTokenProperties
from typing import Optional, Set
from typing_extensions import Self

class SourceControlCreateOrUpdateProperties(BaseModel):
    """
    The properties of the create source control operation.
    """ # noqa: E501
    auto_sync: Optional[StrictBool] = Field(default=None, description="The auto async of the source control. Default is false.", alias="autoSync")
    branch: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The repo branch of the source control. Include branch as empty string for VsoTfvc.")
    description: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="The user description of the source control.")
    folder_path: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The folder path of the source control. Path must be relative.", alias="folderPath")
    publish_runbook: Optional[StrictBool] = Field(default=None, description="The auto publish of the source control. Default is true.", alias="publishRunbook")
    repo_url: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The repo url of the source control.", alias="repoUrl")
    security_token: Optional[SourceControlSecurityTokenProperties] = Field(default=None, alias="securityToken")
    source_type: Optional[StrictStr] = Field(default=None, description="The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.", alias="sourceType")
    __properties: ClassVar[List[str]] = ["autoSync", "branch", "description", "folderPath", "publishRunbook", "repoUrl", "securityToken", "sourceType"]

    @field_validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VsoGit', 'VsoTfvc', 'GitHub']):
            raise ValueError("must be one of enum values ('VsoGit', 'VsoTfvc', 'GitHub')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceControlCreateOrUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of security_token
        if self.security_token:
            _dict['securityToken'] = self.security_token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceControlCreateOrUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoSync": obj.get("autoSync"),
            "branch": obj.get("branch"),
            "description": obj.get("description"),
            "folderPath": obj.get("folderPath"),
            "publishRunbook": obj.get("publishRunbook"),
            "repoUrl": obj.get("repoUrl"),
            "securityToken": SourceControlSecurityTokenProperties.from_dict(obj["securityToken"]) if obj.get("securityToken") is not None else None,
            "sourceType": obj.get("sourceType")
        })
        return _obj



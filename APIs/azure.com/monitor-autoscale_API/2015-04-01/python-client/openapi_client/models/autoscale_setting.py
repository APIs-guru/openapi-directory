# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.autoscale_notification import AutoscaleNotification
from openapi_client.models.autoscale_profile import AutoscaleProfile
from typing import Optional, Set
from typing_extensions import Self

class AutoscaleSetting(BaseModel):
    """
    A setting that contains all of the configuration for the automatic scaling of a resource.
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=True, description="the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'true'.")
    name: Optional[StrictStr] = Field(default=None, description="the name of the autoscale setting.")
    notifications: Optional[List[AutoscaleNotification]] = Field(default=None, description="the collection of notifications.")
    profiles: Annotated[List[AutoscaleProfile], Field(max_length=20)] = Field(description="the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.")
    target_resource_uri: Optional[StrictStr] = Field(default=None, description="the resource identifier of the resource that the autoscale setting should be added to.", alias="targetResourceUri")
    __properties: ClassVar[List[str]] = ["enabled", "name", "notifications", "profiles", "targetResourceUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoscaleSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item_notifications in self.notifications:
                if _item_notifications:
                    _items.append(_item_notifications.to_dict())
            _dict['notifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in profiles (list)
        _items = []
        if self.profiles:
            for _item_profiles in self.profiles:
                if _item_profiles:
                    _items.append(_item_profiles.to_dict())
            _dict['profiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoscaleSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "name": obj.get("name"),
            "notifications": [AutoscaleNotification.from_dict(_item) for _item in obj["notifications"]] if obj.get("notifications") is not None else None,
            "profiles": [AutoscaleProfile.from_dict(_item) for _item in obj["profiles"]] if obj.get("profiles") is not None else None,
            "targetResourceUri": obj.get("targetResourceUri")
        })
        return _obj



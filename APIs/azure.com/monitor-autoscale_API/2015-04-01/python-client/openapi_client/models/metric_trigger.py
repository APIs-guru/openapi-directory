# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class MetricTrigger(BaseModel):
    """
    The trigger that results in a scaling action.
    """ # noqa: E501
    metric_name: StrictStr = Field(description="the name of the metric that defines what the rule monitors.", alias="metricName")
    metric_resource_uri: StrictStr = Field(description="the resource identifier of the resource the rule monitors.", alias="metricResourceUri")
    operator: StrictStr = Field(description="the operator that is used to compare the metric data and the threshold.")
    statistic: StrictStr = Field(description="the metric statistic type. How the metrics from multiple instances are combined.")
    threshold: Union[StrictFloat, StrictInt] = Field(description="the threshold of the metric that triggers the scale action.")
    time_aggregation: StrictStr = Field(description="time aggregation type. How the data that is collected should be combined over time. The default value is Average.", alias="timeAggregation")
    time_grain: StrictStr = Field(description="the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.", alias="timeGrain")
    time_window: StrictStr = Field(description="the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.", alias="timeWindow")
    __properties: ClassVar[List[str]] = ["metricName", "metricResourceUri", "operator", "statistic", "threshold", "timeAggregation", "timeGrain", "timeWindow"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Equals', 'NotEquals', 'GreaterThan', 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual']):
            raise ValueError("must be one of enum values ('Equals', 'NotEquals', 'GreaterThan', 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual')")
        return value

    @field_validator('statistic')
    def statistic_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Average', 'Min', 'Max', 'Sum']):
            raise ValueError("must be one of enum values ('Average', 'Min', 'Max', 'Sum')")
        return value

    @field_validator('time_aggregation')
    def time_aggregation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Average', 'Minimum', 'Maximum', 'Total', 'Count', 'Last']):
            raise ValueError("must be one of enum values ('Average', 'Minimum', 'Maximum', 'Total', 'Count', 'Last')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricTrigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricTrigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metricName": obj.get("metricName"),
            "metricResourceUri": obj.get("metricResourceUri"),
            "operator": obj.get("operator"),
            "statistic": obj.get("statistic"),
            "threshold": obj.get("threshold"),
            "timeAggregation": obj.get("timeAggregation"),
            "timeGrain": obj.get("timeGrain"),
            "timeWindow": obj.get("timeWindow")
        })
        return _obj



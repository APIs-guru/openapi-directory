# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.autoscale_setting_resource_collection import AutoscaleSettingResourceCollection

class TestAutoscaleSettingResourceCollection(unittest.TestCase):
    """AutoscaleSettingResourceCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AutoscaleSettingResourceCollection:
        """Test AutoscaleSettingResourceCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AutoscaleSettingResourceCollection`
        """
        model = AutoscaleSettingResourceCollection()
        if include_optional:
            return AutoscaleSettingResourceCollection(
                next_link = '',
                value = [
                    openapi_client.models.autoscale_setting_resource.AutoscaleSettingResource(
                        properties = openapi_client.models.autoscale_setting.AutoscaleSetting(
                            enabled = True, 
                            name = '', 
                            notifications = [
                                openapi_client.models.autoscale_notification.AutoscaleNotification(
                                    email = openapi_client.models.email_notification.EmailNotification(
                                        custom_emails = [
                                            ''
                                            ], 
                                        send_to_subscription_administrator = True, 
                                        send_to_subscription_co_administrators = True, ), 
                                    operation = 'Scale', 
                                    webhooks = [
                                        openapi_client.models.webhook_notification.WebhookNotification(
                                            service_uri = '', )
                                        ], )
                                ], 
                            profiles = [
                                openapi_client.models.autoscale_profile.AutoscaleProfile(
                                    capacity = openapi_client.models.scale_capacity.ScaleCapacity(
                                        default = '', 
                                        maximum = '', 
                                        minimum = '', ), 
                                    fixed_date = openapi_client.models.time_window.TimeWindow(
                                        end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        time_zone = '', ), 
                                    name = '', 
                                    recurrence = openapi_client.models.recurrence.Recurrence(
                                        frequency = 'None', 
                                        schedule = openapi_client.models.recurrent_schedule.RecurrentSchedule(
                                            days = [
                                                ''
                                                ], 
                                            hours = [
                                                56
                                                ], 
                                            minutes = [
                                                56
                                                ], 
                                            time_zone = '', ), ), 
                                    rules = [
                                        openapi_client.models.scale_rule.ScaleRule(
                                            metric_trigger = openapi_client.models.metric_trigger.MetricTrigger(
                                                metric_name = '', 
                                                metric_resource_uri = '', 
                                                operator = 'Equals', 
                                                statistic = 'Average', 
                                                threshold = 1.337, 
                                                time_aggregation = 'Average', 
                                                time_grain = '', 
                                                time_window = '', ), 
                                            scale_action = openapi_client.models.scale_action.ScaleAction(
                                                cooldown = '', 
                                                direction = 'None', 
                                                type = 'ChangeCount', 
                                                value = '1', ), )
                                        ], )
                                ], 
                            target_resource_uri = '', ), )
                    ]
            )
        else:
            return AutoscaleSettingResourceCollection(
                value = [
                    openapi_client.models.autoscale_setting_resource.AutoscaleSettingResource(
                        properties = openapi_client.models.autoscale_setting.AutoscaleSetting(
                            enabled = True, 
                            name = '', 
                            notifications = [
                                openapi_client.models.autoscale_notification.AutoscaleNotification(
                                    email = openapi_client.models.email_notification.EmailNotification(
                                        custom_emails = [
                                            ''
                                            ], 
                                        send_to_subscription_administrator = True, 
                                        send_to_subscription_co_administrators = True, ), 
                                    operation = 'Scale', 
                                    webhooks = [
                                        openapi_client.models.webhook_notification.WebhookNotification(
                                            service_uri = '', )
                                        ], )
                                ], 
                            profiles = [
                                openapi_client.models.autoscale_profile.AutoscaleProfile(
                                    capacity = openapi_client.models.scale_capacity.ScaleCapacity(
                                        default = '', 
                                        maximum = '', 
                                        minimum = '', ), 
                                    fixed_date = openapi_client.models.time_window.TimeWindow(
                                        end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        time_zone = '', ), 
                                    name = '', 
                                    recurrence = openapi_client.models.recurrence.Recurrence(
                                        frequency = 'None', 
                                        schedule = openapi_client.models.recurrent_schedule.RecurrentSchedule(
                                            days = [
                                                ''
                                                ], 
                                            hours = [
                                                56
                                                ], 
                                            minutes = [
                                                56
                                                ], 
                                            time_zone = '', ), ), 
                                    rules = [
                                        openapi_client.models.scale_rule.ScaleRule(
                                            metric_trigger = openapi_client.models.metric_trigger.MetricTrigger(
                                                metric_name = '', 
                                                metric_resource_uri = '', 
                                                operator = 'Equals', 
                                                statistic = 'Average', 
                                                threshold = 1.337, 
                                                time_aggregation = 'Average', 
                                                time_grain = '', 
                                                time_window = '', ), 
                                            scale_action = openapi_client.models.scale_action.ScaleAction(
                                                cooldown = '', 
                                                direction = 'None', 
                                                type = 'ChangeCount', 
                                                value = '1', ), )
                                        ], )
                                ], 
                            target_resource_uri = '', ), )
                    ],
        )
        """

    def testAutoscaleSettingResourceCollection(self):
        """Test AutoscaleSettingResourceCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.alert import Alert
from openapi_client.models.alert_list import AlertList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AlertsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def alerts_get_resource_group_level_alerts(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Alert:
        """alerts_get_resource_group_level_alerts

        Get an alert that is associated a resource group or a resource in a resource group

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_resource_group_level_alerts_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_resource_group_level_alerts_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Alert]:
        """alerts_get_resource_group_level_alerts

        Get an alert that is associated a resource group or a resource in a resource group

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_resource_group_level_alerts_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_resource_group_level_alerts_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_get_resource_group_level_alerts

        Get an alert that is associated a resource group or a resource in a resource group

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_resource_group_level_alerts_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_resource_group_level_alerts_serialize(
        self,
        api_version,
        subscription_id,
        asc_location,
        alert_name,
        resource_group_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if asc_location is not None:
            _path_params['ascLocation'] = asc_location
        if alert_name is not None:
            _path_params['alertName'] = alert_name
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_subscription_level_alert(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Alert:
        """alerts_get_subscription_level_alert

        Get an alert that is associated with a subscription

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_subscription_level_alert_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_subscription_level_alert_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Alert]:
        """alerts_get_subscription_level_alert

        Get an alert that is associated with a subscription

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_subscription_level_alert_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_subscription_level_alert_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_get_subscription_level_alert

        Get an alert that is associated with a subscription

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_subscription_level_alert_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_subscription_level_alert_serialize(
        self,
        api_version,
        subscription_id,
        asc_location,
        alert_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if asc_location is not None:
            _path_params['ascLocation'] = asc_location
        if alert_name is not None:
            _path_params['alertName'] = alert_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_list(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertList:
        """alerts_list

        List all the alerts that are associated with the subscription

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertList]:
        """alerts_list

        List all the alerts that are associated with the subscription

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_list

        List all the alerts that are associated with the subscription

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_list_serialize(
        self,
        api_version,
        subscription_id,
        filter,
        select,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_list_by_resource_group(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertList:
        """alerts_list_by_resource_group

        List all the alerts that are associated with the resource group

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_by_resource_group_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_list_by_resource_group_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertList]:
        """alerts_list_by_resource_group

        List all the alerts that are associated with the resource group

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_by_resource_group_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_list_by_resource_group_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_list_by_resource_group

        List all the alerts that are associated with the resource group

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_by_resource_group_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_list_by_resource_group_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        filter,
        select,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_list_resource_group_level_alerts_by_region(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertList:
        """alerts_list_resource_group_level_alerts_by_region

        List all the alerts that are associated with the resource group that are stored in a specific location

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_resource_group_level_alerts_by_region_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            resource_group_name=resource_group_name,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_list_resource_group_level_alerts_by_region_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertList]:
        """alerts_list_resource_group_level_alerts_by_region

        List all the alerts that are associated with the resource group that are stored in a specific location

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_resource_group_level_alerts_by_region_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            resource_group_name=resource_group_name,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_list_resource_group_level_alerts_by_region_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_list_resource_group_level_alerts_by_region

        List all the alerts that are associated with the resource group that are stored in a specific location

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_resource_group_level_alerts_by_region_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            resource_group_name=resource_group_name,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_list_resource_group_level_alerts_by_region_serialize(
        self,
        api_version,
        subscription_id,
        asc_location,
        resource_group_name,
        filter,
        select,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if asc_location is not None:
            _path_params['ascLocation'] = asc_location
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_list_subscription_level_alerts_by_region(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertList:
        """alerts_list_subscription_level_alerts_by_region

        List all the alerts that are associated with the subscription that are stored in a specific location

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_subscription_level_alerts_by_region_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_list_subscription_level_alerts_by_region_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertList]:
        """alerts_list_subscription_level_alerts_by_region

        List all the alerts that are associated with the subscription that are stored in a specific location

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_subscription_level_alerts_by_region_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_list_subscription_level_alerts_by_region_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData select. Optional.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="OData expand. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_list_subscription_level_alerts_by_region

        List all the alerts that are associated with the subscription that are stored in a specific location

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param select: OData select. Optional.
        :type select: str
        :param expand: OData expand. Optional.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_list_subscription_level_alerts_by_region_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            filter=filter,
            select=select,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_list_subscription_level_alerts_by_region_serialize(
        self,
        api_version,
        subscription_id,
        asc_location,
        filter,
        select,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if asc_location is not None:
            _path_params['ascLocation'] = asc_location
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_update_resource_group_level_alert_state(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        alert_update_action_type: Annotated[StrictStr, Field(description="Type of the action to do on the alert")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """alerts_update_resource_group_level_alert_state

        Update the alert's state

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param alert_update_action_type: Type of the action to do on the alert (required)
        :type alert_update_action_type: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_update_resource_group_level_alert_state_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            alert_update_action_type=alert_update_action_type,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_update_resource_group_level_alert_state_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        alert_update_action_type: Annotated[StrictStr, Field(description="Type of the action to do on the alert")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """alerts_update_resource_group_level_alert_state

        Update the alert's state

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param alert_update_action_type: Type of the action to do on the alert (required)
        :type alert_update_action_type: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_update_resource_group_level_alert_state_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            alert_update_action_type=alert_update_action_type,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_update_resource_group_level_alert_state_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        alert_update_action_type: Annotated[StrictStr, Field(description="Type of the action to do on the alert")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_update_resource_group_level_alert_state

        Update the alert's state

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param alert_update_action_type: Type of the action to do on the alert (required)
        :type alert_update_action_type: str
        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_update_resource_group_level_alert_state_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            alert_update_action_type=alert_update_action_type,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_update_resource_group_level_alert_state_serialize(
        self,
        api_version,
        subscription_id,
        asc_location,
        alert_name,
        alert_update_action_type,
        resource_group_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if asc_location is not None:
            _path_params['ascLocation'] = asc_location
        if alert_name is not None:
            _path_params['alertName'] = alert_name
        if alert_update_action_type is not None:
            _path_params['alertUpdateActionType'] = alert_update_action_type
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/{alertUpdateActionType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_update_subscription_level_alert_state(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        alert_update_action_type: Annotated[StrictStr, Field(description="Type of the action to do on the alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """alerts_update_subscription_level_alert_state

        Update the alert's state

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param alert_update_action_type: Type of the action to do on the alert (required)
        :type alert_update_action_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_update_subscription_level_alert_state_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            alert_update_action_type=alert_update_action_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_update_subscription_level_alert_state_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        alert_update_action_type: Annotated[StrictStr, Field(description="Type of the action to do on the alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """alerts_update_subscription_level_alert_state

        Update the alert's state

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param alert_update_action_type: Type of the action to do on the alert (required)
        :type alert_update_action_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_update_subscription_level_alert_state_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            alert_update_action_type=alert_update_action_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_update_subscription_level_alert_state_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version for the operation")],
        subscription_id: Annotated[str, Field(strict=True, description="Azure subscription ID")],
        asc_location: Annotated[StrictStr, Field(description="The location where ASC stores the data of the subscription. can be retrieved from Get locations")],
        alert_name: Annotated[StrictStr, Field(description="Name of the alert object")],
        alert_update_action_type: Annotated[StrictStr, Field(description="Type of the action to do on the alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_update_subscription_level_alert_state

        Update the alert's state

        :param api_version: API version for the operation (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID (required)
        :type subscription_id: str
        :param asc_location: The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
        :type asc_location: str
        :param alert_name: Name of the alert object (required)
        :type alert_name: str
        :param alert_update_action_type: Type of the action to do on the alert (required)
        :type alert_update_action_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_update_subscription_level_alert_state_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            asc_location=asc_location,
            alert_name=alert_name,
            alert_update_action_type=alert_update_action_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_update_subscription_level_alert_state_serialize(
        self,
        api_version,
        subscription_id,
        asc_location,
        alert_name,
        alert_update_action_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if asc_location is not None:
            _path_params['ascLocation'] = asc_location
        if alert_name is not None:
            _path_params['alertName'] = alert_name
        if alert_update_action_type is not None:
            _path_params['alertUpdateActionType'] = alert_update_action_type
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/{alertUpdateActionType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



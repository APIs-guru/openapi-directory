# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.topology_single_resource_child import TopologySingleResourceChild
from openapi_client.models.topology_single_resource_parent import TopologySingleResourceParent
from typing import Optional, Set
from typing_extensions import Self

class TopologySingleResource(BaseModel):
    """
    TopologySingleResource
    """ # noqa: E501
    children: Optional[List[TopologySingleResourceChild]] = Field(default=None, description="Azure resources connected to this resource which are in lower level in the topology view")
    location: Optional[StrictStr] = Field(default=None, description="The location of this resource")
    network_zones: Optional[StrictStr] = Field(default=None, description="Indicates the resource connectivity level to the Internet (InternetFacing, Internal ,etc.)", alias="networkZones")
    parents: Optional[List[TopologySingleResourceParent]] = Field(default=None, description="Azure resources connected to this resource which are in higher level in the topology view")
    recommendations_exist: Optional[StrictBool] = Field(default=None, description="Indicates if the resource has security recommendations", alias="recommendationsExist")
    resource_id: Optional[StrictStr] = Field(default=None, description="Azure resource id", alias="resourceId")
    severity: Optional[StrictStr] = Field(default=None, description="The security severity of the resource")
    topology_score: Optional[StrictInt] = Field(default=None, description="Score of the resource based on its security severity", alias="topologyScore")
    __properties: ClassVar[List[str]] = ["children", "location", "networkZones", "parents", "recommendationsExist", "resourceId", "severity", "topologyScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TopologySingleResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "children",
            "location",
            "network_zones",
            "parents",
            "recommendations_exist",
            "resource_id",
            "severity",
            "topology_score",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parents (list)
        _items = []
        if self.parents:
            for _item_parents in self.parents:
                if _item_parents:
                    _items.append(_item_parents.to_dict())
            _dict['parents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TopologySingleResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "children": [TopologySingleResourceChild.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "location": obj.get("location"),
            "networkZones": obj.get("networkZones"),
            "parents": [TopologySingleResourceParent.from_dict(_item) for _item in obj["parents"]] if obj.get("parents") is not None else None,
            "recommendationsExist": obj.get("recommendationsExist"),
            "resourceId": obj.get("resourceId"),
            "severity": obj.get("severity"),
            "topologyScore": obj.get("topologyScore")
        })
        return _obj



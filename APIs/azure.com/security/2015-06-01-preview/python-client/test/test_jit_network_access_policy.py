# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.jit_network_access_policy import JitNetworkAccessPolicy

class TestJitNetworkAccessPolicy(unittest.TestCase):
    """JitNetworkAccessPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JitNetworkAccessPolicy:
        """Test JitNetworkAccessPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JitNetworkAccessPolicy`
        """
        model = JitNetworkAccessPolicy()
        if include_optional:
            return JitNetworkAccessPolicy(
                properties = openapi_client.models.jit_network_access_policy_properties.JitNetworkAccessPolicyProperties(
                    provisioning_state = '', 
                    requests = [
                        openapi_client.models.jit_network_access_request.JitNetworkAccessRequest(
                            requestor = '', 
                            start_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            virtual_machines = [
                                openapi_client.models.jit_network_access_request_virtual_machine.JitNetworkAccessRequestVirtualMachine(
                                    id = '', 
                                    ports = [
                                        openapi_client.models.jit_network_access_request_port.JitNetworkAccessRequestPort(
                                            allowed_source_address_prefix = '', 
                                            allowed_source_address_prefixes = [
                                                ''
                                                ], 
                                            end_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            number = 0, 
                                            status = 'Revoked', 
                                            status_reason = 'Expired', )
                                        ], )
                                ], )
                        ], 
                    virtual_machines = [
                        openapi_client.models.jit_network_access_policy_virtual_machine.JitNetworkAccessPolicyVirtualMachine(
                            id = '', 
                            ports = [
                                openapi_client.models.jit_network_access_port_rule.JitNetworkAccessPortRule(
                                    allowed_source_address_prefix = '', 
                                    max_request_access_duration = '', 
                                    number = 0, 
                                    protocol = 'TCP', )
                                ], )
                        ], ),
                id = '',
                name = '',
                type = '',
                kind = '',
                location = ''
            )
        else:
            return JitNetworkAccessPolicy(
                properties = openapi_client.models.jit_network_access_policy_properties.JitNetworkAccessPolicyProperties(
                    provisioning_state = '', 
                    requests = [
                        openapi_client.models.jit_network_access_request.JitNetworkAccessRequest(
                            requestor = '', 
                            start_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            virtual_machines = [
                                openapi_client.models.jit_network_access_request_virtual_machine.JitNetworkAccessRequestVirtualMachine(
                                    id = '', 
                                    ports = [
                                        openapi_client.models.jit_network_access_request_port.JitNetworkAccessRequestPort(
                                            allowed_source_address_prefix = '', 
                                            allowed_source_address_prefixes = [
                                                ''
                                                ], 
                                            end_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            number = 0, 
                                            status = 'Revoked', 
                                            status_reason = 'Expired', )
                                        ], )
                                ], )
                        ], 
                    virtual_machines = [
                        openapi_client.models.jit_network_access_policy_virtual_machine.JitNetworkAccessPolicyVirtualMachine(
                            id = '', 
                            ports = [
                                openapi_client.models.jit_network_access_port_rule.JitNetworkAccessPortRule(
                                    allowed_source_address_prefix = '', 
                                    max_request_access_duration = '', 
                                    number = 0, 
                                    protocol = 'TCP', )
                                ], )
                        ], ),
        )
        """

    def testJitNetworkAccessPolicy(self):
        """Test JitNetworkAccessPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

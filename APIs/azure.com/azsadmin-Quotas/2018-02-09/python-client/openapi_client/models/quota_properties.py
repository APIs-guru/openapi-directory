# coding: utf-8

"""
    Compute Admin Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class QuotaProperties(BaseModel):
    """
    Properties for a Compute Quota
    """ # noqa: E501
    availability_set_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of availability sets allowed.", alias="availabilitySetCount")
    cores_limit: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of cores allowed.", alias="coresLimit")
    max_allocation_premium_managed_disks_and_snapshots: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of managed disks and snapshots of type premium allowed.", alias="maxAllocationPremiumManagedDisksAndSnapshots")
    max_allocation_standard_managed_disks_and_snapshots: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of managed disks and snapshots of type standard allowed.", alias="maxAllocationStandardManagedDisksAndSnapshots")
    virtual_machine_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of virtual machines allowed.", alias="virtualMachineCount")
    vm_scale_set_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of scale sets allowed.", alias="vmScaleSetCount")
    __properties: ClassVar[List[str]] = ["availabilitySetCount", "coresLimit", "maxAllocationPremiumManagedDisksAndSnapshots", "maxAllocationStandardManagedDisksAndSnapshots", "virtualMachineCount", "vmScaleSetCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuotaProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuotaProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilitySetCount": obj.get("availabilitySetCount"),
            "coresLimit": obj.get("coresLimit"),
            "maxAllocationPremiumManagedDisksAndSnapshots": obj.get("maxAllocationPremiumManagedDisksAndSnapshots"),
            "maxAllocationStandardManagedDisksAndSnapshots": obj.get("maxAllocationStandardManagedDisksAndSnapshots"),
            "virtualMachineCount": obj.get("virtualMachineCount"),
            "vmScaleSetCount": obj.get("vmScaleSetCount")
        })
        return _obj



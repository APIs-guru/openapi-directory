# coding: utf-8

"""
    ResourceManagementClient

    Provides operations for working with resources and resource groups.

    The version of the OpenAPI document: 2017-05-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.debug_setting import DebugSetting
from openapi_client.models.dependency import Dependency
from openapi_client.models.parameters_link import ParametersLink
from openapi_client.models.provider import Provider
from openapi_client.models.template_link import TemplateLink
from typing import Optional, Set
from typing_extensions import Self

class DeploymentPropertiesExtended(BaseModel):
    """
    Deployment properties with additional details.
    """ # noqa: E501
    correlation_id: Optional[StrictStr] = Field(default=None, description="The correlation ID of the deployment.", alias="correlationId")
    debug_setting: Optional[DebugSetting] = Field(default=None, alias="debugSetting")
    dependencies: Optional[List[Dependency]] = Field(default=None, description="The list of deployment dependencies.")
    mode: Optional[StrictStr] = Field(default=None, description="The deployment mode. Possible values are Incremental and Complete.")
    outputs: Optional[Dict[str, Any]] = Field(default=None, description="Key/value pairs that represent deployment output.")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Deployment parameters. Use only one of Parameters or ParametersLink.")
    parameters_link: Optional[ParametersLink] = Field(default=None, alias="parametersLink")
    providers: Optional[List[Provider]] = Field(default=None, description="The list of resource providers needed for the deployment.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The state of the provisioning.", alias="provisioningState")
    template: Optional[Dict[str, Any]] = Field(default=None, description="The template content. Use only one of Template or TemplateLink.")
    template_link: Optional[TemplateLink] = Field(default=None, alias="templateLink")
    timestamp: Optional[datetime] = Field(default=None, description="The timestamp of the template deployment.")
    __properties: ClassVar[List[str]] = ["correlationId", "debugSetting", "dependencies", "mode", "outputs", "parameters", "parametersLink", "providers", "provisioningState", "template", "templateLink", "timestamp"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Incremental', 'Complete']):
            raise ValueError("must be one of enum values ('Incremental', 'Complete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentPropertiesExtended from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "correlation_id",
            "provisioning_state",
            "timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug_setting
        if self.debug_setting:
            _dict['debugSetting'] = self.debug_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item_dependencies in self.dependencies:
                if _item_dependencies:
                    _items.append(_item_dependencies.to_dict())
            _dict['dependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of parameters_link
        if self.parameters_link:
            _dict['parametersLink'] = self.parameters_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in providers (list)
        _items = []
        if self.providers:
            for _item_providers in self.providers:
                if _item_providers:
                    _items.append(_item_providers.to_dict())
            _dict['providers'] = _items
        # override the default output from pydantic by calling `to_dict()` of template_link
        if self.template_link:
            _dict['templateLink'] = self.template_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentPropertiesExtended from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "correlationId": obj.get("correlationId"),
            "debugSetting": DebugSetting.from_dict(obj["debugSetting"]) if obj.get("debugSetting") is not None else None,
            "dependencies": [Dependency.from_dict(_item) for _item in obj["dependencies"]] if obj.get("dependencies") is not None else None,
            "mode": obj.get("mode"),
            "outputs": obj.get("outputs"),
            "parameters": obj.get("parameters"),
            "parametersLink": ParametersLink.from_dict(obj["parametersLink"]) if obj.get("parametersLink") is not None else None,
            "providers": [Provider.from_dict(_item) for _item in obj["providers"]] if obj.get("providers") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "template": obj.get("template"),
            "templateLink": TemplateLink.from_dict(obj["templateLink"]) if obj.get("templateLink") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj



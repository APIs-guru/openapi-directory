# coding: utf-8

"""
    ResourceManagementClient

    Provides operations for working with resources and resource groups.

    The version of the OpenAPI document: 2018-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deployment_properties_extended import DeploymentPropertiesExtended

class TestDeploymentPropertiesExtended(unittest.TestCase):
    """DeploymentPropertiesExtended unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeploymentPropertiesExtended:
        """Test DeploymentPropertiesExtended
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeploymentPropertiesExtended`
        """
        model = DeploymentPropertiesExtended()
        if include_optional:
            return DeploymentPropertiesExtended(
                correlation_id = '',
                debug_setting = openapi_client.models.debug_setting.DebugSetting(
                    detail_level = '', ),
                dependencies = [
                    openapi_client.models.dependency.Dependency(
                        depends_on = [
                            openapi_client.models.basic_dependency.BasicDependency(
                                id = '', 
                                resource_name = '', 
                                resource_type = '', )
                            ], 
                        id = '', 
                        resource_name = '', 
                        resource_type = '', )
                    ],
                mode = 'Incremental',
                on_error_deployment = openapi_client.models.on_error_deployment_extended.OnErrorDeploymentExtended(
                    deployment_name = '', 
                    provisioning_state = '', 
                    type = 'LastSuccessful', ),
                outputs = openapi_client.models.outputs.outputs(),
                parameters = openapi_client.models.parameters.parameters(),
                parameters_link = openapi_client.models.parameters_link.ParametersLink(
                    content_version = '', 
                    uri = '', ),
                providers = [
                    openapi_client.models.provider.Provider(
                        id = '', 
                        namespace = '', 
                        registration_state = '', 
                        resource_types = [
                            openapi_client.models.provider_resource_type.ProviderResourceType(
                                aliases = [
                                    openapi_client.models.alias_type.AliasType(
                                        name = '', 
                                        paths = [
                                            openapi_client.models.alias_path_type.AliasPathType(
                                                api_versions = [
                                                    ''
                                                    ], 
                                                path = '', )
                                            ], )
                                    ], 
                                api_versions = [
                                    ''
                                    ], 
                                locations = [
                                    ''
                                    ], 
                                properties = {
                                    'key' : ''
                                    }, 
                                resource_type = '', )
                            ], )
                    ],
                provisioning_state = '',
                template = openapi_client.models.template.template(),
                template_link = openapi_client.models.template_link.TemplateLink(
                    content_version = '', 
                    uri = '', ),
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return DeploymentPropertiesExtended(
        )
        """

    def testDeploymentPropertiesExtended(self):
        """Test DeploymentPropertiesExtended"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

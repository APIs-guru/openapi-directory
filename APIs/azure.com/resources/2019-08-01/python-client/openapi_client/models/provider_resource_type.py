# coding: utf-8

"""
    ResourceManagementClient

    Provides operations for working with resources and resource groups.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alias_type import AliasType
from typing import Optional, Set
from typing_extensions import Self

class ProviderResourceType(BaseModel):
    """
    Resource type managed by the resource provider.
    """ # noqa: E501
    aliases: Optional[List[AliasType]] = Field(default=None, description="The aliases that are supported by this resource type.")
    api_versions: Optional[List[StrictStr]] = Field(default=None, description="The API version.", alias="apiVersions")
    capabilities: Optional[StrictStr] = Field(default=None, description="The additional capabilities offered by this resource type.")
    locations: Optional[List[StrictStr]] = Field(default=None, description="The collection of locations where this resource type can be created.")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="The properties.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The resource type.", alias="resourceType")
    __properties: ClassVar[List[str]] = ["aliases", "apiVersions", "capabilities", "locations", "properties", "resourceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProviderResourceType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aliases (list)
        _items = []
        if self.aliases:
            for _item_aliases in self.aliases:
                if _item_aliases:
                    _items.append(_item_aliases.to_dict())
            _dict['aliases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProviderResourceType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aliases": [AliasType.from_dict(_item) for _item in obj["aliases"]] if obj.get("aliases") is not None else None,
            "apiVersions": obj.get("apiVersions"),
            "capabilities": obj.get("capabilities"),
            "locations": obj.get("locations"),
            "properties": obj.get("properties"),
            "resourceType": obj.get("resourceType")
        })
        return _obj



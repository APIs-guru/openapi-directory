# coding: utf-8

"""
    ResourceManagementClient

    Provides operations for working with resources and resource groups.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.what_if_property_change import WhatIfPropertyChange
from typing import Optional, Set
from typing_extensions import Self

class WhatIfChange(BaseModel):
    """
    Information about a single resource change predicted by What-If operation.
    """ # noqa: E501
    after: Optional[Dict[str, Any]] = Field(default=None, description="The predicted snapshot of the resource after the deployment is executed.")
    before: Optional[Dict[str, Any]] = Field(default=None, description="The snapshot of the resource before the deployment is executed.")
    change_type: StrictStr = Field(description="Type of change that will be made to the resource when the deployment is executed.", alias="changeType")
    delta: Optional[List[WhatIfPropertyChange]] = Field(default=None, description="The predicted changes to resource properties.")
    resource_id: StrictStr = Field(description="Resource ID", alias="resourceId")
    __properties: ClassVar[List[str]] = ["after", "before", "changeType", "delta", "resourceId"]

    @field_validator('change_type')
    def change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Create', 'Delete', 'Ignore', 'Deploy', 'NoChange', 'Modify']):
            raise ValueError("must be one of enum values ('Create', 'Delete', 'Ignore', 'Deploy', 'NoChange', 'Modify')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WhatIfChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in delta (list)
        _items = []
        if self.delta:
            for _item_delta in self.delta:
                if _item_delta:
                    _items.append(_item_delta.to_dict())
            _dict['delta'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WhatIfChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "after": obj.get("after"),
            "before": obj.get("before"),
            "changeType": obj.get("changeType"),
            "delta": [WhatIfPropertyChange.from_dict(_item) for _item in obj["delta"]] if obj.get("delta") is not None else None,
            "resourceId": obj.get("resourceId")
        })
        return _obj



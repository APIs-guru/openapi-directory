# coding: utf-8

"""
    ResourceManagementClient

    Provides operations for working with resources and resource groups.

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.generic_resource import GenericResource

class TestGenericResource(unittest.TestCase):
    """GenericResource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GenericResource:
        """Test GenericResource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GenericResource`
        """
        model = GenericResource()
        if include_optional:
            return GenericResource(
                identity = openapi_client.models.identity.Identity(
                    principal_id = '', 
                    tenant_id = '', 
                    type = 'SystemAssigned', 
                    user_assigned_identities = {
                        'key' : openapi_client.models.identity_user_assigned_identities_value.Identity_userAssignedIdentities_value(
                            client_id = '', 
                            principal_id = '', )
                        }, ),
                kind = 'g',
                managed_by = '',
                plan = openapi_client.models.plan.Plan(
                    name = '', 
                    product = '', 
                    promotion_code = '', 
                    publisher = '', 
                    version = '', ),
                properties = None,
                sku = openapi_client.models.sku.Sku(
                    capacity = 56, 
                    family = '', 
                    model = '', 
                    name = '', 
                    size = '', 
                    tier = '', ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return GenericResource(
        )
        """

    def testGenericResource(self):
        """Test GenericResource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

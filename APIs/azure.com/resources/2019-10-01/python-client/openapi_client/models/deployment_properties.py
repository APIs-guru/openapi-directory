# coding: utf-8

"""
    ResourceManagementClient

    Provides operations for working with resources and resource groups.

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.debug_setting import DebugSetting
from openapi_client.models.on_error_deployment import OnErrorDeployment
from openapi_client.models.parameters_link import ParametersLink
from openapi_client.models.template_link import TemplateLink
from typing import Optional, Set
from typing_extensions import Self

class DeploymentProperties(BaseModel):
    """
    Deployment properties.
    """ # noqa: E501
    debug_setting: Optional[DebugSetting] = Field(default=None, alias="debugSetting")
    mode: StrictStr = Field(description="The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.")
    on_error_deployment: Optional[OnErrorDeployment] = Field(default=None, alias="onErrorDeployment")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.")
    parameters_link: Optional[ParametersLink] = Field(default=None, alias="parametersLink")
    template: Optional[Dict[str, Any]] = Field(default=None, description="The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.")
    template_link: Optional[TemplateLink] = Field(default=None, alias="templateLink")
    __properties: ClassVar[List[str]] = ["debugSetting", "mode", "onErrorDeployment", "parameters", "parametersLink", "template", "templateLink"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Incremental', 'Complete']):
            raise ValueError("must be one of enum values ('Incremental', 'Complete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug_setting
        if self.debug_setting:
            _dict['debugSetting'] = self.debug_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_error_deployment
        if self.on_error_deployment:
            _dict['onErrorDeployment'] = self.on_error_deployment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters_link
        if self.parameters_link:
            _dict['parametersLink'] = self.parameters_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template_link
        if self.template_link:
            _dict['templateLink'] = self.template_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "debugSetting": DebugSetting.from_dict(obj["debugSetting"]) if obj.get("debugSetting") is not None else None,
            "mode": obj.get("mode"),
            "onErrorDeployment": OnErrorDeployment.from_dict(obj["onErrorDeployment"]) if obj.get("onErrorDeployment") is not None else None,
            "parameters": obj.get("parameters"),
            "parametersLink": ParametersLink.from_dict(obj["parametersLink"]) if obj.get("parametersLink") is not None else None,
            "template": obj.get("template"),
            "templateLink": TemplateLink.from_dict(obj["templateLink"]) if obj.get("templateLink") is not None else None
        })
        return _obj



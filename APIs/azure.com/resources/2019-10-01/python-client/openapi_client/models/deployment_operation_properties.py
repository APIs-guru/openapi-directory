# coding: utf-8

"""
    ResourceManagementClient

    Provides operations for working with resources and resource groups.

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_message import HttpMessage
from openapi_client.models.target_resource import TargetResource
from typing import Optional, Set
from typing_extensions import Self

class DeploymentOperationProperties(BaseModel):
    """
    Deployment operation properties.
    """ # noqa: E501
    duration: Optional[StrictStr] = Field(default=None, description="The duration of the operation.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The state of the provisioning.", alias="provisioningState")
    request: Optional[HttpMessage] = None
    response: Optional[HttpMessage] = None
    service_request_id: Optional[StrictStr] = Field(default=None, description="Deployment operation service request id.", alias="serviceRequestId")
    status_code: Optional[StrictStr] = Field(default=None, description="Operation status code.", alias="statusCode")
    status_message: Optional[Dict[str, Any]] = Field(default=None, description="Operation status message.", alias="statusMessage")
    target_resource: Optional[TargetResource] = Field(default=None, alias="targetResource")
    timestamp: Optional[datetime] = Field(default=None, description="The date and time of the operation.")
    __properties: ClassVar[List[str]] = ["duration", "provisioningState", "request", "response", "serviceRequestId", "statusCode", "statusMessage", "targetResource", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentOperationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "duration",
            "provisioning_state",
            "service_request_id",
            "status_code",
            "status_message",
            "timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_resource
        if self.target_resource:
            _dict['targetResource'] = self.target_resource.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentOperationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duration": obj.get("duration"),
            "provisioningState": obj.get("provisioningState"),
            "request": HttpMessage.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "response": HttpMessage.from_dict(obj["response"]) if obj.get("response") is not None else None,
            "serviceRequestId": obj.get("serviceRequestId"),
            "statusCode": obj.get("statusCode"),
            "statusMessage": obj.get("statusMessage"),
            "targetResource": TargetResource.from_dict(obj["targetResource"]) if obj.get("targetResource") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpressRouteLinkPropertiesFormat(BaseModel):
    """
    Properties specific to ExpressRouteLink resources.
    """ # noqa: E501
    admin_state: Optional[StrictStr] = Field(default=None, description="Administrative state of the physical port", alias="adminState")
    connector_type: Optional[StrictStr] = Field(default=None, description="Physical fiber port type.", alias="connectorType")
    interface_name: Optional[StrictStr] = Field(default=None, description="Name of Azure router interface.", alias="interfaceName")
    patch_panel_id: Optional[StrictStr] = Field(default=None, description="Mapping between physical port to patch panel port.", alias="patchPanelId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the ExpressRouteLink resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    rack_id: Optional[StrictStr] = Field(default=None, description="Mapping of physical patch panel to rack.", alias="rackId")
    router_name: Optional[StrictStr] = Field(default=None, description="Name of Azure router associated with physical port.", alias="routerName")
    __properties: ClassVar[List[str]] = ["adminState", "connectorType", "interfaceName", "patchPanelId", "provisioningState", "rackId", "routerName"]

    @field_validator('admin_state')
    def admin_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('connector_type')
    def connector_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LC', 'SC']):
            raise ValueError("must be one of enum values ('LC', 'SC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpressRouteLinkPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connector_type",
            "interface_name",
            "patch_panel_id",
            "provisioning_state",
            "rack_id",
            "router_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpressRouteLinkPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminState": obj.get("adminState"),
            "connectorType": obj.get("connectorType"),
            "interfaceName": obj.get("interfaceName"),
            "patchPanelId": obj.get("patchPanelId"),
            "provisioningState": obj.get("provisioningState"),
            "rackId": obj.get("rackId"),
            "routerName": obj.get("routerName")
        })
        return _obj



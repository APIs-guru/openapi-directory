# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.express_route_link import ExpressRouteLink
from openapi_client.models.express_route_port_properties_format_circuits_inner import ExpressRoutePortPropertiesFormatCircuitsInner
from typing import Optional, Set
from typing_extensions import Self

class ExpressRoutePortPropertiesFormat(BaseModel):
    """
    Properties specific to ExpressRoutePort resources.
    """ # noqa: E501
    allocation_date: Optional[StrictStr] = Field(default=None, description="Date of the physical port allocation to be used in Letter of Authorization.", alias="allocationDate")
    bandwidth_in_gbps: Optional[StrictInt] = Field(default=None, description="Bandwidth of procured ports in Gbps", alias="bandwidthInGbps")
    circuits: Optional[List[ExpressRoutePortPropertiesFormatCircuitsInner]] = Field(default=None, description="Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.")
    encapsulation: Optional[StrictStr] = Field(default=None, description="Encapsulation method on physical ports.")
    ether_type: Optional[StrictStr] = Field(default=None, description="Ether type of the physical port.", alias="etherType")
    links: Optional[List[ExpressRouteLink]] = Field(default=None, description="The set of physical links of the ExpressRoutePort resource")
    mtu: Optional[StrictStr] = Field(default=None, description="Maximum transmission unit of the physical port pair(s)")
    peering_location: Optional[StrictStr] = Field(default=None, description="The name of the peering location that the ExpressRoutePort is mapped to physically.", alias="peeringLocation")
    provisioned_bandwidth_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Aggregate Gbps of associated circuit bandwidths.", alias="provisionedBandwidthInGbps")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the ExpressRoutePort resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    resource_guid: Optional[StrictStr] = Field(default=None, description="The resource GUID property of the ExpressRoutePort resource.", alias="resourceGuid")
    __properties: ClassVar[List[str]] = ["allocationDate", "bandwidthInGbps", "circuits", "encapsulation", "etherType", "links", "mtu", "peeringLocation", "provisionedBandwidthInGbps", "provisioningState", "resourceGuid"]

    @field_validator('encapsulation')
    def encapsulation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Dot1Q', 'QinQ']):
            raise ValueError("must be one of enum values ('Dot1Q', 'QinQ')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpressRoutePortPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "allocation_date",
            "circuits",
            "ether_type",
            "mtu",
            "provisioned_bandwidth_in_gbps",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in circuits (list)
        _items = []
        if self.circuits:
            for _item_circuits in self.circuits:
                if _item_circuits:
                    _items.append(_item_circuits.to_dict())
            _dict['circuits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpressRoutePortPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocationDate": obj.get("allocationDate"),
            "bandwidthInGbps": obj.get("bandwidthInGbps"),
            "circuits": [ExpressRoutePortPropertiesFormatCircuitsInner.from_dict(_item) for _item in obj["circuits"]] if obj.get("circuits") is not None else None,
            "encapsulation": obj.get("encapsulation"),
            "etherType": obj.get("etherType"),
            "links": [ExpressRouteLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "mtu": obj.get("mtu"),
            "peeringLocation": obj.get("peeringLocation"),
            "provisionedBandwidthInGbps": obj.get("provisionedBandwidthInGbps"),
            "provisioningState": obj.get("provisioningState"),
            "resourceGuid": obj.get("resourceGuid")
        })
        return _obj



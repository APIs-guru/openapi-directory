# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.alerts import Alerts

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AlertsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def service_members_list_alerts(
        self,
        service_member_id: Annotated[StrictStr, Field(description="The server Id for which the alert details needs to be queried.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API to be used with the client request.")],
        filter: Annotated[Optional[StrictStr], Field(description="The alert property filter to apply.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The alert state to query for.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="The start date to query for.")] = None,
        to: Annotated[Optional[datetime], Field(description="The end date till when to query for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Alerts:
        """service_members_list_alerts

        Gets the details of an alert for a given service and server combination.

        :param service_member_id: The server Id for which the alert details needs to be queried. (required)
        :type service_member_id: str
        :param service_name: The name of the service. (required)
        :type service_name: str
        :param api_version: The version of the API to be used with the client request. (required)
        :type api_version: str
        :param filter: The alert property filter to apply.
        :type filter: str
        :param state: The alert state to query for.
        :type state: str
        :param var_from: The start date to query for.
        :type var_from: datetime
        :param to: The end date till when to query for.
        :type to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_members_list_alerts_serialize(
            service_member_id=service_member_id,
            service_name=service_name,
            api_version=api_version,
            filter=filter,
            state=state,
            var_from=var_from,
            to=to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alerts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_members_list_alerts_with_http_info(
        self,
        service_member_id: Annotated[StrictStr, Field(description="The server Id for which the alert details needs to be queried.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API to be used with the client request.")],
        filter: Annotated[Optional[StrictStr], Field(description="The alert property filter to apply.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The alert state to query for.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="The start date to query for.")] = None,
        to: Annotated[Optional[datetime], Field(description="The end date till when to query for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Alerts]:
        """service_members_list_alerts

        Gets the details of an alert for a given service and server combination.

        :param service_member_id: The server Id for which the alert details needs to be queried. (required)
        :type service_member_id: str
        :param service_name: The name of the service. (required)
        :type service_name: str
        :param api_version: The version of the API to be used with the client request. (required)
        :type api_version: str
        :param filter: The alert property filter to apply.
        :type filter: str
        :param state: The alert state to query for.
        :type state: str
        :param var_from: The start date to query for.
        :type var_from: datetime
        :param to: The end date till when to query for.
        :type to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_members_list_alerts_serialize(
            service_member_id=service_member_id,
            service_name=service_name,
            api_version=api_version,
            filter=filter,
            state=state,
            var_from=var_from,
            to=to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alerts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_members_list_alerts_without_preload_content(
        self,
        service_member_id: Annotated[StrictStr, Field(description="The server Id for which the alert details needs to be queried.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API to be used with the client request.")],
        filter: Annotated[Optional[StrictStr], Field(description="The alert property filter to apply.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The alert state to query for.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="The start date to query for.")] = None,
        to: Annotated[Optional[datetime], Field(description="The end date till when to query for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_members_list_alerts

        Gets the details of an alert for a given service and server combination.

        :param service_member_id: The server Id for which the alert details needs to be queried. (required)
        :type service_member_id: str
        :param service_name: The name of the service. (required)
        :type service_name: str
        :param api_version: The version of the API to be used with the client request. (required)
        :type api_version: str
        :param filter: The alert property filter to apply.
        :type filter: str
        :param state: The alert state to query for.
        :type state: str
        :param var_from: The start date to query for.
        :type var_from: datetime
        :param to: The end date till when to query for.
        :type to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_members_list_alerts_serialize(
            service_member_id=service_member_id,
            service_name=service_name,
            api_version=api_version,
            filter=filter,
            state=state,
            var_from=var_from,
            to=to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alerts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_members_list_alerts_serialize(
        self,
        service_member_id,
        service_name,
        api_version,
        filter,
        state,
        var_from,
        to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if service_member_id is not None:
            _path_params['serviceMemberId'] = service_member_id
        if service_name is not None:
            _path_params['serviceName'] = service_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        'from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        'to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('to', to))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def services_list_alerts(
        self,
        service_name: Annotated[StrictStr, Field(description="The name of the service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API to be used with the client request.")],
        filter: Annotated[Optional[StrictStr], Field(description="The alert property filter to apply.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The alert state to query for.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="The start date to query for.")] = None,
        to: Annotated[Optional[datetime], Field(description="The end date till when to query for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Alerts:
        """services_list_alerts

        Gets the alerts for a given service.

        :param service_name: The name of the service. (required)
        :type service_name: str
        :param api_version: The version of the API to be used with the client request. (required)
        :type api_version: str
        :param filter: The alert property filter to apply.
        :type filter: str
        :param state: The alert state to query for.
        :type state: str
        :param var_from: The start date to query for.
        :type var_from: datetime
        :param to: The end date till when to query for.
        :type to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_list_alerts_serialize(
            service_name=service_name,
            api_version=api_version,
            filter=filter,
            state=state,
            var_from=var_from,
            to=to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alerts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def services_list_alerts_with_http_info(
        self,
        service_name: Annotated[StrictStr, Field(description="The name of the service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API to be used with the client request.")],
        filter: Annotated[Optional[StrictStr], Field(description="The alert property filter to apply.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The alert state to query for.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="The start date to query for.")] = None,
        to: Annotated[Optional[datetime], Field(description="The end date till when to query for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Alerts]:
        """services_list_alerts

        Gets the alerts for a given service.

        :param service_name: The name of the service. (required)
        :type service_name: str
        :param api_version: The version of the API to be used with the client request. (required)
        :type api_version: str
        :param filter: The alert property filter to apply.
        :type filter: str
        :param state: The alert state to query for.
        :type state: str
        :param var_from: The start date to query for.
        :type var_from: datetime
        :param to: The end date till when to query for.
        :type to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_list_alerts_serialize(
            service_name=service_name,
            api_version=api_version,
            filter=filter,
            state=state,
            var_from=var_from,
            to=to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alerts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def services_list_alerts_without_preload_content(
        self,
        service_name: Annotated[StrictStr, Field(description="The name of the service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API to be used with the client request.")],
        filter: Annotated[Optional[StrictStr], Field(description="The alert property filter to apply.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The alert state to query for.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="The start date to query for.")] = None,
        to: Annotated[Optional[datetime], Field(description="The end date till when to query for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """services_list_alerts

        Gets the alerts for a given service.

        :param service_name: The name of the service. (required)
        :type service_name: str
        :param api_version: The version of the API to be used with the client request. (required)
        :type api_version: str
        :param filter: The alert property filter to apply.
        :type filter: str
        :param state: The alert state to query for.
        :type state: str
        :param var_from: The start date to query for.
        :type var_from: datetime
        :param to: The end date till when to query for.
        :type to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_list_alerts_serialize(
            service_name=service_name,
            api_version=api_version,
            filter=filter,
            state=state,
            var_from=var_from,
            to=to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alerts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _services_list_alerts_serialize(
        self,
        service_name,
        api_version,
        filter,
        state,
        var_from,
        to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if service_name is not None:
            _path_params['serviceName'] = service_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        'from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        'to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('to', to))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.ADHybridHealthService/services/{serviceName}/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



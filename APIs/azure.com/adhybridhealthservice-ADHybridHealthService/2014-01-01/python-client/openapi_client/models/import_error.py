# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.change_not_reimported import ChangeNotReimported
from openapi_client.models.extension_error_info import ExtensionErrorInfo
from openapi_client.models.rule_error_info import RuleErrorInfo
from typing import Optional, Set
from typing_extensions import Self

class ImportError(BaseModel):
    """
    The import error details.
    """ # noqa: E501
    algorithm_step_type: Optional[StrictStr] = Field(default=None, description="The operation type specific  to error reporting.", alias="algorithmStepType")
    change_not_reimported: Optional[ChangeNotReimported] = Field(default=None, alias="changeNotReimported")
    connector_id: Optional[StrictStr] = Field(default=None, description="The connector Id.", alias="connectorId")
    cs_object_id: Optional[StrictStr] = Field(default=None, description="The object Id.", alias="csObjectId")
    dn: Optional[StrictStr] = Field(default=None, description="The distinguished name.")
    extension_error_info: Optional[ExtensionErrorInfo] = Field(default=None, alias="extensionErrorInfo")
    id: Optional[StrictStr] = Field(default=None, description="The error Id.")
    retry_count: Optional[StrictInt] = Field(default=None, description="The retry count.", alias="retryCount")
    rule_error_info: Optional[RuleErrorInfo] = Field(default=None, alias="ruleErrorInfo")
    run_step_result_id: Optional[StrictStr] = Field(default=None, description="The run step result Id.", alias="runStepResultId")
    time_first_occurred: Optional[datetime] = Field(default=None, description="The time when the import error first occurred.", alias="timeFirstOccurred")
    time_occurred: Optional[datetime] = Field(default=None, description="The time when the import error occurred.", alias="timeOccurred")
    type: Optional[StrictStr] = Field(default=None, description="The type of error.")
    __properties: ClassVar[List[str]] = ["algorithmStepType", "changeNotReimported", "connectorId", "csObjectId", "dn", "extensionErrorInfo", "id", "retryCount", "ruleErrorInfo", "runStepResultId", "timeFirstOccurred", "timeOccurred", "type"]

    @field_validator('algorithm_step_type')
    def algorithm_step_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Undefined', 'Staging', 'ConnectorFilter', 'Join', 'Projection', 'ImportFlow', 'Provisioning', 'ValidateConnectorFilter', 'Deprovisioning', 'ExportFlow', 'MvDeletion', 'Recall', 'MvObjectTypeChange']):
            raise ValueError("must be one of enum values ('Undefined', 'Staging', 'ConnectorFilter', 'Join', 'Projection', 'ImportFlow', 'Provisioning', 'ValidateConnectorFilter', 'Deprovisioning', 'ExportFlow', 'MvDeletion', 'Recall', 'MvObjectTypeChange')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of change_not_reimported
        if self.change_not_reimported:
            _dict['changeNotReimported'] = self.change_not_reimported.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extension_error_info
        if self.extension_error_info:
            _dict['extensionErrorInfo'] = self.extension_error_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule_error_info
        if self.rule_error_info:
            _dict['ruleErrorInfo'] = self.rule_error_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithmStepType": obj.get("algorithmStepType"),
            "changeNotReimported": ChangeNotReimported.from_dict(obj["changeNotReimported"]) if obj.get("changeNotReimported") is not None else None,
            "connectorId": obj.get("connectorId"),
            "csObjectId": obj.get("csObjectId"),
            "dn": obj.get("dn"),
            "extensionErrorInfo": ExtensionErrorInfo.from_dict(obj["extensionErrorInfo"]) if obj.get("extensionErrorInfo") is not None else None,
            "id": obj.get("id"),
            "retryCount": obj.get("retryCount"),
            "ruleErrorInfo": RuleErrorInfo.from_dict(obj["ruleErrorInfo"]) if obj.get("ruleErrorInfo") is not None else None,
            "runStepResultId": obj.get("runStepResultId"),
            "timeFirstOccurred": obj.get("timeFirstOccurred"),
            "timeOccurred": obj.get("timeOccurred"),
            "type": obj.get("type")
        })
        return _obj



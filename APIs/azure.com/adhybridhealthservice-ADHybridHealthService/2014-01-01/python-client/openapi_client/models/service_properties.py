# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ServiceProperties(BaseModel):
    """
    The service properties for a given service.
    """ # noqa: E501
    active_alerts: Optional[StrictInt] = Field(default=None, description="The count of alerts that are currently active for the service.", alias="activeAlerts")
    additional_information: Optional[StrictStr] = Field(default=None, description="The additional information related to the service.", alias="additionalInformation")
    created_date: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the service was onboarded to Azure Active Directory Connect Health.", alias="createdDate")
    custom_notification_emails: Optional[List[StrictStr]] = Field(default=None, description="The list of additional emails that are configured to receive notifications about the service.", alias="customNotificationEmails")
    disabled: Optional[StrictBool] = Field(default=None, description="Indicates if the service is disabled or not.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the service.", alias="displayName")
    health: Optional[StrictStr] = Field(default=None, description="The health of the service.")
    id: Optional[StrictStr] = Field(default=None, description="The id of the service.")
    last_disabled: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the service was last disabled.", alias="lastDisabled")
    last_updated: Optional[datetime] = Field(default=None, description="The date or time , in UTC, when the service properties were last updated.", alias="lastUpdated")
    monitoring_configurations_computed: Optional[Dict[str, Any]] = Field(default=None, description="The monitoring configuration of the service which determines what activities are monitored by Azure Active Directory Connect Health.", alias="monitoringConfigurationsComputed")
    monitoring_configurations_customized: Optional[Dict[str, Any]] = Field(default=None, description="The customized monitoring configuration of the service which determines what activities are monitored by Azure Active Directory Connect Health.", alias="monitoringConfigurationsCustomized")
    notification_email_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if email notification is enabled or not.", alias="notificationEmailEnabled")
    notification_email_enabled_for_global_admins: Optional[StrictBool] = Field(default=None, description="Indicates if email notification is enabled for global administrators of the tenant.", alias="notificationEmailEnabledForGlobalAdmins")
    notification_emails: Optional[List[StrictStr]] = Field(default=None, description="The list of emails to whom service notifications will be sent.", alias="notificationEmails")
    notification_emails_enabled_for_global_admins: Optional[StrictBool] = Field(default=None, description="Indicates if email notification is enabled for global administrators of the tenant.", alias="notificationEmailsEnabledForGlobalAdmins")
    original_disabled_state: Optional[StrictBool] = Field(default=None, description="Gets the original disable state.", alias="originalDisabledState")
    resolved_alerts: Optional[StrictInt] = Field(default=None, description="The total count of alerts that has been resolved for the service.", alias="resolvedAlerts")
    service_id: Optional[StrictStr] = Field(default=None, description="The id of the service.", alias="serviceId")
    service_name: Optional[StrictStr] = Field(default=None, description="The name of the service.", alias="serviceName")
    signature: Optional[StrictStr] = Field(default=None, description="The signature of the service.")
    simple_properties: Optional[Dict[str, Any]] = Field(default=None, description="List of service specific configuration properties.", alias="simpleProperties")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The id of the tenant to which the service is registered to.", alias="tenantId")
    type: Optional[StrictStr] = Field(default=None, description="The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.")
    __properties: ClassVar[List[str]] = ["activeAlerts", "additionalInformation", "createdDate", "customNotificationEmails", "disabled", "displayName", "health", "id", "lastDisabled", "lastUpdated", "monitoringConfigurationsComputed", "monitoringConfigurationsCustomized", "notificationEmailEnabled", "notificationEmailEnabledForGlobalAdmins", "notificationEmails", "notificationEmailsEnabledForGlobalAdmins", "originalDisabledState", "resolvedAlerts", "serviceId", "serviceName", "signature", "simpleProperties", "tenantId", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeAlerts": obj.get("activeAlerts"),
            "additionalInformation": obj.get("additionalInformation"),
            "createdDate": obj.get("createdDate"),
            "customNotificationEmails": obj.get("customNotificationEmails"),
            "disabled": obj.get("disabled"),
            "displayName": obj.get("displayName"),
            "health": obj.get("health"),
            "id": obj.get("id"),
            "lastDisabled": obj.get("lastDisabled"),
            "lastUpdated": obj.get("lastUpdated"),
            "monitoringConfigurationsComputed": obj.get("monitoringConfigurationsComputed"),
            "monitoringConfigurationsCustomized": obj.get("monitoringConfigurationsCustomized"),
            "notificationEmailEnabled": obj.get("notificationEmailEnabled"),
            "notificationEmailEnabledForGlobalAdmins": obj.get("notificationEmailEnabledForGlobalAdmins"),
            "notificationEmails": obj.get("notificationEmails"),
            "notificationEmailsEnabledForGlobalAdmins": obj.get("notificationEmailsEnabledForGlobalAdmins"),
            "originalDisabledState": obj.get("originalDisabledState"),
            "resolvedAlerts": obj.get("resolvedAlerts"),
            "serviceId": obj.get("serviceId"),
            "serviceName": obj.get("serviceName"),
            "signature": obj.get("signature"),
            "simpleProperties": obj.get("simpleProperties"),
            "tenantId": obj.get("tenantId"),
            "type": obj.get("type")
        })
        return _obj



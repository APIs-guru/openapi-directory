# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AssociatedObject(BaseModel):
    """
    Object that hold sync object details.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the object.", alias="displayName")
    distinguished_name: Optional[StrictStr] = Field(default=None, description="The distinguished name of the object.", alias="distinguishedName")
    last_dir_sync_time: Optional[datetime] = Field(default=None, description="The last dirSync time.", alias="lastDirSyncTime")
    mail: Optional[StrictStr] = Field(default=None, description="The email of the object.")
    object_guid: Optional[StrictStr] = Field(default=None, description="The object guid.", alias="objectGuid")
    object_type: Optional[StrictStr] = Field(default=None, description="The object type.", alias="objectType")
    onpremises_user_principal_name: Optional[StrictStr] = Field(default=None, description="The On-premises UPN.", alias="onpremisesUserPrincipalName")
    proxy_addresses: Optional[StrictStr] = Field(default=None, description="The proxy addresses.", alias="proxyAddresses")
    source_anchor: Optional[StrictStr] = Field(default=None, description="The source anchor.", alias="sourceAnchor")
    source_of_authority: Optional[StrictStr] = Field(default=None, description="The source of authority.", alias="sourceOfAuthority")
    time_occurred: Optional[datetime] = Field(default=None, description=" The time of the error.", alias="timeOccurred")
    user_principal_name: Optional[StrictStr] = Field(default=None, description=" The UPN.", alias="userPrincipalName")
    __properties: ClassVar[List[str]] = ["displayName", "distinguishedName", "lastDirSyncTime", "mail", "objectGuid", "objectType", "onpremisesUserPrincipalName", "proxyAddresses", "sourceAnchor", "sourceOfAuthority", "timeOccurred", "userPrincipalName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssociatedObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssociatedObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "distinguishedName": obj.get("distinguishedName"),
            "lastDirSyncTime": obj.get("lastDirSyncTime"),
            "mail": obj.get("mail"),
            "objectGuid": obj.get("objectGuid"),
            "objectType": obj.get("objectType"),
            "onpremisesUserPrincipalName": obj.get("onpremisesUserPrincipalName"),
            "proxyAddresses": obj.get("proxyAddresses"),
            "sourceAnchor": obj.get("sourceAnchor"),
            "sourceOfAuthority": obj.get("sourceOfAuthority"),
            "timeOccurred": obj.get("timeOccurred"),
            "userPrincipalName": obj.get("userPrincipalName")
        })
        return _obj



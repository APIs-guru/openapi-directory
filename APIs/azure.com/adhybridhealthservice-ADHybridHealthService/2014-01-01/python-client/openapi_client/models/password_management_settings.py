# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PasswordManagementSettings(BaseModel):
    """
    The password management settings.
    """ # noqa: E501
    connect_to: Optional[StrictStr] = Field(default=None, description="Connection point of password management.", alias="connectTo")
    connection_timeout: Optional[StrictInt] = Field(default=None, description="Connection timeout for password extension.", alias="connectionTimeout")
    enabled: Optional[StrictBool] = Field(default=None, description="Indicates if the password extension is enabled.")
    extension_file_path: Optional[StrictStr] = Field(default=None, description="The file path of the password management extension.", alias="extensionFilePath")
    maximum_retry_count: Optional[StrictInt] = Field(default=None, description="The maximum number of retries.", alias="maximumRetryCount")
    requires_secure_connection: Optional[StrictBool] = Field(default=None, description="Indicates if a secure connection is required for password management.", alias="requiresSecureConnection")
    retry_interval_in_seconds: Optional[StrictInt] = Field(default=None, description="The time between retries.", alias="retryIntervalInSeconds")
    supported_password_operations: Optional[StrictStr] = Field(default=None, description="The supported password operations.", alias="supportedPasswordOperations")
    unlock_account: Optional[StrictBool] = Field(default=None, description="Indicates if accounts should be unlocked when resetting password.", alias="unlockAccount")
    user: Optional[StrictStr] = Field(default=None, description="User to execute password extension.")
    __properties: ClassVar[List[str]] = ["connectTo", "connectionTimeout", "enabled", "extensionFilePath", "maximumRetryCount", "requiresSecureConnection", "retryIntervalInSeconds", "supportedPasswordOperations", "unlockAccount", "user"]

    @field_validator('supported_password_operations')
    def supported_password_operations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Undefined', 'Set', 'Change']):
            raise ValueError("must be one of enum values ('Undefined', 'Set', 'Change')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PasswordManagementSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PasswordManagementSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectTo": obj.get("connectTo"),
            "connectionTimeout": obj.get("connectionTimeout"),
            "enabled": obj.get("enabled"),
            "extensionFilePath": obj.get("extensionFilePath"),
            "maximumRetryCount": obj.get("maximumRetryCount"),
            "requiresSecureConnection": obj.get("requiresSecureConnection"),
            "retryIntervalInSeconds": obj.get("retryIntervalInSeconds"),
            "supportedPasswordOperations": obj.get("supportedPasswordOperations"),
            "unlockAccount": obj.get("unlockAccount"),
            "user": obj.get("user")
        })
        return _obj



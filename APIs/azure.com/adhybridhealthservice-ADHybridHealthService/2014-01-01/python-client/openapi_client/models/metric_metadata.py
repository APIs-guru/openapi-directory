# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_group import MetricGroup
from typing import Optional, Set
from typing_extensions import Self

class MetricMetadata(BaseModel):
    """
    The metric meta data
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for the metric.", alias="displayName")
    groupings: Optional[List[MetricGroup]] = Field(default=None, description="The groupings for the metrics.")
    is_default: Optional[StrictBool] = Field(default=None, description="Indicates if the metric is a default metric or not.", alias="isDefault")
    is_dev_ops: Optional[StrictBool] = Field(default=None, description="Indicates if the metric is visible to DevOps or not.", alias="isDevOps")
    is_perf_counter: Optional[StrictBool] = Field(default=None, description="Indicates if the metric is a performance counter metric or not.", alias="isPerfCounter")
    kind: Optional[StrictStr] = Field(default=None, description="Indicates whether the dashboard to represent the metric is a line, bar,pie, area or donut chart.")
    max_value: Optional[StrictInt] = Field(default=None, description="The maximum value.", alias="maxValue")
    metric_name: Optional[StrictStr] = Field(default=None, description="The metric name", alias="metricName")
    metrics_processor_class_name: Optional[StrictStr] = Field(default=None, description="The name of the class which retrieve and process the metric.", alias="metricsProcessorClassName")
    min_value: Optional[StrictInt] = Field(default=None, description="The minimum value.", alias="minValue")
    value_kind: Optional[StrictStr] = Field(default=None, description="Indicates if the metrics is a rate,value, percent or duration type.", alias="valueKind")
    __properties: ClassVar[List[str]] = ["displayName", "groupings", "isDefault", "isDevOps", "isPerfCounter", "kind", "maxValue", "metricName", "metricsProcessorClassName", "minValue", "valueKind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in groupings (list)
        _items = []
        if self.groupings:
            for _item_groupings in self.groupings:
                if _item_groupings:
                    _items.append(_item_groupings.to_dict())
            _dict['groupings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "groupings": [MetricGroup.from_dict(_item) for _item in obj["groupings"]] if obj.get("groupings") is not None else None,
            "isDefault": obj.get("isDefault"),
            "isDevOps": obj.get("isDevOps"),
            "isPerfCounter": obj.get("isPerfCounter"),
            "kind": obj.get("kind"),
            "maxValue": obj.get("maxValue"),
            "metricName": obj.get("metricName"),
            "metricsProcessorClassName": obj.get("metricsProcessorClassName"),
            "minValue": obj.get("minValue"),
            "valueKind": obj.get("valueKind")
        })
        return _obj



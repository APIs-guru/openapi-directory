# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.inbound_replication_neighbor import InboundReplicationNeighbor
from typing import Optional, Set
from typing_extensions import Self

class ReplicationSummary(BaseModel):
    """
    The replication summary for a domain controller.
    """ # noqa: E501
    domain: Optional[StrictStr] = Field(default=None, description="The domain name for a given domain controller.")
    inbound_neighbor_collection: Optional[List[InboundReplicationNeighbor]] = Field(default=None, description="List of individual domain controller neighbor's inbound replication status.", alias="inboundNeighborCollection")
    last_attempted_sync: Optional[datetime] = Field(default=None, description="The last time when a sync was attempted for a given domain controller.", alias="lastAttemptedSync")
    last_successful_sync: Optional[datetime] = Field(default=None, description="The time when the last successful sync happened for a given domain controller.", alias="lastSuccessfulSync")
    site: Optional[StrictStr] = Field(default=None, description="The site name for a given domain controller.")
    status: Optional[StrictInt] = Field(default=None, description="The health status for a domain controller.")
    target_server: Optional[StrictStr] = Field(default=None, description="The domain controller name.", alias="targetServer")
    __properties: ClassVar[List[str]] = ["domain", "inboundNeighborCollection", "lastAttemptedSync", "lastSuccessfulSync", "site", "status", "targetServer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_neighbor_collection (list)
        _items = []
        if self.inbound_neighbor_collection:
            for _item_inbound_neighbor_collection in self.inbound_neighbor_collection:
                if _item_inbound_neighbor_collection:
                    _items.append(_item_inbound_neighbor_collection.to_dict())
            _dict['inboundNeighborCollection'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "inboundNeighborCollection": [InboundReplicationNeighbor.from_dict(_item) for _item in obj["inboundNeighborCollection"]] if obj.get("inboundNeighborCollection") is not None else None,
            "lastAttemptedSync": obj.get("lastAttemptedSync"),
            "lastSuccessfulSync": obj.get("lastSuccessfulSync"),
            "site": obj.get("site"),
            "status": obj.get("status"),
            "targetServer": obj.get("targetServer")
        })
        return _obj



# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.associated_object import AssociatedObject
from typing import Optional, Set
from typing_extensions import Self

class MergedExportError(BaseModel):
    """
    The merged export error.
    """ # noqa: E501
    attribute_name: Optional[StrictStr] = Field(default=None, description="The attribute name.", alias="attributeName")
    attribute_value: Optional[StrictStr] = Field(default=None, description="The attribute value.", alias="attributeValue")
    created_date: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the error was created.", alias="createdDate")
    cs_object_id: Optional[StrictStr] = Field(default=None, description=" the cs object Id.", alias="csObjectId")
    dn: Optional[StrictStr] = Field(default=None, description="the DN of the object.")
    existing_object: Optional[AssociatedObject] = Field(default=None, alias="existingObject")
    export_error_status: Optional[StrictInt] = Field(default=None, description="The export error status.", alias="exportErrorStatus")
    id: Optional[StrictStr] = Field(default=None, description="The error Id.")
    incoming_object: Optional[AssociatedObject] = Field(default=None, alias="incomingObject")
    incoming_object_display_name: Optional[StrictStr] = Field(default=None, description="The incoming object display name.", alias="incomingObjectDisplayName")
    incoming_object_type: Optional[StrictStr] = Field(default=None, description="The incoming object type.", alias="incomingObjectType")
    merged_entity_id: Optional[StrictStr] = Field(default=None, description="The merged entity Id.", alias="mergedEntityId")
    modified_or_removed_attribute_value: Optional[StrictStr] = Field(default=None, description="The modified or removed attribute value.", alias="modifiedOrRemovedAttributeValue")
    run_step_result_id: Optional[StrictStr] = Field(default=None, description="The run step result Id.", alias="runStepResultId")
    sam_account_name: Optional[StrictStr] = Field(default=None, description="The sam account name.", alias="samAccountName")
    server_error_detail: Optional[StrictStr] = Field(default=None, description="The server error details.", alias="serverErrorDetail")
    service_id: Optional[StrictStr] = Field(default=None, description="The service Id.", alias="serviceId")
    service_member_id: Optional[StrictStr] = Field(default=None, description="The server Id.", alias="serviceMemberId")
    time_first_occurred: Optional[datetime] = Field(default=None, description="The time when the error first occurred.", alias="timeFirstOccurred")
    time_occurred: Optional[datetime] = Field(default=None, description="The date and time when the error occurred.", alias="timeOccurred")
    type: Optional[StrictStr] = Field(default=None, description="The type of the error.")
    user_principal_name: Optional[StrictStr] = Field(default=None, description="The user principal name", alias="userPrincipalName")
    __properties: ClassVar[List[str]] = ["attributeName", "attributeValue", "createdDate", "csObjectId", "dn", "existingObject", "exportErrorStatus", "id", "incomingObject", "incomingObjectDisplayName", "incomingObjectType", "mergedEntityId", "modifiedOrRemovedAttributeValue", "runStepResultId", "samAccountName", "serverErrorDetail", "serviceId", "serviceMemberId", "timeFirstOccurred", "timeOccurred", "type", "userPrincipalName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MergedExportError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of existing_object
        if self.existing_object:
            _dict['existingObject'] = self.existing_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incoming_object
        if self.incoming_object:
            _dict['incomingObject'] = self.incoming_object.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MergedExportError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeName": obj.get("attributeName"),
            "attributeValue": obj.get("attributeValue"),
            "createdDate": obj.get("createdDate"),
            "csObjectId": obj.get("csObjectId"),
            "dn": obj.get("dn"),
            "existingObject": AssociatedObject.from_dict(obj["existingObject"]) if obj.get("existingObject") is not None else None,
            "exportErrorStatus": obj.get("exportErrorStatus"),
            "id": obj.get("id"),
            "incomingObject": AssociatedObject.from_dict(obj["incomingObject"]) if obj.get("incomingObject") is not None else None,
            "incomingObjectDisplayName": obj.get("incomingObjectDisplayName"),
            "incomingObjectType": obj.get("incomingObjectType"),
            "mergedEntityId": obj.get("mergedEntityId"),
            "modifiedOrRemovedAttributeValue": obj.get("modifiedOrRemovedAttributeValue"),
            "runStepResultId": obj.get("runStepResultId"),
            "samAccountName": obj.get("samAccountName"),
            "serverErrorDetail": obj.get("serverErrorDetail"),
            "serviceId": obj.get("serviceId"),
            "serviceMemberId": obj.get("serviceMemberId"),
            "timeFirstOccurred": obj.get("timeFirstOccurred"),
            "timeOccurred": obj.get("timeOccurred"),
            "type": obj.get("type"),
            "userPrincipalName": obj.get("userPrincipalName")
        })
        return _obj



# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_information import AdditionalInformation
from openapi_client.models.help_link import HelpLink
from openapi_client.models.item import Item
from typing import Optional, Set
from typing_extensions import Self

class Alert(BaseModel):
    """
     The alert details indicating an issue with service or server.
    """ # noqa: E501
    active_alert_properties: Optional[List[Item]] = Field(default=None, description="The active alert properties.", alias="activeAlertProperties")
    additional_information: Optional[List[AdditionalInformation]] = Field(default=None, description="Additional information related to the alert.", alias="additionalInformation")
    alert_id: Optional[StrictStr] = Field(default=None, description="The alert Id.", alias="alertId")
    created_date: Optional[datetime] = Field(default=None, description="The date and time,in UTC,when the alert was created.", alias="createdDate")
    description: Optional[StrictStr] = Field(default=None, description="The alert description.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for the alert.", alias="displayName")
    last_updated: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the alert was last updated.", alias="lastUpdated")
    level: Optional[StrictStr] = Field(default=None, description="The alert level which indicates the severity of the alert.")
    monitor_role_type: Optional[StrictStr] = Field(default=None, description="The monitoring role type for which the alert was raised.", alias="monitorRoleType")
    related_links: Optional[List[HelpLink]] = Field(default=None, description="The help links to get more information related to the alert.", alias="relatedLinks")
    remediation: Optional[StrictStr] = Field(default=None, description="The alert remediation.")
    resolved_alert_properties: Optional[List[Item]] = Field(default=None, description="The resolved alert properties.", alias="resolvedAlertProperties")
    resolved_date: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the alert was resolved.", alias="resolvedDate")
    scope: Optional[StrictStr] = Field(default=None, description="The scope of the alert. Indicates if it is a service or a server related alert.")
    service_id: Optional[StrictStr] = Field(default=None, description="The service Id.", alias="serviceId")
    service_member_id: Optional[StrictStr] = Field(default=None, description="The server Id.", alias="serviceMemberId")
    short_name: Optional[StrictStr] = Field(default=None, description="The alert short name.", alias="shortName")
    state: Optional[StrictStr] = Field(default=None, description="The alert state which can be either active or resolved with multiple resolution types.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The tenant Id.", alias="tenantId")
    __properties: ClassVar[List[str]] = ["activeAlertProperties", "additionalInformation", "alertId", "createdDate", "description", "displayName", "lastUpdated", "level", "monitorRoleType", "relatedLinks", "remediation", "resolvedAlertProperties", "resolvedDate", "scope", "serviceId", "serviceMemberId", "shortName", "state", "tenantId"]

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Warning', 'Error', 'PreWarning']):
            raise ValueError("must be one of enum values ('Warning', 'Error', 'PreWarning')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'ResolvedByPositiveResult', 'ResolvedManually', 'ResolvedByTimer', 'ResolvedByStateChange']):
            raise ValueError("must be one of enum values ('Active', 'ResolvedByPositiveResult', 'ResolvedManually', 'ResolvedByTimer', 'ResolvedByStateChange')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Alert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_alert_properties (list)
        _items = []
        if self.active_alert_properties:
            for _item_active_alert_properties in self.active_alert_properties:
                if _item_active_alert_properties:
                    _items.append(_item_active_alert_properties.to_dict())
            _dict['activeAlertProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_information (list)
        _items = []
        if self.additional_information:
            for _item_additional_information in self.additional_information:
                if _item_additional_information:
                    _items.append(_item_additional_information.to_dict())
            _dict['additionalInformation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in related_links (list)
        _items = []
        if self.related_links:
            for _item_related_links in self.related_links:
                if _item_related_links:
                    _items.append(_item_related_links.to_dict())
            _dict['relatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resolved_alert_properties (list)
        _items = []
        if self.resolved_alert_properties:
            for _item_resolved_alert_properties in self.resolved_alert_properties:
                if _item_resolved_alert_properties:
                    _items.append(_item_resolved_alert_properties.to_dict())
            _dict['resolvedAlertProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Alert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeAlertProperties": [Item.from_dict(_item) for _item in obj["activeAlertProperties"]] if obj.get("activeAlertProperties") is not None else None,
            "additionalInformation": [AdditionalInformation.from_dict(_item) for _item in obj["additionalInformation"]] if obj.get("additionalInformation") is not None else None,
            "alertId": obj.get("alertId"),
            "createdDate": obj.get("createdDate"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "lastUpdated": obj.get("lastUpdated"),
            "level": obj.get("level"),
            "monitorRoleType": obj.get("monitorRoleType"),
            "relatedLinks": [HelpLink.from_dict(_item) for _item in obj["relatedLinks"]] if obj.get("relatedLinks") is not None else None,
            "remediation": obj.get("remediation"),
            "resolvedAlertProperties": [Item.from_dict(_item) for _item in obj["resolvedAlertProperties"]] if obj.get("resolvedAlertProperties") is not None else None,
            "resolvedDate": obj.get("resolvedDate"),
            "scope": obj.get("scope"),
            "serviceId": obj.get("serviceId"),
            "serviceMemberId": obj.get("serviceMemberId"),
            "shortName": obj.get("shortName"),
            "state": obj.get("state"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.merged_export_error import MergedExportError
from openapi_client.models.object_with_sync_error import ObjectWithSyncError
from typing import Optional, Set
from typing_extensions import Self

class ErrorDetail(BaseModel):
    """
    The error details.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The error description.")
    detail: Optional[StrictStr] = Field(default=None, description="Additional details related to the error.")
    kb_url: Optional[StrictStr] = Field(default=None, description="The knowledge base article url which contains more information about the error.", alias="kbUrl")
    object_with_sync_error: Optional[MergedExportError] = Field(default=None, alias="objectWithSyncError")
    objects_with_sync_error: Optional[ObjectWithSyncError] = Field(default=None, alias="objectsWithSyncError")
    __properties: ClassVar[List[str]] = ["description", "detail", "kbUrl", "objectWithSyncError", "objectsWithSyncError"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of object_with_sync_error
        if self.object_with_sync_error:
            _dict['objectWithSyncError'] = self.object_with_sync_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of objects_with_sync_error
        if self.objects_with_sync_error:
            _dict['objectsWithSyncError'] = self.objects_with_sync_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "detail": obj.get("detail"),
            "kbUrl": obj.get("kbUrl"),
            "objectWithSyncError": MergedExportError.from_dict(obj["objectWithSyncError"]) if obj.get("objectWithSyncError") is not None else None,
            "objectsWithSyncError": ObjectWithSyncError.from_dict(obj["objectsWithSyncError"]) if obj.get("objectsWithSyncError") is not None else None
        })
        return _obj



# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AlertFeedback(BaseModel):
    """
    The alert feedback details.
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="Additional comments related to the alert.")
    consented_to_share: Optional[StrictBool] = Field(default=None, description="Indicates if the alert feedback can be shared from product team.", alias="consentedToShare")
    created_date: Optional[datetime] = Field(default=None, description="The date and time,in UTC,when the alert was created.", alias="createdDate")
    feedback: Optional[StrictStr] = Field(default=None, description="The feedback for the alert which indicates if the customer likes or dislikes the alert.")
    level: Optional[StrictStr] = Field(default=None, description="The alert level which indicates the severity of the alert.")
    service_member_id: Optional[StrictStr] = Field(default=None, description="The server Id of the alert.", alias="serviceMemberId")
    short_name: Optional[StrictStr] = Field(default=None, description="The alert short name.", alias="shortName")
    state: Optional[StrictStr] = Field(default=None, description="The alert state which can be either active or resolved with multiple resolution types.")
    __properties: ClassVar[List[str]] = ["comment", "consentedToShare", "createdDate", "feedback", "level", "serviceMemberId", "shortName", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertFeedback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertFeedback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "consentedToShare": obj.get("consentedToShare"),
            "createdDate": obj.get("createdDate"),
            "feedback": obj.get("feedback"),
            "level": obj.get("level"),
            "serviceMemberId": obj.get("serviceMemberId"),
            "shortName": obj.get("shortName"),
            "state": obj.get("state")
        })
        return _obj



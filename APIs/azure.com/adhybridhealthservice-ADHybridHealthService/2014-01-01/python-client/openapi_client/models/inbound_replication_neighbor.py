# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InboundReplicationNeighbor(BaseModel):
    """
    The replication summary for the domain controller inbound neighbor.
    """ # noqa: E501
    additional_info: Optional[StrictStr] = Field(default=None, description="The additional details.", alias="additionalInfo")
    consecutive_failure_count: Optional[StrictInt] = Field(default=None, description="The number of consecutive failure counts.", alias="consecutiveFailureCount")
    error_description: Optional[StrictStr] = Field(default=None, description="The error description.", alias="errorDescription")
    error_title: Optional[StrictStr] = Field(default=None, description="The error title.", alias="errorTitle")
    fix_details: Optional[StrictStr] = Field(default=None, description="The details of the fix.", alias="fixDetails")
    fix_link: Optional[StrictStr] = Field(default=None, description="The link for the fix of the error.", alias="fixLink")
    last_attempted_sync: Optional[datetime] = Field(default=None, description="The last time a sync was attempted on the domain controller.", alias="lastAttemptedSync")
    last_error_code: Optional[StrictInt] = Field(default=None, description="The last error code.", alias="lastErrorCode")
    last_error_message: Optional[StrictStr] = Field(default=None, description="The error message of the last error.", alias="lastErrorMessage")
    last_successful_sync: Optional[datetime] = Field(default=None, description="The last time when a successful sync happened.", alias="lastSuccessfulSync")
    naming_context: Optional[StrictStr] = Field(default=None, description="The naming context.", alias="namingContext")
    source_domain_controller: Optional[StrictStr] = Field(default=None, description="The name of the source domain controller.", alias="sourceDomainController")
    status: Optional[StrictInt] = Field(default=None, description="The health status for the domain controller")
    __properties: ClassVar[List[str]] = ["additionalInfo", "consecutiveFailureCount", "errorDescription", "errorTitle", "fixDetails", "fixLink", "lastAttemptedSync", "lastErrorCode", "lastErrorMessage", "lastSuccessfulSync", "namingContext", "sourceDomainController", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundReplicationNeighbor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundReplicationNeighbor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalInfo": obj.get("additionalInfo"),
            "consecutiveFailureCount": obj.get("consecutiveFailureCount"),
            "errorDescription": obj.get("errorDescription"),
            "errorTitle": obj.get("errorTitle"),
            "fixDetails": obj.get("fixDetails"),
            "fixLink": obj.get("fixLink"),
            "lastAttemptedSync": obj.get("lastAttemptedSync"),
            "lastErrorCode": obj.get("lastErrorCode"),
            "lastErrorMessage": obj.get("lastErrorMessage"),
            "lastSuccessfulSync": obj.get("lastSuccessfulSync"),
            "namingContext": obj.get("namingContext"),
            "sourceDomainController": obj.get("sourceDomainController"),
            "status": obj.get("status")
        })
        return _obj



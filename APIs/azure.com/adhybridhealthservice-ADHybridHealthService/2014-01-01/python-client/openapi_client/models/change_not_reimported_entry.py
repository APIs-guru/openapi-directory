# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attribute_delta import AttributeDelta
from typing import Optional, Set
from typing_extensions import Self

class ChangeNotReimportedEntry(BaseModel):
    """
    The object entry in a change that is not re-imported.
    """ # noqa: E501
    anchor: Optional[StrictStr] = Field(default=None, description="The anchor.")
    attributes: Optional[List[AttributeDelta]] = Field(default=None, description="The attributes.")
    dn: Optional[StrictStr] = Field(default=None, description="The distinguished name.")
    dn_attributes: Optional[List[AttributeDelta]] = Field(default=None, description="The delta attributes for distinguished names.", alias="dnAttributes")
    object_classes: Optional[List[StrictStr]] = Field(default=None, description="The list of object classes.", alias="objectClasses")
    parent_anchor: Optional[StrictStr] = Field(default=None, description="The parent anchor.", alias="parentAnchor")
    primary_object_class: Optional[StrictStr] = Field(default=None, description="The primary object class.", alias="primaryObjectClass")
    __properties: ClassVar[List[str]] = ["anchor", "attributes", "dn", "dnAttributes", "objectClasses", "parentAnchor", "primaryObjectClass"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeNotReimportedEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dn_attributes (list)
        _items = []
        if self.dn_attributes:
            for _item_dn_attributes in self.dn_attributes:
                if _item_dn_attributes:
                    _items.append(_item_dn_attributes.to_dict())
            _dict['dnAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeNotReimportedEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anchor": obj.get("anchor"),
            "attributes": [AttributeDelta.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "dn": obj.get("dn"),
            "dnAttributes": [AttributeDelta.from_dict(_item) for _item in obj["dnAttributes"]] if obj.get("dnAttributes") is not None else None,
            "objectClasses": obj.get("objectClasses"),
            "parentAnchor": obj.get("parentAnchor"),
            "primaryObjectClass": obj.get("primaryObjectClass")
        })
        return _obj



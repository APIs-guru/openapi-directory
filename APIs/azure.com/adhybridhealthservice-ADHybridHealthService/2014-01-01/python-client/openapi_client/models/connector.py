# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.partition import Partition
from openapi_client.models.run_profile import RunProfile
from typing import Optional, Set
from typing_extensions import Self

class Connector(BaseModel):
    """
    The connect details.
    """ # noqa: E501
    attributes_included: Optional[List[StrictStr]] = Field(default=None, description="The attribute inclusion list of the connector.", alias="attributesIncluded")
    classes_included: Optional[List[StrictStr]] = Field(default=None, description="The class inclusion list of the connector.", alias="classesIncluded")
    connector_id: Optional[StrictStr] = Field(default=None, description="The connector Id.", alias="connectorId")
    description: Optional[StrictStr] = Field(default=None, description="The connector description.")
    id: Optional[StrictStr] = Field(default=None, description="The connector Id.")
    name: Optional[StrictStr] = Field(default=None, description="The connector name.")
    partitions: Optional[List[Partition]] = Field(default=None, description="The partitions of the connector.")
    password_hash_sync_configuration: Optional[Dict[str, Any]] = Field(default=None, description="The password hash synchronization configuration of the connector.", alias="passwordHashSyncConfiguration")
    password_management_settings: Optional[Dict[str, Any]] = Field(default=None, description="The password management settings of the connector.", alias="passwordManagementSettings")
    run_profiles: Optional[List[RunProfile]] = Field(default=None, description="The run profiles of the connector.", alias="runProfiles")
    schema_xml: Optional[StrictStr] = Field(default=None, description="The schema xml for the connector.", alias="schemaXml")
    time_created: Optional[datetime] = Field(default=None, description="The date and time when this connector was created.", alias="timeCreated")
    time_last_modified: Optional[datetime] = Field(default=None, description="The date and time when this connector was last modified.", alias="timeLastModified")
    type: Optional[StrictStr] = Field(default=None, description="The connector type.")
    version: Optional[StrictInt] = Field(default=None, description="The connector version")
    __properties: ClassVar[List[str]] = ["attributesIncluded", "classesIncluded", "connectorId", "description", "id", "name", "partitions", "passwordHashSyncConfiguration", "passwordManagementSettings", "runProfiles", "schemaXml", "timeCreated", "timeLastModified", "type", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in partitions (list)
        _items = []
        if self.partitions:
            for _item_partitions in self.partitions:
                if _item_partitions:
                    _items.append(_item_partitions.to_dict())
            _dict['partitions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in run_profiles (list)
        _items = []
        if self.run_profiles:
            for _item_run_profiles in self.run_profiles:
                if _item_run_profiles:
                    _items.append(_item_run_profiles.to_dict())
            _dict['runProfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributesIncluded": obj.get("attributesIncluded"),
            "classesIncluded": obj.get("classesIncluded"),
            "connectorId": obj.get("connectorId"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "partitions": [Partition.from_dict(_item) for _item in obj["partitions"]] if obj.get("partitions") is not None else None,
            "passwordHashSyncConfiguration": obj.get("passwordHashSyncConfiguration"),
            "passwordManagementSettings": obj.get("passwordManagementSettings"),
            "runProfiles": [RunProfile.from_dict(_item) for _item in obj["runProfiles"]] if obj.get("runProfiles") is not None else None,
            "schemaXml": obj.get("schemaXml"),
            "timeCreated": obj.get("timeCreated"),
            "timeLastModified": obj.get("timeLastModified"),
            "type": obj.get("type"),
            "version": obj.get("version")
        })
        return _obj



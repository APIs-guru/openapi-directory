# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Tenant(BaseModel):
    """
    The details of the onboarded tenant.
    """ # noqa: E501
    aad_license: Optional[StrictStr] = Field(default=None, description="The Azure Active Directory license of the tenant.", alias="aadLicense")
    aad_premium: Optional[StrictBool] = Field(default=None, description="Indicate if the tenant has Azure Active Directory Premium license or not.", alias="aadPremium")
    agent_auto_update: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant is configured to automatically receive updates for Azure Active Directory Connect Health client side features.", alias="agentAutoUpdate")
    alert_suppression_time_in_mins: Optional[StrictInt] = Field(default=None, description="The time in minutes after which an alert will be auto-suppressed.", alias="alertSuppressionTimeInMins")
    consented_to_microsoft_dev_ops: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant data can be seen by Microsoft through Azure portal.", alias="consentedToMicrosoftDevOps")
    country_letter_code: Optional[StrictStr] = Field(default=None, description="The country letter code of the tenant.", alias="countryLetterCode")
    created_date: Optional[datetime] = Field(default=None, description="The date, in UTC, when the tenant was onboarded to Azure Active Directory Connect Health.", alias="createdDate")
    dev_ops_ttl: Optional[datetime] = Field(default=None, description="The date and time, in UTC, till when the tenant data can be seen by Microsoft through Azure portal.", alias="devOpsTtl")
    disabled: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant is disabled in Azure Active Directory Connect Health.")
    disabled_reason: Optional[StrictInt] = Field(default=None, description="The reason due to which the tenant was disabled in Azure Active Directory Connect Health.", alias="disabledReason")
    global_admins_email: Optional[List[StrictStr]] = Field(default=None, description="The list of global administrators for the tenant.", alias="globalAdminsEmail")
    initial_domain: Optional[StrictStr] = Field(default=None, description="The initial domain of the tenant.", alias="initialDomain")
    last_disabled: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the tenant was last disabled in Azure Active Directory Connect Health.", alias="lastDisabled")
    last_verified: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the tenant onboarding status in Azure Active Directory Connect Health was last verified.", alias="lastVerified")
    onboarded: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant is already onboarded to Azure Active Directory Connect Health.")
    onboarding_allowed: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant is allowed to  onboard to Azure Active Directory Connect Health.", alias="onboardingAllowed")
    pks_certificate: Optional[Dict[str, Any]] = Field(default=None, description="The certificate associated with the tenant to onboard data to Azure Active Directory Connect Health.", alias="pksCertificate")
    private_preview_tenant: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant has signed up for private preview of Azure Active Directory Connect Health features.", alias="privatePreviewTenant")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The Id of the tenant.", alias="tenantId")
    tenant_in_quarantine: Optional[StrictBool] = Field(default=None, description="Indicates if data collection for this tenant is disabled or not.", alias="tenantInQuarantine")
    tenant_name: Optional[StrictStr] = Field(default=None, description="The name of the tenant.", alias="tenantName")
    __properties: ClassVar[List[str]] = ["aadLicense", "aadPremium", "agentAutoUpdate", "alertSuppressionTimeInMins", "consentedToMicrosoftDevOps", "countryLetterCode", "createdDate", "devOpsTtl", "disabled", "disabledReason", "globalAdminsEmail", "initialDomain", "lastDisabled", "lastVerified", "onboarded", "onboardingAllowed", "pksCertificate", "privatePreviewTenant", "tenantId", "tenantInQuarantine", "tenantName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tenant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tenant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aadLicense": obj.get("aadLicense"),
            "aadPremium": obj.get("aadPremium"),
            "agentAutoUpdate": obj.get("agentAutoUpdate"),
            "alertSuppressionTimeInMins": obj.get("alertSuppressionTimeInMins"),
            "consentedToMicrosoftDevOps": obj.get("consentedToMicrosoftDevOps"),
            "countryLetterCode": obj.get("countryLetterCode"),
            "createdDate": obj.get("createdDate"),
            "devOpsTtl": obj.get("devOpsTtl"),
            "disabled": obj.get("disabled"),
            "disabledReason": obj.get("disabledReason"),
            "globalAdminsEmail": obj.get("globalAdminsEmail"),
            "initialDomain": obj.get("initialDomain"),
            "lastDisabled": obj.get("lastDisabled"),
            "lastVerified": obj.get("lastVerified"),
            "onboarded": obj.get("onboarded"),
            "onboardingAllowed": obj.get("onboardingAllowed"),
            "pksCertificate": obj.get("pksCertificate"),
            "privatePreviewTenant": obj.get("privatePreviewTenant"),
            "tenantId": obj.get("tenantId"),
            "tenantInQuarantine": obj.get("tenantInQuarantine"),
            "tenantName": obj.get("tenantName")
        })
        return _obj



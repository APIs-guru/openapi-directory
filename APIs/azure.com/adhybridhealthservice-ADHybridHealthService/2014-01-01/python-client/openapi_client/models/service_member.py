# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ServiceMember(BaseModel):
    """
    The server properties for a given service.
    """ # noqa: E501
    active_alerts: Optional[StrictInt] = Field(default=None, description="The total number of alerts that are currently active for the server.", alias="activeAlerts")
    additional_information: Optional[StrictStr] = Field(default=None, description="The additional information, if any, for the server.", alias="additionalInformation")
    created_date: Optional[datetime] = Field(default=None, description="The date time , in UTC, when the server was onboarded to Azure Active Directory Connect Health.", alias="createdDate")
    dimensions: Optional[Dict[str, Any]] = Field(default=None, description="The server specific configuration related dimensions.")
    disabled: Optional[StrictBool] = Field(default=None, description="Indicates if the server is disabled or not. ")
    disabled_reason: Optional[StrictInt] = Field(default=None, description="The reason for disabling the server.", alias="disabledReason")
    installed_qfes: Optional[Dict[str, Any]] = Field(default=None, description="The list of installed QFEs for the server.", alias="installedQfes")
    last_disabled: Optional[datetime] = Field(default=None, description="The date and time , in UTC, when the server was last disabled.", alias="lastDisabled")
    last_reboot: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the server was last rebooted.", alias="lastReboot")
    last_server_reported_monitoring_level_change: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the server's data monitoring configuration was last changed.", alias="lastServerReportedMonitoringLevelChange")
    last_updated: Optional[datetime] = Field(default=None, description="The date and time, in UTC, when the server properties were last updated.", alias="lastUpdated")
    machine_id: Optional[StrictStr] = Field(default=None, description="The id of the machine.", alias="machineId")
    machine_name: Optional[StrictStr] = Field(default=None, description="The name of the server.", alias="machineName")
    monitoring_configurations_computed: Optional[Dict[str, Any]] = Field(default=None, description="The monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.", alias="monitoringConfigurationsComputed")
    monitoring_configurations_customized: Optional[Dict[str, Any]] = Field(default=None, description="The customized monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.", alias="monitoringConfigurationsCustomized")
    os_name: Optional[StrictStr] = Field(default=None, description="The name of the operating system installed in the machine.", alias="osName")
    os_version: Optional[StrictStr] = Field(default=None, description="The version of the operating system installed in the machine.", alias="osVersion")
    properties: Optional[Dict[str, Any]] = Field(default=None, description="Server specific properties.")
    recommended_qfes: Optional[Dict[str, Any]] = Field(default=None, description="The list of recommended hotfixes for the server.", alias="recommendedQfes")
    resolved_alerts: Optional[StrictInt] = Field(default=None, description="The total count of alerts that are resolved for this server.", alias="resolvedAlerts")
    role: Optional[StrictStr] = Field(default=None, description="The service role that is being monitored in the server.")
    server_reported_monitoring_level: Optional[StrictStr] = Field(default=None, description="The monitoring level reported by the server.", alias="serverReportedMonitoringLevel")
    service_id: Optional[StrictStr] = Field(default=None, description="The service id to whom this server belongs.", alias="serviceId")
    service_member_id: Optional[StrictStr] = Field(default=None, description="The id of the server.", alias="serviceMemberId")
    status: Optional[StrictStr] = Field(default=None, description="The health status of the server.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The tenant id to whom this server belongs.", alias="tenantId")
    __properties: ClassVar[List[str]] = ["activeAlerts", "additionalInformation", "createdDate", "dimensions", "disabled", "disabledReason", "installedQfes", "lastDisabled", "lastReboot", "lastServerReportedMonitoringLevelChange", "lastUpdated", "machineId", "machineName", "monitoringConfigurationsComputed", "monitoringConfigurationsCustomized", "osName", "osVersion", "properties", "recommendedQfes", "resolvedAlerts", "role", "serverReportedMonitoringLevel", "serviceId", "serviceMemberId", "status", "tenantId"]

    @field_validator('server_reported_monitoring_level')
    def server_reported_monitoring_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Partial', 'Full', 'Off']):
            raise ValueError("must be one of enum values ('Partial', 'Full', 'Off')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeAlerts": obj.get("activeAlerts"),
            "additionalInformation": obj.get("additionalInformation"),
            "createdDate": obj.get("createdDate"),
            "dimensions": obj.get("dimensions"),
            "disabled": obj.get("disabled"),
            "disabledReason": obj.get("disabledReason"),
            "installedQfes": obj.get("installedQfes"),
            "lastDisabled": obj.get("lastDisabled"),
            "lastReboot": obj.get("lastReboot"),
            "lastServerReportedMonitoringLevelChange": obj.get("lastServerReportedMonitoringLevelChange"),
            "lastUpdated": obj.get("lastUpdated"),
            "machineId": obj.get("machineId"),
            "machineName": obj.get("machineName"),
            "monitoringConfigurationsComputed": obj.get("monitoringConfigurationsComputed"),
            "monitoringConfigurationsCustomized": obj.get("monitoringConfigurationsCustomized"),
            "osName": obj.get("osName"),
            "osVersion": obj.get("osVersion"),
            "properties": obj.get("properties"),
            "recommendedQfes": obj.get("recommendedQfes"),
            "resolvedAlerts": obj.get("resolvedAlerts"),
            "role": obj.get("role"),
            "serverReportedMonitoringLevel": obj.get("serverReportedMonitoringLevel"),
            "serviceId": obj.get("serviceId"),
            "serviceMemberId": obj.get("serviceMemberId"),
            "status": obj.get("status"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.partition_scope import PartitionScope
from typing import Optional, Set
from typing_extensions import Self

class Partition(BaseModel):
    """
    Describes the partition in Synchronization service.
    """ # noqa: E501
    dn: Optional[StrictStr] = Field(default=None, description="The distinguished name for the partition.")
    enabled: Optional[StrictBool] = Field(default=None, description="Indicates if the partition object is selected or not.")
    id: Optional[StrictStr] = Field(default=None, description="The partition Id.")
    is_domain: Optional[StrictBool] = Field(default=None, description="Indicates if the partition is a domain or not.", alias="isDomain")
    name: Optional[StrictStr] = Field(default=None, description="The name of the partition.")
    partition_scope: Optional[PartitionScope] = Field(default=None, alias="partitionScope")
    time_created: Optional[datetime] = Field(default=None, description="The date and time when the partition is created.", alias="timeCreated")
    time_last_modified: Optional[datetime] = Field(default=None, description="The time and date when the partition was last modified.", alias="timeLastModified")
    type: Optional[StrictStr] = Field(default=None, description="The partition type.")
    __properties: ClassVar[List[str]] = ["dn", "enabled", "id", "isDomain", "name", "partitionScope", "timeCreated", "timeLastModified", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Partition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partition_scope
        if self.partition_scope:
            _dict['partitionScope'] = self.partition_scope.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Partition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dn": obj.get("dn"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "isDomain": obj.get("isDomain"),
            "name": obj.get("name"),
            "partitionScope": PartitionScope.from_dict(obj["partitionScope"]) if obj.get("partitionScope") is not None else None,
            "timeCreated": obj.get("timeCreated"),
            "timeLastModified": obj.get("timeLastModified"),
            "type": obj.get("type")
        })
        return _obj



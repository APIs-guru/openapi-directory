# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.error_detail import ErrorDetail

class TestErrorDetail(unittest.TestCase):
    """ErrorDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ErrorDetail:
        """Test ErrorDetail
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ErrorDetail`
        """
        model = ErrorDetail()
        if include_optional:
            return ErrorDetail(
                description = '',
                detail = '',
                kb_url = '',
                object_with_sync_error = openapi_client.models.merged_export_error.MergedExportError(
                    attribute_name = '', 
                    attribute_value = '', 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    cs_object_id = '', 
                    dn = '', 
                    existing_object = openapi_client.models.associated_object.AssociatedObject(
                        display_name = '', 
                        distinguished_name = '', 
                        last_dir_sync_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        mail = '', 
                        object_guid = '', 
                        object_type = '', 
                        onpremises_user_principal_name = '', 
                        proxy_addresses = '', 
                        source_anchor = '', 
                        source_of_authority = '', 
                        time_occurred = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        user_principal_name = '', ), 
                    export_error_status = 56, 
                    id = '', 
                    incoming_object = openapi_client.models.associated_object.AssociatedObject(
                        display_name = '', 
                        distinguished_name = '', 
                        last_dir_sync_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        mail = '', 
                        object_guid = '', 
                        object_type = '', 
                        onpremises_user_principal_name = '', 
                        proxy_addresses = '', 
                        source_anchor = '', 
                        source_of_authority = '', 
                        time_occurred = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        user_principal_name = '', ), 
                    incoming_object_display_name = '', 
                    incoming_object_type = '', 
                    merged_entity_id = '', 
                    modified_or_removed_attribute_value = '', 
                    run_step_result_id = '', 
                    sam_account_name = '', 
                    server_error_detail = '', 
                    service_id = '', 
                    service_member_id = '', 
                    time_first_occurred = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    time_occurred = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    type = '', 
                    user_principal_name = '', ),
                objects_with_sync_error = openapi_client.models.object_with_sync_error.ObjectWithSyncError(
                    attribute_multi_values = True, 
                    attribute_name = '', 
                    attribute_value = '', 
                    display_name = '', 
                    distinguished_name = '', 
                    error_type = '', 
                    mail = '', 
                    max_limit = '', 
                    min_limit = '', 
                    modififed_value = '', 
                    object_guid = '', 
                    object_type = '', 
                    source_anchor = '', 
                    source_of_authority = '', 
                    time_occured = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user_principal_name = '', )
            )
        else:
            return ErrorDetail(
        )
        """

    def testErrorDetail(self):
        """Test ErrorDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.import_errors import ImportErrors

class TestImportErrors(unittest.TestCase):
    """ImportErrors unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImportErrors:
        """Test ImportErrors
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImportErrors`
        """
        model = ImportErrors()
        if include_optional:
            return ImportErrors(
                value = [
                    openapi_client.models.import_error.ImportError(
                        algorithm_step_type = 'Undefined', 
                        change_not_reimported = openapi_client.models.change_not_reimported.ChangeNotReimported(
                            delta = openapi_client.models.change_not_reimported_delta.ChangeNotReimportedDelta(
                                anchor = '', 
                                attributes = [
                                    openapi_client.models.attribute_delta.AttributeDelta(
                                        multi_valued = True, 
                                        name = '', 
                                        operation_type = 'Undefined', 
                                        value_type = 'Undefined', 
                                        values = [
                                            openapi_client.models.value_delta.ValueDelta(
                                                operation_type = 'Undefined', 
                                                value = '', )
                                            ], )
                                    ], 
                                dn_attributes = [
                                    openapi_client.models.attribute_delta.AttributeDelta(
                                        multi_valued = True, 
                                        name = '', 
                                        operation_type = 'Undefined', 
                                        value_type = 'Undefined', )
                                    ], 
                                operation_type = 'Undefined', ), 
                            entry = openapi_client.models.change_not_reimported_entry.ChangeNotReimportedEntry(
                                anchor = '', 
                                dn = '', 
                                object_classes = [
                                    ''
                                    ], 
                                parent_anchor = '', 
                                primary_object_class = '', ), ), 
                        connector_id = '', 
                        cs_object_id = '', 
                        dn = '', 
                        extension_error_info = openapi_client.models.extension_error_info.ExtensionErrorInfo(
                            call_stack = '', 
                            extension_context = '', 
                            extension_name = '', ), 
                        id = '', 
                        retry_count = 56, 
                        rule_error_info = openapi_client.models.rule_error_info.RuleErrorInfo(
                            attribute_mapping = openapi_client.models.attribute_mapping.AttributeMapping(
                                context_id = '', 
                                destination_attribute = '', 
                                mapping_source = openapi_client.models.attribute_mpping_source.AttributeMppingSource(
                                    constant_value = '', 
                                    dn_part = 56, 
                                    script_context = '', 
                                    source_attribute = [
                                        ''
                                        ], ), 
                                type = 'Constant', ), 
                            connector_id = '', 
                            connector_name = '', 
                            cs_object_id = '', 
                            dn = '', ), 
                        run_step_result_id = '', 
                        time_first_occurred = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        time_occurred = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        type = '', )
                    ]
            )
        else:
            return ImportErrors(
        )
        """

    def testImportErrors(self):
        """Test ImportErrors"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.service_member import ServiceMember

class TestServiceMember(unittest.TestCase):
    """ServiceMember unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceMember:
        """Test ServiceMember
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceMember`
        """
        model = ServiceMember()
        if include_optional:
            return ServiceMember(
                active_alerts = 56,
                additional_information = '',
                created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dimensions = None,
                disabled = True,
                disabled_reason = 56,
                installed_qfes = None,
                last_disabled = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_reboot = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_server_reported_monitoring_level_change = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                machine_id = '',
                machine_name = '',
                monitoring_configurations_computed = None,
                monitoring_configurations_customized = None,
                os_name = '',
                os_version = '',
                properties = None,
                recommended_qfes = None,
                resolved_alerts = 56,
                role = '',
                server_reported_monitoring_level = 'Partial',
                service_id = '',
                service_member_id = '',
                status = '',
                tenant_id = ''
            )
        else:
            return ServiceMember(
        )
        """

    def testServiceMember(self):
        """Test ServiceMember"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

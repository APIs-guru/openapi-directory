# coding: utf-8

"""
    ADHybridHealthService

    REST APIs for Azure Active Directory Connect Health

    The version of the OpenAPI document: 2014-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.adds_service_member import AddsServiceMember

class TestAddsServiceMember(unittest.TestCase):
    """AddsServiceMember unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddsServiceMember:
        """Test AddsServiceMember
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddsServiceMember`
        """
        model = AddsServiceMember()
        if include_optional:
            return AddsServiceMember(
                active_alerts = 56,
                additional_information = '',
                adds_roles = [
                    ''
                    ],
                created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dc_types = [
                    ''
                    ],
                dimensions = [
                    openapi_client.models.item.Item(
                        key = '', 
                        value = '', )
                    ],
                disabled = True,
                disabled_reason = 56,
                domain_name = '',
                gc_reachable = True,
                installed_qfes = [
                    openapi_client.models.hotfix.Hotfix(
                        installed_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        kb_name = '', 
                        link = '', )
                    ],
                is_advertising = True,
                last_disabled = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_reboot = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_server_reported_monitoring_level_change = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                machine_id = '',
                machine_name = '',
                monitoring_configurations_computed = [
                    openapi_client.models.item.Item(
                        key = '', 
                        value = '', )
                    ],
                monitoring_configurations_customized = [
                    openapi_client.models.item.Item(
                        key = '', 
                        value = '', )
                    ],
                os_name = '',
                os_version = '',
                pdc_reachable = True,
                properties = [
                    openapi_client.models.item.Item(
                        key = '', 
                        value = '', )
                    ],
                recommended_qfes = [
                    openapi_client.models.hotfix.Hotfix(
                        installed_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        kb_name = '', 
                        link = '', )
                    ],
                resolved_alerts = 56,
                role = '',
                server_reported_monitoring_level = 'Partial',
                service_id = '',
                service_member_id = '',
                site_name = '',
                status = '',
                sysvol_state = True,
                tenant_id = ''
            )
        else:
            return AddsServiceMember(
        )
        """

    def testAddsServiceMember(self):
        """Test AddsServiceMember"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

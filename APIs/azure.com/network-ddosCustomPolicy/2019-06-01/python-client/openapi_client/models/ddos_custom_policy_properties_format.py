# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ddos_custom_policy_properties_format_public_ip_addresses_inner import DdosCustomPolicyPropertiesFormatPublicIPAddressesInner
from openapi_client.models.protocol_custom_settings_format import ProtocolCustomSettingsFormat
from typing import Optional, Set
from typing_extensions import Self

class DdosCustomPolicyPropertiesFormat(BaseModel):
    """
    DDoS custom policy properties.
    """ # noqa: E501
    protocol_custom_settings: Optional[List[ProtocolCustomSettingsFormat]] = Field(default=None, description="The protocol-specific DDoS policy customization parameters.", alias="protocolCustomSettings")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the DDoS custom policy resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    public_ip_addresses: Optional[List[DdosCustomPolicyPropertiesFormatPublicIPAddressesInner]] = Field(default=None, description="The list of public IPs associated with the DDoS custom policy resource. This list is read-only.", alias="publicIPAddresses")
    resource_guid: Optional[StrictStr] = Field(default=None, description="The resource GUID property of the DDoS custom policy resource. It uniquely identifies the resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.", alias="resourceGuid")
    __properties: ClassVar[List[str]] = ["protocolCustomSettings", "provisioningState", "publicIPAddresses", "resourceGuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DdosCustomPolicyPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "public_ip_addresses",
            "resource_guid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in protocol_custom_settings (list)
        _items = []
        if self.protocol_custom_settings:
            for _item_protocol_custom_settings in self.protocol_custom_settings:
                if _item_protocol_custom_settings:
                    _items.append(_item_protocol_custom_settings.to_dict())
            _dict['protocolCustomSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in public_ip_addresses (list)
        _items = []
        if self.public_ip_addresses:
            for _item_public_ip_addresses in self.public_ip_addresses:
                if _item_public_ip_addresses:
                    _items.append(_item_public_ip_addresses.to_dict())
            _dict['publicIPAddresses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DdosCustomPolicyPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "protocolCustomSettings": [ProtocolCustomSettingsFormat.from_dict(_item) for _item in obj["protocolCustomSettings"]] if obj.get("protocolCustomSettings") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "publicIPAddresses": [DdosCustomPolicyPropertiesFormatPublicIPAddressesInner.from_dict(_item) for _item in obj["publicIPAddresses"]] if obj.get("publicIPAddresses") is not None else None,
            "resourceGuid": obj.get("resourceGuid")
        })
        return _obj



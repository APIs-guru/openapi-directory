# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2018-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.management_policy import ManagementPolicy

class TestManagementPolicy(unittest.TestCase):
    """ManagementPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ManagementPolicy:
        """Test ManagementPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ManagementPolicy`
        """
        model = ManagementPolicy()
        if include_optional:
            return ManagementPolicy(
                properties = openapi_client.models.management_policy_properties.ManagementPolicyProperties(
                    last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    policy = openapi_client.models.management_policy_schema.ManagementPolicySchema(
                        rules = [
                            openapi_client.models.management_policy_rule.ManagementPolicyRule(
                                definition = openapi_client.models.management_policy_definition.ManagementPolicyDefinition(
                                    actions = openapi_client.models.management_policy_action.ManagementPolicyAction(
                                        base_blob = openapi_client.models.management_policy_base_blob.ManagementPolicyBaseBlob(
                                            delete = openapi_client.models.date_after_modification.DateAfterModification(
                                                days_after_modification_greater_than = 0, ), 
                                            tier_to_archive = openapi_client.models.date_after_modification.DateAfterModification(
                                                days_after_modification_greater_than = 0, ), 
                                            tier_to_cool = , ), 
                                        snapshot = openapi_client.models.management_policy_snap_shot.ManagementPolicySnapShot(), ), 
                                    filters = openapi_client.models.management_policy_filter.ManagementPolicyFilter(
                                        blob_types = [
                                            ''
                                            ], 
                                        prefix_match = [
                                            ''
                                            ], ), ), 
                                enabled = True, 
                                name = '', 
                                type = 'Lifecycle', )
                            ], ), ),
                id = '',
                name = '',
                type = ''
            )
        else:
            return ManagementPolicy(
        )
        """

    def testManagementPolicy(self):
        """Test ManagementPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2018-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.encryption import Encryption

class TestEncryption(unittest.TestCase):
    """Encryption unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Encryption:
        """Test Encryption
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Encryption`
        """
        model = Encryption()
        if include_optional:
            return Encryption(
                key_source = 'Microsoft.Storage',
                keyvaultproperties = openapi_client.models.key_vault_properties.KeyVaultProperties(
                    keyname = '', 
                    keyvaulturi = '', 
                    keyversion = '', ),
                services = openapi_client.models.encryption_services.EncryptionServices(
                    blob = openapi_client.models.encryption_service.EncryptionService(
                        enabled = True, 
                        last_enabled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    file = openapi_client.models.encryption_service.EncryptionService(
                        enabled = True, 
                        last_enabled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    queue = , 
                    table = , )
            )
        else:
            return Encryption(
                key_source = 'Microsoft.Storage',
        )
        """

    def testEncryption(self):
        """Test Encryption"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

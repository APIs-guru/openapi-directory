# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_domain import CustomDomain
from openapi_client.models.encryption import Encryption
from openapi_client.models.endpoints import Endpoints
from openapi_client.models.geo_replication_stats import GeoReplicationStats
from openapi_client.models.network_rule_set import NetworkRuleSet
from typing import Optional, Set
from typing_extensions import Self

class StorageAccountProperties(BaseModel):
    """
    Properties of the storage account.
    """ # noqa: E501
    access_tier: Optional[StrictStr] = Field(default=None, description="Required for storage accounts where kind = BlobStorage. The access tier used for billing.", alias="accessTier")
    azure_files_aad_integration: Optional[StrictBool] = Field(default=None, description="Enables Azure Files AAD Integration for SMB if sets to true.", alias="azureFilesAadIntegration")
    creation_time: Optional[datetime] = Field(default=None, description="Gets the creation date and time of the storage account in UTC.", alias="creationTime")
    custom_domain: Optional[CustomDomain] = Field(default=None, alias="customDomain")
    encryption: Optional[Encryption] = None
    failover_in_progress: Optional[StrictBool] = Field(default=None, description="If the failover is in progress, the value will be true, otherwise, it will be null.", alias="failoverInProgress")
    geo_replication_stats: Optional[GeoReplicationStats] = Field(default=None, alias="geoReplicationStats")
    is_hns_enabled: Optional[StrictBool] = Field(default=None, description="Account HierarchicalNamespace enabled if sets to true.", alias="isHnsEnabled")
    last_geo_failover_time: Optional[datetime] = Field(default=None, description="Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.", alias="lastGeoFailoverTime")
    network_acls: Optional[NetworkRuleSet] = Field(default=None, alias="networkAcls")
    primary_endpoints: Optional[Endpoints] = Field(default=None, alias="primaryEndpoints")
    primary_location: Optional[StrictStr] = Field(default=None, description="Gets the location of the primary data center for the storage account.", alias="primaryLocation")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets the status of the storage account at the time the operation was called.", alias="provisioningState")
    secondary_endpoints: Optional[Endpoints] = Field(default=None, alias="secondaryEndpoints")
    secondary_location: Optional[StrictStr] = Field(default=None, description="Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.", alias="secondaryLocation")
    status_of_primary: Optional[StrictStr] = Field(default=None, description="Gets the status indicating whether the primary location of the storage account is available or unavailable.", alias="statusOfPrimary")
    status_of_secondary: Optional[StrictStr] = Field(default=None, description="Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.", alias="statusOfSecondary")
    supports_https_traffic_only: Optional[StrictBool] = Field(default=None, description="Allows https traffic only to storage service if sets to true.", alias="supportsHttpsTrafficOnly")
    __properties: ClassVar[List[str]] = ["accessTier", "azureFilesAadIntegration", "creationTime", "customDomain", "encryption", "failoverInProgress", "geoReplicationStats", "isHnsEnabled", "lastGeoFailoverTime", "networkAcls", "primaryEndpoints", "primaryLocation", "provisioningState", "secondaryEndpoints", "secondaryLocation", "statusOfPrimary", "statusOfSecondary", "supportsHttpsTrafficOnly"]

    @field_validator('access_tier')
    def access_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Hot', 'Cool']):
            raise ValueError("must be one of enum values ('Hot', 'Cool')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'ResolvingDNS', 'Succeeded']):
            raise ValueError("must be one of enum values ('Creating', 'ResolvingDNS', 'Succeeded')")
        return value

    @field_validator('status_of_primary')
    def status_of_primary_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['available', 'unavailable']):
            raise ValueError("must be one of enum values ('available', 'unavailable')")
        return value

    @field_validator('status_of_secondary')
    def status_of_secondary_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['available', 'unavailable']):
            raise ValueError("must be one of enum values ('available', 'unavailable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "access_tier",
            "creation_time",
            "failover_in_progress",
            "last_geo_failover_time",
            "primary_location",
            "provisioning_state",
            "secondary_location",
            "status_of_primary",
            "status_of_secondary",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_domain
        if self.custom_domain:
            _dict['customDomain'] = self.custom_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_replication_stats
        if self.geo_replication_stats:
            _dict['geoReplicationStats'] = self.geo_replication_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_acls
        if self.network_acls:
            _dict['networkAcls'] = self.network_acls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_endpoints
        if self.primary_endpoints:
            _dict['primaryEndpoints'] = self.primary_endpoints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_endpoints
        if self.secondary_endpoints:
            _dict['secondaryEndpoints'] = self.secondary_endpoints.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessTier": obj.get("accessTier"),
            "azureFilesAadIntegration": obj.get("azureFilesAadIntegration"),
            "creationTime": obj.get("creationTime"),
            "customDomain": CustomDomain.from_dict(obj["customDomain"]) if obj.get("customDomain") is not None else None,
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "failoverInProgress": obj.get("failoverInProgress"),
            "geoReplicationStats": GeoReplicationStats.from_dict(obj["geoReplicationStats"]) if obj.get("geoReplicationStats") is not None else None,
            "isHnsEnabled": obj.get("isHnsEnabled"),
            "lastGeoFailoverTime": obj.get("lastGeoFailoverTime"),
            "networkAcls": NetworkRuleSet.from_dict(obj["networkAcls"]) if obj.get("networkAcls") is not None else None,
            "primaryEndpoints": Endpoints.from_dict(obj["primaryEndpoints"]) if obj.get("primaryEndpoints") is not None else None,
            "primaryLocation": obj.get("primaryLocation"),
            "provisioningState": obj.get("provisioningState"),
            "secondaryEndpoints": Endpoints.from_dict(obj["secondaryEndpoints"]) if obj.get("secondaryEndpoints") is not None else None,
            "secondaryLocation": obj.get("secondaryLocation"),
            "statusOfPrimary": obj.get("statusOfPrimary"),
            "statusOfSecondary": obj.get("statusOfSecondary"),
            "supportsHttpsTrafficOnly": obj.get("supportsHttpsTrafficOnly")
        })
        return _obj



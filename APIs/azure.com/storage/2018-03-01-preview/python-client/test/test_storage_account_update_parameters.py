# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2018-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.storage_account_update_parameters import StorageAccountUpdateParameters

class TestStorageAccountUpdateParameters(unittest.TestCase):
    """StorageAccountUpdateParameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StorageAccountUpdateParameters:
        """Test StorageAccountUpdateParameters
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StorageAccountUpdateParameters`
        """
        model = StorageAccountUpdateParameters()
        if include_optional:
            return StorageAccountUpdateParameters(
                identity = openapi_client.models.identity.Identity(
                    principal_id = '', 
                    tenant_id = '', 
                    type = 'SystemAssigned', ),
                kind = 'Storage',
                properties = openapi_client.models.storage_account_properties_update_parameters.StorageAccountPropertiesUpdateParameters(
                    access_tier = 'Hot', 
                    custom_domain = openapi_client.models.custom_domain.CustomDomain(
                        name = '', 
                        use_sub_domain_name = True, ), 
                    encryption = openapi_client.models.encryption.Encryption(
                        key_source = 'Microsoft.Storage', 
                        keyvaultproperties = openapi_client.models.key_vault_properties.KeyVaultProperties(
                            keyname = '', 
                            keyvaulturi = '', 
                            keyversion = '', ), 
                        services = openapi_client.models.encryption_services.EncryptionServices(
                            blob = openapi_client.models.encryption_service.EncryptionService(
                                enabled = True, 
                                last_enabled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            file = openapi_client.models.encryption_service.EncryptionService(
                                enabled = True, 
                                last_enabled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            queue = , 
                            table = , ), ), 
                    network_acls = openapi_client.models.network_rule_set.NetworkRuleSet(
                        bypass = 'AzureServices', 
                        default_action = 'Allow', 
                        ip_rules = [
                            openapi_client.models.ip_rule.IPRule(
                                action = 'Allow', 
                                value = '', )
                            ], 
                        virtual_network_rules = [
                            openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                                action = 'Allow', 
                                id = '', 
                                state = 'provisioning', )
                            ], ), 
                    supports_https_traffic_only = True, ),
                sku = openapi_client.models.sku.Sku(
                    capabilities = [
                        openapi_client.models.sku_capability.SKUCapability(
                            name = '', 
                            value = '', )
                        ], 
                    kind = 'Storage', 
                    locations = [
                        ''
                        ], 
                    name = 'Standard_LRS', 
                    resource_type = '', 
                    restrictions = [
                        openapi_client.models.restriction.Restriction(
                            reason_code = 'QuotaId', 
                            type = '', 
                            values = [
                                ''
                                ], )
                        ], 
                    tier = 'Standard', ),
                tags = {
                    'key' : ''
                    }
            )
        else:
            return StorageAccountUpdateParameters(
        )
        """

    def testStorageAccountUpdateParameters(self):
        """Test StorageAccountUpdateParameters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

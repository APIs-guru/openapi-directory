# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.identity import Identity
from openapi_client.models.sku import Sku
from openapi_client.models.storage_account_properties_create_parameters import StorageAccountPropertiesCreateParameters
from typing import Optional, Set
from typing_extensions import Self

class StorageAccountCreateParameters(BaseModel):
    """
    The parameters used when creating a storage account.
    """ # noqa: E501
    identity: Optional[Identity] = None
    kind: StrictStr = Field(description="Required. Indicates the type of storage account.")
    location: StrictStr = Field(description="Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.")
    properties: Optional[StorageAccountPropertiesCreateParameters] = None
    sku: Sku
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.")
    __properties: ClassVar[List[str]] = ["identity", "kind", "location", "properties", "sku", "tags"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Storage', 'StorageV2', 'BlobStorage', 'FileStorage', 'BlockBlobStorage']):
            raise ValueError("must be one of enum values ('Storage', 'StorageV2', 'BlobStorage', 'FileStorage', 'BlockBlobStorage')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageAccountCreateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageAccountCreateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identity": Identity.from_dict(obj["identity"]) if obj.get("identity") is not None else None,
            "kind": obj.get("kind"),
            "location": obj.get("location"),
            "properties": StorageAccountPropertiesCreateParameters.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "sku": Sku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "tags": obj.get("tags")
        })
        return _obj



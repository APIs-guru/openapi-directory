# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.management_policy_schema import ManagementPolicySchema

class TestManagementPolicySchema(unittest.TestCase):
    """ManagementPolicySchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ManagementPolicySchema:
        """Test ManagementPolicySchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ManagementPolicySchema`
        """
        model = ManagementPolicySchema()
        if include_optional:
            return ManagementPolicySchema(
                rules = [
                    openapi_client.models.management_policy_rule.ManagementPolicyRule(
                        definition = openapi_client.models.management_policy_definition.ManagementPolicyDefinition(
                            actions = openapi_client.models.management_policy_action.ManagementPolicyAction(
                                base_blob = openapi_client.models.management_policy_base_blob.ManagementPolicyBaseBlob(
                                    delete = openapi_client.models.date_after_modification.DateAfterModification(
                                        days_after_modification_greater_than = 0, ), 
                                    tier_to_archive = openapi_client.models.date_after_modification.DateAfterModification(
                                        days_after_modification_greater_than = 0, ), 
                                    tier_to_cool = , ), 
                                snapshot = openapi_client.models.management_policy_snap_shot.ManagementPolicySnapShot(), ), 
                            filters = openapi_client.models.management_policy_filter.ManagementPolicyFilter(
                                blob_types = [
                                    ''
                                    ], 
                                prefix_match = [
                                    ''
                                    ], ), ), 
                        enabled = True, 
                        name = '', 
                        type = 'Lifecycle', )
                    ]
            )
        else:
            return ManagementPolicySchema(
                rules = [
                    openapi_client.models.management_policy_rule.ManagementPolicyRule(
                        definition = openapi_client.models.management_policy_definition.ManagementPolicyDefinition(
                            actions = openapi_client.models.management_policy_action.ManagementPolicyAction(
                                base_blob = openapi_client.models.management_policy_base_blob.ManagementPolicyBaseBlob(
                                    delete = openapi_client.models.date_after_modification.DateAfterModification(
                                        days_after_modification_greater_than = 0, ), 
                                    tier_to_archive = openapi_client.models.date_after_modification.DateAfterModification(
                                        days_after_modification_greater_than = 0, ), 
                                    tier_to_cool = , ), 
                                snapshot = openapi_client.models.management_policy_snap_shot.ManagementPolicySnapShot(), ), 
                            filters = openapi_client.models.management_policy_filter.ManagementPolicyFilter(
                                blob_types = [
                                    ''
                                    ], 
                                prefix_match = [
                                    ''
                                    ], ), ), 
                        enabled = True, 
                        name = '', 
                        type = 'Lifecycle', )
                    ],
        )
        """

    def testManagementPolicySchema(self):
        """Test ManagementPolicySchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.storage_account_list_result import StorageAccountListResult

class TestStorageAccountListResult(unittest.TestCase):
    """StorageAccountListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StorageAccountListResult:
        """Test StorageAccountListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StorageAccountListResult`
        """
        model = StorageAccountListResult()
        if include_optional:
            return StorageAccountListResult(
                next_link = '',
                value = [
                    openapi_client.models.storage_account.StorageAccount(
                        identity = openapi_client.models.identity.Identity(
                            principal_id = '', 
                            tenant_id = '', 
                            type = 'SystemAssigned', ), 
                        kind = 'Storage', 
                        properties = openapi_client.models.storage_account_properties.StorageAccountProperties(
                            access_tier = 'Hot', 
                            azure_files_identity_based_authentication = openapi_client.models.azure_files_identity_based_authentication.AzureFilesIdentityBasedAuthentication(
                                active_directory_properties = openapi_client.models.active_directory_properties.ActiveDirectoryProperties(
                                    azure_storage_sid = '', 
                                    domain_guid = '', 
                                    domain_name = '', 
                                    domain_sid = '', 
                                    forest_name = '', 
                                    net_bios_domain_name = '', ), 
                                directory_service_options = 'None', ), 
                            blob_restore_status = openapi_client.models.blob_restore_status.BlobRestoreStatus(
                                failure_reason = '', 
                                parameters = openapi_client.models.blob_restore_parameters.BlobRestoreParameters(
                                    blob_ranges = [
                                        openapi_client.models.blob_restore_range.BlobRestoreRange(
                                            end_range = '', 
                                            start_range = '', )
                                        ], 
                                    time_to_restore = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                restore_id = '', 
                                status = 'InProgress', ), 
                            creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            custom_domain = openapi_client.models.custom_domain.CustomDomain(
                                name = '', 
                                use_sub_domain_name = True, ), 
                            encryption = openapi_client.models.encryption.Encryption(
                                key_source = 'Microsoft.Storage', 
                                keyvaultproperties = openapi_client.models.key_vault_properties.KeyVaultProperties(
                                    keyname = '', 
                                    keyvaulturi = '', 
                                    keyversion = '', ), 
                                services = openapi_client.models.encryption_services.EncryptionServices(
                                    blob = openapi_client.models.encryption_service.EncryptionService(
                                        enabled = True, 
                                        key_type = 'Service', 
                                        last_enabled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    file = openapi_client.models.encryption_service.EncryptionService(
                                        enabled = True, 
                                        key_type = 'Service', 
                                        last_enabled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    queue = , 
                                    table = , ), ), 
                            failover_in_progress = True, 
                            geo_replication_stats = openapi_client.models.geo_replication_stats.GeoReplicationStats(
                                can_failover = True, 
                                last_sync_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                status = 'Live', ), 
                            is_hns_enabled = True, 
                            large_file_shares_state = 'Disabled', 
                            last_geo_failover_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            network_acls = openapi_client.models.network_rule_set.NetworkRuleSet(
                                bypass = 'AzureServices', 
                                default_action = 'Allow', 
                                ip_rules = [
                                    openapi_client.models.ip_rule.IPRule(
                                        action = 'Allow', 
                                        value = '', )
                                    ], 
                                virtual_network_rules = [
                                    openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                                        action = 'Allow', 
                                        id = '', 
                                        state = 'provisioning', )
                                    ], ), 
                            primary_endpoints = openapi_client.models.endpoints.Endpoints(
                                dfs = '', 
                                internet_endpoints = openapi_client.models.storage_account_internet_endpoints.StorageAccountInternetEndpoints(
                                    dfs = '', 
                                    web = '', ), 
                                microsoft_endpoints = openapi_client.models.storage_account_microsoft_endpoints.StorageAccountMicrosoftEndpoints(
                                    dfs = '', 
                                    web = '', ), 
                                web = '', ), 
                            primary_location = '', 
                            private_endpoint_connections = [
                                openapi_client.models.private_endpoint_connection.PrivateEndpointConnection()
                                ], 
                            provisioning_state = 'Creating', 
                            routing_preference = openapi_client.models.routing_preference.RoutingPreference(
                                publish_internet_endpoints = True, 
                                publish_microsoft_endpoints = True, 
                                routing_choice = 'MicrosoftRouting', ), 
                            secondary_endpoints = openapi_client.models.endpoints.Endpoints(
                                dfs = '', 
                                web = '', ), 
                            secondary_location = '', 
                            status_of_primary = 'available', 
                            status_of_secondary = 'available', 
                            supports_https_traffic_only = True, ), 
                        sku = openapi_client.models.sku.sku(
                            name = 'Standard_LRS', 
                            tier = 'Standard', ), )
                    ]
            )
        else:
            return StorageAccountListResult(
        )
        """

    def testStorageAccountListResult(self):
        """Test StorageAccountListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

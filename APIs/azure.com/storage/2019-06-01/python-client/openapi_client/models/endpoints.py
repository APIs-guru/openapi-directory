# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.storage_account_internet_endpoints import StorageAccountInternetEndpoints
from openapi_client.models.storage_account_microsoft_endpoints import StorageAccountMicrosoftEndpoints
from typing import Optional, Set
from typing_extensions import Self

class Endpoints(BaseModel):
    """
    The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
    """ # noqa: E501
    blob: Optional[StrictStr] = Field(default=None, description="Gets the blob endpoint.")
    dfs: Optional[StrictStr] = Field(default=None, description="Gets the dfs endpoint.")
    file: Optional[StrictStr] = Field(default=None, description="Gets the file endpoint.")
    internet_endpoints: Optional[StorageAccountInternetEndpoints] = Field(default=None, alias="internetEndpoints")
    microsoft_endpoints: Optional[StorageAccountMicrosoftEndpoints] = Field(default=None, alias="microsoftEndpoints")
    queue: Optional[StrictStr] = Field(default=None, description="Gets the queue endpoint.")
    table: Optional[StrictStr] = Field(default=None, description="Gets the table endpoint.")
    web: Optional[StrictStr] = Field(default=None, description="Gets the web endpoint.")
    __properties: ClassVar[List[str]] = ["blob", "dfs", "file", "internetEndpoints", "microsoftEndpoints", "queue", "table", "web"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Endpoints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "blob",
            "dfs",
            "file",
            "queue",
            "table",
            "web",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of internet_endpoints
        if self.internet_endpoints:
            _dict['internetEndpoints'] = self.internet_endpoints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microsoft_endpoints
        if self.microsoft_endpoints:
            _dict['microsoftEndpoints'] = self.microsoft_endpoints.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Endpoints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blob": obj.get("blob"),
            "dfs": obj.get("dfs"),
            "file": obj.get("file"),
            "internetEndpoints": StorageAccountInternetEndpoints.from_dict(obj["internetEndpoints"]) if obj.get("internetEndpoints") is not None else None,
            "microsoftEndpoints": StorageAccountMicrosoftEndpoints.from_dict(obj["microsoftEndpoints"]) if obj.get("microsoftEndpoints") is not None else None,
            "queue": obj.get("queue"),
            "table": obj.get("table"),
            "web": obj.get("web")
        })
        return _obj



# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServiceSasParameters(BaseModel):
    """
    The parameters to list service SAS credentials of a specific resource.
    """ # noqa: E501
    canonicalized_resource: StrictStr = Field(description="The canonical path to the signed resource.", alias="canonicalizedResource")
    end_pk: Optional[StrictStr] = Field(default=None, description="The end of partition key.", alias="endPk")
    end_rk: Optional[StrictStr] = Field(default=None, description="The end of row key.", alias="endRk")
    key_to_sign: Optional[StrictStr] = Field(default=None, description="The key to sign the account SAS token with.", alias="keyToSign")
    rscc: Optional[StrictStr] = Field(default=None, description="The response header override for cache control.")
    rscd: Optional[StrictStr] = Field(default=None, description="The response header override for content disposition.")
    rsce: Optional[StrictStr] = Field(default=None, description="The response header override for content encoding.")
    rscl: Optional[StrictStr] = Field(default=None, description="The response header override for content language.")
    rsct: Optional[StrictStr] = Field(default=None, description="The response header override for content type.")
    signed_expiry: Optional[datetime] = Field(default=None, description="The time at which the shared access signature becomes invalid.", alias="signedExpiry")
    signed_identifier: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.", alias="signedIdentifier")
    signed_ip: Optional[StrictStr] = Field(default=None, description="An IP address or a range of IP addresses from which to accept requests.", alias="signedIp")
    signed_permission: Optional[StrictStr] = Field(default=None, description="The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).", alias="signedPermission")
    signed_protocol: Optional[StrictStr] = Field(default=None, description="The protocol permitted for a request made with the account SAS.", alias="signedProtocol")
    signed_resource: Optional[StrictStr] = Field(default=None, description="The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).", alias="signedResource")
    signed_start: Optional[datetime] = Field(default=None, description="The time at which the SAS becomes valid.", alias="signedStart")
    start_pk: Optional[StrictStr] = Field(default=None, description="The start of partition key.", alias="startPk")
    start_rk: Optional[StrictStr] = Field(default=None, description="The start of row key.", alias="startRk")
    __properties: ClassVar[List[str]] = ["canonicalizedResource", "endPk", "endRk", "keyToSign", "rscc", "rscd", "rsce", "rscl", "rsct", "signedExpiry", "signedIdentifier", "signedIp", "signedPermission", "signedProtocol", "signedResource", "signedStart", "startPk", "startRk"]

    @field_validator('signed_permission')
    def signed_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['r', 'd', 'w', 'l', 'a', 'c', 'u', 'p']):
            raise ValueError("must be one of enum values ('r', 'd', 'w', 'l', 'a', 'c', 'u', 'p')")
        return value

    @field_validator('signed_protocol')
    def signed_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['https,http', 'https']):
            raise ValueError("must be one of enum values ('https,http', 'https')")
        return value

    @field_validator('signed_resource')
    def signed_resource_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['b', 'c', 'f', 's']):
            raise ValueError("must be one of enum values ('b', 'c', 'f', 's')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceSasParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceSasParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canonicalizedResource": obj.get("canonicalizedResource"),
            "endPk": obj.get("endPk"),
            "endRk": obj.get("endRk"),
            "keyToSign": obj.get("keyToSign"),
            "rscc": obj.get("rscc"),
            "rscd": obj.get("rscd"),
            "rsce": obj.get("rsce"),
            "rscl": obj.get("rscl"),
            "rsct": obj.get("rsct"),
            "signedExpiry": obj.get("signedExpiry"),
            "signedIdentifier": obj.get("signedIdentifier"),
            "signedIp": obj.get("signedIp"),
            "signedPermission": obj.get("signedPermission"),
            "signedProtocol": obj.get("signedProtocol"),
            "signedResource": obj.get("signedResource"),
            "signedStart": obj.get("signedStart"),
            "startPk": obj.get("startPk"),
            "startRk": obj.get("startRk")
        })
        return _obj



# coding: utf-8

"""
    StorageManagement

    The Azure Storage Management API.

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountSasParameters(BaseModel):
    """
    The parameters to list SAS credentials of a storage account.
    """ # noqa: E501
    key_to_sign: Optional[StrictStr] = Field(default=None, description="The key to sign the account SAS token with.", alias="keyToSign")
    signed_expiry: datetime = Field(description="The time at which the shared access signature becomes invalid.", alias="signedExpiry")
    signed_ip: Optional[StrictStr] = Field(default=None, description="An IP address or a range of IP addresses from which to accept requests.", alias="signedIp")
    signed_permission: StrictStr = Field(description="The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).", alias="signedPermission")
    signed_protocol: Optional[StrictStr] = Field(default=None, description="The protocol permitted for a request made with the account SAS.", alias="signedProtocol")
    signed_resource_types: StrictStr = Field(description="The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.", alias="signedResourceTypes")
    signed_services: StrictStr = Field(description="The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).", alias="signedServices")
    signed_start: Optional[datetime] = Field(default=None, description="The time at which the SAS becomes valid.", alias="signedStart")
    __properties: ClassVar[List[str]] = ["keyToSign", "signedExpiry", "signedIp", "signedPermission", "signedProtocol", "signedResourceTypes", "signedServices", "signedStart"]

    @field_validator('signed_permission')
    def signed_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['r', 'd', 'w', 'l', 'a', 'c', 'u', 'p']):
            raise ValueError("must be one of enum values ('r', 'd', 'w', 'l', 'a', 'c', 'u', 'p')")
        return value

    @field_validator('signed_protocol')
    def signed_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['https,http', 'https']):
            raise ValueError("must be one of enum values ('https,http', 'https')")
        return value

    @field_validator('signed_resource_types')
    def signed_resource_types_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['s', 'c', 'o']):
            raise ValueError("must be one of enum values ('s', 'c', 'o')")
        return value

    @field_validator('signed_services')
    def signed_services_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['b', 'q', 't', 'f']):
            raise ValueError("must be one of enum values ('b', 'q', 't', 'f')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSasParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSasParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyToSign": obj.get("keyToSign"),
            "signedExpiry": obj.get("signedExpiry"),
            "signedIp": obj.get("signedIp"),
            "signedPermission": obj.get("signedPermission"),
            "signedProtocol": obj.get("signedProtocol"),
            "signedResourceTypes": obj.get("signedResourceTypes"),
            "signedServices": obj.get("signedServices"),
            "signedStart": obj.get("signedStart")
        })
        return _obj



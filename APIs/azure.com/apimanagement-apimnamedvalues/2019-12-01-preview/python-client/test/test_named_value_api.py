# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on NamedValue entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and NamedValues. Each API Management service instance has a NamedValues collection of key/value pairs that are global to the service instance. These NamedValues can be used to manage constant string values across all API configuration and policies.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.named_value_api import NamedValueApi


class TestNamedValueApi(unittest.TestCase):
    """NamedValueApi unit test stubs"""

    def setUp(self) -> None:
        self.api = NamedValueApi()

    def tearDown(self) -> None:
        pass

    def test_named_value_create_or_update(self) -> None:
        """Test case for named_value_create_or_update

        """
        pass

    def test_named_value_delete(self) -> None:
        """Test case for named_value_delete

        """
        pass

    def test_named_value_get(self) -> None:
        """Test case for named_value_get

        """
        pass

    def test_named_value_get_entity_tag(self) -> None:
        """Test case for named_value_get_entity_tag

        """
        pass

    def test_named_value_list_by_service(self) -> None:
        """Test case for named_value_list_by_service

        """
        pass

    def test_named_value_list_value(self) -> None:
        """Test case for named_value_list_value

        """
        pass

    def test_named_value_update(self) -> None:
        """Test case for named_value_update

        """
        pass


if __name__ == '__main__':
    unittest.main()

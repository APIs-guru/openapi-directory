# coding: utf-8

"""
    TrafficManagerManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MonitorConfig(BaseModel):
    """
    Class containing endpoint monitoring settings in a Traffic Manager profile.
    """ # noqa: E501
    interval_in_seconds: Optional[StrictInt] = Field(default=None, description="The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.", alias="intervalInSeconds")
    path: Optional[StrictStr] = Field(default=None, description="The path relative to the endpoint domain name used to probe for endpoint health.")
    port: Optional[StrictInt] = Field(default=None, description="The TCP port used to probe for endpoint health.")
    profile_monitor_status: Optional[StrictStr] = Field(default=None, description="The profile-level monitoring status of the Traffic Manager profile.", alias="profileMonitorStatus")
    protocol: Optional[StrictStr] = Field(default=None, description="The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.")
    timeout_in_seconds: Optional[StrictInt] = Field(default=None, description="The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.", alias="timeoutInSeconds")
    tolerated_number_of_failures: Optional[StrictInt] = Field(default=None, description="The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.", alias="toleratedNumberOfFailures")
    __properties: ClassVar[List[str]] = ["intervalInSeconds", "path", "port", "profileMonitorStatus", "protocol", "timeoutInSeconds", "toleratedNumberOfFailures"]

    @field_validator('profile_monitor_status')
    def profile_monitor_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CheckingEndpoints', 'Online', 'Degraded', 'Disabled', 'Inactive']):
            raise ValueError("must be one of enum values ('CheckingEndpoints', 'Online', 'Degraded', 'Disabled', 'Inactive')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HTTP', 'HTTPS', 'TCP']):
            raise ValueError("must be one of enum values ('HTTP', 'HTTPS', 'TCP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonitorConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonitorConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "intervalInSeconds": obj.get("intervalInSeconds"),
            "path": obj.get("path"),
            "port": obj.get("port"),
            "profileMonitorStatus": obj.get("profileMonitorStatus"),
            "protocol": obj.get("protocol"),
            "timeoutInSeconds": obj.get("timeoutInSeconds"),
            "toleratedNumberOfFailures": obj.get("toleratedNumberOfFailures")
        })
        return _obj



# coding: utf-8

"""
    TrafficManagerManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.endpoint_properties_custom_headers_inner import EndpointPropertiesCustomHeadersInner
from openapi_client.models.endpoint_properties_subnets_inner import EndpointPropertiesSubnetsInner
from typing import Optional, Set
from typing_extensions import Self

class EndpointProperties(BaseModel):
    """
    Class representing a Traffic Manager endpoint properties.
    """ # noqa: E501
    custom_headers: Optional[List[EndpointPropertiesCustomHeadersInner]] = Field(default=None, description="List of custom headers.", alias="customHeaders")
    endpoint_location: Optional[StrictStr] = Field(default=None, description="Specifies the location of the external or nested endpoints when using the 'Performance' traffic routing method.", alias="endpointLocation")
    endpoint_monitor_status: Optional[StrictStr] = Field(default=None, description="The monitoring status of the endpoint.", alias="endpointMonitorStatus")
    endpoint_status: Optional[StrictStr] = Field(default=None, description="The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.", alias="endpointStatus")
    geo_mapping: Optional[List[StrictStr]] = Field(default=None, description="The list of countries/regions mapped to this endpoint when using the 'Geographic' traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.", alias="geoMapping")
    min_child_endpoints: Optional[StrictInt] = Field(default=None, description="The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.", alias="minChildEndpoints")
    priority: Optional[StrictInt] = Field(default=None, description="The priority of this endpoint when using the 'Priority' traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.")
    subnets: Optional[List[EndpointPropertiesSubnetsInner]] = Field(default=None, description="The list of subnets, IP addresses, and/or address ranges mapped to this endpoint when using the 'Subnet' traffic routing method. An empty list will match all ranges not covered by other endpoints.")
    target: Optional[StrictStr] = Field(default=None, description="The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.")
    target_resource_id: Optional[StrictStr] = Field(default=None, description="The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.", alias="targetResourceId")
    weight: Optional[StrictInt] = Field(default=None, description="The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.")
    __properties: ClassVar[List[str]] = ["customHeaders", "endpointLocation", "endpointMonitorStatus", "endpointStatus", "geoMapping", "minChildEndpoints", "priority", "subnets", "target", "targetResourceId", "weight"]

    @field_validator('endpoint_monitor_status')
    def endpoint_monitor_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CheckingEndpoint', 'Online', 'Degraded', 'Disabled', 'Inactive', 'Stopped']):
            raise ValueError("must be one of enum values ('CheckingEndpoint', 'Online', 'Degraded', 'Disabled', 'Inactive', 'Stopped')")
        return value

    @field_validator('endpoint_status')
    def endpoint_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndpointProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_headers (list)
        _items = []
        if self.custom_headers:
            for _item_custom_headers in self.custom_headers:
                if _item_custom_headers:
                    _items.append(_item_custom_headers.to_dict())
            _dict['customHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnets (list)
        _items = []
        if self.subnets:
            for _item_subnets in self.subnets:
                if _item_subnets:
                    _items.append(_item_subnets.to_dict())
            _dict['subnets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndpointProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customHeaders": [EndpointPropertiesCustomHeadersInner.from_dict(_item) for _item in obj["customHeaders"]] if obj.get("customHeaders") is not None else None,
            "endpointLocation": obj.get("endpointLocation"),
            "endpointMonitorStatus": obj.get("endpointMonitorStatus"),
            "endpointStatus": obj.get("endpointStatus"),
            "geoMapping": obj.get("geoMapping"),
            "minChildEndpoints": obj.get("minChildEndpoints"),
            "priority": obj.get("priority"),
            "subnets": [EndpointPropertiesSubnetsInner.from_dict(_item) for _item in obj["subnets"]] if obj.get("subnets") is not None else None,
            "target": obj.get("target"),
            "targetResourceId": obj.get("targetResourceId"),
            "weight": obj.get("weight")
        })
        return _obj



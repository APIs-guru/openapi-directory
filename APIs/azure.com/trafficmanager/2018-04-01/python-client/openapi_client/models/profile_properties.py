# coding: utf-8

"""
    TrafficManagerManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dns_config import DnsConfig
from openapi_client.models.endpoint import Endpoint
from openapi_client.models.monitor_config import MonitorConfig
from typing import Optional, Set
from typing_extensions import Self

class ProfileProperties(BaseModel):
    """
    Class representing the Traffic Manager profile properties.
    """ # noqa: E501
    dns_config: Optional[DnsConfig] = Field(default=None, alias="dnsConfig")
    endpoints: Optional[List[Endpoint]] = Field(default=None, description="The list of endpoints in the Traffic Manager profile.")
    max_return: Optional[StrictInt] = Field(default=None, description="Maximum number of endpoints to be returned for MultiValue routing type.", alias="maxReturn")
    monitor_config: Optional[MonitorConfig] = Field(default=None, alias="monitorConfig")
    profile_status: Optional[StrictStr] = Field(default=None, description="The status of the Traffic Manager profile.", alias="profileStatus")
    traffic_routing_method: Optional[StrictStr] = Field(default=None, description="The traffic routing method of the Traffic Manager profile.", alias="trafficRoutingMethod")
    traffic_view_enrollment_status: Optional[StrictStr] = Field(default=None, description="Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.", alias="trafficViewEnrollmentStatus")
    __properties: ClassVar[List[str]] = ["dnsConfig", "endpoints", "maxReturn", "monitorConfig", "profileStatus", "trafficRoutingMethod", "trafficViewEnrollmentStatus"]

    @field_validator('profile_status')
    def profile_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('traffic_routing_method')
    def traffic_routing_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Performance', 'Priority', 'Weighted', 'Geographic', 'MultiValue', 'Subnet']):
            raise ValueError("must be one of enum values ('Performance', 'Priority', 'Weighted', 'Geographic', 'MultiValue', 'Subnet')")
        return value

    @field_validator('traffic_view_enrollment_status')
    def traffic_view_enrollment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dns_config
        if self.dns_config:
            _dict['dnsConfig'] = self.dns_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of monitor_config
        if self.monitor_config:
            _dict['monitorConfig'] = self.monitor_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsConfig": DnsConfig.from_dict(obj["dnsConfig"]) if obj.get("dnsConfig") is not None else None,
            "endpoints": [Endpoint.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "maxReturn": obj.get("maxReturn"),
            "monitorConfig": MonitorConfig.from_dict(obj["monitorConfig"]) if obj.get("monitorConfig") is not None else None,
            "profileStatus": obj.get("profileStatus"),
            "trafficRoutingMethod": obj.get("trafficRoutingMethod"),
            "trafficViewEnrollmentStatus": obj.get("trafficViewEnrollmentStatus")
        })
        return _obj



# coding: utf-8

"""
    TrafficManagerManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.profile_properties import ProfileProperties

class TestProfileProperties(unittest.TestCase):
    """ProfileProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProfileProperties:
        """Test ProfileProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProfileProperties`
        """
        model = ProfileProperties()
        if include_optional:
            return ProfileProperties(
                dns_config = openapi_client.models.dns_config.DnsConfig(
                    fqdn = '', 
                    relative_name = '', 
                    ttl = 56, ),
                endpoints = [
                    openapi_client.models.endpoint.Endpoint(
                        properties = openapi_client.models.endpoint_properties.EndpointProperties(
                            custom_headers = [
                                openapi_client.models.endpoint_properties_custom_headers_inner.EndpointProperties_customHeaders_inner(
                                    name = '', 
                                    value = '', )
                                ], 
                            endpoint_location = '', 
                            endpoint_monitor_status = 'CheckingEndpoint', 
                            endpoint_status = 'Enabled', 
                            geo_mapping = [
                                ''
                                ], 
                            min_child_endpoints = 56, 
                            priority = 56, 
                            subnets = [
                                openapi_client.models.endpoint_properties_subnets_inner.EndpointProperties_subnets_inner(
                                    first = '', 
                                    last = '', 
                                    scope = 56, )
                                ], 
                            target = '', 
                            target_resource_id = '', 
                            weight = 56, ), )
                    ],
                max_return = 56,
                monitor_config = openapi_client.models.monitor_config.MonitorConfig(
                    custom_headers = [
                        openapi_client.models.endpoint_properties_custom_headers_inner.EndpointProperties_customHeaders_inner(
                            name = '', 
                            value = '', )
                        ], 
                    expected_status_code_ranges = [
                        openapi_client.models.monitor_config_expected_status_code_ranges_inner.MonitorConfig_expectedStatusCodeRanges_inner(
                            max = 56, 
                            min = 56, )
                        ], 
                    interval_in_seconds = 56, 
                    path = '', 
                    port = 56, 
                    profile_monitor_status = 'CheckingEndpoints', 
                    protocol = 'HTTP', 
                    timeout_in_seconds = 56, 
                    tolerated_number_of_failures = 56, ),
                profile_status = 'Enabled',
                traffic_routing_method = 'Performance',
                traffic_view_enrollment_status = 'Enabled'
            )
        else:
            return ProfileProperties(
        )
        """

    def testProfileProperties(self):
        """Test ProfileProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

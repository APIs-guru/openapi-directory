# coding: utf-8

"""
    StorageManagementClient

    The Admin Storage Management Client.

    The version of the OpenAPI document: 2019-08-08-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.location_status import LocationStatus
from openapi_client.models.storage_account_access_tier import StorageAccountAccessTier
from openapi_client.models.storage_account_health_state import StorageAccountHealthState
from openapi_client.models.storage_account_state import StorageAccountState
from openapi_client.models.storage_account_status import StorageAccountStatus
from openapi_client.models.storage_account_type import StorageAccountType
from openapi_client.models.storage_encryption import StorageEncryption
from typing import Optional, Set
from typing_extensions import Self

class StorageAccountProperties(BaseModel):
    """
    Properties of a storage account.
    """ # noqa: E501
    access_tier: Optional[StorageAccountAccessTier] = Field(default=None, alias="accessTier")
    account_id: Optional[StrictStr] = Field(default=None, description="Internal storage account ID, which is not visible to tenant.", alias="accountId")
    account_status: Optional[StorageAccountStatus] = Field(default=None, alias="accountStatus")
    account_type: Optional[StorageAccountType] = Field(default=None, alias="accountType")
    creation_time: Optional[StrictStr] = Field(default=None, description="The creation date and time of storage account in UTC.", alias="creationTime")
    deleted_time: Optional[datetime] = Field(default=None, description="The date-time when the storage account was deleted.", alias="deletedTime")
    encryption: Optional[StorageEncryption] = None
    fault_domain: Optional[StrictStr] = Field(default=None, description="The fault domain for the storage account.", alias="faultDomain")
    health_state: Optional[StorageAccountHealthState] = Field(default=None, alias="healthState")
    primary_endpoints: Optional[Dict[str, Any]] = Field(default=None, description="The URLs that are used to perform a retrieval of a public BLOB, queue, or table object.", alias="primaryEndpoints")
    primary_location: Optional[StrictStr] = Field(default=None, description="The primary location for the storage account.", alias="primaryLocation")
    provisioning_state: Optional[StorageAccountState] = Field(default=None, alias="provisioningState")
    status_of_primary: Optional[LocationStatus] = Field(default=None, alias="statusOfPrimary")
    supports_https_traffic_only: Optional[StrictBool] = Field(default=None, description="Storage account supports https traffic only or not", alias="supportsHttpsTrafficOnly")
    tenant_resource_group_name: Optional[StrictStr] = Field(default=None, description="The name of resource group under which the storage account locates.", alias="tenantResourceGroupName")
    tenant_storage_account_name: Optional[StrictStr] = Field(default=None, description="Storage account name from tenant view.", alias="tenantStorageAccountName")
    tenant_subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription ID of the subscription under which the storage account locates.", alias="tenantSubscriptionId")
    tenant_view_id: Optional[StrictStr] = Field(default=None, description="Resource URI of storage account from tenant view.", alias="tenantViewId")
    __properties: ClassVar[List[str]] = ["accessTier", "accountId", "accountStatus", "accountType", "creationTime", "deletedTime", "encryption", "faultDomain", "healthState", "primaryEndpoints", "primaryLocation", "provisioningState", "statusOfPrimary", "supportsHttpsTrafficOnly", "tenantResourceGroupName", "tenantStorageAccountName", "tenantSubscriptionId", "tenantViewId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_id",
            "creation_time",
            "deleted_time",
            "fault_domain",
            "primary_endpoints",
            "primary_location",
            "supports_https_traffic_only",
            "tenant_resource_group_name",
            "tenant_storage_account_name",
            "tenant_subscription_id",
            "tenant_view_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessTier": obj.get("accessTier"),
            "accountId": obj.get("accountId"),
            "accountStatus": obj.get("accountStatus"),
            "accountType": obj.get("accountType"),
            "creationTime": obj.get("creationTime"),
            "deletedTime": obj.get("deletedTime"),
            "encryption": StorageEncryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "faultDomain": obj.get("faultDomain"),
            "healthState": obj.get("healthState"),
            "primaryEndpoints": obj.get("primaryEndpoints"),
            "primaryLocation": obj.get("primaryLocation"),
            "provisioningState": obj.get("provisioningState"),
            "statusOfPrimary": obj.get("statusOfPrimary"),
            "supportsHttpsTrafficOnly": obj.get("supportsHttpsTrafficOnly"),
            "tenantResourceGroupName": obj.get("tenantResourceGroupName"),
            "tenantStorageAccountName": obj.get("tenantStorageAccountName"),
            "tenantSubscriptionId": obj.get("tenantSubscriptionId"),
            "tenantViewId": obj.get("tenantViewId")
        })
        return _obj



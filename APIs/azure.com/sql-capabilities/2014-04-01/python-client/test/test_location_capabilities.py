# coding: utf-8

"""
    Azure SQL Database capabilities

    Describes the Azure SQL capabilities available to a subscription for a given location.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.location_capabilities import LocationCapabilities

class TestLocationCapabilities(unittest.TestCase):
    """LocationCapabilities unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LocationCapabilities:
        """Test LocationCapabilities
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LocationCapabilities`
        """
        model = LocationCapabilities()
        if include_optional:
            return LocationCapabilities(
                name = '',
                status = 'Visible',
                supported_server_versions = [
                    openapi_client.models.server_version_capability.ServerVersionCapability(
                        name = '', 
                        status = 'Visible', 
                        supported_editions = [
                            openapi_client.models.edition_capability.EditionCapability(
                                name = '', 
                                supported_service_level_objectives = [
                                    openapi_client.models.service_objective_capability.ServiceObjectiveCapability(
                                        id = '', 
                                        included_max_size = openapi_client.models.max_size_capability.MaxSizeCapability(
                                            limit = 56, 
                                            unit = 'Megabytes', ), 
                                        name = '', 
                                        performance_level = openapi_client.models.performance_level.PerformanceLevel(
                                            unit = 'DTU', 
                                            value = 56, ), 
                                        supported_max_sizes = [
                                            openapi_client.models.max_size_capability.MaxSizeCapability(
                                                limit = 56, 
                                                unit = 'Megabytes', )
                                            ], )
                                    ], 
                                zone_redundant = True, )
                            ], 
                        supported_elastic_pool_editions = [
                            openapi_client.models.elastic_pool_edition_capability.ElasticPoolEditionCapability(
                                name = '', 
                                supported_elastic_pool_dtus = [
                                    openapi_client.models.elastic_pool_dtu_capability.ElasticPoolDtuCapability(
                                        limit = 56, 
                                        max_database_count = 56, 
                                        supported_per_database_max_dtus = [
                                            openapi_client.models.elastic_pool_per_database_max_dtu_capability.ElasticPoolPerDatabaseMaxDtuCapability(
                                                limit = 56, 
                                                supported_per_database_min_dtus = [
                                                    openapi_client.models.elastic_pool_per_database_min_dtu_capability.ElasticPoolPerDatabaseMinDtuCapability(
                                                        limit = 56, )
                                                    ], )
                                            ], 
                                        supported_per_database_max_sizes = [
                                            
                                            ], )
                                    ], 
                                zone_redundant = True, )
                            ], )
                    ]
            )
        else:
            return LocationCapabilities(
        )
        """

    def testLocationCapabilities(self):
        """Test LocationCapabilities"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2017-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.location_capabilities import LocationCapabilities

class TestLocationCapabilities(unittest.TestCase):
    """LocationCapabilities unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LocationCapabilities:
        """Test LocationCapabilities
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LocationCapabilities`
        """
        model = LocationCapabilities()
        if include_optional:
            return LocationCapabilities(
                name = '',
                reason = '',
                status = 'Visible',
                supported_managed_instance_versions = [
                    openapi_client.models.managed_instance_version_capability.ManagedInstanceVersionCapability(
                        name = '', 
                        reason = '', 
                        status = 'Visible', 
                        supported_editions = [
                            openapi_client.models.managed_instance_edition_capability.ManagedInstanceEditionCapability(
                                name = '', 
                                reason = '', 
                                status = 'Visible', 
                                supported_families = [
                                    openapi_client.models.managed_instance_family_capability.ManagedInstanceFamilyCapability(
                                        included_max_size = openapi_client.models.max_size_capability.MaxSizeCapability(
                                            limit = 56, 
                                            unit = 'Megabytes', ), 
                                        name = '', 
                                        reason = '', 
                                        sku = '', 
                                        status = 'Visible', 
                                        supported_license_types = [
                                            openapi_client.models.license_type_capability.LicenseTypeCapability(
                                                name = '', 
                                                reason = '', 
                                                status = 'Visible', )
                                            ], 
                                        supported_storage_sizes = [
                                            openapi_client.models.max_size_range_capability.MaxSizeRangeCapability(
                                                log_size = openapi_client.models.log_size_capability.LogSizeCapability(
                                                    limit = 56, 
                                                    unit = 'Megabytes', ), 
                                                max_value = openapi_client.models.max_size_capability.MaxSizeCapability(
                                                    limit = 56, 
                                                    unit = 'Megabytes', ), 
                                                min_value = , 
                                                reason = '', 
                                                scale_size = , 
                                                status = 'Visible', )
                                            ], 
                                        supported_vcores_values = [
                                            openapi_client.models.managed_instance_vcores_capability.ManagedInstanceVcoresCapability(
                                                name = '', 
                                                reason = '', 
                                                status = 'Visible', 
                                                value = 56, )
                                            ], )
                                    ], )
                            ], )
                    ],
                supported_server_versions = [
                    openapi_client.models.server_version_capability.ServerVersionCapability(
                        name = '', 
                        reason = '', 
                        status = 'Visible', 
                        supported_editions = [
                            openapi_client.models.edition_capability.EditionCapability(
                                name = '', 
                                reason = '', 
                                status = 'Visible', 
                                supported_service_level_objectives = [
                                    openapi_client.models.service_objective_capability.ServiceObjectiveCapability(
                                        id = '', 
                                        included_max_size = openapi_client.models.max_size_capability.MaxSizeCapability(
                                            limit = 56, 
                                            unit = 'Megabytes', ), 
                                        name = '', 
                                        performance_level = openapi_client.models.performance_level_capability.PerformanceLevelCapability(
                                            unit = 'DTU', 
                                            value = 1.337, ), 
                                        reason = '', 
                                        sku = openapi_client.models.elastic_pool_performance_level_capability_sku.ElasticPoolPerformanceLevelCapability_sku(
                                            capacity = 56, 
                                            family = '', 
                                            name = '', 
                                            size = '', 
                                            tier = '', ), 
                                        status = 'Visible', 
                                        supported_license_types = [
                                            openapi_client.models.license_type_capability.LicenseTypeCapability(
                                                name = '', 
                                                reason = '', 
                                                status = 'Visible', )
                                            ], 
                                        supported_max_sizes = [
                                            openapi_client.models.max_size_range_capability.MaxSizeRangeCapability(
                                                log_size = openapi_client.models.log_size_capability.LogSizeCapability(
                                                    limit = 56, 
                                                    unit = 'Megabytes', ), 
                                                max_value = openapi_client.models.max_size_capability.MaxSizeCapability(
                                                    limit = 56, 
                                                    unit = 'Megabytes', ), 
                                                min_value = , 
                                                reason = '', 
                                                scale_size = , 
                                                status = 'Visible', )
                                            ], )
                                    ], 
                                zone_redundant = True, )
                            ], 
                        supported_elastic_pool_editions = [
                            openapi_client.models.elastic_pool_edition_capability.ElasticPoolEditionCapability(
                                name = '', 
                                reason = '', 
                                status = 'Visible', 
                                supported_elastic_pool_performance_levels = [
                                    openapi_client.models.elastic_pool_performance_level_capability.ElasticPoolPerformanceLevelCapability(
                                        max_database_count = 56, 
                                        reason = '', 
                                        status = 'Visible', 
                                        supported_per_database_max_performance_levels = [
                                            openapi_client.models.elastic_pool_per_database_max_performance_level_capability.ElasticPoolPerDatabaseMaxPerformanceLevelCapability(
                                                limit = 1.337, 
                                                reason = '', 
                                                status = 'Visible', 
                                                supported_per_database_min_performance_levels = [
                                                    openapi_client.models.elastic_pool_per_database_min_performance_level_capability.ElasticPoolPerDatabaseMinPerformanceLevelCapability(
                                                        limit = 1.337, 
                                                        reason = '', 
                                                        status = 'Visible', 
                                                        unit = 'DTU', )
                                                    ], 
                                                unit = 'DTU', )
                                            ], 
                                        supported_per_database_max_sizes = [
                                            openapi_client.models.max_size_range_capability.MaxSizeRangeCapability(
                                                reason = '', 
                                                status = 'Visible', )
                                            ], )
                                    ], 
                                zone_redundant = True, )
                            ], )
                    ]
            )
        else:
            return LocationCapabilities(
        )
        """

    def testLocationCapabilities(self):
        """Test LocationCapabilities"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

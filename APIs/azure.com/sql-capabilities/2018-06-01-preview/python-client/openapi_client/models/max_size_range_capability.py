# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.log_size_capability import LogSizeCapability
from openapi_client.models.max_size_capability import MaxSizeCapability
from typing import Optional, Set
from typing_extensions import Self

class MaxSizeRangeCapability(BaseModel):
    """
    The maximum size range capability.
    """ # noqa: E501
    log_size: Optional[LogSizeCapability] = Field(default=None, alias="logSize")
    max_value: Optional[MaxSizeCapability] = Field(default=None, alias="maxValue")
    min_value: Optional[MaxSizeCapability] = Field(default=None, alias="minValue")
    reason: Optional[StrictStr] = Field(default=None, description="The reason for the capability not being available.")
    scale_size: Optional[MaxSizeCapability] = Field(default=None, alias="scaleSize")
    status: Optional[StrictStr] = Field(default=None, description="The status of the capability.")
    __properties: ClassVar[List[str]] = ["logSize", "maxValue", "minValue", "reason", "scaleSize", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Visible', 'Available', 'Default', 'Disabled']):
            raise ValueError("must be one of enum values ('Visible', 'Available', 'Default', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MaxSizeRangeCapability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of log_size
        if self.log_size:
            _dict['logSize'] = self.log_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_value
        if self.max_value:
            _dict['maxValue'] = self.max_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_value
        if self.min_value:
            _dict['minValue'] = self.min_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_size
        if self.scale_size:
            _dict['scaleSize'] = self.scale_size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MaxSizeRangeCapability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "logSize": LogSizeCapability.from_dict(obj["logSize"]) if obj.get("logSize") is not None else None,
            "maxValue": MaxSizeCapability.from_dict(obj["maxValue"]) if obj.get("maxValue") is not None else None,
            "minValue": MaxSizeCapability.from_dict(obj["minValue"]) if obj.get("minValue") is not None else None,
            "reason": obj.get("reason"),
            "scaleSize": MaxSizeCapability.from_dict(obj["scaleSize"]) if obj.get("scaleSize") is not None else None,
            "status": obj.get("status")
        })
        return _obj



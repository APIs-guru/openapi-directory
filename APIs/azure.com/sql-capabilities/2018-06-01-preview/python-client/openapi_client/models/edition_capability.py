# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.read_scale_capability import ReadScaleCapability
from openapi_client.models.service_objective_capability import ServiceObjectiveCapability
from openapi_client.models.storage_capability import StorageCapability
from typing import Optional, Set
from typing_extensions import Self

class EditionCapability(BaseModel):
    """
    The edition capability.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The database edition name.")
    read_scale: Optional[ReadScaleCapability] = Field(default=None, alias="readScale")
    reason: Optional[StrictStr] = Field(default=None, description="The reason for the capability not being available.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the capability.")
    supported_service_level_objectives: Optional[List[ServiceObjectiveCapability]] = Field(default=None, description="The list of supported service objectives for the edition.", alias="supportedServiceLevelObjectives")
    supported_storage_capabilities: Optional[List[StorageCapability]] = Field(default=None, description="The list of supported storage capabilities for this edition", alias="supportedStorageCapabilities")
    zone_redundant: Optional[StrictBool] = Field(default=None, description="Whether or not zone redundancy is supported for the edition.", alias="zoneRedundant")
    __properties: ClassVar[List[str]] = ["name", "readScale", "reason", "status", "supportedServiceLevelObjectives", "supportedStorageCapabilities", "zoneRedundant"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Visible', 'Available', 'Default', 'Disabled']):
            raise ValueError("must be one of enum values ('Visible', 'Available', 'Default', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditionCapability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "status",
            "supported_service_level_objectives",
            "supported_storage_capabilities",
            "zone_redundant",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of read_scale
        if self.read_scale:
            _dict['readScale'] = self.read_scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supported_service_level_objectives (list)
        _items = []
        if self.supported_service_level_objectives:
            for _item_supported_service_level_objectives in self.supported_service_level_objectives:
                if _item_supported_service_level_objectives:
                    _items.append(_item_supported_service_level_objectives.to_dict())
            _dict['supportedServiceLevelObjectives'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supported_storage_capabilities (list)
        _items = []
        if self.supported_storage_capabilities:
            for _item_supported_storage_capabilities in self.supported_storage_capabilities:
                if _item_supported_storage_capabilities:
                    _items.append(_item_supported_storage_capabilities.to_dict())
            _dict['supportedStorageCapabilities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditionCapability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "readScale": ReadScaleCapability.from_dict(obj["readScale"]) if obj.get("readScale") is not None else None,
            "reason": obj.get("reason"),
            "status": obj.get("status"),
            "supportedServiceLevelObjectives": [ServiceObjectiveCapability.from_dict(_item) for _item in obj["supportedServiceLevelObjectives"]] if obj.get("supportedServiceLevelObjectives") is not None else None,
            "supportedStorageCapabilities": [StorageCapability.from_dict(_item) for _item in obj["supportedStorageCapabilities"]] if obj.get("supportedStorageCapabilities") is not None else None,
            "zoneRedundant": obj.get("zoneRedundant")
        })
        return _obj



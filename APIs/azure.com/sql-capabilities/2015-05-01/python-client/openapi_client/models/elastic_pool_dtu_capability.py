# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.elastic_pool_per_database_max_dtu_capability import ElasticPoolPerDatabaseMaxDtuCapability
from openapi_client.models.max_size_capability import MaxSizeCapability
from typing import Optional, Set
from typing_extensions import Self

class ElasticPoolDtuCapability(BaseModel):
    """
    The Elastic Pool DTU capability.
    """ # noqa: E501
    included_max_size: Optional[MaxSizeCapability] = Field(default=None, alias="includedMaxSize")
    limit: Optional[StrictInt] = Field(default=None, description="The DTU limit for the pool.")
    max_database_count: Optional[StrictInt] = Field(default=None, description="The maximum number of databases supported.", alias="maxDatabaseCount")
    reason: Optional[StrictStr] = Field(default=None, description="The reason for the capability not being available.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the capability.")
    supported_max_sizes: Optional[List[MaxSizeCapability]] = Field(default=None, description="The list of supported max sizes.", alias="supportedMaxSizes")
    supported_per_database_max_dtus: Optional[List[ElasticPoolPerDatabaseMaxDtuCapability]] = Field(default=None, description="The list of supported per database max DTUs.", alias="supportedPerDatabaseMaxDtus")
    supported_per_database_max_sizes: Optional[List[MaxSizeCapability]] = Field(default=None, description="The list of supported per database max sizes.", alias="supportedPerDatabaseMaxSizes")
    __properties: ClassVar[List[str]] = ["includedMaxSize", "limit", "maxDatabaseCount", "reason", "status", "supportedMaxSizes", "supportedPerDatabaseMaxDtus", "supportedPerDatabaseMaxSizes"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Visible', 'Available', 'Default', 'Disabled']):
            raise ValueError("must be one of enum values ('Visible', 'Available', 'Default', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElasticPoolDtuCapability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "limit",
            "max_database_count",
            "status",
            "supported_max_sizes",
            "supported_per_database_max_dtus",
            "supported_per_database_max_sizes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of included_max_size
        if self.included_max_size:
            _dict['includedMaxSize'] = self.included_max_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supported_max_sizes (list)
        _items = []
        if self.supported_max_sizes:
            for _item_supported_max_sizes in self.supported_max_sizes:
                if _item_supported_max_sizes:
                    _items.append(_item_supported_max_sizes.to_dict())
            _dict['supportedMaxSizes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supported_per_database_max_dtus (list)
        _items = []
        if self.supported_per_database_max_dtus:
            for _item_supported_per_database_max_dtus in self.supported_per_database_max_dtus:
                if _item_supported_per_database_max_dtus:
                    _items.append(_item_supported_per_database_max_dtus.to_dict())
            _dict['supportedPerDatabaseMaxDtus'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supported_per_database_max_sizes (list)
        _items = []
        if self.supported_per_database_max_sizes:
            for _item_supported_per_database_max_sizes in self.supported_per_database_max_sizes:
                if _item_supported_per_database_max_sizes:
                    _items.append(_item_supported_per_database_max_sizes.to_dict())
            _dict['supportedPerDatabaseMaxSizes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElasticPoolDtuCapability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includedMaxSize": MaxSizeCapability.from_dict(obj["includedMaxSize"]) if obj.get("includedMaxSize") is not None else None,
            "limit": obj.get("limit"),
            "maxDatabaseCount": obj.get("maxDatabaseCount"),
            "reason": obj.get("reason"),
            "status": obj.get("status"),
            "supportedMaxSizes": [MaxSizeCapability.from_dict(_item) for _item in obj["supportedMaxSizes"]] if obj.get("supportedMaxSizes") is not None else None,
            "supportedPerDatabaseMaxDtus": [ElasticPoolPerDatabaseMaxDtuCapability.from_dict(_item) for _item in obj["supportedPerDatabaseMaxDtus"]] if obj.get("supportedPerDatabaseMaxDtus") is not None else None,
            "supportedPerDatabaseMaxSizes": [MaxSizeCapability.from_dict(_item) for _item in obj["supportedPerDatabaseMaxSizes"]] if obj.get("supportedPerDatabaseMaxSizes") is not None else None
        })
        return _obj



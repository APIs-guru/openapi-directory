# coding: utf-8

"""
    Microsoft NetApp

    Microsoft NetApp Azure Resource Provider specification

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.export_policy import ExportPolicy
from typing import Optional, Set
from typing_extensions import Self

class VolumePatchProperties(BaseModel):
    """
    Patchable volume properties
    """ # noqa: E501
    export_policy: Optional[ExportPolicy] = Field(default=None, alias="exportPolicy")
    service_level: Optional[StrictStr] = Field(default='Premium', description="The service level of the file system", alias="serviceLevel")
    usage_threshold: Optional[Annotated[int, Field(le=109951162777600, strict=True, ge=107374182400)]] = Field(default=107374182400, description="Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.", alias="usageThreshold")
    __properties: ClassVar[List[str]] = ["exportPolicy", "serviceLevel", "usageThreshold"]

    @field_validator('service_level')
    def service_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard', 'Premium', 'Ultra']):
            raise ValueError("must be one of enum values ('Standard', 'Premium', 'Ultra')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumePatchProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of export_policy
        if self.export_policy:
            _dict['exportPolicy'] = self.export_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumePatchProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exportPolicy": ExportPolicy.from_dict(obj["exportPolicy"]) if obj.get("exportPolicy") is not None else None,
            "serviceLevel": obj.get("serviceLevel") if obj.get("serviceLevel") is not None else 'Premium',
            "usageThreshold": obj.get("usageThreshold") if obj.get("usageThreshold") is not None else 107374182400
        })
        return _obj



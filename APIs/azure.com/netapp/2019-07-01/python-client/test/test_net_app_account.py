# coding: utf-8

"""
    Microsoft NetApp

    Microsoft NetApp Azure Resource Provider specification

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.net_app_account import NetAppAccount

class TestNetAppAccount(unittest.TestCase):
    """NetAppAccount unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NetAppAccount:
        """Test NetAppAccount
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetAppAccount`
        """
        model = NetAppAccount()
        if include_optional:
            return NetAppAccount(
                id = '',
                location = '',
                name = '',
                properties = openapi_client.models.account_properties.accountProperties(
                    active_directories = [
                        openapi_client.models.active_directory.activeDirectory(
                            active_directory_id = '', 
                            dns = '', 
                            domain = '', 
                            organizational_unit = '', 
                            password = '', 
                            smb_server_name = '', 
                            status = '', 
                            username = '', )
                        ], 
                    provisioning_state = '', ),
                tags = openapi_client.models.tags.tags(),
                type = ''
            )
        else:
            return NetAppAccount(
                location = '',
        )
        """

    def testNetAppAccount(self):
        """Test NetAppAccount"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Microsoft NetApp

    Microsoft NetApp Azure Resource Provider specification

    The version of the OpenAPI document: 2017-08-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MountTargetProperties(BaseModel):
    """
    Mount target properties
    """ # noqa: E501
    end_ip: Optional[StrictStr] = Field(default=None, description="The end of IPv4 address range to use when creating a new mount target", alias="endIp")
    file_system_id: Annotated[str, Field(min_length=36, strict=True, max_length=36)] = Field(description="UUID v4 used to identify the MountTarget", alias="fileSystemId")
    gateway: Optional[StrictStr] = Field(default=None, description="The gateway of the IPv4 address range to use when creating a new mount target")
    ip_address: Optional[StrictStr] = Field(default=None, description="The mount target's IPv4 address", alias="ipAddress")
    mount_target_id: Optional[Annotated[str, Field(min_length=36, strict=True, max_length=36)]] = Field(default=None, description="UUID v4 used to identify the MountTarget", alias="mountTargetId")
    netmask: Optional[StrictStr] = Field(default=None, description="The netmask of the IPv4 address range to use when creating a new mount target")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Azure lifecycle management", alias="provisioningState")
    smb_server_fqdn: Optional[StrictStr] = Field(default=None, description="The SMB server's Fully Qualified Domain Name, FQDN", alias="smbServerFqdn")
    start_ip: Optional[StrictStr] = Field(default=None, description="The start of IPv4 address range to use when creating a new mount target", alias="startIp")
    subnet: Optional[StrictStr] = Field(default=None, description="The subnet")
    __properties: ClassVar[List[str]] = ["endIp", "fileSystemId", "gateway", "ipAddress", "mountTargetId", "netmask", "provisioningState", "smbServerFqdn", "startIp", "subnet"]

    @field_validator('file_system_id')
    def file_system_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/")
        return value

    @field_validator('mount_target_id')
    def mount_target_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MountTargetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ip_address",
            "mount_target_id",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MountTargetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endIp": obj.get("endIp"),
            "fileSystemId": obj.get("fileSystemId"),
            "gateway": obj.get("gateway"),
            "ipAddress": obj.get("ipAddress"),
            "mountTargetId": obj.get("mountTargetId"),
            "netmask": obj.get("netmask"),
            "provisioningState": obj.get("provisioningState"),
            "smbServerFqdn": obj.get("smbServerFqdn"),
            "startIp": obj.get("startIp"),
            "subnet": obj.get("subnet")
        })
        return _obj



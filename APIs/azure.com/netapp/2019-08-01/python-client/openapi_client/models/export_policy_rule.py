# coding: utf-8

"""
    Microsoft NetApp

    Microsoft NetApp Azure Resource Provider specification

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExportPolicyRule(BaseModel):
    """
    Volume Export Policy Rule
    """ # noqa: E501
    allowed_clients: Optional[StrictStr] = Field(default=None, description="Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names", alias="allowedClients")
    cifs: Optional[StrictBool] = Field(default=None, description="Allows CIFS protocol")
    nfsv3: Optional[StrictBool] = Field(default=None, description="Allows NFSv3 protocol")
    nfsv41: Optional[StrictBool] = Field(default=None, description="Allows NFSv4.1 protocol")
    rule_index: Optional[StrictInt] = Field(default=None, description="Order index", alias="ruleIndex")
    unix_read_only: Optional[StrictBool] = Field(default=None, description="Read only access", alias="unixReadOnly")
    unix_read_write: Optional[StrictBool] = Field(default=None, description="Read and write access", alias="unixReadWrite")
    __properties: ClassVar[List[str]] = ["allowedClients", "cifs", "nfsv3", "nfsv41", "ruleIndex", "unixReadOnly", "unixReadWrite"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportPolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportPolicyRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedClients": obj.get("allowedClients"),
            "cifs": obj.get("cifs"),
            "nfsv3": obj.get("nfsv3"),
            "nfsv41": obj.get("nfsv41"),
            "ruleIndex": obj.get("ruleIndex"),
            "unixReadOnly": obj.get("unixReadOnly"),
            "unixReadWrite": obj.get("unixReadWrite")
        })
        return _obj



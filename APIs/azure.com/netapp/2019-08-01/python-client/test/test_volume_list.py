# coding: utf-8

"""
    Microsoft NetApp

    Microsoft NetApp Azure Resource Provider specification

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.volume_list import VolumeList

class TestVolumeList(unittest.TestCase):
    """VolumeList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VolumeList:
        """Test VolumeList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VolumeList`
        """
        model = VolumeList()
        if include_optional:
            return VolumeList(
                value = [
                    openapi_client.models.volume.volume(
                        id = '', 
                        location = '', 
                        name = '', 
                        properties = openapi_client.models.volume_properties.volumeProperties(
                            baremetal_tenant_id = '9560acf5-4e3a-12e7-9bdb-02007cca7779', 
                            creation_token = 'some-amazing-filepath', 
                            data_protection = openapi_client.models.data_protection.DataProtection(
                                replication = openapi_client.models.replication_object.replicationObject(
                                    endpoint_type = 'src, dst', 
                                    remote_volume_resource_id = '', 
                                    replication_id = '', 
                                    replication_schedule = '10minutely, hourly, daily, weekly, monthly', ), ), 
                            export_policy = openapi_client.models.export_policy.exportPolicy(
                                rules = [
                                    openapi_client.models.export_policy_rule.exportPolicyRule(
                                        allowed_clients = '', 
                                        cifs = True, 
                                        nfsv3 = True, 
                                        nfsv41 = True, 
                                        rule_index = 56, 
                                        unix_read_only = True, 
                                        unix_read_write = True, )
                                    ], ), 
                            file_system_id = '9760acf5-4638-11e7-9bdb-020073ca7778', 
                            mount_targets = [
                                openapi_client.models.mount_target_list.mountTargetList(
                                    value = [
                                        openapi_client.models.mount_target.mountTarget(
                                            id = '', 
                                            location = '', 
                                            name = '', 
                                            properties = openapi_client.models.mount_target_properties.mountTargetProperties(
                                                end_ip = '1.2.3.4', 
                                                file_system_id = '9760acf5-4638-11e7-9bdb-020073ca3333', 
                                                gateway = '1.2.3.4', 
                                                ip_address = '1.2.3.4', 
                                                mount_target_id = '9760acf5-4638-11e7-9bdb-020073ca3333', 
                                                netmask = '255.255.255.0', 
                                                provisioning_state = '', 
                                                smb_server_fqdn = 'fullyqualified.domainname.com', 
                                                start_ip = '1.2.3.4', 
                                                subnet = '1.2.3.4', ), 
                                            tags = {
                                                'key' : ''
                                                }, 
                                            type = '', )
                                        ], )
                                ], 
                            protocol_types = [NFSv4.1], 
                            provisioning_state = '', 
                            service_level = 'Premium', 
                            snapshot_id = '9760acf5-4638-11e7-9bdb-020073ca3333', 
                            subnet_id = '', 
                            usage_threshold = 107374182400, 
                            volume_type = 'DataProtection', ), 
                        tags = {
                            'key' : ''
                            }, 
                        type = '', )
                    ]
            )
        else:
            return VolumeList(
        )
        """

    def testVolumeList(self):
        """Test VolumeList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

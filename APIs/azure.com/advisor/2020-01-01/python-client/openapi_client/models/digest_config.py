# coding: utf-8

"""
    AdvisorManagementClient

    REST APIs for Azure Advisor

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DigestConfig(BaseModel):
    """
    Advisor Digest configuration entity
    """ # noqa: E501
    action_group_resource_id: Optional[StrictStr] = Field(default=None, description="Action group resource id used by digest.", alias="actionGroupResourceId")
    categories: Optional[List[StrictStr]] = Field(default=None, description="Categories to send digest for. If categories are not provided, then digest will be sent for all categories.")
    frequency: Optional[StrictInt] = Field(default=None, description="Frequency that digest will be triggered, in days. Value must be between 7 and 30 days inclusive.")
    language: Optional[StrictStr] = Field(default=None, description="Language for digest content body. Value must be ISO 639-1 code for one of Azure portal supported languages. Otherwise, it will be converted into one. Default value is English (en).")
    name: Optional[StrictStr] = Field(default=None, description="Name of digest configuration. Value is case-insensitive and must be unique within a subscription.")
    state: Optional[StrictStr] = Field(default=None, description="State of digest configuration.")
    __properties: ClassVar[List[str]] = ["actionGroupResourceId", "categories", "frequency", "language", "name", "state"]

    @field_validator('categories')
    def categories_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['HighAvailability', 'Security', 'Performance', 'Cost', 'OperationalExcellence']):
                raise ValueError("each list item must be one of ('HighAvailability', 'Security', 'Performance', 'Cost', 'OperationalExcellence')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Disabled']):
            raise ValueError("must be one of enum values ('Active', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DigestConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DigestConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionGroupResourceId": obj.get("actionGroupResourceId"),
            "categories": obj.get("categories"),
            "frequency": obj.get("frequency"),
            "language": obj.get("language"),
            "name": obj.get("name"),
            "state": obj.get("state")
        })
        return _obj



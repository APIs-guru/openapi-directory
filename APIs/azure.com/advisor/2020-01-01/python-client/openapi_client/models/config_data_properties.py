# coding: utf-8

"""
    AdvisorManagementClient

    REST APIs for Azure Advisor

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.digest_config import DigestConfig
from typing import Optional, Set
from typing_extensions import Self

class ConfigDataProperties(BaseModel):
    """
    Configuration data properties
    """ # noqa: E501
    digests: Optional[List[DigestConfig]] = Field(default=None, description="Advisor digest configuration. Valid only for subscriptions")
    exclude: Optional[StrictBool] = Field(default=None, description="Exclude the resource from Advisor evaluations. Valid values: False (default) or True.")
    low_cpu_threshold: Optional[StrictStr] = Field(default=None, description="Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 5 (default), 10, 15 or 20.", alias="lowCpuThreshold")
    __properties: ClassVar[List[str]] = ["digests", "exclude", "lowCpuThreshold"]

    @field_validator('low_cpu_threshold')
    def low_cpu_threshold_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['5', '10', '15', '20']):
            raise ValueError("must be one of enum values ('5', '10', '15', '20')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigDataProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in digests (list)
        _items = []
        if self.digests:
            for _item_digests in self.digests:
                if _item_digests:
                    _items.append(_item_digests.to_dict())
            _dict['digests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigDataProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "digests": [DigestConfig.from_dict(_item) for _item in obj["digests"]] if obj.get("digests") is not None else None,
            "exclude": obj.get("exclude"),
            "lowCpuThreshold": obj.get("lowCpuThreshold")
        })
        return _obj



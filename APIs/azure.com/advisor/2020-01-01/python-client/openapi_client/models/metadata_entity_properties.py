# coding: utf-8

"""
    AdvisorManagementClient

    REST APIs for Azure Advisor

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metadata_supported_value_detail import MetadataSupportedValueDetail
from typing import Optional, Set
from typing_extensions import Self

class MetadataEntityProperties(BaseModel):
    """
    The metadata entity properties
    """ # noqa: E501
    applicable_scenarios: Optional[List[StrictStr]] = Field(default=None, description="The list of scenarios applicable to this metadata entity.", alias="applicableScenarios")
    depends_on: Optional[List[StrictStr]] = Field(default=None, description="The list of keys on which this entity depends on.", alias="dependsOn")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name.", alias="displayName")
    supported_values: Optional[List[MetadataSupportedValueDetail]] = Field(default=None, description="The list of supported values.", alias="supportedValues")
    __properties: ClassVar[List[str]] = ["applicableScenarios", "dependsOn", "displayName", "supportedValues"]

    @field_validator('applicable_scenarios')
    def applicable_scenarios_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Alerts']):
                raise ValueError("each list item must be one of ('Alerts')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataEntityProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in supported_values (list)
        _items = []
        if self.supported_values:
            for _item_supported_values in self.supported_values:
                if _item_supported_values:
                    _items.append(_item_supported_values.to_dict())
            _dict['supportedValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataEntityProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicableScenarios": obj.get("applicableScenarios"),
            "dependsOn": obj.get("dependsOn"),
            "displayName": obj.get("displayName"),
            "supportedValues": [MetadataSupportedValueDetail.from_dict(_item) for _item in obj["supportedValues"]] if obj.get("supportedValues") is not None else None
        })
        return _obj



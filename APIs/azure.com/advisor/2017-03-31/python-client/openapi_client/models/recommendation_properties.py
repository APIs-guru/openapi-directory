# coding: utf-8

"""
    AdvisorManagementClient

    REST APIs for Azure Advisor

    The version of the OpenAPI document: 2017-03-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.short_description import ShortDescription
from typing import Optional, Set
from typing_extensions import Self

class RecommendationProperties(BaseModel):
    """
    The properties of the recommendation.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The category of the recommendation.")
    impact: Optional[StrictStr] = Field(default=None, description="The business impact of the recommendation.")
    impacted_field: Optional[StrictStr] = Field(default=None, description="The resource type identified by Advisor.", alias="impactedField")
    impacted_value: Optional[StrictStr] = Field(default=None, description="The resource identified by Advisor.", alias="impactedValue")
    last_updated: Optional[datetime] = Field(default=None, description="The most recent time that Advisor checked the validity of the recommendation.", alias="lastUpdated")
    metadata: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="The recommendation metadata.")
    recommendation_type_id: Optional[StrictStr] = Field(default=None, description="The recommendation-type GUID.", alias="recommendationTypeId")
    risk: Optional[StrictStr] = Field(default=None, description="The potential risk of not implementing the recommendation.")
    short_description: Optional[ShortDescription] = Field(default=None, alias="shortDescription")
    suppression_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of snoozed and dismissed rules for the recommendation.", alias="suppressionIds")
    __properties: ClassVar[List[str]] = ["category", "impact", "impactedField", "impactedValue", "lastUpdated", "metadata", "recommendationTypeId", "risk", "shortDescription", "suppressionIds"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HighAvailability', 'Security', 'Performance', 'Cost', 'OperationalExcellence']):
            raise ValueError("must be one of enum values ('HighAvailability', 'Security', 'Performance', 'Cost', 'OperationalExcellence')")
        return value

    @field_validator('impact')
    def impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['High', 'Medium', 'Low']):
            raise ValueError("must be one of enum values ('High', 'Medium', 'Low')")
        return value

    @field_validator('risk')
    def risk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Error', 'Warning', 'None']):
            raise ValueError("must be one of enum values ('Error', 'Warning', 'None')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of short_description
        if self.short_description:
            _dict['shortDescription'] = self.short_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "impact": obj.get("impact"),
            "impactedField": obj.get("impactedField"),
            "impactedValue": obj.get("impactedValue"),
            "lastUpdated": obj.get("lastUpdated"),
            "metadata": obj.get("metadata"),
            "recommendationTypeId": obj.get("recommendationTypeId"),
            "risk": obj.get("risk"),
            "shortDescription": ShortDescription.from_dict(obj["shortDescription"]) if obj.get("shortDescription") is not None else None,
            "suppressionIds": obj.get("suppressionIds")
        })
        return _obj



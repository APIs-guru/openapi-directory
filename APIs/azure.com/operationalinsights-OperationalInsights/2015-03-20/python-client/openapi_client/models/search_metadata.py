# coding: utf-8

"""
    Azure Log Analytics

    Azure Log Analytics API reference.

    The version of the OpenAPI document: 2015-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_summary import CoreSummary
from openapi_client.models.search_metadata_schema import SearchMetadataSchema
from openapi_client.models.search_sort import SearchSort
from typing import Optional, Set
from typing_extensions import Self

class SearchMetadata(BaseModel):
    """
    Metadata for search results.
    """ # noqa: E501
    aggregated_grouping_fields: Optional[StrictStr] = Field(default=None, description="The aggregated grouping fields.", alias="aggregatedGroupingFields")
    aggregated_value_field: Optional[StrictStr] = Field(default=None, description="The aggregated value field.", alias="aggregatedValueField")
    core_summaries: Optional[List[CoreSummary]] = Field(default=None, description="The core summaries.", alias="coreSummaries")
    e_tag: Optional[StrictStr] = Field(default=None, description="The ETag of the search results.", alias="eTag")
    id: Optional[StrictStr] = Field(default=None, description="The id of the search results request.")
    last_updated: Optional[datetime] = Field(default=None, description="The time of last update.", alias="lastUpdated")
    max: Optional[StrictInt] = Field(default=None, description="The max of all aggregates returned in the result set.")
    request_id: Optional[StrictStr] = Field(default=None, description="The request id of the search.", alias="requestId")
    request_time: Optional[StrictInt] = Field(default=None, description="The request time.", alias="requestTime")
    result_type: Optional[StrictStr] = Field(default=None, description="The search result type.", alias="resultType")
    var_schema: Optional[SearchMetadataSchema] = Field(default=None, alias="schema")
    sort: Optional[List[SearchSort]] = Field(default=None, description="How the results are sorted.")
    start_time: Optional[datetime] = Field(default=None, description="The start time for the search.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The status of the search results.")
    sum: Optional[StrictInt] = Field(default=None, description="The sum of all aggregates returned in the result set.")
    top: Optional[StrictInt] = Field(default=None, description="The number of top search results.")
    total: Optional[StrictInt] = Field(default=None, description="The total number of search results.")
    __properties: ClassVar[List[str]] = ["aggregatedGroupingFields", "aggregatedValueField", "coreSummaries", "eTag", "id", "lastUpdated", "max", "requestId", "requestTime", "resultType", "schema", "sort", "startTime", "status", "sum", "top", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in core_summaries (list)
        _items = []
        if self.core_summaries:
            for _item_core_summaries in self.core_summaries:
                if _item_core_summaries:
                    _items.append(_item_core_summaries.to_dict())
            _dict['coreSummaries'] = _items
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item_sort in self.sort:
                if _item_sort:
                    _items.append(_item_sort.to_dict())
            _dict['sort'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregatedGroupingFields": obj.get("aggregatedGroupingFields"),
            "aggregatedValueField": obj.get("aggregatedValueField"),
            "coreSummaries": [CoreSummary.from_dict(_item) for _item in obj["coreSummaries"]] if obj.get("coreSummaries") is not None else None,
            "eTag": obj.get("eTag"),
            "id": obj.get("id"),
            "lastUpdated": obj.get("lastUpdated"),
            "max": obj.get("max"),
            "requestId": obj.get("requestId"),
            "requestTime": obj.get("requestTime"),
            "resultType": obj.get("resultType"),
            "schema": SearchMetadataSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "sort": [SearchSort.from_dict(_item) for _item in obj["sort"]] if obj.get("sort") is not None else None,
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "sum": obj.get("sum"),
            "top": obj.get("top"),
            "total": obj.get("total")
        })
        return _obj



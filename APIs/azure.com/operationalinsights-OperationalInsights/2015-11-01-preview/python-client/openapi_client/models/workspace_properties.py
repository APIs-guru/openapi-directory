# coding: utf-8

"""
    Azure Log Analytics

    Azure Log Analytics API reference

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.sku import Sku
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceProperties(BaseModel):
    """
    Workspace properties.
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="This is a read-only property. Represents the ID associated with the workspace.", alias="customerId")
    portal_url: Optional[StrictStr] = Field(default=None, description="This is a legacy property and is not used anymore. Kept here for backward compatibility.", alias="portalUrl")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the workspace.", alias="provisioningState")
    retention_in_days: Optional[Annotated[int, Field(le=730, strict=True, ge=-1)]] = Field(default=None, description="The workspace data retention in days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the maximum allowed for all other Skus. ", alias="retentionInDays")
    sku: Optional[Sku] = None
    source: Optional[StrictStr] = Field(default=None, description="This is a read-only legacy property. It is always set to 'Azure' by the service. Kept here for backward compatibility.")
    __properties: ClassVar[List[str]] = ["customerId", "portalUrl", "provisioningState", "retentionInDays", "sku", "source"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Succeeded', 'Failed', 'Canceled', 'Deleting', 'ProvisioningAccount']):
            raise ValueError("must be one of enum values ('Creating', 'Succeeded', 'Failed', 'Canceled', 'Deleting', 'ProvisioningAccount')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "customer_id",
            "portal_url",
            "source",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "portalUrl": obj.get("portalUrl"),
            "provisioningState": obj.get("provisioningState"),
            "retentionInDays": obj.get("retentionInDays"),
            "sku": Sku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "source": obj.get("source")
        })
        return _obj



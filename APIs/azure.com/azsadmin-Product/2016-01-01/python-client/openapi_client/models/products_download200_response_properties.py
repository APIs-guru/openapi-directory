# coding: utf-8

"""
    AzureBridgeAdminClient

    AzureBridge Admin Client.

    The version of the OpenAPI document: 2016-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.products_download200_response_properties_links_inner import ProductsDownload200ResponsePropertiesLinksInner
from typing import Optional, Set
from typing_extensions import Self

class ProductsDownload200ResponseProperties(BaseModel):
    """
    Properties for aggregate usage.
    """ # noqa: E501
    gallery_package_blob_sas_uri: Optional[StrictStr] = Field(default=None, description="The URI to the .azpkg file that provides information required for showing product in the gallery.", alias="galleryPackageBlobSasUri")
    legal_terms: Optional[StrictStr] = Field(default=None, description="Legal terms for the product.", alias="legalTerms")
    links: Optional[List[ProductsDownload200ResponsePropertiesLinksInner]] = Field(default=None, description="List of product links.")
    privacy_policy: Optional[StrictStr] = Field(default=None, description="Privacy policy of the product.", alias="privacyPolicy")
    product_details_properties: Optional[Dict[str, Any]] = Field(default=None, description="Product information.", alias="productDetailsProperties")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the resource.", alias="provisioningState")
    vm_extension_type: Optional[StrictStr] = Field(default=None, description="Extension type of the VM.", alias="vmExtensionType")
    __properties: ClassVar[List[str]] = ["galleryPackageBlobSasUri", "legalTerms", "links", "privacyPolicy", "productDetailsProperties", "provisioningState", "vmExtensionType"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Stopped', 'Starting', 'Running', 'Stopping', 'Succeeded', 'Downloading']):
            raise ValueError("must be one of enum values ('Stopped', 'Starting', 'Running', 'Stopping', 'Succeeded', 'Downloading')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductsDownload200ResponseProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gallery_package_blob_sas_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductsDownload200ResponseProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "galleryPackageBlobSasUri": obj.get("galleryPackageBlobSasUri"),
            "legalTerms": obj.get("legalTerms"),
            "links": [ProductsDownload200ResponsePropertiesLinksInner.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "privacyPolicy": obj.get("privacyPolicy"),
            "productDetailsProperties": obj.get("productDetailsProperties"),
            "provisioningState": obj.get("provisioningState"),
            "vmExtensionType": obj.get("vmExtensionType")
        })
        return _obj



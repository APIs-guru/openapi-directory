# coding: utf-8

"""
    VirtualMachineImageTemplate

    Virtual Machine Image Template

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_template_customizer import ImageTemplateCustomizer
from typing import Optional, Set
from typing_extensions import Self

class ImageTemplatePowerShellCustomizer(ImageTemplateCustomizer):
    """
    Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
    """ # noqa: E501
    inline: Optional[List[StrictStr]] = Field(default=None, description="Array of PowerShell commands to execute")
    run_elevated: Optional[StrictBool] = Field(default=None, description="If specified, the PowerShell script will be run with elevated privileges", alias="runElevated")
    script_uri: Optional[StrictStr] = Field(default=None, description="URI of the PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc", alias="scriptUri")
    sha256_checksum: Optional[StrictStr] = Field(default=None, description="SHA256 checksum of the power shell script provided in the scriptUri field above", alias="sha256Checksum")
    valid_exit_codes: Optional[List[StrictInt]] = Field(default=None, description="Valid exit codes for the PowerShell script. [Default: 0]", alias="validExitCodes")
    __properties: ClassVar[List[str]] = ["name", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageTemplatePowerShellCustomizer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageTemplatePowerShellCustomizer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj



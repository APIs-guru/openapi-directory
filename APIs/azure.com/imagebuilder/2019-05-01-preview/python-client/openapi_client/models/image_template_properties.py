# coding: utf-8

"""
    VirtualMachineImageTemplate

    Virtual Machine Image Template

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.image_template_customizer import ImageTemplateCustomizer
from openapi_client.models.image_template_distributor import ImageTemplateDistributor
from openapi_client.models.image_template_last_run_status import ImageTemplateLastRunStatus
from openapi_client.models.image_template_source import ImageTemplateSource
from openapi_client.models.image_template_vm_profile import ImageTemplateVmProfile
from openapi_client.models.provisioning_error import ProvisioningError
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class ImageTemplateProperties(BaseModel):
    """
    Describes the properties of an image template
    """ # noqa: E501
    build_timeout_in_minutes: Optional[Annotated[int, Field(le=960, strict=True, ge=0)]] = Field(default=None, description="Maximum duration to wait while building the image template. Omit or specify 0 to use the default (4 hours).", alias="buildTimeoutInMinutes")
    customize: Optional[List[ImageTemplateCustomizer]] = Field(default=None, description="Specifies the properties used to describe the customization steps of the image, like Image source etc")
    distribute: List[ImageTemplateDistributor] = Field(description="The distribution targets where the image output needs to go to.")
    last_run_status: Optional[ImageTemplateLastRunStatus] = Field(default=None, alias="lastRunStatus")
    provisioning_error: Optional[ProvisioningError] = Field(default=None, alias="provisioningError")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    source: ImageTemplateSource
    vm_profile: Optional[ImageTemplateVmProfile] = Field(default=None, alias="vmProfile")
    __properties: ClassVar[List[str]] = ["buildTimeoutInMinutes", "customize", "distribute", "lastRunStatus", "provisioningError", "provisioningState", "source", "vmProfile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageTemplateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in customize (list)
        _items = []
        if self.customize:
            for _item_customize in self.customize:
                if _item_customize:
                    _items.append(_item_customize.to_dict())
            _dict['customize'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribute (list)
        _items = []
        if self.distribute:
            for _item_distribute in self.distribute:
                if _item_distribute:
                    _items.append(_item_distribute.to_dict())
            _dict['distribute'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_run_status
        if self.last_run_status:
            _dict['lastRunStatus'] = self.last_run_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provisioning_error
        if self.provisioning_error:
            _dict['provisioningError'] = self.provisioning_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vm_profile
        if self.vm_profile:
            _dict['vmProfile'] = self.vm_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageTemplateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildTimeoutInMinutes": obj.get("buildTimeoutInMinutes"),
            "customize": [ImageTemplateCustomizer.from_dict(_item) for _item in obj["customize"]] if obj.get("customize") is not None else None,
            "distribute": [ImageTemplateDistributor.from_dict(_item) for _item in obj["distribute"]] if obj.get("distribute") is not None else None,
            "lastRunStatus": ImageTemplateLastRunStatus.from_dict(obj["lastRunStatus"]) if obj.get("lastRunStatus") is not None else None,
            "provisioningError": ProvisioningError.from_dict(obj["provisioningError"]) if obj.get("provisioningError") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "source": ImageTemplateSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "vmProfile": ImageTemplateVmProfile.from_dict(obj["vmProfile"]) if obj.get("vmProfile") is not None else None
        })
        return _obj



# coding: utf-8

"""
    VirtualMachineImageTemplate

    Virtual Machine Image Template

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.image_template_list_result import ImageTemplateListResult

class TestImageTemplateListResult(unittest.TestCase):
    """ImageTemplateListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImageTemplateListResult:
        """Test ImageTemplateListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImageTemplateListResult`
        """
        model = ImageTemplateListResult()
        if include_optional:
            return ImageTemplateListResult(
                next_link = '',
                value = [
                    openapi_client.models.image_template.ImageTemplate(
                        identity = openapi_client.models.image_template_identity.ImageTemplateIdentity(
                            type = 'UserAssigned', 
                            user_assigned_identities = {
                                'key' : openapi_client.models.image_template_identity_user_assigned_identities_value.ImageTemplateIdentity_userAssignedIdentities_value(
                                    client_id = '', 
                                    principal_id = '', )
                                }, ), 
                        properties = openapi_client.models.image_template_properties.ImageTemplateProperties(
                            build_timeout_in_minutes = 0, 
                            customize = [
                                openapi_client.models.image_template_customizer.ImageTemplateCustomizer(
                                    name = '', 
                                    type = '', )
                                ], 
                            distribute = [
                                openapi_client.models.image_template_distributor.ImageTemplateDistributor(
                                    artifact_tags = {
                                        'key' : ''
                                        }, 
                                    run_output_name = '26bUUGjjNSwg0_bs9ZayIMrKdgNvb6gvxmPb9GcsM61ate1', 
                                    type = '', )
                                ], 
                            last_run_status = openapi_client.models.image_template_last_run_status.ImageTemplateLastRunStatus(
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                run_state = 'Running', 
                                run_sub_state = 'Queued', 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            provisioning_error = openapi_client.models.provisioning_error.ProvisioningError(
                                message = '', 
                                provisioning_error_code = 'BadSourceType', ), 
                            provisioning_state = 'Creating', 
                            source = openapi_client.models.image_template_source.ImageTemplateSource(
                                type = '', ), 
                            vm_profile = openapi_client.models.image_template_vm_profile.ImageTemplateVmProfile(
                                vm_size = '', ), ), )
                    ]
            )
        else:
            return ImageTemplateListResult(
        )
        """

    def testImageTemplateListResult(self):
        """Test ImageTemplateListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

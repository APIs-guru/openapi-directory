# coding: utf-8

"""
    InstanceMetadataClient

    The Azure Instance Metadata Client

    The version of the OpenAPI document: 2019-03-11
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.plan_properties import PlanProperties
from openapi_client.models.public_keys_properties import PublicKeysProperties
from typing import Optional, Set
from typing_extensions import Self

class Compute(BaseModel):
    """
    Compute Metadata
    """ # noqa: E501
    az_environment: Optional[StrictStr] = Field(default=None, description="This is the name of the environment in which the VM is running.", alias="azEnvironment")
    custom_data: Optional[StrictStr] = Field(default=None, description="This is the base64 encoded custom data for the running VM.", alias="customData")
    location: Optional[StrictStr] = Field(default=None, description="This is the Azure Region in which the VM is running.")
    name: Optional[StrictStr] = Field(default=None, description="This is the name of the VM.")
    offer: Optional[StrictStr] = Field(default=None, description="This is the offer information for the VM image. This value is only present for images deployed from the Azure Image Gallery.")
    os_type: Optional[StrictStr] = Field(default=None, description="This value indicates the type of OS the VM is running, either Linux or Windows.", alias="osType")
    placement_group_id: Optional[StrictStr] = Field(default=None, description="This is the placement group of your Virtual Machine Scale Set.", alias="placementGroupId")
    plan: Optional[PlanProperties] = None
    platform_fault_domain: Optional[StrictStr] = Field(default=None, description="This is the fault domain in which the VM.", alias="platformFaultDomain")
    platform_update_domain: Optional[StrictStr] = Field(default=None, description="This is the update domain in which the VM.", alias="platformUpdateDomain")
    provider: Optional[StrictStr] = Field(default=None, description="This is the provider of the VM.")
    public_keys: Optional[List[PublicKeysProperties]] = Field(default=None, description="This is information about the SSH certificate", alias="publicKeys")
    publisher: Optional[StrictStr] = Field(default=None, description="This is the publisher of the VM image.")
    resource_group_name: Optional[StrictStr] = Field(default=None, description="This is the resource group for the VM.", alias="resourceGroupName")
    resource_id: Optional[StrictStr] = Field(default=None, description="This is the fully qualified ID for the VM.", alias="resourceId")
    sku: Optional[StrictStr] = Field(default=None, description="This is the specific SKU for the VM image.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="This is the Azure subscription for the VM.", alias="subscriptionId")
    tags: Optional[StrictStr] = Field(default=None, description="This is the list of tags for your VM.")
    version: Optional[StrictStr] = Field(default=None, description="This is the version of the VM image.")
    vm_id: Optional[StrictStr] = Field(default=None, description="This is the unique identifier for the VM.", alias="vmId")
    vm_scale_set_name: Optional[StrictStr] = Field(default=None, description="This is the resource name of the VMSS.", alias="vmScaleSetName")
    vm_size: Optional[StrictStr] = Field(default=None, description="This is the size of the VM.", alias="vmSize")
    zone: Optional[StrictStr] = Field(default=None, description="This is the availability zone of the VM.")
    __properties: ClassVar[List[str]] = ["azEnvironment", "customData", "location", "name", "offer", "osType", "placementGroupId", "plan", "platformFaultDomain", "platformUpdateDomain", "provider", "publicKeys", "publisher", "resourceGroupName", "resourceId", "sku", "subscriptionId", "tags", "version", "vmId", "vmScaleSetName", "vmSize", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Compute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in public_keys (list)
        _items = []
        if self.public_keys:
            for _item_public_keys in self.public_keys:
                if _item_public_keys:
                    _items.append(_item_public_keys.to_dict())
            _dict['publicKeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Compute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azEnvironment": obj.get("azEnvironment"),
            "customData": obj.get("customData"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "offer": obj.get("offer"),
            "osType": obj.get("osType"),
            "placementGroupId": obj.get("placementGroupId"),
            "plan": PlanProperties.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "platformFaultDomain": obj.get("platformFaultDomain"),
            "platformUpdateDomain": obj.get("platformUpdateDomain"),
            "provider": obj.get("provider"),
            "publicKeys": [PublicKeysProperties.from_dict(_item) for _item in obj["publicKeys"]] if obj.get("publicKeys") is not None else None,
            "publisher": obj.get("publisher"),
            "resourceGroupName": obj.get("resourceGroupName"),
            "resourceId": obj.get("resourceId"),
            "sku": obj.get("sku"),
            "subscriptionId": obj.get("subscriptionId"),
            "tags": obj.get("tags"),
            "version": obj.get("version"),
            "vmId": obj.get("vmId"),
            "vmScaleSetName": obj.get("vmScaleSetName"),
            "vmSize": obj.get("vmSize"),
            "zone": obj.get("zone")
        })
        return _obj



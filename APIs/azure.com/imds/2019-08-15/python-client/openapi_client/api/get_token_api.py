# coding: utf-8

"""
    InstanceMetadataClient

    The Azure Instance Metadata Client

    The version of the OpenAPI document: 2019-08-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.identity_token_response import IdentityTokenResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class GetTokenApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def identity_get_token(
        self,
        metadata: Annotated[StrictStr, Field(description="This must be set to 'true'.")],
        resource: Annotated[StrictStr, Field(description="This is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The resulting token contains the corresponding aud for this resource.")],
        api_version: Annotated[StrictStr, Field(description="This is the API version to use.")],
        client_id: Annotated[Optional[StrictStr], Field(description="This identifies, by Azure AD client id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with object_id and msi_res_id.")] = None,
        object_id: Annotated[Optional[StrictStr], Field(description="This identifies, by Azure AD object id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and msi_res_id.")] = None,
        msi_res_id: Annotated[Optional[StrictStr], Field(description="This identifies, by urlencoded ARM resource id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and object_id.")] = None,
        authority: Annotated[Optional[StrictStr], Field(description="This indicates the authority to request AAD tokens from. Defaults to the known authority of the identity to be used.")] = None,
        bypass_cache: Annotated[Optional[StrictStr], Field(description="If provided, the value must be 'true'. This indicates to the server that the token must be retrieved from Azure AD and cannot be retrieved from an internal cache.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IdentityTokenResponse:
        """identity_get_token

        Get a Token from Azure AD

        :param metadata: This must be set to 'true'. (required)
        :type metadata: str
        :param resource: This is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The resulting token contains the corresponding aud for this resource. (required)
        :type resource: str
        :param api_version: This is the API version to use. (required)
        :type api_version: str
        :param client_id: This identifies, by Azure AD client id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with object_id and msi_res_id.
        :type client_id: str
        :param object_id: This identifies, by Azure AD object id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and msi_res_id.
        :type object_id: str
        :param msi_res_id: This identifies, by urlencoded ARM resource id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and object_id.
        :type msi_res_id: str
        :param authority: This indicates the authority to request AAD tokens from. Defaults to the known authority of the identity to be used.
        :type authority: str
        :param bypass_cache: If provided, the value must be 'true'. This indicates to the server that the token must be retrieved from Azure AD and cannot be retrieved from an internal cache.
        :type bypass_cache: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identity_get_token_serialize(
            metadata=metadata,
            resource=resource,
            api_version=api_version,
            client_id=client_id,
            object_id=object_id,
            msi_res_id=msi_res_id,
            authority=authority,
            bypass_cache=bypass_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IdentityTokenResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def identity_get_token_with_http_info(
        self,
        metadata: Annotated[StrictStr, Field(description="This must be set to 'true'.")],
        resource: Annotated[StrictStr, Field(description="This is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The resulting token contains the corresponding aud for this resource.")],
        api_version: Annotated[StrictStr, Field(description="This is the API version to use.")],
        client_id: Annotated[Optional[StrictStr], Field(description="This identifies, by Azure AD client id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with object_id and msi_res_id.")] = None,
        object_id: Annotated[Optional[StrictStr], Field(description="This identifies, by Azure AD object id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and msi_res_id.")] = None,
        msi_res_id: Annotated[Optional[StrictStr], Field(description="This identifies, by urlencoded ARM resource id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and object_id.")] = None,
        authority: Annotated[Optional[StrictStr], Field(description="This indicates the authority to request AAD tokens from. Defaults to the known authority of the identity to be used.")] = None,
        bypass_cache: Annotated[Optional[StrictStr], Field(description="If provided, the value must be 'true'. This indicates to the server that the token must be retrieved from Azure AD and cannot be retrieved from an internal cache.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IdentityTokenResponse]:
        """identity_get_token

        Get a Token from Azure AD

        :param metadata: This must be set to 'true'. (required)
        :type metadata: str
        :param resource: This is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The resulting token contains the corresponding aud for this resource. (required)
        :type resource: str
        :param api_version: This is the API version to use. (required)
        :type api_version: str
        :param client_id: This identifies, by Azure AD client id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with object_id and msi_res_id.
        :type client_id: str
        :param object_id: This identifies, by Azure AD object id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and msi_res_id.
        :type object_id: str
        :param msi_res_id: This identifies, by urlencoded ARM resource id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and object_id.
        :type msi_res_id: str
        :param authority: This indicates the authority to request AAD tokens from. Defaults to the known authority of the identity to be used.
        :type authority: str
        :param bypass_cache: If provided, the value must be 'true'. This indicates to the server that the token must be retrieved from Azure AD and cannot be retrieved from an internal cache.
        :type bypass_cache: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identity_get_token_serialize(
            metadata=metadata,
            resource=resource,
            api_version=api_version,
            client_id=client_id,
            object_id=object_id,
            msi_res_id=msi_res_id,
            authority=authority,
            bypass_cache=bypass_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IdentityTokenResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def identity_get_token_without_preload_content(
        self,
        metadata: Annotated[StrictStr, Field(description="This must be set to 'true'.")],
        resource: Annotated[StrictStr, Field(description="This is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The resulting token contains the corresponding aud for this resource.")],
        api_version: Annotated[StrictStr, Field(description="This is the API version to use.")],
        client_id: Annotated[Optional[StrictStr], Field(description="This identifies, by Azure AD client id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with object_id and msi_res_id.")] = None,
        object_id: Annotated[Optional[StrictStr], Field(description="This identifies, by Azure AD object id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and msi_res_id.")] = None,
        msi_res_id: Annotated[Optional[StrictStr], Field(description="This identifies, by urlencoded ARM resource id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and object_id.")] = None,
        authority: Annotated[Optional[StrictStr], Field(description="This indicates the authority to request AAD tokens from. Defaults to the known authority of the identity to be used.")] = None,
        bypass_cache: Annotated[Optional[StrictStr], Field(description="If provided, the value must be 'true'. This indicates to the server that the token must be retrieved from Azure AD and cannot be retrieved from an internal cache.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """identity_get_token

        Get a Token from Azure AD

        :param metadata: This must be set to 'true'. (required)
        :type metadata: str
        :param resource: This is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The resulting token contains the corresponding aud for this resource. (required)
        :type resource: str
        :param api_version: This is the API version to use. (required)
        :type api_version: str
        :param client_id: This identifies, by Azure AD client id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with object_id and msi_res_id.
        :type client_id: str
        :param object_id: This identifies, by Azure AD object id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and msi_res_id.
        :type object_id: str
        :param msi_res_id: This identifies, by urlencoded ARM resource id, a specific explicit identity to use when authenticating to Azure AD. Mutually exclusive with client_id and object_id.
        :type msi_res_id: str
        :param authority: This indicates the authority to request AAD tokens from. Defaults to the known authority of the identity to be used.
        :type authority: str
        :param bypass_cache: If provided, the value must be 'true'. This indicates to the server that the token must be retrieved from Azure AD and cannot be retrieved from an internal cache.
        :type bypass_cache: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identity_get_token_serialize(
            metadata=metadata,
            resource=resource,
            api_version=api_version,
            client_id=client_id,
            object_id=object_id,
            msi_res_id=msi_res_id,
            authority=authority,
            bypass_cache=bypass_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IdentityTokenResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _identity_get_token_serialize(
        self,
        metadata,
        resource,
        api_version,
        client_id,
        object_id,
        msi_res_id,
        authority,
        bypass_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if resource is not None:
            
            _query_params.append(('resource', resource))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if client_id is not None:
            
            _query_params.append(('client_id', client_id))
            
        if object_id is not None:
            
            _query_params.append(('object_id', object_id))
            
        if msi_res_id is not None:
            
            _query_params.append(('msi_res_id', msi_res_id))
            
        if authority is not None:
            
            _query_params.append(('authority', authority))
            
        if bypass_cache is not None:
            
            _query_params.append(('bypass_cache', bypass_cache))
            
        # process the header parameters
        if metadata is not None:
            _header_params['Metadata'] = metadata
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basic_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/identity/oauth2/token',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    InstanceMetadataClient

    The Azure Instance Metadata Client

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.compute import Compute

class TestCompute(unittest.TestCase):
    """Compute unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Compute:
        """Test Compute
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Compute`
        """
        model = Compute()
        if include_optional:
            return Compute(
                az_environment = '',
                location = '',
                name = '',
                offer = '',
                os_type = '',
                placement_group_id = '',
                plan = openapi_client.models.plan_properties.PlanProperties(
                    name = '', 
                    product = '', 
                    publisher = '', ),
                platform_fault_domain = '',
                platform_update_domain = '',
                provider = '',
                public_keys = [
                    openapi_client.models.public_keys_properties.PublicKeysProperties(
                        key_data = '', 
                        path = '', )
                    ],
                publisher = '',
                resource_group_name = '',
                resource_id = '',
                sku = '',
                storage_profile = openapi_client.models.storage_profile.StorageProfile(
                    data_disks = [
                        openapi_client.models.data_disk.DataDisk(
                            caching = '', 
                            create_option = '', 
                            disk_size_gb = '', 
                            image = openapi_client.models.disk_image.DiskImage(
                                uri = '', ), 
                            lun = '', 
                            managed_disk = openapi_client.models.managed_disk.ManagedDisk(
                                id = '', 
                                storage_account_type = '', ), 
                            name = '', 
                            vhd = openapi_client.models.virtual_hard_disk.VirtualHardDisk(
                                uri = '', ), 
                            write_accelerator_enabled = '', )
                        ], 
                    image_reference = openapi_client.models.image_reference.ImageReference(
                        id = '', 
                        offer = '', 
                        publisher = '', 
                        sku = '', 
                        version = '', ), 
                    os_disk = openapi_client.models.os_disk.OsDisk(
                        caching = '', 
                        create_option = '', 
                        diff_disk_settings = openapi_client.models.diff_disk_settings.DiffDiskSettings(
                            option = '', ), 
                        disk_size_gb = '', 
                        encryption_settings = openapi_client.models.encryption_settings.EncryptionSettings(
                            enabled = '', ), 
                        name = '', 
                        os_type = '', 
                        write_accelerator_enabled = '', ), ),
                subscription_id = '',
                tags = '',
                tags_list = [
                    openapi_client.models.tags_properties.TagsProperties(
                        name = '', 
                        value = '', )
                    ],
                version = '',
                vm_id = '',
                vm_scale_set_name = '',
                vm_size = '',
                zone = ''
            )
        else:
            return Compute(
        )
        """

    def testCompute(self):
        """Test Compute"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

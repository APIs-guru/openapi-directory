# coding: utf-8

"""
    InstanceMetadataClient

    The Azure Instance Metadata Client

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disk_image import DiskImage
from openapi_client.models.managed_disk import ManagedDisk
from openapi_client.models.virtual_hard_disk import VirtualHardDisk
from typing import Optional, Set
from typing_extensions import Self

class DataDisk(BaseModel):
    """
    This contains information about the data disk.
    """ # noqa: E501
    caching: Optional[StrictStr] = Field(default=None, description="This is the caching requirements.")
    create_option: Optional[StrictStr] = Field(default=None, description="This is information about how the VM was created.", alias="createOption")
    disk_size_gb: Optional[StrictStr] = Field(default=None, description="This is the size of the disk in GB.", alias="diskSizeGB")
    image: Optional[DiskImage] = None
    lun: Optional[StrictStr] = Field(default=None, description="This is the logical unit number of the disk.")
    managed_disk: Optional[ManagedDisk] = Field(default=None, alias="managedDisk")
    name: Optional[StrictStr] = Field(default=None, description="This is the disk name.")
    vhd: Optional[VirtualHardDisk] = None
    write_accelerator_enabled: Optional[StrictStr] = Field(default=None, description="This specifies whether or not writeAccelerator is enabled on the disk.", alias="writeAcceleratorEnabled")
    __properties: ClassVar[List[str]] = ["caching", "createOption", "diskSizeGB", "image", "lun", "managedDisk", "name", "vhd", "writeAcceleratorEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of managed_disk
        if self.managed_disk:
            _dict['managedDisk'] = self.managed_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vhd
        if self.vhd:
            _dict['vhd'] = self.vhd.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caching": obj.get("caching"),
            "createOption": obj.get("createOption"),
            "diskSizeGB": obj.get("diskSizeGB"),
            "image": DiskImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "lun": obj.get("lun"),
            "managedDisk": ManagedDisk.from_dict(obj["managedDisk"]) if obj.get("managedDisk") is not None else None,
            "name": obj.get("name"),
            "vhd": VirtualHardDisk.from_dict(obj["vhd"]) if obj.get("vhd") is not None else None,
            "writeAcceleratorEnabled": obj.get("writeAcceleratorEnabled")
        })
        return _obj



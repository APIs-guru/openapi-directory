# coding: utf-8

"""
    InstanceMetadataClient

    The Azure Instance Metadata Client

    The version of the OpenAPI document: 2019-04-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdentityTokenResponse(BaseModel):
    """
    This is the response from the Identity_GetToken operation.
    """ # noqa: E501
    access_token: Optional[StrictStr] = Field(default=None, description="This is the requested access token. The app can use this token to authenticate to the sink resource.")
    client_id: Optional[StrictStr] = Field(default=None, description="This is the client_id specified in the request, if any.")
    expires_in: Optional[StrictStr] = Field(default=None, description="This is how long the access token is valid (in seconds).")
    expires_on: Optional[StrictStr] = Field(default=None, description="This is the time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time. This value is used to determine the lifetime of cached tokens.")
    ext_expires_in: Optional[StrictStr] = Field(default=None, description="This indicates the extended lifetime of the token (in seconds).")
    msi_res_id: Optional[StrictStr] = Field(default=None, description="This is the msi_res_id specified in the request, if any.")
    not_before: Optional[StrictStr] = Field(default=None, description="This is the time when the access token becomes effective. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time.")
    object_id: Optional[StrictStr] = Field(default=None, description="This is the object_id specified in the request, if any.")
    resource: Optional[StrictStr] = Field(default=None, description="This is the app ID URI of the sink resource.")
    token_type: Optional[StrictStr] = Field(default=None, description="This indicates the token type value.")
    __properties: ClassVar[List[str]] = ["access_token", "client_id", "expires_in", "expires_on", "ext_expires_in", "msi_res_id", "not_before", "object_id", "resource", "token_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityTokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityTokenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_token": obj.get("access_token"),
            "client_id": obj.get("client_id"),
            "expires_in": obj.get("expires_in"),
            "expires_on": obj.get("expires_on"),
            "ext_expires_in": obj.get("ext_expires_in"),
            "msi_res_id": obj.get("msi_res_id"),
            "not_before": obj.get("not_before"),
            "object_id": obj.get("object_id"),
            "resource": obj.get("resource"),
            "token_type": obj.get("token_type")
        })
        return _obj



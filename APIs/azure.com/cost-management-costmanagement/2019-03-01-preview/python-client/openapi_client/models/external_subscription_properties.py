# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connector_collection_info import ConnectorCollectionInfo
from typing import Optional, Set
from typing_extensions import Self

class ExternalSubscriptionProperties(BaseModel):
    """
    The properties of a ExternalSubscription
    """ # noqa: E501
    collection_info: Optional[ConnectorCollectionInfo] = Field(default=None, alias="collectionInfo")
    display_name: Optional[StrictStr] = Field(default=None, description="ExternalSubscription DisplayName", alias="displayName")
    external_billing_account_id: Optional[StrictStr] = Field(default=None, description="Parent ExternalBillingAccountId", alias="externalBillingAccountId")
    management_group_id: Optional[StrictStr] = Field(default=None, description="Assigned ManagementGroupId", alias="managementGroupId")
    provider_account_id: Optional[StrictStr] = Field(default=None, description="Provider AccountId (eg AWS Linked Account number)", alias="providerAccountId")
    provider_billing_account_id: Optional[StrictStr] = Field(default=None, description="Provider BillingAccountId (eg AWS Consolidated Account number)", alias="providerBillingAccountId")
    __properties: ClassVar[List[str]] = ["collectionInfo", "displayName", "externalBillingAccountId", "managementGroupId", "providerAccountId", "providerBillingAccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalSubscriptionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
            "external_billing_account_id",
            "management_group_id",
            "provider_account_id",
            "provider_billing_account_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of collection_info
        if self.collection_info:
            _dict['collectionInfo'] = self.collection_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalSubscriptionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collectionInfo": ConnectorCollectionInfo.from_dict(obj["collectionInfo"]) if obj.get("collectionInfo") is not None else None,
            "displayName": obj.get("displayName"),
            "externalBillingAccountId": obj.get("externalBillingAccountId"),
            "managementGroupId": obj.get("managementGroupId"),
            "providerAccountId": obj.get("providerAccountId"),
            "providerBillingAccountId": obj.get("providerBillingAccountId")
        })
        return _obj



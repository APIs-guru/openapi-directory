# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.scope import Scope
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.cost_allocation_details_kind import CostAllocationDetailsKind
    from openapi_client.models.custom_price_details_kind import CustomPriceDetailsKind

class ShowbackRuleProperties(BaseModel):
    """
    The properties of a showback rule.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="The time when the showback rule was created.", alias="creationTime")
    deprecation_time: Optional[datetime] = Field(default=None, description="The current time when showback rule was deprecate.", alias="deprecationTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of a showback rule.")
    modification_time: Optional[datetime] = Field(default=None, description="The current status when showback rule was modified.", alias="modificationTime")
    rule_type: StrictStr = Field(description="The rule type of the showback rule solution.", alias="ruleType")
    scopes: Optional[List[Scope]] = Field(default=None, description="List of authorized assigned scopes.")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the showback rule.")
    version: Optional[StrictInt] = Field(default=None, description="The current version of showback rule.")
    __properties: ClassVar[List[str]] = ["creationTime", "deprecationTime", "description", "modificationTime", "ruleType", "scopes", "status", "version"]

    @field_validator('rule_type')
    def rule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CustomPrice', 'CostAllocation']):
            raise ValueError("must be one of enum values ('CustomPrice', 'CostAllocation')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotActive', 'Active']):
            raise ValueError("must be one of enum values ('NotActive', 'Active')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'ruleType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'CostAllocationDetailsKind': 'CostAllocationDetailsKind','CustomPriceDetailsKind': 'CustomPriceDetailsKind'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[CostAllocationDetailsKind, CustomPriceDetailsKind]]:
        """Create an instance of ShowbackRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "deprecation_time",
            "modification_time",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scopes (list)
        _items = []
        if self.scopes:
            for _item_scopes in self.scopes:
                if _item_scopes:
                    _items.append(_item_scopes.to_dict())
            _dict['scopes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[CostAllocationDetailsKind, CustomPriceDetailsKind]]:
        """Create an instance of ShowbackRuleProperties from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'CostAllocationDetailsKind':
            return import_module("openapi_client.models.cost_allocation_details_kind").CostAllocationDetailsKind.from_dict(obj)
        if object_type ==  'CustomPriceDetailsKind':
            return import_module("openapi_client.models.custom_price_details_kind").CustomPriceDetailsKind.from_dict(obj)

        raise ValueError("ShowbackRuleProperties failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



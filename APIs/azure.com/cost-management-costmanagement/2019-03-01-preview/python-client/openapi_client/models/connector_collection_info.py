# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connector_collection_error_info import ConnectorCollectionErrorInfo
from typing import Optional, Set
from typing_extensions import Self

class ConnectorCollectionInfo(BaseModel):
    """
    Collection and ingestion information
    """ # noqa: E501
    error: Optional[ConnectorCollectionErrorInfo] = None
    last_checked: Optional[datetime] = Field(default=None, description="Last time the data acquisition process initiated connecting to the external provider", alias="lastChecked")
    last_updated: Optional[datetime] = Field(default=None, description="Last time the external data was updated into Azure", alias="lastUpdated")
    source_last_updated: Optional[datetime] = Field(default=None, description="Source timestamp of external data currently available in Azure (eg AWS last processed CUR file timestamp)", alias="sourceLastUpdated")
    __properties: ClassVar[List[str]] = ["error", "lastChecked", "lastUpdated", "sourceLastUpdated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectorCollectionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_checked",
            "last_updated",
            "source_last_updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectorCollectionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error": ConnectorCollectionErrorInfo.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "lastChecked": obj.get("lastChecked"),
            "lastUpdated": obj.get("lastUpdated"),
            "sourceLastUpdated": obj.get("sourceLastUpdated")
        })
        return _obj



# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.report_config_dataset import ReportConfigDataset
from openapi_client.models.report_config_time_period import ReportConfigTimePeriod
from typing import Optional, Set
from typing_extensions import Self

class ReportConfigDefinition(BaseModel):
    """
    The definition of a report config.
    """ # noqa: E501
    dataset: Optional[ReportConfigDataset] = None
    time_period: Optional[ReportConfigTimePeriod] = Field(default=None, alias="timePeriod")
    timeframe: StrictStr = Field(description="The time frame for pulling data for the report. If custom, then a specific time period must be provided.")
    type: StrictStr = Field(description="The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates.")
    __properties: ClassVar[List[str]] = ["dataset", "timePeriod", "timeframe", "type"]

    @field_validator('timeframe')
    def timeframe_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['WeekToDate', 'MonthToDate', 'YearToDate', 'Custom']):
            raise ValueError("must be one of enum values ('WeekToDate', 'MonthToDate', 'YearToDate', 'Custom')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Usage']):
            raise ValueError("must be one of enum values ('Usage')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportConfigDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dataset
        if self.dataset:
            _dict['dataset'] = self.dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_period
        if self.time_period:
            _dict['timePeriod'] = self.time_period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportConfigDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataset": ReportConfigDataset.from_dict(obj["dataset"]) if obj.get("dataset") is not None else None,
            "timePeriod": ReportConfigTimePeriod.from_dict(obj["timePeriod"]) if obj.get("timePeriod") is not None else None,
            "timeframe": obj.get("timeframe"),
            "type": obj.get("type")
        })
        return _obj



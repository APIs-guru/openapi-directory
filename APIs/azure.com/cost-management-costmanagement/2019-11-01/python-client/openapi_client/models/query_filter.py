# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.query_comparison_expression import QueryComparisonExpression
from typing import Optional, Set
from typing_extensions import Self

class QueryFilter(BaseModel):
    """
    The filter expression to be used in the export.
    """ # noqa: E501
    var_and: Optional[Annotated[List[QueryFilter], Field(min_length=2)]] = Field(default=None, description="The logical \"AND\" expression. Must have at least 2 items.", alias="and")
    dimension: Optional[QueryComparisonExpression] = None
    var_not: Optional[QueryFilter] = Field(default=None, alias="not")
    var_or: Optional[Annotated[List[QueryFilter], Field(min_length=2)]] = Field(default=None, description="The logical \"OR\" expression. Must have at least 2 items.", alias="or")
    tag: Optional[QueryComparisonExpression] = None
    __properties: ClassVar[List[str]] = ["and", "dimension", "not", "or", "tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in var_and (list)
        _items = []
        if self.var_and:
            for _item_var_and in self.var_and:
                if _item_var_and:
                    _items.append(_item_var_and.to_dict())
            _dict['and'] = _items
        # override the default output from pydantic by calling `to_dict()` of dimension
        if self.dimension:
            _dict['dimension'] = self.dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_not
        if self.var_not:
            _dict['not'] = self.var_not.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in var_or (list)
        _items = []
        if self.var_or:
            for _item_var_or in self.var_or:
                if _item_var_or:
                    _items.append(_item_var_or.to_dict())
            _dict['or'] = _items
        # override the default output from pydantic by calling `to_dict()` of tag
        if self.tag:
            _dict['tag'] = self.tag.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "and": [QueryFilter.from_dict(_item) for _item in obj["and"]] if obj.get("and") is not None else None,
            "dimension": QueryComparisonExpression.from_dict(obj["dimension"]) if obj.get("dimension") is not None else None,
            "not": QueryFilter.from_dict(obj["not"]) if obj.get("not") is not None else None,
            "or": [QueryFilter.from_dict(_item) for _item in obj["or"]] if obj.get("or") is not None else None,
            "tag": QueryComparisonExpression.from_dict(obj["tag"]) if obj.get("tag") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
QueryFilter.model_rebuild(raise_errors=False)


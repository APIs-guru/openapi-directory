# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.export_execution_properties import ExportExecutionProperties

class TestExportExecutionProperties(unittest.TestCase):
    """ExportExecutionProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExportExecutionProperties:
        """Test ExportExecutionProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExportExecutionProperties`
        """
        model = ExportExecutionProperties()
        if include_optional:
            return ExportExecutionProperties(
                execution_type = 'OnDemand',
                file_name = '',
                processing_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                processing_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                run_settings = openapi_client.models.common_export_properties.CommonExportProperties(
                    definition = openapi_client.models.query_definition.QueryDefinition(
                        dataset = openapi_client.models.query_dataset.QueryDataset(
                            aggregation = {
                                'key' : openapi_client.models.query_aggregation.QueryAggregation(
                                    function = 'Sum', 
                                    name = '', )
                                }, 
                            configuration = openapi_client.models.query_dataset_configuration.QueryDatasetConfiguration(
                                columns = [
                                    ''
                                    ], ), 
                            filter = openapi_client.models.query_filter.QueryFilter(
                                and = [
                                    openapi_client.models.query_filter.QueryFilter(
                                        dimension = openapi_client.models.query_comparison_expression.QueryComparisonExpression(
                                            name = '', 
                                            operator = 'In', 
                                            values = [
                                                ''
                                                ], ), 
                                        not = , 
                                        or = [
                                            
                                            ], 
                                        tag = openapi_client.models.query_comparison_expression.QueryComparisonExpression(
                                            name = '', 
                                            operator = 'In', 
                                            values = [
                                                ''
                                                ], ), )
                                    ], 
                                dimension = , 
                                not = , 
                                or = [
                                    
                                    ], 
                                tag = , ), 
                            granularity = 'Daily', 
                            grouping = [
                                openapi_client.models.query_grouping.QueryGrouping(
                                    name = '', 
                                    type = 'Tag', )
                                ], ), 
                        time_period = openapi_client.models.query_time_period.QueryTimePeriod(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        timeframe = 'MonthToDate', 
                        type = 'Usage', ), 
                    delivery_info = openapi_client.models.export_delivery_info.ExportDeliveryInfo(
                        destination = openapi_client.models.export_delivery_destination.ExportDeliveryDestination(
                            container = '', 
                            resource_id = '', 
                            root_folder_path = '', ), ), 
                    format = 'Csv', ),
                status = 'Queued',
                submitted_by = '',
                submitted_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ExportExecutionProperties(
        )
        """

    def testExportExecutionProperties(self):
        """Test ExportExecutionProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

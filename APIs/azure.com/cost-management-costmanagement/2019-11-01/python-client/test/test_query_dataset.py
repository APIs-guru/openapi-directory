# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.query_dataset import QueryDataset

class TestQueryDataset(unittest.TestCase):
    """QueryDataset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryDataset:
        """Test QueryDataset
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryDataset`
        """
        model = QueryDataset()
        if include_optional:
            return QueryDataset(
                aggregation = {
                    'key' : openapi_client.models.query_aggregation.QueryAggregation(
                        function = 'Sum', 
                        name = '', )
                    },
                configuration = openapi_client.models.query_dataset_configuration.QueryDatasetConfiguration(
                    columns = [
                        ''
                        ], ),
                filter = openapi_client.models.query_filter.QueryFilter(
                    and = [
                        openapi_client.models.query_filter.QueryFilter(
                            dimension = openapi_client.models.query_comparison_expression.QueryComparisonExpression(
                                name = '', 
                                operator = 'In', 
                                values = [
                                    ''
                                    ], ), 
                            not = , 
                            or = [
                                
                                ], 
                            tag = openapi_client.models.query_comparison_expression.QueryComparisonExpression(
                                name = '', 
                                operator = 'In', 
                                values = [
                                    ''
                                    ], ), )
                        ], 
                    dimension = , 
                    not = , 
                    or = [
                        
                        ], 
                    tag = , ),
                granularity = 'Daily',
                grouping = [
                    openapi_client.models.query_grouping.QueryGrouping(
                        name = '', 
                        type = 'Tag', )
                    ]
            )
        else:
            return QueryDataset(
        )
        """

    def testQueryDataset(self):
        """Test QueryDataset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

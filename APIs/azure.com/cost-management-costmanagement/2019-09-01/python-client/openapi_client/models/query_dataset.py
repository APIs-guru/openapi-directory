# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.query_aggregation import QueryAggregation
from openapi_client.models.query_dataset_configuration import QueryDatasetConfiguration
from openapi_client.models.query_filter import QueryFilter
from openapi_client.models.query_grouping import QueryGrouping
from openapi_client.models.query_sorting_configuration import QuerySortingConfiguration
from typing import Optional, Set
from typing_extensions import Self

class QueryDataset(BaseModel):
    """
    The definition of data present in the query.
    """ # noqa: E501
    aggregation: Optional[Dict[str, QueryAggregation]] = Field(default=None, description="Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.")
    configuration: Optional[QueryDatasetConfiguration] = None
    filter: Optional[QueryFilter] = None
    granularity: Optional[StrictStr] = Field(default=None, description="The granularity of rows in the query.")
    grouping: Optional[Annotated[List[QueryGrouping], Field(max_length=2)]] = Field(default=None, description="Array of group by expression to use in the query. Query can have up to 2 group by clauses.")
    sorting: Optional[List[QuerySortingConfiguration]] = Field(default=None, description="Array of sorting by columns in query.")
    __properties: ClassVar[List[str]] = ["aggregation", "configuration", "filter", "granularity", "grouping", "sorting"]

    @field_validator('granularity')
    def granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Daily', 'Hourly']):
            raise ValueError("must be one of enum values ('Daily', 'Hourly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryDataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in aggregation (dict)
        _field_dict = {}
        if self.aggregation:
            for _key_aggregation in self.aggregation:
                if self.aggregation[_key_aggregation]:
                    _field_dict[_key_aggregation] = self.aggregation[_key_aggregation].to_dict()
            _dict['aggregation'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in grouping (list)
        _items = []
        if self.grouping:
            for _item_grouping in self.grouping:
                if _item_grouping:
                    _items.append(_item_grouping.to_dict())
            _dict['grouping'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sorting (list)
        _items = []
        if self.sorting:
            for _item_sorting in self.sorting:
                if _item_sorting:
                    _items.append(_item_sorting.to_dict())
            _dict['sorting'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryDataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregation": dict(
                (_k, QueryAggregation.from_dict(_v))
                for _k, _v in obj["aggregation"].items()
            )
            if obj.get("aggregation") is not None
            else None,
            "configuration": QueryDatasetConfiguration.from_dict(obj["configuration"]) if obj.get("configuration") is not None else None,
            "filter": QueryFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "granularity": obj.get("granularity"),
            "grouping": [QueryGrouping.from_dict(_item) for _item in obj["grouping"]] if obj.get("grouping") is not None else None,
            "sorting": [QuerySortingConfiguration.from_dict(_item) for _item in obj["sorting"]] if obj.get("sorting") is not None else None
        })
        return _obj



# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-05-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_config import ReportConfig

class TestReportConfig(unittest.TestCase):
    """ReportConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportConfig:
        """Test ReportConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportConfig`
        """
        model = ReportConfig()
        if include_optional:
            return ReportConfig(
                properties = openapi_client.models.report_config_properties.ReportConfigProperties(
                    definition = openapi_client.models.report_config_definition.ReportConfigDefinition(
                        dataset = openapi_client.models.report_config_dataset.ReportConfigDataset(
                            aggregation = {
                                'key' : openapi_client.models.report_config_aggregation.ReportConfigAggregation(
                                    function = 'Sum', 
                                    name = '', )
                                }, 
                            configuration = openapi_client.models.report_config_dataset_configuration.ReportConfigDatasetConfiguration(
                                columns = [
                                    ''
                                    ], ), 
                            filter = openapi_client.models.report_config_filter.ReportConfigFilter(
                                and = [
                                    openapi_client.models.report_config_filter.ReportConfigFilter(
                                        dimension = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                            name = '', 
                                            operator = 'In', 
                                            values = [
                                                ''
                                                ], ), 
                                        not = , 
                                        or = [
                                            
                                            ], 
                                        tag = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                            name = '', 
                                            operator = 'In', 
                                            values = [
                                                ''
                                                ], ), )
                                    ], 
                                dimension = , 
                                not = , 
                                or = [
                                    
                                    ], 
                                tag = , ), 
                            granularity = 'Daily', 
                            grouping = [
                                openapi_client.models.report_config_grouping.ReportConfigGrouping(
                                    column_type = 'Tag', 
                                    name = '', )
                                ], ), 
                        time_period = openapi_client.models.report_config_time_period.ReportConfigTimePeriod(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        timeframe = 'WeekToDate', 
                        type = 'Usage', ), 
                    delivery_info = openapi_client.models.report_config_delivery_info.ReportConfigDeliveryInfo(
                        destination = openapi_client.models.report_config_delivery_destination.ReportConfigDeliveryDestination(
                            container = '', 
                            resource_id = '', 
                            root_folder_path = '', ), ), 
                    format = 'Csv', 
                    schedule = openapi_client.models.report_config_schedule.ReportConfigSchedule(
                        recurrence = 'Daily', 
                        recurrence_period = openapi_client.models.report_config_recurrence_period.ReportConfigRecurrencePeriod(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        status = 'Active', ), ),
                id = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return ReportConfig(
        )
        """

    def testReportConfig(self):
        """Test ReportConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

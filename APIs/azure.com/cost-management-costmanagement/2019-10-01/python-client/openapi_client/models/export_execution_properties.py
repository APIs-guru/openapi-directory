# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.common_export_properties import CommonExportProperties
from typing import Optional, Set
from typing_extensions import Self

class ExportExecutionProperties(BaseModel):
    """
    The properties of the export execution.
    """ # noqa: E501
    execution_type: Optional[StrictStr] = Field(default=None, description="The type of the export execution.", alias="executionType")
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the file export got written to.", alias="fileName")
    processing_end_time: Optional[datetime] = Field(default=None, description="The time when export execution finished.", alias="processingEndTime")
    processing_start_time: Optional[datetime] = Field(default=None, description="The time when export was picked up to be executed.", alias="processingStartTime")
    run_settings: Optional[CommonExportProperties] = Field(default=None, alias="runSettings")
    status: Optional[StrictStr] = Field(default=None, description="The status of the export execution.")
    submitted_by: Optional[StrictStr] = Field(default=None, description="The identifier for the entity that executed the export. For OnDemand executions, it is the email id. For Scheduled executions, it is the constant value - System.", alias="submittedBy")
    submitted_time: Optional[datetime] = Field(default=None, description="The time when export was queued to be executed.", alias="submittedTime")
    __properties: ClassVar[List[str]] = ["executionType", "fileName", "processingEndTime", "processingStartTime", "runSettings", "status", "submittedBy", "submittedTime"]

    @field_validator('execution_type')
    def execution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OnDemand', 'Scheduled']):
            raise ValueError("must be one of enum values ('OnDemand', 'Scheduled')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Queued', 'InProgress', 'Completed', 'Failed', 'Timeout', 'NewDataNotAvailable', 'DataNotAvailable']):
            raise ValueError("must be one of enum values ('Queued', 'InProgress', 'Completed', 'Failed', 'Timeout', 'NewDataNotAvailable', 'DataNotAvailable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportExecutionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of run_settings
        if self.run_settings:
            _dict['runSettings'] = self.run_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportExecutionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "executionType": obj.get("executionType"),
            "fileName": obj.get("fileName"),
            "processingEndTime": obj.get("processingEndTime"),
            "processingStartTime": obj.get("processingStartTime"),
            "runSettings": CommonExportProperties.from_dict(obj["runSettings"]) if obj.get("runSettings") is not None else None,
            "status": obj.get("status"),
            "submittedBy": obj.get("submittedBy"),
            "submittedTime": obj.get("submittedTime")
        })
        return _obj



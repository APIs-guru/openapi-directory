# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_definition import AlertDefinition
from typing import Optional, Set
from typing_extensions import Self

class AlertProperties(BaseModel):
    """
    The properties of an Alert.
    """ # noqa: E501
    close_time: Optional[datetime] = Field(default=None, description="The time when the alert was closed (resolved / overridden).", alias="closeTime")
    cost_entity_id: Optional[StrictStr] = Field(default=None, description="The id of the creating cost-entity (budget, invoice, credit).", alias="costEntityId")
    creation_time: Optional[datetime] = Field(default=None, description="The time when the alert was created.", alias="creationTime")
    definition: Optional[AlertDefinition] = None
    description: Optional[StrictStr] = Field(default=None, description="Description of an alert.")
    details: Optional[Dict[str, StrictStr]] = Field(default=None, description="Specific details of an alert - key-value dictionary.")
    modification_time: Optional[datetime] = Field(default=None, description="The current status when alert was modified.", alias="modificationTime")
    modification_username: Optional[StrictStr] = Field(default=None, description="The username who modified the alert.", alias="modificationUsername")
    scope: Optional[StrictStr] = Field(default=None, description="The scope of an alert.")
    source: Optional[StrictStr] = Field(default=None, description="The source of an Alert")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the alert.")
    status_modification_time: Optional[datetime] = Field(default=None, description="The current status when alert status was modified.", alias="statusModificationTime")
    __properties: ClassVar[List[str]] = ["closeTime", "costEntityId", "creationTime", "definition", "description", "details", "modificationTime", "modificationUsername", "scope", "source", "status", "statusModificationTime"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Preset', 'User']):
            raise ValueError("must be one of enum values ('Preset', 'User')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Overridden', 'Resolved', 'Dismissed']):
            raise ValueError("must be one of enum values ('Active', 'Overridden', 'Resolved', 'Dismissed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "close_time",
            "cost_entity_id",
            "creation_time",
            "description",
            "details",
            "modification_time",
            "modification_username",
            "scope",
            "source",
            "status_modification_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "closeTime": obj.get("closeTime"),
            "costEntityId": obj.get("costEntityId"),
            "creationTime": obj.get("creationTime"),
            "definition": AlertDefinition.from_dict(obj["definition"]) if obj.get("definition") is not None else None,
            "description": obj.get("description"),
            "details": obj.get("details"),
            "modificationTime": obj.get("modificationTime"),
            "modificationUsername": obj.get("modificationUsername"),
            "scope": obj.get("scope"),
            "source": obj.get("source"),
            "status": obj.get("status"),
            "statusModificationTime": obj.get("statusModificationTime")
        })
        return _obj



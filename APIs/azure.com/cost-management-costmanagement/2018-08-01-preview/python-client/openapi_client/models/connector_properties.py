# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connector_collection_info import ConnectorCollectionInfo
from typing import Optional, Set
from typing_extensions import Self

class ConnectorProperties(BaseModel):
    """
    The properties of a Connector
    """ # noqa: E501
    collection: Optional[ConnectorCollectionInfo] = None
    created_on: Optional[datetime] = Field(default=None, description="Connector definition creation datetime", alias="createdOn")
    credentials_key: Optional[StrictStr] = Field(default=None, description="Credentials authentication key (eg AWS ARN)", alias="credentialsKey")
    credentials_secret: Optional[StrictStr] = Field(default=None, description="Credentials secret (eg AWS ExternalId)", alias="credentialsSecret")
    display_name: Optional[StrictStr] = Field(default=None, description="Connector DisplayName (defaults to Name)", alias="displayName")
    modified_on: Optional[datetime] = Field(default=None, description="Connector last modified datetime", alias="modifiedOn")
    provider_account_id: Optional[StrictStr] = Field(default=None, description="Connector providerAccountId (determined from credentials)", alias="providerAccountId")
    report_id: Optional[StrictStr] = Field(default=None, description="Identifying source report. (For AWS this is a CUR report name, defined with Daily and with Resources)", alias="reportId")
    status: Optional[StrictStr] = Field(default=None, description="Connector status")
    __properties: ClassVar[List[str]] = ["collection", "createdOn", "credentialsKey", "credentialsSecret", "displayName", "modifiedOn", "providerAccountId", "reportId", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'error', 'suspended']):
            raise ValueError("must be one of enum values ('active', 'error', 'suspended')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectorProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_on",
            "modified_on",
            "provider_account_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of collection
        if self.collection:
            _dict['collection'] = self.collection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectorProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collection": ConnectorCollectionInfo.from_dict(obj["collection"]) if obj.get("collection") is not None else None,
            "createdOn": obj.get("createdOn"),
            "credentialsKey": obj.get("credentialsKey"),
            "credentialsSecret": obj.get("credentialsSecret"),
            "displayName": obj.get("displayName"),
            "modifiedOn": obj.get("modifiedOn"),
            "providerAccountId": obj.get("providerAccountId"),
            "reportId": obj.get("reportId"),
            "status": obj.get("status")
        })
        return _obj



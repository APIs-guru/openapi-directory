# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_properties import ReportProperties

class TestReportProperties(unittest.TestCase):
    """ReportProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportProperties:
        """Test ReportProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportProperties`
        """
        model = ReportProperties()
        if include_optional:
            return ReportProperties(
                schedule = openapi_client.models.report_schedule.ReportSchedule(
                    recurrence = 'Daily', 
                    recurrence_period = openapi_client.models.report_recurrence_period.ReportRecurrencePeriod(
                        from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    status = 'Active', ),
                definition = openapi_client.models.report_definition.ReportDefinition(
                    dataset = openapi_client.models.report_dataset.ReportDataset(
                        aggregation = {
                            'key' : openapi_client.models.report_aggregation.ReportAggregation(
                                function = 'Sum', 
                                name = '', )
                            }, 
                        configuration = openapi_client.models.report_dataset_configuration.ReportDatasetConfiguration(
                            columns = [
                                ''
                                ], ), 
                        filter = openapi_client.models.report_filter.ReportFilter(
                            and = [
                                openapi_client.models.report_filter.ReportFilter(
                                    dimension = openapi_client.models.report_comparison_expression.ReportComparisonExpression(
                                        name = '', 
                                        operator = 'In', 
                                        values = [
                                            ''
                                            ], ), 
                                    not = , 
                                    or = [
                                        
                                        ], 
                                    tag = openapi_client.models.report_comparison_expression.ReportComparisonExpression(
                                        name = '', 
                                        operator = 'In', 
                                        values = [
                                            ''
                                            ], ), )
                                ], 
                            dimension = , 
                            not = , 
                            or = [
                                
                                ], 
                            tag = , ), 
                        granularity = 'Daily', 
                        grouping = [
                            openapi_client.models.report_grouping.ReportGrouping(
                                name = '', 
                                type = 'Tag', )
                            ], ), 
                    time_period = openapi_client.models.report_time_period.ReportTimePeriod(
                        from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    timeframe = 'WeekToDate', 
                    type = 'Usage', ),
                delivery_info = openapi_client.models.report_delivery_info.ReportDeliveryInfo(
                    destination = openapi_client.models.report_delivery_destination.ReportDeliveryDestination(
                        container = '', 
                        resource_id = '', 
                        root_folder_path = '', ), ),
                format = 'Csv'
            )
        else:
            return ReportProperties(
                definition = openapi_client.models.report_definition.ReportDefinition(
                    dataset = openapi_client.models.report_dataset.ReportDataset(
                        aggregation = {
                            'key' : openapi_client.models.report_aggregation.ReportAggregation(
                                function = 'Sum', 
                                name = '', )
                            }, 
                        configuration = openapi_client.models.report_dataset_configuration.ReportDatasetConfiguration(
                            columns = [
                                ''
                                ], ), 
                        filter = openapi_client.models.report_filter.ReportFilter(
                            and = [
                                openapi_client.models.report_filter.ReportFilter(
                                    dimension = openapi_client.models.report_comparison_expression.ReportComparisonExpression(
                                        name = '', 
                                        operator = 'In', 
                                        values = [
                                            ''
                                            ], ), 
                                    not = , 
                                    or = [
                                        
                                        ], 
                                    tag = openapi_client.models.report_comparison_expression.ReportComparisonExpression(
                                        name = '', 
                                        operator = 'In', 
                                        values = [
                                            ''
                                            ], ), )
                                ], 
                            dimension = , 
                            not = , 
                            or = [
                                
                                ], 
                            tag = , ), 
                        granularity = 'Daily', 
                        grouping = [
                            openapi_client.models.report_grouping.ReportGrouping(
                                name = '', 
                                type = 'Tag', )
                            ], ), 
                    time_period = openapi_client.models.report_time_period.ReportTimePeriod(
                        from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    timeframe = 'WeekToDate', 
                    type = 'Usage', ),
                delivery_info = openapi_client.models.report_delivery_info.ReportDeliveryInfo(
                    destination = openapi_client.models.report_delivery_destination.ReportDeliveryDestination(
                        container = '', 
                        resource_id = '', 
                        root_folder_path = '', ), ),
        )
        """

    def testReportProperties(self):
        """Test ReportProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

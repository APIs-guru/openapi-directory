# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_config_definition import ReportConfigDefinition

class TestReportConfigDefinition(unittest.TestCase):
    """ReportConfigDefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportConfigDefinition:
        """Test ReportConfigDefinition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportConfigDefinition`
        """
        model = ReportConfigDefinition()
        if include_optional:
            return ReportConfigDefinition(
                dataset = openapi_client.models.report_config_dataset.ReportConfigDataset(
                    aggregation = {
                        'key' : openapi_client.models.report_config_aggregation.ReportConfigAggregation(
                            function = 'Sum', 
                            name = '', )
                        }, 
                    configuration = openapi_client.models.report_config_dataset_configuration.ReportConfigDatasetConfiguration(
                        columns = [
                            ''
                            ], ), 
                    filter = openapi_client.models.report_config_filter.ReportConfigFilter(
                        and = [
                            openapi_client.models.report_config_filter.ReportConfigFilter(
                                dimension = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                    name = '', 
                                    operator = 'In', 
                                    values = [
                                        ''
                                        ], ), 
                                not = , 
                                or = [
                                    
                                    ], 
                                tag = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                    name = '', 
                                    operator = 'In', 
                                    values = [
                                        ''
                                        ], ), )
                            ], 
                        dimension = , 
                        not = , 
                        or = [
                            
                            ], 
                        tag = , ), 
                    granularity = 'Daily', 
                    grouping = [
                        openapi_client.models.report_config_grouping.ReportConfigGrouping(
                            name = '', 
                            type = 'Tag', )
                        ], 
                    sorting = [
                        openapi_client.models.report_config_sorting.ReportConfigSorting(
                            direction = 'Ascending', 
                            name = '', )
                        ], ),
                time_period = openapi_client.models.report_config_time_period.ReportConfigTimePeriod(
                    from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                timeframe = 'WeekToDate',
                type = 'Usage'
            )
        else:
            return ReportConfigDefinition(
                timeframe = 'WeekToDate',
                type = 'Usage',
        )
        """

    def testReportConfigDefinition(self):
        """Test ReportConfigDefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.budget_model import BudgetModel

class TestBudgetModel(unittest.TestCase):
    """BudgetModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BudgetModel:
        """Test BudgetModel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BudgetModel`
        """
        model = BudgetModel()
        if include_optional:
            return BudgetModel(
                properties = openapi_client.models.budget_properties.BudgetProperties(
                    amount = 1.337, 
                    category = 'Cost', 
                    current_spend = openapi_client.models.current_spend.CurrentSpend(
                        amount = 1.337, 
                        unit = '', ), 
                    filter = openapi_client.models.report_config_filter.ReportConfigFilter(
                        and = [
                            openapi_client.models.report_config_filter.ReportConfigFilter(
                                dimension = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                    name = '', 
                                    operator = 'In', 
                                    values = [
                                        ''
                                        ], ), 
                                not = , 
                                or = [
                                    
                                    ], 
                                tag = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                    name = '', 
                                    operator = 'In', 
                                    values = [
                                        ''
                                        ], ), )
                            ], 
                        dimension = , 
                        not = , 
                        or = [
                            
                            ], 
                        tag = , ), 
                    notifications = {
                        'key' : openapi_client.models.notification.Notification(
                            contact_emails = [
                                ''
                                ], 
                            contact_groups = [
                                ''
                                ], 
                            contact_roles = [
                                ''
                                ], 
                            enabled = True, 
                            operator = 'EqualTo', 
                            threshold = 1.337, )
                        }, 
                    time_grain = 'Monthly', 
                    time_period = openapi_client.models.budget_time_period.BudgetTimePeriod(
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ),
                e_tag = '',
                id = '',
                name = '',
                type = ''
            )
        else:
            return BudgetModel(
        )
        """

    def testBudgetModel(self):
        """Test BudgetModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.budget_properties import BudgetProperties

class TestBudgetProperties(unittest.TestCase):
    """BudgetProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BudgetProperties:
        """Test BudgetProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BudgetProperties`
        """
        model = BudgetProperties()
        if include_optional:
            return BudgetProperties(
                amount = 1.337,
                category = 'Cost',
                current_spend = openapi_client.models.current_spend.CurrentSpend(
                    amount = 1.337, 
                    unit = '', ),
                filter = openapi_client.models.report_config_filter.ReportConfigFilter(
                    and = [
                        openapi_client.models.report_config_filter.ReportConfigFilter(
                            dimension = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                name = '', 
                                operator = 'In', 
                                values = [
                                    ''
                                    ], ), 
                            not = , 
                            or = [
                                
                                ], 
                            tag = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                name = '', 
                                operator = 'In', 
                                values = [
                                    ''
                                    ], ), )
                        ], 
                    dimension = , 
                    not = , 
                    or = [
                        
                        ], 
                    tag = , ),
                notifications = {
                    'key' : openapi_client.models.notification.Notification(
                        contact_emails = [
                            ''
                            ], 
                        contact_groups = [
                            ''
                            ], 
                        contact_roles = [
                            ''
                            ], 
                        enabled = True, 
                        operator = 'EqualTo', 
                        threshold = 1.337, )
                    },
                time_grain = 'Monthly',
                time_period = openapi_client.models.budget_time_period.BudgetTimePeriod(
                    end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return BudgetProperties(
                amount = 1.337,
                category = 'Cost',
                time_grain = 'Monthly',
                time_period = openapi_client.models.budget_time_period.BudgetTimePeriod(
                    end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testBudgetProperties(self):
        """Test BudgetProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

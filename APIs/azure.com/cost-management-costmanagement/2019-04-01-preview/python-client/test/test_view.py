# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.view import View

class TestView(unittest.TestCase):
    """View unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> View:
        """Test View
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `View`
        """
        model = View()
        if include_optional:
            return View(
                properties = openapi_client.models.view_properties.ViewProperties(
                    accumulated = 'true', 
                    chart = 'Area', 
                    created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    display_name = '', 
                    kpis = [
                        openapi_client.models.kpi_properties.KpiProperties(
                            enabled = True, 
                            id = '', 
                            type = 'Forecast', )
                        ], 
                    metric = 'ActualCost', 
                    modified_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    pivots = [
                        openapi_client.models.pivot_properties.PivotProperties(
                            name = '', 
                            type = 'Dimension', )
                        ], 
                    query = openapi_client.models.report_config_definition.ReportConfigDefinition(
                        dataset = openapi_client.models.report_config_dataset.ReportConfigDataset(
                            aggregation = {
                                'key' : openapi_client.models.report_config_aggregation.ReportConfigAggregation(
                                    function = 'Sum', 
                                    name = '', )
                                }, 
                            configuration = openapi_client.models.report_config_dataset_configuration.ReportConfigDatasetConfiguration(
                                columns = [
                                    ''
                                    ], ), 
                            filter = openapi_client.models.report_config_filter.ReportConfigFilter(
                                and = [
                                    openapi_client.models.report_config_filter.ReportConfigFilter(
                                        dimension = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                            name = '', 
                                            operator = 'In', 
                                            values = [
                                                ''
                                                ], ), 
                                        not = , 
                                        or = [
                                            
                                            ], 
                                        tag = openapi_client.models.report_config_comparison_expression.ReportConfigComparisonExpression(
                                            name = '', 
                                            operator = 'In', 
                                            values = [
                                                ''
                                                ], ), )
                                    ], 
                                dimension = , 
                                not = , 
                                or = [
                                    
                                    ], 
                                tag = , ), 
                            granularity = 'Daily', 
                            grouping = [
                                openapi_client.models.report_config_grouping.ReportConfigGrouping(
                                    name = '', 
                                    type = 'Tag', )
                                ], 
                            sorting = [
                                openapi_client.models.report_config_sorting.ReportConfigSorting(
                                    direction = 'Ascending', 
                                    name = '', )
                                ], ), 
                        time_period = openapi_client.models.report_config_time_period.ReportConfigTimePeriod(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        timeframe = 'WeekToDate', 
                        type = 'Usage', ), 
                    scope = '', ),
                e_tag = '',
                id = '',
                name = '',
                type = ''
            )
        else:
            return View(
        )
        """

    def testView(self):
        """Test View"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

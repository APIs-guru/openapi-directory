# coding: utf-8

"""
    CostManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.kpi_properties import KpiProperties
from openapi_client.models.pivot_properties import PivotProperties
from openapi_client.models.report_config_definition import ReportConfigDefinition
from typing import Optional, Set
from typing_extensions import Self

class ViewProperties(BaseModel):
    """
    The properties of the view.
    """ # noqa: E501
    accumulated: Optional[StrictStr] = Field(default=None, description="Show costs accumulated over time.")
    chart: Optional[StrictStr] = Field(default=None, description="Chart type of the main view in Cost Analysis. Required.")
    created_on: Optional[datetime] = Field(default=None, description="Date the user created this view.", alias="createdOn")
    display_name: Optional[StrictStr] = Field(default=None, description="User input name of the view. Required.", alias="displayName")
    kpis: Optional[List[KpiProperties]] = Field(default=None, description="List of KPIs to show in Cost Analysis UI.")
    metric: Optional[StrictStr] = Field(default=None, description="Metric to use when displaying costs.")
    modified_on: Optional[datetime] = Field(default=None, description="Date when the user last modified this view.", alias="modifiedOn")
    pivots: Optional[List[PivotProperties]] = Field(default=None, description="Configuration of 3 sub-views in the Cost Analysis UI.")
    query: Optional[ReportConfigDefinition] = None
    scope: Optional[StrictStr] = Field(default=None, description="Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope.")
    __properties: ClassVar[List[str]] = ["accumulated", "chart", "createdOn", "displayName", "kpis", "metric", "modifiedOn", "pivots", "query", "scope"]

    @field_validator('accumulated')
    def accumulated_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    @field_validator('chart')
    def chart_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Area', 'Line', 'StackedColumn', 'GroupedColumn', 'Table']):
            raise ValueError("must be one of enum values ('Area', 'Line', 'StackedColumn', 'GroupedColumn', 'Table')")
        return value

    @field_validator('metric')
    def metric_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ActualCost', 'AmortizedCost', 'AHUB']):
            raise ValueError("must be one of enum values ('ActualCost', 'AmortizedCost', 'AHUB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ViewProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_on",
            "modified_on",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in kpis (list)
        _items = []
        if self.kpis:
            for _item_kpis in self.kpis:
                if _item_kpis:
                    _items.append(_item_kpis.to_dict())
            _dict['kpis'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pivots (list)
        _items = []
        if self.pivots:
            for _item_pivots in self.pivots:
                if _item_pivots:
                    _items.append(_item_pivots.to_dict())
            _dict['pivots'] = _items
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ViewProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accumulated": obj.get("accumulated"),
            "chart": obj.get("chart"),
            "createdOn": obj.get("createdOn"),
            "displayName": obj.get("displayName"),
            "kpis": [KpiProperties.from_dict(_item) for _item in obj["kpis"]] if obj.get("kpis") is not None else None,
            "metric": obj.get("metric"),
            "modifiedOn": obj.get("modifiedOn"),
            "pivots": [PivotProperties.from_dict(_item) for _item in obj["pivots"]] if obj.get("pivots") is not None else None,
            "query": ReportConfigDefinition.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "scope": obj.get("scope")
        })
        return _obj



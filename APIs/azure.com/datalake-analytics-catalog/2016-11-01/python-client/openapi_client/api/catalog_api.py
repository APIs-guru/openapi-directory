# coding: utf-8

"""
    DataLakeAnalyticsCatalogManagementClient

    Creates an Azure Data Lake Analytics catalog client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.acl_list import AclList
from openapi_client.models.data_lake_analytics_catalog_credential_create_parameters import DataLakeAnalyticsCatalogCredentialCreateParameters
from openapi_client.models.data_lake_analytics_catalog_credential_delete_parameters import DataLakeAnalyticsCatalogCredentialDeleteParameters
from openapi_client.models.data_lake_analytics_catalog_credential_update_parameters import DataLakeAnalyticsCatalogCredentialUpdateParameters
from openapi_client.models.data_lake_analytics_catalog_secret_create_or_update_parameters import DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters
from openapi_client.models.u_sql_assembly import USqlAssembly
from openapi_client.models.u_sql_assembly_list import USqlAssemblyList
from openapi_client.models.u_sql_credential import USqlCredential
from openapi_client.models.u_sql_credential_list import USqlCredentialList
from openapi_client.models.u_sql_database import USqlDatabase
from openapi_client.models.u_sql_database_list import USqlDatabaseList
from openapi_client.models.u_sql_external_data_source import USqlExternalDataSource
from openapi_client.models.u_sql_external_data_source_list import USqlExternalDataSourceList
from openapi_client.models.u_sql_package import USqlPackage
from openapi_client.models.u_sql_package_list import USqlPackageList
from openapi_client.models.u_sql_procedure import USqlProcedure
from openapi_client.models.u_sql_procedure_list import USqlProcedureList
from openapi_client.models.u_sql_schema import USqlSchema
from openapi_client.models.u_sql_schema_list import USqlSchemaList
from openapi_client.models.u_sql_secret import USqlSecret
from openapi_client.models.u_sql_table import USqlTable
from openapi_client.models.u_sql_table_fragment_list import USqlTableFragmentList
from openapi_client.models.u_sql_table_list import USqlTableList
from openapi_client.models.u_sql_table_partition import USqlTablePartition
from openapi_client.models.u_sql_table_partition_list import USqlTablePartitionList
from openapi_client.models.u_sql_table_preview import USqlTablePreview
from openapi_client.models.u_sql_table_statistics import USqlTableStatistics
from openapi_client.models.u_sql_table_statistics_list import USqlTableStatisticsList
from openapi_client.models.u_sql_table_type import USqlTableType
from openapi_client.models.u_sql_table_type_list import USqlTableTypeList
from openapi_client.models.u_sql_table_valued_function import USqlTableValuedFunction
from openapi_client.models.u_sql_table_valued_function_list import USqlTableValuedFunctionList
from openapi_client.models.u_sql_type_list import USqlTypeList
from openapi_client.models.u_sql_view import USqlView
from openapi_client.models.u_sql_view_list import USqlViewList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CatalogApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def catalog_create_credential(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogCredentialCreateParameters, Field(description="The parameters required to create the credential (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """catalog_create_credential

        Creates the specified credential for use with external data sources in the specified database.

        :param database_name: The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to create the credential (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogCredentialCreateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_create_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_create_credential_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogCredentialCreateParameters, Field(description="The parameters required to create the credential (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """catalog_create_credential

        Creates the specified credential for use with external data sources in the specified database.

        :param database_name: The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to create the credential (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogCredentialCreateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_create_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_create_credential_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogCredentialCreateParameters, Field(description="The parameters required to create the credential (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_create_credential

        Creates the specified credential for use with external data sources in the specified database.

        :param database_name: The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to create the credential (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogCredentialCreateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_create_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_create_credential_serialize(
        self,
        database_name,
        credential_name,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if credential_name is not None:
            _path_params['credentialName'] = credential_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/catalog/usql/databases/{databaseName}/credentials/{credentialName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_create_secret(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database in which to create the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters, Field(description="The parameters required to create the secret (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) catalog_create_secret

        Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.

        :param database_name: The name of the database in which to create the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret. (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to create the secret (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_create_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_create_secret_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database in which to create the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters, Field(description="The parameters required to create the secret (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) catalog_create_secret

        Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.

        :param database_name: The name of the database in which to create the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret. (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to create the secret (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_create_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_create_secret_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database in which to create the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters, Field(description="The parameters required to create the secret (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) catalog_create_secret

        Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.

        :param database_name: The name of the database in which to create the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret. (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to create the secret (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_create_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_create_secret_serialize(
        self,
        database_name,
        secret_name,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if secret_name is not None:
            _path_params['secretName'] = secret_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/catalog/usql/databases/{databaseName}/secrets/{secretName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_delete_all_secrets(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) catalog_delete_all_secrets

        Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /catalog/usql/databases/{databaseName}/secrets is deprecated.", DeprecationWarning)

        _param = self._catalog_delete_all_secrets_serialize(
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_delete_all_secrets_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) catalog_delete_all_secrets

        Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /catalog/usql/databases/{databaseName}/secrets is deprecated.", DeprecationWarning)

        _param = self._catalog_delete_all_secrets_serialize(
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_delete_all_secrets_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) catalog_delete_all_secrets

        Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /catalog/usql/databases/{databaseName}/secrets is deprecated.", DeprecationWarning)

        _param = self._catalog_delete_all_secrets_serialize(
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_delete_all_secrets_serialize(
        self,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/catalog/usql/databases/{databaseName}/secrets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_delete_credential(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the credential.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential to delete")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        cascade: Annotated[Optional[StrictBool], Field(description="Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential.")] = None,
        parameters: Annotated[Optional[DataLakeAnalyticsCatalogCredentialDeleteParameters], Field(description="The parameters to delete a credential if the current user is not the account owner.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """catalog_delete_credential

        Deletes the specified credential in the specified database

        :param database_name: The name of the database containing the credential. (required)
        :type database_name: str
        :param credential_name: The name of the credential to delete (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param cascade: Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential.
        :type cascade: bool
        :param parameters: The parameters to delete a credential if the current user is not the account owner.
        :type parameters: DataLakeAnalyticsCatalogCredentialDeleteParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_delete_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            cascade=cascade,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_delete_credential_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the credential.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential to delete")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        cascade: Annotated[Optional[StrictBool], Field(description="Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential.")] = None,
        parameters: Annotated[Optional[DataLakeAnalyticsCatalogCredentialDeleteParameters], Field(description="The parameters to delete a credential if the current user is not the account owner.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """catalog_delete_credential

        Deletes the specified credential in the specified database

        :param database_name: The name of the database containing the credential. (required)
        :type database_name: str
        :param credential_name: The name of the credential to delete (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param cascade: Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential.
        :type cascade: bool
        :param parameters: The parameters to delete a credential if the current user is not the account owner.
        :type parameters: DataLakeAnalyticsCatalogCredentialDeleteParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_delete_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            cascade=cascade,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_delete_credential_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the credential.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential to delete")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        cascade: Annotated[Optional[StrictBool], Field(description="Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential.")] = None,
        parameters: Annotated[Optional[DataLakeAnalyticsCatalogCredentialDeleteParameters], Field(description="The parameters to delete a credential if the current user is not the account owner.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_delete_credential

        Deletes the specified credential in the specified database

        :param database_name: The name of the database containing the credential. (required)
        :type database_name: str
        :param credential_name: The name of the credential to delete (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param cascade: Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential.
        :type cascade: bool
        :param parameters: The parameters to delete a credential if the current user is not the account owner.
        :type parameters: DataLakeAnalyticsCatalogCredentialDeleteParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_delete_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            cascade=cascade,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_delete_credential_serialize(
        self,
        database_name,
        credential_name,
        api_version,
        cascade,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if credential_name is not None:
            _path_params['credentialName'] = credential_name
        # process the query parameters
        if cascade is not None:
            
            _query_params.append(('cascade', cascade))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/catalog/usql/databases/{databaseName}/credentials/{credentialName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_delete_secret(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret to delete")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) catalog_delete_secret

        Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret to delete (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_delete_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_delete_secret_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret to delete")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) catalog_delete_secret

        Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret to delete (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_delete_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_delete_secret_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret to delete")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) catalog_delete_secret

        Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret to delete (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("DELETE /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_delete_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_delete_secret_serialize(
        self,
        database_name,
        secret_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if secret_name is not None:
            _path_params['secretName'] = secret_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/catalog/usql/databases/{databaseName}/secrets/{secretName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_assembly(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the assembly.")],
        assembly_name: Annotated[StrictStr, Field(description="The name of the assembly.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlAssembly:
        """catalog_get_assembly

        Retrieves the specified assembly from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the assembly. (required)
        :type database_name: str
        :param assembly_name: The name of the assembly. (required)
        :type assembly_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_assembly_serialize(
            database_name=database_name,
            assembly_name=assembly_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlAssembly",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_assembly_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the assembly.")],
        assembly_name: Annotated[StrictStr, Field(description="The name of the assembly.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlAssembly]:
        """catalog_get_assembly

        Retrieves the specified assembly from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the assembly. (required)
        :type database_name: str
        :param assembly_name: The name of the assembly. (required)
        :type assembly_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_assembly_serialize(
            database_name=database_name,
            assembly_name=assembly_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlAssembly",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_assembly_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the assembly.")],
        assembly_name: Annotated[StrictStr, Field(description="The name of the assembly.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_assembly

        Retrieves the specified assembly from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the assembly. (required)
        :type database_name: str
        :param assembly_name: The name of the assembly. (required)
        :type assembly_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_assembly_serialize(
            database_name=database_name,
            assembly_name=assembly_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlAssembly",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_assembly_serialize(
        self,
        database_name,
        assembly_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if assembly_name is not None:
            _path_params['assemblyName'] = assembly_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/assemblies/{assemblyName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_credential(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlCredential:
        """catalog_get_credential

        Retrieves the specified credential from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlCredential",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_credential_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlCredential]:
        """catalog_get_credential

        Retrieves the specified credential from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlCredential",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_credential_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_credential

        Retrieves the specified credential from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlCredential",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_credential_serialize(
        self,
        database_name,
        credential_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if credential_name is not None:
            _path_params['credentialName'] = credential_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/credentials/{credentialName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_database(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlDatabase:
        """catalog_get_database

        Retrieves the specified database from the Data Lake Analytics catalog.

        :param database_name: The name of the database. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_database_serialize(
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlDatabase",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_database_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlDatabase]:
        """catalog_get_database

        Retrieves the specified database from the Data Lake Analytics catalog.

        :param database_name: The name of the database. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_database_serialize(
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlDatabase",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_database_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_database

        Retrieves the specified database from the Data Lake Analytics catalog.

        :param database_name: The name of the database. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_database_serialize(
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlDatabase",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_database_serialize(
        self,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_external_data_source(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the external data source.")],
        external_data_source_name: Annotated[StrictStr, Field(description="The name of the external data source.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlExternalDataSource:
        """catalog_get_external_data_source

        Retrieves the specified external data source from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the external data source. (required)
        :type database_name: str
        :param external_data_source_name: The name of the external data source. (required)
        :type external_data_source_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_external_data_source_serialize(
            database_name=database_name,
            external_data_source_name=external_data_source_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlExternalDataSource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_external_data_source_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the external data source.")],
        external_data_source_name: Annotated[StrictStr, Field(description="The name of the external data source.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlExternalDataSource]:
        """catalog_get_external_data_source

        Retrieves the specified external data source from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the external data source. (required)
        :type database_name: str
        :param external_data_source_name: The name of the external data source. (required)
        :type external_data_source_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_external_data_source_serialize(
            database_name=database_name,
            external_data_source_name=external_data_source_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlExternalDataSource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_external_data_source_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the external data source.")],
        external_data_source_name: Annotated[StrictStr, Field(description="The name of the external data source.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_external_data_source

        Retrieves the specified external data source from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the external data source. (required)
        :type database_name: str
        :param external_data_source_name: The name of the external data source. (required)
        :type external_data_source_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_external_data_source_serialize(
            database_name=database_name,
            external_data_source_name=external_data_source_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlExternalDataSource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_external_data_source_serialize(
        self,
        database_name,
        external_data_source_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if external_data_source_name is not None:
            _path_params['externalDataSourceName'] = external_data_source_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/externaldatasources/{externalDataSourceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_package(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the package.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the package.")],
        package_name: Annotated[StrictStr, Field(description="The name of the package.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlPackage:
        """catalog_get_package

        Retrieves the specified package from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the package. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the package. (required)
        :type schema_name: str
        :param package_name: The name of the package. (required)
        :type package_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_package_serialize(
            database_name=database_name,
            schema_name=schema_name,
            package_name=package_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlPackage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_package_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the package.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the package.")],
        package_name: Annotated[StrictStr, Field(description="The name of the package.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlPackage]:
        """catalog_get_package

        Retrieves the specified package from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the package. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the package. (required)
        :type schema_name: str
        :param package_name: The name of the package. (required)
        :type package_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_package_serialize(
            database_name=database_name,
            schema_name=schema_name,
            package_name=package_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlPackage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_package_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the package.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the package.")],
        package_name: Annotated[StrictStr, Field(description="The name of the package.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_package

        Retrieves the specified package from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the package. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the package. (required)
        :type schema_name: str
        :param package_name: The name of the package. (required)
        :type package_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_package_serialize(
            database_name=database_name,
            schema_name=schema_name,
            package_name=package_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlPackage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_package_serialize(
        self,
        database_name,
        schema_name,
        package_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if package_name is not None:
            _path_params['packageName'] = package_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/packages/{packageName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_procedure(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the procedure.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the procedure.")],
        procedure_name: Annotated[StrictStr, Field(description="The name of the procedure.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlProcedure:
        """catalog_get_procedure

        Retrieves the specified procedure from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the procedure. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the procedure. (required)
        :type schema_name: str
        :param procedure_name: The name of the procedure. (required)
        :type procedure_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_procedure_serialize(
            database_name=database_name,
            schema_name=schema_name,
            procedure_name=procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlProcedure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_procedure_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the procedure.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the procedure.")],
        procedure_name: Annotated[StrictStr, Field(description="The name of the procedure.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlProcedure]:
        """catalog_get_procedure

        Retrieves the specified procedure from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the procedure. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the procedure. (required)
        :type schema_name: str
        :param procedure_name: The name of the procedure. (required)
        :type procedure_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_procedure_serialize(
            database_name=database_name,
            schema_name=schema_name,
            procedure_name=procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlProcedure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_procedure_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the procedure.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the procedure.")],
        procedure_name: Annotated[StrictStr, Field(description="The name of the procedure.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_procedure

        Retrieves the specified procedure from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the procedure. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the procedure. (required)
        :type schema_name: str
        :param procedure_name: The name of the procedure. (required)
        :type procedure_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_procedure_serialize(
            database_name=database_name,
            schema_name=schema_name,
            procedure_name=procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlProcedure",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_procedure_serialize(
        self,
        database_name,
        schema_name,
        procedure_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if procedure_name is not None:
            _path_params['procedureName'] = procedure_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures/{procedureName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_schema(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlSchema:
        """catalog_get_schema

        Retrieves the specified schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param schema_name: The name of the schema. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_schema_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_schema_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlSchema]:
        """catalog_get_schema

        Retrieves the specified schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param schema_name: The name of the schema. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_schema_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_schema_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_schema

        Retrieves the specified schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param schema_name: The name of the schema. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_schema_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_schema_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_secret(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret to get")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlSecret:
        """(Deprecated) catalog_get_secret

        Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret to get (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_get_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSecret",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_secret_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret to get")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlSecret]:
        """(Deprecated) catalog_get_secret

        Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret to get (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_get_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSecret",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_secret_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret to get")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) catalog_get_secret

        Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret to get (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_get_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSecret",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_secret_serialize(
        self,
        database_name,
        secret_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if secret_name is not None:
            _path_params['secretName'] = secret_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/secrets/{secretName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_table(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTable:
        """catalog_get_table

        Retrieves the specified table from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table. (required)
        :type schema_name: str
        :param table_name: The name of the table. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTable",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_table_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTable]:
        """catalog_get_table

        Retrieves the specified table from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table. (required)
        :type schema_name: str
        :param table_name: The name of the table. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTable",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_table_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_table

        Retrieves the specified table from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table. (required)
        :type schema_name: str
        :param table_name: The name of the table. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTable",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_table_serialize(
        self,
        database_name,
        schema_name,
        table_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_table_partition(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partition.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partition.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partition.")],
        partition_name: Annotated[StrictStr, Field(description="The name of the table partition.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTablePartition:
        """catalog_get_table_partition

        Retrieves the specified table partition from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the partition. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partition. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partition. (required)
        :type table_name: str
        :param partition_name: The name of the table partition. (required)
        :type partition_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_partition_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            partition_name=partition_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePartition",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_table_partition_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partition.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partition.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partition.")],
        partition_name: Annotated[StrictStr, Field(description="The name of the table partition.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTablePartition]:
        """catalog_get_table_partition

        Retrieves the specified table partition from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the partition. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partition. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partition. (required)
        :type table_name: str
        :param partition_name: The name of the table partition. (required)
        :type partition_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_partition_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            partition_name=partition_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePartition",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_table_partition_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partition.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partition.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partition.")],
        partition_name: Annotated[StrictStr, Field(description="The name of the table partition.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_table_partition

        Retrieves the specified table partition from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the partition. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partition. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partition. (required)
        :type table_name: str
        :param partition_name: The name of the table partition. (required)
        :type partition_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_partition_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            partition_name=partition_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePartition",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_table_partition_serialize(
        self,
        database_name,
        schema_name,
        table_name,
        partition_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        if partition_name is not None:
            _path_params['partitionName'] = partition_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_table_statistic(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the statistics.")],
        statistics_name: Annotated[StrictStr, Field(description="The name of the table statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableStatistics:
        """catalog_get_table_statistic

        Retrieves the specified table statistics from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the statistics. (required)
        :type table_name: str
        :param statistics_name: The name of the table statistics. (required)
        :type statistics_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_statistic_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            statistics_name=statistics_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatistics",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_table_statistic_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the statistics.")],
        statistics_name: Annotated[StrictStr, Field(description="The name of the table statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableStatistics]:
        """catalog_get_table_statistic

        Retrieves the specified table statistics from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the statistics. (required)
        :type table_name: str
        :param statistics_name: The name of the table statistics. (required)
        :type statistics_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_statistic_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            statistics_name=statistics_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatistics",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_table_statistic_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the statistics.")],
        statistics_name: Annotated[StrictStr, Field(description="The name of the table statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_table_statistic

        Retrieves the specified table statistics from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the statistics. (required)
        :type table_name: str
        :param statistics_name: The name of the table statistics. (required)
        :type statistics_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_statistic_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            statistics_name=statistics_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatistics",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_table_statistic_serialize(
        self,
        database_name,
        schema_name,
        table_name,
        statistics_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        if statistics_name is not None:
            _path_params['statisticsName'] = statistics_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics/{statisticsName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_table_type(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table type.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table type.")],
        table_type_name: Annotated[StrictStr, Field(description="The name of the table type to retrieve.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableType:
        """catalog_get_table_type

        Retrieves the specified table type from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table type. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table type. (required)
        :type schema_name: str
        :param table_type_name: The name of the table type to retrieve. (required)
        :type table_type_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_type_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_type_name=table_type_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_table_type_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table type.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table type.")],
        table_type_name: Annotated[StrictStr, Field(description="The name of the table type to retrieve.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableType]:
        """catalog_get_table_type

        Retrieves the specified table type from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table type. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table type. (required)
        :type schema_name: str
        :param table_type_name: The name of the table type to retrieve. (required)
        :type table_type_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_type_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_type_name=table_type_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_table_type_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table type.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table type.")],
        table_type_name: Annotated[StrictStr, Field(description="The name of the table type to retrieve.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_table_type

        Retrieves the specified table type from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table type. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table type. (required)
        :type schema_name: str
        :param table_type_name: The name of the table type to retrieve. (required)
        :type table_type_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_type_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_type_name=table_type_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_table_type_serialize(
        self,
        database_name,
        schema_name,
        table_type_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_type_name is not None:
            _path_params['tableTypeName'] = table_type_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes/{tableTypeName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_table_valued_function(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued function.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table valued function.")],
        table_valued_function_name: Annotated[StrictStr, Field(description="The name of the tableValuedFunction.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableValuedFunction:
        """catalog_get_table_valued_function

        Retrieves the specified table valued function from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued function. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table valued function. (required)
        :type schema_name: str
        :param table_valued_function_name: The name of the tableValuedFunction. (required)
        :type table_valued_function_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_valued_function_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_valued_function_name=table_valued_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunction",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_table_valued_function_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued function.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table valued function.")],
        table_valued_function_name: Annotated[StrictStr, Field(description="The name of the tableValuedFunction.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableValuedFunction]:
        """catalog_get_table_valued_function

        Retrieves the specified table valued function from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued function. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table valued function. (required)
        :type schema_name: str
        :param table_valued_function_name: The name of the tableValuedFunction. (required)
        :type table_valued_function_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_valued_function_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_valued_function_name=table_valued_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunction",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_table_valued_function_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued function.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table valued function.")],
        table_valued_function_name: Annotated[StrictStr, Field(description="The name of the tableValuedFunction.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_table_valued_function

        Retrieves the specified table valued function from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued function. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table valued function. (required)
        :type schema_name: str
        :param table_valued_function_name: The name of the tableValuedFunction. (required)
        :type table_valued_function_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_table_valued_function_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_valued_function_name=table_valued_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunction",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_table_valued_function_serialize(
        self,
        database_name,
        schema_name,
        table_valued_function_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_valued_function_name is not None:
            _path_params['tableValuedFunctionName'] = table_valued_function_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions/{tableValuedFunctionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_get_view(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the view.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the view.")],
        view_name: Annotated[StrictStr, Field(description="The name of the view.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlView:
        """catalog_get_view

        Retrieves the specified view from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the view. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the view. (required)
        :type schema_name: str
        :param view_name: The name of the view. (required)
        :type view_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_view_serialize(
            database_name=database_name,
            schema_name=schema_name,
            view_name=view_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlView",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_get_view_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the view.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the view.")],
        view_name: Annotated[StrictStr, Field(description="The name of the view.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlView]:
        """catalog_get_view

        Retrieves the specified view from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the view. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the view. (required)
        :type schema_name: str
        :param view_name: The name of the view. (required)
        :type view_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_view_serialize(
            database_name=database_name,
            schema_name=schema_name,
            view_name=view_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlView",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_get_view_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the view.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the view.")],
        view_name: Annotated[StrictStr, Field(description="The name of the view.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_get_view

        Retrieves the specified view from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the view. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the view. (required)
        :type schema_name: str
        :param view_name: The name of the view. (required)
        :type view_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_get_view_serialize(
            database_name=database_name,
            schema_name=schema_name,
            view_name=view_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlView",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_get_view_serialize(
        self,
        database_name,
        schema_name,
        view_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if view_name is not None:
            _path_params['viewName'] = view_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views/{viewName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_acls(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AclList:
        """catalog_list_acls

        Retrieves the list of access control list (ACL) entries for the Data Lake Analytics catalog.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_acls_serialize(
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AclList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_acls_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AclList]:
        """catalog_list_acls

        Retrieves the list of access control list (ACL) entries for the Data Lake Analytics catalog.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_acls_serialize(
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AclList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_acls_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_acls

        Retrieves the list of access control list (ACL) entries for the Data Lake Analytics catalog.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_acls_serialize(
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AclList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_acls_serialize(
        self,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/acl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_acls_by_database(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AclList:
        """catalog_list_acls_by_database

        Retrieves the list of access control list (ACL) entries for the database from the Data Lake Analytics catalog.

        :param database_name: The name of the database. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_acls_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AclList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_acls_by_database_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AclList]:
        """catalog_list_acls_by_database

        Retrieves the list of access control list (ACL) entries for the database from the Data Lake Analytics catalog.

        :param database_name: The name of the database. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_acls_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AclList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_acls_by_database_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_acls_by_database

        Retrieves the list of access control list (ACL) entries for the database from the Data Lake Analytics catalog.

        :param database_name: The name of the database. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_acls_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AclList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_acls_by_database_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/acl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_assemblies(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the assembly.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlAssemblyList:
        """catalog_list_assemblies

        Retrieves the list of assemblies from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the assembly. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_assemblies_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlAssemblyList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_assemblies_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the assembly.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlAssemblyList]:
        """catalog_list_assemblies

        Retrieves the list of assemblies from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the assembly. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_assemblies_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlAssemblyList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_assemblies_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the assembly.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_assemblies

        Retrieves the list of assemblies from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the assembly. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_assemblies_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlAssemblyList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_assemblies_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/assemblies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_credentials(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlCredentialList:
        """catalog_list_credentials

        Retrieves the list of credentials from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_credentials_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlCredentialList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_credentials_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlCredentialList]:
        """catalog_list_credentials

        Retrieves the list of credentials from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_credentials_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlCredentialList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_credentials_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_credentials

        Retrieves the list of credentials from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_credentials_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlCredentialList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_credentials_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/credentials',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_databases(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlDatabaseList:
        """catalog_list_databases

        Retrieves the list of databases from the Data Lake Analytics catalog.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_databases_serialize(
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlDatabaseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_databases_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlDatabaseList]:
        """catalog_list_databases

        Retrieves the list of databases from the Data Lake Analytics catalog.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_databases_serialize(
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlDatabaseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_databases_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_databases

        Retrieves the list of databases from the Data Lake Analytics catalog.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_databases_serialize(
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlDatabaseList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_databases_serialize(
        self,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_external_data_sources(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the external data sources.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlExternalDataSourceList:
        """catalog_list_external_data_sources

        Retrieves the list of external data sources from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the external data sources. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_external_data_sources_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlExternalDataSourceList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_external_data_sources_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the external data sources.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlExternalDataSourceList]:
        """catalog_list_external_data_sources

        Retrieves the list of external data sources from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the external data sources. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_external_data_sources_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlExternalDataSourceList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_external_data_sources_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the external data sources.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_external_data_sources

        Retrieves the list of external data sources from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the external data sources. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_external_data_sources_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlExternalDataSourceList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_external_data_sources_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/externaldatasources',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_packages(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the packages.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the packages.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlPackageList:
        """catalog_list_packages

        Retrieves the list of packages from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the packages. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the packages. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_packages_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlPackageList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_packages_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the packages.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the packages.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlPackageList]:
        """catalog_list_packages

        Retrieves the list of packages from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the packages. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the packages. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_packages_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlPackageList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_packages_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the packages.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the packages.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_packages

        Retrieves the list of packages from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the packages. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the packages. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_packages_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlPackageList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_packages_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_procedures(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the procedures.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the procedures.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlProcedureList:
        """catalog_list_procedures

        Retrieves the list of procedures from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the procedures. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the procedures. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_procedures_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlProcedureList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_procedures_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the procedures.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the procedures.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlProcedureList]:
        """catalog_list_procedures

        Retrieves the list of procedures from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the procedures. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the procedures. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_procedures_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlProcedureList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_procedures_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the procedures.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the procedures.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_procedures

        Retrieves the list of procedures from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the procedures. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the procedures. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_procedures_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlProcedureList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_procedures_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_schemas(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlSchemaList:
        """catalog_list_schemas

        Retrieves the list of schemas from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_schemas_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSchemaList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_schemas_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlSchemaList]:
        """catalog_list_schemas

        Retrieves the list of schemas from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_schemas_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSchemaList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_schemas_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the schema.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_schemas

        Retrieves the list of schemas from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the schema. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_schemas_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlSchemaList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_schemas_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_table_fragments(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table fragments.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table fragments.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the table fragments.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableFragmentList:
        """catalog_list_table_fragments

        Retrieves the list of table fragments from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table fragments. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table fragments. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the table fragments. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_fragments_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableFragmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_table_fragments_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table fragments.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table fragments.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the table fragments.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableFragmentList]:
        """catalog_list_table_fragments

        Retrieves the list of table fragments from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table fragments. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table fragments. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the table fragments. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_fragments_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableFragmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_table_fragments_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table fragments.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table fragments.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the table fragments.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_table_fragments

        Retrieves the list of table fragments from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table fragments. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table fragments. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the table fragments. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_fragments_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableFragmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_table_fragments_serialize(
        self,
        database_name,
        schema_name,
        table_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/tablefragments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_table_partitions(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partitions.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partitions.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partitions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTablePartitionList:
        """catalog_list_table_partitions

        Retrieves the list of table partitions from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the partitions. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partitions. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partitions. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_partitions_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePartitionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_table_partitions_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partitions.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partitions.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partitions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTablePartitionList]:
        """catalog_list_table_partitions

        Retrieves the list of table partitions from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the partitions. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partitions. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partitions. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_partitions_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePartitionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_table_partitions_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partitions.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partitions.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partitions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_table_partitions

        Retrieves the list of table partitions from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the partitions. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partitions. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partitions. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_partitions_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePartitionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_table_partitions_serialize(
        self,
        database_name,
        schema_name,
        table_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_table_statistics(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableStatisticsList:
        """catalog_list_table_statistics

        Retrieves the list of table statistics from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the statistics. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_table_statistics_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableStatisticsList]:
        """catalog_list_table_statistics

        Retrieves the list of table statistics from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the statistics. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_table_statistics_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_table_statistics

        Retrieves the list of table statistics from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the statistics. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_table_statistics_serialize(
        self,
        database_name,
        schema_name,
        table_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_table_statistics_by_database(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableStatisticsList:
        """catalog_list_table_statistics_by_database

        Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table statistics. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_table_statistics_by_database_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableStatisticsList]:
        """catalog_list_table_statistics_by_database

        Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table statistics. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_table_statistics_by_database_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_table_statistics_by_database

        Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table statistics. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_table_statistics_by_database_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/statistics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_table_statistics_by_database_and_schema(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableStatisticsList:
        """catalog_list_table_statistics_by_database_and_schema

        Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_by_database_and_schema_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_table_statistics_by_database_and_schema_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableStatisticsList]:
        """catalog_list_table_statistics_by_database_and_schema

        Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_by_database_and_schema_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_table_statistics_by_database_and_schema_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the statistics.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the statistics.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_table_statistics_by_database_and_schema

        Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the statistics. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the statistics. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_statistics_by_database_and_schema_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableStatisticsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_table_statistics_by_database_and_schema_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/statistics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_table_types(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table types.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table types.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableTypeList:
        """catalog_list_table_types

        Retrieves the list of table types from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table types. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table types. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_types_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableTypeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_table_types_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table types.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table types.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableTypeList]:
        """catalog_list_table_types

        Retrieves the list of table types from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table types. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table types. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_types_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableTypeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_table_types_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table types.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table types.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_table_types

        Retrieves the list of table types from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table types. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table types. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_types_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableTypeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_table_types_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_table_valued_functions(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued functions.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table valued functions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableValuedFunctionList:
        """catalog_list_table_valued_functions

        Retrieves the list of table valued functions from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued functions. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table valued functions. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_valued_functions_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunctionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_table_valued_functions_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued functions.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table valued functions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableValuedFunctionList]:
        """catalog_list_table_valued_functions

        Retrieves the list of table valued functions from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued functions. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table valued functions. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_valued_functions_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunctionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_table_valued_functions_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued functions.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table valued functions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_table_valued_functions

        Retrieves the list of table valued functions from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued functions. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table valued functions. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_valued_functions_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunctionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_table_valued_functions_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_table_valued_functions_by_database(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued functions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableValuedFunctionList:
        """catalog_list_table_valued_functions_by_database

        Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued functions. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_valued_functions_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunctionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_table_valued_functions_by_database_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued functions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableValuedFunctionList]:
        """catalog_list_table_valued_functions_by_database

        Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued functions. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_valued_functions_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunctionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_table_valued_functions_by_database_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table valued functions.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_table_valued_functions_by_database

        Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the table valued functions. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_table_valued_functions_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableValuedFunctionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_table_valued_functions_by_database_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/tablevaluedfunctions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_tables(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the tables.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the tables.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        basic: Annotated[Optional[StrictBool], Field(description="The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableList:
        """catalog_list_tables

        Retrieves the list of tables from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the tables. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the tables. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param basic: The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional.
        :type basic: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_tables_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            basic=basic,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_tables_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the tables.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the tables.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        basic: Annotated[Optional[StrictBool], Field(description="The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableList]:
        """catalog_list_tables

        Retrieves the list of tables from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the tables. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the tables. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param basic: The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional.
        :type basic: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_tables_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            basic=basic,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_tables_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the tables.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the tables.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        basic: Annotated[Optional[StrictBool], Field(description="The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_tables

        Retrieves the list of tables from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the tables. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the tables. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param basic: The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional.
        :type basic: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_tables_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            basic=basic,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_tables_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        basic,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if basic is not None:
            
            _query_params.append(('basic', basic))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_tables_by_database(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the tables.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        basic: Annotated[Optional[StrictBool], Field(description="The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTableList:
        """catalog_list_tables_by_database

        Retrieves the list of all tables in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the tables. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param basic: The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false
        :type basic: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_tables_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            basic=basic,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_tables_by_database_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the tables.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        basic: Annotated[Optional[StrictBool], Field(description="The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTableList]:
        """catalog_list_tables_by_database

        Retrieves the list of all tables in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the tables. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param basic: The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false
        :type basic: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_tables_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            basic=basic,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_tables_by_database_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the tables.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        basic: Annotated[Optional[StrictBool], Field(description="The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_tables_by_database

        Retrieves the list of all tables in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the tables. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param basic: The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false
        :type basic: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_tables_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            basic=basic,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTableList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_tables_by_database_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        basic,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if basic is not None:
            
            _query_params.append(('basic', basic))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/tables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_types(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the types.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the types.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTypeList:
        """catalog_list_types

        Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the types. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the types. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_types_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTypeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_types_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the types.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the types.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTypeList]:
        """catalog_list_types

        Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the types. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the types. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_types_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTypeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_types_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the types.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the types.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_types

        Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the types. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the types. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_types_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTypeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_types_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_views(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the views.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the views.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlViewList:
        """catalog_list_views

        Retrieves the list of views from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the views. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the views. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_views_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlViewList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_views_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the views.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the views.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlViewList]:
        """catalog_list_views

        Retrieves the list of views from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the views. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the views. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_views_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlViewList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_views_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the views.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the views.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_views

        Retrieves the list of views from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the views. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the views. (required)
        :type schema_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_views_serialize(
            database_name=database_name,
            schema_name=schema_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlViewList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_views_serialize(
        self,
        database_name,
        schema_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_list_views_by_database(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the views.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlViewList:
        """catalog_list_views_by_database

        Retrieves the list of all views in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the views. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_views_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlViewList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_list_views_by_database_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the views.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlViewList]:
        """catalog_list_views_by_database

        Retrieves the list of all views in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the views. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_views_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlViewList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_list_views_by_database_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the views.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="OData filter. Optional.")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return. Optional.")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to skip over before returning elements. Optional.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.")] = None,
        count: Annotated[Optional[StrictBool], Field(description="The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_list_views_by_database

        Retrieves the list of all views in a database from the Data Lake Analytics catalog.

        :param database_name: The name of the database containing the views. (required)
        :type database_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param filter: OData filter. Optional.
        :type filter: str
        :param top: The number of items to return. Optional.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
        :type count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_list_views_by_database_serialize(
            database_name=database_name,
            api_version=api_version,
            filter=filter,
            top=top,
            skip=skip,
            select=select,
            orderby=orderby,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlViewList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_list_views_by_database_serialize(
        self,
        database_name,
        api_version,
        filter,
        top,
        skip,
        select,
        orderby,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if count is not None:
            
            _query_params.append(('$count', count))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/views',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_preview_table(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        max_rows: Annotated[Optional[StrictInt], Field(description="The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table.")] = None,
        max_columns: Annotated[Optional[StrictInt], Field(description="The maximum number of columns to be retrieved.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTablePreview:
        """catalog_preview_table

        Retrieves a preview set of rows in given table.

        :param database_name: The name of the database containing the table. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table. (required)
        :type schema_name: str
        :param table_name: The name of the table. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param max_rows: The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table.
        :type max_rows: int
        :param max_columns: The maximum number of columns to be retrieved.
        :type max_columns: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_preview_table_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            max_rows=max_rows,
            max_columns=max_columns,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePreview",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_preview_table_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        max_rows: Annotated[Optional[StrictInt], Field(description="The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table.")] = None,
        max_columns: Annotated[Optional[StrictInt], Field(description="The maximum number of columns to be retrieved.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTablePreview]:
        """catalog_preview_table

        Retrieves a preview set of rows in given table.

        :param database_name: The name of the database containing the table. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table. (required)
        :type schema_name: str
        :param table_name: The name of the table. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param max_rows: The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table.
        :type max_rows: int
        :param max_columns: The maximum number of columns to be retrieved.
        :type max_columns: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_preview_table_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            max_rows=max_rows,
            max_columns=max_columns,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePreview",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_preview_table_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the table.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the table.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        max_rows: Annotated[Optional[StrictInt], Field(description="The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table.")] = None,
        max_columns: Annotated[Optional[StrictInt], Field(description="The maximum number of columns to be retrieved.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_preview_table

        Retrieves a preview set of rows in given table.

        :param database_name: The name of the database containing the table. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the table. (required)
        :type schema_name: str
        :param table_name: The name of the table. (required)
        :type table_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param max_rows: The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table.
        :type max_rows: int
        :param max_columns: The maximum number of columns to be retrieved.
        :type max_columns: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_preview_table_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            api_version=api_version,
            max_rows=max_rows,
            max_columns=max_columns,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePreview",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_preview_table_serialize(
        self,
        database_name,
        schema_name,
        table_name,
        api_version,
        max_rows,
        max_columns,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if max_rows is not None:
            
            _query_params.append(('maxRows', max_rows))
            
        if max_columns is not None:
            
            _query_params.append(('maxColumns', max_columns))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/previewrows',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_preview_table_partition(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partition.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partition.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partition.")],
        partition_name: Annotated[StrictStr, Field(description="The name of the table partition.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        max_rows: Annotated[Optional[StrictInt], Field(description="The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition.")] = None,
        max_columns: Annotated[Optional[StrictInt], Field(description="The maximum number of columns to be retrieved.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> USqlTablePreview:
        """catalog_preview_table_partition

        Retrieves a preview set of rows in given partition.

        :param database_name: The name of the database containing the partition. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partition. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partition. (required)
        :type table_name: str
        :param partition_name: The name of the table partition. (required)
        :type partition_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param max_rows: The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition.
        :type max_rows: int
        :param max_columns: The maximum number of columns to be retrieved.
        :type max_columns: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_preview_table_partition_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            partition_name=partition_name,
            api_version=api_version,
            max_rows=max_rows,
            max_columns=max_columns,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePreview",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_preview_table_partition_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partition.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partition.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partition.")],
        partition_name: Annotated[StrictStr, Field(description="The name of the table partition.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        max_rows: Annotated[Optional[StrictInt], Field(description="The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition.")] = None,
        max_columns: Annotated[Optional[StrictInt], Field(description="The maximum number of columns to be retrieved.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[USqlTablePreview]:
        """catalog_preview_table_partition

        Retrieves a preview set of rows in given partition.

        :param database_name: The name of the database containing the partition. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partition. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partition. (required)
        :type table_name: str
        :param partition_name: The name of the table partition. (required)
        :type partition_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param max_rows: The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition.
        :type max_rows: int
        :param max_columns: The maximum number of columns to be retrieved.
        :type max_columns: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_preview_table_partition_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            partition_name=partition_name,
            api_version=api_version,
            max_rows=max_rows,
            max_columns=max_columns,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePreview",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_preview_table_partition_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the partition.")],
        schema_name: Annotated[StrictStr, Field(description="The name of the schema containing the partition.")],
        table_name: Annotated[StrictStr, Field(description="The name of the table containing the partition.")],
        partition_name: Annotated[StrictStr, Field(description="The name of the table partition.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        max_rows: Annotated[Optional[StrictInt], Field(description="The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition.")] = None,
        max_columns: Annotated[Optional[StrictInt], Field(description="The maximum number of columns to be retrieved.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_preview_table_partition

        Retrieves a preview set of rows in given partition.

        :param database_name: The name of the database containing the partition. (required)
        :type database_name: str
        :param schema_name: The name of the schema containing the partition. (required)
        :type schema_name: str
        :param table_name: The name of the table containing the partition. (required)
        :type table_name: str
        :param partition_name: The name of the table partition. (required)
        :type partition_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param max_rows: The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition.
        :type max_rows: int
        :param max_columns: The maximum number of columns to be retrieved.
        :type max_columns: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_preview_table_partition_serialize(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            partition_name=partition_name,
            api_version=api_version,
            max_rows=max_rows,
            max_columns=max_columns,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "USqlTablePreview",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_preview_table_partition_serialize(
        self,
        database_name,
        schema_name,
        table_name,
        partition_name,
        api_version,
        max_rows,
        max_columns,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if schema_name is not None:
            _path_params['schemaName'] = schema_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        if partition_name is not None:
            _path_params['partitionName'] = partition_name
        # process the query parameters
        if max_rows is not None:
            
            _query_params.append(('maxRows', max_rows))
            
        if max_columns is not None:
            
            _query_params.append(('maxColumns', max_columns))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}/previewrows',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_update_credential(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the credential.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogCredentialUpdateParameters, Field(description="The parameters required to modify the credential (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """catalog_update_credential

        Modifies the specified credential for use with external data sources in the specified database

        :param database_name: The name of the database containing the credential. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to modify the credential (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogCredentialUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_update_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_update_credential_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the credential.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogCredentialUpdateParameters, Field(description="The parameters required to modify the credential (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """catalog_update_credential

        Modifies the specified credential for use with external data sources in the specified database

        :param database_name: The name of the database containing the credential. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to modify the credential (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogCredentialUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_update_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_update_credential_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the credential.")],
        credential_name: Annotated[StrictStr, Field(description="The name of the credential.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogCredentialUpdateParameters, Field(description="The parameters required to modify the credential (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """catalog_update_credential

        Modifies the specified credential for use with external data sources in the specified database

        :param database_name: The name of the database containing the credential. (required)
        :type database_name: str
        :param credential_name: The name of the credential. (required)
        :type credential_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to modify the credential (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogCredentialUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._catalog_update_credential_serialize(
            database_name=database_name,
            credential_name=credential_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_update_credential_serialize(
        self,
        database_name,
        credential_name,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if credential_name is not None:
            _path_params['credentialName'] = credential_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/catalog/usql/databases/{databaseName}/credentials/{credentialName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def catalog_update_secret(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters, Field(description="The parameters required to modify the secret (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) catalog_update_secret

        Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret. (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to modify the secret (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_update_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def catalog_update_secret_with_http_info(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters, Field(description="The parameters required to modify the secret (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) catalog_update_secret

        Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret. (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to modify the secret (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_update_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def catalog_update_secret_without_preload_content(
        self,
        database_name: Annotated[StrictStr, Field(description="The name of the database containing the secret.")],
        secret_name: Annotated[StrictStr, Field(description="The name of the secret.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        parameters: Annotated[DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters, Field(description="The parameters required to modify the secret (name and password)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) catalog_update_secret

        Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.

        :param database_name: The name of the database containing the secret. (required)
        :type database_name: str
        :param secret_name: The name of the secret. (required)
        :type secret_name: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param parameters: The parameters required to modify the secret (name and password) (required)
        :type parameters: DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /catalog/usql/databases/{databaseName}/secrets/{secretName} is deprecated.", DeprecationWarning)

        _param = self._catalog_update_secret_serialize(
            database_name=database_name,
            secret_name=secret_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _catalog_update_secret_serialize(
        self,
        database_name,
        secret_name,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if secret_name is not None:
            _path_params['secretName'] = secret_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/catalog/usql/databases/{databaseName}/secrets/{secretName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



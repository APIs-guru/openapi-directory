# coding: utf-8

"""
    DataLakeAnalyticsCatalogManagementClient

    Creates an Azure Data Lake Analytics catalog client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class USqlTableStatistics(BaseModel):
    """
    A Data Lake Analytics catalog U-SQL table statistics item.
    """ # noqa: E501
    col_names: Optional[List[StrictStr]] = Field(default=None, description="the list of column names associated with these statistics.", alias="colNames")
    create_time: Optional[datetime] = Field(default=None, description="the creation time of the statistics.", alias="createTime")
    database_name: Optional[StrictStr] = Field(default=None, description="the name of the database.", alias="databaseName")
    filter_definition: Optional[StrictStr] = Field(default=None, description="the filter definition for the statistics.", alias="filterDefinition")
    has_filter: Optional[StrictBool] = Field(default=None, description="the switch indicating if these statistics have a filter.", alias="hasFilter")
    is_auto_created: Optional[StrictBool] = Field(default=None, description="the switch indicating if these statistics are automatically created.", alias="isAutoCreated")
    is_user_created: Optional[StrictBool] = Field(default=None, description="the switch indicating if these statistics are user created.", alias="isUserCreated")
    schema_name: Optional[StrictStr] = Field(default=None, description="the name of the schema associated with this table and database.", alias="schemaName")
    stat_data_path: Optional[StrictStr] = Field(default=None, description="the path to the statistics data.", alias="statDataPath")
    statistics_name: Optional[StrictStr] = Field(default=None, description="the name of the table statistics.", alias="statisticsName")
    table_name: Optional[StrictStr] = Field(default=None, description="the name of the table.", alias="tableName")
    update_time: Optional[datetime] = Field(default=None, description="the last time the statistics were updated.", alias="updateTime")
    user_stat_name: Optional[StrictStr] = Field(default=None, description="the name of the user statistics.", alias="userStatName")
    compute_account_name: Optional[StrictStr] = Field(default=None, description="the name of the Data Lake Analytics account.", alias="computeAccountName")
    version: Optional[StrictStr] = Field(default=None, description="the version of the catalog item.")
    __properties: ClassVar[List[str]] = ["computeAccountName", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of USqlTableStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of USqlTableStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeAccountName": obj.get("computeAccountName"),
            "version": obj.get("version")
        })
        return _obj



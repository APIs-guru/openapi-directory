# coding: utf-8

"""
    DataLakeAnalyticsCatalogManagementClient

    Creates an Azure Data Lake Analytics catalog client.

    The version of the OpenAPI document: 2015-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.u_sql_directed_column import USqlDirectedColumn
from typing import Optional, Set
from typing_extensions import Self

class USqlDistributionInfo(BaseModel):
    """
    A Data Lake Analytics catalog U-SQL distribution information object.
    """ # noqa: E501
    count: Optional[StrictInt] = Field(default=None, description="the count of indices using this distribution.")
    dynamic_count: Optional[StrictInt] = Field(default=None, description="the dynamic count of indices using this distribution.", alias="dynamicCount")
    keys: Optional[List[USqlDirectedColumn]] = Field(default=None, description="the list of directed columns in the distribution")
    type: Optional[StrictInt] = Field(default=None, description="the type of this distribution.")
    __properties: ClassVar[List[str]] = ["count", "dynamicCount", "keys", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of USqlDistributionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in keys (list)
        _items = []
        if self.keys:
            for _item_keys in self.keys:
                if _item_keys:
                    _items.append(_item_keys.to_dict())
            _dict['keys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of USqlDistributionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "dynamicCount": obj.get("dynamicCount"),
            "keys": [USqlDirectedColumn.from_dict(_item) for _item in obj["keys"]] if obj.get("keys") is not None else None,
            "type": obj.get("type")
        })
        return _obj



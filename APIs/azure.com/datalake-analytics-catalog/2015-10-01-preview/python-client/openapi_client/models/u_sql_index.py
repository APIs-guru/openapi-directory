# coding: utf-8

"""
    DataLakeAnalyticsCatalogManagementClient

    Creates an Azure Data Lake Analytics catalog client.

    The version of the OpenAPI document: 2015-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.u_sql_directed_column import USqlDirectedColumn
from openapi_client.models.u_sql_distribution_info import USqlDistributionInfo
from typing import Optional, Set
from typing_extensions import Self

class USqlIndex(BaseModel):
    """
    A Data Lake Analytics catalog U-SQL table index item.
    """ # noqa: E501
    columns: Optional[List[StrictStr]] = Field(default=None, description="the list of columns in the index")
    distribution_info: Optional[USqlDistributionInfo] = Field(default=None, alias="distributionInfo")
    index_id: Optional[StrictInt] = Field(default=None, description="the ID of this index within the table.", alias="indexId")
    index_keys: Optional[List[USqlDirectedColumn]] = Field(default=None, description="the list of directed columns in the index", alias="indexKeys")
    is_columnstore: Optional[StrictBool] = Field(default=None, description="the switch indicating if this index is a columnstore index.", alias="isColumnstore")
    is_unique: Optional[StrictBool] = Field(default=None, description="the switch indicating if this index is a unique index.", alias="isUnique")
    name: Optional[StrictStr] = Field(default=None, description="the name of the index in the table.")
    partition_function: Optional[StrictStr] = Field(default=None, description="partition function ID for the index.", alias="partitionFunction")
    partition_key_list: Optional[List[StrictStr]] = Field(default=None, description="the list of partition keys in the index", alias="partitionKeyList")
    stream_names: Optional[List[StrictStr]] = Field(default=None, description="the list of full paths to the streams that contain this index in the DataLake account.", alias="streamNames")
    __properties: ClassVar[List[str]] = ["columns", "distributionInfo", "indexId", "indexKeys", "isColumnstore", "isUnique", "name", "partitionFunction", "partitionKeyList", "streamNames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of USqlIndex from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of distribution_info
        if self.distribution_info:
            _dict['distributionInfo'] = self.distribution_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in index_keys (list)
        _items = []
        if self.index_keys:
            for _item_index_keys in self.index_keys:
                if _item_index_keys:
                    _items.append(_item_index_keys.to_dict())
            _dict['indexKeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of USqlIndex from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columns": obj.get("columns"),
            "distributionInfo": USqlDistributionInfo.from_dict(obj["distributionInfo"]) if obj.get("distributionInfo") is not None else None,
            "indexId": obj.get("indexId"),
            "indexKeys": [USqlDirectedColumn.from_dict(_item) for _item in obj["indexKeys"]] if obj.get("indexKeys") is not None else None,
            "isColumnstore": obj.get("isColumnstore"),
            "isUnique": obj.get("isUnique"),
            "name": obj.get("name"),
            "partitionFunction": obj.get("partitionFunction"),
            "partitionKeyList": obj.get("partitionKeyList"),
            "streamNames": obj.get("streamNames")
        })
        return _obj



# coding: utf-8

"""
    ContainerInstanceManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.container import Container

class TestContainer(unittest.TestCase):
    """Container unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Container:
        """Test Container
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Container`
        """
        model = Container()
        if include_optional:
            return Container(
                name = '',
                properties = openapi_client.models.container_properties.ContainerProperties(
                    command = [
                        ''
                        ], 
                    environment_variables = [
                        openapi_client.models.environment_variable.EnvironmentVariable(
                            name = '', 
                            secure_value = '', 
                            value = '', )
                        ], 
                    image = '', 
                    instance_view = openapi_client.models.container_properties_instance_view.ContainerProperties_instanceView(
                        current_state = openapi_client.models.container_state.ContainerState(
                            detail_status = '', 
                            exit_code = 56, 
                            finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = '', ), 
                        events = [
                            openapi_client.models.event.Event(
                                count = 56, 
                                first_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                last_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                name = '', 
                                type = '', )
                            ], 
                        previous_state = openapi_client.models.container_state.ContainerState(
                            detail_status = '', 
                            exit_code = 56, 
                            finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = '', ), 
                        restart_count = 56, ), 
                    liveness_probe = openapi_client.models.container_probe.ContainerProbe(
                        exec = openapi_client.models.container_exec.ContainerExec(), 
                        failure_threshold = 56, 
                        http_get = openapi_client.models.container_http_get.ContainerHttpGet(
                            path = '', 
                            port = 56, 
                            scheme = 'http', ), 
                        initial_delay_seconds = 56, 
                        period_seconds = 56, 
                        success_threshold = 56, 
                        timeout_seconds = 56, ), 
                    ports = [
                        openapi_client.models.container_port.ContainerPort(
                            port = 56, 
                            protocol = 'TCP', )
                        ], 
                    readiness_probe = openapi_client.models.container_probe.ContainerProbe(
                        failure_threshold = 56, 
                        initial_delay_seconds = 56, 
                        period_seconds = 56, 
                        success_threshold = 56, 
                        timeout_seconds = 56, ), 
                    resources = openapi_client.models.resource_requirements.ResourceRequirements(
                        limits = openapi_client.models.resource_limits.ResourceLimits(
                            cpu = 1.337, 
                            gpu = openapi_client.models.gpu_resource.GpuResource(
                                count = 56, 
                                sku = 'K80', ), 
                            memory_in_gb = 1.337, ), 
                        requests = openapi_client.models.resource_requests.ResourceRequests(
                            cpu = 1.337, 
                            memory_in_gb = 1.337, ), ), 
                    volume_mounts = [
                        openapi_client.models.volume_mount.VolumeMount(
                            mount_path = '', 
                            name = '', 
                            read_only = True, )
                        ], )
            )
        else:
            return Container(
                name = '',
                properties = openapi_client.models.container_properties.ContainerProperties(
                    command = [
                        ''
                        ], 
                    environment_variables = [
                        openapi_client.models.environment_variable.EnvironmentVariable(
                            name = '', 
                            secure_value = '', 
                            value = '', )
                        ], 
                    image = '', 
                    instance_view = openapi_client.models.container_properties_instance_view.ContainerProperties_instanceView(
                        current_state = openapi_client.models.container_state.ContainerState(
                            detail_status = '', 
                            exit_code = 56, 
                            finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = '', ), 
                        events = [
                            openapi_client.models.event.Event(
                                count = 56, 
                                first_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                last_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                name = '', 
                                type = '', )
                            ], 
                        previous_state = openapi_client.models.container_state.ContainerState(
                            detail_status = '', 
                            exit_code = 56, 
                            finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = '', ), 
                        restart_count = 56, ), 
                    liveness_probe = openapi_client.models.container_probe.ContainerProbe(
                        exec = openapi_client.models.container_exec.ContainerExec(), 
                        failure_threshold = 56, 
                        http_get = openapi_client.models.container_http_get.ContainerHttpGet(
                            path = '', 
                            port = 56, 
                            scheme = 'http', ), 
                        initial_delay_seconds = 56, 
                        period_seconds = 56, 
                        success_threshold = 56, 
                        timeout_seconds = 56, ), 
                    ports = [
                        openapi_client.models.container_port.ContainerPort(
                            port = 56, 
                            protocol = 'TCP', )
                        ], 
                    readiness_probe = openapi_client.models.container_probe.ContainerProbe(
                        failure_threshold = 56, 
                        initial_delay_seconds = 56, 
                        period_seconds = 56, 
                        success_threshold = 56, 
                        timeout_seconds = 56, ), 
                    resources = openapi_client.models.resource_requirements.ResourceRequirements(
                        limits = openapi_client.models.resource_limits.ResourceLimits(
                            cpu = 1.337, 
                            gpu = openapi_client.models.gpu_resource.GpuResource(
                                count = 56, 
                                sku = 'K80', ), 
                            memory_in_gb = 1.337, ), 
                        requests = openapi_client.models.resource_requests.ResourceRequests(
                            cpu = 1.337, 
                            memory_in_gb = 1.337, ), ), 
                    volume_mounts = [
                        openapi_client.models.volume_mount.VolumeMount(
                            mount_path = '', 
                            name = '', 
                            read_only = True, )
                        ], ),
        )
        """

    def testContainer(self):
        """Test Container"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

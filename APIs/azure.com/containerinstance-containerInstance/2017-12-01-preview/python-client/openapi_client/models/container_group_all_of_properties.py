# coding: utf-8

"""
    ContainerInstanceManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container import Container
from openapi_client.models.container_group_all_of_properties_instance_view import ContainerGroupAllOfPropertiesInstanceView
from openapi_client.models.image_registry_credential import ImageRegistryCredential
from openapi_client.models.ip_address import IpAddress
from openapi_client.models.volume import Volume
from typing import Optional, Set
from typing_extensions import Self

class ContainerGroupAllOfProperties(BaseModel):
    """
    ContainerGroupAllOfProperties
    """ # noqa: E501
    containers: List[Container] = Field(description="The containers within the container group.")
    image_registry_credentials: Optional[List[ImageRegistryCredential]] = Field(default=None, description="The image registry credentials by which the container group is created from.", alias="imageRegistryCredentials")
    instance_view: Optional[ContainerGroupAllOfPropertiesInstanceView] = Field(default=None, alias="instanceView")
    ip_address: Optional[IpAddress] = Field(default=None, alias="ipAddress")
    os_type: StrictStr = Field(description="The operating system type required by the containers in the container group.", alias="osType")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the container group. This only appears in the response.", alias="provisioningState")
    restart_policy: Optional[StrictStr] = Field(default=None, description="Restart policy for all containers within the container group.  - `Always` Always restart - `OnFailure` Restart on failure - `Never` Never restart ", alias="restartPolicy")
    volumes: Optional[List[Volume]] = Field(default=None, description="The list of volumes that can be mounted by containers in this container group.")
    __properties: ClassVar[List[str]] = ["containers", "imageRegistryCredentials", "instanceView", "ipAddress", "osType", "provisioningState", "restartPolicy", "volumes"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    @field_validator('restart_policy')
    def restart_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Always', 'OnFailure', 'Never']):
            raise ValueError("must be one of enum values ('Always', 'OnFailure', 'Never')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerGroupAllOfProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in containers (list)
        _items = []
        if self.containers:
            for _item_containers in self.containers:
                if _item_containers:
                    _items.append(_item_containers.to_dict())
            _dict['containers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in image_registry_credentials (list)
        _items = []
        if self.image_registry_credentials:
            for _item_image_registry_credentials in self.image_registry_credentials:
                if _item_image_registry_credentials:
                    _items.append(_item_image_registry_credentials.to_dict())
            _dict['imageRegistryCredentials'] = _items
        # override the default output from pydantic by calling `to_dict()` of instance_view
        if self.instance_view:
            _dict['instanceView'] = self.instance_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip_address
        if self.ip_address:
            _dict['ipAddress'] = self.ip_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerGroupAllOfProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containers": [Container.from_dict(_item) for _item in obj["containers"]] if obj.get("containers") is not None else None,
            "imageRegistryCredentials": [ImageRegistryCredential.from_dict(_item) for _item in obj["imageRegistryCredentials"]] if obj.get("imageRegistryCredentials") is not None else None,
            "instanceView": ContainerGroupAllOfPropertiesInstanceView.from_dict(obj["instanceView"]) if obj.get("instanceView") is not None else None,
            "ipAddress": IpAddress.from_dict(obj["ipAddress"]) if obj.get("ipAddress") is not None else None,
            "osType": obj.get("osType"),
            "provisioningState": obj.get("provisioningState"),
            "restartPolicy": obj.get("restartPolicy"),
            "volumes": [Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None
        })
        return _obj



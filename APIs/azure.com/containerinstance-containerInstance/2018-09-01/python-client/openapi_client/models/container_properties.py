# coding: utf-8

"""
    ContainerInstanceManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_port import ContainerPort
from openapi_client.models.container_probe import ContainerProbe
from openapi_client.models.container_properties_instance_view import ContainerPropertiesInstanceView
from openapi_client.models.environment_variable import EnvironmentVariable
from openapi_client.models.resource_requirements import ResourceRequirements
from openapi_client.models.volume_mount import VolumeMount
from typing import Optional, Set
from typing_extensions import Self

class ContainerProperties(BaseModel):
    """
    The container instance properties.
    """ # noqa: E501
    command: Optional[List[StrictStr]] = Field(default=None, description="The commands to execute within the container instance in exec form.")
    environment_variables: Optional[List[EnvironmentVariable]] = Field(default=None, description="The environment variables to set in the container instance.", alias="environmentVariables")
    image: StrictStr = Field(description="The name of the image used to create the container instance.")
    instance_view: Optional[ContainerPropertiesInstanceView] = Field(default=None, alias="instanceView")
    liveness_probe: Optional[ContainerProbe] = Field(default=None, alias="livenessProbe")
    ports: Optional[List[ContainerPort]] = Field(default=None, description="The exposed ports on the container instance.")
    readiness_probe: Optional[ContainerProbe] = Field(default=None, alias="readinessProbe")
    resources: ResourceRequirements
    volume_mounts: Optional[List[VolumeMount]] = Field(default=None, description="The volume mounts available to the container instance.", alias="volumeMounts")
    __properties: ClassVar[List[str]] = ["command", "environmentVariables", "image", "instanceView", "livenessProbe", "ports", "readinessProbe", "resources", "volumeMounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in environment_variables (list)
        _items = []
        if self.environment_variables:
            for _item_environment_variables in self.environment_variables:
                if _item_environment_variables:
                    _items.append(_item_environment_variables.to_dict())
            _dict['environmentVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of instance_view
        if self.instance_view:
            _dict['instanceView'] = self.instance_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liveness_probe
        if self.liveness_probe:
            _dict['livenessProbe'] = self.liveness_probe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item_ports in self.ports:
                if _item_ports:
                    _items.append(_item_ports.to_dict())
            _dict['ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of readiness_probe
        if self.readiness_probe:
            _dict['readinessProbe'] = self.readiness_probe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volume_mounts (list)
        _items = []
        if self.volume_mounts:
            for _item_volume_mounts in self.volume_mounts:
                if _item_volume_mounts:
                    _items.append(_item_volume_mounts.to_dict())
            _dict['volumeMounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "command": obj.get("command"),
            "environmentVariables": [EnvironmentVariable.from_dict(_item) for _item in obj["environmentVariables"]] if obj.get("environmentVariables") is not None else None,
            "image": obj.get("image"),
            "instanceView": ContainerPropertiesInstanceView.from_dict(obj["instanceView"]) if obj.get("instanceView") is not None else None,
            "livenessProbe": ContainerProbe.from_dict(obj["livenessProbe"]) if obj.get("livenessProbe") is not None else None,
            "ports": [ContainerPort.from_dict(_item) for _item in obj["ports"]] if obj.get("ports") is not None else None,
            "readinessProbe": ContainerProbe.from_dict(obj["readinessProbe"]) if obj.get("readinessProbe") is not None else None,
            "resources": ResourceRequirements.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "volumeMounts": [VolumeMount.from_dict(_item) for _item in obj["volumeMounts"]] if obj.get("volumeMounts") is not None else None
        })
        return _obj



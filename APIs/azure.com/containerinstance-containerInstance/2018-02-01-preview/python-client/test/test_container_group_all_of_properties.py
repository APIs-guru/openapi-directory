# coding: utf-8

"""
    ContainerInstanceManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.container_group_all_of_properties import ContainerGroupAllOfProperties

class TestContainerGroupAllOfProperties(unittest.TestCase):
    """ContainerGroupAllOfProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ContainerGroupAllOfProperties:
        """Test ContainerGroupAllOfProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ContainerGroupAllOfProperties`
        """
        model = ContainerGroupAllOfProperties()
        if include_optional:
            return ContainerGroupAllOfProperties(
                containers = [
                    openapi_client.models.container.Container(
                        name = '', 
                        properties = openapi_client.models.container_properties.ContainerProperties(
                            command = [
                                ''
                                ], 
                            environment_variables = [
                                openapi_client.models.environment_variable.EnvironmentVariable(
                                    name = '', 
                                    value = '', )
                                ], 
                            image = '', 
                            instance_view = openapi_client.models.container_properties_instance_view.ContainerProperties_instanceView(
                                current_state = openapi_client.models.container_state.ContainerState(
                                    detail_status = '', 
                                    exit_code = 56, 
                                    finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    state = '', ), 
                                events = [
                                    openapi_client.models.event.Event(
                                        count = 56, 
                                        first_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        last_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        message = '', 
                                        name = '', 
                                        type = '', )
                                    ], 
                                previous_state = openapi_client.models.container_state.ContainerState(
                                    detail_status = '', 
                                    exit_code = 56, 
                                    finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    state = '', ), 
                                restart_count = 56, ), 
                            ports = [
                                openapi_client.models.container_port.ContainerPort(
                                    port = 56, 
                                    protocol = 'TCP', )
                                ], 
                            resources = openapi_client.models.resource_requirements.ResourceRequirements(
                                limits = openapi_client.models.resource_limits.ResourceLimits(
                                    cpu = 1.337, 
                                    memory_in_gb = 1.337, ), 
                                requests = openapi_client.models.resource_requests.ResourceRequests(
                                    cpu = 1.337, 
                                    memory_in_gb = 1.337, ), ), 
                            volume_mounts = [
                                openapi_client.models.volume_mount.VolumeMount(
                                    mount_path = '', 
                                    name = '', 
                                    read_only = True, )
                                ], ), )
                    ],
                image_registry_credentials = [
                    openapi_client.models.image_registry_credential.ImageRegistryCredential(
                        password = '', 
                        server = '', 
                        username = '', )
                    ],
                instance_view = openapi_client.models.container_group_all_of_properties_instance_view.ContainerGroup_allOf_properties_instanceView(
                    events = [
                        openapi_client.models.event.Event(
                            count = 56, 
                            first_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '', 
                            name = '', 
                            type = '', )
                        ], 
                    state = '', ),
                ip_address = openapi_client.models.ip_address.IpAddress(
                    dns_name_label = '', 
                    fqdn = '', 
                    ip = '', 
                    ports = [
                        openapi_client.models.port.Port(
                            port = 56, 
                            protocol = 'TCP', )
                        ], 
                    type = 'Public', ),
                os_type = 'Windows',
                provisioning_state = '',
                restart_policy = 'Always',
                volumes = [
                    openapi_client.models.volume.Volume(
                        azure_file = openapi_client.models.azure_file_volume.AzureFileVolume(
                            read_only = True, 
                            share_name = '', 
                            storage_account_key = '', 
                            storage_account_name = '', ), 
                        empty_dir = openapi_client.models.empty_dir_volume.EmptyDirVolume(), 
                        git_repo = openapi_client.models.git_repo_volume.GitRepoVolume(
                            directory = '', 
                            repository = '', 
                            revision = '', ), 
                        name = '', 
                        secret = {
                            'key' : ''
                            }, )
                    ]
            )
        else:
            return ContainerGroupAllOfProperties(
                containers = [
                    openapi_client.models.container.Container(
                        name = '', 
                        properties = openapi_client.models.container_properties.ContainerProperties(
                            command = [
                                ''
                                ], 
                            environment_variables = [
                                openapi_client.models.environment_variable.EnvironmentVariable(
                                    name = '', 
                                    value = '', )
                                ], 
                            image = '', 
                            instance_view = openapi_client.models.container_properties_instance_view.ContainerProperties_instanceView(
                                current_state = openapi_client.models.container_state.ContainerState(
                                    detail_status = '', 
                                    exit_code = 56, 
                                    finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    state = '', ), 
                                events = [
                                    openapi_client.models.event.Event(
                                        count = 56, 
                                        first_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        last_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        message = '', 
                                        name = '', 
                                        type = '', )
                                    ], 
                                previous_state = openapi_client.models.container_state.ContainerState(
                                    detail_status = '', 
                                    exit_code = 56, 
                                    finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    state = '', ), 
                                restart_count = 56, ), 
                            ports = [
                                openapi_client.models.container_port.ContainerPort(
                                    port = 56, 
                                    protocol = 'TCP', )
                                ], 
                            resources = openapi_client.models.resource_requirements.ResourceRequirements(
                                limits = openapi_client.models.resource_limits.ResourceLimits(
                                    cpu = 1.337, 
                                    memory_in_gb = 1.337, ), 
                                requests = openapi_client.models.resource_requests.ResourceRequests(
                                    cpu = 1.337, 
                                    memory_in_gb = 1.337, ), ), 
                            volume_mounts = [
                                openapi_client.models.volume_mount.VolumeMount(
                                    mount_path = '', 
                                    name = '', 
                                    read_only = True, )
                                ], ), )
                    ],
                os_type = 'Windows',
        )
        """

    def testContainerGroupAllOfProperties(self):
        """Test ContainerGroupAllOfProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

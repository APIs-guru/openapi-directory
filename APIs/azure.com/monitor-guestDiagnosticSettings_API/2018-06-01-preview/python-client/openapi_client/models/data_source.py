# coding: utf-8

"""
    Guest Diagnostic Settings

    API to Add/Remove/List Guest Diagnostics Configuration to Azure Resources

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from openapi_client.models.data_source_configuration import DataSourceConfiguration
from openapi_client.models.sink_configuration import SinkConfiguration
from typing import Optional, Set
from typing_extensions import Self

class DataSource(BaseModel):
    """
    Data source object contains configuration to collect telemetry and one or more sinks to send that telemetry data to
    """ # noqa: E501
    configuration: DataSourceConfiguration
    kind: StrictStr = Field(description="Datasource kind")
    sinks: List[SinkConfiguration]
    __properties: ClassVar[List[str]] = ["configuration", "kind", "sinks"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PerformanceCounter', 'ETWProviders', 'WindowsEventLogs']):
            raise ValueError("must be one of enum values ('PerformanceCounter', 'ETWProviders', 'WindowsEventLogs')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sinks (list)
        _items = []
        if self.sinks:
            for _item_sinks in self.sinks:
                if _item_sinks:
                    _items.append(_item_sinks.to_dict())
            _dict['sinks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configuration": DataSourceConfiguration.from_dict(obj["configuration"]) if obj.get("configuration") is not None else None,
            "kind": obj.get("kind"),
            "sinks": [SinkConfiguration.from_dict(_item) for _item in obj["sinks"]] if obj.get("sinks") is not None else None
        })
        return _obj



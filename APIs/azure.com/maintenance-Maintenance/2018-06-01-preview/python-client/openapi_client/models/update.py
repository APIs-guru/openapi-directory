# coding: utf-8

"""
    MaintenanceManagementClient

    Azure Maintenance Management Client

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_properties import UpdateProperties
from typing import Optional, Set
from typing_extensions import Self

class Update(BaseModel):
    """
    Maintenance update on a resource
    """ # noqa: E501
    impact_duration_in_sec: Optional[StrictInt] = Field(default=None, description="Duration of impact in seconds", alias="impactDurationInSec")
    impact_type: Optional[StrictStr] = Field(default=None, description="The impact type", alias="impactType")
    maintenance_scope: Optional[StrictStr] = Field(default=None, description="The impact area", alias="maintenanceScope")
    not_before: Optional[datetime] = Field(default=None, description="Time when Azure will start force updates if not self-updated by customer before this time", alias="notBefore")
    properties: Optional[UpdateProperties] = None
    status: Optional[StrictStr] = Field(default=None, description="The status")
    __properties: ClassVar[List[str]] = ["impactDurationInSec", "impactType", "maintenanceScope", "notBefore", "properties", "status"]

    @field_validator('impact_type')
    def impact_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Freeze', 'Restart', 'Redeploy']):
            raise ValueError("must be one of enum values ('None', 'Freeze', 'Restart', 'Redeploy')")
        return value

    @field_validator('maintenance_scope')
    def maintenance_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['All', 'Host', 'Resource', 'InResource']):
            raise ValueError("must be one of enum values ('All', 'Host', 'Resource', 'InResource')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Pending', 'InProgress', 'Completed', 'RetryNow', 'RetryLater']):
            raise ValueError("must be one of enum values ('Pending', 'InProgress', 'Completed', 'RetryNow', 'RetryLater')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Update from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Update from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "impactDurationInSec": obj.get("impactDurationInSec"),
            "impactType": obj.get("impactType"),
            "maintenanceScope": obj.get("maintenanceScope"),
            "notBefore": obj.get("notBefore"),
            "properties": UpdateProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "status": obj.get("status")
        })
        return _obj



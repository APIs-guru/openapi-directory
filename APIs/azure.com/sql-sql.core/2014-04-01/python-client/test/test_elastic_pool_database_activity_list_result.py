# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.elastic_pool_database_activity_list_result import ElasticPoolDatabaseActivityListResult

class TestElasticPoolDatabaseActivityListResult(unittest.TestCase):
    """ElasticPoolDatabaseActivityListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ElasticPoolDatabaseActivityListResult:
        """Test ElasticPoolDatabaseActivityListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ElasticPoolDatabaseActivityListResult`
        """
        model = ElasticPoolDatabaseActivityListResult()
        if include_optional:
            return ElasticPoolDatabaseActivityListResult(
                value = [
                    openapi_client.models.elastic_pool_database_activity.ElasticPoolDatabaseActivity(
                        location = '', 
                        properties = openapi_client.models.elastic_pool_database_activity_properties.ElasticPoolDatabaseActivityProperties(
                            current_elastic_pool_name = '', 
                            current_service_objective = '', 
                            database_name = '', 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            error_code = 56, 
                            error_message = '', 
                            error_severity = 56, 
                            operation = '', 
                            operation_id = '', 
                            percent_complete = 56, 
                            requested_elastic_pool_name = '', 
                            requested_service_objective = '', 
                            server_name = '', 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = '', ), )
                    ]
            )
        else:
            return ElasticPoolDatabaseActivityListResult(
                value = [
                    openapi_client.models.elastic_pool_database_activity.ElasticPoolDatabaseActivity(
                        location = '', 
                        properties = openapi_client.models.elastic_pool_database_activity_properties.ElasticPoolDatabaseActivityProperties(
                            current_elastic_pool_name = '', 
                            current_service_objective = '', 
                            database_name = '', 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            error_code = 56, 
                            error_message = '', 
                            error_severity = 56, 
                            operation = '', 
                            operation_id = '', 
                            percent_complete = 56, 
                            requested_elastic_pool_name = '', 
                            requested_service_objective = '', 
                            server_name = '', 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = '', ), )
                    ],
        )
        """

    def testElasticPoolDatabaseActivityListResult(self):
        """Test ElasticPoolDatabaseActivityListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

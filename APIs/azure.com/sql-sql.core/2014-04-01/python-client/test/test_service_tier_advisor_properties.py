# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.service_tier_advisor_properties import ServiceTierAdvisorProperties

class TestServiceTierAdvisorProperties(unittest.TestCase):
    """ServiceTierAdvisorProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceTierAdvisorProperties:
        """Test ServiceTierAdvisorProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceTierAdvisorProperties`
        """
        model = ServiceTierAdvisorProperties()
        if include_optional:
            return ServiceTierAdvisorProperties(
                active_time_ratio = 1.337,
                avg_dtu = 1.337,
                confidence = 1.337,
                current_service_level_objective = '',
                current_service_level_objective_id = '',
                database_size_based_recommendation_service_level_objective = '',
                database_size_based_recommendation_service_level_objective_id = '',
                disaster_plan_based_recommendation_service_level_objective = '',
                disaster_plan_based_recommendation_service_level_objective_id = '',
                max_dtu = 1.337,
                max_size_in_gb = 1.337,
                min_dtu = 1.337,
                observation_period_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                observation_period_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                overall_recommendation_service_level_objective = '',
                overall_recommendation_service_level_objective_id = '',
                service_level_objective_usage_metrics = [
                    openapi_client.models.slo_usage_metric.SloUsageMetric(
                        in_range_time_ratio = 1.337, 
                        service_level_objective = 'System', 
                        service_level_objective_id = '', )
                    ],
                usage_based_recommendation_service_level_objective = '',
                usage_based_recommendation_service_level_objective_id = ''
            )
        else:
            return ServiceTierAdvisorProperties(
        )
        """

    def testServiceTierAdvisorProperties(self):
        """Test ServiceTierAdvisorProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

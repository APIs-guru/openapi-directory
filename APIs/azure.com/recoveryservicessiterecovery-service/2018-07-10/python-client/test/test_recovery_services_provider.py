# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.recovery_services_provider import RecoveryServicesProvider

class TestRecoveryServicesProvider(unittest.TestCase):
    """RecoveryServicesProvider unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RecoveryServicesProvider:
        """Test RecoveryServicesProvider
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RecoveryServicesProvider`
        """
        model = RecoveryServicesProvider()
        if include_optional:
            return RecoveryServicesProvider(
                properties = openapi_client.models.recovery_services_provider_properties.RecoveryServicesProviderProperties(
                    allowed_scenarios = [
                        ''
                        ], 
                    authentication_identity_details = openapi_client.models.identity_provider_details.IdentityProviderDetails(
                        aad_authority = '', 
                        application_id = '', 
                        audience = '', 
                        object_id = '', 
                        tenant_id = '', ), 
                    connection_status = '', 
                    dra_identifier = '', 
                    fabric_friendly_name = '', 
                    fabric_type = '', 
                    friendly_name = '', 
                    health_error_details = [
                        openapi_client.models.health_error.HealthError(
                            creation_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            customer_resolvability = 'Allowed', 
                            entity_id = '', 
                            error_category = '', 
                            error_code = '', 
                            error_id = '', 
                            error_level = '', 
                            error_message = '', 
                            error_source = '', 
                            error_type = '', 
                            inner_health_errors = [
                                openapi_client.models.inner_health_error.InnerHealthError(
                                    creation_time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    entity_id = '', 
                                    error_category = '', 
                                    error_code = '', 
                                    error_level = '', 
                                    error_message = '', 
                                    error_source = '', 
                                    error_type = '', 
                                    possible_causes = '', 
                                    recommended_action = '', 
                                    recovery_provider_error_message = '', 
                                    summary_message = '', )
                                ], 
                            possible_causes = '', 
                            recommended_action = '', 
                            recovery_provider_error_message = '', 
                            summary_message = '', )
                        ], 
                    last_heart_beat = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    protected_item_count = 56, 
                    provider_version = '', 
                    provider_version_details = openapi_client.models.version_details.VersionDetails(
                        expiry_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = 'Supported', 
                        version = '', ), 
                    provider_version_expiry_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    provider_version_state = '', 
                    resource_access_identity_details = openapi_client.models.identity_provider_details.IdentityProviderDetails(
                        aad_authority = '', 
                        application_id = '', 
                        audience = '', 
                        object_id = '', 
                        tenant_id = '', ), 
                    server_version = '', ),
                id = '',
                location = '',
                name = '',
                type = ''
            )
        else:
            return RecoveryServicesProvider(
        )
        """

    def testRecoveryServicesProvider(self):
        """Test RecoveryServicesProvider"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

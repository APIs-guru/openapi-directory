# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_provider_specific_details import EventProviderSpecificDetails
from openapi_client.models.event_specific_details import EventSpecificDetails
from openapi_client.models.health_error import HealthError
from typing import Optional, Set
from typing_extensions import Self

class EventProperties(BaseModel):
    """
    The properties of a monitoring event.
    """ # noqa: E501
    affected_object_friendly_name: Optional[StrictStr] = Field(default=None, description="The friendly name of the source of the event on which it is raised (for example, VM, VMM etc).", alias="affectedObjectFriendlyName")
    description: Optional[StrictStr] = Field(default=None, description="The event name.")
    event_code: Optional[StrictStr] = Field(default=None, description="The Id of the monitoring event.", alias="eventCode")
    event_specific_details: Optional[EventSpecificDetails] = Field(default=None, alias="eventSpecificDetails")
    event_type: Optional[StrictStr] = Field(default=None, description="The type of the event. for example: VM Health, Server Health, Job Failure etc.", alias="eventType")
    fabric_id: Optional[StrictStr] = Field(default=None, description="The ARM ID of the fabric.", alias="fabricId")
    health_errors: Optional[List[HealthError]] = Field(default=None, description="The list of errors / warnings capturing details associated with the issue(s).", alias="healthErrors")
    provider_specific_details: Optional[EventProviderSpecificDetails] = Field(default=None, alias="providerSpecificDetails")
    severity: Optional[StrictStr] = Field(default=None, description="The severity of the event.")
    time_of_occurrence: Optional[datetime] = Field(default=None, description="The time of occurrence of the event.", alias="timeOfOccurrence")
    __properties: ClassVar[List[str]] = ["affectedObjectFriendlyName", "description", "eventCode", "eventSpecificDetails", "eventType", "fabricId", "healthErrors", "providerSpecificDetails", "severity", "timeOfOccurrence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_specific_details
        if self.event_specific_details:
            _dict['eventSpecificDetails'] = self.event_specific_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in health_errors (list)
        _items = []
        if self.health_errors:
            for _item_health_errors in self.health_errors:
                if _item_health_errors:
                    _items.append(_item_health_errors.to_dict())
            _dict['healthErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of provider_specific_details
        if self.provider_specific_details:
            _dict['providerSpecificDetails'] = self.provider_specific_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affectedObjectFriendlyName": obj.get("affectedObjectFriendlyName"),
            "description": obj.get("description"),
            "eventCode": obj.get("eventCode"),
            "eventSpecificDetails": EventSpecificDetails.from_dict(obj["eventSpecificDetails"]) if obj.get("eventSpecificDetails") is not None else None,
            "eventType": obj.get("eventType"),
            "fabricId": obj.get("fabricId"),
            "healthErrors": [HealthError.from_dict(_item) for _item in obj["healthErrors"]] if obj.get("healthErrors") is not None else None,
            "providerSpecificDetails": EventProviderSpecificDetails.from_dict(obj["providerSpecificDetails"]) if obj.get("providerSpecificDetails") is not None else None,
            "severity": obj.get("severity"),
            "timeOfOccurrence": obj.get("timeOfOccurrence")
        })
        return _obj



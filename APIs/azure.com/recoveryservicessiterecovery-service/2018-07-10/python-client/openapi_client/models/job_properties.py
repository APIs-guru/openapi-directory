# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.asr_task import ASRTask
from openapi_client.models.job_details import JobDetails
from openapi_client.models.job_error_details import JobErrorDetails
from typing import Optional, Set
from typing_extensions import Self

class JobProperties(BaseModel):
    """
    Job custom data details.
    """ # noqa: E501
    activity_id: Optional[StrictStr] = Field(default=None, description="The activity id.", alias="activityId")
    allowed_actions: Optional[List[StrictStr]] = Field(default=None, description="The Allowed action the job.", alias="allowedActions")
    custom_details: Optional[JobDetails] = Field(default=None, alias="customDetails")
    end_time: Optional[datetime] = Field(default=None, description="The end time.", alias="endTime")
    errors: Optional[List[JobErrorDetails]] = Field(default=None, description="The errors.")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The DisplayName.", alias="friendlyName")
    scenario_name: Optional[StrictStr] = Field(default=None, description="The ScenarioName.", alias="scenarioName")
    start_time: Optional[datetime] = Field(default=None, description="The start time.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="The status of the Job. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled, Suspended or Other.")
    state_description: Optional[StrictStr] = Field(default=None, description="The description of the state of the Job. For e.g. - For Succeeded state, description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.", alias="stateDescription")
    target_instance_type: Optional[StrictStr] = Field(default=None, description="The type of the affected object which is of {Microsoft.Azure.SiteRecovery.V2015_11_10.AffectedObjectType} class.", alias="targetInstanceType")
    target_object_id: Optional[StrictStr] = Field(default=None, description="The affected Object Id.", alias="targetObjectId")
    target_object_name: Optional[StrictStr] = Field(default=None, description="The name of the affected object.", alias="targetObjectName")
    tasks: Optional[List[ASRTask]] = Field(default=None, description="The tasks.")
    __properties: ClassVar[List[str]] = ["activityId", "allowedActions", "customDetails", "endTime", "errors", "friendlyName", "scenarioName", "startTime", "state", "stateDescription", "targetInstanceType", "targetObjectId", "targetObjectName", "tasks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_details
        if self.custom_details:
            _dict['customDetails'] = self.custom_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item_tasks in self.tasks:
                if _item_tasks:
                    _items.append(_item_tasks.to_dict())
            _dict['tasks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityId": obj.get("activityId"),
            "allowedActions": obj.get("allowedActions"),
            "customDetails": JobDetails.from_dict(obj["customDetails"]) if obj.get("customDetails") is not None else None,
            "endTime": obj.get("endTime"),
            "errors": [JobErrorDetails.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "friendlyName": obj.get("friendlyName"),
            "scenarioName": obj.get("scenarioName"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "stateDescription": obj.get("stateDescription"),
            "targetInstanceType": obj.get("targetInstanceType"),
            "targetObjectId": obj.get("targetObjectId"),
            "targetObjectName": obj.get("targetObjectName"),
            "tasks": [ASRTask.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disk_details import DiskDetails
from openapi_client.models.initial_replication_details import InitialReplicationDetails
from openapi_client.models.replication_provider_specific_settings import ReplicationProviderSpecificSettings
from openapi_client.models.vm_nic_details import VMNicDetails
from typing import Optional, Set
from typing_extensions import Self

class HyperVReplicaBlueReplicationDetails(ReplicationProviderSpecificSettings):
    """
    HyperV replica 2012 R2 (Blue) replication details.
    """ # noqa: E501
    initial_replication_details: Optional[InitialReplicationDetails] = Field(default=None, alias="initialReplicationDetails")
    last_replicated_time: Optional[datetime] = Field(default=None, description="The Last replication time.", alias="lastReplicatedTime")
    v_m_disk_details: Optional[List[DiskDetails]] = Field(default=None, description="VM disk details.", alias="vMDiskDetails")
    vm_id: Optional[StrictStr] = Field(default=None, description="The virtual machine Id.", alias="vmId")
    vm_nics: Optional[List[VMNicDetails]] = Field(default=None, description="The PE Network details.", alias="vmNics")
    vm_protection_state: Optional[StrictStr] = Field(default=None, description="The protection state for the vm.", alias="vmProtectionState")
    vm_protection_state_description: Optional[StrictStr] = Field(default=None, description="The protection state description for the vm.", alias="vmProtectionStateDescription")
    __properties: ClassVar[List[str]] = ["instanceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HyperVReplicaBlueReplicationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HyperVReplicaBlueReplicationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instanceType": obj.get("instanceType")
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class A2AProtectedDiskDetails(BaseModel):
    """
    A2A protected disk details.
    """ # noqa: E501
    allowed_disk_level_operation: Optional[List[StrictStr]] = Field(default=None, description="The disk level operations list.", alias="allowedDiskLevelOperation")
    data_pending_at_source_agent_in_mb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The data pending at source virtual machine in MB.", alias="dataPendingAtSourceAgentInMB")
    data_pending_in_staging_storage_account_in_mb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The data pending for replication in MB at staging account.", alias="dataPendingInStagingStorageAccountInMB")
    dek_key_vault_arm_id: Optional[StrictStr] = Field(default=None, description="The KeyVault resource id for secret (BEK).", alias="dekKeyVaultArmId")
    disk_capacity_in_bytes: Optional[StrictInt] = Field(default=None, description="The disk capacity in bytes.", alias="diskCapacityInBytes")
    disk_name: Optional[StrictStr] = Field(default=None, description="The disk name.", alias="diskName")
    disk_state: Optional[StrictStr] = Field(default=None, description="The disk state.", alias="diskState")
    disk_type: Optional[StrictStr] = Field(default=None, description="The type of disk.", alias="diskType")
    disk_uri: Optional[StrictStr] = Field(default=None, description="The disk uri.", alias="diskUri")
    is_disk_encrypted: Optional[StrictBool] = Field(default=None, description="A value indicating whether vm has encrypted os disk or not.", alias="isDiskEncrypted")
    is_disk_key_encrypted: Optional[StrictBool] = Field(default=None, description="A value indicating whether disk key got encrypted or not.", alias="isDiskKeyEncrypted")
    kek_key_vault_arm_id: Optional[StrictStr] = Field(default=None, description="The KeyVault resource id for key (KEK).", alias="kekKeyVaultArmId")
    key_identifier: Optional[StrictStr] = Field(default=None, description="The key URL / identifier (KEK).", alias="keyIdentifier")
    monitoring_job_type: Optional[StrictStr] = Field(default=None, description="The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.", alias="monitoringJobType")
    monitoring_percentage_completion: Optional[StrictInt] = Field(default=None, description="The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.", alias="monitoringPercentageCompletion")
    primary_disk_azure_storage_account_id: Optional[StrictStr] = Field(default=None, description="The primary disk storage account.", alias="primaryDiskAzureStorageAccountId")
    primary_staging_azure_storage_account_id: Optional[StrictStr] = Field(default=None, description="The primary staging storage account.", alias="primaryStagingAzureStorageAccountId")
    recovery_azure_storage_account_id: Optional[StrictStr] = Field(default=None, description="The recovery disk storage account.", alias="recoveryAzureStorageAccountId")
    recovery_disk_uri: Optional[StrictStr] = Field(default=None, description="Recovery disk uri.", alias="recoveryDiskUri")
    resync_required: Optional[StrictBool] = Field(default=None, description="A value indicating whether resync is required for this disk.", alias="resyncRequired")
    secret_identifier: Optional[StrictStr] = Field(default=None, description="The secret URL / identifier (BEK).", alias="secretIdentifier")
    __properties: ClassVar[List[str]] = ["allowedDiskLevelOperation", "dataPendingAtSourceAgentInMB", "dataPendingInStagingStorageAccountInMB", "dekKeyVaultArmId", "diskCapacityInBytes", "diskName", "diskState", "diskType", "diskUri", "isDiskEncrypted", "isDiskKeyEncrypted", "kekKeyVaultArmId", "keyIdentifier", "monitoringJobType", "monitoringPercentageCompletion", "primaryDiskAzureStorageAccountId", "primaryStagingAzureStorageAccountId", "recoveryAzureStorageAccountId", "recoveryDiskUri", "resyncRequired", "secretIdentifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of A2AProtectedDiskDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of A2AProtectedDiskDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedDiskLevelOperation": obj.get("allowedDiskLevelOperation"),
            "dataPendingAtSourceAgentInMB": obj.get("dataPendingAtSourceAgentInMB"),
            "dataPendingInStagingStorageAccountInMB": obj.get("dataPendingInStagingStorageAccountInMB"),
            "dekKeyVaultArmId": obj.get("dekKeyVaultArmId"),
            "diskCapacityInBytes": obj.get("diskCapacityInBytes"),
            "diskName": obj.get("diskName"),
            "diskState": obj.get("diskState"),
            "diskType": obj.get("diskType"),
            "diskUri": obj.get("diskUri"),
            "isDiskEncrypted": obj.get("isDiskEncrypted"),
            "isDiskKeyEncrypted": obj.get("isDiskKeyEncrypted"),
            "kekKeyVaultArmId": obj.get("kekKeyVaultArmId"),
            "keyIdentifier": obj.get("keyIdentifier"),
            "monitoringJobType": obj.get("monitoringJobType"),
            "monitoringPercentageCompletion": obj.get("monitoringPercentageCompletion"),
            "primaryDiskAzureStorageAccountId": obj.get("primaryDiskAzureStorageAccountId"),
            "primaryStagingAzureStorageAccountId": obj.get("primaryStagingAzureStorageAccountId"),
            "recoveryAzureStorageAccountId": obj.get("recoveryAzureStorageAccountId"),
            "recoveryDiskUri": obj.get("recoveryDiskUri"),
            "resyncRequired": obj.get("resyncRequired"),
            "secretIdentifier": obj.get("secretIdentifier")
        })
        return _obj



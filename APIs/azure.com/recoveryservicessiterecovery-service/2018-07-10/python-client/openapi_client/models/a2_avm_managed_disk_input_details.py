# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disk_encryption_info import DiskEncryptionInfo
from typing import Optional, Set
from typing_extensions import Self

class A2AVmManagedDiskInputDetails(BaseModel):
    """
    Azure VM managed disk input details.
    """ # noqa: E501
    disk_encryption_info: Optional[DiskEncryptionInfo] = Field(default=None, alias="diskEncryptionInfo")
    disk_id: Optional[StrictStr] = Field(default=None, description="The disk Id.", alias="diskId")
    primary_staging_azure_storage_account_id: Optional[StrictStr] = Field(default=None, description="The primary staging storage account Arm Id.", alias="primaryStagingAzureStorageAccountId")
    recovery_disk_encryption_set_id: Optional[StrictStr] = Field(default=None, description="The recovery disk encryption set Id.", alias="recoveryDiskEncryptionSetId")
    recovery_replica_disk_account_type: Optional[StrictStr] = Field(default=None, description="The replica disk type. Its an optional value and will be same as source disk type if not user provided.", alias="recoveryReplicaDiskAccountType")
    recovery_resource_group_id: Optional[StrictStr] = Field(default=None, description="The target resource group Arm Id.", alias="recoveryResourceGroupId")
    recovery_target_disk_account_type: Optional[StrictStr] = Field(default=None, description="The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.", alias="recoveryTargetDiskAccountType")
    __properties: ClassVar[List[str]] = ["diskEncryptionInfo", "diskId", "primaryStagingAzureStorageAccountId", "recoveryDiskEncryptionSetId", "recoveryReplicaDiskAccountType", "recoveryResourceGroupId", "recoveryTargetDiskAccountType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of A2AVmManagedDiskInputDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disk_encryption_info
        if self.disk_encryption_info:
            _dict['diskEncryptionInfo'] = self.disk_encryption_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of A2AVmManagedDiskInputDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskEncryptionInfo": DiskEncryptionInfo.from_dict(obj["diskEncryptionInfo"]) if obj.get("diskEncryptionInfo") is not None else None,
            "diskId": obj.get("diskId"),
            "primaryStagingAzureStorageAccountId": obj.get("primaryStagingAzureStorageAccountId"),
            "recoveryDiskEncryptionSetId": obj.get("recoveryDiskEncryptionSetId"),
            "recoveryReplicaDiskAccountType": obj.get("recoveryReplicaDiskAccountType"),
            "recoveryResourceGroupId": obj.get("recoveryResourceGroupId"),
            "recoveryTargetDiskAccountType": obj.get("recoveryTargetDiskAccountType")
        })
        return _obj



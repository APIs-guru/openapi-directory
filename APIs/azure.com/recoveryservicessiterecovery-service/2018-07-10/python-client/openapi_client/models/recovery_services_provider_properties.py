# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_error import HealthError
from openapi_client.models.identity_provider_details import IdentityProviderDetails
from openapi_client.models.version_details import VersionDetails
from typing import Optional, Set
from typing_extensions import Self

class RecoveryServicesProviderProperties(BaseModel):
    """
    Recovery services provider properties.
    """ # noqa: E501
    allowed_scenarios: Optional[List[StrictStr]] = Field(default=None, description="The scenarios allowed on this provider.", alias="allowedScenarios")
    authentication_identity_details: Optional[IdentityProviderDetails] = Field(default=None, alias="authenticationIdentityDetails")
    connection_status: Optional[StrictStr] = Field(default=None, description="A value indicating whether DRA is responsive.", alias="connectionStatus")
    dra_identifier: Optional[StrictStr] = Field(default=None, description="The DRA Id.", alias="draIdentifier")
    fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="The fabric friendly name.", alias="fabricFriendlyName")
    fabric_type: Optional[StrictStr] = Field(default=None, description="Type of the site.", alias="fabricType")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of the DRA.", alias="friendlyName")
    health_error_details: Optional[List[HealthError]] = Field(default=None, description="The recovery services provider health error details.", alias="healthErrorDetails")
    last_heart_beat: Optional[datetime] = Field(default=None, description="Time when last heartbeat was sent by the DRA.", alias="lastHeartBeat")
    protected_item_count: Optional[StrictInt] = Field(default=None, description="Number of protected VMs currently managed by the DRA.", alias="protectedItemCount")
    provider_version: Optional[StrictStr] = Field(default=None, description="The provider version.", alias="providerVersion")
    provider_version_details: Optional[VersionDetails] = Field(default=None, alias="providerVersionDetails")
    provider_version_expiry_date: Optional[datetime] = Field(default=None, description="Expiry date of the version.", alias="providerVersionExpiryDate")
    provider_version_state: Optional[StrictStr] = Field(default=None, description="DRA version status.", alias="providerVersionState")
    resource_access_identity_details: Optional[IdentityProviderDetails] = Field(default=None, alias="resourceAccessIdentityDetails")
    server_version: Optional[StrictStr] = Field(default=None, description="The fabric provider.", alias="serverVersion")
    __properties: ClassVar[List[str]] = ["allowedScenarios", "authenticationIdentityDetails", "connectionStatus", "draIdentifier", "fabricFriendlyName", "fabricType", "friendlyName", "healthErrorDetails", "lastHeartBeat", "protectedItemCount", "providerVersion", "providerVersionDetails", "providerVersionExpiryDate", "providerVersionState", "resourceAccessIdentityDetails", "serverVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoveryServicesProviderProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authentication_identity_details
        if self.authentication_identity_details:
            _dict['authenticationIdentityDetails'] = self.authentication_identity_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in health_error_details (list)
        _items = []
        if self.health_error_details:
            for _item_health_error_details in self.health_error_details:
                if _item_health_error_details:
                    _items.append(_item_health_error_details.to_dict())
            _dict['healthErrorDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of provider_version_details
        if self.provider_version_details:
            _dict['providerVersionDetails'] = self.provider_version_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_access_identity_details
        if self.resource_access_identity_details:
            _dict['resourceAccessIdentityDetails'] = self.resource_access_identity_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoveryServicesProviderProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedScenarios": obj.get("allowedScenarios"),
            "authenticationIdentityDetails": IdentityProviderDetails.from_dict(obj["authenticationIdentityDetails"]) if obj.get("authenticationIdentityDetails") is not None else None,
            "connectionStatus": obj.get("connectionStatus"),
            "draIdentifier": obj.get("draIdentifier"),
            "fabricFriendlyName": obj.get("fabricFriendlyName"),
            "fabricType": obj.get("fabricType"),
            "friendlyName": obj.get("friendlyName"),
            "healthErrorDetails": [HealthError.from_dict(_item) for _item in obj["healthErrorDetails"]] if obj.get("healthErrorDetails") is not None else None,
            "lastHeartBeat": obj.get("lastHeartBeat"),
            "protectedItemCount": obj.get("protectedItemCount"),
            "providerVersion": obj.get("providerVersion"),
            "providerVersionDetails": VersionDetails.from_dict(obj["providerVersionDetails"]) if obj.get("providerVersionDetails") is not None else None,
            "providerVersionExpiryDate": obj.get("providerVersionExpiryDate"),
            "providerVersionState": obj.get("providerVersionState"),
            "resourceAccessIdentityDetails": IdentityProviderDetails.from_dict(obj["resourceAccessIdentityDetails"]) if obj.get("resourceAccessIdentityDetails") is not None else None,
            "serverVersion": obj.get("serverVersion")
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.migration_provider_specific_settings import MigrationProviderSpecificSettings
from openapi_client.models.v_mware_cbt_nic_details import VMwareCbtNicDetails
from openapi_client.models.v_mware_cbt_protected_disk_details import VMwareCbtProtectedDiskDetails
from typing import Optional, Set
from typing_extensions import Self

class VMwareCbtMigrationDetails(MigrationProviderSpecificSettings):
    """
    VMwareCbt provider specific settings
    """ # noqa: E501
    data_mover_run_as_account_id: Optional[StrictStr] = Field(default=None, description="The data mover RunAs account Id.", alias="dataMoverRunAsAccountId")
    last_recovery_point_received: Optional[datetime] = Field(default=None, description="The last recovery point received time.", alias="lastRecoveryPointReceived")
    license_type: Optional[StrictStr] = Field(default=None, description="License Type of the VM to be used.", alias="licenseType")
    migration_recovery_point_id: Optional[StrictStr] = Field(default=None, description="The recovery point Id to which the VM was migrated.", alias="migrationRecoveryPointId")
    os_type: Optional[StrictStr] = Field(default=None, description="The type of the OS on the VM.", alias="osType")
    protected_disks: Optional[List[VMwareCbtProtectedDiskDetails]] = Field(default=None, description="The list of protected disks.", alias="protectedDisks")
    snapshot_run_as_account_id: Optional[StrictStr] = Field(default=None, description="The snapshot RunAs account Id.", alias="snapshotRunAsAccountId")
    target_availability_set_id: Optional[StrictStr] = Field(default=None, description="The target availability set Id.", alias="targetAvailabilitySetId")
    target_boot_diagnostics_storage_account_id: Optional[StrictStr] = Field(default=None, description="The target boot diagnostics storage account ARM Id.", alias="targetBootDiagnosticsStorageAccountId")
    target_location: Optional[StrictStr] = Field(default=None, description="The target location.", alias="targetLocation")
    target_network_id: Optional[StrictStr] = Field(default=None, description="The target network Id.", alias="targetNetworkId")
    target_resource_group_id: Optional[StrictStr] = Field(default=None, description="The target resource group Id.", alias="targetResourceGroupId")
    target_vm_name: Optional[StrictStr] = Field(default=None, description="Target VM name.", alias="targetVmName")
    target_vm_size: Optional[StrictStr] = Field(default=None, description="The target VM size.", alias="targetVmSize")
    vm_nics: Optional[List[VMwareCbtNicDetails]] = Field(default=None, description="The network details.", alias="vmNics")
    vmware_machine_id: Optional[StrictStr] = Field(default=None, description="The ARM Id of the VM discovered in VMware.", alias="vmwareMachineId")
    __properties: ClassVar[List[str]] = ["instanceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VMwareCbtMigrationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_mover_run_as_account_id",
            "last_recovery_point_received",
            "migration_recovery_point_id",
            "os_type",
            "snapshot_run_as_account_id",
            "target_location",
            "vmware_machine_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VMwareCbtMigrationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instanceType": obj.get("instanceType")
        })
        return _obj



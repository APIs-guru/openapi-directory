# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_mapping_fabric_specific_settings import NetworkMappingFabricSpecificSettings
from typing import Optional, Set
from typing_extensions import Self

class NetworkMappingProperties(BaseModel):
    """
    Network Mapping Properties.
    """ # noqa: E501
    fabric_specific_settings: Optional[NetworkMappingFabricSpecificSettings] = Field(default=None, alias="fabricSpecificSettings")
    primary_fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="The primary fabric friendly name.", alias="primaryFabricFriendlyName")
    primary_network_friendly_name: Optional[StrictStr] = Field(default=None, description="The primary network friendly name.", alias="primaryNetworkFriendlyName")
    primary_network_id: Optional[StrictStr] = Field(default=None, description="The primary network id for network mapping.", alias="primaryNetworkId")
    recovery_fabric_arm_id: Optional[StrictStr] = Field(default=None, description="The recovery fabric ARM id.", alias="recoveryFabricArmId")
    recovery_fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="The recovery fabric friendly name.", alias="recoveryFabricFriendlyName")
    recovery_network_friendly_name: Optional[StrictStr] = Field(default=None, description="The recovery network friendly name.", alias="recoveryNetworkFriendlyName")
    recovery_network_id: Optional[StrictStr] = Field(default=None, description="The recovery network id for network mapping.", alias="recoveryNetworkId")
    state: Optional[StrictStr] = Field(default=None, description="The pairing state for network mapping.")
    __properties: ClassVar[List[str]] = ["fabricSpecificSettings", "primaryFabricFriendlyName", "primaryNetworkFriendlyName", "primaryNetworkId", "recoveryFabricArmId", "recoveryFabricFriendlyName", "recoveryNetworkFriendlyName", "recoveryNetworkId", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkMappingProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fabric_specific_settings
        if self.fabric_specific_settings:
            _dict['fabricSpecificSettings'] = self.fabric_specific_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkMappingProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fabricSpecificSettings": NetworkMappingFabricSpecificSettings.from_dict(obj["fabricSpecificSettings"]) if obj.get("fabricSpecificSettings") is not None else None,
            "primaryFabricFriendlyName": obj.get("primaryFabricFriendlyName"),
            "primaryNetworkFriendlyName": obj.get("primaryNetworkFriendlyName"),
            "primaryNetworkId": obj.get("primaryNetworkId"),
            "recoveryFabricArmId": obj.get("recoveryFabricArmId"),
            "recoveryFabricFriendlyName": obj.get("recoveryFabricFriendlyName"),
            "recoveryNetworkFriendlyName": obj.get("recoveryNetworkFriendlyName"),
            "recoveryNetworkId": obj.get("recoveryNetworkId"),
            "state": obj.get("state")
        })
        return _obj



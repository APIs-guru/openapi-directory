# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.configuration_settings import ConfigurationSettings
from typing import Optional, Set
from typing_extensions import Self

class ProtectableItemProperties(BaseModel):
    """
    Replication protected item custom data details.
    """ # noqa: E501
    custom_details: Optional[ConfigurationSettings] = Field(default=None, alias="customDetails")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The name.", alias="friendlyName")
    protection_readiness_errors: Optional[List[StrictStr]] = Field(default=None, description="The Current protection readiness errors.", alias="protectionReadinessErrors")
    protection_status: Optional[StrictStr] = Field(default=None, description="The protection status.", alias="protectionStatus")
    recovery_services_provider_id: Optional[StrictStr] = Field(default=None, description="The recovery provider ARM Id.", alias="recoveryServicesProviderId")
    replication_protected_item_id: Optional[StrictStr] = Field(default=None, description="The ARM resource of protected items.", alias="replicationProtectedItemId")
    supported_replication_providers: Optional[List[StrictStr]] = Field(default=None, description="The list of replication providers supported for the protectable item.", alias="supportedReplicationProviders")
    __properties: ClassVar[List[str]] = ["customDetails", "friendlyName", "protectionReadinessErrors", "protectionStatus", "recoveryServicesProviderId", "replicationProtectedItemId", "supportedReplicationProviders"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtectableItemProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_details
        if self.custom_details:
            _dict['customDetails'] = self.custom_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtectableItemProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customDetails": ConfigurationSettings.from_dict(obj["customDetails"]) if obj.get("customDetails") is not None else None,
            "friendlyName": obj.get("friendlyName"),
            "protectionReadinessErrors": obj.get("protectionReadinessErrors"),
            "protectionStatus": obj.get("protectionStatus"),
            "recoveryServicesProviderId": obj.get("recoveryServicesProviderId"),
            "replicationProtectedItemId": obj.get("replicationProtectedItemId"),
            "supportedReplicationProviders": obj.get("supportedReplicationProviders")
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ip_config import IPConfig
from typing import Optional, Set
from typing_extensions import Self

class VMNicInputDetails(BaseModel):
    """
    Hyper V VM network input details.
    """ # noqa: E501
    enable_accelerated_networking_on_recovery: Optional[StrictBool] = Field(default=None, description="Whether the NIC has accelerated networking enabled.", alias="enableAcceleratedNetworkingOnRecovery")
    enable_accelerated_networking_on_tfo: Optional[StrictBool] = Field(default=None, description="Whether the test NIC has accelerated networking enabled.", alias="enableAcceleratedNetworkingOnTfo")
    nic_id: Optional[StrictStr] = Field(default=None, description="The nic Id.", alias="nicId")
    recovery_lb_backend_address_pool_ids: Optional[List[StrictStr]] = Field(default=None, description="The target backend address pools for the NIC.", alias="recoveryLBBackendAddressPoolIds")
    recovery_network_security_group_id: Optional[StrictStr] = Field(default=None, description="The id of the NSG associated with the NIC.", alias="recoveryNetworkSecurityGroupId")
    recovery_public_ip_address_id: Optional[StrictStr] = Field(default=None, description="The id of the public IP address resource associated with the NIC.", alias="recoveryPublicIpAddressId")
    recovery_vm_subnet_name: Optional[StrictStr] = Field(default=None, description="Recovery VM subnet name.", alias="recoveryVMSubnetName")
    replica_nic_static_ip_address: Optional[StrictStr] = Field(default=None, description="Replica nic static IP address.", alias="replicaNicStaticIPAddress")
    selection_type: Optional[StrictStr] = Field(default=None, description="Selection type for failover.", alias="selectionType")
    tfo_ip_configs: Optional[List[IPConfig]] = Field(default=None, description="The IP configurations to be used by NIC during test failover.", alias="tfoIPConfigs")
    tfo_network_security_group_id: Optional[StrictStr] = Field(default=None, description="The NSG to be used by NIC during test failover.", alias="tfoNetworkSecurityGroupId")
    tfo_vm_subnet_name: Optional[StrictStr] = Field(default=None, description="The subnet to be used by NIC during test failover.", alias="tfoVMSubnetName")
    __properties: ClassVar[List[str]] = ["enableAcceleratedNetworkingOnRecovery", "enableAcceleratedNetworkingOnTfo", "nicId", "recoveryLBBackendAddressPoolIds", "recoveryNetworkSecurityGroupId", "recoveryPublicIpAddressId", "recoveryVMSubnetName", "replicaNicStaticIPAddress", "selectionType", "tfoIPConfigs", "tfoNetworkSecurityGroupId", "tfoVMSubnetName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VMNicInputDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tfo_ip_configs (list)
        _items = []
        if self.tfo_ip_configs:
            for _item_tfo_ip_configs in self.tfo_ip_configs:
                if _item_tfo_ip_configs:
                    _items.append(_item_tfo_ip_configs.to_dict())
            _dict['tfoIPConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VMNicInputDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableAcceleratedNetworkingOnRecovery": obj.get("enableAcceleratedNetworkingOnRecovery"),
            "enableAcceleratedNetworkingOnTfo": obj.get("enableAcceleratedNetworkingOnTfo"),
            "nicId": obj.get("nicId"),
            "recoveryLBBackendAddressPoolIds": obj.get("recoveryLBBackendAddressPoolIds"),
            "recoveryNetworkSecurityGroupId": obj.get("recoveryNetworkSecurityGroupId"),
            "recoveryPublicIpAddressId": obj.get("recoveryPublicIpAddressId"),
            "recoveryVMSubnetName": obj.get("recoveryVMSubnetName"),
            "replicaNicStaticIPAddress": obj.get("replicaNicStaticIPAddress"),
            "selectionType": obj.get("selectionType"),
            "tfoIPConfigs": [IPConfig.from_dict(_item) for _item in obj["tfoIPConfigs"]] if obj.get("tfoIPConfigs") is not None else None,
            "tfoNetworkSecurityGroupId": obj.get("tfoNetworkSecurityGroupId"),
            "tfoVMSubnetName": obj.get("tfoVMSubnetName")
        })
        return _obj



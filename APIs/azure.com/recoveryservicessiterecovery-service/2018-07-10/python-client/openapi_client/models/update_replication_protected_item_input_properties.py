# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_replication_protected_item_provider_input import UpdateReplicationProtectedItemProviderInput
from openapi_client.models.vm_nic_input_details import VMNicInputDetails
from typing import Optional, Set
from typing_extensions import Self

class UpdateReplicationProtectedItemInputProperties(BaseModel):
    """
    Update protected item input properties.
    """ # noqa: E501
    enable_rdp_on_target_option: Optional[StrictStr] = Field(default=None, description="The selected option to enable RDP\\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.", alias="enableRdpOnTargetOption")
    license_type: Optional[StrictStr] = Field(default=None, description="License type.", alias="licenseType")
    provider_specific_details: Optional[UpdateReplicationProtectedItemProviderInput] = Field(default=None, alias="providerSpecificDetails")
    recovery_availability_set_id: Optional[StrictStr] = Field(default=None, description="The target availability set id.", alias="recoveryAvailabilitySetId")
    recovery_azure_vm_name: Optional[StrictStr] = Field(default=None, description="Target azure VM name given by the user.", alias="recoveryAzureVMName")
    recovery_azure_vm_size: Optional[StrictStr] = Field(default=None, description="Target Azure Vm size.", alias="recoveryAzureVMSize")
    selected_recovery_azure_network_id: Optional[StrictStr] = Field(default=None, description="Target Azure Network Id.", alias="selectedRecoveryAzureNetworkId")
    selected_source_nic_id: Optional[StrictStr] = Field(default=None, description="The selected source nic Id which will be used as the primary nic during failover.", alias="selectedSourceNicId")
    selected_tfo_azure_network_id: Optional[StrictStr] = Field(default=None, description="The Azure Network Id for test failover.", alias="selectedTfoAzureNetworkId")
    vm_nics: Optional[List[VMNicInputDetails]] = Field(default=None, description="The list of vm nic details.", alias="vmNics")
    __properties: ClassVar[List[str]] = ["enableRdpOnTargetOption", "licenseType", "providerSpecificDetails", "recoveryAvailabilitySetId", "recoveryAzureVMName", "recoveryAzureVMSize", "selectedRecoveryAzureNetworkId", "selectedSourceNicId", "selectedTfoAzureNetworkId", "vmNics"]

    @field_validator('license_type')
    def license_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSpecified', 'NoLicenseType', 'WindowsServer']):
            raise ValueError("must be one of enum values ('NotSpecified', 'NoLicenseType', 'WindowsServer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateReplicationProtectedItemInputProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provider_specific_details
        if self.provider_specific_details:
            _dict['providerSpecificDetails'] = self.provider_specific_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vm_nics (list)
        _items = []
        if self.vm_nics:
            for _item_vm_nics in self.vm_nics:
                if _item_vm_nics:
                    _items.append(_item_vm_nics.to_dict())
            _dict['vmNics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateReplicationProtectedItemInputProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableRdpOnTargetOption": obj.get("enableRdpOnTargetOption"),
            "licenseType": obj.get("licenseType"),
            "providerSpecificDetails": UpdateReplicationProtectedItemProviderInput.from_dict(obj["providerSpecificDetails"]) if obj.get("providerSpecificDetails") is not None else None,
            "recoveryAvailabilitySetId": obj.get("recoveryAvailabilitySetId"),
            "recoveryAzureVMName": obj.get("recoveryAzureVMName"),
            "recoveryAzureVMSize": obj.get("recoveryAzureVMSize"),
            "selectedRecoveryAzureNetworkId": obj.get("selectedRecoveryAzureNetworkId"),
            "selectedSourceNicId": obj.get("selectedSourceNicId"),
            "selectedTfoAzureNetworkId": obj.get("selectedTfoAzureNetworkId"),
            "vmNics": [VMNicInputDetails.from_dict(_item) for _item in obj["vmNics"]] if obj.get("vmNics") is not None else None
        })
        return _obj



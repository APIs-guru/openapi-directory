# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.current_scenario_details import CurrentScenarioDetails
from openapi_client.models.health_error import HealthError
from openapi_client.models.replication_provider_specific_settings import ReplicationProviderSpecificSettings
from typing import Optional, Set
from typing_extensions import Self

class ReplicationProtectedItemProperties(BaseModel):
    """
    Replication protected item custom data details.
    """ # noqa: E501
    active_location: Optional[StrictStr] = Field(default=None, description="The Current active location of the PE.", alias="activeLocation")
    allowed_operations: Optional[List[StrictStr]] = Field(default=None, description="The allowed operations on the Replication protected item.", alias="allowedOperations")
    current_scenario: Optional[CurrentScenarioDetails] = Field(default=None, alias="currentScenario")
    failover_health: Optional[StrictStr] = Field(default=None, description="The consolidated failover health for the VM.", alias="failoverHealth")
    failover_recovery_point_id: Optional[StrictStr] = Field(default=None, description="The recovery point ARM Id to which the Vm was failed over.", alias="failoverRecoveryPointId")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The name.", alias="friendlyName")
    health_errors: Optional[List[HealthError]] = Field(default=None, description="List of health errors.", alias="healthErrors")
    last_successful_failover_time: Optional[datetime] = Field(default=None, description="The Last successful failover time.", alias="lastSuccessfulFailoverTime")
    last_successful_test_failover_time: Optional[datetime] = Field(default=None, description="The Last successful test failover time.", alias="lastSuccessfulTestFailoverTime")
    policy_friendly_name: Optional[StrictStr] = Field(default=None, description="The name of Policy governing this PE.", alias="policyFriendlyName")
    policy_id: Optional[StrictStr] = Field(default=None, description="The ID of Policy governing this PE.", alias="policyId")
    primary_fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="The friendly name of the primary fabric.", alias="primaryFabricFriendlyName")
    primary_fabric_provider: Optional[StrictStr] = Field(default=None, description="The fabric provider of the primary fabric.", alias="primaryFabricProvider")
    primary_protection_container_friendly_name: Optional[StrictStr] = Field(default=None, description="The name of primary protection container friendly name.", alias="primaryProtectionContainerFriendlyName")
    protectable_item_id: Optional[StrictStr] = Field(default=None, description="The protected item ARM Id.", alias="protectableItemId")
    protected_item_type: Optional[StrictStr] = Field(default=None, description="The type of protected item type.", alias="protectedItemType")
    protection_state: Optional[StrictStr] = Field(default=None, description="The protection status.", alias="protectionState")
    protection_state_description: Optional[StrictStr] = Field(default=None, description="The protection state description.", alias="protectionStateDescription")
    provider_specific_details: Optional[ReplicationProviderSpecificSettings] = Field(default=None, alias="providerSpecificDetails")
    recovery_container_id: Optional[StrictStr] = Field(default=None, description="The recovery container Id.", alias="recoveryContainerId")
    recovery_fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="The friendly name of recovery fabric.", alias="recoveryFabricFriendlyName")
    recovery_fabric_id: Optional[StrictStr] = Field(default=None, description="The Arm Id of recovery fabric.", alias="recoveryFabricId")
    recovery_protection_container_friendly_name: Optional[StrictStr] = Field(default=None, description="The name of recovery container friendly name.", alias="recoveryProtectionContainerFriendlyName")
    recovery_services_provider_id: Optional[StrictStr] = Field(default=None, description="The recovery provider ARM Id.", alias="recoveryServicesProviderId")
    replication_health: Optional[StrictStr] = Field(default=None, description="The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM's replication group into account. This is a string representation of the ProtectionHealth enumeration.", alias="replicationHealth")
    test_failover_state: Optional[StrictStr] = Field(default=None, description="The Test failover state.", alias="testFailoverState")
    test_failover_state_description: Optional[StrictStr] = Field(default=None, description="The Test failover state description.", alias="testFailoverStateDescription")
    __properties: ClassVar[List[str]] = ["activeLocation", "allowedOperations", "currentScenario", "failoverHealth", "failoverRecoveryPointId", "friendlyName", "healthErrors", "lastSuccessfulFailoverTime", "lastSuccessfulTestFailoverTime", "policyFriendlyName", "policyId", "primaryFabricFriendlyName", "primaryFabricProvider", "primaryProtectionContainerFriendlyName", "protectableItemId", "protectedItemType", "protectionState", "protectionStateDescription", "providerSpecificDetails", "recoveryContainerId", "recoveryFabricFriendlyName", "recoveryFabricId", "recoveryProtectionContainerFriendlyName", "recoveryServicesProviderId", "replicationHealth", "testFailoverState", "testFailoverStateDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationProtectedItemProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_scenario
        if self.current_scenario:
            _dict['currentScenario'] = self.current_scenario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in health_errors (list)
        _items = []
        if self.health_errors:
            for _item_health_errors in self.health_errors:
                if _item_health_errors:
                    _items.append(_item_health_errors.to_dict())
            _dict['healthErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of provider_specific_details
        if self.provider_specific_details:
            _dict['providerSpecificDetails'] = self.provider_specific_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationProtectedItemProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeLocation": obj.get("activeLocation"),
            "allowedOperations": obj.get("allowedOperations"),
            "currentScenario": CurrentScenarioDetails.from_dict(obj["currentScenario"]) if obj.get("currentScenario") is not None else None,
            "failoverHealth": obj.get("failoverHealth"),
            "failoverRecoveryPointId": obj.get("failoverRecoveryPointId"),
            "friendlyName": obj.get("friendlyName"),
            "healthErrors": [HealthError.from_dict(_item) for _item in obj["healthErrors"]] if obj.get("healthErrors") is not None else None,
            "lastSuccessfulFailoverTime": obj.get("lastSuccessfulFailoverTime"),
            "lastSuccessfulTestFailoverTime": obj.get("lastSuccessfulTestFailoverTime"),
            "policyFriendlyName": obj.get("policyFriendlyName"),
            "policyId": obj.get("policyId"),
            "primaryFabricFriendlyName": obj.get("primaryFabricFriendlyName"),
            "primaryFabricProvider": obj.get("primaryFabricProvider"),
            "primaryProtectionContainerFriendlyName": obj.get("primaryProtectionContainerFriendlyName"),
            "protectableItemId": obj.get("protectableItemId"),
            "protectedItemType": obj.get("protectedItemType"),
            "protectionState": obj.get("protectionState"),
            "protectionStateDescription": obj.get("protectionStateDescription"),
            "providerSpecificDetails": ReplicationProviderSpecificSettings.from_dict(obj["providerSpecificDetails"]) if obj.get("providerSpecificDetails") is not None else None,
            "recoveryContainerId": obj.get("recoveryContainerId"),
            "recoveryFabricFriendlyName": obj.get("recoveryFabricFriendlyName"),
            "recoveryFabricId": obj.get("recoveryFabricId"),
            "recoveryProtectionContainerFriendlyName": obj.get("recoveryProtectionContainerFriendlyName"),
            "recoveryServicesProviderId": obj.get("recoveryServicesProviderId"),
            "replicationHealth": obj.get("replicationHealth"),
            "testFailoverState": obj.get("testFailoverState"),
            "testFailoverStateDescription": obj.get("testFailoverStateDescription")
        })
        return _obj



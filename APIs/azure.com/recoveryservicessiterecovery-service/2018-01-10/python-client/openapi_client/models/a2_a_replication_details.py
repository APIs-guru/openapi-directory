# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.a2_a_protected_disk_details import A2AProtectedDiskDetails
from openapi_client.models.a2_a_protected_managed_disk_details import A2AProtectedManagedDiskDetails
from openapi_client.models.azure_to_azure_vm_synced_config_details import AzureToAzureVmSyncedConfigDetails
from openapi_client.models.replication_provider_specific_settings import ReplicationProviderSpecificSettings
from openapi_client.models.vm_nic_details import VMNicDetails
from typing import Optional, Set
from typing_extensions import Self

class A2AReplicationDetails(ReplicationProviderSpecificSettings):
    """
    A2A provider specific settings.
    """ # noqa: E501
    agent_version: Optional[StrictStr] = Field(default=None, description="The agent version.", alias="agentVersion")
    fabric_object_id: Optional[StrictStr] = Field(default=None, description="The fabric specific object Id of the virtual machine.", alias="fabricObjectId")
    is_replication_agent_update_required: Optional[StrictBool] = Field(default=None, description="A value indicating whether replication agent update is required.", alias="isReplicationAgentUpdateRequired")
    last_heartbeat: Optional[datetime] = Field(default=None, description="The last heartbeat received from the source server.", alias="lastHeartbeat")
    last_rpo_calculated_time: Optional[datetime] = Field(default=None, description="The time (in UTC) when the last RPO value was calculated by Protection Service.", alias="lastRpoCalculatedTime")
    lifecycle_id: Optional[StrictStr] = Field(default=None, description="An id associated with the PE that survives actions like switch protection which change the backing PE/CPE objects internally.The lifecycle id gets carried forward to have a link/continuity in being able to have an Id that denotes the \"same\" protected item even though other internal Ids/ARM Id might be changing.", alias="lifecycleId")
    management_id: Optional[StrictStr] = Field(default=None, description="The management Id.", alias="managementId")
    monitoring_job_type: Optional[StrictStr] = Field(default=None, description="The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.", alias="monitoringJobType")
    monitoring_percentage_completion: Optional[StrictInt] = Field(default=None, description="The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.", alias="monitoringPercentageCompletion")
    multi_vm_group_create_option: Optional[StrictStr] = Field(default=None, description="Whether Multi VM group is auto created or specified by user.", alias="multiVmGroupCreateOption")
    multi_vm_group_id: Optional[StrictStr] = Field(default=None, description="The multi vm group Id.", alias="multiVmGroupId")
    multi_vm_group_name: Optional[StrictStr] = Field(default=None, description="The multi vm group name.", alias="multiVmGroupName")
    os_type: Optional[StrictStr] = Field(default=None, description="The type of operating system.", alias="osType")
    primary_fabric_location: Optional[StrictStr] = Field(default=None, description="Primary fabric location.", alias="primaryFabricLocation")
    protected_disks: Optional[List[A2AProtectedDiskDetails]] = Field(default=None, description="The list of protected disks.", alias="protectedDisks")
    protected_managed_disks: Optional[List[A2AProtectedManagedDiskDetails]] = Field(default=None, description="The list of protected managed disks.", alias="protectedManagedDisks")
    recovery_availability_set: Optional[StrictStr] = Field(default=None, description="The recovery availability set.", alias="recoveryAvailabilitySet")
    recovery_azure_resource_group_id: Optional[StrictStr] = Field(default=None, description="The recovery resource group.", alias="recoveryAzureResourceGroupId")
    recovery_azure_vm_name: Optional[StrictStr] = Field(default=None, description="The name of recovery virtual machine.", alias="recoveryAzureVMName")
    recovery_azure_vm_size: Optional[StrictStr] = Field(default=None, description="The size of recovery virtual machine.", alias="recoveryAzureVMSize")
    recovery_boot_diag_storage_account_id: Optional[StrictStr] = Field(default=None, description="The recovery boot diagnostic storage account Arm Id.", alias="recoveryBootDiagStorageAccountId")
    recovery_cloud_service: Optional[StrictStr] = Field(default=None, description="The recovery cloud service.", alias="recoveryCloudService")
    recovery_fabric_location: Optional[StrictStr] = Field(default=None, description="The recovery fabric location.", alias="recoveryFabricLocation")
    recovery_fabric_object_id: Optional[StrictStr] = Field(default=None, description="The recovery fabric object Id.", alias="recoveryFabricObjectId")
    rpo_in_seconds: Optional[StrictInt] = Field(default=None, description="The last RPO value in seconds.", alias="rpoInSeconds")
    selected_recovery_azure_network_id: Optional[StrictStr] = Field(default=None, description="The recovery virtual network.", alias="selectedRecoveryAzureNetworkId")
    test_failover_recovery_fabric_object_id: Optional[StrictStr] = Field(default=None, description="The test failover fabric object Id.", alias="testFailoverRecoveryFabricObjectId")
    vm_nics: Optional[List[VMNicDetails]] = Field(default=None, description="The virtual machine nic details.", alias="vmNics")
    vm_protection_state: Optional[StrictStr] = Field(default=None, description="The protection state for the vm.", alias="vmProtectionState")
    vm_protection_state_description: Optional[StrictStr] = Field(default=None, description="The protection state description for the vm.", alias="vmProtectionStateDescription")
    vm_synced_config_details: Optional[AzureToAzureVmSyncedConfigDetails] = Field(default=None, alias="vmSyncedConfigDetails")
    __properties: ClassVar[List[str]] = ["instanceType"]

    @field_validator('multi_vm_group_create_option')
    def multi_vm_group_create_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AutoCreated', 'UserSpecified']):
            raise ValueError("must be one of enum values ('AutoCreated', 'UserSpecified')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of A2AReplicationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of A2AReplicationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instanceType": obj.get("instanceType")
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.current_job_details import CurrentJobDetails
from openapi_client.models.health_error import HealthError
from openapi_client.models.migration_provider_specific_settings import MigrationProviderSpecificSettings
from typing import Optional, Set
from typing_extensions import Self

class MigrationItemProperties(BaseModel):
    """
    Migration item properties.
    """ # noqa: E501
    allowed_operations: Optional[List[StrictStr]] = Field(default=None, description="The allowed operations on the migration item, based on the current migration state of the item.", alias="allowedOperations")
    current_job: Optional[CurrentJobDetails] = Field(default=None, alias="currentJob")
    event_correlation_id: Optional[StrictStr] = Field(default=None, description="The correlation Id for events associated with this migration item.", alias="eventCorrelationId")
    health: Optional[StrictStr] = Field(default=None, description="The consolidated health.")
    health_errors: Optional[List[HealthError]] = Field(default=None, description="The list of health errors.", alias="healthErrors")
    last_test_migration_status: Optional[StrictStr] = Field(default=None, description="The status of the last test migration.", alias="lastTestMigrationStatus")
    last_test_migration_time: Optional[datetime] = Field(default=None, description="The last test migration time.", alias="lastTestMigrationTime")
    machine_name: Optional[StrictStr] = Field(default=None, description="The on-premise virtual machine name.", alias="machineName")
    migration_state: Optional[StrictStr] = Field(default=None, description="The migration status.", alias="migrationState")
    migration_state_description: Optional[StrictStr] = Field(default=None, description="The migration state description.", alias="migrationStateDescription")
    policy_friendly_name: Optional[StrictStr] = Field(default=None, description="The name of policy governing this item.", alias="policyFriendlyName")
    policy_id: Optional[StrictStr] = Field(default=None, description="The ARM Id of policy governing this item.", alias="policyId")
    provider_specific_details: Optional[MigrationProviderSpecificSettings] = Field(default=None, alias="providerSpecificDetails")
    test_migrate_state: Optional[StrictStr] = Field(default=None, description="The test migrate state.", alias="testMigrateState")
    test_migrate_state_description: Optional[StrictStr] = Field(default=None, description="The test migrate state description.", alias="testMigrateStateDescription")
    __properties: ClassVar[List[str]] = ["allowedOperations", "currentJob", "eventCorrelationId", "health", "healthErrors", "lastTestMigrationStatus", "lastTestMigrationTime", "machineName", "migrationState", "migrationStateDescription", "policyFriendlyName", "policyId", "providerSpecificDetails", "testMigrateState", "testMigrateStateDescription"]

    @field_validator('allowed_operations')
    def allowed_operations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DisableMigration', 'TestMigrate', 'TestMigrateCleanup', 'Migrate', 'StartResync']):
                raise ValueError("each list item must be one of ('DisableMigration', 'TestMigrate', 'TestMigrateCleanup', 'Migrate', 'StartResync')")
        return value

    @field_validator('health')
    def health_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Normal', 'Warning', 'Critical']):
            raise ValueError("must be one of enum values ('None', 'Normal', 'Warning', 'Critical')")
        return value

    @field_validator('migration_state')
    def migration_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'EnableMigrationInProgress', 'EnableMigrationFailed', 'DisableMigrationInProgress', 'DisableMigrationFailed', 'InitialSeedingInProgress', 'InitialSeedingFailed', 'Replicating', 'MigrationInProgress', 'MigrationSucceeded', 'MigrationFailed']):
            raise ValueError("must be one of enum values ('None', 'EnableMigrationInProgress', 'EnableMigrationFailed', 'DisableMigrationInProgress', 'DisableMigrationFailed', 'InitialSeedingInProgress', 'InitialSeedingFailed', 'Replicating', 'MigrationInProgress', 'MigrationSucceeded', 'MigrationFailed')")
        return value

    @field_validator('test_migrate_state')
    def test_migrate_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'TestMigrationInProgress', 'TestMigrationSucceeded', 'TestMigrationFailed', 'TestMigrationCleanupInProgress']):
            raise ValueError("must be one of enum values ('None', 'TestMigrationInProgress', 'TestMigrationSucceeded', 'TestMigrationFailed', 'TestMigrationCleanupInProgress')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrationItemProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "allowed_operations",
            "event_correlation_id",
            "health",
            "health_errors",
            "last_test_migration_status",
            "last_test_migration_time",
            "machine_name",
            "migration_state",
            "migration_state_description",
            "policy_friendly_name",
            "policy_id",
            "test_migrate_state",
            "test_migrate_state_description",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_job
        if self.current_job:
            _dict['currentJob'] = self.current_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in health_errors (list)
        _items = []
        if self.health_errors:
            for _item_health_errors in self.health_errors:
                if _item_health_errors:
                    _items.append(_item_health_errors.to_dict())
            _dict['healthErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of provider_specific_details
        if self.provider_specific_details:
            _dict['providerSpecificDetails'] = self.provider_specific_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrationItemProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedOperations": obj.get("allowedOperations"),
            "currentJob": CurrentJobDetails.from_dict(obj["currentJob"]) if obj.get("currentJob") is not None else None,
            "eventCorrelationId": obj.get("eventCorrelationId"),
            "health": obj.get("health"),
            "healthErrors": [HealthError.from_dict(_item) for _item in obj["healthErrors"]] if obj.get("healthErrors") is not None else None,
            "lastTestMigrationStatus": obj.get("lastTestMigrationStatus"),
            "lastTestMigrationTime": obj.get("lastTestMigrationTime"),
            "machineName": obj.get("machineName"),
            "migrationState": obj.get("migrationState"),
            "migrationStateDescription": obj.get("migrationStateDescription"),
            "policyFriendlyName": obj.get("policyFriendlyName"),
            "policyId": obj.get("policyId"),
            "providerSpecificDetails": MigrationProviderSpecificSettings.from_dict(obj["providerSpecificDetails"]) if obj.get("providerSpecificDetails") is not None else None,
            "testMigrateState": obj.get("testMigrateState"),
            "testMigrateStateDescription": obj.get("testMigrateStateDescription")
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.fabric_specific_details import FabricSpecificDetails
from openapi_client.models.master_target_server import MasterTargetServer
from openapi_client.models.process_server import ProcessServer
from openapi_client.models.run_as_account import RunAsAccount
from openapi_client.models.version_details import VersionDetails
from typing import Optional, Set
from typing_extensions import Self

class VMwareDetails(FabricSpecificDetails):
    """
    Store the fabric details specific to the VMware fabric.
    """ # noqa: E501
    agent_count: Optional[StrictStr] = Field(default=None, description="The number of source and target servers configured to talk to this CS.", alias="agentCount")
    agent_expiry_date: Optional[datetime] = Field(default=None, description="Agent expiry date.", alias="agentExpiryDate")
    agent_version: Optional[StrictStr] = Field(default=None, description="The agent Version.", alias="agentVersion")
    agent_version_details: Optional[VersionDetails] = Field(default=None, alias="agentVersionDetails")
    available_memory_in_bytes: Optional[StrictInt] = Field(default=None, description="The available memory.", alias="availableMemoryInBytes")
    available_space_in_bytes: Optional[StrictInt] = Field(default=None, description="The available space.", alias="availableSpaceInBytes")
    cpu_load: Optional[StrictStr] = Field(default=None, description="The percentage of the CPU load.", alias="cpuLoad")
    cpu_load_status: Optional[StrictStr] = Field(default=None, description="The CPU load status.", alias="cpuLoadStatus")
    cs_service_status: Optional[StrictStr] = Field(default=None, description="The CS service status.", alias="csServiceStatus")
    database_server_load: Optional[StrictStr] = Field(default=None, description="The database server load.", alias="databaseServerLoad")
    database_server_load_status: Optional[StrictStr] = Field(default=None, description="The database server load status.", alias="databaseServerLoadStatus")
    host_name: Optional[StrictStr] = Field(default=None, description="The host name.", alias="hostName")
    ip_address: Optional[StrictStr] = Field(default=None, description="The IP address.", alias="ipAddress")
    last_heartbeat: Optional[datetime] = Field(default=None, description="The last heartbeat received from CS server.", alias="lastHeartbeat")
    master_target_servers: Optional[List[MasterTargetServer]] = Field(default=None, description="The list of Master Target servers associated with the fabric.", alias="masterTargetServers")
    memory_usage_status: Optional[StrictStr] = Field(default=None, description="The memory usage status.", alias="memoryUsageStatus")
    process_server_count: Optional[StrictStr] = Field(default=None, description="The number of process servers.", alias="processServerCount")
    process_servers: Optional[List[ProcessServer]] = Field(default=None, description="The list of Process Servers associated with the fabric.", alias="processServers")
    protected_servers: Optional[StrictStr] = Field(default=None, description="The number of protected servers.", alias="protectedServers")
    ps_template_version: Optional[StrictStr] = Field(default=None, description="PS template version.", alias="psTemplateVersion")
    replication_pair_count: Optional[StrictStr] = Field(default=None, description="The number of replication pairs configured in this CS.", alias="replicationPairCount")
    run_as_accounts: Optional[List[RunAsAccount]] = Field(default=None, description="The list of run as accounts created on the server.", alias="runAsAccounts")
    space_usage_status: Optional[StrictStr] = Field(default=None, description="The space usage status.", alias="spaceUsageStatus")
    ssl_cert_expiry_date: Optional[datetime] = Field(default=None, description="CS SSL cert expiry date.", alias="sslCertExpiryDate")
    ssl_cert_expiry_remaining_days: Optional[StrictInt] = Field(default=None, description="CS SSL cert expiry date.", alias="sslCertExpiryRemainingDays")
    system_load: Optional[StrictStr] = Field(default=None, description="The percentage of the system load.", alias="systemLoad")
    system_load_status: Optional[StrictStr] = Field(default=None, description="The system load status.", alias="systemLoadStatus")
    total_memory_in_bytes: Optional[StrictInt] = Field(default=None, description="The total memory.", alias="totalMemoryInBytes")
    total_space_in_bytes: Optional[StrictInt] = Field(default=None, description="The total space.", alias="totalSpaceInBytes")
    version_status: Optional[StrictStr] = Field(default=None, description="Version status", alias="versionStatus")
    web_load: Optional[StrictStr] = Field(default=None, description="The web load.", alias="webLoad")
    web_load_status: Optional[StrictStr] = Field(default=None, description="The web load status.", alias="webLoadStatus")
    __properties: ClassVar[List[str]] = ["instanceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VMwareDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VMwareDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instanceType": obj.get("instanceType")
        })
        return _obj



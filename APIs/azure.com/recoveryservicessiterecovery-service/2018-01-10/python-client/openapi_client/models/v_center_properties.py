# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_error import HealthError
from typing import Optional, Set
from typing_extensions import Self

class VCenterProperties(BaseModel):
    """
    vCenter properties.
    """ # noqa: E501
    discovery_status: Optional[StrictStr] = Field(default=None, description="The VCenter discovery status.", alias="discoveryStatus")
    fabric_arm_resource_name: Optional[StrictStr] = Field(default=None, description="The ARM resource name of the fabric containing this VCenter.", alias="fabricArmResourceName")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of the vCenter.", alias="friendlyName")
    health_errors: Optional[List[HealthError]] = Field(default=None, description="The health errors for this VCenter.", alias="healthErrors")
    infrastructure_id: Optional[StrictStr] = Field(default=None, description="The infrastructure Id of vCenter.", alias="infrastructureId")
    internal_id: Optional[StrictStr] = Field(default=None, description="VCenter internal ID.", alias="internalId")
    ip_address: Optional[StrictStr] = Field(default=None, description="The IP address of the vCenter.", alias="ipAddress")
    last_heartbeat: Optional[datetime] = Field(default=None, description="The time when the last heartbeat was received by vCenter.", alias="lastHeartbeat")
    port: Optional[StrictStr] = Field(default=None, description="The port number for discovery.")
    process_server_id: Optional[StrictStr] = Field(default=None, description="The process server Id.", alias="processServerId")
    run_as_account_id: Optional[StrictStr] = Field(default=None, description="The account Id which has privileges to discover the vCenter.", alias="runAsAccountId")
    __properties: ClassVar[List[str]] = ["discoveryStatus", "fabricArmResourceName", "friendlyName", "healthErrors", "infrastructureId", "internalId", "ipAddress", "lastHeartbeat", "port", "processServerId", "runAsAccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VCenterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in health_errors (list)
        _items = []
        if self.health_errors:
            for _item_health_errors in self.health_errors:
                if _item_health_errors:
                    _items.append(_item_health_errors.to_dict())
            _dict['healthErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VCenterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discoveryStatus": obj.get("discoveryStatus"),
            "fabricArmResourceName": obj.get("fabricArmResourceName"),
            "friendlyName": obj.get("friendlyName"),
            "healthErrors": [HealthError.from_dict(_item) for _item in obj["healthErrors"]] if obj.get("healthErrors") is not None else None,
            "infrastructureId": obj.get("infrastructureId"),
            "internalId": obj.get("internalId"),
            "ipAddress": obj.get("ipAddress"),
            "lastHeartbeat": obj.get("lastHeartbeat"),
            "port": obj.get("port"),
            "processServerId": obj.get("processServerId"),
            "runAsAccountId": obj.get("runAsAccountId")
        })
        return _obj



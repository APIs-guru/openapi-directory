# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job import Job

class TestJob(unittest.TestCase):
    """Job unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Job:
        """Test Job
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Job`
        """
        model = Job()
        if include_optional:
            return Job(
                end_time = '',
                error = openapi_client.models.arm_exception.ARMException(
                    code = '', 
                    details = [
                        openapi_client.models.arm_exception_details.ARMExceptionDetails(
                            activity_id = '', 
                            client_request_id = '', 
                            code = '', 
                            message = '', 
                            possible_causes = '', 
                            recommended_action = '', 
                            target = '', )
                        ], 
                    innererror = openapi_client.models.arm_inner_error.ARMInnerError(
                        cloud_id = '', 
                        container_id = '', 
                        fabric_id = '', 
                        h_v_cluster_id = '', 
                        h_v_host_id = '', 
                        live_id = '', 
                        method_status = openapi_client.models.method_call_status.MethodCallStatus(
                            contains_generic_parameters = '', 
                            is_virtual = '', 
                            parameters = [
                                ''
                                ], ), 
                        network_id = '', 
                        resource_id = '', 
                        resource_name = '', 
                        serialized_srs_log_context = '', 
                        source = '', 
                        subscription_id = '', 
                        trace = '', 
                        vm_id = '', ), 
                    message = '', 
                    target = '', ),
                properties = openapi_client.models.job_properties.JobProperties(
                    activity_id = '', 
                    allowed_actions = [
                        ''
                        ], 
                    custom_details = openapi_client.models.job_details.JobDetails(
                        affected_object_details = {
                            'key' : ''
                            }, ), 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    errors = [
                        openapi_client.models.job_error_details.JobErrorDetails(
                            creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            error_level = '', 
                            provider_error_details = openapi_client.models.provider_error.ProviderError(
                                error_code = 56, 
                                error_id = '', 
                                error_message = '', 
                                possible_causes = '', 
                                recommended_action = '', ), 
                            service_error_details = openapi_client.models.service_error.ServiceError(
                                activity_id = '', 
                                code = '', 
                                message = '', 
                                possible_causes = '', 
                                recommended_action = '', ), 
                            task_id = '', )
                        ], 
                    friendly_name = '', 
                    scenario_name = '', 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    state = '', 
                    state_description = '', 
                    target_instance_type = '', 
                    target_object_id = '', 
                    target_object_name = '', 
                    tasks = [
                        openapi_client.models.asr_task.ASRTask(
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            friendly_name = '', 
                            group_task_custom_details = openapi_client.models.group_task_details.GroupTaskDetails(
                                child_tasks = [
                                    openapi_client.models.asr_task.ASRTask(
                                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        friendly_name = '', 
                                        name = '', 
                                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        state = '', 
                                        state_description = '', 
                                        task_id = '', 
                                        task_type = '', )
                                    ], ), 
                            name = '', 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = '', 
                            state_description = '', 
                            task_id = '', 
                            task_type = '', )
                        ], ),
                start_time = '',
                status = '',
                id = '',
                location = '',
                name = '',
                type = ''
            )
        else:
            return Job(
        )
        """

    def testJob(self):
        """Test Job"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

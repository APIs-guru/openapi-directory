# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HealthError(BaseModel):
    """
    Health Error
    """ # noqa: E501
    child_errors: Optional[List[HealthError]] = Field(default=None, description="The child health errors.", alias="childErrors")
    creation_time_utc: Optional[datetime] = Field(default=None, description="Error creation time (UTC)", alias="creationTimeUtc")
    entity_id: Optional[StrictStr] = Field(default=None, description="ID of the entity.", alias="entityId")
    error_code: Optional[StrictStr] = Field(default=None, description="Error code.", alias="errorCode")
    error_level: Optional[StrictStr] = Field(default=None, description="Level of error.", alias="errorLevel")
    error_message: Optional[StrictStr] = Field(default=None, description="Error message.", alias="errorMessage")
    error_source: Optional[StrictStr] = Field(default=None, description="Source of error.", alias="errorSource")
    error_type: Optional[StrictStr] = Field(default=None, description="Type of error.", alias="errorType")
    possible_causes: Optional[StrictStr] = Field(default=None, description="Possible causes of error.", alias="possibleCauses")
    recommended_action: Optional[StrictStr] = Field(default=None, description="Recommended action to resolve error.", alias="recommendedAction")
    recovery_provider_error_message: Optional[StrictStr] = Field(default=None, description="DRA error message.", alias="recoveryProviderErrorMessage")
    __properties: ClassVar[List[str]] = ["childErrors", "creationTimeUtc", "entityId", "errorCode", "errorLevel", "errorMessage", "errorSource", "errorType", "possibleCauses", "recommendedAction", "recoveryProviderErrorMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_errors (list)
        _items = []
        if self.child_errors:
            for _item_child_errors in self.child_errors:
                if _item_child_errors:
                    _items.append(_item_child_errors.to_dict())
            _dict['childErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childErrors": [HealthError.from_dict(_item) for _item in obj["childErrors"]] if obj.get("childErrors") is not None else None,
            "creationTimeUtc": obj.get("creationTimeUtc"),
            "entityId": obj.get("entityId"),
            "errorCode": obj.get("errorCode"),
            "errorLevel": obj.get("errorLevel"),
            "errorMessage": obj.get("errorMessage"),
            "errorSource": obj.get("errorSource"),
            "errorType": obj.get("errorType"),
            "possibleCauses": obj.get("possibleCauses"),
            "recommendedAction": obj.get("recommendedAction"),
            "recoveryProviderErrorMessage": obj.get("recoveryProviderErrorMessage")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
HealthError.model_rebuild(raise_errors=False)


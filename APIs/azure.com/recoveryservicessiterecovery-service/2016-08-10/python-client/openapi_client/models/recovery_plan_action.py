# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from openapi_client.models.recovery_plan_action_details import RecoveryPlanActionDetails
from typing import Optional, Set
from typing_extensions import Self

class RecoveryPlanAction(BaseModel):
    """
    Recovery plan action details.
    """ # noqa: E501
    action_name: StrictStr = Field(description="The action name.", alias="actionName")
    custom_details: RecoveryPlanActionDetails = Field(alias="customDetails")
    failover_directions: List[StrictStr] = Field(description="The list of failover directions.", alias="failoverDirections")
    failover_types: List[StrictStr] = Field(description="The list of failover types.", alias="failoverTypes")
    __properties: ClassVar[List[str]] = ["actionName", "customDetails", "failoverDirections", "failoverTypes"]

    @field_validator('failover_directions')
    def failover_directions_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['PrimaryToRecovery', 'RecoveryToPrimary']):
                raise ValueError("each list item must be one of ('PrimaryToRecovery', 'RecoveryToPrimary')")
        return value

    @field_validator('failover_types')
    def failover_types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['ReverseReplicate', 'Commit', 'PlannedFailover', 'UnplannedFailover', 'DisableProtection', 'TestFailover', 'TestFailoverCleanup', 'Failback', 'FinalizeFailback', 'ChangePit', 'RepairReplication', 'SwitchProtection', 'CompleteMigration']):
                raise ValueError("each list item must be one of ('ReverseReplicate', 'Commit', 'PlannedFailover', 'UnplannedFailover', 'DisableProtection', 'TestFailover', 'TestFailoverCleanup', 'Failback', 'FinalizeFailback', 'ChangePit', 'RepairReplication', 'SwitchProtection', 'CompleteMigration')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoveryPlanAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_details
        if self.custom_details:
            _dict['customDetails'] = self.custom_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoveryPlanAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionName": obj.get("actionName"),
            "customDetails": RecoveryPlanActionDetails.from_dict(obj["customDetails"]) if obj.get("customDetails") is not None else None,
            "failoverDirections": obj.get("failoverDirections"),
            "failoverTypes": obj.get("failoverTypes")
        })
        return _obj



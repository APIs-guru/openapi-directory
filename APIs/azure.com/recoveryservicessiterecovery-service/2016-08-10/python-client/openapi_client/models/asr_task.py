# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_error_details import JobErrorDetails
from openapi_client.models.task_type_details import TaskTypeDetails
from typing import Optional, Set
from typing_extensions import Self

class ASRTask(BaseModel):
    """
    Task of the Job.
    """ # noqa: E501
    allowed_actions: Optional[List[StrictStr]] = Field(default=None, description="The state/actions applicable on this task.", alias="allowedActions")
    custom_details: Optional[TaskTypeDetails] = Field(default=None, alias="customDetails")
    end_time: Optional[datetime] = Field(default=None, description="The end time.", alias="endTime")
    errors: Optional[List[JobErrorDetails]] = Field(default=None, description="The task error details.")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The name.", alias="friendlyName")
    group_task_custom_details: Optional[GroupTaskDetails] = Field(default=None, alias="groupTaskCustomDetails")
    name: Optional[StrictStr] = Field(default=None, description="The unique Task name.")
    start_time: Optional[datetime] = Field(default=None, description="The start time.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="The State. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled, Suspended or Other.")
    state_description: Optional[StrictStr] = Field(default=None, description="The description of the task state. For example - For Succeeded state, description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.", alias="stateDescription")
    task_id: Optional[StrictStr] = Field(default=None, description="The Id.", alias="taskId")
    task_type: Optional[StrictStr] = Field(default=None, description="The type of task. Details in CustomDetails property depend on this type.", alias="taskType")
    __properties: ClassVar[List[str]] = ["allowedActions", "customDetails", "endTime", "errors", "friendlyName", "groupTaskCustomDetails", "name", "startTime", "state", "stateDescription", "taskId", "taskType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ASRTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_details
        if self.custom_details:
            _dict['customDetails'] = self.custom_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of group_task_custom_details
        if self.group_task_custom_details:
            _dict['groupTaskCustomDetails'] = self.group_task_custom_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ASRTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedActions": obj.get("allowedActions"),
            "customDetails": TaskTypeDetails.from_dict(obj["customDetails"]) if obj.get("customDetails") is not None else None,
            "endTime": obj.get("endTime"),
            "errors": [JobErrorDetails.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "friendlyName": obj.get("friendlyName"),
            "groupTaskCustomDetails": GroupTaskDetails.from_dict(obj["groupTaskCustomDetails"]) if obj.get("groupTaskCustomDetails") is not None else None,
            "name": obj.get("name"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "stateDescription": obj.get("stateDescription"),
            "taskId": obj.get("taskId"),
            "taskType": obj.get("taskType")
        })
        return _obj

from openapi_client.models.group_task_details import GroupTaskDetails
# TODO: Rewrite to not use raise_errors
ASRTask.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class A2AProtectedManagedDiskDetails(BaseModel):
    """
    A2A protected managed disk details.
    """ # noqa: E501
    data_pending_at_source_agent_in_mb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The data pending at source virtual machine in MB.", alias="dataPendingAtSourceAgentInMB")
    data_pending_in_staging_storage_account_in_mb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The data pending for replication in MB at staging account.", alias="dataPendingInStagingStorageAccountInMB")
    disk_capacity_in_bytes: Optional[StrictInt] = Field(default=None, description="The disk capacity in bytes.", alias="diskCapacityInBytes")
    disk_id: Optional[StrictStr] = Field(default=None, description="The managed disk Arm id.", alias="diskId")
    disk_name: Optional[StrictStr] = Field(default=None, description="The disk name.", alias="diskName")
    disk_type: Optional[StrictStr] = Field(default=None, description="The type of disk.", alias="diskType")
    monitoring_job_type: Optional[StrictStr] = Field(default=None, description="The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.", alias="monitoringJobType")
    monitoring_percentage_completion: Optional[StrictInt] = Field(default=None, description="The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.", alias="monitoringPercentageCompletion")
    primary_staging_azure_storage_account_id: Optional[StrictStr] = Field(default=None, description="The primary staging storage account.", alias="primaryStagingAzureStorageAccountId")
    recovery_azure_resource_group_id: Optional[StrictStr] = Field(default=None, description="The recovery disk resource group Arm Id.", alias="recoveryAzureResourceGroupId")
    recovery_disk_id: Optional[StrictStr] = Field(default=None, description="Recovery disk Arm Id.", alias="recoveryDiskId")
    resync_required: Optional[StrictBool] = Field(default=None, description="A value indicating whether resync is required for this disk.", alias="resyncRequired")
    __properties: ClassVar[List[str]] = ["dataPendingAtSourceAgentInMB", "dataPendingInStagingStorageAccountInMB", "diskCapacityInBytes", "diskId", "diskName", "diskType", "monitoringJobType", "monitoringPercentageCompletion", "primaryStagingAzureStorageAccountId", "recoveryAzureResourceGroupId", "recoveryDiskId", "resyncRequired"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of A2AProtectedManagedDiskDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of A2AProtectedManagedDiskDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataPendingAtSourceAgentInMB": obj.get("dataPendingAtSourceAgentInMB"),
            "dataPendingInStagingStorageAccountInMB": obj.get("dataPendingInStagingStorageAccountInMB"),
            "diskCapacityInBytes": obj.get("diskCapacityInBytes"),
            "diskId": obj.get("diskId"),
            "diskName": obj.get("diskName"),
            "diskType": obj.get("diskType"),
            "monitoringJobType": obj.get("monitoringJobType"),
            "monitoringPercentageCompletion": obj.get("monitoringPercentageCompletion"),
            "primaryStagingAzureStorageAccountId": obj.get("primaryStagingAzureStorageAccountId"),
            "recoveryAzureResourceGroupId": obj.get("recoveryAzureResourceGroupId"),
            "recoveryDiskId": obj.get("recoveryDiskId"),
            "resyncRequired": obj.get("resyncRequired")
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_store import DataStore
from openapi_client.models.health_error import HealthError
from openapi_client.models.retention_volume import RetentionVolume
from typing import Optional, Set
from typing_extensions import Self

class MasterTargetServer(BaseModel):
    """
    Details of a Master Target Server.
    """ # noqa: E501
    agent_version: Optional[StrictStr] = Field(default=None, description="The version of the scout component on the server.", alias="agentVersion")
    data_stores: Optional[List[DataStore]] = Field(default=None, description="The list of data stores in the fabric.", alias="dataStores")
    disk_count: Optional[StrictInt] = Field(default=None, description="Disk count of the master target.", alias="diskCount")
    id: Optional[StrictStr] = Field(default=None, description="The server Id.")
    ip_address: Optional[StrictStr] = Field(default=None, description="The IP address of the server.", alias="ipAddress")
    last_heartbeat: Optional[datetime] = Field(default=None, description="The last heartbeat received from the server.", alias="lastHeartbeat")
    name: Optional[StrictStr] = Field(default=None, description="The server name.")
    os_type: Optional[StrictStr] = Field(default=None, description="The OS type of the server.", alias="osType")
    os_version: Optional[StrictStr] = Field(default=None, description="OS Version of the master target.", alias="osVersion")
    retention_volumes: Optional[List[RetentionVolume]] = Field(default=None, description="The retention volumes of Master target Server.", alias="retentionVolumes")
    validation_errors: Optional[List[HealthError]] = Field(default=None, description="Validation errors.", alias="validationErrors")
    version_status: Optional[StrictStr] = Field(default=None, description="Version status", alias="versionStatus")
    __properties: ClassVar[List[str]] = ["agentVersion", "dataStores", "diskCount", "id", "ipAddress", "lastHeartbeat", "name", "osType", "osVersion", "retentionVolumes", "validationErrors", "versionStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MasterTargetServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_stores (list)
        _items = []
        if self.data_stores:
            for _item_data_stores in self.data_stores:
                if _item_data_stores:
                    _items.append(_item_data_stores.to_dict())
            _dict['dataStores'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in retention_volumes (list)
        _items = []
        if self.retention_volumes:
            for _item_retention_volumes in self.retention_volumes:
                if _item_retention_volumes:
                    _items.append(_item_retention_volumes.to_dict())
            _dict['retentionVolumes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in validation_errors (list)
        _items = []
        if self.validation_errors:
            for _item_validation_errors in self.validation_errors:
                if _item_validation_errors:
                    _items.append(_item_validation_errors.to_dict())
            _dict['validationErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MasterTargetServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentVersion": obj.get("agentVersion"),
            "dataStores": [DataStore.from_dict(_item) for _item in obj["dataStores"]] if obj.get("dataStores") is not None else None,
            "diskCount": obj.get("diskCount"),
            "id": obj.get("id"),
            "ipAddress": obj.get("ipAddress"),
            "lastHeartbeat": obj.get("lastHeartbeat"),
            "name": obj.get("name"),
            "osType": obj.get("osType"),
            "osVersion": obj.get("osVersion"),
            "retentionVolumes": [RetentionVolume.from_dict(_item) for _item in obj["retentionVolumes"]] if obj.get("retentionVolumes") is not None else None,
            "validationErrors": [HealthError.from_dict(_item) for _item in obj["validationErrors"]] if obj.get("validationErrors") is not None else None,
            "versionStatus": obj.get("versionStatus")
        })
        return _obj



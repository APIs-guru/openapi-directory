# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.method_call_status import MethodCallStatus
from typing import Optional, Set
from typing_extensions import Self

class ARMInnerError(BaseModel):
    """
    ARM internal error class for providing additional debug data.
    """ # noqa: E501
    cloud_id: Optional[StrictStr] = Field(default=None, description="Gets cloud Id in exception.", alias="cloudId")
    container_id: Optional[StrictStr] = Field(default=None, description="Gets container Id of the caller.", alias="containerId")
    fabric_id: Optional[StrictStr] = Field(default=None, description="Gets Fabric Id.", alias="fabricId")
    h_v_cluster_id: Optional[StrictStr] = Field(default=None, description="Gets hyperV cluster Id.", alias="hVClusterId")
    h_v_host_id: Optional[StrictStr] = Field(default=None, description="Gets hyperV host ID.", alias="hVHostId")
    live_id: Optional[StrictStr] = Field(default=None, description="Gets Live Id of the caller.", alias="liveId")
    method_status: Optional[MethodCallStatus] = Field(default=None, alias="methodStatus")
    network_id: Optional[StrictStr] = Field(default=None, description="Gets network Id.", alias="networkId")
    resource_id: Optional[StrictStr] = Field(default=None, description="Gets resource id used in the call.", alias="resourceId")
    resource_name: Optional[StrictStr] = Field(default=None, description="Gets caller resource name.", alias="resourceName")
    serialized_srs_log_context: Optional[StrictStr] = Field(default=None, description="Gets serialized SRS log context.", alias="serializedSRSLogContext")
    source: Optional[StrictStr] = Field(default=None, description="Gets exception source.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Gets subscription Id.", alias="subscriptionId")
    trace: Optional[StrictStr] = Field(default=None, description="Gets complete stack trace of the exception.")
    vm_id: Optional[StrictStr] = Field(default=None, description="Gets Vm Id.", alias="vmId")
    __properties: ClassVar[List[str]] = ["cloudId", "containerId", "fabricId", "hVClusterId", "hVHostId", "liveId", "methodStatus", "networkId", "resourceId", "resourceName", "serializedSRSLogContext", "source", "subscriptionId", "trace", "vmId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ARMInnerError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of method_status
        if self.method_status:
            _dict['methodStatus'] = self.method_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ARMInnerError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudId": obj.get("cloudId"),
            "containerId": obj.get("containerId"),
            "fabricId": obj.get("fabricId"),
            "hVClusterId": obj.get("hVClusterId"),
            "hVHostId": obj.get("hVHostId"),
            "liveId": obj.get("liveId"),
            "methodStatus": MethodCallStatus.from_dict(obj["methodStatus"]) if obj.get("methodStatus") is not None else None,
            "networkId": obj.get("networkId"),
            "resourceId": obj.get("resourceId"),
            "resourceName": obj.get("resourceName"),
            "serializedSRSLogContext": obj.get("serializedSRSLogContext"),
            "source": obj.get("source"),
            "subscriptionId": obj.get("subscriptionId"),
            "trace": obj.get("trace"),
            "vmId": obj.get("vmId")
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.current_scenario_details import CurrentScenarioDetails
from openapi_client.models.recovery_plan_group import RecoveryPlanGroup
from typing import Optional, Set
from typing_extensions import Self

class RecoveryPlanProperties(BaseModel):
    """
    Recovery plan custom details.
    """ # noqa: E501
    allowed_operations: Optional[List[StrictStr]] = Field(default=None, description="The list of allowed operations.", alias="allowedOperations")
    current_scenario: Optional[CurrentScenarioDetails] = Field(default=None, alias="currentScenario")
    current_scenario_status: Optional[StrictStr] = Field(default=None, description="The recovery plan status.", alias="currentScenarioStatus")
    current_scenario_status_description: Optional[StrictStr] = Field(default=None, description="The recovery plan status description.", alias="currentScenarioStatusDescription")
    failover_deployment_model: Optional[StrictStr] = Field(default=None, description="The failover deployment model.", alias="failoverDeploymentModel")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The friendly name.", alias="friendlyName")
    groups: Optional[List[RecoveryPlanGroup]] = Field(default=None, description="The recovery plan groups.")
    last_planned_failover_time: Optional[datetime] = Field(default=None, description="The start time of the last planned failover.", alias="lastPlannedFailoverTime")
    last_test_failover_time: Optional[datetime] = Field(default=None, description="The start time of the last test failover.", alias="lastTestFailoverTime")
    last_unplanned_failover_time: Optional[datetime] = Field(default=None, description="The start time of the last unplanned failover.", alias="lastUnplannedFailoverTime")
    primary_fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="The primary fabric friendly name.", alias="primaryFabricFriendlyName")
    primary_fabric_id: Optional[StrictStr] = Field(default=None, description="The primary fabric Id.", alias="primaryFabricId")
    recovery_fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="The recovery fabric friendly name.", alias="recoveryFabricFriendlyName")
    recovery_fabric_id: Optional[StrictStr] = Field(default=None, description="The recovery fabric Id.", alias="recoveryFabricId")
    replication_providers: Optional[List[StrictStr]] = Field(default=None, description="The list of replication providers.", alias="replicationProviders")
    __properties: ClassVar[List[str]] = ["allowedOperations", "currentScenario", "currentScenarioStatus", "currentScenarioStatusDescription", "failoverDeploymentModel", "friendlyName", "groups", "lastPlannedFailoverTime", "lastTestFailoverTime", "lastUnplannedFailoverTime", "primaryFabricFriendlyName", "primaryFabricId", "recoveryFabricFriendlyName", "recoveryFabricId", "replicationProviders"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecoveryPlanProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_scenario
        if self.current_scenario:
            _dict['currentScenario'] = self.current_scenario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecoveryPlanProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedOperations": obj.get("allowedOperations"),
            "currentScenario": CurrentScenarioDetails.from_dict(obj["currentScenario"]) if obj.get("currentScenario") is not None else None,
            "currentScenarioStatus": obj.get("currentScenarioStatus"),
            "currentScenarioStatusDescription": obj.get("currentScenarioStatusDescription"),
            "failoverDeploymentModel": obj.get("failoverDeploymentModel"),
            "friendlyName": obj.get("friendlyName"),
            "groups": [RecoveryPlanGroup.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "lastPlannedFailoverTime": obj.get("lastPlannedFailoverTime"),
            "lastTestFailoverTime": obj.get("lastTestFailoverTime"),
            "lastUnplannedFailoverTime": obj.get("lastUnplannedFailoverTime"),
            "primaryFabricFriendlyName": obj.get("primaryFabricFriendlyName"),
            "primaryFabricId": obj.get("primaryFabricId"),
            "recoveryFabricFriendlyName": obj.get("recoveryFabricFriendlyName"),
            "recoveryFabricId": obj.get("recoveryFabricId"),
            "replicationProviders": obj.get("replicationProviders")
        })
        return _obj



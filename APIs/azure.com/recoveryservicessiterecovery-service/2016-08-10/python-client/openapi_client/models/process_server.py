# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mobility_service_update import MobilityServiceUpdate
from typing import Optional, Set
from typing_extensions import Self

class ProcessServer(BaseModel):
    """
    Details of the Process Server.
    """ # noqa: E501
    agent_version: Optional[StrictStr] = Field(default=None, description="The version of the scout component on the server.", alias="agentVersion")
    available_memory_in_bytes: Optional[StrictInt] = Field(default=None, description="The available memory.", alias="availableMemoryInBytes")
    available_space_in_bytes: Optional[StrictInt] = Field(default=None, description="The available space.", alias="availableSpaceInBytes")
    cpu_load: Optional[StrictStr] = Field(default=None, description="The percentage of the CPU load.", alias="cpuLoad")
    cpu_load_status: Optional[StrictStr] = Field(default=None, description="The CPU load status.", alias="cpuLoadStatus")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The Process Server's friendly name.", alias="friendlyName")
    host_id: Optional[StrictStr] = Field(default=None, description="The agent generated Id.", alias="hostId")
    id: Optional[StrictStr] = Field(default=None, description="The Process Server Id.")
    ip_address: Optional[StrictStr] = Field(default=None, description="The IP address of the server.", alias="ipAddress")
    last_heartbeat: Optional[datetime] = Field(default=None, description="The last heartbeat received from the server.", alias="lastHeartbeat")
    machine_count: Optional[StrictStr] = Field(default=None, description="The servers configured with this PS.", alias="machineCount")
    memory_usage_status: Optional[StrictStr] = Field(default=None, description="The memory usage status.", alias="memoryUsageStatus")
    mobility_service_updates: Optional[List[MobilityServiceUpdate]] = Field(default=None, description="The list of the mobility service updates available on the Process Server.", alias="mobilityServiceUpdates")
    os_type: Optional[StrictStr] = Field(default=None, description="The OS type of the server.", alias="osType")
    os_version: Optional[StrictStr] = Field(default=None, description="OS Version of the process server. Note: This will get populated if user has CS version greater than 9.12.0.0.", alias="osVersion")
    ps_service_status: Optional[StrictStr] = Field(default=None, description="The PS service status.", alias="psServiceStatus")
    replication_pair_count: Optional[StrictStr] = Field(default=None, description="The number of replication pairs configured in this PS.", alias="replicationPairCount")
    space_usage_status: Optional[StrictStr] = Field(default=None, description="The space usage status.", alias="spaceUsageStatus")
    ssl_cert_expiry_date: Optional[datetime] = Field(default=None, description="The PS SSL cert expiry date.", alias="sslCertExpiryDate")
    ssl_cert_expiry_remaining_days: Optional[StrictInt] = Field(default=None, description="CS SSL cert expiry date.", alias="sslCertExpiryRemainingDays")
    system_load: Optional[StrictStr] = Field(default=None, description="The percentage of the system load.", alias="systemLoad")
    system_load_status: Optional[StrictStr] = Field(default=None, description="The system load status.", alias="systemLoadStatus")
    total_memory_in_bytes: Optional[StrictInt] = Field(default=None, description="The total memory.", alias="totalMemoryInBytes")
    total_space_in_bytes: Optional[StrictInt] = Field(default=None, description="The total space.", alias="totalSpaceInBytes")
    version_status: Optional[StrictStr] = Field(default=None, description="Version status", alias="versionStatus")
    __properties: ClassVar[List[str]] = ["agentVersion", "availableMemoryInBytes", "availableSpaceInBytes", "cpuLoad", "cpuLoadStatus", "friendlyName", "hostId", "id", "ipAddress", "lastHeartbeat", "machineCount", "memoryUsageStatus", "mobilityServiceUpdates", "osType", "osVersion", "psServiceStatus", "replicationPairCount", "spaceUsageStatus", "sslCertExpiryDate", "sslCertExpiryRemainingDays", "systemLoad", "systemLoadStatus", "totalMemoryInBytes", "totalSpaceInBytes", "versionStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mobility_service_updates (list)
        _items = []
        if self.mobility_service_updates:
            for _item_mobility_service_updates in self.mobility_service_updates:
                if _item_mobility_service_updates:
                    _items.append(_item_mobility_service_updates.to_dict())
            _dict['mobilityServiceUpdates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentVersion": obj.get("agentVersion"),
            "availableMemoryInBytes": obj.get("availableMemoryInBytes"),
            "availableSpaceInBytes": obj.get("availableSpaceInBytes"),
            "cpuLoad": obj.get("cpuLoad"),
            "cpuLoadStatus": obj.get("cpuLoadStatus"),
            "friendlyName": obj.get("friendlyName"),
            "hostId": obj.get("hostId"),
            "id": obj.get("id"),
            "ipAddress": obj.get("ipAddress"),
            "lastHeartbeat": obj.get("lastHeartbeat"),
            "machineCount": obj.get("machineCount"),
            "memoryUsageStatus": obj.get("memoryUsageStatus"),
            "mobilityServiceUpdates": [MobilityServiceUpdate.from_dict(_item) for _item in obj["mobilityServiceUpdates"]] if obj.get("mobilityServiceUpdates") is not None else None,
            "osType": obj.get("osType"),
            "osVersion": obj.get("osVersion"),
            "psServiceStatus": obj.get("psServiceStatus"),
            "replicationPairCount": obj.get("replicationPairCount"),
            "spaceUsageStatus": obj.get("spaceUsageStatus"),
            "sslCertExpiryDate": obj.get("sslCertExpiryDate"),
            "sslCertExpiryRemainingDays": obj.get("sslCertExpiryRemainingDays"),
            "systemLoad": obj.get("systemLoad"),
            "systemLoadStatus": obj.get("systemLoadStatus"),
            "totalMemoryInBytes": obj.get("totalMemoryInBytes"),
            "totalSpaceInBytes": obj.get("totalSpaceInBytes"),
            "versionStatus": obj.get("versionStatus")
        })
        return _obj



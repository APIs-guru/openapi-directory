# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.configuration_settings import ConfigurationSettings
from openapi_client.models.health_error import HealthError
from openapi_client.models.in_mage_disk_details import InMageDiskDetails
from typing import Optional, Set
from typing_extensions import Self

class VMwareVirtualMachineDetails(ConfigurationSettings):
    """
    VMware provider specific settings
    """ # noqa: E501
    agent_generated_id: Optional[StrictStr] = Field(default=None, description="The ID generated by the InMage agent after it gets installed on guest. This is the ID to be used during InMage CreateProtection.", alias="agentGeneratedId")
    agent_installed: Optional[StrictStr] = Field(default=None, description="The value indicating if InMage scout agent is installed on guest.", alias="agentInstalled")
    agent_version: Optional[StrictStr] = Field(default=None, description="The agent version.", alias="agentVersion")
    discovery_type: Optional[StrictStr] = Field(default=None, description="A value indicating the discovery type of the machine. Value can be vCenter or physical.", alias="discoveryType")
    disk_details: Optional[List[InMageDiskDetails]] = Field(default=None, description="The disk details.", alias="diskDetails")
    ip_address: Optional[StrictStr] = Field(default=None, description="The IP address.", alias="ipAddress")
    os_type: Optional[StrictStr] = Field(default=None, description="The OsType installed on VM.", alias="osType")
    powered_on: Optional[StrictStr] = Field(default=None, description="The value indicating whether VM is powered on.", alias="poweredOn")
    v_center_infrastructure_id: Optional[StrictStr] = Field(default=None, description="The VCenter infrastructure Id.", alias="vCenterInfrastructureId")
    validation_errors: Optional[List[HealthError]] = Field(default=None, description="The validation errors.", alias="validationErrors")
    __properties: ClassVar[List[str]] = ["instanceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VMwareVirtualMachineDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VMwareVirtualMachineDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instanceType": obj.get("instanceType")
        })
        return _obj



# coding: utf-8

"""
    SiteRecoveryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-08-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_error import HealthError
from openapi_client.models.protection_container_mapping_provider_specific_details import ProtectionContainerMappingProviderSpecificDetails
from typing import Optional, Set
from typing_extensions import Self

class ProtectionContainerMappingProperties(BaseModel):
    """
    Protection container mapping properties.
    """ # noqa: E501
    health: Optional[StrictStr] = Field(default=None, description="Health of pairing.")
    health_error_details: Optional[List[HealthError]] = Field(default=None, description="Health error.", alias="healthErrorDetails")
    policy_friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of replication policy.", alias="policyFriendlyName")
    policy_id: Optional[StrictStr] = Field(default=None, description="Policy ARM Id.", alias="policyId")
    provider_specific_details: Optional[ProtectionContainerMappingProviderSpecificDetails] = Field(default=None, alias="providerSpecificDetails")
    source_fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of source fabric.", alias="sourceFabricFriendlyName")
    source_protection_container_friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of source protection container.", alias="sourceProtectionContainerFriendlyName")
    state: Optional[StrictStr] = Field(default=None, description="Association Status")
    target_fabric_friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of target fabric.", alias="targetFabricFriendlyName")
    target_protection_container_friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of paired container.", alias="targetProtectionContainerFriendlyName")
    target_protection_container_id: Optional[StrictStr] = Field(default=None, description="Paired protection container ARM ID.", alias="targetProtectionContainerId")
    __properties: ClassVar[List[str]] = ["health", "healthErrorDetails", "policyFriendlyName", "policyId", "providerSpecificDetails", "sourceFabricFriendlyName", "sourceProtectionContainerFriendlyName", "state", "targetFabricFriendlyName", "targetProtectionContainerFriendlyName", "targetProtectionContainerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtectionContainerMappingProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in health_error_details (list)
        _items = []
        if self.health_error_details:
            for _item_health_error_details in self.health_error_details:
                if _item_health_error_details:
                    _items.append(_item_health_error_details.to_dict())
            _dict['healthErrorDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of provider_specific_details
        if self.provider_specific_details:
            _dict['providerSpecificDetails'] = self.provider_specific_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtectionContainerMappingProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "health": obj.get("health"),
            "healthErrorDetails": [HealthError.from_dict(_item) for _item in obj["healthErrorDetails"]] if obj.get("healthErrorDetails") is not None else None,
            "policyFriendlyName": obj.get("policyFriendlyName"),
            "policyId": obj.get("policyId"),
            "providerSpecificDetails": ProtectionContainerMappingProviderSpecificDetails.from_dict(obj["providerSpecificDetails"]) if obj.get("providerSpecificDetails") is not None else None,
            "sourceFabricFriendlyName": obj.get("sourceFabricFriendlyName"),
            "sourceProtectionContainerFriendlyName": obj.get("sourceProtectionContainerFriendlyName"),
            "state": obj.get("state"),
            "targetFabricFriendlyName": obj.get("targetFabricFriendlyName"),
            "targetProtectionContainerFriendlyName": obj.get("targetProtectionContainerFriendlyName"),
            "targetProtectionContainerId": obj.get("targetProtectionContainerId")
        })
        return _obj



# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cluster_health_policy import ClusterHealthPolicy

class TestClusterHealthPolicy(unittest.TestCase):
    """ClusterHealthPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClusterHealthPolicy:
        """Test ClusterHealthPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClusterHealthPolicy`
        """
        model = ClusterHealthPolicy()
        if include_optional:
            return ClusterHealthPolicy(
                application_health_policies = {
                    'key' : openapi_client.models.application_health_policy.ApplicationHealthPolicy(
                        default_service_type_health_policy = openapi_client.models.service_type_health_policy.ServiceTypeHealthPolicy(
                            max_percent_unhealthy_services = 0, ), 
                        service_type_health_policies = {
                            'key' : openapi_client.models.service_type_health_policy.ServiceTypeHealthPolicy(
                                max_percent_unhealthy_services = 0, )
                            }, )
                    },
                max_percent_unhealthy_applications = 0,
                max_percent_unhealthy_nodes = 0
            )
        else:
            return ClusterHealthPolicy(
        )
        """

    def testClusterHealthPolicy(self):
        """Test ClusterHealthPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cluster_health_policy import ClusterHealthPolicy
from openapi_client.models.cluster_upgrade_delta_health_policy import ClusterUpgradeDeltaHealthPolicy
from typing import Optional, Set
from typing_extensions import Self

class ClusterUpgradePolicy(BaseModel):
    """
    Describes the policy used when upgrading the cluster.
    """ # noqa: E501
    delta_health_policy: Optional[ClusterUpgradeDeltaHealthPolicy] = Field(default=None, alias="deltaHealthPolicy")
    force_restart: Optional[StrictBool] = Field(default=None, description="If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).", alias="forceRestart")
    health_check_retry_timeout: StrictStr = Field(description="The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.", alias="healthCheckRetryTimeout")
    health_check_stable_duration: StrictStr = Field(description="The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.", alias="healthCheckStableDuration")
    health_check_wait_duration: StrictStr = Field(description="The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.", alias="healthCheckWaitDuration")
    health_policy: ClusterHealthPolicy = Field(alias="healthPolicy")
    upgrade_domain_timeout: StrictStr = Field(description="The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.", alias="upgradeDomainTimeout")
    upgrade_replica_set_check_timeout: StrictStr = Field(description="The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.", alias="upgradeReplicaSetCheckTimeout")
    upgrade_timeout: StrictStr = Field(description="The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.", alias="upgradeTimeout")
    __properties: ClassVar[List[str]] = ["deltaHealthPolicy", "forceRestart", "healthCheckRetryTimeout", "healthCheckStableDuration", "healthCheckWaitDuration", "healthPolicy", "upgradeDomainTimeout", "upgradeReplicaSetCheckTimeout", "upgradeTimeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterUpgradePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delta_health_policy
        if self.delta_health_policy:
            _dict['deltaHealthPolicy'] = self.delta_health_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_policy
        if self.health_policy:
            _dict['healthPolicy'] = self.health_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterUpgradePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deltaHealthPolicy": ClusterUpgradeDeltaHealthPolicy.from_dict(obj["deltaHealthPolicy"]) if obj.get("deltaHealthPolicy") is not None else None,
            "forceRestart": obj.get("forceRestart"),
            "healthCheckRetryTimeout": obj.get("healthCheckRetryTimeout"),
            "healthCheckStableDuration": obj.get("healthCheckStableDuration"),
            "healthCheckWaitDuration": obj.get("healthCheckWaitDuration"),
            "healthPolicy": ClusterHealthPolicy.from_dict(obj["healthPolicy"]) if obj.get("healthPolicy") is not None else None,
            "upgradeDomainTimeout": obj.get("upgradeDomainTimeout"),
            "upgradeReplicaSetCheckTimeout": obj.get("upgradeReplicaSetCheckTimeout"),
            "upgradeTimeout": obj.get("upgradeTimeout")
        })
        return _obj



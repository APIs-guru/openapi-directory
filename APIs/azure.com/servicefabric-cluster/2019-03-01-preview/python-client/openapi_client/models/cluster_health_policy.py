# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2019-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.application_health_policy import ApplicationHealthPolicy
from typing import Optional, Set
from typing_extensions import Self

class ClusterHealthPolicy(BaseModel):
    """
    Defines a health policy used to evaluate the health of the cluster or of a cluster node. 
    """ # noqa: E501
    application_health_policies: Optional[Dict[str, ApplicationHealthPolicy]] = Field(default=None, description="Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. The application name should include the 'fabric:' URI scheme. The map is empty by default. ", alias="applicationHealthPolicies")
    max_percent_unhealthy_applications: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap. The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero. ", alias="maxPercentUnhealthyApplications")
    max_percent_unhealthy_nodes: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.  In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that. ", alias="maxPercentUnhealthyNodes")
    __properties: ClassVar[List[str]] = ["applicationHealthPolicies", "maxPercentUnhealthyApplications", "maxPercentUnhealthyNodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterHealthPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in application_health_policies (dict)
        _field_dict = {}
        if self.application_health_policies:
            for _key_application_health_policies in self.application_health_policies:
                if self.application_health_policies[_key_application_health_policies]:
                    _field_dict[_key_application_health_policies] = self.application_health_policies[_key_application_health_policies].to_dict()
            _dict['applicationHealthPolicies'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterHealthPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationHealthPolicies": dict(
                (_k, ApplicationHealthPolicy.from_dict(_v))
                for _k, _v in obj["applicationHealthPolicies"].items()
            )
            if obj.get("applicationHealthPolicies") is not None
            else None,
            "maxPercentUnhealthyApplications": obj.get("maxPercentUnhealthyApplications"),
            "maxPercentUnhealthyNodes": obj.get("maxPercentUnhealthyNodes")
        })
        return _obj



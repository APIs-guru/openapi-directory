# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2019-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.application_delta_health_policy import ApplicationDeltaHealthPolicy
from typing import Optional, Set
from typing_extensions import Self

class ClusterUpgradeDeltaHealthPolicy(BaseModel):
    """
    Describes the delta health policies for the cluster upgrade.
    """ # noqa: E501
    application_delta_health_policies: Optional[Dict[str, ApplicationDeltaHealthPolicy]] = Field(default=None, description="Defines a map that contains specific application delta health policies for different applications. Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster. The application name should include the 'fabric:' URI scheme. The map is empty by default. ", alias="applicationDeltaHealthPolicies")
    max_percent_delta_unhealthy_applications: Annotated[int, Field(le=100, strict=True, ge=0)] = Field(description="The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this. ", alias="maxPercentDeltaUnhealthyApplications")
    max_percent_delta_unhealthy_nodes: Annotated[int, Field(le=100, strict=True, ge=0)] = Field(description="The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. ", alias="maxPercentDeltaUnhealthyNodes")
    max_percent_upgrade_domain_delta_unhealthy_nodes: Annotated[int, Field(le=100, strict=True, ge=0)] = Field(description="The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. ", alias="maxPercentUpgradeDomainDeltaUnhealthyNodes")
    __properties: ClassVar[List[str]] = ["applicationDeltaHealthPolicies", "maxPercentDeltaUnhealthyApplications", "maxPercentDeltaUnhealthyNodes", "maxPercentUpgradeDomainDeltaUnhealthyNodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterUpgradeDeltaHealthPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in application_delta_health_policies (dict)
        _field_dict = {}
        if self.application_delta_health_policies:
            for _key_application_delta_health_policies in self.application_delta_health_policies:
                if self.application_delta_health_policies[_key_application_delta_health_policies]:
                    _field_dict[_key_application_delta_health_policies] = self.application_delta_health_policies[_key_application_delta_health_policies].to_dict()
            _dict['applicationDeltaHealthPolicies'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterUpgradeDeltaHealthPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationDeltaHealthPolicies": dict(
                (_k, ApplicationDeltaHealthPolicy.from_dict(_v))
                for _k, _v in obj["applicationDeltaHealthPolicies"].items()
            )
            if obj.get("applicationDeltaHealthPolicies") is not None
            else None,
            "maxPercentDeltaUnhealthyApplications": obj.get("maxPercentDeltaUnhealthyApplications"),
            "maxPercentDeltaUnhealthyNodes": obj.get("maxPercentDeltaUnhealthyNodes"),
            "maxPercentUpgradeDomainDeltaUnhealthyNodes": obj.get("maxPercentUpgradeDomainDeltaUnhealthyNodes")
        })
        return _obj



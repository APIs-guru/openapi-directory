# coding: utf-8

"""
    HanaManagementClient

    The SAP HANA on Azure Management Client.

    The version of the OpenAPI document: 2017-11-03-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SapMonitorProperties(BaseModel):
    """
    Describes the properties of a SAP monitor.
    """ # noqa: E501
    enable_customer_analytics: Optional[StrictBool] = Field(default=None, description="The value indicating whether to send analytics to Microsoft", alias="enableCustomerAnalytics")
    hana_db_credentials_msi_id: Optional[StrictStr] = Field(default=None, description="MSI ID passed by customer which has access to customer's KeyVault and to be assigned to the Collector VM.", alias="hanaDbCredentialsMsiId")
    hana_db_name: Optional[StrictStr] = Field(default=None, description="Database name of the HANA instance.", alias="hanaDbName")
    hana_db_password: Optional[StrictStr] = Field(default=None, description="Database password of the HANA instance.", alias="hanaDbPassword")
    hana_db_password_key_vault_url: Optional[StrictStr] = Field(default=None, description="KeyVault URL link to the password for the HANA database.", alias="hanaDbPasswordKeyVaultUrl")
    hana_db_sql_port: Optional[StrictInt] = Field(default=None, description="Database port of the HANA instance.", alias="hanaDbSqlPort")
    hana_db_username: Optional[StrictStr] = Field(default=None, description="Database username of the HANA instance.", alias="hanaDbUsername")
    hana_hostname: Optional[StrictStr] = Field(default=None, description="Hostname of the HANA instance.", alias="hanaHostname")
    hana_subnet: Optional[StrictStr] = Field(default=None, description="Specifies the SAP monitor unique ID.", alias="hanaSubnet")
    key_vault_id: Optional[StrictStr] = Field(default=None, description="Key Vault ID containing customer's HANA credentials.", alias="keyVaultId")
    log_analytics_workspace_arm_id: Optional[StrictStr] = Field(default=None, description="The ARM ID of the Log Analytics Workspace that is used for monitoring", alias="logAnalyticsWorkspaceArmId")
    log_analytics_workspace_id: Optional[StrictStr] = Field(default=None, description="The workspace ID of the log analytics workspace to be used for monitoring", alias="logAnalyticsWorkspaceId")
    log_analytics_workspace_shared_key: Optional[StrictStr] = Field(default=None, description="The shared key of the log analytics workspace that is used for monitoring", alias="logAnalyticsWorkspaceSharedKey")
    managed_resource_group_name: Optional[StrictStr] = Field(default=None, description="The name of the resource group the SAP Monitor resources get deployed into.", alias="managedResourceGroupName")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="State of provisioning of the HanaInstance", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["enableCustomerAnalytics", "hanaDbCredentialsMsiId", "hanaDbName", "hanaDbPassword", "hanaDbPasswordKeyVaultUrl", "hanaDbSqlPort", "hanaDbUsername", "hanaHostname", "hanaSubnet", "keyVaultId", "logAnalyticsWorkspaceArmId", "logAnalyticsWorkspaceId", "logAnalyticsWorkspaceSharedKey", "managedResourceGroupName", "provisioningState"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting', 'Migrating']):
            raise ValueError("must be one of enum values ('Accepted', 'Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting', 'Migrating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapMonitorProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "managed_resource_group_name",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapMonitorProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableCustomerAnalytics": obj.get("enableCustomerAnalytics"),
            "hanaDbCredentialsMsiId": obj.get("hanaDbCredentialsMsiId"),
            "hanaDbName": obj.get("hanaDbName"),
            "hanaDbPassword": obj.get("hanaDbPassword"),
            "hanaDbPasswordKeyVaultUrl": obj.get("hanaDbPasswordKeyVaultUrl"),
            "hanaDbSqlPort": obj.get("hanaDbSqlPort"),
            "hanaDbUsername": obj.get("hanaDbUsername"),
            "hanaHostname": obj.get("hanaHostname"),
            "hanaSubnet": obj.get("hanaSubnet"),
            "keyVaultId": obj.get("keyVaultId"),
            "logAnalyticsWorkspaceArmId": obj.get("logAnalyticsWorkspaceArmId"),
            "logAnalyticsWorkspaceId": obj.get("logAnalyticsWorkspaceId"),
            "logAnalyticsWorkspaceSharedKey": obj.get("logAnalyticsWorkspaceSharedKey"),
            "managedResourceGroupName": obj.get("managedResourceGroupName"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



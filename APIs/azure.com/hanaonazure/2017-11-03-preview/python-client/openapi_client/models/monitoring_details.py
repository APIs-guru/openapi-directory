# coding: utf-8

"""
    HanaManagementClient

    The SAP HANA on Azure Management Client.

    The version of the OpenAPI document: 2017-11-03-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MonitoringDetails(BaseModel):
    """
    Details needed to monitor a Hana Instance
    """ # noqa: E501
    hana_db_name: Optional[StrictStr] = Field(default=None, description="Name of the database itself.", alias="hanaDbName")
    hana_db_password: Optional[StrictStr] = Field(default=None, description="Password for the HANA database to login for monitoring", alias="hanaDbPassword")
    hana_db_sql_port: Optional[StrictInt] = Field(default=None, description="The port number of the tenant DB. Used to connect to the DB.", alias="hanaDbSqlPort")
    hana_db_username: Optional[StrictStr] = Field(default=None, description="Username for the HANA database to login to for monitoring", alias="hanaDbUsername")
    hana_hostname: Optional[StrictStr] = Field(default=None, description="Hostname of the HANA Instance blade.", alias="hanaHostname")
    hana_subnet: Optional[StrictStr] = Field(default=None, description="ARM ID of an Azure Subnet with access to the HANA instance.", alias="hanaSubnet")
    __properties: ClassVar[List[str]] = ["hanaDbName", "hanaDbPassword", "hanaDbSqlPort", "hanaDbUsername", "hanaHostname", "hanaSubnet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonitoringDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonitoringDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hanaDbName": obj.get("hanaDbName"),
            "hanaDbPassword": obj.get("hanaDbPassword"),
            "hanaDbSqlPort": obj.get("hanaDbSqlPort"),
            "hanaDbUsername": obj.get("hanaDbUsername"),
            "hanaHostname": obj.get("hanaHostname"),
            "hanaSubnet": obj.get("hanaSubnet")
        })
        return _obj



# coding: utf-8

"""
    HanaManagementClient

    The SAP HANA on Azure Management Client.

    The version of the OpenAPI document: 2017-11-03-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hardware_profile import HardwareProfile
from openapi_client.models.network_profile import NetworkProfile
from openapi_client.models.os_profile import OSProfile
from openapi_client.models.storage_profile import StorageProfile
from typing import Optional, Set
from typing_extensions import Self

class HanaInstanceProperties(BaseModel):
    """
    Describes the properties of a HANA instance.
    """ # noqa: E501
    hana_instance_id: Optional[StrictStr] = Field(default=None, description="Specifies the HANA instance unique ID.", alias="hanaInstanceId")
    hardware_profile: Optional[HardwareProfile] = Field(default=None, alias="hardwareProfile")
    hw_revision: Optional[StrictStr] = Field(default=None, description="Hardware revision of a HANA instance", alias="hwRevision")
    network_profile: Optional[NetworkProfile] = Field(default=None, alias="networkProfile")
    os_profile: Optional[OSProfile] = Field(default=None, alias="osProfile")
    partner_node_id: Optional[StrictStr] = Field(default=None, description="ARM ID of another HanaInstance that will share a network with this HanaInstance", alias="partnerNodeId")
    power_state: Optional[StrictStr] = Field(default=None, description="Resource power state", alias="powerState")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="State of provisioning of the HanaInstance", alias="provisioningState")
    proximity_placement_group: Optional[StrictStr] = Field(default=None, description="Resource proximity placement group", alias="proximityPlacementGroup")
    storage_profile: Optional[StorageProfile] = Field(default=None, alias="storageProfile")
    __properties: ClassVar[List[str]] = ["hanaInstanceId", "hardwareProfile", "hwRevision", "networkProfile", "osProfile", "partnerNodeId", "powerState", "provisioningState", "proximityPlacementGroup", "storageProfile"]

    @field_validator('power_state')
    def power_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['starting', 'started', 'stopping', 'stopped', 'restarting', 'unknown']):
            raise ValueError("must be one of enum values ('starting', 'started', 'stopping', 'stopped', 'restarting', 'unknown')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting', 'Migrating']):
            raise ValueError("must be one of enum values ('Accepted', 'Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting', 'Migrating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HanaInstanceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "hana_instance_id",
            "hw_revision",
            "power_state",
            "provisioning_state",
            "proximity_placement_group",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hardware_profile
        if self.hardware_profile:
            _dict['hardwareProfile'] = self.hardware_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_profile
        if self.network_profile:
            _dict['networkProfile'] = self.network_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_profile
        if self.os_profile:
            _dict['osProfile'] = self.os_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_profile
        if self.storage_profile:
            _dict['storageProfile'] = self.storage_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HanaInstanceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hanaInstanceId": obj.get("hanaInstanceId"),
            "hardwareProfile": HardwareProfile.from_dict(obj["hardwareProfile"]) if obj.get("hardwareProfile") is not None else None,
            "hwRevision": obj.get("hwRevision"),
            "networkProfile": NetworkProfile.from_dict(obj["networkProfile"]) if obj.get("networkProfile") is not None else None,
            "osProfile": OSProfile.from_dict(obj["osProfile"]) if obj.get("osProfile") is not None else None,
            "partnerNodeId": obj.get("partnerNodeId"),
            "powerState": obj.get("powerState"),
            "provisioningState": obj.get("provisioningState"),
            "proximityPlacementGroup": obj.get("proximityPlacementGroup"),
            "storageProfile": StorageProfile.from_dict(obj["storageProfile"]) if obj.get("storageProfile") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Azure ML Commitment Plans Management Client

    These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.

    The version of the OpenAPI document: 2016-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.commitment_association import CommitmentAssociation
from openapi_client.models.commitment_association_list_result import CommitmentAssociationListResult
from openapi_client.models.move_commitment_association_request import MoveCommitmentAssociationRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CommitmentAssociationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def commitment_associations_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        commitment_association_name: Annotated[StrictStr, Field(description="The commitment association name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CommitmentAssociation:
        """commitment_associations_get

        Get a commitment association.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param commitment_association_name: The commitment association name. (required)
        :type commitment_association_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            commitment_association_name=commitment_association_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commitment_associations_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        commitment_association_name: Annotated[StrictStr, Field(description="The commitment association name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CommitmentAssociation]:
        """commitment_associations_get

        Get a commitment association.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param commitment_association_name: The commitment association name. (required)
        :type commitment_association_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            commitment_association_name=commitment_association_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commitment_associations_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        commitment_association_name: Annotated[StrictStr, Field(description="The commitment association name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """commitment_associations_get

        Get a commitment association.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param commitment_association_name: The commitment association name. (required)
        :type commitment_association_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            commitment_association_name=commitment_association_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commitment_associations_get_serialize(
        self,
        subscription_id,
        resource_group_name,
        commitment_plan_name,
        commitment_association_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if commitment_plan_name is not None:
            _path_params['commitmentPlanName'] = commitment_plan_name
        if commitment_association_name is not None:
            _path_params['commitmentAssociationName'] = commitment_association_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations/{commitmentAssociationName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def commitment_associations_list(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token for pagination.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CommitmentAssociationListResult:
        """commitment_associations_list

        Get all commitment associations for a parent commitment plan.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param skip_token: Continuation token for pagination.
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commitment_associations_list_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token for pagination.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CommitmentAssociationListResult]:
        """commitment_associations_list

        Get all commitment associations for a parent commitment plan.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param skip_token: Continuation token for pagination.
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commitment_associations_list_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        skip_token: Annotated[Optional[StrictStr], Field(description="Continuation token for pagination.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """commitment_associations_list

        Get all commitment associations for a parent commitment plan.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param skip_token: Continuation token for pagination.
        :type skip_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            api_version=api_version,
            skip_token=skip_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commitment_associations_list_serialize(
        self,
        subscription_id,
        resource_group_name,
        commitment_plan_name,
        api_version,
        skip_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if commitment_plan_name is not None:
            _path_params['commitmentPlanName'] = commitment_plan_name
        # process the query parameters
        if skip_token is not None:
            
            _query_params.append(('$skipToken', skip_token))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def commitment_associations_move(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        commitment_association_name: Annotated[StrictStr, Field(description="The commitment association name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        move_payload: Annotated[MoveCommitmentAssociationRequest, Field(description="The move request payload.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CommitmentAssociation:
        """commitment_associations_move

        Re-parent a commitment association from one commitment plan to another.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param commitment_association_name: The commitment association name. (required)
        :type commitment_association_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param move_payload: The move request payload. (required)
        :type move_payload: MoveCommitmentAssociationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_move_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            commitment_association_name=commitment_association_name,
            api_version=api_version,
            move_payload=move_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commitment_associations_move_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        commitment_association_name: Annotated[StrictStr, Field(description="The commitment association name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        move_payload: Annotated[MoveCommitmentAssociationRequest, Field(description="The move request payload.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CommitmentAssociation]:
        """commitment_associations_move

        Re-parent a commitment association from one commitment plan to another.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param commitment_association_name: The commitment association name. (required)
        :type commitment_association_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param move_payload: The move request payload. (required)
        :type move_payload: MoveCommitmentAssociationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_move_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            commitment_association_name=commitment_association_name,
            api_version=api_version,
            move_payload=move_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commitment_associations_move_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The resource group name.")],
        commitment_plan_name: Annotated[StrictStr, Field(description="The Azure ML commitment plan name.")],
        commitment_association_name: Annotated[StrictStr, Field(description="The commitment association name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Microsoft.MachineLearning resource provider API to use.")],
        move_payload: Annotated[MoveCommitmentAssociationRequest, Field(description="The move request payload.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """commitment_associations_move

        Re-parent a commitment association from one commitment plan to another.

        :param subscription_id: Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The resource group name. (required)
        :type resource_group_name: str
        :param commitment_plan_name: The Azure ML commitment plan name. (required)
        :type commitment_plan_name: str
        :param commitment_association_name: The commitment association name. (required)
        :type commitment_association_name: str
        :param api_version: The version of the Microsoft.MachineLearning resource provider API to use. (required)
        :type api_version: str
        :param move_payload: The move request payload. (required)
        :type move_payload: MoveCommitmentAssociationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commitment_associations_move_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            commitment_plan_name=commitment_plan_name,
            commitment_association_name=commitment_association_name,
            api_version=api_version,
            move_payload=move_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CommitmentAssociation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commitment_associations_move_serialize(
        self,
        subscription_id,
        resource_group_name,
        commitment_plan_name,
        commitment_association_name,
        api_version,
        move_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if commitment_plan_name is not None:
            _path_params['commitmentPlanName'] = commitment_plan_name
        if commitment_association_name is not None:
            _path_params['commitmentAssociationName'] = commitment_association_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if move_payload is not None:
            _body_params = move_payload


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations/{commitmentAssociationName}/move',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



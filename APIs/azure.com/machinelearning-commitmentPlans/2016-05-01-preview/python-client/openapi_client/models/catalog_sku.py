# coding: utf-8

"""
    Azure ML Commitment Plans Management Client

    These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.

    The version of the OpenAPI document: 2016-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sku_capability import SkuCapability
from openapi_client.models.sku_capacity import SkuCapacity
from openapi_client.models.sku_cost import SkuCost
from openapi_client.models.sku_restrictions import SkuRestrictions
from typing import Optional, Set
from typing_extensions import Self

class CatalogSku(BaseModel):
    """
    Details of a commitment plan SKU.
    """ # noqa: E501
    capabilities: Optional[List[SkuCapability]] = Field(default=None, description="The capability information for the specified SKU.")
    capacity: Optional[SkuCapacity] = None
    costs: Optional[List[SkuCost]] = Field(default=None, description="The cost information for the specified SKU.")
    locations: Optional[List[StrictStr]] = Field(default=None, description="Regions where the SKU is available.")
    name: Optional[StrictStr] = Field(default=None, description="SKU name")
    resource_type: Optional[StrictStr] = Field(default=None, description="Resource type name", alias="resourceType")
    restrictions: Optional[List[SkuRestrictions]] = Field(default=None, description="Restrictions which would prevent a SKU from being used. This is empty if there are no restrictions.")
    tier: Optional[StrictStr] = Field(default=None, description="SKU tier")
    __properties: ClassVar[List[str]] = ["capabilities", "capacity", "costs", "locations", "name", "resourceType", "restrictions", "tier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CatalogSku from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "capabilities",
            "costs",
            "locations",
            "name",
            "resource_type",
            "restrictions",
            "tier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in capabilities (list)
        _items = []
        if self.capabilities:
            for _item_capabilities in self.capabilities:
                if _item_capabilities:
                    _items.append(_item_capabilities.to_dict())
            _dict['capabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of capacity
        if self.capacity:
            _dict['capacity'] = self.capacity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in costs (list)
        _items = []
        if self.costs:
            for _item_costs in self.costs:
                if _item_costs:
                    _items.append(_item_costs.to_dict())
            _dict['costs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item_restrictions in self.restrictions:
                if _item_restrictions:
                    _items.append(_item_restrictions.to_dict())
            _dict['restrictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CatalogSku from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": [SkuCapability.from_dict(_item) for _item in obj["capabilities"]] if obj.get("capabilities") is not None else None,
            "capacity": SkuCapacity.from_dict(obj["capacity"]) if obj.get("capacity") is not None else None,
            "costs": [SkuCost.from_dict(_item) for _item in obj["costs"]] if obj.get("costs") is not None else None,
            "locations": obj.get("locations"),
            "name": obj.get("name"),
            "resourceType": obj.get("resourceType"),
            "restrictions": [SkuRestrictions.from_dict(_item) for _item in obj["restrictions"]] if obj.get("restrictions") is not None else None,
            "tier": obj.get("tier")
        })
        return _obj



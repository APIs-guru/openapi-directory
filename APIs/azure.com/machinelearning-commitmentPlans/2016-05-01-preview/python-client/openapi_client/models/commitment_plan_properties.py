# coding: utf-8

"""
    Azure ML Commitment Plans Management Client

    These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.

    The version of the OpenAPI document: 2016-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.plan_quantity import PlanQuantity
from typing import Optional, Set
from typing_extensions import Self

class CommitmentPlanProperties(BaseModel):
    """
    Properties of an Azure ML commitment plan.
    """ # noqa: E501
    charge_for_overage: Optional[StrictBool] = Field(default=None, description="Indicates whether usage beyond the commitment plan's included quantities will be charged.", alias="chargeForOverage")
    charge_for_plan: Optional[StrictBool] = Field(default=None, description="Indicates whether the commitment plan will incur a charge.", alias="chargeForPlan")
    creation_date: Optional[datetime] = Field(default=None, description="The date at which this commitment plan was created, in ISO 8601 format.", alias="creationDate")
    included_quantities: Optional[Dict[str, PlanQuantity]] = Field(default=None, description="The included resource quantities this plan gives you.", alias="includedQuantities")
    max_association_limit: Optional[StrictInt] = Field(default=None, description="The maximum number of commitment associations that can be children of this commitment plan.", alias="maxAssociationLimit")
    max_capacity_limit: Optional[StrictInt] = Field(default=None, description="The maximum scale-out capacity for this commitment plan.", alias="maxCapacityLimit")
    min_capacity_limit: Optional[StrictInt] = Field(default=None, description="The minimum scale-out capacity for this commitment plan.", alias="minCapacityLimit")
    plan_meter: Optional[StrictStr] = Field(default=None, description="The Azure meter which will be used to charge for this commitment plan.", alias="planMeter")
    refill_frequency_in_days: Optional[StrictInt] = Field(default=None, description="The frequency at which this commitment plan's included quantities are refilled.", alias="refillFrequencyInDays")
    suspend_plan_on_overage: Optional[StrictBool] = Field(default=None, description="Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan's included quantities.", alias="suspendPlanOnOverage")
    __properties: ClassVar[List[str]] = ["chargeForOverage", "chargeForPlan", "creationDate", "includedQuantities", "maxAssociationLimit", "maxCapacityLimit", "minCapacityLimit", "planMeter", "refillFrequencyInDays", "suspendPlanOnOverage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommitmentPlanProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "charge_for_overage",
            "charge_for_plan",
            "creation_date",
            "included_quantities",
            "max_association_limit",
            "max_capacity_limit",
            "min_capacity_limit",
            "plan_meter",
            "refill_frequency_in_days",
            "suspend_plan_on_overage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in included_quantities (dict)
        _field_dict = {}
        if self.included_quantities:
            for _key_included_quantities in self.included_quantities:
                if self.included_quantities[_key_included_quantities]:
                    _field_dict[_key_included_quantities] = self.included_quantities[_key_included_quantities].to_dict()
            _dict['includedQuantities'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommitmentPlanProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chargeForOverage": obj.get("chargeForOverage"),
            "chargeForPlan": obj.get("chargeForPlan"),
            "creationDate": obj.get("creationDate"),
            "includedQuantities": dict(
                (_k, PlanQuantity.from_dict(_v))
                for _k, _v in obj["includedQuantities"].items()
            )
            if obj.get("includedQuantities") is not None
            else None,
            "maxAssociationLimit": obj.get("maxAssociationLimit"),
            "maxCapacityLimit": obj.get("maxCapacityLimit"),
            "minCapacityLimit": obj.get("minCapacityLimit"),
            "planMeter": obj.get("planMeter"),
            "refillFrequencyInDays": obj.get("refillFrequencyInDays"),
            "suspendPlanOnOverage": obj.get("suspendPlanOnOverage")
        })
        return _obj



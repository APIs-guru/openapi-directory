# coding: utf-8

"""
    Azure ML Commitment Plans Management Client

    These APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.

    The version of the OpenAPI document: 2016-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PlanUsageHistory(BaseModel):
    """
    Represents historical information about usage of the Azure resources associated with a commitment plan.
    """ # noqa: E501
    plan_deletion_overage: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Overage incurred as a result of deleting a commitment plan.", alias="planDeletionOverage")
    plan_migration_overage: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Overage incurred as a result of migrating a commitment plan from one SKU to another.", alias="planMigrationOverage")
    plan_quantities_after_usage: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Included quantities remaining after usage against the commitment plan's associated resources was calculated.", alias="planQuantitiesAfterUsage")
    plan_quantities_before_usage: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Included quantities remaining before usage against the commitment plan's associated resources was calculated.", alias="planQuantitiesBeforeUsage")
    plan_usage_overage: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Usage against the commitment plan's associated resources which was not covered by included quantities and is therefore overage.", alias="planUsageOverage")
    usage: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Usage against the commitment plan's associated resources.")
    usage_date: Optional[datetime] = Field(default=None, description="The date of usage, in ISO 8601 format.", alias="usageDate")
    __properties: ClassVar[List[str]] = ["planDeletionOverage", "planMigrationOverage", "planQuantitiesAfterUsage", "planQuantitiesBeforeUsage", "planUsageOverage", "usage", "usageDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanUsageHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanUsageHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planDeletionOverage": obj.get("planDeletionOverage"),
            "planMigrationOverage": obj.get("planMigrationOverage"),
            "planQuantitiesAfterUsage": obj.get("planQuantitiesAfterUsage"),
            "planQuantitiesBeforeUsage": obj.get("planQuantitiesBeforeUsage"),
            "planUsageOverage": obj.get("planUsageOverage"),
            "usage": obj.get("usage"),
            "usageDate": obj.get("usageDate")
        })
        return _obj



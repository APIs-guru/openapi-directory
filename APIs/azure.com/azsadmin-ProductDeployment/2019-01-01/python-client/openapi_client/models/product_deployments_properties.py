# coding: utf-8

"""
    DeploymentAdminClient

    Deployment Admin Client.

    The version of the OpenAPI document: 2019-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployment_info import DeploymentInfo
from openapi_client.models.deployment_status import DeploymentStatus
from openapi_client.models.external_access_info import ExternalAccessInfo
from openapi_client.models.product_deployments_internal_state import ProductDeploymentsInternalState
from openapi_client.models.product_deployments_properties_error import ProductDeploymentsPropertiesError
from openapi_client.models.secret_rotation_info import SecretRotationInfo
from typing import Optional, Set
from typing_extensions import Self

class ProductDeploymentsProperties(BaseModel):
    """
    Product deployment resource properties
    """ # noqa: E501
    deployment: Optional[DeploymentInfo] = None
    error: Optional[ProductDeploymentsPropertiesError] = None
    external_access: Optional[ExternalAccessInfo] = Field(default=None, alias="externalAccess")
    internal_state: Optional[ProductDeploymentsInternalState] = Field(default=None, alias="internalState")
    last_successful_deployment: Optional[DeploymentInfo] = Field(default=None, alias="lastSuccessfulDeployment")
    product_id: Optional[StrictStr] = Field(default=None, description="The product identifier", alias="productId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state", alias="provisioningState")
    secret_rotation: Optional[SecretRotationInfo] = Field(default=None, alias="secretRotation")
    status: Optional[DeploymentStatus] = None
    subscription_id: Optional[StrictStr] = Field(default=None, description="The product subscription identifier", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["deployment", "error", "externalAccess", "internalState", "lastSuccessfulDeployment", "productId", "provisioningState", "secretRotation", "status", "subscriptionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductDeploymentsProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deployment
        if self.deployment:
            _dict['deployment'] = self.deployment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_access
        if self.external_access:
            _dict['externalAccess'] = self.external_access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of internal_state
        if self.internal_state:
            _dict['internalState'] = self.internal_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_successful_deployment
        if self.last_successful_deployment:
            _dict['lastSuccessfulDeployment'] = self.last_successful_deployment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_rotation
        if self.secret_rotation:
            _dict['secretRotation'] = self.secret_rotation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductDeploymentsProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployment": DeploymentInfo.from_dict(obj["deployment"]) if obj.get("deployment") is not None else None,
            "error": ProductDeploymentsPropertiesError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "externalAccess": ExternalAccessInfo.from_dict(obj["externalAccess"]) if obj.get("externalAccess") is not None else None,
            "internalState": ProductDeploymentsInternalState.from_dict(obj["internalState"]) if obj.get("internalState") is not None else None,
            "lastSuccessfulDeployment": DeploymentInfo.from_dict(obj["lastSuccessfulDeployment"]) if obj.get("lastSuccessfulDeployment") is not None else None,
            "productId": obj.get("productId"),
            "provisioningState": obj.get("provisioningState"),
            "secretRotation": SecretRotationInfo.from_dict(obj["secretRotation"]) if obj.get("secretRotation") is not None else None,
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj



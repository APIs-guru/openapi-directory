# coding: utf-8

"""
    Azure SQL Database Datamasking Policies and Rules

    Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataMaskingRuleProperties(BaseModel):
    """
    The properties of a database data masking rule.
    """ # noqa: E501
    alias_name: Optional[StrictStr] = Field(default=None, description="The alias name. This is a legacy parameter and is no longer used.", alias="aliasName")
    column_name: StrictStr = Field(description="The column name on which the data masking rule is applied.", alias="columnName")
    id: Optional[StrictStr] = Field(default=None, description="The rule Id.")
    masking_function: StrictStr = Field(description="The masking function that is used for the data masking rule.", alias="maskingFunction")
    number_from: Optional[StrictStr] = Field(default=None, description="The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.", alias="numberFrom")
    number_to: Optional[StrictStr] = Field(default=None, description="The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.", alias="numberTo")
    prefix_size: Optional[StrictStr] = Field(default=None, description="If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored.", alias="prefixSize")
    replacement_string: Optional[StrictStr] = Field(default=None, description="If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored.", alias="replacementString")
    rule_state: Optional[StrictStr] = Field(default=None, description="The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.", alias="ruleState")
    schema_name: StrictStr = Field(description="The schema name on which the data masking rule is applied.", alias="schemaName")
    suffix_size: Optional[StrictStr] = Field(default=None, description="If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored.", alias="suffixSize")
    table_name: StrictStr = Field(description="The table name on which the data masking rule is applied.", alias="tableName")
    __properties: ClassVar[List[str]] = ["aliasName", "columnName", "id", "maskingFunction", "numberFrom", "numberTo", "prefixSize", "replacementString", "ruleState", "schemaName", "suffixSize", "tableName"]

    @field_validator('masking_function')
    def masking_function_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Default', 'CCN', 'Email', 'Number', 'SSN', 'Text']):
            raise ValueError("must be one of enum values ('Default', 'CCN', 'Email', 'Number', 'SSN', 'Text')")
        return value

    @field_validator('rule_state')
    def rule_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Disabled', 'Enabled']):
            raise ValueError("must be one of enum values ('Disabled', 'Enabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataMaskingRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataMaskingRuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aliasName": obj.get("aliasName"),
            "columnName": obj.get("columnName"),
            "id": obj.get("id"),
            "maskingFunction": obj.get("maskingFunction"),
            "numberFrom": obj.get("numberFrom"),
            "numberTo": obj.get("numberTo"),
            "prefixSize": obj.get("prefixSize"),
            "replacementString": obj.get("replacementString"),
            "ruleState": obj.get("ruleState"),
            "schemaName": obj.get("schemaName"),
            "suffixSize": obj.get("suffixSize"),
            "tableName": obj.get("tableName")
        })
        return _obj



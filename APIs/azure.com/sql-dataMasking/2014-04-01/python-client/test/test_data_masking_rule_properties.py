# coding: utf-8

"""
    Azure SQL Database Datamasking Policies and Rules

    Provides create, read, update and delete functionality for Azure SQL Database datamasking policies and rules.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.data_masking_rule_properties import DataMaskingRuleProperties

class TestDataMaskingRuleProperties(unittest.TestCase):
    """DataMaskingRuleProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataMaskingRuleProperties:
        """Test DataMaskingRuleProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataMaskingRuleProperties`
        """
        model = DataMaskingRuleProperties()
        if include_optional:
            return DataMaskingRuleProperties(
                alias_name = '',
                column_name = '',
                id = '',
                masking_function = 'Default',
                number_from = '',
                number_to = '',
                prefix_size = '',
                replacement_string = '',
                rule_state = 'Disabled',
                schema_name = '',
                suffix_size = '',
                table_name = ''
            )
        else:
            return DataMaskingRuleProperties(
                column_name = '',
                masking_function = 'Default',
                schema_name = '',
                table_name = '',
        )
        """

    def testDataMaskingRuleProperties(self):
        """Test DataMaskingRuleProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

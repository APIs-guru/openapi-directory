# coding: utf-8

"""
    AppServiceCertificateOrders API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_service_certificate_order_collection import AppServiceCertificateOrderCollection

class TestAppServiceCertificateOrderCollection(unittest.TestCase):
    """AppServiceCertificateOrderCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppServiceCertificateOrderCollection:
        """Test AppServiceCertificateOrderCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppServiceCertificateOrderCollection`
        """
        model = AppServiceCertificateOrderCollection()
        if include_optional:
            return AppServiceCertificateOrderCollection(
                next_link = '',
                value = [
                    openapi_client.models.app_service_certificate_order.AppServiceCertificateOrder(
                        properties = openapi_client.models.properties.properties(
                            app_service_certificate_not_renewable_reasons = [
                                'RegistrationStatusNotSupportedForRenewal'
                                ], 
                            auto_renew = True, 
                            certificates = {
                                'key' : openapi_client.models.app_service_certificate.AppServiceCertificate(
                                    key_vault_id = '', 
                                    key_vault_secret_name = '', 
                                    provisioning_state = 'Initialized', )
                                }, 
                            csr = '', 
                            distinguished_name = '', 
                            domain_verification_token = '', 
                            expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            intermediate = openapi_client.models.certificate_details.CertificateDetails(
                                issuer = '', 
                                not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                raw_data = '', 
                                serial_number = '', 
                                signature_algorithm = '', 
                                subject = '', 
                                thumbprint = '', 
                                version = 56, ), 
                            is_private_key_external = True, 
                            key_size = 56, 
                            last_certificate_issuance_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            next_auto_renewal_time_stamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            product_type = 'StandardDomainValidatedSsl', 
                            provisioning_state = 'Succeeded', 
                            root = openapi_client.models.certificate_details.CertificateDetails(
                                issuer = '', 
                                not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                raw_data = '', 
                                serial_number = '', 
                                signature_algorithm = '', 
                                subject = '', 
                                thumbprint = '', 
                                version = 56, ), 
                            serial_number = '', 
                            signed_certificate = , 
                            status = 'Pendingissuance', 
                            validity_in_years = 1, ), )
                    ]
            )
        else:
            return AppServiceCertificateOrderCollection(
                value = [
                    openapi_client.models.app_service_certificate_order.AppServiceCertificateOrder(
                        properties = openapi_client.models.properties.properties(
                            app_service_certificate_not_renewable_reasons = [
                                'RegistrationStatusNotSupportedForRenewal'
                                ], 
                            auto_renew = True, 
                            certificates = {
                                'key' : openapi_client.models.app_service_certificate.AppServiceCertificate(
                                    key_vault_id = '', 
                                    key_vault_secret_name = '', 
                                    provisioning_state = 'Initialized', )
                                }, 
                            csr = '', 
                            distinguished_name = '', 
                            domain_verification_token = '', 
                            expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            intermediate = openapi_client.models.certificate_details.CertificateDetails(
                                issuer = '', 
                                not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                raw_data = '', 
                                serial_number = '', 
                                signature_algorithm = '', 
                                subject = '', 
                                thumbprint = '', 
                                version = 56, ), 
                            is_private_key_external = True, 
                            key_size = 56, 
                            last_certificate_issuance_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            next_auto_renewal_time_stamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            product_type = 'StandardDomainValidatedSsl', 
                            provisioning_state = 'Succeeded', 
                            root = openapi_client.models.certificate_details.CertificateDetails(
                                issuer = '', 
                                not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                raw_data = '', 
                                serial_number = '', 
                                signature_algorithm = '', 
                                subject = '', 
                                thumbprint = '', 
                                version = 56, ), 
                            serial_number = '', 
                            signed_certificate = , 
                            status = 'Pendingissuance', 
                            validity_in_years = 1, ), )
                    ],
        )
        """

    def testAppServiceCertificateOrderCollection(self):
        """Test AppServiceCertificateOrderCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    AppServiceCertificateOrders API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CertificateDetails(BaseModel):
    """
    SSL certificate details.
    """ # noqa: E501
    issuer: Optional[StrictStr] = Field(default=None, description="Certificate Issuer.")
    not_after: Optional[datetime] = Field(default=None, description="Date Certificate is valid to.", alias="notAfter")
    not_before: Optional[datetime] = Field(default=None, description="Date Certificate is valid from.", alias="notBefore")
    raw_data: Optional[StrictStr] = Field(default=None, description="Raw certificate data.", alias="rawData")
    serial_number: Optional[StrictStr] = Field(default=None, description="Certificate Serial Number.", alias="serialNumber")
    signature_algorithm: Optional[StrictStr] = Field(default=None, description="Certificate Signature algorithm.", alias="signatureAlgorithm")
    subject: Optional[StrictStr] = Field(default=None, description="Certificate Subject.")
    thumbprint: Optional[StrictStr] = Field(default=None, description="Certificate Thumbprint.")
    version: Optional[StrictInt] = Field(default=None, description="Certificate Version.")
    __properties: ClassVar[List[str]] = ["issuer", "notAfter", "notBefore", "rawData", "serialNumber", "signatureAlgorithm", "subject", "thumbprint", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "issuer",
            "not_after",
            "not_before",
            "raw_data",
            "serial_number",
            "signature_algorithm",
            "subject",
            "thumbprint",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issuer": obj.get("issuer"),
            "notAfter": obj.get("notAfter"),
            "notBefore": obj.get("notBefore"),
            "rawData": obj.get("rawData"),
            "serialNumber": obj.get("serialNumber"),
            "signatureAlgorithm": obj.get("signatureAlgorithm"),
            "subject": obj.get("subject"),
            "thumbprint": obj.get("thumbprint"),
            "version": obj.get("version")
        })
        return _obj



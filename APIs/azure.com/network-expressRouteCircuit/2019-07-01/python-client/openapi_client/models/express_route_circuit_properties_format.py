# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.express_route_circuit_authorization import ExpressRouteCircuitAuthorization
from openapi_client.models.express_route_circuit_connection_properties_format_express_route_circuit_peering import ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering
from openapi_client.models.express_route_circuit_peering import ExpressRouteCircuitPeering
from openapi_client.models.express_route_circuit_service_provider_properties import ExpressRouteCircuitServiceProviderProperties
from openapi_client.models.service_provider_provisioning_state import ServiceProviderProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class ExpressRouteCircuitPropertiesFormat(BaseModel):
    """
    Properties of ExpressRouteCircuit.
    """ # noqa: E501
    allow_classic_operations: Optional[StrictBool] = Field(default=None, description="Allow classic operations.", alias="allowClassicOperations")
    authorizations: Optional[List[ExpressRouteCircuitAuthorization]] = Field(default=None, description="The list of authorizations.")
    bandwidth_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.", alias="bandwidthInGbps")
    circuit_provisioning_state: Optional[StrictStr] = Field(default=None, description="The CircuitProvisioningState state of the resource.", alias="circuitProvisioningState")
    express_route_port: Optional[ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering] = Field(default=None, alias="expressRoutePort")
    gateway_manager_etag: Optional[StrictStr] = Field(default=None, description="The GatewayManager Etag.", alias="gatewayManagerEtag")
    global_reach_enabled: Optional[StrictBool] = Field(default=None, description="Flag denoting Global reach status.", alias="globalReachEnabled")
    peerings: Optional[List[ExpressRouteCircuitPeering]] = Field(default=None, description="The list of peerings.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    service_key: Optional[StrictStr] = Field(default=None, description="The ServiceKey.", alias="serviceKey")
    service_provider_notes: Optional[StrictStr] = Field(default=None, description="The ServiceProviderNotes.", alias="serviceProviderNotes")
    service_provider_properties: Optional[ExpressRouteCircuitServiceProviderProperties] = Field(default=None, alias="serviceProviderProperties")
    service_provider_provisioning_state: Optional[ServiceProviderProvisioningState] = Field(default=None, alias="serviceProviderProvisioningState")
    stag: Optional[StrictInt] = Field(default=None, description="The identifier of the circuit traffic. Outer tag for QinQ encapsulation.")
    __properties: ClassVar[List[str]] = ["allowClassicOperations", "authorizations", "bandwidthInGbps", "circuitProvisioningState", "expressRoutePort", "gatewayManagerEtag", "globalReachEnabled", "peerings", "provisioningState", "serviceKey", "serviceProviderNotes", "serviceProviderProperties", "serviceProviderProvisioningState", "stag"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpressRouteCircuitPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "stag",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item_authorizations in self.authorizations:
                if _item_authorizations:
                    _items.append(_item_authorizations.to_dict())
            _dict['authorizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of express_route_port
        if self.express_route_port:
            _dict['expressRoutePort'] = self.express_route_port.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in peerings (list)
        _items = []
        if self.peerings:
            for _item_peerings in self.peerings:
                if _item_peerings:
                    _items.append(_item_peerings.to_dict())
            _dict['peerings'] = _items
        # override the default output from pydantic by calling `to_dict()` of service_provider_properties
        if self.service_provider_properties:
            _dict['serviceProviderProperties'] = self.service_provider_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpressRouteCircuitPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowClassicOperations": obj.get("allowClassicOperations"),
            "authorizations": [ExpressRouteCircuitAuthorization.from_dict(_item) for _item in obj["authorizations"]] if obj.get("authorizations") is not None else None,
            "bandwidthInGbps": obj.get("bandwidthInGbps"),
            "circuitProvisioningState": obj.get("circuitProvisioningState"),
            "expressRoutePort": ExpressRouteCircuitConnectionPropertiesFormatExpressRouteCircuitPeering.from_dict(obj["expressRoutePort"]) if obj.get("expressRoutePort") is not None else None,
            "gatewayManagerEtag": obj.get("gatewayManagerEtag"),
            "globalReachEnabled": obj.get("globalReachEnabled"),
            "peerings": [ExpressRouteCircuitPeering.from_dict(_item) for _item in obj["peerings"]] if obj.get("peerings") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "serviceKey": obj.get("serviceKey"),
            "serviceProviderNotes": obj.get("serviceProviderNotes"),
            "serviceProviderProperties": ExpressRouteCircuitServiceProviderProperties.from_dict(obj["serviceProviderProperties"]) if obj.get("serviceProviderProperties") is not None else None,
            "serviceProviderProvisioningState": obj.get("serviceProviderProvisioningState"),
            "stag": obj.get("stag")
        })
        return _obj



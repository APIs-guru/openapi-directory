# coding: utf-8

"""
    QnAMaker Runtime Client

    An API for QnAMaker runtime

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.metadata_dto import MetadataDTO
from openapi_client.models.query_context_dto import QueryContextDTO
from typing import Optional, Set
from typing_extensions import Self

class QueryDTO(BaseModel):
    """
    POST body schema to query the knowledgebase.
    """ # noqa: E501
    context: Optional[QueryContextDTO] = Field(default=None, description="Context object with previous QnA's information.")
    is_test: Optional[StrictBool] = Field(default=None, description="Query against the test index.", alias="isTest")
    qna_id: Optional[StrictStr] = Field(default=None, description="Exact qnaId to fetch from the knowledgebase, this field takes priority over question.", alias="qnaId")
    question: Optional[StrictStr] = Field(default=None, description="User question to query against the knowledge base.")
    ranker_type: Optional[StrictStr] = Field(default=None, description="Optional field. Set to 'QuestionOnly' for using a question only Ranker.", alias="rankerType")
    score_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Threshold for answers returned based on score.", alias="scoreThreshold")
    strict_filters: Optional[List[MetadataDTO]] = Field(default=None, description="Find only answers that contain these metadata.", alias="strictFilters")
    top: Optional[StrictInt] = Field(default=None, description="Max number of answers to be returned for the question.")
    user_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the user.", alias="userId")
    __properties: ClassVar[List[str]] = ["context", "isTest", "qnaId", "question", "rankerType", "scoreThreshold", "strictFilters", "top", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in strict_filters (list)
        _items = []
        if self.strict_filters:
            for _item_strict_filters in self.strict_filters:
                if _item_strict_filters:
                    _items.append(_item_strict_filters.to_dict())
            _dict['strictFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": QueryContextDTO.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "isTest": obj.get("isTest"),
            "qnaId": obj.get("qnaId"),
            "question": obj.get("question"),
            "rankerType": obj.get("rankerType"),
            "scoreThreshold": obj.get("scoreThreshold"),
            "strictFilters": [MetadataDTO.from_dict(_item) for _item in obj["strictFilters"]] if obj.get("strictFilters") is not None else None,
            "top": obj.get("top"),
            "userId": obj.get("userId")
        })
        return _obj



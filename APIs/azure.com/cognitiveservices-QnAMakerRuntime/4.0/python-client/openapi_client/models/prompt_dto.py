# coding: utf-8

"""
    QnAMaker Runtime Client

    An API for QnAMaker runtime

    The version of the OpenAPI document: 4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PromptDTO(BaseModel):
    """
    Prompt for an answer.
    """ # noqa: E501
    display_order: Optional[StrictInt] = Field(default=None, description="Index of the prompt - used in ordering of the prompts", alias="displayOrder")
    display_text: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default=None, description="Text displayed to represent a follow up question prompt", alias="displayText")
    qna: Optional[QnADTO] = Field(default=None, description="QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object")
    qna_id: Optional[StrictInt] = Field(default=None, description="Qna id corresponding to the prompt - if QnaId is present, QnADTO object is ignored.", alias="qnaId")
    __properties: ClassVar[List[str]] = ["displayOrder", "displayText", "qna", "qnaId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PromptDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of qna
        if self.qna:
            _dict['qna'] = self.qna.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PromptDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayOrder": obj.get("displayOrder"),
            "displayText": obj.get("displayText"),
            "qna": QnADTO.from_dict(obj["qna"]) if obj.get("qna") is not None else None,
            "qnaId": obj.get("qnaId")
        })
        return _obj

from openapi_client.models.qn_adto import QnADTO
# TODO: Rewrite to not use raise_errors
PromptDTO.model_rebuild(raise_errors=False)


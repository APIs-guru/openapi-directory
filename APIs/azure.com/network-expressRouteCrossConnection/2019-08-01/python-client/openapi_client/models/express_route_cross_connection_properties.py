# coding: utf-8

"""
    ExpressRouteCrossConnection REST APIs

    The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.express_route_circuit_reference import ExpressRouteCircuitReference
from openapi_client.models.express_route_cross_connection_peering import ExpressRouteCrossConnectionPeering
from typing import Optional, Set
from typing_extensions import Self

class ExpressRouteCrossConnectionProperties(BaseModel):
    """
    Properties of ExpressRouteCrossConnection.
    """ # noqa: E501
    bandwidth_in_mbps: Optional[StrictInt] = Field(default=None, description="The circuit bandwidth In Mbps.", alias="bandwidthInMbps")
    express_route_circuit: Optional[ExpressRouteCircuitReference] = Field(default=None, alias="expressRouteCircuit")
    peering_location: Optional[StrictStr] = Field(default=None, description="The peering location of the ExpressRoute circuit.", alias="peeringLocation")
    peerings: Optional[List[ExpressRouteCrossConnectionPeering]] = Field(default=None, description="The list of peerings.")
    primary_azure_port: Optional[StrictStr] = Field(default=None, description="The name of the primary port.", alias="primaryAzurePort")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    s_tag: Optional[StrictInt] = Field(default=None, description="The identifier of the circuit traffic.", alias="sTag")
    secondary_azure_port: Optional[StrictStr] = Field(default=None, description="The name of the secondary port.", alias="secondaryAzurePort")
    service_provider_notes: Optional[StrictStr] = Field(default=None, description="Additional read only notes set by the connectivity provider.", alias="serviceProviderNotes")
    service_provider_provisioning_state: Optional[StrictStr] = Field(default=None, description="The ServiceProviderProvisioningState state of the resource.", alias="serviceProviderProvisioningState")
    __properties: ClassVar[List[str]] = ["bandwidthInMbps", "expressRouteCircuit", "peeringLocation", "peerings", "primaryAzurePort", "provisioningState", "sTag", "secondaryAzurePort", "serviceProviderNotes", "serviceProviderProvisioningState"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    @field_validator('service_provider_provisioning_state')
    def service_provider_provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning']):
            raise ValueError("must be one of enum values ('NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpressRouteCrossConnectionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "primary_azure_port",
            "provisioning_state",
            "s_tag",
            "secondary_azure_port",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of express_route_circuit
        if self.express_route_circuit:
            _dict['expressRouteCircuit'] = self.express_route_circuit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in peerings (list)
        _items = []
        if self.peerings:
            for _item_peerings in self.peerings:
                if _item_peerings:
                    _items.append(_item_peerings.to_dict())
            _dict['peerings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpressRouteCrossConnectionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidthInMbps": obj.get("bandwidthInMbps"),
            "expressRouteCircuit": ExpressRouteCircuitReference.from_dict(obj["expressRouteCircuit"]) if obj.get("expressRouteCircuit") is not None else None,
            "peeringLocation": obj.get("peeringLocation"),
            "peerings": [ExpressRouteCrossConnectionPeering.from_dict(_item) for _item in obj["peerings"]] if obj.get("peerings") is not None else None,
            "primaryAzurePort": obj.get("primaryAzurePort"),
            "provisioningState": obj.get("provisioningState"),
            "sTag": obj.get("sTag"),
            "secondaryAzurePort": obj.get("secondaryAzurePort"),
            "serviceProviderNotes": obj.get("serviceProviderNotes"),
            "serviceProviderProvisioningState": obj.get("serviceProviderProvisioningState")
        })
        return _obj



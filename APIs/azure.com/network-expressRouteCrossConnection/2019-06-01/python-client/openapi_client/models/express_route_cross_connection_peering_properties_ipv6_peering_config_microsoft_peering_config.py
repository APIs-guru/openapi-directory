# coding: utf-8

"""
    ExpressRouteCrossConnection REST APIs

    The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig(BaseModel):
    """
    Specifies the peering configuration.
    """ # noqa: E501
    advertised_communities: Optional[List[StrictStr]] = Field(default=None, description="The communities of bgp peering. Specified for microsoft peering.", alias="advertisedCommunities")
    advertised_public_prefixes: Optional[List[StrictStr]] = Field(default=None, description="The reference of AdvertisedPublicPrefixes.", alias="advertisedPublicPrefixes")
    advertised_public_prefixes_state: Optional[StrictStr] = Field(default=None, description="The advertised public prefix state of the Peering resource.", alias="advertisedPublicPrefixesState")
    customer_asn: Optional[StrictInt] = Field(default=None, description="The CustomerASN of the peering.", alias="customerASN")
    legacy_mode: Optional[StrictInt] = Field(default=None, description="The legacy mode of the peering.", alias="legacyMode")
    routing_registry_name: Optional[StrictStr] = Field(default=None, description="The RoutingRegistryName of the configuration.", alias="routingRegistryName")
    __properties: ClassVar[List[str]] = ["advertisedCommunities", "advertisedPublicPrefixes", "advertisedPublicPrefixesState", "customerASN", "legacyMode", "routingRegistryName"]

    @field_validator('advertised_public_prefixes_state')
    def advertised_public_prefixes_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded']):
            raise ValueError("must be one of enum values ('NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertisedCommunities": obj.get("advertisedCommunities"),
            "advertisedPublicPrefixes": obj.get("advertisedPublicPrefixes"),
            "advertisedPublicPrefixesState": obj.get("advertisedPublicPrefixesState"),
            "customerASN": obj.get("customerASN"),
            "legacyMode": obj.get("legacyMode"),
            "routingRegistryName": obj.get("routingRegistryName")
        })
        return _obj



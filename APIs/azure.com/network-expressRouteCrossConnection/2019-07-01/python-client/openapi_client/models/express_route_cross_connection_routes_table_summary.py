# coding: utf-8

"""
    ExpressRouteCrossConnection REST APIs

    The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpressRouteCrossConnectionRoutesTableSummary(BaseModel):
    """
    The routes table associated with the ExpressRouteCircuit.
    """ # noqa: E501
    asn: Optional[StrictInt] = Field(default=None, description="Autonomous system number.")
    neighbor: Optional[StrictStr] = Field(default=None, description="IP address of Neighbor router.")
    state_or_prefixes_received: Optional[StrictStr] = Field(default=None, description="Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.", alias="stateOrPrefixesReceived")
    up_down: Optional[StrictStr] = Field(default=None, description="The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.", alias="upDown")
    __properties: ClassVar[List[str]] = ["asn", "neighbor", "stateOrPrefixesReceived", "upDown"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpressRouteCrossConnectionRoutesTableSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpressRouteCrossConnectionRoutesTableSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asn": obj.get("asn"),
            "neighbor": obj.get("neighbor"),
            "stateOrPrefixesReceived": obj.get("stateOrPrefixesReceived"),
            "upDown": obj.get("upDown")
        })
        return _obj



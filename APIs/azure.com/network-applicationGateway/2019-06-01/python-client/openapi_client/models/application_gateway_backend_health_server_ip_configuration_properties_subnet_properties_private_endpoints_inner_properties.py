# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_private_endpoints_inner_properties_private_link_service_connections_inner import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties(BaseModel):
    """
    Properties of the private endpoint.
    """ # noqa: E501
    manual_private_link_service_connections: Optional[List[Items]] = Field(default=None, description="A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource.", alias="manualPrivateLinkServiceConnections")
    network_interfaces: Optional[List[Items]] = Field(default=None, description="Gets an array of references to the network interfaces created for this private endpoint.", alias="networkInterfaces")
    private_link_service_connections: Optional[List[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner]] = Field(default=None, description="A grouping of information about the connection to the remote resource.", alias="privateLinkServiceConnections")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    subnet: Optional[Subnet] = None
    __properties: ClassVar[List[str]] = ["manualPrivateLinkServiceConnections", "networkInterfaces", "privateLinkServiceConnections", "provisioningState", "subnet"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "network_interfaces",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in manual_private_link_service_connections (list)
        _items = []
        if self.manual_private_link_service_connections:
            for _item_manual_private_link_service_connections in self.manual_private_link_service_connections:
                if _item_manual_private_link_service_connections:
                    _items.append(_item_manual_private_link_service_connections.to_dict())
            _dict['manualPrivateLinkServiceConnections'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_interfaces (list)
        _items = []
        if self.network_interfaces:
            for _item_network_interfaces in self.network_interfaces:
                if _item_network_interfaces:
                    _items.append(_item_network_interfaces.to_dict())
            _dict['networkInterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in private_link_service_connections (list)
        _items = []
        if self.private_link_service_connections:
            for _item_private_link_service_connections in self.private_link_service_connections:
                if _item_private_link_service_connections:
                    _items.append(_item_private_link_service_connections.to_dict())
            _dict['privateLinkServiceConnections'] = _items
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "manualPrivateLinkServiceConnections": [Items.from_dict(_item) for _item in obj["manualPrivateLinkServiceConnections"]] if obj.get("manualPrivateLinkServiceConnections") is not None else None,
            "networkInterfaces": [Items.from_dict(_item) for _item in obj["networkInterfaces"]] if obj.get("networkInterfaces") is not None else None,
            "privateLinkServiceConnections": [ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInner.from_dict(_item) for _item in obj["privateLinkServiceConnections"]] if obj.get("privateLinkServiceConnections") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "subnet": Subnet.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_public_ip_address_properties_dns_settings import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressPropertiesDnsSettings
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_public_ip_address_properties_ip_tags_inner import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressPropertiesIpTagsInner
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressProperties(BaseModel):
    """
    Public IP address properties.
    """ # noqa: E501
    dns_settings: Optional[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressPropertiesDnsSettings] = Field(default=None, alias="dnsSettings")
    idle_timeout_in_minutes: Optional[StrictInt] = Field(default=None, description="The idle timeout of the public IP address.", alias="idleTimeoutInMinutes")
    ip_address: Optional[StrictStr] = Field(default=None, description="The IP address associated with the public IP address resource.", alias="ipAddress")
    ip_configuration: Optional[Items] = Field(default=None, alias="ipConfiguration")
    ip_tags: Optional[List[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressPropertiesIpTagsInner]] = Field(default=None, description="The list of tags associated with the public IP address.", alias="ipTags")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    public_ip_address_version: Optional[StrictStr] = Field(default=None, description="The public IP address version. Possible values are: 'IPv4' and 'IPv6'.", alias="publicIPAddressVersion")
    public_ip_allocation_method: Optional[StrictStr] = Field(default=None, description="The public IP allocation method. Possible values are: 'Static' and 'Dynamic'.", alias="publicIPAllocationMethod")
    public_ip_prefix: Optional[Model0] = Field(default=None, alias="publicIPPrefix")
    resource_guid: Optional[StrictStr] = Field(default=None, description="The resource GUID property of the public IP resource.", alias="resourceGuid")
    __properties: ClassVar[List[str]] = ["dnsSettings", "idleTimeoutInMinutes", "ipAddress", "ipConfiguration", "ipTags", "provisioningState", "publicIPAddressVersion", "publicIPAllocationMethod", "publicIPPrefix", "resourceGuid"]

    @field_validator('public_ip_address_version')
    def public_ip_address_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IPv4', 'IPv6']):
            raise ValueError("must be one of enum values ('IPv4', 'IPv6')")
        return value

    @field_validator('public_ip_allocation_method')
    def public_ip_allocation_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Static', 'Dynamic']):
            raise ValueError("must be one of enum values ('Static', 'Dynamic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dns_settings
        if self.dns_settings:
            _dict['dnsSettings'] = self.dns_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip_configuration
        if self.ip_configuration:
            _dict['ipConfiguration'] = self.ip_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ip_tags (list)
        _items = []
        if self.ip_tags:
            for _item_ip_tags in self.ip_tags:
                if _item_ip_tags:
                    _items.append(_item_ip_tags.to_dict())
            _dict['ipTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of public_ip_prefix
        if self.public_ip_prefix:
            _dict['publicIPPrefix'] = self.public_ip_prefix.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsSettings": ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressPropertiesDnsSettings.from_dict(obj["dnsSettings"]) if obj.get("dnsSettings") is not None else None,
            "idleTimeoutInMinutes": obj.get("idleTimeoutInMinutes"),
            "ipAddress": obj.get("ipAddress"),
            "ipConfiguration": Items.from_dict(obj["ipConfiguration"]) if obj.get("ipConfiguration") is not None else None,
            "ipTags": [ApplicationGatewayBackendHealthServerIpConfigurationPropertiesPublicIPAddressPropertiesIpTagsInner.from_dict(_item) for _item in obj["ipTags"]] if obj.get("ipTags") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "publicIPAddressVersion": obj.get("publicIPAddressVersion"),
            "publicIPAllocationMethod": obj.get("publicIPAllocationMethod"),
            "publicIPPrefix": Model0.from_dict(obj["publicIPPrefix"]) if obj.get("publicIPPrefix") is not None else None,
            "resourceGuid": obj.get("resourceGuid")
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_backend_health_http_settings import ApplicationGatewayBackendHealthHttpSettings
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHealthPool(BaseModel):
    """
    Application gateway BackendHealth pool.
    """ # noqa: E501
    backend_address_pool: Optional[object] = Field(default=None, alias="backendAddressPool")
    backend_http_settings_collection: Optional[List[ApplicationGatewayBackendHealthHttpSettings]] = Field(default=None, description="List of ApplicationGatewayBackendHealthHttpSettings resources.", alias="backendHttpSettingsCollection")
    __properties: ClassVar[List[str]] = ["backendAddressPool", "backendHttpSettingsCollection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthPool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backend_http_settings_collection (list)
        _items = []
        if self.backend_http_settings_collection:
            for _item_backend_http_settings_collection in self.backend_http_settings_collection:
                if _item_backend_http_settings_collection:
                    _items.append(_item_backend_http_settings_collection.to_dict())
            _dict['backendHttpSettingsCollection'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthPool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendAddressPool": obj.get("backendAddressPool"),
            "backendHttpSettingsCollection": [ApplicationGatewayBackendHealthHttpSettings.from_dict(_item) for _item in obj["backendHttpSettingsCollection"]] if obj.get("backendHttpSettingsCollection") is not None else None
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_path_rule_properties_format_rewrite_rule_set import ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayUrlPathMapPropertiesFormat(BaseModel):
    """
    Properties of UrlPathMap of the application gateway.
    """ # noqa: E501
    default_backend_address_pool: Optional[ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet] = Field(default=None, alias="defaultBackendAddressPool")
    default_backend_http_settings: Optional[ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet] = Field(default=None, alias="defaultBackendHttpSettings")
    default_redirect_configuration: Optional[ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet] = Field(default=None, alias="defaultRedirectConfiguration")
    default_rewrite_rule_set: Optional[ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet] = Field(default=None, alias="defaultRewriteRuleSet")
    path_rules: Optional[List[object]] = Field(default=None, description="Path rule of URL path map resource.", alias="pathRules")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["defaultBackendAddressPool", "defaultBackendHttpSettings", "defaultRedirectConfiguration", "defaultRewriteRuleSet", "pathRules", "provisioningState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayUrlPathMapPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_backend_address_pool
        if self.default_backend_address_pool:
            _dict['defaultBackendAddressPool'] = self.default_backend_address_pool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_backend_http_settings
        if self.default_backend_http_settings:
            _dict['defaultBackendHttpSettings'] = self.default_backend_http_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_redirect_configuration
        if self.default_redirect_configuration:
            _dict['defaultRedirectConfiguration'] = self.default_redirect_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_rewrite_rule_set
        if self.default_rewrite_rule_set:
            _dict['defaultRewriteRuleSet'] = self.default_rewrite_rule_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayUrlPathMapPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultBackendAddressPool": ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.from_dict(obj["defaultBackendAddressPool"]) if obj.get("defaultBackendAddressPool") is not None else None,
            "defaultBackendHttpSettings": ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.from_dict(obj["defaultBackendHttpSettings"]) if obj.get("defaultBackendHttpSettings") is not None else None,
            "defaultRedirectConfiguration": ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.from_dict(obj["defaultRedirectConfiguration"]) if obj.get("defaultRedirectConfiguration") is not None else None,
            "defaultRewriteRuleSet": ApplicationGatewayPathRulePropertiesFormatRewriteRuleSet.from_dict(obj["defaultRewriteRuleSet"]) if obj.get("defaultRewriteRuleSet") is not None else None,
            "pathRules": obj.get("pathRules"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



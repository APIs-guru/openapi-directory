# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2017-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_application_gateway_backend_address_pools_inner_properties_backend_ip_configurations_inner import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInner
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_network_security_group_properties_network_interfaces_inner_properties_dns_settings import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesDnsSettings
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerProperties(BaseModel):
    """
    NetworkInterface properties. 
    """ # noqa: E501
    dns_settings: Optional[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesDnsSettings] = Field(default=None, alias="dnsSettings")
    enable_accelerated_networking: Optional[StrictBool] = Field(default=None, description="If the network interface is accelerated networking enabled.", alias="enableAcceleratedNetworking")
    enable_ip_forwarding: Optional[StrictBool] = Field(default=None, description="Indicates whether IP forwarding is enabled on this network interface.", alias="enableIPForwarding")
    ip_configurations: Optional[List[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInner]] = Field(default=None, description="A list of IPConfigurations of the network interface.", alias="ipConfigurations")
    mac_address: Optional[StrictStr] = Field(default=None, description="The MAC address of the network interface.", alias="macAddress")
    network_security_group: Optional[NetworkSecurityGroup] = Field(default=None, alias="networkSecurityGroup")
    primary: Optional[StrictBool] = Field(default=None, description="Gets whether this is a primary network interface on a virtual machine.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    resource_guid: Optional[StrictStr] = Field(default=None, description="The resource GUID property of the network interface resource.", alias="resourceGuid")
    virtual_machine: Optional[Model0] = Field(default=None, alias="virtualMachine")
    __properties: ClassVar[List[str]] = ["dnsSettings", "enableAcceleratedNetworking", "enableIPForwarding", "ipConfigurations", "macAddress", "networkSecurityGroup", "primary", "provisioningState", "resourceGuid", "virtualMachine"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dns_settings
        if self.dns_settings:
            _dict['dnsSettings'] = self.dns_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ip_configurations (list)
        _items = []
        if self.ip_configurations:
            for _item_ip_configurations in self.ip_configurations:
                if _item_ip_configurations:
                    _items.append(_item_ip_configurations.to_dict())
            _dict['ipConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_security_group
        if self.network_security_group:
            _dict['networkSecurityGroup'] = self.network_security_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_machine
        if self.virtual_machine:
            _dict['virtualMachine'] = self.virtual_machine.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsSettings": ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesDnsSettings.from_dict(obj["dnsSettings"]) if obj.get("dnsSettings") is not None else None,
            "enableAcceleratedNetworking": obj.get("enableAcceleratedNetworking"),
            "enableIPForwarding": obj.get("enableIPForwarding"),
            "ipConfigurations": [ApplicationGatewayBackendHealthServerIpConfigurationPropertiesApplicationGatewayBackendAddressPoolsInnerPropertiesBackendIPConfigurationsInner.from_dict(_item) for _item in obj["ipConfigurations"]] if obj.get("ipConfigurations") is not None else None,
            "macAddress": obj.get("macAddress"),
            "networkSecurityGroup": NetworkSecurityGroup.from_dict(obj["networkSecurityGroup"]) if obj.get("networkSecurityGroup") is not None else None,
            "primary": obj.get("primary"),
            "provisioningState": obj.get("provisioningState"),
            "resourceGuid": obj.get("resourceGuid"),
            "virtualMachine": Model0.from_dict(obj["virtualMachine"]) if obj.get("virtualMachine") is not None else None
        })
        return _obj



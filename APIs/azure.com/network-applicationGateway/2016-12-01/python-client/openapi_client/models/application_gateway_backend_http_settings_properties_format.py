# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_connection_draining import ApplicationGatewayConnectionDraining
from openapi_client.models.application_gateway_http_listener_properties_format_frontend_port import ApplicationGatewayHttpListenerPropertiesFormatFrontendPort
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHttpSettingsPropertiesFormat(BaseModel):
    """
    Properties of Backend address pool settings of an application gateway.
    """ # noqa: E501
    authentication_certificates: Optional[List[ApplicationGatewayHttpListenerPropertiesFormatFrontendPort]] = Field(default=None, description="Array of references to application gateway authentication certificates.", alias="authenticationCertificates")
    connection_draining: Optional[ApplicationGatewayConnectionDraining] = Field(default=None, alias="connectionDraining")
    cookie_based_affinity: Optional[StrictStr] = Field(default=None, description="Cookie based affinity. Possible values are: 'Enabled' and 'Disabled'.", alias="cookieBasedAffinity")
    port: Optional[StrictInt] = Field(default=None, description="Port")
    probe: Optional[ApplicationGatewayHttpListenerPropertiesFormatFrontendPort] = None
    protocol: Optional[StrictStr] = Field(default=None, description="Protocol. Possible values are: 'Http' and 'Https'.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    request_timeout: Optional[StrictInt] = Field(default=None, description="Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.", alias="requestTimeout")
    __properties: ClassVar[List[str]] = ["authenticationCertificates", "connectionDraining", "cookieBasedAffinity", "port", "probe", "protocol", "provisioningState", "requestTimeout"]

    @field_validator('cookie_based_affinity')
    def cookie_based_affinity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Http', 'Https']):
            raise ValueError("must be one of enum values ('Http', 'Https')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHttpSettingsPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authentication_certificates (list)
        _items = []
        if self.authentication_certificates:
            for _item_authentication_certificates in self.authentication_certificates:
                if _item_authentication_certificates:
                    _items.append(_item_authentication_certificates.to_dict())
            _dict['authenticationCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of connection_draining
        if self.connection_draining:
            _dict['connectionDraining'] = self.connection_draining.to_dict()
        # override the default output from pydantic by calling `to_dict()` of probe
        if self.probe:
            _dict['probe'] = self.probe.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHttpSettingsPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationCertificates": [ApplicationGatewayHttpListenerPropertiesFormatFrontendPort.from_dict(_item) for _item in obj["authenticationCertificates"]] if obj.get("authenticationCertificates") is not None else None,
            "connectionDraining": ApplicationGatewayConnectionDraining.from_dict(obj["connectionDraining"]) if obj.get("connectionDraining") is not None else None,
            "cookieBasedAffinity": obj.get("cookieBasedAffinity"),
            "port": obj.get("port"),
            "probe": ApplicationGatewayHttpListenerPropertiesFormatFrontendPort.from_dict(obj["probe"]) if obj.get("probe") is not None else None,
            "protocol": obj.get("protocol"),
            "provisioningState": obj.get("provisioningState"),
            "requestTimeout": obj.get("requestTimeout")
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_network_security_group_properties_network_interfaces_inner_properties_ip_configurations_inner import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_network_security_group_properties_network_interfaces_inner_properties_tap_configurations_inner import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesTapConfigurationsInner
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_virtual_network_taps_inner_properties_destination_load_balancer_front_end_ip_configuration import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties(BaseModel):
    """
    Virtual Network Tap properties.
    """ # noqa: E501
    destination_load_balancer_front_end_ip_configuration: Optional[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration] = Field(default=None, alias="destinationLoadBalancerFrontEndIPConfiguration")
    destination_network_interface_ip_configuration: Optional[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner] = Field(default=None, alias="destinationNetworkInterfaceIPConfiguration")
    destination_port: Optional[StrictInt] = Field(default=None, description="The VXLAN destination port that will receive the tapped traffic.", alias="destinationPort")
    network_interface_tap_configurations: Optional[List[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesTapConfigurationsInner]] = Field(default=None, description="Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.", alias="networkInterfaceTapConfigurations")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the virtual network tap. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    resource_guid: Optional[StrictStr] = Field(default=None, description="The resourceGuid property of the virtual network tap.", alias="resourceGuid")
    __properties: ClassVar[List[str]] = ["destinationLoadBalancerFrontEndIPConfiguration", "destinationNetworkInterfaceIPConfiguration", "destinationPort", "networkInterfaceTapConfigurations", "provisioningState", "resourceGuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "network_interface_tap_configurations",
            "provisioning_state",
            "resource_guid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_load_balancer_front_end_ip_configuration
        if self.destination_load_balancer_front_end_ip_configuration:
            _dict['destinationLoadBalancerFrontEndIPConfiguration'] = self.destination_load_balancer_front_end_ip_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_network_interface_ip_configuration
        if self.destination_network_interface_ip_configuration:
            _dict['destinationNetworkInterfaceIPConfiguration'] = self.destination_network_interface_ip_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_interface_tap_configurations (list)
        _items = []
        if self.network_interface_tap_configurations:
            for _item_network_interface_tap_configurations in self.network_interface_tap_configurations:
                if _item_network_interface_tap_configurations:
                    _items.append(_item_network_interface_tap_configurations.to_dict())
            _dict['networkInterfaceTapConfigurations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinationLoadBalancerFrontEndIPConfiguration": ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfiguration.from_dict(obj["destinationLoadBalancerFrontEndIPConfiguration"]) if obj.get("destinationLoadBalancerFrontEndIPConfiguration") is not None else None,
            "destinationNetworkInterfaceIPConfiguration": ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesIpConfigurationsInner.from_dict(obj["destinationNetworkInterfaceIPConfiguration"]) if obj.get("destinationNetworkInterfaceIPConfiguration") is not None else None,
            "destinationPort": obj.get("destinationPort"),
            "networkInterfaceTapConfigurations": [ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroupPropertiesNetworkInterfacesInnerPropertiesTapConfigurationsInner.from_dict(_item) for _item in obj["networkInterfaceTapConfigurations"]] if obj.get("networkInterfaceTapConfigurations") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceGuid": obj.get("resourceGuid")
        })
        return _obj



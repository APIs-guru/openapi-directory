# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.redirect_type_enum import RedirectTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayRedirectConfigurationPropertiesFormat(BaseModel):
    """
    Properties of redirect configuration of the application gateway.
    """ # noqa: E501
    include_path: Optional[StrictBool] = Field(default=None, description="Include path in the redirected url.", alias="includePath")
    include_query_string: Optional[StrictBool] = Field(default=None, description="Include query string in the redirected url.", alias="includeQueryString")
    path_rules: Optional[List[Model0]] = Field(default=None, description="Path rules specifying redirect configuration.", alias="pathRules")
    redirect_type: Optional[RedirectTypeEnum] = Field(default=None, alias="redirectType")
    request_routing_rules: Optional[List[Model0]] = Field(default=None, description="Request routing specifying redirect configuration.", alias="requestRoutingRules")
    target_listener: Optional[Model0] = Field(default=None, alias="targetListener")
    target_url: Optional[StrictStr] = Field(default=None, description="Url to redirect the request to.", alias="targetUrl")
    url_path_maps: Optional[List[Model0]] = Field(default=None, description="Url path maps specifying default redirect configuration.", alias="urlPathMaps")
    __properties: ClassVar[List[str]] = ["includePath", "includeQueryString", "pathRules", "redirectType", "requestRoutingRules", "targetListener", "targetUrl", "urlPathMaps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayRedirectConfigurationPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in path_rules (list)
        _items = []
        if self.path_rules:
            for _item_path_rules in self.path_rules:
                if _item_path_rules:
                    _items.append(_item_path_rules.to_dict())
            _dict['pathRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in request_routing_rules (list)
        _items = []
        if self.request_routing_rules:
            for _item_request_routing_rules in self.request_routing_rules:
                if _item_request_routing_rules:
                    _items.append(_item_request_routing_rules.to_dict())
            _dict['requestRoutingRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of target_listener
        if self.target_listener:
            _dict['targetListener'] = self.target_listener.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in url_path_maps (list)
        _items = []
        if self.url_path_maps:
            for _item_url_path_maps in self.url_path_maps:
                if _item_url_path_maps:
                    _items.append(_item_url_path_maps.to_dict())
            _dict['urlPathMaps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayRedirectConfigurationPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includePath": obj.get("includePath"),
            "includeQueryString": obj.get("includeQueryString"),
            "pathRules": [Model0.from_dict(_item) for _item in obj["pathRules"]] if obj.get("pathRules") is not None else None,
            "redirectType": obj.get("redirectType"),
            "requestRoutingRules": [Model0.from_dict(_item) for _item in obj["requestRoutingRules"]] if obj.get("requestRoutingRules") is not None else None,
            "targetListener": Model0.from_dict(obj["targetListener"]) if obj.get("targetListener") is not None else None,
            "targetUrl": obj.get("targetUrl"),
            "urlPathMaps": [Model0.from_dict(_item) for _item in obj["urlPathMaps"]] if obj.get("urlPathMaps") is not None else None
        })
        return _obj



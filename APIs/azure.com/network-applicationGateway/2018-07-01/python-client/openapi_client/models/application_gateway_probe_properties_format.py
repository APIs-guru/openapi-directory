# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_probe_health_response_match import ApplicationGatewayProbeHealthResponseMatch
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayProbePropertiesFormat(BaseModel):
    """
    Properties of probe of an application gateway.
    """ # noqa: E501
    host: Optional[StrictStr] = Field(default=None, description="Host name to send the probe to.")
    interval: Optional[StrictInt] = Field(default=None, description="The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.")
    match: Optional[ApplicationGatewayProbeHealthResponseMatch] = None
    min_servers: Optional[StrictInt] = Field(default=None, description="Minimum number of servers that are always marked healthy. Default value is 0.", alias="minServers")
    path: Optional[StrictStr] = Field(default=None, description="Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>")
    pick_host_name_from_backend_http_settings: Optional[StrictBool] = Field(default=None, description="Whether the host header should be picked from the backend http settings. Default value is false.", alias="pickHostNameFromBackendHttpSettings")
    protocol: Optional[StrictStr] = Field(default=None, description="The protocol used for the probe. Possible values are 'Http' and 'Https'.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    timeout: Optional[StrictInt] = Field(default=None, description="the probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.")
    unhealthy_threshold: Optional[StrictInt] = Field(default=None, description="The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.", alias="unhealthyThreshold")
    __properties: ClassVar[List[str]] = ["host", "interval", "match", "minServers", "path", "pickHostNameFromBackendHttpSettings", "protocol", "provisioningState", "timeout", "unhealthyThreshold"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Http', 'Https']):
            raise ValueError("must be one of enum values ('Http', 'Https')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayProbePropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of match
        if self.match:
            _dict['match'] = self.match.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayProbePropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "host": obj.get("host"),
            "interval": obj.get("interval"),
            "match": ApplicationGatewayProbeHealthResponseMatch.from_dict(obj["match"]) if obj.get("match") is not None else None,
            "minServers": obj.get("minServers"),
            "path": obj.get("path"),
            "pickHostNameFromBackendHttpSettings": obj.get("pickHostNameFromBackendHttpSettings"),
            "protocol": obj.get("protocol"),
            "provisioningState": obj.get("provisioningState"),
            "timeout": obj.get("timeout"),
            "unhealthyThreshold": obj.get("unhealthyThreshold")
        })
        return _obj



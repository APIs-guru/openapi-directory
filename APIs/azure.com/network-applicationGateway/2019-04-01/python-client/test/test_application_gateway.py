# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.application_gateway import ApplicationGateway

class TestApplicationGateway(unittest.TestCase):
    """ApplicationGateway unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationGateway:
        """Test ApplicationGateway
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationGateway`
        """
        model = ApplicationGateway()
        if include_optional:
            return ApplicationGateway(
                etag = '',
                identity = None,
                properties = openapi_client.models.application_gateway_properties_format.ApplicationGatewayPropertiesFormat(
                    authentication_certificates = [
                        openapi_client.models.application_gateway_authentication_certificate.ApplicationGatewayAuthenticationCertificate(
                            etag = '', 
                            name = '', 
                            properties = openapi_client.models.application_gateway_authentication_certificate_properties_format.ApplicationGatewayAuthenticationCertificatePropertiesFormat(
                                data = '', 
                                provisioning_state = '', ), 
                            type = '', )
                        ], 
                    autoscale_configuration = openapi_client.models.application_gateway_autoscale_configuration.ApplicationGatewayAutoscaleConfiguration(
                        max_capacity = 2, 
                        min_capacity = 0, ), 
                    backend_address_pools = [
                        openapi_client.models.application_gateway_backend_address_pool.ApplicationGatewayBackendAddressPool(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    backend_http_settings_collection = [
                        openapi_client.models.application_gateway_backend_http_settings.ApplicationGatewayBackendHttpSettings(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    custom_error_configurations = [
                        openapi_client.models.application_gateway_custom_error.ApplicationGatewayCustomError(
                            custom_error_page_url = '', 
                            status_code = 'HttpStatus403', )
                        ], 
                    enable_fips = True, 
                    enable_http2 = True, 
                    firewall_policy = None, 
                    frontend_ip_configurations = [
                        openapi_client.models.application_gateway_frontend_ip_configuration.ApplicationGatewayFrontendIPConfiguration(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    frontend_ports = [
                        openapi_client.models.application_gateway_frontend_port.ApplicationGatewayFrontendPort(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    gateway_ip_configurations = [
                        openapi_client.models.application_gateway_ip_configuration.ApplicationGatewayIPConfiguration(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    http_listeners = [
                        openapi_client.models.application_gateway_http_listener.ApplicationGatewayHttpListener(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    operational_state = 'Stopped', 
                    probes = [
                        openapi_client.models.application_gateway_probe.ApplicationGatewayProbe(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    provisioning_state = '', 
                    redirect_configurations = [
                        openapi_client.models.application_gateway_redirect_configuration.ApplicationGatewayRedirectConfiguration(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    request_routing_rules = [
                        openapi_client.models.application_gateway_request_routing_rule.ApplicationGatewayRequestRoutingRule(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    resource_guid = '', 
                    rewrite_rule_sets = [
                        openapi_client.models.application_gateway_rewrite_rule_set.ApplicationGatewayRewriteRuleSet(
                            etag = '', 
                            name = '', )
                        ], 
                    sku = openapi_client.models.application_gateway_sku.ApplicationGatewaySku(
                        capacity = 56, 
                        name = 'Standard_Small', 
                        tier = 'Standard', ), 
                    ssl_certificates = [
                        openapi_client.models.application_gateway_ssl_certificate.ApplicationGatewaySslCertificate(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    ssl_policy = openapi_client.models.application_gateway_ssl_policy.ApplicationGatewaySslPolicy(
                        cipher_suites = [
                            'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384'
                            ], 
                        disabled_ssl_protocols = [
                            'TLSv1_0'
                            ], 
                        min_protocol_version = 'TLSv1_0', 
                        policy_name = 'AppGwSslPolicy20150501', 
                        policy_type = 'Predefined', ), 
                    trusted_root_certificates = [
                        openapi_client.models.application_gateway_trusted_root_certificate.ApplicationGatewayTrustedRootCertificate(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    url_path_maps = [
                        openapi_client.models.application_gateway_url_path_map.ApplicationGatewayUrlPathMap(
                            etag = '', 
                            name = '', 
                            type = '', )
                        ], 
                    web_application_firewall_configuration = openapi_client.models.application_gateway_web_application_firewall_configuration.ApplicationGatewayWebApplicationFirewallConfiguration(
                        disabled_rule_groups = [
                            openapi_client.models.application_gateway_firewall_disabled_rule_group.ApplicationGatewayFirewallDisabledRuleGroup(
                                rule_group_name = '', 
                                rules = [
                                    56
                                    ], )
                            ], 
                        enabled = True, 
                        exclusions = [
                            openapi_client.models.application_gateway_firewall_exclusion.ApplicationGatewayFirewallExclusion(
                                match_variable = '', 
                                selector = '', 
                                selector_match_operator = '', )
                            ], 
                        file_upload_limit_in_mb = 0, 
                        firewall_mode = 'Detection', 
                        max_request_body_size = 8, 
                        max_request_body_size_in_kb = 8, 
                        request_body_check = True, 
                        rule_set_type = '', 
                        rule_set_version = '', ), ),
                zones = [
                    ''
                    ],
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return ApplicationGateway(
        )
        """

    def testApplicationGateway(self):
        """Test ApplicationGateway"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties(BaseModel):
    """
    Properties of Frontend IP Configuration of the load balancer.
    """ # noqa: E501
    inbound_nat_pools: Optional[List[Model0]] = Field(default=None, description="An array of references to inbound pools that use this frontend IP.", alias="inboundNatPools")
    inbound_nat_rules: Optional[List[Model0]] = Field(default=None, description="An array of references to inbound rules that use this frontend IP.", alias="inboundNatRules")
    load_balancing_rules: Optional[List[Model0]] = Field(default=None, description="An array of references to load balancing rules that use this frontend IP.", alias="loadBalancingRules")
    outbound_rules: Optional[List[Model0]] = Field(default=None, description="An array of references to outbound rules that use this frontend IP.", alias="outboundRules")
    private_ip_address: Optional[StrictStr] = Field(default=None, description="The private IP address of the IP configuration.", alias="privateIPAddress")
    private_ip_address_version: Optional[PrivateIPAddressVersion] = Field(default=None, alias="privateIPAddressVersion")
    private_ip_allocation_method: Optional[PrivateIPAllocationMethod] = Field(default=None, alias="privateIPAllocationMethod")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    public_ip_address: Optional[PublicIPAddress] = Field(default=None, alias="publicIPAddress")
    public_ip_prefix: Optional[Model0] = Field(default=None, alias="publicIPPrefix")
    subnet: Optional[Subnet] = None
    __properties: ClassVar[List[str]] = ["inboundNatPools", "inboundNatRules", "loadBalancingRules", "outboundRules", "privateIPAddress", "privateIPAddressVersion", "privateIPAllocationMethod", "provisioningState", "publicIPAddress", "publicIPPrefix", "subnet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "inbound_nat_pools",
            "inbound_nat_rules",
            "load_balancing_rules",
            "outbound_rules",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_nat_pools (list)
        _items = []
        if self.inbound_nat_pools:
            for _item_inbound_nat_pools in self.inbound_nat_pools:
                if _item_inbound_nat_pools:
                    _items.append(_item_inbound_nat_pools.to_dict())
            _dict['inboundNatPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_nat_rules (list)
        _items = []
        if self.inbound_nat_rules:
            for _item_inbound_nat_rules in self.inbound_nat_rules:
                if _item_inbound_nat_rules:
                    _items.append(_item_inbound_nat_rules.to_dict())
            _dict['inboundNatRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancing_rules (list)
        _items = []
        if self.load_balancing_rules:
            for _item_load_balancing_rules in self.load_balancing_rules:
                if _item_load_balancing_rules:
                    _items.append(_item_load_balancing_rules.to_dict())
            _dict['loadBalancingRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outbound_rules (list)
        _items = []
        if self.outbound_rules:
            for _item_outbound_rules in self.outbound_rules:
                if _item_outbound_rules:
                    _items.append(_item_outbound_rules.to_dict())
            _dict['outboundRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of private_ip_address_version
        if self.private_ip_address_version:
            _dict['privateIPAddressVersion'] = self.private_ip_address_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_ip_allocation_method
        if self.private_ip_allocation_method:
            _dict['privateIPAllocationMethod'] = self.private_ip_allocation_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provisioning_state
        if self.provisioning_state:
            _dict['provisioningState'] = self.provisioning_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_ip_address
        if self.public_ip_address:
            _dict['publicIPAddress'] = self.public_ip_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_ip_prefix
        if self.public_ip_prefix:
            _dict['publicIPPrefix'] = self.public_ip_prefix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesVirtualNetworkTapsInnerPropertiesDestinationLoadBalancerFrontEndIPConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inboundNatPools": [Model0.from_dict(_item) for _item in obj["inboundNatPools"]] if obj.get("inboundNatPools") is not None else None,
            "inboundNatRules": [Model0.from_dict(_item) for _item in obj["inboundNatRules"]] if obj.get("inboundNatRules") is not None else None,
            "loadBalancingRules": [Model0.from_dict(_item) for _item in obj["loadBalancingRules"]] if obj.get("loadBalancingRules") is not None else None,
            "outboundRules": [Model0.from_dict(_item) for _item in obj["outboundRules"]] if obj.get("outboundRules") is not None else None,
            "privateIPAddress": obj.get("privateIPAddress"),
            "privateIPAddressVersion": PrivateIPAddressVersion.from_dict(obj["privateIPAddressVersion"]) if obj.get("privateIPAddressVersion") is not None else None,
            "privateIPAllocationMethod": PrivateIPAllocationMethod.from_dict(obj["privateIPAllocationMethod"]) if obj.get("privateIPAllocationMethod") is not None else None,
            "provisioningState": ProvisioningState.from_dict(obj["provisioningState"]) if obj.get("provisioningState") is not None else None,
            "publicIPAddress": PublicIPAddress.from_dict(obj["publicIPAddress"]) if obj.get("publicIPAddress") is not None else None,
            "publicIPPrefix": Model0.from_dict(obj["publicIPPrefix"]) if obj.get("publicIPPrefix") is not None else None,
            "subnet": Subnet.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None
        })
        return _obj



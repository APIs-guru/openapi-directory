# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_private_endpoints_inner_properties_private_link_service_connections_inner_properties_private_link_service_connection_state import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInnerPropertiesPrivateLinkServiceConnectionState
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInnerProperties(BaseModel):
    """
    Properties of the PrivateLinkServiceConnection.
    """ # noqa: E501
    group_ids: Optional[List[StrictStr]] = Field(default=None, description="The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.", alias="groupIds")
    private_link_service_connection_state: Optional[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInnerPropertiesPrivateLinkServiceConnectionState] = Field(default=None, alias="privateLinkServiceConnectionState")
    private_link_service_id: Optional[StrictStr] = Field(default=None, description="The resource id of private link service.", alias="privateLinkServiceId")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    request_message: Optional[StrictStr] = Field(default=None, description="A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.", alias="requestMessage")
    __properties: ClassVar[List[str]] = ["groupIds", "privateLinkServiceConnectionState", "privateLinkServiceId", "provisioningState", "requestMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of private_link_service_connection_state
        if self.private_link_service_connection_state:
            _dict['privateLinkServiceConnectionState'] = self.private_link_service_connection_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provisioning_state
        if self.provisioning_state:
            _dict['provisioningState'] = self.provisioning_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupIds": obj.get("groupIds"),
            "privateLinkServiceConnectionState": ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesPrivateEndpointsInnerPropertiesPrivateLinkServiceConnectionsInnerPropertiesPrivateLinkServiceConnectionState.from_dict(obj["privateLinkServiceConnectionState"]) if obj.get("privateLinkServiceConnectionState") is not None else None,
            "privateLinkServiceId": obj.get("privateLinkServiceId"),
            "provisioningState": ProvisioningState.from_dict(obj["provisioningState"]) if obj.get("provisioningState") is not None else None,
            "requestMessage": obj.get("requestMessage")
        })
        return _obj



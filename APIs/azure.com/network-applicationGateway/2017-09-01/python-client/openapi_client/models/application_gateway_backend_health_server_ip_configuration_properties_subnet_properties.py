# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2017-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_ip_configurations_inner import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInner
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_network_security_group import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_resource_navigation_links_inner import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_route_table import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable
from openapi_client.models.application_gateway_backend_health_server_ip_configuration_properties_subnet_properties_service_endpoints_inner import ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties(BaseModel):
    """
    Properties of the subnet.
    """ # noqa: E501
    address_prefix: Optional[StrictStr] = Field(default=None, description="The address prefix for the subnet.", alias="addressPrefix")
    ip_configurations: Optional[List[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInner]] = Field(default=None, description="Gets an array of references to the network interface IP configurations using subnet.", alias="ipConfigurations")
    network_security_group: Optional[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup] = Field(default=None, alias="networkSecurityGroup")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the resource.", alias="provisioningState")
    resource_navigation_links: Optional[List[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner]] = Field(default=None, description="Gets an array of references to the external resources using subnet.", alias="resourceNavigationLinks")
    route_table: Optional[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable] = Field(default=None, alias="routeTable")
    service_endpoints: Optional[List[ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner]] = Field(default=None, description="An array of service endpoints.", alias="serviceEndpoints")
    __properties: ClassVar[List[str]] = ["addressPrefix", "ipConfigurations", "networkSecurityGroup", "provisioningState", "resourceNavigationLinks", "routeTable", "serviceEndpoints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ip_configurations",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ip_configurations (list)
        _items = []
        if self.ip_configurations:
            for _item_ip_configurations in self.ip_configurations:
                if _item_ip_configurations:
                    _items.append(_item_ip_configurations.to_dict())
            _dict['ipConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_security_group
        if self.network_security_group:
            _dict['networkSecurityGroup'] = self.network_security_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resource_navigation_links (list)
        _items = []
        if self.resource_navigation_links:
            for _item_resource_navigation_links in self.resource_navigation_links:
                if _item_resource_navigation_links:
                    _items.append(_item_resource_navigation_links.to_dict())
            _dict['resourceNavigationLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of route_table
        if self.route_table:
            _dict['routeTable'] = self.route_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_endpoints (list)
        _items = []
        if self.service_endpoints:
            for _item_service_endpoints in self.service_endpoints:
                if _item_service_endpoints:
                    _items.append(_item_service_endpoints.to_dict())
            _dict['serviceEndpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressPrefix": obj.get("addressPrefix"),
            "ipConfigurations": [ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesIpConfigurationsInner.from_dict(_item) for _item in obj["ipConfigurations"]] if obj.get("ipConfigurations") is not None else None,
            "networkSecurityGroup": ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesNetworkSecurityGroup.from_dict(obj["networkSecurityGroup"]) if obj.get("networkSecurityGroup") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceNavigationLinks": [ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesResourceNavigationLinksInner.from_dict(_item) for _item in obj["resourceNavigationLinks"]] if obj.get("resourceNavigationLinks") is not None else None,
            "routeTable": ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesRouteTable.from_dict(obj["routeTable"]) if obj.get("routeTable") is not None else None,
            "serviceEndpoints": [ApplicationGatewayBackendHealthServerIpConfigurationPropertiesSubnetPropertiesServiceEndpointsInner.from_dict(_item) for _item in obj["serviceEndpoints"]] if obj.get("serviceEndpoints") is not None else None
        })
        return _obj



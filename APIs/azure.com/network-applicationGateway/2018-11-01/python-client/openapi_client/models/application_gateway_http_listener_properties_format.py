# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_custom_error import ApplicationGatewayCustomError
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayHttpListenerPropertiesFormat(BaseModel):
    """
    Properties of HTTP listener of an application gateway.
    """ # noqa: E501
    custom_error_configurations: Optional[List[ApplicationGatewayCustomError]] = Field(default=None, description="Custom error configurations of the HTTP listener.", alias="customErrorConfigurations")
    frontend_ip_configuration: Optional[Model0] = Field(default=None, alias="frontendIPConfiguration")
    frontend_port: Optional[Model0] = Field(default=None, alias="frontendPort")
    host_name: Optional[StrictStr] = Field(default=None, description="Host name of HTTP listener.", alias="hostName")
    protocol: Optional[StrictStr] = Field(default=None, description="Protocol of the HTTP listener. Possible values are 'Http' and 'Https'.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the HTTP listener resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    require_server_name_indication: Optional[StrictBool] = Field(default=None, description="Applicable only if protocol is https. Enables SNI for multi-hosting.", alias="requireServerNameIndication")
    ssl_certificate: Optional[Model0] = Field(default=None, alias="sslCertificate")
    __properties: ClassVar[List[str]] = ["customErrorConfigurations", "frontendIPConfiguration", "frontendPort", "hostName", "protocol", "provisioningState", "requireServerNameIndication", "sslCertificate"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Http', 'Https']):
            raise ValueError("must be one of enum values ('Http', 'Https')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayHttpListenerPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_error_configurations (list)
        _items = []
        if self.custom_error_configurations:
            for _item_custom_error_configurations in self.custom_error_configurations:
                if _item_custom_error_configurations:
                    _items.append(_item_custom_error_configurations.to_dict())
            _dict['customErrorConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of frontend_ip_configuration
        if self.frontend_ip_configuration:
            _dict['frontendIPConfiguration'] = self.frontend_ip_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frontend_port
        if self.frontend_port:
            _dict['frontendPort'] = self.frontend_port.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssl_certificate
        if self.ssl_certificate:
            _dict['sslCertificate'] = self.ssl_certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayHttpListenerPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customErrorConfigurations": [ApplicationGatewayCustomError.from_dict(_item) for _item in obj["customErrorConfigurations"]] if obj.get("customErrorConfigurations") is not None else None,
            "frontendIPConfiguration": Model0.from_dict(obj["frontendIPConfiguration"]) if obj.get("frontendIPConfiguration") is not None else None,
            "frontendPort": Model0.from_dict(obj["frontendPort"]) if obj.get("frontendPort") is not None else None,
            "hostName": obj.get("hostName"),
            "protocol": obj.get("protocol"),
            "provisioningState": obj.get("provisioningState"),
            "requireServerNameIndication": obj.get("requireServerNameIndication"),
            "sslCertificate": Model0.from_dict(obj["sslCertificate"]) if obj.get("sslCertificate") is not None else None
        })
        return _obj



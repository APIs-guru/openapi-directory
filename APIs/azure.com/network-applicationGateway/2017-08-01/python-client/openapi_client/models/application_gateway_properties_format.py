# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2017-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_sku import ApplicationGatewaySku
from openapi_client.models.application_gateway_ssl_policy import ApplicationGatewaySslPolicy
from openapi_client.models.application_gateway_web_application_firewall_configuration import ApplicationGatewayWebApplicationFirewallConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayPropertiesFormat(BaseModel):
    """
    Properties of the application gateway.
    """ # noqa: E501
    authentication_certificates: Optional[List[object]] = Field(default=None, description="Authentication certificates of the application gateway resource.", alias="authenticationCertificates")
    backend_address_pools: Optional[List[object]] = Field(default=None, description="Backend address pool of the application gateway resource.", alias="backendAddressPools")
    backend_http_settings_collection: Optional[List[object]] = Field(default=None, description="Backend http settings of the application gateway resource.", alias="backendHttpSettingsCollection")
    frontend_ip_configurations: Optional[List[object]] = Field(default=None, description="Frontend IP addresses of the application gateway resource.", alias="frontendIPConfigurations")
    frontend_ports: Optional[List[object]] = Field(default=None, description="Frontend ports of the application gateway resource.", alias="frontendPorts")
    gateway_ip_configurations: Optional[List[object]] = Field(default=None, description="Subnets of application the gateway resource.", alias="gatewayIPConfigurations")
    http_listeners: Optional[List[object]] = Field(default=None, description="Http listeners of the application gateway resource.", alias="httpListeners")
    operational_state: Optional[StrictStr] = Field(default=None, description="Operational state of the application gateway resource.", alias="operationalState")
    probes: Optional[List[object]] = Field(default=None, description="Probes of the application gateway resource.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the application gateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    redirect_configurations: Optional[List[object]] = Field(default=None, description="Redirect configurations of the application gateway resource.", alias="redirectConfigurations")
    request_routing_rules: Optional[List[object]] = Field(default=None, description="Request routing rules of the application gateway resource.", alias="requestRoutingRules")
    resource_guid: Optional[StrictStr] = Field(default=None, description="Resource GUID property of the application gateway resource.", alias="resourceGuid")
    sku: Optional[ApplicationGatewaySku] = None
    ssl_certificates: Optional[List[object]] = Field(default=None, description="SSL certificates of the application gateway resource.", alias="sslCertificates")
    ssl_policy: Optional[ApplicationGatewaySslPolicy] = Field(default=None, alias="sslPolicy")
    url_path_maps: Optional[List[object]] = Field(default=None, description="URL path map of the application gateway resource.", alias="urlPathMaps")
    web_application_firewall_configuration: Optional[ApplicationGatewayWebApplicationFirewallConfiguration] = Field(default=None, alias="webApplicationFirewallConfiguration")
    __properties: ClassVar[List[str]] = ["authenticationCertificates", "backendAddressPools", "backendHttpSettingsCollection", "frontendIPConfigurations", "frontendPorts", "gatewayIPConfigurations", "httpListeners", "operationalState", "probes", "provisioningState", "redirectConfigurations", "requestRoutingRules", "resourceGuid", "sku", "sslCertificates", "sslPolicy", "urlPathMaps", "webApplicationFirewallConfiguration"]

    @field_validator('operational_state')
    def operational_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Stopped', 'Starting', 'Running', 'Stopping']):
            raise ValueError("must be one of enum values ('Stopped', 'Starting', 'Running', 'Stopping')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "operational_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssl_policy
        if self.ssl_policy:
            _dict['sslPolicy'] = self.ssl_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_application_firewall_configuration
        if self.web_application_firewall_configuration:
            _dict['webApplicationFirewallConfiguration'] = self.web_application_firewall_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationCertificates": obj.get("authenticationCertificates"),
            "backendAddressPools": obj.get("backendAddressPools"),
            "backendHttpSettingsCollection": obj.get("backendHttpSettingsCollection"),
            "frontendIPConfigurations": obj.get("frontendIPConfigurations"),
            "frontendPorts": obj.get("frontendPorts"),
            "gatewayIPConfigurations": obj.get("gatewayIPConfigurations"),
            "httpListeners": obj.get("httpListeners"),
            "operationalState": obj.get("operationalState"),
            "probes": obj.get("probes"),
            "provisioningState": obj.get("provisioningState"),
            "redirectConfigurations": obj.get("redirectConfigurations"),
            "requestRoutingRules": obj.get("requestRoutingRules"),
            "resourceGuid": obj.get("resourceGuid"),
            "sku": ApplicationGatewaySku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "sslCertificates": obj.get("sslCertificates"),
            "sslPolicy": ApplicationGatewaySslPolicy.from_dict(obj["sslPolicy"]) if obj.get("sslPolicy") is not None else None,
            "urlPathMaps": obj.get("urlPathMaps"),
            "webApplicationFirewallConfiguration": ApplicationGatewayWebApplicationFirewallConfiguration.from_dict(obj["webApplicationFirewallConfiguration"]) if obj.get("webApplicationFirewallConfiguration") is not None else None
        })
        return _obj



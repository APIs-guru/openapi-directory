# coding: utf-8

"""
    IotCentralClient

    Use this API to manage IoT Central Applications in your Azure subscription.

    The version of the OpenAPI document: 2018-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AppTemplate(BaseModel):
    """
    IoT Central Application Template.
    """ # noqa: E501
    app_template_name: Optional[StrictStr] = Field(default=None, description="The name of the template.", alias="appTemplateName")
    description: Optional[StrictStr] = Field(default=None, description="The description of the template.")
    manifest_id: Optional[StrictStr] = Field(default=None, description="The ID of the template.", alias="manifestId")
    manifest_version: Optional[StrictStr] = Field(default=None, description="The version of the template.", alias="manifestVersion")
    order: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The order of the template in the templates list.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the template.")
    __properties: ClassVar[List[str]] = ["appTemplateName", "description", "manifestId", "manifestVersion", "order", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "app_template_name",
            "description",
            "manifest_id",
            "manifest_version",
            "order",
            "title",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appTemplateName": obj.get("appTemplateName"),
            "description": obj.get("description"),
            "manifestId": obj.get("manifestId"),
            "manifestVersion": obj.get("manifestVersion"),
            "order": obj.get("order"),
            "title": obj.get("title")
        })
        return _obj



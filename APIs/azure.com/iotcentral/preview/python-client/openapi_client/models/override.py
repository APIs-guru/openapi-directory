# coding: utf-8

"""
    Azure IoT Central

    Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.

    The version of the OpenAPI document: preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.capability_reference import CapabilityReference
from openapi_client.models.value_detail import ValueDetail
from typing import Optional, Set
from typing_extensions import Self

class Override(BaseModel):
    """
    Override
    """ # noqa: E501
    context: Optional[Dict[str, Any]] = Field(default=None, description="JSON-LD context for the entity.", alias="@context")
    id: Optional[StrictStr] = Field(default=None, description="Unique ID of the entity.", alias="@id")
    type: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Type of the entity.", alias="@type")
    comment: Optional[StrictStr] = Field(default=None, description="Developer comment about the entity.")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of the entity.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the entity.", alias="displayName")
    capability: Optional[CapabilityReference] = None
    display_unit: Optional[StrictStr] = Field(default=None, description="The overridden display unit.", alias="displayUnit")
    semantic_type: Optional[StrictStr] = Field(default=None, description="The overridden semantic type.", alias="semanticType")
    unit: Optional[StrictStr] = Field(default=None, description="The overridden unit.")
    value_detail: Optional[ValueDetail] = Field(default=None, alias="valueDetail")
    __properties: ClassVar[List[str]] = ["@context", "@id", "@type", "comment", "description", "displayName", "capability", "displayUnit", "semanticType", "unit", "valueDetail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Override from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capability
        if self.capability:
            _dict['capability'] = self.capability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_detail
        if self.value_detail:
            _dict['valueDetail'] = self.value_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Override from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": obj.get("@context"),
            "@id": obj.get("@id"),
            "@type": obj.get("@type"),
            "comment": obj.get("comment"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "capability": CapabilityReference.from_dict(obj["capability"]) if obj.get("capability") is not None else None,
            "displayUnit": obj.get("displayUnit"),
            "semanticType": obj.get("semanticType"),
            "unit": obj.get("unit"),
            "valueDetail": ValueDetail.from_dict(obj["valueDetail"]) if obj.get("valueDetail") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Azure IoT Central

    Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.

    The version of the OpenAPI document: preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.capability_model import CapabilityModel
from openapi_client.models.solution_model import SolutionModel
from typing import Optional, Set
from typing_extensions import Self

class DeviceTemplate(BaseModel):
    """
    DeviceTemplate
    """ # noqa: E501
    capability_model: CapabilityModel = Field(alias="capabilityModel")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of the device template.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the device template.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="ETag used to prevent conflict in device template updates.")
    id: Optional[StrictStr] = Field(default=None, description="Unique ID of the device template.")
    solution_model: Optional[SolutionModel] = Field(default=None, alias="solutionModel")
    types: List[StrictStr] = Field(description="The types of device to which this template applies.")
    __properties: ClassVar[List[str]] = ["capabilityModel", "description", "displayName", "etag", "id", "solutionModel", "types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capability_model
        if self.capability_model:
            _dict['capabilityModel'] = self.capability_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of solution_model
        if self.solution_model:
            _dict['solutionModel'] = self.solution_model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilityModel": CapabilityModel.from_dict(obj["capabilityModel"]) if obj.get("capabilityModel") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "solutionModel": SolutionModel.from_dict(obj["solutionModel"]) if obj.get("solutionModel") is not None else None,
            "types": obj.get("types")
        })
        return _obj



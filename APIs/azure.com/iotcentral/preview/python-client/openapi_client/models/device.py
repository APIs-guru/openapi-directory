# coding: utf-8

"""
    Azure IoT Central

    Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.

    The version of the OpenAPI document: preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Device(BaseModel):
    """
    Device
    """ # noqa: E501
    approved: Optional[StrictBool] = Field(default=None, description="Whether the device has been approved to connect to IoT Central.")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of the device.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the device.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="ETag used to prevent conflict in device updates.")
    id: Optional[StrictStr] = Field(default=None, description="Unique ID of the device.")
    instance_of: StrictStr = Field(description="The model definition for the device.", alias="instanceOf")
    provisioned: Optional[StrictBool] = Field(default=None, description="Whether resources have been allocated for the device.")
    simulated: Optional[StrictBool] = Field(default=None, description="Whether the device is simulated.")
    __properties: ClassVar[List[str]] = ["approved", "description", "displayName", "etag", "id", "instanceOf", "provisioned", "simulated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "provisioned",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approved": obj.get("approved"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "instanceOf": obj.get("instanceOf"),
            "provisioned": obj.get("provisioned"),
            "simulated": obj.get("simulated")
        })
        return _obj



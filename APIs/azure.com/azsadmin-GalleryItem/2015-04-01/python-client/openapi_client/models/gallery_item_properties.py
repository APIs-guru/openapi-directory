# coding: utf-8

"""
    GalleryManagementClient

    The Admin Gallery Management Client.

    The version of the OpenAPI document: 2015-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.artifact import Artifact
from openapi_client.models.definition_templates import DefinitionTemplates
from openapi_client.models.filter import Filter
from openapi_client.models.gallery_item_properties_icon_file_uris import GalleryItemPropertiesIconFileUris
from openapi_client.models.image_group import ImageGroup
from openapi_client.models.link_properties import LinkProperties
from openapi_client.models.marketing_material import MarketingMaterial
from openapi_client.models.open_property import OpenProperty
from openapi_client.models.product import Product
from typing import Optional, Set
from typing_extensions import Self

class GalleryItemProperties(BaseModel):
    """
    Properties of a gallery item.
    """ # noqa: E501
    additional_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="List of additional properties provided for the item.", alias="additionalProperties")
    artifacts: Optional[List[Artifact]] = Field(default=None, description="List of artifacts for the gallery item.")
    category_ids: Optional[List[StrictStr]] = Field(default=None, description="List of category IDs the gallery item belongs to.", alias="categoryIds")
    changed_time: Optional[datetime] = Field(default=None, description="Last update time of gallery item.", alias="changedTime")
    created_time: Optional[datetime] = Field(default=None, description="The date and time that the gallery item was created.", alias="createdTime")
    definition_templates: Optional[DefinitionTemplates] = Field(default=None, alias="definitionTemplates")
    description: Optional[StrictStr] = Field(default=None, description="The description of the gallery item.")
    filters: Optional[List[Filter]] = Field(default=None, description="List of filters for the gallery item.")
    icon_file_uris: Optional[GalleryItemPropertiesIconFileUris] = Field(default=None, alias="iconFileUris")
    identity: Optional[StrictStr] = Field(default=None, description="Identity of the gallery item.")
    images: Optional[List[ImageGroup]] = Field(default=None, description="List of images.")
    item_display_name: Optional[StrictStr] = Field(default=None, description="Displayed name in the portal.", alias="itemDisplayName")
    item_name: Optional[StrictStr] = Field(default=None, description="The display name for the gallery item, for the locale of the request.", alias="itemName")
    item_type: Optional[StrictStr] = Field(default=None, description="Describes the type of the gallery item, either GalleryItem or ItemGroup.", alias="itemType")
    links: Optional[List[LinkProperties]] = Field(default=None, description="Links provided for the item.")
    long_summary: Optional[StrictStr] = Field(default=None, description="Long summary of the gallery item.", alias="longSummary")
    marketing_material: Optional[MarketingMaterial] = Field(default=None, alias="marketingMaterial")
    metadata: Optional[OpenProperty] = None
    products: Optional[List[Product]] = Field(default=None, description="List of products.")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="List of properties provided for the gallery item.")
    publisher: Optional[StrictStr] = Field(default=None, description="The publisher of the gallery item.")
    publisher_display_name: Optional[StrictStr] = Field(default=None, description="Display name of the publisher.", alias="publisherDisplayName")
    resource_group_name: Optional[StrictStr] = Field(default=None, description="Resource group name the gallery item belongs too.", alias="resourceGroupName")
    screenshot_uris: Optional[List[StrictStr]] = Field(default=None, description="List of screenshot image URIs provided for the item.", alias="screenshotUris")
    summary: Optional[StrictStr] = Field(default=None, description="Short summary of the gallery item.")
    ui_definition_uri: Optional[StrictStr] = Field(default=None, description="The URL of the view definition object that defines the UI information that is used when an instance of the gallery item resource definition is created.", alias="uiDefinitionUri")
    version: Optional[StrictStr] = Field(default=None, description="The version identifier of the gallery item, in Major.Minor.Build format.")
    __properties: ClassVar[List[str]] = ["additionalProperties", "artifacts", "categoryIds", "changedTime", "createdTime", "definitionTemplates", "description", "filters", "iconFileUris", "identity", "images", "itemDisplayName", "itemName", "itemType", "links", "longSummary", "marketingMaterial", "metadata", "products", "properties", "publisher", "publisherDisplayName", "resourceGroupName", "screenshotUris", "summary", "uiDefinitionUri", "version"]

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GalleryItem', 'ItemGroup']):
            raise ValueError("must be one of enum values ('GalleryItem', 'ItemGroup')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GalleryItemProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
            "artifacts",
            "category_ids",
            "filters",
            "images",
            "links",
            "products",
            "properties",
            "screenshot_uris",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item_artifacts in self.artifacts:
                if _item_artifacts:
                    _items.append(_item_artifacts.to_dict())
            _dict['artifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of definition_templates
        if self.definition_templates:
            _dict['definitionTemplates'] = self.definition_templates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of icon_file_uris
        if self.icon_file_uris:
            _dict['iconFileUris'] = self.icon_file_uris.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of marketing_material
        if self.marketing_material:
            _dict['marketingMaterial'] = self.marketing_material.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GalleryItemProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalProperties": obj.get("additionalProperties"),
            "artifacts": [Artifact.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None,
            "categoryIds": obj.get("categoryIds"),
            "changedTime": obj.get("changedTime"),
            "createdTime": obj.get("createdTime"),
            "definitionTemplates": DefinitionTemplates.from_dict(obj["definitionTemplates"]) if obj.get("definitionTemplates") is not None else None,
            "description": obj.get("description"),
            "filters": [Filter.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "iconFileUris": GalleryItemPropertiesIconFileUris.from_dict(obj["iconFileUris"]) if obj.get("iconFileUris") is not None else None,
            "identity": obj.get("identity"),
            "images": [ImageGroup.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "itemDisplayName": obj.get("itemDisplayName"),
            "itemName": obj.get("itemName"),
            "itemType": obj.get("itemType"),
            "links": [LinkProperties.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "longSummary": obj.get("longSummary"),
            "marketingMaterial": MarketingMaterial.from_dict(obj["marketingMaterial"]) if obj.get("marketingMaterial") is not None else None,
            "metadata": OpenProperty.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "products": [Product.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "properties": obj.get("properties"),
            "publisher": obj.get("publisher"),
            "publisherDisplayName": obj.get("publisherDisplayName"),
            "resourceGroupName": obj.get("resourceGroupName"),
            "screenshotUris": obj.get("screenshotUris"),
            "summary": obj.get("summary"),
            "uiDefinitionUri": obj.get("uiDefinitionUri"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    GalleryManagementClient

    The Admin Gallery Management Client.

    The version of the OpenAPI document: 2015-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.offer_details import OfferDetails
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    Represents a product item read from the gallery item package.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the product.", alias="displayName")
    legal_terms: Optional[StrictStr] = Field(default=None, description="Legal terms of the product.", alias="legalTerms")
    legal_terms_uri: Optional[StrictStr] = Field(default=None, description="URI to the legal terms of the product.", alias="legalTermsUri")
    offer_details: Optional[OfferDetails] = Field(default=None, alias="offerDetails")
    pricing_details_uri: Optional[StrictStr] = Field(default=None, description="URI to the pricing details of the product.", alias="pricingDetailsUri")
    privacy_policy: Optional[StrictStr] = Field(default=None, description="Privacy policy of the product.", alias="privacyPolicy")
    privacy_policy_uri: Optional[StrictStr] = Field(default=None, description="URI to the privacy policy of the product.", alias="privacyPolicyUri")
    publisher_display_name: Optional[StrictStr] = Field(default=None, description="Publisher display name of the product.", alias="publisherDisplayName")
    __properties: ClassVar[List[str]] = ["displayName", "legalTerms", "legalTermsUri", "offerDetails", "pricingDetailsUri", "privacyPolicy", "privacyPolicyUri", "publisherDisplayName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of offer_details
        if self.offer_details:
            _dict['offerDetails'] = self.offer_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "legalTerms": obj.get("legalTerms"),
            "legalTermsUri": obj.get("legalTermsUri"),
            "offerDetails": OfferDetails.from_dict(obj["offerDetails"]) if obj.get("offerDetails") is not None else None,
            "pricingDetailsUri": obj.get("pricingDetailsUri"),
            "privacyPolicy": obj.get("privacyPolicy"),
            "privacyPolicyUri": obj.get("privacyPolicyUri"),
            "publisherDisplayName": obj.get("publisherDisplayName")
        })
        return _obj



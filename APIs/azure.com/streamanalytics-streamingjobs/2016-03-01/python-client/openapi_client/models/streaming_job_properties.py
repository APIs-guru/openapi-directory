# coding: utf-8

"""
    StreamAnalyticsManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compatibility_level import CompatibilityLevel
from openapi_client.models.events_out_of_order_policy import EventsOutOfOrderPolicy
from openapi_client.models.output_error_policy import OutputErrorPolicy
from openapi_client.models.output_start_mode import OutputStartMode
from openapi_client.models.sku import Sku
from openapi_client.models.streaming_job_properties_functions_inner import StreamingJobPropertiesFunctionsInner
from openapi_client.models.streaming_job_properties_inputs_inner import StreamingJobPropertiesInputsInner
from openapi_client.models.streaming_job_properties_outputs_inner import StreamingJobPropertiesOutputsInner
from openapi_client.models.streaming_job_properties_transformation import StreamingJobPropertiesTransformation
from typing import Optional, Set
from typing_extensions import Self

class StreamingJobProperties(BaseModel):
    """
    The properties that are associated with a streaming job.
    """ # noqa: E501
    compatibility_level: Optional[CompatibilityLevel] = Field(default=None, alias="compatibilityLevel")
    created_date: Optional[datetime] = Field(default=None, description="Value is an ISO-8601 formatted UTC timestamp indicating when the streaming job was created.", alias="createdDate")
    data_locale: Optional[StrictStr] = Field(default=None, description="The data locale of the stream analytics job. Value should be the name of a supported .NET Culture from the set https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx. Defaults to 'en-US' if none specified.", alias="dataLocale")
    etag: Optional[StrictStr] = Field(default=None, description="The current entity tag for the streaming job. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.")
    events_late_arrival_max_delay_in_seconds: Optional[StrictInt] = Field(default=None, description="The maximum tolerable delay in seconds where events arriving late could be included.  Supported range is -1 to 1814399 (20.23:59:59 days) and -1 is used to specify wait indefinitely. If the property is absent, it is interpreted to have a value of -1.", alias="eventsLateArrivalMaxDelayInSeconds")
    events_out_of_order_max_delay_in_seconds: Optional[StrictInt] = Field(default=None, description="The maximum tolerable delay in seconds where out-of-order events can be adjusted to be back in order.", alias="eventsOutOfOrderMaxDelayInSeconds")
    events_out_of_order_policy: Optional[EventsOutOfOrderPolicy] = Field(default=None, alias="eventsOutOfOrderPolicy")
    functions: Optional[List[StreamingJobPropertiesFunctionsInner]] = Field(default=None, description="A list of one or more functions for the streaming job. The name property for each function is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual transformation.")
    inputs: Optional[List[StreamingJobPropertiesInputsInner]] = Field(default=None, description="A list of one or more inputs to the streaming job. The name property for each input is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual input.")
    job_id: Optional[StrictStr] = Field(default=None, description="A GUID uniquely identifying the streaming job. This GUID is generated upon creation of the streaming job.", alias="jobId")
    job_state: Optional[StrictStr] = Field(default=None, description="Describes the state of the streaming job.", alias="jobState")
    last_output_event_time: Optional[datetime] = Field(default=None, description="Value is either an ISO-8601 formatted timestamp indicating the last output event time of the streaming job or null indicating that output has not yet been produced. In case of multiple outputs or multiple streams, this shows the latest value in that set.", alias="lastOutputEventTime")
    output_error_policy: Optional[OutputErrorPolicy] = Field(default=None, alias="outputErrorPolicy")
    output_start_mode: Optional[OutputStartMode] = Field(default=None, alias="outputStartMode")
    output_start_time: Optional[datetime] = Field(default=None, description="Value is either an ISO-8601 formatted time stamp that indicates the starting point of the output event stream, or null to indicate that the output event stream will start whenever the streaming job is started. This property must have a value if outputStartMode is set to CustomTime.", alias="outputStartTime")
    outputs: Optional[List[StreamingJobPropertiesOutputsInner]] = Field(default=None, description="A list of one or more outputs for the streaming job. The name property for each output is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual output.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Describes the provisioning status of the streaming job.", alias="provisioningState")
    sku: Optional[Sku] = None
    transformation: Optional[StreamingJobPropertiesTransformation] = None
    __properties: ClassVar[List[str]] = ["compatibilityLevel", "createdDate", "dataLocale", "etag", "eventsLateArrivalMaxDelayInSeconds", "eventsOutOfOrderMaxDelayInSeconds", "eventsOutOfOrderPolicy", "functions", "inputs", "jobId", "jobState", "lastOutputEventTime", "outputErrorPolicy", "outputStartMode", "outputStartTime", "outputs", "provisioningState", "sku", "transformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamingJobProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_date",
            "etag",
            "job_id",
            "job_state",
            "last_output_event_time",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in functions (list)
        _items = []
        if self.functions:
            for _item_functions in self.functions:
                if _item_functions:
                    _items.append(_item_functions.to_dict())
            _dict['functions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item_inputs in self.inputs:
                if _item_inputs:
                    _items.append(_item_inputs.to_dict())
            _dict['inputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transformation
        if self.transformation:
            _dict['transformation'] = self.transformation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamingJobProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compatibilityLevel": obj.get("compatibilityLevel"),
            "createdDate": obj.get("createdDate"),
            "dataLocale": obj.get("dataLocale"),
            "etag": obj.get("etag"),
            "eventsLateArrivalMaxDelayInSeconds": obj.get("eventsLateArrivalMaxDelayInSeconds"),
            "eventsOutOfOrderMaxDelayInSeconds": obj.get("eventsOutOfOrderMaxDelayInSeconds"),
            "eventsOutOfOrderPolicy": obj.get("eventsOutOfOrderPolicy"),
            "functions": [StreamingJobPropertiesFunctionsInner.from_dict(_item) for _item in obj["functions"]] if obj.get("functions") is not None else None,
            "inputs": [StreamingJobPropertiesInputsInner.from_dict(_item) for _item in obj["inputs"]] if obj.get("inputs") is not None else None,
            "jobId": obj.get("jobId"),
            "jobState": obj.get("jobState"),
            "lastOutputEventTime": obj.get("lastOutputEventTime"),
            "outputErrorPolicy": obj.get("outputErrorPolicy"),
            "outputStartMode": obj.get("outputStartMode"),
            "outputStartTime": obj.get("outputStartTime"),
            "outputs": [StreamingJobPropertiesOutputsInner.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "sku": Sku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "transformation": StreamingJobPropertiesTransformation.from_dict(obj["transformation"]) if obj.get("transformation") is not None else None
        })
        return _obj



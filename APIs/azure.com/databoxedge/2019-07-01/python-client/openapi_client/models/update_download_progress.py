# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UpdateDownloadProgress(BaseModel):
    """
    Details about the download progress of update.
    """ # noqa: E501
    download_phase: Optional[StrictStr] = Field(default=None, description="The download phase.", alias="downloadPhase")
    number_of_updates_downloaded: Optional[StrictInt] = Field(default=None, description="Number of updates downloaded.", alias="numberOfUpdatesDownloaded")
    number_of_updates_to_download: Optional[StrictInt] = Field(default=None, description="Number of updates to download.", alias="numberOfUpdatesToDownload")
    percent_complete: Optional[StrictInt] = Field(default=None, description="Percentage of completion.", alias="percentComplete")
    total_bytes_downloaded: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total bytes downloaded.", alias="totalBytesDownloaded")
    total_bytes_to_download: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total bytes to download.", alias="totalBytesToDownload")
    __properties: ClassVar[List[str]] = ["downloadPhase", "numberOfUpdatesDownloaded", "numberOfUpdatesToDownload", "percentComplete", "totalBytesDownloaded", "totalBytesToDownload"]

    @field_validator('download_phase')
    def download_phase_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Initializing', 'Downloading', 'Verifying']):
            raise ValueError("must be one of enum values ('Unknown', 'Initializing', 'Downloading', 'Verifying')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDownloadProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "download_phase",
            "number_of_updates_downloaded",
            "number_of_updates_to_download",
            "percent_complete",
            "total_bytes_downloaded",
            "total_bytes_to_download",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDownloadProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downloadPhase": obj.get("downloadPhase"),
            "numberOfUpdatesDownloaded": obj.get("numberOfUpdatesDownloaded"),
            "numberOfUpdatesToDownload": obj.get("numberOfUpdatesToDownload"),
            "percentComplete": obj.get("percentComplete"),
            "totalBytesDownloaded": obj.get("totalBytesDownloaded"),
            "totalBytesToDownload": obj.get("totalBytesToDownload")
        })
        return _obj



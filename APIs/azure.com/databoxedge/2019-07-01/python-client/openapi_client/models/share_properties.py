# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_container_info import AzureContainerInfo
from openapi_client.models.client_access_right import ClientAccessRight
from openapi_client.models.mount_point_map import MountPointMap
from openapi_client.models.refresh_details import RefreshDetails
from openapi_client.models.user_access_right import UserAccessRight
from typing import Optional, Set
from typing_extensions import Self

class ShareProperties(BaseModel):
    """
    The share properties.
    """ # noqa: E501
    access_protocol: StrictStr = Field(description="Access protocol to be used by the share.", alias="accessProtocol")
    azure_container_info: Optional[AzureContainerInfo] = Field(default=None, alias="azureContainerInfo")
    client_access_rights: Optional[List[ClientAccessRight]] = Field(default=None, description="List of IP addresses and corresponding access rights on the share(required for NFS protocol).", alias="clientAccessRights")
    data_policy: Optional[StrictStr] = Field(default=None, description="Data policy of the share.", alias="dataPolicy")
    description: Optional[StrictStr] = Field(default=None, description="Description for the share.")
    monitoring_status: StrictStr = Field(description="Current monitoring status of the share.", alias="monitoringStatus")
    refresh_details: Optional[RefreshDetails] = Field(default=None, alias="refreshDetails")
    share_mappings: Optional[List[MountPointMap]] = Field(default=None, description="Share mount point to the role.", alias="shareMappings")
    share_status: StrictStr = Field(description="Current status of the share.", alias="shareStatus")
    user_access_rights: Optional[List[UserAccessRight]] = Field(default=None, description="Mapping of users and corresponding access rights on the share (required for SMB protocol).", alias="userAccessRights")
    __properties: ClassVar[List[str]] = ["accessProtocol", "azureContainerInfo", "clientAccessRights", "dataPolicy", "description", "monitoringStatus", "refreshDetails", "shareMappings", "shareStatus", "userAccessRights"]

    @field_validator('access_protocol')
    def access_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SMB', 'NFS']):
            raise ValueError("must be one of enum values ('SMB', 'NFS')")
        return value

    @field_validator('data_policy')
    def data_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Cloud', 'Local']):
            raise ValueError("must be one of enum values ('Cloud', 'Local')")
        return value

    @field_validator('monitoring_status')
    def monitoring_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('share_status')
    def share_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Offline', 'Unknown', 'OK', 'Updating', 'NeedsAttention']):
            raise ValueError("must be one of enum values ('Offline', 'Unknown', 'OK', 'Updating', 'NeedsAttention')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShareProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "share_mappings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of azure_container_info
        if self.azure_container_info:
            _dict['azureContainerInfo'] = self.azure_container_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in client_access_rights (list)
        _items = []
        if self.client_access_rights:
            for _item_client_access_rights in self.client_access_rights:
                if _item_client_access_rights:
                    _items.append(_item_client_access_rights.to_dict())
            _dict['clientAccessRights'] = _items
        # override the default output from pydantic by calling `to_dict()` of refresh_details
        if self.refresh_details:
            _dict['refreshDetails'] = self.refresh_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in share_mappings (list)
        _items = []
        if self.share_mappings:
            for _item_share_mappings in self.share_mappings:
                if _item_share_mappings:
                    _items.append(_item_share_mappings.to_dict())
            _dict['shareMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_access_rights (list)
        _items = []
        if self.user_access_rights:
            for _item_user_access_rights in self.user_access_rights:
                if _item_user_access_rights:
                    _items.append(_item_user_access_rights.to_dict())
            _dict['userAccessRights'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShareProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessProtocol": obj.get("accessProtocol"),
            "azureContainerInfo": AzureContainerInfo.from_dict(obj["azureContainerInfo"]) if obj.get("azureContainerInfo") is not None else None,
            "clientAccessRights": [ClientAccessRight.from_dict(_item) for _item in obj["clientAccessRights"]] if obj.get("clientAccessRights") is not None else None,
            "dataPolicy": obj.get("dataPolicy"),
            "description": obj.get("description"),
            "monitoringStatus": obj.get("monitoringStatus"),
            "refreshDetails": RefreshDetails.from_dict(obj["refreshDetails"]) if obj.get("refreshDetails") is not None else None,
            "shareMappings": [MountPointMap.from_dict(_item) for _item in obj["shareMappings"]] if obj.get("shareMappings") is not None else None,
            "shareStatus": obj.get("shareStatus"),
            "userAccessRights": [UserAccessRight.from_dict(_item) for _item in obj["userAccessRights"]] if obj.get("userAccessRights") is not None else None
        })
        return _obj



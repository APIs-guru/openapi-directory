# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UpdateSummaryProperties(BaseModel):
    """
    The device update information summary.
    """ # noqa: E501
    device_last_scanned_date_time: Optional[datetime] = Field(default=None, description="The last time when a scan was done on the device.", alias="deviceLastScannedDateTime")
    device_version_number: Optional[StrictStr] = Field(default=None, description="The current version of the device in format: 1.2.17312.13.\",", alias="deviceVersionNumber")
    friendly_device_version_name: Optional[StrictStr] = Field(default=None, description="The current version of the device in text format.", alias="friendlyDeviceVersionName")
    in_progress_download_job_id: Optional[StrictStr] = Field(default=None, description="The job ID of the download job in progress.", alias="inProgressDownloadJobId")
    in_progress_download_job_started_date_time: Optional[datetime] = Field(default=None, description="The time when the currently running download (if any) started.", alias="inProgressDownloadJobStartedDateTime")
    in_progress_install_job_id: Optional[StrictStr] = Field(default=None, description="The job ID of the install job in progress.", alias="inProgressInstallJobId")
    in_progress_install_job_started_date_time: Optional[datetime] = Field(default=None, description="The time when the currently running install (if any) started.", alias="inProgressInstallJobStartedDateTime")
    last_completed_download_job_date_time: Optional[datetime] = Field(default=None, description="The time when the last Download job was completed (success/cancelled/failed) on the appliance.", alias="lastCompletedDownloadJobDateTime")
    last_completed_install_job_date_time: Optional[datetime] = Field(default=None, description="The time when the last Install job was completed (success/cancelled/failed) on the appliance.", alias="lastCompletedInstallJobDateTime")
    last_completed_scan_job_date_time: Optional[datetime] = Field(default=None, description="The time when the last scan job was completed (success/cancelled/failed) on the appliance.", alias="lastCompletedScanJobDateTime")
    ongoing_update_operation: Optional[StrictStr] = Field(default=None, description="The current update operation.", alias="ongoingUpdateOperation")
    reboot_behavior: Optional[StrictStr] = Field(default=None, description="Indicates if updates are available and at least one of the updates needs a reboot.", alias="rebootBehavior")
    total_number_of_updates_available: Optional[StrictInt] = Field(default=None, description="The number of updates available for the current device version as per the last device scan.", alias="totalNumberOfUpdatesAvailable")
    total_number_of_updates_pending_download: Optional[StrictInt] = Field(default=None, description="The total number of items pending download.", alias="totalNumberOfUpdatesPendingDownload")
    total_number_of_updates_pending_install: Optional[StrictInt] = Field(default=None, description="The total number of items pending install.", alias="totalNumberOfUpdatesPendingInstall")
    total_update_size_in_bytes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total size of updates available for download in bytes.", alias="totalUpdateSizeInBytes")
    update_titles: Optional[List[StrictStr]] = Field(default=None, description="The list of updates available for install.", alias="updateTitles")
    __properties: ClassVar[List[str]] = ["deviceLastScannedDateTime", "deviceVersionNumber", "friendlyDeviceVersionName", "inProgressDownloadJobId", "inProgressDownloadJobStartedDateTime", "inProgressInstallJobId", "inProgressInstallJobStartedDateTime", "lastCompletedDownloadJobDateTime", "lastCompletedInstallJobDateTime", "lastCompletedScanJobDateTime", "ongoingUpdateOperation", "rebootBehavior", "totalNumberOfUpdatesAvailable", "totalNumberOfUpdatesPendingDownload", "totalNumberOfUpdatesPendingInstall", "totalUpdateSizeInBytes", "updateTitles"]

    @field_validator('ongoing_update_operation')
    def ongoing_update_operation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Scan', 'Download', 'Install']):
            raise ValueError("must be one of enum values ('None', 'Scan', 'Download', 'Install')")
        return value

    @field_validator('reboot_behavior')
    def reboot_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NeverReboots', 'RequiresReboot', 'RequestReboot']):
            raise ValueError("must be one of enum values ('NeverReboots', 'RequiresReboot', 'RequestReboot')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "in_progress_download_job_id",
            "in_progress_download_job_started_date_time",
            "in_progress_install_job_id",
            "in_progress_install_job_started_date_time",
            "last_completed_download_job_date_time",
            "last_completed_install_job_date_time",
            "ongoing_update_operation",
            "reboot_behavior",
            "total_number_of_updates_available",
            "total_number_of_updates_pending_download",
            "total_number_of_updates_pending_install",
            "total_update_size_in_bytes",
            "update_titles",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceLastScannedDateTime": obj.get("deviceLastScannedDateTime"),
            "deviceVersionNumber": obj.get("deviceVersionNumber"),
            "friendlyDeviceVersionName": obj.get("friendlyDeviceVersionName"),
            "inProgressDownloadJobId": obj.get("inProgressDownloadJobId"),
            "inProgressDownloadJobStartedDateTime": obj.get("inProgressDownloadJobStartedDateTime"),
            "inProgressInstallJobId": obj.get("inProgressInstallJobId"),
            "inProgressInstallJobStartedDateTime": obj.get("inProgressInstallJobStartedDateTime"),
            "lastCompletedDownloadJobDateTime": obj.get("lastCompletedDownloadJobDateTime"),
            "lastCompletedInstallJobDateTime": obj.get("lastCompletedInstallJobDateTime"),
            "lastCompletedScanJobDateTime": obj.get("lastCompletedScanJobDateTime"),
            "ongoingUpdateOperation": obj.get("ongoingUpdateOperation"),
            "rebootBehavior": obj.get("rebootBehavior"),
            "totalNumberOfUpdatesAvailable": obj.get("totalNumberOfUpdatesAvailable"),
            "totalNumberOfUpdatesPendingDownload": obj.get("totalNumberOfUpdatesPendingDownload"),
            "totalNumberOfUpdatesPendingInstall": obj.get("totalNumberOfUpdatesPendingInstall"),
            "totalUpdateSizeInBytes": obj.get("totalUpdateSizeInBytes"),
            "updateTitles": obj.get("updateTitles")
        })
        return _obj



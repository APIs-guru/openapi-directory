# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.io_t_role_properties import IoTRoleProperties

class TestIoTRoleProperties(unittest.TestCase):
    """IoTRoleProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoTRoleProperties:
        """Test IoTRoleProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoTRoleProperties`
        """
        model = IoTRoleProperties()
        if include_optional:
            return IoTRoleProperties(
                host_platform = 'Windows',
                io_t_device_details = openapi_client.models.io_t_device_info.IoTDeviceInfo(
                    authentication = openapi_client.models.authentication.Authentication(
                        symmetric_key = openapi_client.models.symmetric_key.SymmetricKey(
                            connection_string = openapi_client.models.asymmetric_encrypted_secret.AsymmetricEncryptedSecret(
                                encryption_algorithm = 'None', 
                                encryption_cert_thumbprint = '', 
                                value = '', ), ), ), 
                    device_id = '', 
                    io_t_host_hub = '', ),
                io_t_edge_device_details = openapi_client.models.io_t_device_info.IoTDeviceInfo(
                    authentication = openapi_client.models.authentication.Authentication(
                        symmetric_key = openapi_client.models.symmetric_key.SymmetricKey(
                            connection_string = openapi_client.models.asymmetric_encrypted_secret.AsymmetricEncryptedSecret(
                                encryption_algorithm = 'None', 
                                encryption_cert_thumbprint = '', 
                                value = '', ), ), ), 
                    device_id = '', 
                    io_t_host_hub = '', ),
                role_status = 'Enabled',
                share_mappings = [
                    openapi_client.models.mount_point_map.MountPointMap(
                        mount_point = '', 
                        role_id = '', 
                        role_type = 'IOT', 
                        share_id = '', )
                    ]
            )
        else:
            return IoTRoleProperties(
                host_platform = 'Windows',
                io_t_device_details = openapi_client.models.io_t_device_info.IoTDeviceInfo(
                    authentication = openapi_client.models.authentication.Authentication(
                        symmetric_key = openapi_client.models.symmetric_key.SymmetricKey(
                            connection_string = openapi_client.models.asymmetric_encrypted_secret.AsymmetricEncryptedSecret(
                                encryption_algorithm = 'None', 
                                encryption_cert_thumbprint = '', 
                                value = '', ), ), ), 
                    device_id = '', 
                    io_t_host_hub = '', ),
                io_t_edge_device_details = openapi_client.models.io_t_device_info.IoTDeviceInfo(
                    authentication = openapi_client.models.authentication.Authentication(
                        symmetric_key = openapi_client.models.symmetric_key.SymmetricKey(
                            connection_string = openapi_client.models.asymmetric_encrypted_secret.AsymmetricEncryptedSecret(
                                encryption_algorithm = 'None', 
                                encryption_cert_thumbprint = '', 
                                value = '', ), ), ), 
                    device_id = '', 
                    io_t_host_hub = '', ),
                role_status = 'Enabled',
        )
        """

    def testIoTRoleProperties(self):
        """Test IoTRoleProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

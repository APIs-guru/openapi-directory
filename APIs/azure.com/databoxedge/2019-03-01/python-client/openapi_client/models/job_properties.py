# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_download_progress import UpdateDownloadProgress
from openapi_client.models.update_install_progress import UpdateInstallProgress
from typing import Optional, Set
from typing_extensions import Self

class JobProperties(BaseModel):
    """
    The properties for the job.
    """ # noqa: E501
    current_stage: Optional[StrictStr] = Field(default=None, description="Current stage of the update operation.", alias="currentStage")
    download_progress: Optional[UpdateDownloadProgress] = Field(default=None, alias="downloadProgress")
    error_manifest_file: Optional[StrictStr] = Field(default=None, description="Local share/remote container relative path to the error manifest file of the refresh.", alias="errorManifestFile")
    folder: Optional[StrictStr] = Field(default=None, description="If only subfolders need to be refreshed, then the subfolder path inside the share. (The path is empty if there are no subfolders.)")
    install_progress: Optional[UpdateInstallProgress] = Field(default=None, alias="installProgress")
    job_type: Optional[StrictStr] = Field(default=None, description="The type of the job.", alias="jobType")
    share_id: Optional[StrictStr] = Field(default=None, description="ARM ID of the share that was refreshed.", alias="shareId")
    total_refresh_errors: Optional[StrictInt] = Field(default=None, description="Total number of errors encountered during the refresh process.", alias="totalRefreshErrors")
    __properties: ClassVar[List[str]] = ["currentStage", "downloadProgress", "errorManifestFile", "folder", "installProgress", "jobType", "shareId", "totalRefreshErrors"]

    @field_validator('current_stage')
    def current_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Initial', 'ScanStarted', 'ScanComplete', 'ScanFailed', 'DownloadStarted', 'DownloadComplete', 'DownloadFailed', 'InstallStarted', 'InstallComplete', 'InstallFailed', 'RebootInitiated', 'Success', 'Failure', 'RescanStarted', 'RescanComplete', 'RescanFailed']):
            raise ValueError("must be one of enum values ('Unknown', 'Initial', 'ScanStarted', 'ScanComplete', 'ScanFailed', 'DownloadStarted', 'DownloadComplete', 'DownloadFailed', 'InstallStarted', 'InstallComplete', 'InstallFailed', 'RebootInitiated', 'Success', 'Failure', 'RescanStarted', 'RescanComplete', 'RescanFailed')")
        return value

    @field_validator('job_type')
    def job_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'ScanForUpdates', 'DownloadUpdates', 'InstallUpdates', 'RefreshShare']):
            raise ValueError("must be one of enum values ('Invalid', 'ScanForUpdates', 'DownloadUpdates', 'InstallUpdates', 'RefreshShare')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "current_stage",
            "error_manifest_file",
            "job_type",
            "share_id",
            "total_refresh_errors",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of download_progress
        if self.download_progress:
            _dict['downloadProgress'] = self.download_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of install_progress
        if self.install_progress:
            _dict['installProgress'] = self.install_progress.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentStage": obj.get("currentStage"),
            "downloadProgress": UpdateDownloadProgress.from_dict(obj["downloadProgress"]) if obj.get("downloadProgress") is not None else None,
            "errorManifestFile": obj.get("errorManifestFile"),
            "folder": obj.get("folder"),
            "installProgress": UpdateInstallProgress.from_dict(obj["installProgress"]) if obj.get("installProgress") is not None else None,
            "jobType": obj.get("jobType"),
            "shareId": obj.get("shareId"),
            "totalRefreshErrors": obj.get("totalRefreshErrors")
        })
        return _obj



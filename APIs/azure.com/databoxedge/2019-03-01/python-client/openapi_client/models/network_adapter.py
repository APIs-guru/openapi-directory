# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ipv4_config import Ipv4Config
from openapi_client.models.ipv6_config import Ipv6Config
from openapi_client.models.network_adapter_position import NetworkAdapterPosition
from typing import Optional, Set
from typing_extensions import Self

class NetworkAdapter(BaseModel):
    """
    Represents the networkAdapter on a device.
    """ # noqa: E501
    adapter_id: Optional[StrictStr] = Field(default=None, description="Instance ID of network adapter.", alias="adapterId")
    adapter_position: Optional[NetworkAdapterPosition] = Field(default=None, alias="adapterPosition")
    dhcp_status: Optional[StrictStr] = Field(default=None, description="Value indicating whether this adapter has DHCP enabled.", alias="dhcpStatus")
    dns_servers: Optional[List[StrictStr]] = Field(default=None, description="The list of DNS Servers of the device.", alias="dnsServers")
    index: Optional[StrictInt] = Field(default=None, description="Logical index of the adapter.")
    ipv4_configuration: Optional[Ipv4Config] = Field(default=None, alias="ipv4Configuration")
    ipv6_configuration: Optional[Ipv6Config] = Field(default=None, alias="ipv6Configuration")
    ipv6_link_local_address: Optional[StrictStr] = Field(default=None, description="The IPv6 local address.", alias="ipv6LinkLocalAddress")
    label: Optional[StrictStr] = Field(default=None, description="Hardware label for the adapter.")
    link_speed: Optional[StrictInt] = Field(default=None, description="Link speed.", alias="linkSpeed")
    mac_address: Optional[StrictStr] = Field(default=None, description="MAC address.", alias="macAddress")
    network_adapter_name: Optional[StrictStr] = Field(default=None, description="Network adapter name.", alias="networkAdapterName")
    node_id: Optional[StrictStr] = Field(default=None, description="Node ID of the network adapter.", alias="nodeId")
    rdma_status: Optional[StrictStr] = Field(default=None, description="Value indicating whether this adapter is RDMA capable.", alias="rdmaStatus")
    status: Optional[StrictStr] = Field(default=None, description="Value indicating whether this adapter is valid.")
    __properties: ClassVar[List[str]] = ["adapterId", "adapterPosition", "dhcpStatus", "dnsServers", "index", "ipv4Configuration", "ipv6Configuration", "ipv6LinkLocalAddress", "label", "linkSpeed", "macAddress", "networkAdapterName", "nodeId", "rdmaStatus", "status"]

    @field_validator('dhcp_status')
    def dhcp_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Disabled', 'Enabled']):
            raise ValueError("must be one of enum values ('Disabled', 'Enabled')")
        return value

    @field_validator('rdma_status')
    def rdma_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Incapable', 'Capable']):
            raise ValueError("must be one of enum values ('Incapable', 'Capable')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Inactive', 'Active']):
            raise ValueError("must be one of enum values ('Inactive', 'Active')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkAdapter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "adapter_id",
            "dns_servers",
            "index",
            "ipv6_link_local_address",
            "label",
            "link_speed",
            "mac_address",
            "network_adapter_name",
            "node_id",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adapter_position
        if self.adapter_position:
            _dict['adapterPosition'] = self.adapter_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ipv4_configuration
        if self.ipv4_configuration:
            _dict['ipv4Configuration'] = self.ipv4_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ipv6_configuration
        if self.ipv6_configuration:
            _dict['ipv6Configuration'] = self.ipv6_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkAdapter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adapterId": obj.get("adapterId"),
            "adapterPosition": NetworkAdapterPosition.from_dict(obj["adapterPosition"]) if obj.get("adapterPosition") is not None else None,
            "dhcpStatus": obj.get("dhcpStatus"),
            "dnsServers": obj.get("dnsServers"),
            "index": obj.get("index"),
            "ipv4Configuration": Ipv4Config.from_dict(obj["ipv4Configuration"]) if obj.get("ipv4Configuration") is not None else None,
            "ipv6Configuration": Ipv6Config.from_dict(obj["ipv6Configuration"]) if obj.get("ipv6Configuration") is not None else None,
            "ipv6LinkLocalAddress": obj.get("ipv6LinkLocalAddress"),
            "label": obj.get("label"),
            "linkSpeed": obj.get("linkSpeed"),
            "macAddress": obj.get("macAddress"),
            "networkAdapterName": obj.get("networkAdapterName"),
            "nodeId": obj.get("nodeId"),
            "rdmaStatus": obj.get("rdmaStatus"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.io_t_device_info import IoTDeviceInfo
from openapi_client.models.mount_point_map import MountPointMap
from typing import Optional, Set
from typing_extensions import Self

class IoTRoleProperties(BaseModel):
    """
    IoT role properties.
    """ # noqa: E501
    host_platform: StrictStr = Field(description="Host OS supported by the IoT role.", alias="hostPlatform")
    io_t_device_details: IoTDeviceInfo = Field(alias="ioTDeviceDetails")
    io_t_edge_device_details: IoTDeviceInfo = Field(alias="ioTEdgeDeviceDetails")
    role_status: StrictStr = Field(description="Role status.", alias="roleStatus")
    share_mappings: Optional[List[MountPointMap]] = Field(default=None, description="Mount points of shares in role(s).", alias="shareMappings")
    __properties: ClassVar[List[str]] = ["hostPlatform", "ioTDeviceDetails", "ioTEdgeDeviceDetails", "roleStatus", "shareMappings"]

    @field_validator('host_platform')
    def host_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    @field_validator('role_status')
    def role_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoTRoleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of io_t_device_details
        if self.io_t_device_details:
            _dict['ioTDeviceDetails'] = self.io_t_device_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of io_t_edge_device_details
        if self.io_t_edge_device_details:
            _dict['ioTEdgeDeviceDetails'] = self.io_t_edge_device_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in share_mappings (list)
        _items = []
        if self.share_mappings:
            for _item_share_mappings in self.share_mappings:
                if _item_share_mappings:
                    _items.append(_item_share_mappings.to_dict())
            _dict['shareMappings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoTRoleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostPlatform": obj.get("hostPlatform"),
            "ioTDeviceDetails": IoTDeviceInfo.from_dict(obj["ioTDeviceDetails"]) if obj.get("ioTDeviceDetails") is not None else None,
            "ioTEdgeDeviceDetails": IoTDeviceInfo.from_dict(obj["ioTEdgeDeviceDetails"]) if obj.get("ioTEdgeDeviceDetails") is not None else None,
            "roleStatus": obj.get("roleStatus"),
            "shareMappings": [MountPointMap.from_dict(_item) for _item in obj["shareMappings"]] if obj.get("shareMappings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sku_cost import SkuCost
from openapi_client.models.sku_location_info import SkuLocationInfo
from openapi_client.models.sku_restriction import SkuRestriction
from typing import Optional, Set
from typing_extensions import Self

class ResourceTypeSku(BaseModel):
    """
    SkuInformation object
    """ # noqa: E501
    api_versions: Optional[List[StrictStr]] = Field(default=None, description="The API versions in which SKU is available", alias="apiVersions")
    costs: Optional[List[SkuCost]] = Field(default=None, description="The pricing info of the Sku.")
    family: Optional[StrictStr] = Field(default=None, description="The Sku family")
    kind: Optional[StrictStr] = Field(default=None, description="The Sku kind")
    location_info: Optional[List[SkuLocationInfo]] = Field(default=None, description="Availability of the SKU for the location/zone", alias="locationInfo")
    locations: Optional[List[StrictStr]] = Field(default=None, description="Availability of the SKU for the region")
    name: Optional[StrictStr] = Field(default=None, description="The Sku name")
    resource_type: Optional[StrictStr] = Field(default=None, description="The type of the resource", alias="resourceType")
    restrictions: Optional[List[SkuRestriction]] = Field(default=None, description="Restrictions of the SKU availability.")
    tier: Optional[StrictStr] = Field(default=None, description="The Sku tier")
    __properties: ClassVar[List[str]] = ["apiVersions", "costs", "family", "kind", "locationInfo", "locations", "name", "resourceType", "restrictions", "tier"]

    @field_validator('name')
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Gateway', 'Edge', 'TEA_1Node', 'TEA_1Node_UPS', 'TEA_1Node_Heater', 'TEA_1Node_UPS_Heater', 'TEA_4Node_Heater', 'TEA_4Node_UPS_Heater', 'TMA']):
            raise ValueError("must be one of enum values ('Gateway', 'Edge', 'TEA_1Node', 'TEA_1Node_UPS', 'TEA_1Node_Heater', 'TEA_1Node_UPS_Heater', 'TEA_4Node_Heater', 'TEA_4Node_UPS_Heater', 'TMA')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard']):
            raise ValueError("must be one of enum values ('Standard')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceTypeSku from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_versions",
            "costs",
            "family",
            "kind",
            "location_info",
            "locations",
            "name",
            "resource_type",
            "restrictions",
            "tier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in costs (list)
        _items = []
        if self.costs:
            for _item_costs in self.costs:
                if _item_costs:
                    _items.append(_item_costs.to_dict())
            _dict['costs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in location_info (list)
        _items = []
        if self.location_info:
            for _item_location_info in self.location_info:
                if _item_location_info:
                    _items.append(_item_location_info.to_dict())
            _dict['locationInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item_restrictions in self.restrictions:
                if _item_restrictions:
                    _items.append(_item_restrictions.to_dict())
            _dict['restrictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceTypeSku from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiVersions": obj.get("apiVersions"),
            "costs": [SkuCost.from_dict(_item) for _item in obj["costs"]] if obj.get("costs") is not None else None,
            "family": obj.get("family"),
            "kind": obj.get("kind"),
            "locationInfo": [SkuLocationInfo.from_dict(_item) for _item in obj["locationInfo"]] if obj.get("locationInfo") is not None else None,
            "locations": obj.get("locations"),
            "name": obj.get("name"),
            "resourceType": obj.get("resourceType"),
            "restrictions": [SkuRestriction.from_dict(_item) for _item in obj["restrictions"]] if obj.get("restrictions") is not None else None,
            "tier": obj.get("tier")
        })
        return _obj



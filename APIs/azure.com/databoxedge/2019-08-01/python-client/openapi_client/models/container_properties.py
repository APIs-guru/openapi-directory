# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.refresh_details import RefreshDetails
from typing import Optional, Set
from typing_extensions import Self

class ContainerProperties(BaseModel):
    """
    The container properties.
    """ # noqa: E501
    container_status: Optional[StrictStr] = Field(default=None, description="Current status of the container.", alias="containerStatus")
    created_date_time: Optional[datetime] = Field(default=None, description="The UTC time when container got created.", alias="createdDateTime")
    data_format: StrictStr = Field(description="DataFormat for Container", alias="dataFormat")
    refresh_details: Optional[RefreshDetails] = Field(default=None, alias="refreshDetails")
    __properties: ClassVar[List[str]] = ["containerStatus", "createdDateTime", "dataFormat", "refreshDetails"]

    @field_validator('container_status')
    def container_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OK', 'Offline', 'Unknown', 'Updating', 'NeedsAttention']):
            raise ValueError("must be one of enum values ('OK', 'Offline', 'Unknown', 'Updating', 'NeedsAttention')")
        return value

    @field_validator('data_format')
    def data_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BlockBlob', 'PageBlob', 'AzureFile']):
            raise ValueError("must be one of enum values ('BlockBlob', 'PageBlob', 'AzureFile')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "container_status",
            "created_date_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of refresh_details
        if self.refresh_details:
            _dict['refreshDetails'] = self.refresh_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerStatus": obj.get("containerStatus"),
            "createdDateTime": obj.get("createdDateTime"),
            "dataFormat": obj.get("dataFormat"),
            "refreshDetails": RefreshDetails.from_dict(obj["refreshDetails"]) if obj.get("refreshDetails") is not None else None
        })
        return _obj



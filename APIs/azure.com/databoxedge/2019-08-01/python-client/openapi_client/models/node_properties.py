# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NodeProperties(BaseModel):
    """
    This class represents the nodes in a highly available cluster
    """ # noqa: E501
    node_chassis_serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the Chassis", alias="nodeChassisSerialNumber")
    node_display_name: Optional[StrictStr] = Field(default=None, description="Display Name of the individual node", alias="nodeDisplayName")
    node_friendly_software_version: Optional[StrictStr] = Field(default=None, description="Friendly software version name that is currently installed on the node", alias="nodeFriendlySoftwareVersion")
    node_hcs_version: Optional[StrictStr] = Field(default=None, description="HCS version that is currently installed on the node", alias="nodeHcsVersion")
    node_instance_id: Optional[StrictStr] = Field(default=None, description="Guid instance id of the node", alias="nodeInstanceId")
    node_serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the individual node", alias="nodeSerialNumber")
    node_status: Optional[StrictStr] = Field(default=None, description="The current status of the individual node", alias="nodeStatus")
    __properties: ClassVar[List[str]] = ["nodeChassisSerialNumber", "nodeDisplayName", "nodeFriendlySoftwareVersion", "nodeHcsVersion", "nodeInstanceId", "nodeSerialNumber", "nodeStatus"]

    @field_validator('node_status')
    def node_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Up', 'Down', 'Rebooting', 'ShuttingDown']):
            raise ValueError("must be one of enum values ('Unknown', 'Up', 'Down', 'Rebooting', 'ShuttingDown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "node_chassis_serial_number",
            "node_display_name",
            "node_friendly_software_version",
            "node_hcs_version",
            "node_instance_id",
            "node_serial_number",
            "node_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nodeChassisSerialNumber": obj.get("nodeChassisSerialNumber"),
            "nodeDisplayName": obj.get("nodeDisplayName"),
            "nodeFriendlySoftwareVersion": obj.get("nodeFriendlySoftwareVersion"),
            "nodeHcsVersion": obj.get("nodeHcsVersion"),
            "nodeInstanceId": obj.get("nodeInstanceId"),
            "nodeSerialNumber": obj.get("nodeSerialNumber"),
            "nodeStatus": obj.get("nodeStatus")
        })
        return _obj



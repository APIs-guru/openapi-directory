# coding: utf-8

"""
    DataBoxEdgeManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_error_details import JobErrorDetails
from openapi_client.models.job_properties import JobProperties
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    A device job.
    """ # noqa: E501
    end_time: Optional[datetime] = Field(default=None, description="The UTC date and time at which the job completed.", alias="endTime")
    error: Optional[JobErrorDetails] = None
    id: Optional[StrictStr] = Field(default=None, description="The path ID that uniquely identifies the object.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the object.")
    percent_complete: Optional[StrictInt] = Field(default=None, description="The percentage of the job that is complete.", alias="percentComplete")
    properties: Optional[JobProperties] = None
    start_time: Optional[datetime] = Field(default=None, description="The UTC date and time at which the job started.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the job.")
    type: Optional[StrictStr] = Field(default=None, description="The hierarchical type of the object.")
    __properties: ClassVar[List[str]] = ["endTime", "error", "id", "name", "percentComplete", "properties", "startTime", "status", "type"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Paused', 'Scheduled']):
            raise ValueError("must be one of enum values ('Invalid', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Paused', 'Scheduled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "id",
            "name",
            "percent_complete",
            "start_time",
            "status",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "error": JobErrorDetails.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "percentComplete": obj.get("percentComplete"),
            "properties": JobProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Form Recognizer Client

    Extracts information from forms and images into structured data.

    The version of the OpenAPI document: 2.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.analyze_result import AnalyzeResult

class TestAnalyzeResult(unittest.TestCase):
    """AnalyzeResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyzeResult:
        """Test AnalyzeResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyzeResult`
        """
        model = AnalyzeResult()
        if include_optional:
            return AnalyzeResult(
                document_results = [
                    openapi_client.models.document_result.DocumentResult(
                        doc_type = '', 
                        fields = {
                            'key' : openapi_client.models.field_value.FieldValue(
                                bounding_box = [
                                    1.337
                                    ], 
                                confidence = 0, 
                                elements = [
                                    ''
                                    ], 
                                page = 1, 
                                text = '', 
                                type = 'string', 
                                value_array = [
                                    openapi_client.models.field_value.FieldValue(
                                        page = 1, 
                                        text = '', 
                                        type = 'string', 
                                        value_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        value_integer = 56, 
                                        value_number = 1.337, 
                                        value_object = {
                                            'key' : 
                                            }, 
                                        value_phone_number = '', 
                                        value_string = '', 
                                        value_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], 
                                value_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                value_integer = 56, 
                                value_number = 1.337, 
                                value_object = {
                                    'key' : 
                                    }, 
                                value_phone_number = '', 
                                value_string = '', 
                                value_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            }, 
                        page_range = [
                            1
                            ], )
                    ],
                errors = [
                    openapi_client.models.error_information.ErrorInformation(
                        code = '', 
                        message = '', )
                    ],
                page_results = [
                    openapi_client.models.page_result.PageResult(
                        cluster_id = 0, 
                        key_value_pairs = [
                            openapi_client.models.key_value_pair.KeyValuePair(
                                confidence = 0, 
                                key = openapi_client.models.key_value_element.KeyValueElement(
                                    bounding_box = [
                                        1.337
                                        ], 
                                    elements = [
                                        ''
                                        ], 
                                    text = '', ), 
                                label = '', 
                                value = openapi_client.models.key_value_element.KeyValueElement(
                                    text = '', ), )
                            ], 
                        page = 1, 
                        tables = [
                            openapi_client.models.data_table.DataTable(
                                cells = [
                                    openapi_client.models.data_table_cell.DataTableCell(
                                        bounding_box = [
                                            1.337
                                            ], 
                                        column_index = 0, 
                                        column_span = 1, 
                                        confidence = 0, 
                                        is_footer = True, 
                                        is_header = True, 
                                        row_index = 0, 
                                        row_span = 1, 
                                        text = '', )
                                    ], 
                                columns = 1, 
                                rows = 1, )
                            ], )
                    ],
                read_results = [
                    openapi_client.models.read_result.ReadResult(
                        angle = -1.8E+2, 
                        height = 0, 
                        language = 'en', 
                        lines = [
                            openapi_client.models.text_line.TextLine(
                                bounding_box = [
                                    1.337
                                    ], 
                                text = '', 
                                words = [
                                    openapi_client.models.text_word.TextWord(
                                        bounding_box = [
                                            1.337
                                            ], 
                                        confidence = 0, 
                                        text = '', )
                                    ], )
                            ], 
                        page = 1, 
                        unit = 'pixel', 
                        width = 0, )
                    ],
                version = ''
            )
        else:
            return AnalyzeResult(
                read_results = [
                    openapi_client.models.read_result.ReadResult(
                        angle = -1.8E+2, 
                        height = 0, 
                        language = 'en', 
                        lines = [
                            openapi_client.models.text_line.TextLine(
                                bounding_box = [
                                    1.337
                                    ], 
                                text = '', 
                                words = [
                                    openapi_client.models.text_word.TextWord(
                                        bounding_box = [
                                            1.337
                                            ], 
                                        confidence = 0, 
                                        text = '', )
                                    ], )
                            ], 
                        page = 1, 
                        unit = 'pixel', 
                        width = 0, )
                    ],
                version = '',
        )
        """

    def testAnalyzeResult(self):
        """Test AnalyzeResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Form Recognizer Client

    Extracts information from forms and images into structured data.

    The version of the OpenAPI document: 2.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.language import Language
from openapi_client.models.text_line import TextLine
from typing import Optional, Set
from typing_extensions import Self

class ReadResult(BaseModel):
    """
    Text extracted from a page in the input document.
    """ # noqa: E501
    angle: Union[Annotated[float, Field(le=1.8E+2, strict=True, gt=-1.8E+2)], Annotated[int, Field(le=180, strict=True, gt=-180)]] = Field(description="The general orientation of the text in clockwise direction, measured in degrees between (-180, 180].")
    height: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="The height of the image/PDF in pixels/inches, respectively.")
    language: Optional[Language] = None
    lines: Optional[List[TextLine]] = Field(default=None, description="When includeTextDetails is set to true, a list of recognized text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order.")
    page: Annotated[int, Field(strict=True, ge=1)] = Field(description="The 1-based page number in the input document.")
    unit: StrictStr = Field(description="The unit used by the width, height and boundingBox properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".")
    width: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="The width of the image/PDF in pixels/inches, respectively.")
    __properties: ClassVar[List[str]] = ["angle", "height", "language", "lines", "page", "unit", "width"]

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pixel', 'inch']):
            raise ValueError("must be one of enum values ('pixel', 'inch')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReadResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReadResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "angle": obj.get("angle"),
            "height": obj.get("height"),
            "language": obj.get("language"),
            "lines": [TextLine.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "page": obj.get("page"),
            "unit": obj.get("unit"),
            "width": obj.get("width")
        })
        return _obj



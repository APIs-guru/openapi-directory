# coding: utf-8

"""
    Form Recognizer Client

    Extracts information from forms and images into structured data.

    The version of the OpenAPI document: 2.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DataTableCell(BaseModel):
    """
    Information about the extracted cell in a table.
    """ # noqa: E501
    bounding_box: Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=8, max_length=8)] = Field(description="Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.", alias="boundingBox")
    column_index: Annotated[int, Field(strict=True, ge=0)] = Field(description="Column index of the cell.", alias="columnIndex")
    column_span: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Number of columns spanned by this cell.", alias="columnSpan")
    confidence: Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]] = Field(description="Confidence value.")
    elements: Optional[List[StrictStr]] = Field(default=None, description="When includeTextDetails is set to true, a list of references to the text elements constituting this table cell.")
    is_footer: Optional[StrictBool] = Field(default=False, description="Is the current cell a footer cell?", alias="isFooter")
    is_header: Optional[StrictBool] = Field(default=False, description="Is the current cell a header cell?", alias="isHeader")
    row_index: Annotated[int, Field(strict=True, ge=0)] = Field(description="Row index of the cell.", alias="rowIndex")
    row_span: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Number of rows spanned by this cell.", alias="rowSpan")
    text: StrictStr = Field(description="Text content of the cell.")
    __properties: ClassVar[List[str]] = ["boundingBox", "columnIndex", "columnSpan", "confidence", "elements", "isFooter", "isHeader", "rowIndex", "rowSpan", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataTableCell from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataTableCell from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingBox": obj.get("boundingBox"),
            "columnIndex": obj.get("columnIndex"),
            "columnSpan": obj.get("columnSpan"),
            "confidence": obj.get("confidence"),
            "elements": obj.get("elements"),
            "isFooter": obj.get("isFooter") if obj.get("isFooter") is not None else False,
            "isHeader": obj.get("isHeader") if obj.get("isHeader") is not None else False,
            "rowIndex": obj.get("rowIndex"),
            "rowSpan": obj.get("rowSpan"),
            "text": obj.get("text")
        })
        return _obj



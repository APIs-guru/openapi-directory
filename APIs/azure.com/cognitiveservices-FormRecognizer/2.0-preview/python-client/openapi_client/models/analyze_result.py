# coding: utf-8

"""
    Form Recognizer Client

    Extracts information from forms and images into structured data.

    The version of the OpenAPI document: 2.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document_result import DocumentResult
from openapi_client.models.error_information import ErrorInformation
from openapi_client.models.page_result import PageResult
from openapi_client.models.read_result import ReadResult
from typing import Optional, Set
from typing_extensions import Self

class AnalyzeResult(BaseModel):
    """
    Analyze operation result.
    """ # noqa: E501
    document_results: Optional[List[DocumentResult]] = Field(default=None, description="Document-level information extracted from the input.", alias="documentResults")
    errors: Optional[List[ErrorInformation]] = Field(default=None, description="List of errors reported during the analyze operation.")
    page_results: Optional[List[PageResult]] = Field(default=None, description="Page-level information extracted from the input.", alias="pageResults")
    read_results: List[ReadResult] = Field(description="Text extracted from the input.", alias="readResults")
    version: StrictStr = Field(description="Version of schema used for this result.")
    __properties: ClassVar[List[str]] = ["documentResults", "errors", "pageResults", "readResults", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyzeResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in document_results (list)
        _items = []
        if self.document_results:
            for _item_document_results in self.document_results:
                if _item_document_results:
                    _items.append(_item_document_results.to_dict())
            _dict['documentResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in page_results (list)
        _items = []
        if self.page_results:
            for _item_page_results in self.page_results:
                if _item_page_results:
                    _items.append(_item_page_results.to_dict())
            _dict['pageResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in read_results (list)
        _items = []
        if self.read_results:
            for _item_read_results in self.read_results:
                if _item_read_results:
                    _items.append(_item_read_results.to_dict())
            _dict['readResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyzeResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentResults": [DocumentResult.from_dict(_item) for _item in obj["documentResults"]] if obj.get("documentResults") is not None else None,
            "errors": [ErrorInformation.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "pageResults": [PageResult.from_dict(_item) for _item in obj["pageResults"]] if obj.get("pageResults") is not None else None,
            "readResults": [ReadResult.from_dict(_item) for _item in obj["readResults"]] if obj.get("readResults") is not None else None,
            "version": obj.get("version")
        })
        return _obj



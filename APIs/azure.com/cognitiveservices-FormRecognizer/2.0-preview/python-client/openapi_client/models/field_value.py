# coding: utf-8

"""
    Form Recognizer Client

    Extracts information from forms and images into structured data.

    The version of the OpenAPI document: 2.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.field_value_type import FieldValueType
from typing import Optional, Set
from typing_extensions import Self

class FieldValue(BaseModel):
    """
    Recognized field value.
    """ # noqa: E501
    bounding_box: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=8, max_length=8)]] = Field(default=None, description="Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.", alias="boundingBox")
    confidence: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="Confidence value.")
    elements: Optional[List[StrictStr]] = Field(default=None, description="When includeTextDetails is set to true, a list of references to the text elements constituting this field.")
    page: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The 1-based page number in the input document.")
    text: Optional[StrictStr] = Field(default=None, description="Text content of the extracted field.")
    type: FieldValueType
    value_array: Optional[List[FieldValue]] = Field(default=None, description="Array of field values.", alias="valueArray")
    value_date: Optional[datetime] = Field(default=None, description="Date value.", alias="valueDate")
    value_integer: Optional[StrictInt] = Field(default=None, description="Integer value.", alias="valueInteger")
    value_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Floating point value.", alias="valueNumber")
    value_object: Optional[Dict[str, FieldValue]] = Field(default=None, description="Dictionary of named field values.", alias="valueObject")
    value_phone_number: Optional[StrictStr] = Field(default=None, description="Phone number value.", alias="valuePhoneNumber")
    value_string: Optional[StrictStr] = Field(default=None, description="String value.", alias="valueString")
    value_time: Optional[datetime] = Field(default=None, description="Time value.", alias="valueTime")
    __properties: ClassVar[List[str]] = ["boundingBox", "confidence", "elements", "page", "text", "type", "valueArray", "valueDate", "valueInteger", "valueNumber", "valueObject", "valuePhoneNumber", "valueString", "valueTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in value_array (list)
        _items = []
        if self.value_array:
            for _item_value_array in self.value_array:
                if _item_value_array:
                    _items.append(_item_value_array.to_dict())
            _dict['valueArray'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in value_object (dict)
        _field_dict = {}
        if self.value_object:
            for _key_value_object in self.value_object:
                if self.value_object[_key_value_object]:
                    _field_dict[_key_value_object] = self.value_object[_key_value_object].to_dict()
            _dict['valueObject'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingBox": obj.get("boundingBox"),
            "confidence": obj.get("confidence"),
            "elements": obj.get("elements"),
            "page": obj.get("page"),
            "text": obj.get("text"),
            "type": obj.get("type"),
            "valueArray": [FieldValue.from_dict(_item) for _item in obj["valueArray"]] if obj.get("valueArray") is not None else None,
            "valueDate": obj.get("valueDate"),
            "valueInteger": obj.get("valueInteger"),
            "valueNumber": obj.get("valueNumber"),
            "valueObject": dict(
                (_k, FieldValue.from_dict(_v))
                for _k, _v in obj["valueObject"].items()
            )
            if obj.get("valueObject") is not None
            else None,
            "valuePhoneNumber": obj.get("valuePhoneNumber"),
            "valueString": obj.get("valueString"),
            "valueTime": obj.get("valueTime")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
FieldValue.model_rebuild(raise_errors=False)


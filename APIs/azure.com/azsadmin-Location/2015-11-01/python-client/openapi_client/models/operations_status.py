# coding: utf-8

"""
    SubscriptionsManagementClient

    The Admin Subscriptions Management Client.

    The version of the OpenAPI document: 2015-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.extended_error_info import ExtendedErrorInfo
from openapi_client.models.operations_status_identifier import OperationsStatusIdentifier
from typing import Optional, Set
from typing_extensions import Self

class OperationsStatus(BaseModel):
    """
    A long running operation status.
    """ # noqa: E501
    end_time: Optional[datetime] = Field(default=None, description="The end time of the operation.", alias="endTime")
    error: Optional[ExtendedErrorInfo] = None
    id: Optional[OperationsStatusIdentifier] = None
    percent_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The completion percentage of the operation.", alias="percentComplete")
    properties: Optional[Dict[str, Any]] = Field(default=None, description="The internal operation properties.")
    response_content: Optional[Dict[str, Any]] = Field(default=None, description="The content of the response.", alias="responseContent")
    retry_after: Optional[StrictStr] = Field(default=None, description="The amount of time clients should wait..", alias="retryAfter")
    start_time: Optional[datetime] = Field(default=None, description="The start time of the operation.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The status of the operation.")
    terminal_http_status_code: Optional[StrictStr] = Field(default=None, description="The terminal http status code for the operation.", alias="terminalHttpStatusCode")
    __properties: ClassVar[List[str]] = ["endTime", "error", "id", "percentComplete", "properties", "responseContent", "retryAfter", "startTime", "status", "terminalHttpStatusCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationsStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationsStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "error": ExtendedErrorInfo.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "id": OperationsStatusIdentifier.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "percentComplete": obj.get("percentComplete"),
            "properties": obj.get("properties"),
            "responseContent": obj.get("responseContent"),
            "retryAfter": obj.get("retryAfter"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "terminalHttpStatusCode": obj.get("terminalHttpStatusCode")
        })
        return _obj



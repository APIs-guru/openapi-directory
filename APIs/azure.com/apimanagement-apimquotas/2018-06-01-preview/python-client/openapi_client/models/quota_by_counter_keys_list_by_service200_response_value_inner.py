# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on Quota entity associated with your Azure API Management deployment. To configure call rate limit and quota policies refer to [how to configure call rate limit and quota](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-product-with-rules#a-namepolicies-ato-configure-call-rate-limit-and-quota-policies).

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.quota_by_counter_keys_list_by_service200_response_value_inner_value import QuotaByCounterKeysListByService200ResponseValueInnerValue
from typing import Optional, Set
from typing_extensions import Self

class QuotaByCounterKeysListByService200ResponseValueInner(BaseModel):
    """
    Quota counter details.
    """ # noqa: E501
    counter_key: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The Key value of the Counter. Must not be empty.", alias="counterKey")
    period_end_time: datetime = Field(description="The date of the end of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="periodEndTime")
    period_key: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Identifier of the Period for which the counter was collected. Must not be empty.", alias="periodKey")
    period_start_time: datetime = Field(description="The date of the start of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="periodStartTime")
    value: Optional[QuotaByCounterKeysListByService200ResponseValueInnerValue] = None
    __properties: ClassVar[List[str]] = ["counterKey", "periodEndTime", "periodKey", "periodStartTime", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuotaByCounterKeysListByService200ResponseValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuotaByCounterKeysListByService200ResponseValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "counterKey": obj.get("counterKey"),
            "periodEndTime": obj.get("periodEndTime"),
            "periodKey": obj.get("periodKey"),
            "periodStartTime": obj.get("periodStartTime"),
            "value": QuotaByCounterKeysListByService200ResponseValueInnerValue.from_dict(obj["value"]) if obj.get("value") is not None else None
        })
        return _obj



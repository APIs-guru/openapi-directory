# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AssetStreamingLocator(BaseModel):
    """
    Properties of the Streaming Locator.
    """ # noqa: E501
    asset_name: Optional[StrictStr] = Field(default=None, description="Asset Name.", alias="assetName")
    created: Optional[datetime] = Field(default=None, description="The creation time of the Streaming Locator.")
    default_content_key_policy_name: Optional[StrictStr] = Field(default=None, description="Name of the default ContentKeyPolicy used by this Streaming Locator.", alias="defaultContentKeyPolicyName")
    end_time: Optional[datetime] = Field(default=None, description="The end time of the Streaming Locator.", alias="endTime")
    name: Optional[StrictStr] = Field(default=None, description="Streaming Locator name.")
    start_time: Optional[datetime] = Field(default=None, description="The start time of the Streaming Locator.", alias="startTime")
    streaming_locator_id: Optional[StrictStr] = Field(default=None, description="StreamingLocatorId of the Streaming Locator.", alias="streamingLocatorId")
    streaming_policy_name: Optional[StrictStr] = Field(default=None, description="Name of the Streaming Policy used by this Streaming Locator.", alias="streamingPolicyName")
    __properties: ClassVar[List[str]] = ["assetName", "created", "defaultContentKeyPolicyName", "endTime", "name", "startTime", "streamingLocatorId", "streamingPolicyName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetStreamingLocator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "asset_name",
            "created",
            "default_content_key_policy_name",
            "end_time",
            "name",
            "start_time",
            "streaming_locator_id",
            "streaming_policy_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetStreamingLocator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetName": obj.get("assetName"),
            "created": obj.get("created"),
            "defaultContentKeyPolicyName": obj.get("defaultContentKeyPolicyName"),
            "endTime": obj.get("endTime"),
            "name": obj.get("name"),
            "startTime": obj.get("startTime"),
            "streamingLocatorId": obj.get("streamingLocatorId"),
            "streamingPolicyName": obj.get("streamingPolicyName")
        })
        return _obj



# coding: utf-8

"""
    Application Insights Data Plane

    This API exposes AI metric & event information and associated metadata

    The version of the OpenAPI document: 2018-04-20
    Contact: aiapi@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.events_result import EventsResult

class TestEventsResult(unittest.TestCase):
    """EventsResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EventsResult:
        """Test EventsResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EventsResult`
        """
        model = EventsResult()
        if include_optional:
            return EventsResult(
                ai_messages = [
                    openapi_client.models.the_code_and_message_for_an_error/.The code and message for an error.(
                        additional_properties = openapi_client.models.additional_properties.additionalProperties(), 
                        code = '', 
                        details = [
                            openapi_client.models.error_details/.Error details.(
                                additional_properties = openapi_client.models.additional_properties.additionalProperties(), 
                                code = '', 
                                message = '', 
                                resources = [
                                    ''
                                    ], 
                                target = '', 
                                value = '', )
                            ], 
                        innererror = openapi_client.models.the_code_and_message_for_an_error/.The code and message for an error.(
                            additional_properties = openapi_client.models.additional_properties.additionalProperties(), 
                            code = '', 
                            message = '', ), 
                        message = '', )
                    ],
                value = openapi_client.models.events_result_data.eventsResultData(
                    ai = openapi_client.models.events_ai_info.eventsAiInfo(
                        app_id = '', 
                        app_name = '', 
                        i_key = '', 
                        sdk_version = '', ), 
                    application = openapi_client.models.events_application_info.eventsApplicationInfo(
                        version = '', ), 
                    client = openapi_client.models.events_client_info.eventsClientInfo(
                        browser = '', 
                        city = '', 
                        country_or_region = '', 
                        ip = '', 
                        model = '', 
                        os = '', 
                        state_or_province = '', 
                        type = '', ), 
                    cloud = openapi_client.models.events_cloud_info.eventsCloudInfo(
                        role_instance = '', 
                        role_name = '', ), 
                    count = 56, 
                    custom_dimensions = openapi_client.models.events_result_data_custom_dimensions.eventsResultData_customDimensions(
                        additional_properties = openapi_client.models.additional_properties.additionalProperties(), ), 
                    custom_measurements = openapi_client.models.events_result_data_custom_measurements.eventsResultData_customMeasurements(
                        additional_properties = openapi_client.models.additional_properties.additionalProperties(), ), 
                    id = '', 
                    operation = openapi_client.models.events_operation_info.eventsOperationInfo(
                        id = '', 
                        name = '', 
                        parent_id = '', 
                        synthetic_source = '', ), 
                    session = openapi_client.models.events_session_info.eventsSessionInfo(
                        id = '', ), 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user = openapi_client.models.events_user_info.eventsUserInfo(
                        account_id = '', 
                        authenticated_id = '', 
                        id = '', ), )
            )
        else:
            return EventsResult(
        )
        """

    def testEventsResult(self):
        """Test EventsResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Application Insights Data Plane

    This API exposes AI metric & event information and associated metadata

    The version of the OpenAPI document: 2018-04-20
    Contact: aiapi@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.events_exception_detail import EventsExceptionDetail
from typing import Optional, Set
from typing_extensions import Self

class EventsExceptionInfo(BaseModel):
    """
    The exception info
    """ # noqa: E501
    assembly: Optional[StrictStr] = Field(default=None, description="The assembly which threw the exception")
    details: Optional[List[EventsExceptionDetail]] = Field(default=None, description="The details of the exception")
    handled_at: Optional[StrictStr] = Field(default=None, description="Indicates where the exception was handled at", alias="handledAt")
    innermost_assembly: Optional[StrictStr] = Field(default=None, description="The inner most assembly of the exception", alias="innermostAssembly")
    innermost_message: Optional[StrictStr] = Field(default=None, description="The inner most message of the exception", alias="innermostMessage")
    innermost_method: Optional[StrictStr] = Field(default=None, description="The inner most method of the exception", alias="innermostMethod")
    innermost_type: Optional[StrictStr] = Field(default=None, description="The inner most type of the exception", alias="innermostType")
    message: Optional[StrictStr] = Field(default=None, description="The message of the exception")
    method: Optional[StrictStr] = Field(default=None, description="The method that threw the exception")
    outer_assembly: Optional[StrictStr] = Field(default=None, description="The outer assembly of the exception", alias="outerAssembly")
    outer_message: Optional[StrictStr] = Field(default=None, description="The outer message of the exception", alias="outerMessage")
    outer_method: Optional[StrictStr] = Field(default=None, description="The outer method of the exception", alias="outerMethod")
    outer_type: Optional[StrictStr] = Field(default=None, description="The outer type of the exception", alias="outerType")
    problem_id: Optional[StrictStr] = Field(default=None, description="The problem ID of the exception", alias="problemId")
    severity_level: Optional[StrictInt] = Field(default=None, description="The severity level of the exception", alias="severityLevel")
    type: Optional[StrictStr] = Field(default=None, description="The type of the exception")
    __properties: ClassVar[List[str]] = ["assembly", "details", "handledAt", "innermostAssembly", "innermostMessage", "innermostMethod", "innermostType", "message", "method", "outerAssembly", "outerMessage", "outerMethod", "outerType", "problemId", "severityLevel", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventsExceptionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item_details in self.details:
                if _item_details:
                    _items.append(_item_details.to_dict())
            _dict['details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventsExceptionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assembly": obj.get("assembly"),
            "details": [EventsExceptionDetail.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None,
            "handledAt": obj.get("handledAt"),
            "innermostAssembly": obj.get("innermostAssembly"),
            "innermostMessage": obj.get("innermostMessage"),
            "innermostMethod": obj.get("innermostMethod"),
            "innermostType": obj.get("innermostType"),
            "message": obj.get("message"),
            "method": obj.get("method"),
            "outerAssembly": obj.get("outerAssembly"),
            "outerMessage": obj.get("outerMessage"),
            "outerMethod": obj.get("outerMethod"),
            "outerType": obj.get("outerType"),
            "problemId": obj.get("problemId"),
            "severityLevel": obj.get("severityLevel"),
            "type": obj.get("type")
        })
        return _obj



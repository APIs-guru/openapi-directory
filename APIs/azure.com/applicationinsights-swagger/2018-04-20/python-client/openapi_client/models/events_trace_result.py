# coding: utf-8

"""
    Application Insights Data Plane

    This API exposes AI metric & event information and associated metadata

    The version of the OpenAPI document: 2018-04-20
    Contact: aiapi@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_type import EventType
from openapi_client.models.events_ai_info import EventsAiInfo
from openapi_client.models.events_application_info import EventsApplicationInfo
from openapi_client.models.events_client_info import EventsClientInfo
from openapi_client.models.events_cloud_info import EventsCloudInfo
from openapi_client.models.events_operation_info import EventsOperationInfo
from openapi_client.models.events_result_data import EventsResultData
from openapi_client.models.events_result_data_custom_dimensions import EventsResultDataCustomDimensions
from openapi_client.models.events_result_data_custom_measurements import EventsResultDataCustomMeasurements
from openapi_client.models.events_session_info import EventsSessionInfo
from openapi_client.models.events_trace_info import EventsTraceInfo
from openapi_client.models.events_user_info import EventsUserInfo
from typing import Optional, Set
from typing_extensions import Self

class EventsTraceResult(EventsResultData):
    """
    A trace result
    """ # noqa: E501
    trace: Optional[EventsTraceInfo] = None
    __properties: ClassVar[List[str]] = ["ai", "application", "client", "cloud", "count", "customDimensions", "customMeasurements", "id", "operation", "session", "timestamp", "type", "user", "trace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventsTraceResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ai
        if self.ai:
            _dict['ai'] = self.ai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud
        if self.cloud:
            _dict['cloud'] = self.cloud.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_dimensions
        if self.custom_dimensions:
            _dict['customDimensions'] = self.custom_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_measurements
        if self.custom_measurements:
            _dict['customMeasurements'] = self.custom_measurements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trace
        if self.trace:
            _dict['trace'] = self.trace.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventsTraceResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ai": EventsAiInfo.from_dict(obj["ai"]) if obj.get("ai") is not None else None,
            "application": EventsApplicationInfo.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "client": EventsClientInfo.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "cloud": EventsCloudInfo.from_dict(obj["cloud"]) if obj.get("cloud") is not None else None,
            "count": obj.get("count"),
            "customDimensions": EventsResultDataCustomDimensions.from_dict(obj["customDimensions"]) if obj.get("customDimensions") is not None else None,
            "customMeasurements": EventsResultDataCustomMeasurements.from_dict(obj["customMeasurements"]) if obj.get("customMeasurements") is not None else None,
            "id": obj.get("id"),
            "operation": EventsOperationInfo.from_dict(obj["operation"]) if obj.get("operation") is not None else None,
            "session": EventsSessionInfo.from_dict(obj["session"]) if obj.get("session") is not None else None,
            "timestamp": obj.get("timestamp"),
            "type": obj.get("type"),
            "user": EventsUserInfo.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "trace": EventsTraceInfo.from_dict(obj["trace"]) if obj.get("trace") is not None else None
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class InboundNatPoolPropertiesFormat(BaseModel):
    """
    Properties of Inbound NAT pool
    """ # noqa: E501
    backend_port: StrictInt = Field(description="Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API", alias="backendPort")
    frontend_ip_configuration: Optional[SubResource] = Field(default=None, alias="frontendIPConfiguration")
    frontend_port_range_end: StrictInt = Field(description="Gets or sets the ending port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive", alias="frontendPortRangeEnd")
    frontend_port_range_start: StrictInt = Field(description="Gets or sets the starting port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive", alias="frontendPortRangeStart")
    protocol: StrictStr = Field(description="Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["backendPort", "frontendIPConfiguration", "frontendPortRangeEnd", "frontendPortRangeStart", "protocol", "provisioningState"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Udp', 'Tcp']):
            raise ValueError("must be one of enum values ('Udp', 'Tcp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundNatPoolPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of frontend_ip_configuration
        if self.frontend_ip_configuration:
            _dict['frontendIPConfiguration'] = self.frontend_ip_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundNatPoolPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendPort": obj.get("backendPort"),
            "frontendIPConfiguration": SubResource.from_dict(obj["frontendIPConfiguration"]) if obj.get("frontendIPConfiguration") is not None else None,
            "frontendPortRangeEnd": obj.get("frontendPortRangeEnd"),
            "frontendPortRangeStart": obj.get("frontendPortRangeStart"),
            "protocol": obj.get("protocol"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



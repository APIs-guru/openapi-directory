# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class BackendAddressPoolPropertiesFormat(BaseModel):
    """
    Properties of BackendAddressPool
    """ # noqa: E501
    backend_ip_configurations: Optional[List[NetworkInterfaceIPConfiguration]] = Field(default=None, description="Gets collection of references to IPs defined in NICs", alias="backendIPConfigurations")
    load_balancing_rules: Optional[List[SubResource]] = Field(default=None, description="Gets Load Balancing rules that use this Backend Address Pool", alias="loadBalancingRules")
    outbound_nat_rule: Optional[SubResource] = Field(default=None, alias="outboundNatRule")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the PublicIP resource Updating/Deleting/Failed", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["backendIPConfigurations", "loadBalancingRules", "outboundNatRule", "provisioningState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackendAddressPoolPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backend_ip_configurations (list)
        _items = []
        if self.backend_ip_configurations:
            for _item_backend_ip_configurations in self.backend_ip_configurations:
                if _item_backend_ip_configurations:
                    _items.append(_item_backend_ip_configurations.to_dict())
            _dict['backendIPConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancing_rules (list)
        _items = []
        if self.load_balancing_rules:
            for _item_load_balancing_rules in self.load_balancing_rules:
                if _item_load_balancing_rules:
                    _items.append(_item_load_balancing_rules.to_dict())
            _dict['loadBalancingRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of outbound_nat_rule
        if self.outbound_nat_rule:
            _dict['outboundNatRule'] = self.outbound_nat_rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackendAddressPoolPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendIPConfigurations": [NetworkInterfaceIPConfiguration.from_dict(_item) for _item in obj["backendIPConfigurations"]] if obj.get("backendIPConfigurations") is not None else None,
            "loadBalancingRules": [SubResource.from_dict(_item) for _item in obj["loadBalancingRules"]] if obj.get("loadBalancingRules") is not None else None,
            "outboundNatRule": SubResource.from_dict(obj["outboundNatRule"]) if obj.get("outboundNatRule") is not None else None,
            "provisioningState": obj.get("provisioningState")
        })
        return _obj

from openapi_client.models.network_interface_ip_configuration import NetworkInterfaceIPConfiguration
# TODO: Rewrite to not use raise_errors
BackendAddressPoolPropertiesFormat.model_rebuild(raise_errors=False)


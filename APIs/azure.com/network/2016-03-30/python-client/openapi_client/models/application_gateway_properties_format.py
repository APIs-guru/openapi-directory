# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_gateway_backend_address_pool import ApplicationGatewayBackendAddressPool
from openapi_client.models.application_gateway_backend_http_settings import ApplicationGatewayBackendHttpSettings
from openapi_client.models.application_gateway_frontend_ip_configuration import ApplicationGatewayFrontendIPConfiguration
from openapi_client.models.application_gateway_frontend_port import ApplicationGatewayFrontendPort
from openapi_client.models.application_gateway_http_listener import ApplicationGatewayHttpListener
from openapi_client.models.application_gateway_ip_configuration import ApplicationGatewayIPConfiguration
from openapi_client.models.application_gateway_probe import ApplicationGatewayProbe
from openapi_client.models.application_gateway_request_routing_rule import ApplicationGatewayRequestRoutingRule
from openapi_client.models.application_gateway_sku import ApplicationGatewaySku
from openapi_client.models.application_gateway_ssl_certificate import ApplicationGatewaySslCertificate
from openapi_client.models.application_gateway_url_path_map import ApplicationGatewayUrlPathMap
from typing import Optional, Set
from typing_extensions import Self

class ApplicationGatewayPropertiesFormat(BaseModel):
    """
    Properties of Application Gateway
    """ # noqa: E501
    backend_address_pools: Optional[List[ApplicationGatewayBackendAddressPool]] = Field(default=None, description="Gets or sets backend address pool of application gateway resource", alias="backendAddressPools")
    backend_http_settings_collection: Optional[List[ApplicationGatewayBackendHttpSettings]] = Field(default=None, description="Gets or sets backend http settings of application gateway resource", alias="backendHttpSettingsCollection")
    frontend_ip_configurations: Optional[List[ApplicationGatewayFrontendIPConfiguration]] = Field(default=None, description="Gets or sets frontend IP addresses of application gateway resource", alias="frontendIPConfigurations")
    frontend_ports: Optional[List[ApplicationGatewayFrontendPort]] = Field(default=None, description="Gets or sets frontend ports of application gateway resource", alias="frontendPorts")
    gateway_ip_configurations: Optional[List[ApplicationGatewayIPConfiguration]] = Field(default=None, description="Gets or sets subnets of application gateway resource", alias="gatewayIPConfigurations")
    http_listeners: Optional[List[ApplicationGatewayHttpListener]] = Field(default=None, description="Gets or sets HTTP listeners of application gateway resource", alias="httpListeners")
    operational_state: Optional[StrictStr] = Field(default=None, description="Gets operational state of application gateway resource", alias="operationalState")
    probes: Optional[List[ApplicationGatewayProbe]] = Field(default=None, description="Gets or sets probes of application gateway resource")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets Provisioning state of the ApplicationGateway resource Updating/Deleting/Failed", alias="provisioningState")
    request_routing_rules: Optional[List[ApplicationGatewayRequestRoutingRule]] = Field(default=None, description="Gets or sets request routing rules of application gateway resource", alias="requestRoutingRules")
    resource_guid: Optional[StrictStr] = Field(default=None, description="Gets or sets resource GUID property of the ApplicationGateway resource", alias="resourceGuid")
    sku: Optional[ApplicationGatewaySku] = None
    ssl_certificates: Optional[List[ApplicationGatewaySslCertificate]] = Field(default=None, description="Gets or sets ssl certificates of application gateway resource", alias="sslCertificates")
    url_path_maps: Optional[List[ApplicationGatewayUrlPathMap]] = Field(default=None, description="Gets or sets URL path map of application gateway resource", alias="urlPathMaps")
    __properties: ClassVar[List[str]] = ["backendAddressPools", "backendHttpSettingsCollection", "frontendIPConfigurations", "frontendPorts", "gatewayIPConfigurations", "httpListeners", "operationalState", "probes", "provisioningState", "requestRoutingRules", "resourceGuid", "sku", "sslCertificates", "urlPathMaps"]

    @field_validator('operational_state')
    def operational_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Stopped', 'Starting', 'Running', 'Stopping']):
            raise ValueError("must be one of enum values ('Stopped', 'Starting', 'Running', 'Stopping')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationGatewayPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "operational_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backend_address_pools (list)
        _items = []
        if self.backend_address_pools:
            for _item_backend_address_pools in self.backend_address_pools:
                if _item_backend_address_pools:
                    _items.append(_item_backend_address_pools.to_dict())
            _dict['backendAddressPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in backend_http_settings_collection (list)
        _items = []
        if self.backend_http_settings_collection:
            for _item_backend_http_settings_collection in self.backend_http_settings_collection:
                if _item_backend_http_settings_collection:
                    _items.append(_item_backend_http_settings_collection.to_dict())
            _dict['backendHttpSettingsCollection'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in frontend_ip_configurations (list)
        _items = []
        if self.frontend_ip_configurations:
            for _item_frontend_ip_configurations in self.frontend_ip_configurations:
                if _item_frontend_ip_configurations:
                    _items.append(_item_frontend_ip_configurations.to_dict())
            _dict['frontendIPConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in frontend_ports (list)
        _items = []
        if self.frontend_ports:
            for _item_frontend_ports in self.frontend_ports:
                if _item_frontend_ports:
                    _items.append(_item_frontend_ports.to_dict())
            _dict['frontendPorts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gateway_ip_configurations (list)
        _items = []
        if self.gateway_ip_configurations:
            for _item_gateway_ip_configurations in self.gateway_ip_configurations:
                if _item_gateway_ip_configurations:
                    _items.append(_item_gateway_ip_configurations.to_dict())
            _dict['gatewayIPConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in http_listeners (list)
        _items = []
        if self.http_listeners:
            for _item_http_listeners in self.http_listeners:
                if _item_http_listeners:
                    _items.append(_item_http_listeners.to_dict())
            _dict['httpListeners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in probes (list)
        _items = []
        if self.probes:
            for _item_probes in self.probes:
                if _item_probes:
                    _items.append(_item_probes.to_dict())
            _dict['probes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in request_routing_rules (list)
        _items = []
        if self.request_routing_rules:
            for _item_request_routing_rules in self.request_routing_rules:
                if _item_request_routing_rules:
                    _items.append(_item_request_routing_rules.to_dict())
            _dict['requestRoutingRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ssl_certificates (list)
        _items = []
        if self.ssl_certificates:
            for _item_ssl_certificates in self.ssl_certificates:
                if _item_ssl_certificates:
                    _items.append(_item_ssl_certificates.to_dict())
            _dict['sslCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in url_path_maps (list)
        _items = []
        if self.url_path_maps:
            for _item_url_path_maps in self.url_path_maps:
                if _item_url_path_maps:
                    _items.append(_item_url_path_maps.to_dict())
            _dict['urlPathMaps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationGatewayPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendAddressPools": [ApplicationGatewayBackendAddressPool.from_dict(_item) for _item in obj["backendAddressPools"]] if obj.get("backendAddressPools") is not None else None,
            "backendHttpSettingsCollection": [ApplicationGatewayBackendHttpSettings.from_dict(_item) for _item in obj["backendHttpSettingsCollection"]] if obj.get("backendHttpSettingsCollection") is not None else None,
            "frontendIPConfigurations": [ApplicationGatewayFrontendIPConfiguration.from_dict(_item) for _item in obj["frontendIPConfigurations"]] if obj.get("frontendIPConfigurations") is not None else None,
            "frontendPorts": [ApplicationGatewayFrontendPort.from_dict(_item) for _item in obj["frontendPorts"]] if obj.get("frontendPorts") is not None else None,
            "gatewayIPConfigurations": [ApplicationGatewayIPConfiguration.from_dict(_item) for _item in obj["gatewayIPConfigurations"]] if obj.get("gatewayIPConfigurations") is not None else None,
            "httpListeners": [ApplicationGatewayHttpListener.from_dict(_item) for _item in obj["httpListeners"]] if obj.get("httpListeners") is not None else None,
            "operationalState": obj.get("operationalState"),
            "probes": [ApplicationGatewayProbe.from_dict(_item) for _item in obj["probes"]] if obj.get("probes") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "requestRoutingRules": [ApplicationGatewayRequestRoutingRule.from_dict(_item) for _item in obj["requestRoutingRules"]] if obj.get("requestRoutingRules") is not None else None,
            "resourceGuid": obj.get("resourceGuid"),
            "sku": ApplicationGatewaySku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "sslCertificates": [ApplicationGatewaySslCertificate.from_dict(_item) for _item in obj["sslCertificates"]] if obj.get("sslCertificates") is not None else None,
            "urlPathMaps": [ApplicationGatewayUrlPathMap.from_dict(_item) for _item in obj["urlPathMaps"]] if obj.get("urlPathMaps") is not None else None
        })
        return _obj



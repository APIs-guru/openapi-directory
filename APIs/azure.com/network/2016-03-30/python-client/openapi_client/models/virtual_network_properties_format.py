# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address_space import AddressSpace
from openapi_client.models.dhcp_options import DhcpOptions
from openapi_client.models.subnet import Subnet
from typing import Optional, Set
from typing_extensions import Self

class VirtualNetworkPropertiesFormat(BaseModel):
    """
    VirtualNetworkPropertiesFormat
    """ # noqa: E501
    address_space: Optional[AddressSpace] = Field(default=None, alias="addressSpace")
    dhcp_options: Optional[DhcpOptions] = Field(default=None, alias="dhcpOptions")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed", alias="provisioningState")
    resource_guid: Optional[StrictStr] = Field(default=None, description="Gets or sets resource GUID property of the VirtualNetwork resource", alias="resourceGuid")
    subnets: Optional[List[Subnet]] = Field(default=None, description="Gets or sets List of subnets in a VirtualNetwork")
    __properties: ClassVar[List[str]] = ["addressSpace", "dhcpOptions", "provisioningState", "resourceGuid", "subnets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualNetworkPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address_space
        if self.address_space:
            _dict['addressSpace'] = self.address_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dhcp_options
        if self.dhcp_options:
            _dict['dhcpOptions'] = self.dhcp_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subnets (list)
        _items = []
        if self.subnets:
            for _item_subnets in self.subnets:
                if _item_subnets:
                    _items.append(_item_subnets.to_dict())
            _dict['subnets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualNetworkPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressSpace": AddressSpace.from_dict(obj["addressSpace"]) if obj.get("addressSpace") is not None else None,
            "dhcpOptions": DhcpOptions.from_dict(obj["dhcpOptions"]) if obj.get("dhcpOptions") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceGuid": obj.get("resourceGuid"),
            "subnets": [Subnet.from_dict(_item) for _item in obj["subnets"]] if obj.get("subnets") is not None else None
        })
        return _obj



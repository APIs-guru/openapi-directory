# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backend_address_pool import BackendAddressPool
from openapi_client.models.frontend_ip_configuration import FrontendIPConfiguration
from openapi_client.models.inbound_nat_pool import InboundNatPool
from openapi_client.models.inbound_nat_rule import InboundNatRule
from openapi_client.models.load_balancing_rule import LoadBalancingRule
from openapi_client.models.outbound_nat_rule import OutboundNatRule
from openapi_client.models.probe import Probe
from typing import Optional, Set
from typing_extensions import Self

class LoadBalancerPropertiesFormat(BaseModel):
    """
    Properties of Load Balancer
    """ # noqa: E501
    backend_address_pools: Optional[List[BackendAddressPool]] = Field(default=None, description="Gets or sets Pools of backend IP addresses", alias="backendAddressPools")
    frontend_ip_configurations: Optional[List[FrontendIPConfiguration]] = Field(default=None, description="Gets or sets frontend IP addresses of the load balancer", alias="frontendIPConfigurations")
    inbound_nat_pools: Optional[List[InboundNatPool]] = Field(default=None, description="Gets or sets inbound NAT pools", alias="inboundNatPools")
    inbound_nat_rules: Optional[List[InboundNatRule]] = Field(default=None, description="Gets or sets list of inbound rules", alias="inboundNatRules")
    load_balancing_rules: Optional[List[LoadBalancingRule]] = Field(default=None, description="Gets or sets load balancing rules", alias="loadBalancingRules")
    outbound_nat_rules: Optional[List[OutboundNatRule]] = Field(default=None, description="Gets or sets outbound NAT rules", alias="outboundNatRules")
    probes: Optional[List[Probe]] = Field(default=None, description="Gets or sets list of Load balancer probes")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed", alias="provisioningState")
    resource_guid: Optional[StrictStr] = Field(default=None, description="Gets or sets resource GUID property of the Load balancer resource", alias="resourceGuid")
    __properties: ClassVar[List[str]] = ["backendAddressPools", "frontendIPConfigurations", "inboundNatPools", "inboundNatRules", "loadBalancingRules", "outboundNatRules", "probes", "provisioningState", "resourceGuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoadBalancerPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backend_address_pools (list)
        _items = []
        if self.backend_address_pools:
            for _item_backend_address_pools in self.backend_address_pools:
                if _item_backend_address_pools:
                    _items.append(_item_backend_address_pools.to_dict())
            _dict['backendAddressPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in frontend_ip_configurations (list)
        _items = []
        if self.frontend_ip_configurations:
            for _item_frontend_ip_configurations in self.frontend_ip_configurations:
                if _item_frontend_ip_configurations:
                    _items.append(_item_frontend_ip_configurations.to_dict())
            _dict['frontendIPConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_nat_pools (list)
        _items = []
        if self.inbound_nat_pools:
            for _item_inbound_nat_pools in self.inbound_nat_pools:
                if _item_inbound_nat_pools:
                    _items.append(_item_inbound_nat_pools.to_dict())
            _dict['inboundNatPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inbound_nat_rules (list)
        _items = []
        if self.inbound_nat_rules:
            for _item_inbound_nat_rules in self.inbound_nat_rules:
                if _item_inbound_nat_rules:
                    _items.append(_item_inbound_nat_rules.to_dict())
            _dict['inboundNatRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancing_rules (list)
        _items = []
        if self.load_balancing_rules:
            for _item_load_balancing_rules in self.load_balancing_rules:
                if _item_load_balancing_rules:
                    _items.append(_item_load_balancing_rules.to_dict())
            _dict['loadBalancingRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outbound_nat_rules (list)
        _items = []
        if self.outbound_nat_rules:
            for _item_outbound_nat_rules in self.outbound_nat_rules:
                if _item_outbound_nat_rules:
                    _items.append(_item_outbound_nat_rules.to_dict())
            _dict['outboundNatRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in probes (list)
        _items = []
        if self.probes:
            for _item_probes in self.probes:
                if _item_probes:
                    _items.append(_item_probes.to_dict())
            _dict['probes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoadBalancerPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendAddressPools": [BackendAddressPool.from_dict(_item) for _item in obj["backendAddressPools"]] if obj.get("backendAddressPools") is not None else None,
            "frontendIPConfigurations": [FrontendIPConfiguration.from_dict(_item) for _item in obj["frontendIPConfigurations"]] if obj.get("frontendIPConfigurations") is not None else None,
            "inboundNatPools": [InboundNatPool.from_dict(_item) for _item in obj["inboundNatPools"]] if obj.get("inboundNatPools") is not None else None,
            "inboundNatRules": [InboundNatRule.from_dict(_item) for _item in obj["inboundNatRules"]] if obj.get("inboundNatRules") is not None else None,
            "loadBalancingRules": [LoadBalancingRule.from_dict(_item) for _item in obj["loadBalancingRules"]] if obj.get("loadBalancingRules") is not None else None,
            "outboundNatRules": [OutboundNatRule.from_dict(_item) for _item in obj["outboundNatRules"]] if obj.get("outboundNatRules") is not None else None,
            "probes": [Probe.from_dict(_item) for _item in obj["probes"]] if obj.get("probes") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceGuid": obj.get("resourceGuid")
        })
        return _obj



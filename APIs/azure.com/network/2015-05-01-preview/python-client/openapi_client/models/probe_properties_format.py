# coding: utf-8

"""
    NetworkResourceProviderClient

    The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class ProbePropertiesFormat(BaseModel):
    """
    ProbePropertiesFormat
    """ # noqa: E501
    interval_in_seconds: Optional[StrictInt] = Field(default=None, description="Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5", alias="intervalInSeconds")
    load_balancing_rules: Optional[List[SubResource]] = Field(default=None, description="Gets Load balancer rules that use this probe", alias="loadBalancingRules")
    number_of_probes: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure. ", alias="numberOfProbes")
    port: StrictInt = Field(description="Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.")
    protocol: StrictStr = Field(description="Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed", alias="provisioningState")
    request_path: Optional[StrictStr] = Field(default=None, description="Gets or sets the URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value", alias="requestPath")
    __properties: ClassVar[List[str]] = ["intervalInSeconds", "loadBalancingRules", "numberOfProbes", "port", "protocol", "provisioningState", "requestPath"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Http', 'Tcp']):
            raise ValueError("must be one of enum values ('Http', 'Tcp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProbePropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancing_rules (list)
        _items = []
        if self.load_balancing_rules:
            for _item_load_balancing_rules in self.load_balancing_rules:
                if _item_load_balancing_rules:
                    _items.append(_item_load_balancing_rules.to_dict())
            _dict['loadBalancingRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProbePropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "intervalInSeconds": obj.get("intervalInSeconds"),
            "loadBalancingRules": [SubResource.from_dict(_item) for _item in obj["loadBalancingRules"]] if obj.get("loadBalancingRules") is not None else None,
            "numberOfProbes": obj.get("numberOfProbes"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "provisioningState": obj.get("provisioningState"),
            "requestPath": obj.get("requestPath")
        })
        return _obj



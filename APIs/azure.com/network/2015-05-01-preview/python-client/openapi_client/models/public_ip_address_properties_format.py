# coding: utf-8

"""
    NetworkResourceProviderClient

    The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.public_ip_address_dns_settings import PublicIpAddressDnsSettings
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class PublicIpAddressPropertiesFormat(BaseModel):
    """
    PublicIpAddress properties
    """ # noqa: E501
    dns_settings: Optional[PublicIpAddressDnsSettings] = Field(default=None, alias="dnsSettings")
    idle_timeout_in_minutes: Optional[StrictInt] = Field(default=None, description="Gets or sets the idle timeout of the public IP address", alias="idleTimeoutInMinutes")
    ip_address: Optional[StrictStr] = Field(default=None, description="Gets the assigned public IP address", alias="ipAddress")
    ip_configuration: Optional[SubResource] = Field(default=None, alias="ipConfiguration")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed", alias="provisioningState")
    public_ip_allocation_method: StrictStr = Field(description="Gets or sets PublicIP allocation method (Static/Dynamic)", alias="publicIPAllocationMethod")
    resource_guid: Optional[StrictStr] = Field(default=None, description="Gets or sets resource guid property of the PublicIP resource", alias="resourceGuid")
    __properties: ClassVar[List[str]] = ["dnsSettings", "idleTimeoutInMinutes", "ipAddress", "ipConfiguration", "provisioningState", "publicIPAllocationMethod", "resourceGuid"]

    @field_validator('public_ip_allocation_method')
    def public_ip_allocation_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Static', 'Dynamic']):
            raise ValueError("must be one of enum values ('Static', 'Dynamic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicIpAddressPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dns_settings
        if self.dns_settings:
            _dict['dnsSettings'] = self.dns_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip_configuration
        if self.ip_configuration:
            _dict['ipConfiguration'] = self.ip_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicIpAddressPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsSettings": PublicIpAddressDnsSettings.from_dict(obj["dnsSettings"]) if obj.get("dnsSettings") is not None else None,
            "idleTimeoutInMinutes": obj.get("idleTimeoutInMinutes"),
            "ipAddress": obj.get("ipAddress"),
            "ipConfiguration": SubResource.from_dict(obj["ipConfiguration"]) if obj.get("ipConfiguration") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "publicIPAllocationMethod": obj.get("publicIPAllocationMethod"),
            "resourceGuid": obj.get("resourceGuid")
        })
        return _obj



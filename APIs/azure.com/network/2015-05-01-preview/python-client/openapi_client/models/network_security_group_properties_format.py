# coding: utf-8

"""
    NetworkResourceProviderClient

    The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.security_rule import SecurityRule
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class NetworkSecurityGroupPropertiesFormat(BaseModel):
    """
    Network Security Group resource
    """ # noqa: E501
    default_security_rules: Optional[List[SecurityRule]] = Field(default=None, description="Gets or sets Default security rules of network security group", alias="defaultSecurityRules")
    network_interfaces: Optional[List[SubResource]] = Field(default=None, description="Gets collection of references to Network Interfaces", alias="networkInterfaces")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed", alias="provisioningState")
    resource_guid: Optional[StrictStr] = Field(default=None, description="Gets or sets resource guid property of the network security group resource", alias="resourceGuid")
    security_rules: Optional[List[SecurityRule]] = Field(default=None, description="Gets or sets Security rules of network security group", alias="securityRules")
    subnets: Optional[List[SubResource]] = Field(default=None, description="Gets collection of references to subnets")
    __properties: ClassVar[List[str]] = ["defaultSecurityRules", "networkInterfaces", "provisioningState", "resourceGuid", "securityRules", "subnets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkSecurityGroupPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in default_security_rules (list)
        _items = []
        if self.default_security_rules:
            for _item_default_security_rules in self.default_security_rules:
                if _item_default_security_rules:
                    _items.append(_item_default_security_rules.to_dict())
            _dict['defaultSecurityRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_interfaces (list)
        _items = []
        if self.network_interfaces:
            for _item_network_interfaces in self.network_interfaces:
                if _item_network_interfaces:
                    _items.append(_item_network_interfaces.to_dict())
            _dict['networkInterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in security_rules (list)
        _items = []
        if self.security_rules:
            for _item_security_rules in self.security_rules:
                if _item_security_rules:
                    _items.append(_item_security_rules.to_dict())
            _dict['securityRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnets (list)
        _items = []
        if self.subnets:
            for _item_subnets in self.subnets:
                if _item_subnets:
                    _items.append(_item_subnets.to_dict())
            _dict['subnets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkSecurityGroupPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultSecurityRules": [SecurityRule.from_dict(_item) for _item in obj["defaultSecurityRules"]] if obj.get("defaultSecurityRules") is not None else None,
            "networkInterfaces": [SubResource.from_dict(_item) for _item in obj["networkInterfaces"]] if obj.get("networkInterfaces") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceGuid": obj.get("resourceGuid"),
            "securityRules": [SecurityRule.from_dict(_item) for _item in obj["securityRules"]] if obj.get("securityRules") is not None else None,
            "subnets": [SubResource.from_dict(_item) for _item in obj["subnets"]] if obj.get("subnets") is not None else None
        })
        return _obj



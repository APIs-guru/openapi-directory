# coding: utf-8

"""
    NetworkResourceProviderClient

    The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterfaceIpConfigurationPropertiesFormat(BaseModel):
    """
    Properties of IPConfiguration
    """ # noqa: E501
    load_balancer_backend_address_pools: Optional[List[SubResource]] = Field(default=None, description="Gets or sets the reference of LoadBalancerBackendAddressPool resource", alias="loadBalancerBackendAddressPools")
    load_balancer_inbound_nat_rules: Optional[List[SubResource]] = Field(default=None, description="Gets or sets list of references of LoadBalancerInboundNatRules", alias="loadBalancerInboundNatRules")
    private_ip_address: Optional[StrictStr] = Field(default=None, description="Gets or sets the privateIPAddress of the Network Interface IP Configuration", alias="privateIPAddress")
    private_ip_allocation_method: Optional[StrictStr] = Field(default=None, description="Gets or sets PrivateIP allocation method (Static/Dynamic)", alias="privateIPAllocationMethod")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed", alias="provisioningState")
    public_ip_address: Optional[SubResource] = Field(default=None, alias="publicIPAddress")
    subnet: Optional[SubResource] = None
    __properties: ClassVar[List[str]] = ["loadBalancerBackendAddressPools", "loadBalancerInboundNatRules", "privateIPAddress", "privateIPAllocationMethod", "provisioningState", "publicIPAddress", "subnet"]

    @field_validator('private_ip_allocation_method')
    def private_ip_allocation_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Static', 'Dynamic']):
            raise ValueError("must be one of enum values ('Static', 'Dynamic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterfaceIpConfigurationPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancer_backend_address_pools (list)
        _items = []
        if self.load_balancer_backend_address_pools:
            for _item_load_balancer_backend_address_pools in self.load_balancer_backend_address_pools:
                if _item_load_balancer_backend_address_pools:
                    _items.append(_item_load_balancer_backend_address_pools.to_dict())
            _dict['loadBalancerBackendAddressPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancer_inbound_nat_rules (list)
        _items = []
        if self.load_balancer_inbound_nat_rules:
            for _item_load_balancer_inbound_nat_rules in self.load_balancer_inbound_nat_rules:
                if _item_load_balancer_inbound_nat_rules:
                    _items.append(_item_load_balancer_inbound_nat_rules.to_dict())
            _dict['loadBalancerInboundNatRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of public_ip_address
        if self.public_ip_address:
            _dict['publicIPAddress'] = self.public_ip_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterfaceIpConfigurationPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "loadBalancerBackendAddressPools": [SubResource.from_dict(_item) for _item in obj["loadBalancerBackendAddressPools"]] if obj.get("loadBalancerBackendAddressPools") is not None else None,
            "loadBalancerInboundNatRules": [SubResource.from_dict(_item) for _item in obj["loadBalancerInboundNatRules"]] if obj.get("loadBalancerInboundNatRules") is not None else None,
            "privateIPAddress": obj.get("privateIPAddress"),
            "privateIPAllocationMethod": obj.get("privateIPAllocationMethod"),
            "provisioningState": obj.get("provisioningState"),
            "publicIPAddress": SubResource.from_dict(obj["publicIPAddress"]) if obj.get("publicIPAddress") is not None else None,
            "subnet": SubResource.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None
        })
        return _obj



# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.failover_group_read_only_endpoint import FailoverGroupReadOnlyEndpoint
from openapi_client.models.failover_group_read_write_endpoint import FailoverGroupReadWriteEndpoint
from typing import Optional, Set
from typing_extensions import Self

class FailoverGroupUpdateProperties(BaseModel):
    """
    Properties of a failover group update.
    """ # noqa: E501
    databases: Optional[List[StrictStr]] = Field(default=None, description="List of databases in the failover group.")
    read_only_endpoint: Optional[FailoverGroupReadOnlyEndpoint] = Field(default=None, alias="readOnlyEndpoint")
    read_write_endpoint: Optional[FailoverGroupReadWriteEndpoint] = Field(default=None, alias="readWriteEndpoint")
    __properties: ClassVar[List[str]] = ["databases", "readOnlyEndpoint", "readWriteEndpoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FailoverGroupUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of read_only_endpoint
        if self.read_only_endpoint:
            _dict['readOnlyEndpoint'] = self.read_only_endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_write_endpoint
        if self.read_write_endpoint:
            _dict['readWriteEndpoint'] = self.read_write_endpoint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FailoverGroupUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "databases": obj.get("databases"),
            "readOnlyEndpoint": FailoverGroupReadOnlyEndpoint.from_dict(obj["readOnlyEndpoint"]) if obj.get("readOnlyEndpoint") is not None else None,
            "readWriteEndpoint": FailoverGroupReadWriteEndpoint.from_dict(obj["readWriteEndpoint"]) if obj.get("readWriteEndpoint") is not None else None
        })
        return _obj



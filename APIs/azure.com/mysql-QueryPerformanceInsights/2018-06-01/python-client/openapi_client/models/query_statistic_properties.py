# coding: utf-8

"""
    MySQLManagementClient

    The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class QueryStatisticProperties(BaseModel):
    """
    The properties of a query statistic.
    """ # noqa: E501
    aggregation_function: Optional[StrictStr] = Field(default=None, description="Aggregation function name.", alias="aggregationFunction")
    database_names: Optional[List[StrictStr]] = Field(default=None, description="The list of database names.", alias="databaseNames")
    end_time: Optional[datetime] = Field(default=None, description="Observation end time.", alias="endTime")
    metric_display_name: Optional[StrictStr] = Field(default=None, description="Metric display name.", alias="metricDisplayName")
    metric_name: Optional[StrictStr] = Field(default=None, description="Metric name.", alias="metricName")
    metric_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Metric value.", alias="metricValue")
    metric_value_unit: Optional[StrictStr] = Field(default=None, description="Metric value unit.", alias="metricValueUnit")
    query_execution_count: Optional[StrictInt] = Field(default=None, description="Number of query executions in this time interval.", alias="queryExecutionCount")
    query_id: Optional[StrictStr] = Field(default=None, description="Database query identifier.", alias="queryId")
    start_time: Optional[datetime] = Field(default=None, description="Observation start time.", alias="startTime")
    __properties: ClassVar[List[str]] = ["aggregationFunction", "databaseNames", "endTime", "metricDisplayName", "metricName", "metricValue", "metricValueUnit", "queryExecutionCount", "queryId", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryStatisticProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryStatisticProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationFunction": obj.get("aggregationFunction"),
            "databaseNames": obj.get("databaseNames"),
            "endTime": obj.get("endTime"),
            "metricDisplayName": obj.get("metricDisplayName"),
            "metricName": obj.get("metricName"),
            "metricValue": obj.get("metricValue"),
            "metricValueUnit": obj.get("metricValueUnit"),
            "queryExecutionCount": obj.get("queryExecutionCount"),
            "queryId": obj.get("queryId"),
            "startTime": obj.get("startTime")
        })
        return _obj



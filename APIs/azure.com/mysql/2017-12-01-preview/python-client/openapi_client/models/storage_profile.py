# coding: utf-8

"""
    MySQLManagementClient

    The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.

    The version of the OpenAPI document: 2017-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StorageProfile(BaseModel):
    """
    Storage Profile properties of a server
    """ # noqa: E501
    backup_retention_days: Optional[StrictInt] = Field(default=None, description="Backup retention days for the server.", alias="backupRetentionDays")
    geo_redundant_backup: Optional[StrictStr] = Field(default=None, description="Enable Geo-redundant or not for server backup.", alias="geoRedundantBackup")
    storage_autogrow: Optional[StrictStr] = Field(default=None, description="Enable Storage Auto Grow.", alias="storageAutogrow")
    storage_mb: Optional[StrictInt] = Field(default=None, description="Max storage allowed for a server.", alias="storageMB")
    __properties: ClassVar[List[str]] = ["backupRetentionDays", "geoRedundantBackup", "storageAutogrow", "storageMB"]

    @field_validator('geo_redundant_backup')
    def geo_redundant_backup_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('storage_autogrow')
    def storage_autogrow_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupRetentionDays": obj.get("backupRetentionDays"),
            "geoRedundantBackup": obj.get("geoRedundantBackup"),
            "storageAutogrow": obj.get("storageAutogrow"),
            "storageMB": obj.get("storageMB")
        })
        return _obj



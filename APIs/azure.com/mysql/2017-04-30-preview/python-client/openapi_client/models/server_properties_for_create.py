# coding: utf-8

"""
    MySQLManagementClient

    The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, log files and configurations.

    The version of the OpenAPI document: 2017-04-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.server_version import ServerVersion
from openapi_client.models.ssl_enforcement import SslEnforcement
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.server_properties_for_default_create import ServerPropertiesForDefaultCreate
    from openapi_client.models.server_properties_for_restore import ServerPropertiesForRestore

class ServerPropertiesForCreate(BaseModel):
    """
    The properties used to create a new server.
    """ # noqa: E501
    create_mode: StrictStr = Field(description="The mode to create a new server.", alias="createMode")
    ssl_enforcement: Optional[SslEnforcement] = Field(default=None, alias="sslEnforcement")
    storage_mb: Optional[Annotated[int, Field(strict=True, ge=1024)]] = Field(default=None, description="The maximum storage allowed for a server.", alias="storageMB")
    version: Optional[ServerVersion] = None
    __properties: ClassVar[List[str]] = ["createMode", "sslEnforcement", "storageMB", "version"]

    @field_validator('create_mode')
    def create_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Default', 'PointInTimeRestore']):
            raise ValueError("must be one of enum values ('Default', 'PointInTimeRestore')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'createMode'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ServerPropertiesForDefaultCreate': 'ServerPropertiesForDefaultCreate','ServerPropertiesForRestore': 'ServerPropertiesForRestore'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ServerPropertiesForDefaultCreate, ServerPropertiesForRestore]]:
        """Create an instance of ServerPropertiesForCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ServerPropertiesForDefaultCreate, ServerPropertiesForRestore]]:
        """Create an instance of ServerPropertiesForCreate from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ServerPropertiesForDefaultCreate':
            return import_module("openapi_client.models.server_properties_for_default_create").ServerPropertiesForDefaultCreate.from_dict(obj)
        if object_type ==  'ServerPropertiesForRestore':
            return import_module("openapi_client.models.server_properties_for_restore").ServerPropertiesForRestore.from_dict(obj)

        raise ValueError("ServerPropertiesForCreate failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



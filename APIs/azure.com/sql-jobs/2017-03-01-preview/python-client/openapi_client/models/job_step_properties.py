# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_step_action import JobStepAction
from openapi_client.models.job_step_execution_options import JobStepExecutionOptions
from openapi_client.models.job_step_output import JobStepOutput
from typing import Optional, Set
from typing_extensions import Self

class JobStepProperties(BaseModel):
    """
    Properties of a job step.
    """ # noqa: E501
    action: JobStepAction
    credential: StrictStr = Field(description="The resource ID of the job credential that will be used to connect to the targets.")
    execution_options: Optional[JobStepExecutionOptions] = Field(default=None, alias="executionOptions")
    output: Optional[JobStepOutput] = None
    step_id: Optional[StrictInt] = Field(default=None, description="The job step's index within the job. If not specified when creating the job step, it will be created as the last step. If not specified when updating the job step, the step id is not modified.", alias="stepId")
    target_group: StrictStr = Field(description="The resource ID of the target group that the job step will be executed on.", alias="targetGroup")
    __properties: ClassVar[List[str]] = ["action", "credential", "executionOptions", "output", "stepId", "targetGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStepProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_options
        if self.execution_options:
            _dict['executionOptions'] = self.execution_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStepProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": JobStepAction.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "credential": obj.get("credential"),
            "executionOptions": JobStepExecutionOptions.from_dict(obj["executionOptions"]) if obj.get("executionOptions") is not None else None,
            "output": JobStepOutput.from_dict(obj["output"]) if obj.get("output") is not None else None,
            "stepId": obj.get("stepId"),
            "targetGroup": obj.get("targetGroup")
        })
        return _obj



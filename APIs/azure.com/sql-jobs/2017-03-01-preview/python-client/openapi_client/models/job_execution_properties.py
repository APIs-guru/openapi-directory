# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_execution_target import JobExecutionTarget
from typing import Optional, Set
from typing_extensions import Self

class JobExecutionProperties(BaseModel):
    """
    Properties for an Azure SQL Database Elastic job execution.
    """ # noqa: E501
    create_time: Optional[datetime] = Field(default=None, description="The time that the job execution was created.", alias="createTime")
    current_attempt_start_time: Optional[datetime] = Field(default=None, description="Start time of the current attempt.", alias="currentAttemptStartTime")
    current_attempts: Optional[StrictInt] = Field(default=None, description="Number of times the job execution has been attempted.", alias="currentAttempts")
    end_time: Optional[datetime] = Field(default=None, description="The time that the job execution completed.", alias="endTime")
    job_execution_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the job execution.", alias="jobExecutionId")
    job_version: Optional[StrictInt] = Field(default=None, description="The job version number.", alias="jobVersion")
    last_message: Optional[StrictStr] = Field(default=None, description="The last status or error message.", alias="lastMessage")
    lifecycle: Optional[StrictStr] = Field(default=None, description="The detailed state of the job execution.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The ARM provisioning state of the job execution.", alias="provisioningState")
    start_time: Optional[datetime] = Field(default=None, description="The time that the job execution started.", alias="startTime")
    step_id: Optional[StrictInt] = Field(default=None, description="The job step id.", alias="stepId")
    step_name: Optional[StrictStr] = Field(default=None, description="The job step name.", alias="stepName")
    target: Optional[JobExecutionTarget] = None
    __properties: ClassVar[List[str]] = ["createTime", "currentAttemptStartTime", "currentAttempts", "endTime", "jobExecutionId", "jobVersion", "lastMessage", "lifecycle", "provisioningState", "startTime", "stepId", "stepName", "target"]

    @field_validator('lifecycle')
    def lifecycle_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Created', 'InProgress', 'WaitingForChildJobExecutions', 'WaitingForRetry', 'Succeeded', 'SucceededWithSkipped', 'Failed', 'TimedOut', 'Canceled', 'Skipped']):
            raise ValueError("must be one of enum values ('Created', 'InProgress', 'WaitingForChildJobExecutions', 'WaitingForRetry', 'Succeeded', 'SucceededWithSkipped', 'Failed', 'TimedOut', 'Canceled', 'Skipped')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Created', 'InProgress', 'Succeeded', 'Failed', 'Canceled']):
            raise ValueError("must be one of enum values ('Created', 'InProgress', 'Succeeded', 'Failed', 'Canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobExecutionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "current_attempt_start_time",
            "end_time",
            "job_execution_id",
            "job_version",
            "last_message",
            "lifecycle",
            "provisioning_state",
            "start_time",
            "step_id",
            "step_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobExecutionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "currentAttemptStartTime": obj.get("currentAttemptStartTime"),
            "currentAttempts": obj.get("currentAttempts"),
            "endTime": obj.get("endTime"),
            "jobExecutionId": obj.get("jobExecutionId"),
            "jobVersion": obj.get("jobVersion"),
            "lastMessage": obj.get("lastMessage"),
            "lifecycle": obj.get("lifecycle"),
            "provisioningState": obj.get("provisioningState"),
            "startTime": obj.get("startTime"),
            "stepId": obj.get("stepId"),
            "stepName": obj.get("stepName"),
            "target": JobExecutionTarget.from_dict(obj["target"]) if obj.get("target") is not None else None
        })
        return _obj



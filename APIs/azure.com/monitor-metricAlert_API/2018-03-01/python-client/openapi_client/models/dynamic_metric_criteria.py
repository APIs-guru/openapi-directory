# coding: utf-8

"""
    MonitorManagementClient

    Azure Monitor client to create/update/delete metric based alerts.

    The version of the OpenAPI document: 2018-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dynamic_threshold_failing_periods import DynamicThresholdFailingPeriods
from openapi_client.models.metric_dimension import MetricDimension
from openapi_client.models.multi_metric_criteria import MultiMetricCriteria
from typing import Optional, Set
from typing_extensions import Self

class DynamicMetricCriteria(MultiMetricCriteria):
    """
    Criterion for dynamic threshold.
    """ # noqa: E501
    alert_sensitivity: StrictStr = Field(description="The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.", alias="alertSensitivity")
    failing_periods: DynamicThresholdFailingPeriods = Field(alias="failingPeriods")
    ignore_data_before: Optional[datetime] = Field(default=None, description="Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)", alias="ignoreDataBefore")
    operator: StrictStr = Field(description="The operator used to compare the metric value against the threshold.")
    __properties: ClassVar[List[str]] = ["criterionType", "dimensions", "metricName", "metricNamespace", "name", "timeAggregation"]

    @field_validator('alert_sensitivity')
    def alert_sensitivity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Low', 'Medium', 'High']):
            raise ValueError("must be one of enum values ('Low', 'Medium', 'High')")
        return value

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['GreaterThan', 'LessThan', 'GreaterOrLessThan']):
            raise ValueError("must be one of enum values ('GreaterThan', 'LessThan', 'GreaterOrLessThan')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DynamicMetricCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DynamicMetricCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "criterionType": obj.get("criterionType"),
            "dimensions": [MetricDimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "metricName": obj.get("metricName"),
            "metricNamespace": obj.get("metricNamespace"),
            "name": obj.get("name"),
            "timeAggregation": obj.get("timeAggregation")
        })
        return _obj



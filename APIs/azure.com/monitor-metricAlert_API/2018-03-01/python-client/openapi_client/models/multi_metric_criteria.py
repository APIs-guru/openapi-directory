# coding: utf-8

"""
    MonitorManagementClient

    Azure Monitor client to create/update/delete metric based alerts.

    The version of the OpenAPI document: 2018-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.metric_dimension import MetricDimension
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.dynamic_metric_criteria import DynamicMetricCriteria
    from openapi_client.models.metric_criteria import MetricCriteria

class MultiMetricCriteria(BaseModel):
    """
    The types of conditions for a multi resource alert.
    """ # noqa: E501
    criterion_type: StrictStr = Field(description="Specifies the type of threshold criteria", alias="criterionType")
    dimensions: Optional[List[MetricDimension]] = Field(default=None, description="List of dimension conditions.")
    metric_name: StrictStr = Field(description="Name of the metric.", alias="metricName")
    metric_namespace: Optional[StrictStr] = Field(default=None, description="Namespace of the metric.", alias="metricNamespace")
    name: StrictStr = Field(description="Name of the criteria.")
    time_aggregation: StrictStr = Field(description="the criteria time aggregation types.", alias="timeAggregation")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["criterionType", "dimensions", "metricName", "metricNamespace", "name", "timeAggregation"]

    @field_validator('criterion_type')
    def criterion_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['StaticThresholdCriterion', 'DynamicThresholdCriterion']):
            raise ValueError("must be one of enum values ('StaticThresholdCriterion', 'DynamicThresholdCriterion')")
        return value

    @field_validator('time_aggregation')
    def time_aggregation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Average', 'Minimum', 'Maximum', 'Total']):
            raise ValueError("must be one of enum values ('Average', 'Minimum', 'Maximum', 'Total')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'criterionType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'DynamicMetricCriteria': 'DynamicMetricCriteria','MetricCriteria': 'MetricCriteria'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[DynamicMetricCriteria, MetricCriteria]]:
        """Create an instance of MultiMetricCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[DynamicMetricCriteria, MetricCriteria]]:
        """Create an instance of MultiMetricCriteria from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'DynamicMetricCriteria':
            return import_module("openapi_client.models.dynamic_metric_criteria").DynamicMetricCriteria.from_dict(obj)
        if object_type ==  'MetricCriteria':
            return import_module("openapi_client.models.metric_criteria").MetricCriteria.from_dict(obj)

        raise ValueError("MultiMetricCriteria failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



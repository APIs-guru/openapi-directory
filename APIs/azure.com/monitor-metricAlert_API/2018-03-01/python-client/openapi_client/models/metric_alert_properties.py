# coding: utf-8

"""
    MonitorManagementClient

    Azure Monitor client to create/update/delete metric based alerts.

    The version of the OpenAPI document: 2018-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_alert_action import MetricAlertAction
from openapi_client.models.metric_alert_criteria import MetricAlertCriteria
from typing import Optional, Set
from typing_extensions import Self

class MetricAlertProperties(BaseModel):
    """
    An alert rule.
    """ # noqa: E501
    actions: Optional[List[MetricAlertAction]] = Field(default=None, description="the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.")
    auto_mitigate: Optional[StrictBool] = Field(default=None, description="the flag that indicates whether the alert should be auto resolved or not.", alias="autoMitigate")
    criteria: MetricAlertCriteria
    description: StrictStr = Field(description="the description of the metric alert that will be included in the alert email.")
    enabled: StrictBool = Field(description="the flag that indicates whether the metric alert is enabled.")
    evaluation_frequency: StrictStr = Field(description="how often the metric alert is evaluated represented in ISO 8601 duration format.", alias="evaluationFrequency")
    last_updated_time: Optional[datetime] = Field(default=None, description="Last time the rule was updated in ISO8601 format.", alias="lastUpdatedTime")
    scopes: Optional[List[StrictStr]] = Field(default=None, description="the list of resource id's that this metric alert is scoped to.")
    severity: StrictInt = Field(description="Alert severity {0, 1, 2, 3, 4}")
    target_resource_region: Optional[StrictStr] = Field(default=None, description="the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.", alias="targetResourceRegion")
    target_resource_type: Optional[StrictStr] = Field(default=None, description="the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.", alias="targetResourceType")
    window_size: StrictStr = Field(description="the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.", alias="windowSize")
    __properties: ClassVar[List[str]] = ["actions", "autoMitigate", "criteria", "description", "enabled", "evaluationFrequency", "lastUpdatedTime", "scopes", "severity", "targetResourceRegion", "targetResourceType", "windowSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricAlertProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_updated_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of criteria
        if self.criteria:
            _dict['criteria'] = self.criteria.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricAlertProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [MetricAlertAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "autoMitigate": obj.get("autoMitigate"),
            "criteria": MetricAlertCriteria.from_dict(obj["criteria"]) if obj.get("criteria") is not None else None,
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "evaluationFrequency": obj.get("evaluationFrequency"),
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "scopes": obj.get("scopes"),
            "severity": obj.get("severity"),
            "targetResourceRegion": obj.get("targetResourceRegion"),
            "targetResourceType": obj.get("targetResourceType"),
            "windowSize": obj.get("windowSize")
        })
        return _obj



# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing_extensions import Annotated
from openapi_client.models.service_resource import ServiceResource
from openapi_client.models.service_resource_list import ServiceResourceList
from openapi_client.models.service_resource_update import ServiceResourceUpdate

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def services_create_or_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        parameters: Annotated[ServiceResource, Field(description="The service resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceResource:
        """Creates or updates a Service Fabric service resource.

        Create or update a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param parameters: The service resource. (required)
        :type parameters: ServiceResource
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def services_create_or_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        parameters: Annotated[ServiceResource, Field(description="The service resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceResource]:
        """Creates or updates a Service Fabric service resource.

        Create or update a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param parameters: The service resource. (required)
        :type parameters: ServiceResource
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def services_create_or_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        parameters: Annotated[ServiceResource, Field(description="The service resource.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates or updates a Service Fabric service resource.

        Create or update a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param parameters: The service resource. (required)
        :type parameters: ServiceResource
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _services_create_or_update_serialize(
        self,
        subscription_id,
        resource_group_name,
        cluster_name,
        application_name,
        service_name,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if application_name is not None:
            _path_params['applicationName'] = application_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def services_delete(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a Service Fabric service resource.

        Delete a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def services_delete_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a Service Fabric service resource.

        Delete a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def services_delete_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a Service Fabric service resource.

        Delete a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _services_delete_serialize(
        self,
        subscription_id,
        resource_group_name,
        cluster_name,
        application_name,
        service_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if application_name is not None:
            _path_params['applicationName'] = application_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def services_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceResource:
        """Gets a Service Fabric service resource.

        Get a Service Fabric service resource created or in the process of being created in the Service Fabric application resource.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def services_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceResource]:
        """Gets a Service Fabric service resource.

        Get a Service Fabric service resource created or in the process of being created in the Service Fabric application resource.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def services_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a Service Fabric service resource.

        Get a Service Fabric service resource created or in the process of being created in the Service Fabric application resource.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _services_get_serialize(
        self,
        subscription_id,
        resource_group_name,
        cluster_name,
        application_name,
        service_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if application_name is not None:
            _path_params['applicationName'] = application_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def services_list(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceResourceList:
        """Gets the list of service resources created in the specified Service Fabric application resource.

        Gets all service resources created or in the process of being created in the Service Fabric application resource.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceResourceList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def services_list_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceResourceList]:
        """Gets the list of service resources created in the specified Service Fabric application resource.

        Gets all service resources created or in the process of being created in the Service Fabric application resource.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceResourceList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def services_list_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets the list of service resources created in the specified Service Fabric application resource.

        Gets all service resources created or in the process of being created in the Service Fabric application resource.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceResourceList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _services_list_serialize(
        self,
        subscription_id,
        resource_group_name,
        cluster_name,
        application_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if application_name is not None:
            _path_params['applicationName'] = application_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def services_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        parameters: Annotated[ServiceResourceUpdate, Field(description="The service resource for patch operations.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceResource:
        """Updates a Service Fabric service resource.

        Update a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param parameters: The service resource for patch operations. (required)
        :type parameters: ServiceResourceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def services_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        parameters: Annotated[ServiceResourceUpdate, Field(description="The service resource for patch operations.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceResource]:
        """Updates a Service Fabric service resource.

        Update a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param parameters: The service resource for patch operations. (required)
        :type parameters: ServiceResourceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def services_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The customer subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        cluster_name: Annotated[StrictStr, Field(description="The name of the cluster resource.")],
        application_name: Annotated[StrictStr, Field(description="The name of the application resource.")],
        service_name: Annotated[StrictStr, Field(description="The name of the service resource in the format of {applicationName}~{serviceName}.")],
        api_version: Annotated[StrictStr, Field(description="The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification.")],
        parameters: Annotated[ServiceResourceUpdate, Field(description="The service resource for patch operations.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates a Service Fabric service resource.

        Update a Service Fabric service resource with the specified name.

        :param subscription_id: The customer subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param cluster_name: The name of the cluster resource. (required)
        :type cluster_name: str
        :param application_name: The name of the application resource. (required)
        :type application_name: str
        :param service_name: The name of the service resource in the format of {applicationName}~{serviceName}. (required)
        :type service_name: str
        :param api_version: The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-03-01\" for this specification. (required)
        :type api_version: str
        :param parameters: The service resource for patch operations. (required)
        :type parameters: ServiceResourceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._services_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            application_name=application_name,
            service_name=service_name,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "ServiceResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _services_update_serialize(
        self,
        subscription_id,
        resource_group_name,
        cluster_name,
        application_name,
        service_name,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if application_name is not None:
            _path_params['applicationName'] = application_name
        if service_name is not None:
            _path_params['serviceName'] = service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



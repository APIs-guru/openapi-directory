# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2017-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.move_cost import MoveCost
from openapi_client.models.partition_scheme_description import PartitionSchemeDescription
from openapi_client.models.service_correlation_description import ServiceCorrelationDescription
from openapi_client.models.service_kind import ServiceKind
from openapi_client.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_client.models.service_placement_policy_description import ServicePlacementPolicyDescription
from typing import Optional, Set
from typing_extensions import Self

class StatelessServiceProperties(BaseModel):
    """
    The properties of a stateless service resource.
    """ # noqa: E501
    instance_count: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=None, description="The instance count.", alias="instanceCount")
    partition_description: Optional[PartitionSchemeDescription] = Field(default=None, alias="partitionDescription")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current deployment or provisioning state, which only appears in the response", alias="provisioningState")
    service_kind: ServiceKind = Field(alias="serviceKind")
    service_type_name: Optional[StrictStr] = Field(default=None, description="The name of the service type", alias="serviceTypeName")
    correlation_scheme: Optional[List[ServiceCorrelationDescription]] = Field(default=None, description="A list that describes the correlation of the service with other services.", alias="correlationScheme")
    default_move_cost: Optional[MoveCost] = Field(default=None, alias="defaultMoveCost")
    placement_constraints: Optional[StrictStr] = Field(default=None, description="The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".", alias="placementConstraints")
    service_load_metrics: Optional[List[ServiceLoadMetricDescription]] = Field(default=None, description="The service load metrics is given as an array of ServiceLoadMetricDescription objects.", alias="serviceLoadMetrics")
    service_placement_policies: Optional[List[ServicePlacementPolicyDescription]] = Field(default=None, description="A list that describes the correlation of the service with other services.", alias="servicePlacementPolicies")
    __properties: ClassVar[List[str]] = ["partitionDescription", "provisioningState", "serviceKind", "serviceTypeName", "correlationScheme", "defaultMoveCost", "placementConstraints", "serviceLoadMetrics", "servicePlacementPolicies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatelessServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partition_description
        if self.partition_description:
            _dict['partitionDescription'] = self.partition_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in correlation_scheme (list)
        _items = []
        if self.correlation_scheme:
            for _item_correlation_scheme in self.correlation_scheme:
                if _item_correlation_scheme:
                    _items.append(_item_correlation_scheme.to_dict())
            _dict['correlationScheme'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_load_metrics (list)
        _items = []
        if self.service_load_metrics:
            for _item_service_load_metrics in self.service_load_metrics:
                if _item_service_load_metrics:
                    _items.append(_item_service_load_metrics.to_dict())
            _dict['serviceLoadMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_placement_policies (list)
        _items = []
        if self.service_placement_policies:
            for _item_service_placement_policies in self.service_placement_policies:
                if _item_service_placement_policies:
                    _items.append(_item_service_placement_policies.to_dict())
            _dict['servicePlacementPolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatelessServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "partitionDescription": PartitionSchemeDescription.from_dict(obj["partitionDescription"]) if obj.get("partitionDescription") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "serviceKind": obj.get("serviceKind"),
            "serviceTypeName": obj.get("serviceTypeName"),
            "correlationScheme": [ServiceCorrelationDescription.from_dict(_item) for _item in obj["correlationScheme"]] if obj.get("correlationScheme") is not None else None,
            "defaultMoveCost": obj.get("defaultMoveCost"),
            "placementConstraints": obj.get("placementConstraints"),
            "serviceLoadMetrics": [ServiceLoadMetricDescription.from_dict(_item) for _item in obj["serviceLoadMetrics"]] if obj.get("serviceLoadMetrics") is not None else None,
            "servicePlacementPolicies": [ServicePlacementPolicyDescription.from_dict(_item) for _item in obj["servicePlacementPolicies"]] if obj.get("servicePlacementPolicies") is not None else None
        })
        return _obj



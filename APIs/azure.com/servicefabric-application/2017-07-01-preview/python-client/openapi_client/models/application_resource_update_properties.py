# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2017-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.application_metric_description import ApplicationMetricDescription
from openapi_client.models.application_upgrade_policy import ApplicationUpgradePolicy
from typing import Optional, Set
from typing_extensions import Self

class ApplicationResourceUpdateProperties(BaseModel):
    """
    The application resource properties for patch operations.
    """ # noqa: E501
    maximum_nodes: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=0, description="The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.", alias="maximumNodes")
    metrics: Optional[List[ApplicationMetricDescription]] = Field(default=None, description="List of application capacity metric description.")
    minimum_nodes: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.", alias="minimumNodes")
    parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="List of application parameters with overridden values from their default values specified in the application manifest.")
    remove_application_capacity: Optional[StrictBool] = Field(default=None, description="Remove the current application capacity settings.", alias="removeApplicationCapacity")
    type_version: Optional[StrictStr] = Field(default=None, description="The version of the application type as defined in the application manifest.", alias="typeVersion")
    upgrade_policy: Optional[ApplicationUpgradePolicy] = Field(default=None, alias="upgradePolicy")
    __properties: ClassVar[List[str]] = ["maximumNodes", "metrics", "minimumNodes", "parameters", "removeApplicationCapacity", "typeVersion", "upgradePolicy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationResourceUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of upgrade_policy
        if self.upgrade_policy:
            _dict['upgradePolicy'] = self.upgrade_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationResourceUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maximumNodes": obj.get("maximumNodes") if obj.get("maximumNodes") is not None else 0,
            "metrics": [ApplicationMetricDescription.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "minimumNodes": obj.get("minimumNodes"),
            "parameters": obj.get("parameters"),
            "removeApplicationCapacity": obj.get("removeApplicationCapacity"),
            "typeVersion": obj.get("typeVersion"),
            "upgradePolicy": ApplicationUpgradePolicy.from_dict(obj["upgradePolicy"]) if obj.get("upgradePolicy") is not None else None
        })
        return _obj



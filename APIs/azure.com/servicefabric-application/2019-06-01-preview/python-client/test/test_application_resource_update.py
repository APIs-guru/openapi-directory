# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.application_resource_update import ApplicationResourceUpdate

class TestApplicationResourceUpdate(unittest.TestCase):
    """ApplicationResourceUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationResourceUpdate:
        """Test ApplicationResourceUpdate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationResourceUpdate`
        """
        model = ApplicationResourceUpdate()
        if include_optional:
            return ApplicationResourceUpdate(
                properties = openapi_client.models.application_resource_update_properties.ApplicationResourceUpdateProperties(
                    managed_identities = [
                        openapi_client.models.application_user_assigned_identity.ApplicationUserAssignedIdentity(
                            name = '', 
                            principal_id = '', )
                        ], 
                    maximum_nodes = 0, 
                    metrics = [
                        openapi_client.models.application_metric_description.ApplicationMetricDescription(
                            maximum_capacity = 56, 
                            name = '', 
                            reservation_capacity = 56, 
                            total_application_capacity = 56, )
                        ], 
                    minimum_nodes = 0, 
                    parameters = {
                        'key' : ''
                        }, 
                    remove_application_capacity = True, 
                    type_version = '', 
                    upgrade_policy = openapi_client.models.application_upgrade_policy.ApplicationUpgradePolicy(
                        application_health_policy = openapi_client.models.arm_application_health_policy.ArmApplicationHealthPolicy(
                            consider_warning_as_error = True, 
                            default_service_type_health_policy = openapi_client.models.arm_service_type_health_policy.ArmServiceTypeHealthPolicy(
                                max_percent_unhealthy_partitions_per_service = 0, 
                                max_percent_unhealthy_replicas_per_partition = 0, 
                                max_percent_unhealthy_services = 0, ), 
                            max_percent_unhealthy_deployed_applications = 56, 
                            service_type_health_policy_map = {
                                'key' : openapi_client.models.arm_service_type_health_policy.ArmServiceTypeHealthPolicy(
                                    max_percent_unhealthy_partitions_per_service = 0, 
                                    max_percent_unhealthy_replicas_per_partition = 0, 
                                    max_percent_unhealthy_services = 0, )
                                }, ), 
                        force_restart = True, 
                        rolling_upgrade_monitoring_policy = openapi_client.models.arm_rolling_upgrade_monitoring_policy.ArmRollingUpgradeMonitoringPolicy(
                            failure_action = 'Rollback', 
                            health_check_retry_timeout = 'PT0H10M0S', 
                            health_check_stable_duration = 'PT0H2M0S', 
                            health_check_wait_duration = '0', 
                            upgrade_domain_timeout = 'P10675199DT02H48M05.4775807S', 
                            upgrade_timeout = 'P10675199DT02H48M05.4775807S', ), 
                        upgrade_replica_set_check_timeout = '', ), ),
                etag = '',
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return ApplicationResourceUpdate(
        )
        """

    def testApplicationResourceUpdate(self):
        """Test ApplicationResourceUpdate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ServiceFabricManagementClient

    Azure Service Fabric Resource Provider API Client

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ArmRollingUpgradeMonitoringPolicy(BaseModel):
    """
    The policy used for monitoring the application upgrade
    """ # noqa: E501
    failure_action: Optional[StrictStr] = Field(default=None, description="The activation Mode of the service package", alias="failureAction")
    health_check_retry_timeout: Optional[StrictStr] = Field(default='PT0H10M0S', description="The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="healthCheckRetryTimeout")
    health_check_stable_duration: Optional[StrictStr] = Field(default='PT0H2M0S', description="The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="healthCheckStableDuration")
    health_check_wait_duration: Optional[StrictStr] = Field(default='0', description="The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="healthCheckWaitDuration")
    upgrade_domain_timeout: Optional[StrictStr] = Field(default='P10675199DT02H48M05.4775807S', description="The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="upgradeDomainTimeout")
    upgrade_timeout: Optional[StrictStr] = Field(default='P10675199DT02H48M05.4775807S', description="The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.", alias="upgradeTimeout")
    __properties: ClassVar[List[str]] = ["failureAction", "healthCheckRetryTimeout", "healthCheckStableDuration", "healthCheckWaitDuration", "upgradeDomainTimeout", "upgradeTimeout"]

    @field_validator('failure_action')
    def failure_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Rollback', 'Manual']):
            raise ValueError("must be one of enum values ('Rollback', 'Manual')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArmRollingUpgradeMonitoringPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArmRollingUpgradeMonitoringPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "failureAction": obj.get("failureAction"),
            "healthCheckRetryTimeout": obj.get("healthCheckRetryTimeout") if obj.get("healthCheckRetryTimeout") is not None else 'PT0H10M0S',
            "healthCheckStableDuration": obj.get("healthCheckStableDuration") if obj.get("healthCheckStableDuration") is not None else 'PT0H2M0S',
            "healthCheckWaitDuration": obj.get("healthCheckWaitDuration") if obj.get("healthCheckWaitDuration") is not None else '0',
            "upgradeDomainTimeout": obj.get("upgradeDomainTimeout") if obj.get("upgradeDomainTimeout") is not None else 'P10675199DT02H48M05.4775807S',
            "upgradeTimeout": obj.get("upgradeTimeout") if obj.get("upgradeTimeout") is not None else 'P10675199DT02H48M05.4775807S'
        })
        return _obj



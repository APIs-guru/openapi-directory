# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations to retrieve Products by Tags in Azure API Management deployment.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProductListByTags200ResponseValueInnerOperation(BaseModel):
    """
    Operation Entity contract Properties.
    """ # noqa: E501
    api_name: Optional[StrictStr] = Field(default=None, description="Api Name.", alias="apiName")
    api_revision: Optional[StrictStr] = Field(default=None, description="Api Revision.", alias="apiRevision")
    api_version: Optional[StrictStr] = Field(default=None, description="Api Version.", alias="apiVersion")
    description: Optional[StrictStr] = Field(default=None, description="Operation Description.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the operation in form /operations/{operationId}.")
    method: Optional[StrictStr] = Field(default=None, description="A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.")
    name: Optional[StrictStr] = Field(default=None, description="Operation name.")
    url_template: Optional[StrictStr] = Field(default=None, description="Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}", alias="urlTemplate")
    __properties: ClassVar[List[str]] = ["apiName", "apiRevision", "apiVersion", "description", "id", "method", "name", "urlTemplate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductListByTags200ResponseValueInnerOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_name",
            "api_revision",
            "api_version",
            "description",
            "method",
            "name",
            "url_template",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductListByTags200ResponseValueInnerOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiName": obj.get("apiName"),
            "apiRevision": obj.get("apiRevision"),
            "apiVersion": obj.get("apiVersion"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "method": obj.get("method"),
            "name": obj.get("name"),
            "urlTemplate": obj.get("urlTemplate")
        })
        return _obj



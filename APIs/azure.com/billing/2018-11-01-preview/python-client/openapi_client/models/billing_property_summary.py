# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BillingPropertySummary(BaseModel):
    """
    The billing property.
    """ # noqa: E501
    billing_account_id: Optional[StrictStr] = Field(default=None, description="Billing account Id.", alias="billingAccountId")
    billing_account_name: Optional[StrictStr] = Field(default=None, description="Billing account name.", alias="billingAccountName")
    billing_profile_id: Optional[StrictStr] = Field(default=None, description="Billing profile Id.", alias="billingProfileId")
    billing_profile_name: Optional[StrictStr] = Field(default=None, description="Billing profile name.", alias="billingProfileName")
    billing_tenant_id: Optional[StrictStr] = Field(default=None, description="Billing tenant Id.", alias="billingTenantId")
    cost_center: Optional[StrictStr] = Field(default=None, description="Cost center name.", alias="costCenter")
    invoice_section_id: Optional[StrictStr] = Field(default=None, description="Invoice Section Id.", alias="invoiceSectionId")
    invoice_section_name: Optional[StrictStr] = Field(default=None, description="Invoice Section name.", alias="invoiceSectionName")
    product_id: Optional[StrictStr] = Field(default=None, description="Product Id.", alias="productId")
    product_name: Optional[StrictStr] = Field(default=None, description="Product name.", alias="productName")
    sku_description: Optional[StrictStr] = Field(default=None, description="SKU description.", alias="skuDescription")
    sku_id: Optional[StrictStr] = Field(default=None, description="SKU Id.", alias="skuId")
    __properties: ClassVar[List[str]] = ["billingAccountId", "billingAccountName", "billingProfileId", "billingProfileName", "billingTenantId", "costCenter", "invoiceSectionId", "invoiceSectionName", "productId", "productName", "skuDescription", "skuId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingPropertySummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_account_id",
            "billing_account_name",
            "billing_profile_id",
            "billing_profile_name",
            "billing_tenant_id",
            "cost_center",
            "invoice_section_id",
            "invoice_section_name",
            "product_id",
            "product_name",
            "sku_description",
            "sku_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingPropertySummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAccountId": obj.get("billingAccountId"),
            "billingAccountName": obj.get("billingAccountName"),
            "billingProfileId": obj.get("billingProfileId"),
            "billingProfileName": obj.get("billingProfileName"),
            "billingTenantId": obj.get("billingTenantId"),
            "costCenter": obj.get("costCenter"),
            "invoiceSectionId": obj.get("invoiceSectionId"),
            "invoiceSectionName": obj.get("invoiceSectionName"),
            "productId": obj.get("productId"),
            "productName": obj.get("productName"),
            "skuDescription": obj.get("skuDescription"),
            "skuId": obj.get("skuId")
        })
        return _obj



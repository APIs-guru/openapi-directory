# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class ProductSummaryProperties(BaseModel):
    """
    The properties of the product summary.
    """ # noqa: E501
    availability_id: Optional[StrictStr] = Field(default=None, description="Availability Id.", alias="availabilityId")
    billing_frequency: Optional[StrictStr] = Field(default=None, description="Billing frequency.", alias="billingFrequency")
    billing_profile_id: Optional[StrictStr] = Field(default=None, description="Billing Profile id to which this product belongs.", alias="billingProfileId")
    billing_profile_name: Optional[StrictStr] = Field(default=None, description="Billing Profile name to which this product belongs.", alias="billingProfileName")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the product.", alias="displayName")
    end_date: Optional[datetime] = Field(default=None, description="end date.", alias="endDate")
    invoice_section_id: Optional[StrictStr] = Field(default=None, description="Invoice section id to which this product belongs.", alias="invoiceSectionId")
    invoice_section_name: Optional[StrictStr] = Field(default=None, description="Invoice section name to which this product belongs.", alias="invoiceSectionName")
    last_charge: Optional[Amount] = Field(default=None, alias="lastCharge")
    last_charge_date: Optional[datetime] = Field(default=None, description="The date of the last charge.", alias="lastChargeDate")
    parent_product_id: Optional[StrictStr] = Field(default=None, description="Parent Product Id.", alias="parentProductId")
    product_type: Optional[StrictStr] = Field(default=None, description="The type of product.", alias="productType")
    product_type_id: Optional[StrictStr] = Field(default=None, description="The product type id.", alias="productTypeId")
    purchase_date: Optional[datetime] = Field(default=None, description="The date of purchase.", alias="purchaseDate")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The purchased product quantity.")
    sku_description: Optional[StrictStr] = Field(default=None, description="Sku description.", alias="skuDescription")
    sku_id: Optional[StrictStr] = Field(default=None, description="Sku Id.", alias="skuId")
    status: Optional[StrictStr] = Field(default=None, description="Product status.")
    __properties: ClassVar[List[str]] = ["availabilityId", "billingFrequency", "billingProfileId", "billingProfileName", "displayName", "endDate", "invoiceSectionId", "invoiceSectionName", "lastCharge", "lastChargeDate", "parentProductId", "productType", "productTypeId", "purchaseDate", "quantity", "skuDescription", "skuId", "status"]

    @field_validator('billing_frequency')
    def billing_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OneTime', 'Monthly', 'UsageBased']):
            raise ValueError("must be one of enum values ('OneTime', 'Monthly', 'UsageBased')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Inactive', 'PastDue', 'Expiring', 'Expired', 'Disabled', 'Cancelled', 'AutoRenew']):
            raise ValueError("must be one of enum values ('Active', 'Inactive', 'PastDue', 'Expiring', 'Expired', 'Disabled', 'Cancelled', 'AutoRenew')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "availability_id",
            "billing_profile_id",
            "billing_profile_name",
            "display_name",
            "end_date",
            "invoice_section_id",
            "invoice_section_name",
            "last_charge_date",
            "parent_product_id",
            "product_type",
            "product_type_id",
            "purchase_date",
            "quantity",
            "sku_description",
            "sku_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_charge
        if self.last_charge:
            _dict['lastCharge'] = self.last_charge.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilityId": obj.get("availabilityId"),
            "billingFrequency": obj.get("billingFrequency"),
            "billingProfileId": obj.get("billingProfileId"),
            "billingProfileName": obj.get("billingProfileName"),
            "displayName": obj.get("displayName"),
            "endDate": obj.get("endDate"),
            "invoiceSectionId": obj.get("invoiceSectionId"),
            "invoiceSectionName": obj.get("invoiceSectionName"),
            "lastCharge": Amount.from_dict(obj["lastCharge"]) if obj.get("lastCharge") is not None else None,
            "lastChargeDate": obj.get("lastChargeDate"),
            "parentProductId": obj.get("parentProductId"),
            "productType": obj.get("productType"),
            "productTypeId": obj.get("productTypeId"),
            "purchaseDate": obj.get("purchaseDate"),
            "quantity": obj.get("quantity"),
            "skuDescription": obj.get("skuDescription"),
            "skuId": obj.get("skuId"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.detailed_transfer_status import DetailedTransferStatus
from openapi_client.models.transfer_status import TransferStatus
from typing import Optional, Set
from typing_extensions import Self

class TransferProperties(BaseModel):
    """
    Transfer details
    """ # noqa: E501
    billing_account_id: Optional[StrictStr] = Field(default=None, description="Target billing account Id.", alias="billingAccountId")
    canceled_by: Optional[StrictStr] = Field(default=None, description="Email Id who user canceled the transfer.", alias="canceledBy")
    creation_time: Optional[datetime] = Field(default=None, description="Transfer creation time.", alias="creationTime")
    detailed_transfer_status: Optional[List[DetailedTransferStatus]] = Field(default=None, description="Detailed transfer status.", alias="detailedTransferStatus")
    expiration_time: Optional[datetime] = Field(default=None, description="Transfer expiration time.", alias="expirationTime")
    initiator_email_id: Optional[StrictStr] = Field(default=None, description="Email Id of initiator of transfer.", alias="initiatorEmailId")
    invoice_section_id: Optional[StrictStr] = Field(default=None, description="Target invoice section Id.", alias="invoiceSectionId")
    last_modified_time: Optional[datetime] = Field(default=None, description="Transfer last modification time.", alias="lastModifiedTime")
    recipient_email_id: Optional[StrictStr] = Field(default=None, description="Email Id of recipient of transfer.", alias="recipientEmailId")
    transfer_status: Optional[TransferStatus] = Field(default=None, alias="transferStatus")
    __properties: ClassVar[List[str]] = ["billingAccountId", "canceledBy", "creationTime", "detailedTransferStatus", "expirationTime", "initiatorEmailId", "invoiceSectionId", "lastModifiedTime", "recipientEmailId", "transferStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_account_id",
            "canceled_by",
            "creation_time",
            "detailed_transfer_status",
            "expiration_time",
            "initiator_email_id",
            "invoice_section_id",
            "last_modified_time",
            "recipient_email_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in detailed_transfer_status (list)
        _items = []
        if self.detailed_transfer_status:
            for _item_detailed_transfer_status in self.detailed_transfer_status:
                if _item_detailed_transfer_status:
                    _items.append(_item_detailed_transfer_status.to_dict())
            _dict['detailedTransferStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAccountId": obj.get("billingAccountId"),
            "canceledBy": obj.get("canceledBy"),
            "creationTime": obj.get("creationTime"),
            "detailedTransferStatus": [DetailedTransferStatus.from_dict(_item) for _item in obj["detailedTransferStatus"]] if obj.get("detailedTransferStatus") is not None else None,
            "expirationTime": obj.get("expirationTime"),
            "initiatorEmailId": obj.get("initiatorEmailId"),
            "invoiceSectionId": obj.get("invoiceSectionId"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "recipientEmailId": obj.get("recipientEmailId"),
            "transferStatus": obj.get("transferStatus")
        })
        return _obj



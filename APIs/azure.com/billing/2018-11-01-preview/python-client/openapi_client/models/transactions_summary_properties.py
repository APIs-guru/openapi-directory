# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class TransactionsSummaryProperties(BaseModel):
    """
    The properties of the reservation transaction summary.
    """ # noqa: E501
    billing_profile_id: Optional[StrictStr] = Field(default=None, description="Billing Profile id to which this product belongs.", alias="billingProfileId")
    billing_profile_name: Optional[StrictStr] = Field(default=None, description="Billing Profile name to which this product belongs.", alias="billingProfileName")
    customer_display_name: Optional[StrictStr] = Field(default=None, description="Display name of customer to which this product belongs.", alias="customerDisplayName")
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer id to which this product belongs.", alias="customerId")
    var_date: Optional[datetime] = Field(default=None, description="The date of reservation transaction.", alias="date")
    invoice: Optional[StrictStr] = Field(default=None, description="Invoice number or 'pending' if not invoiced.")
    invoice_section_id: Optional[StrictStr] = Field(default=None, description="Invoice section id to which this product belongs.", alias="invoiceSectionId")
    invoice_section_name: Optional[StrictStr] = Field(default=None, description="Invoice section name to which this product belongs.", alias="invoiceSectionName")
    kind: Optional[StrictStr] = Field(default=None, description="The kind of transaction. Choices are all and reservation.")
    order_id: Optional[StrictStr] = Field(default=None, description="The reservation order id.", alias="orderId")
    order_name: Optional[StrictStr] = Field(default=None, description="The reservation order name.", alias="orderName")
    product_description: Optional[StrictStr] = Field(default=None, description="Product description.", alias="productDescription")
    product_family: Optional[StrictStr] = Field(default=None, description="The product family.", alias="productFamily")
    product_type: Optional[StrictStr] = Field(default=None, description="The type of product.", alias="productType")
    product_type_id: Optional[StrictStr] = Field(default=None, description="The product type id.", alias="productTypeId")
    quantity: Optional[StrictInt] = Field(default=None, description="Purchase quantity.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The subscription id.", alias="subscriptionId")
    subscription_name: Optional[StrictStr] = Field(default=None, description="The subscription name.", alias="subscriptionName")
    transaction_amount: Optional[Amount] = Field(default=None, alias="transactionAmount")
    transaction_type: Optional[StrictStr] = Field(default=None, description="Transaction types.", alias="transactionType")
    __properties: ClassVar[List[str]] = ["billingProfileId", "billingProfileName", "customerDisplayName", "customerId", "date", "invoice", "invoiceSectionId", "invoiceSectionName", "kind", "orderId", "orderName", "productDescription", "productFamily", "productType", "productTypeId", "quantity", "subscriptionId", "subscriptionName", "transactionAmount", "transactionType"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'reservation']):
            raise ValueError("must be one of enum values ('all', 'reservation')")
        return value

    @field_validator('transaction_type')
    def transaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Purchase', 'Usage Charge']):
            raise ValueError("must be one of enum values ('Purchase', 'Usage Charge')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionsSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_profile_id",
            "billing_profile_name",
            "customer_display_name",
            "customer_id",
            "var_date",
            "invoice",
            "invoice_section_id",
            "invoice_section_name",
            "order_id",
            "order_name",
            "product_description",
            "product_family",
            "product_type",
            "product_type_id",
            "quantity",
            "subscription_id",
            "subscription_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_amount
        if self.transaction_amount:
            _dict['transactionAmount'] = self.transaction_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionsSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingProfileId": obj.get("billingProfileId"),
            "billingProfileName": obj.get("billingProfileName"),
            "customerDisplayName": obj.get("customerDisplayName"),
            "customerId": obj.get("customerId"),
            "date": obj.get("date"),
            "invoice": obj.get("invoice"),
            "invoiceSectionId": obj.get("invoiceSectionId"),
            "invoiceSectionName": obj.get("invoiceSectionName"),
            "kind": obj.get("kind"),
            "orderId": obj.get("orderId"),
            "orderName": obj.get("orderName"),
            "productDescription": obj.get("productDescription"),
            "productFamily": obj.get("productFamily"),
            "productType": obj.get("productType"),
            "productTypeId": obj.get("productTypeId"),
            "quantity": obj.get("quantity"),
            "subscriptionId": obj.get("subscriptionId"),
            "subscriptionName": obj.get("subscriptionName"),
            "transactionAmount": Amount.from_dict(obj["transactionAmount"]) if obj.get("transactionAmount") is not None else None,
            "transactionType": obj.get("transactionType")
        })
        return _obj



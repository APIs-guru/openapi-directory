# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.download_properties import DownloadProperties
from openapi_client.models.payment_properties import PaymentProperties
from typing import Optional, Set
from typing_extensions import Self

class InvoiceSummaryProperties(BaseModel):
    """
    The properties of the invoice.
    """ # noqa: E501
    amount_due: Optional[Amount] = Field(default=None, alias="amountDue")
    billed_amount: Optional[Amount] = Field(default=None, alias="billedAmount")
    billing_profile_id: Optional[StrictStr] = Field(default=None, description="The billing profile id this invoice belongs to.", alias="billingProfileId")
    billing_profile_name: Optional[StrictStr] = Field(default=None, description="The profile name this invoice belongs to.", alias="billingProfileName")
    document_urls: Optional[List[DownloadProperties]] = Field(default=None, description="List of document urls available to download including invoice and tax documents.", alias="documentUrls")
    due_date: Optional[datetime] = Field(default=None, description="The due date for invoice.", alias="dueDate")
    invoice_date: Optional[datetime] = Field(default=None, description="The date when invoice was created.", alias="invoiceDate")
    invoice_period_end_date: Optional[datetime] = Field(default=None, description="The end date of the billing period.", alias="invoicePeriodEndDate")
    invoice_period_start_date: Optional[datetime] = Field(default=None, description="The start date of the billing period.", alias="invoicePeriodStartDate")
    payments: Optional[List[PaymentProperties]] = Field(default=None, description="List of payments.")
    purchase_order_number: Optional[StrictStr] = Field(default=None, description="The purchase identifier for the invoice.", alias="purchaseOrderNumber")
    status: Optional[StrictStr] = Field(default=None, description="Invoice status.")
    __properties: ClassVar[List[str]] = ["amountDue", "billedAmount", "billingProfileId", "billingProfileName", "documentUrls", "dueDate", "invoiceDate", "invoicePeriodEndDate", "invoicePeriodStartDate", "payments", "purchaseOrderNumber", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PastDue', 'Due', 'Paid', 'Void']):
            raise ValueError("must be one of enum values ('PastDue', 'Due', 'Paid', 'Void')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_profile_id",
            "billing_profile_name",
            "document_urls",
            "due_date",
            "invoice_date",
            "invoice_period_end_date",
            "invoice_period_start_date",
            "payments",
            "purchase_order_number",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount_due
        if self.amount_due:
            _dict['amountDue'] = self.amount_due.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billed_amount
        if self.billed_amount:
            _dict['billedAmount'] = self.billed_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in document_urls (list)
        _items = []
        if self.document_urls:
            for _item_document_urls in self.document_urls:
                if _item_document_urls:
                    _items.append(_item_document_urls.to_dict())
            _dict['documentUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['payments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amountDue": Amount.from_dict(obj["amountDue"]) if obj.get("amountDue") is not None else None,
            "billedAmount": Amount.from_dict(obj["billedAmount"]) if obj.get("billedAmount") is not None else None,
            "billingProfileId": obj.get("billingProfileId"),
            "billingProfileName": obj.get("billingProfileName"),
            "documentUrls": [DownloadProperties.from_dict(_item) for _item in obj["documentUrls"]] if obj.get("documentUrls") is not None else None,
            "dueDate": obj.get("dueDate"),
            "invoiceDate": obj.get("invoiceDate"),
            "invoicePeriodEndDate": obj.get("invoicePeriodEndDate"),
            "invoicePeriodStartDate": obj.get("invoicePeriodStartDate"),
            "payments": [PaymentProperties.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "status": obj.get("status")
        })
        return _obj



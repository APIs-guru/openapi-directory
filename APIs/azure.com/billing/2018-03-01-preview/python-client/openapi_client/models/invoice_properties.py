# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2018-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.download_url import DownloadUrl
from typing import Optional, Set
from typing_extensions import Self

class InvoiceProperties(BaseModel):
    """
    The properties of the invoice.
    """ # noqa: E501
    billing_period_ids: Optional[List[StrictStr]] = Field(default=None, description="Array of billing period ids that the invoice is attributed to.", alias="billingPeriodIds")
    download_url: Optional[DownloadUrl] = Field(default=None, alias="downloadUrl")
    invoice_period_end_date: Optional[date] = Field(default=None, description="The end of the date range covered by the invoice.", alias="invoicePeriodEndDate")
    invoice_period_start_date: Optional[date] = Field(default=None, description="The start of the date range covered by the invoice.", alias="invoicePeriodStartDate")
    __properties: ClassVar[List[str]] = ["billingPeriodIds", "downloadUrl", "invoicePeriodEndDate", "invoicePeriodStartDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_period_ids",
            "invoice_period_end_date",
            "invoice_period_start_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of download_url
        if self.download_url:
            _dict['downloadUrl'] = self.download_url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingPeriodIds": obj.get("billingPeriodIds"),
            "downloadUrl": DownloadUrl.from_dict(obj["downloadUrl"]) if obj.get("downloadUrl") is not None else None,
            "invoicePeriodEndDate": obj.get("invoicePeriodEndDate"),
            "invoicePeriodStartDate": obj.get("invoicePeriodStartDate")
        })
        return _obj



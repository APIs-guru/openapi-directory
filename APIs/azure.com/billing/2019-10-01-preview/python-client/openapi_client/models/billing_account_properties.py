# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2019-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address_details import AddressDetails
from openapi_client.models.billing_profile import BillingProfile
from openapi_client.models.department import Department
from openapi_client.models.enrollment import Enrollment
from openapi_client.models.enrollment_account import EnrollmentAccount
from typing import Optional, Set
from typing_extensions import Self

class BillingAccountProperties(BaseModel):
    """
    The properties of the billing account.
    """ # noqa: E501
    address: Optional[AddressDetails] = None
    agreement_type: Optional[StrictStr] = Field(default=None, description="The type of agreement.", alias="agreementType")
    billing_profiles: Optional[List[BillingProfile]] = Field(default=None, description="The billing profiles associated to the billing account. By default this is not populated, unless it's specified in $expand.", alias="billingProfiles")
    customer_type: Optional[StrictStr] = Field(default=None, description="The type of customer.", alias="customerType")
    departments: Optional[List[Department]] = Field(default=None, description="The departments associated to the enrollment.")
    display_name: Optional[StrictStr] = Field(default=None, description="The billing account name.", alias="displayName")
    enrollment_accounts: Optional[List[EnrollmentAccount]] = Field(default=None, description="The accounts associated to the enrollment.", alias="enrollmentAccounts")
    enrollment_details: Optional[Enrollment] = Field(default=None, alias="enrollmentDetails")
    organization_id: Optional[StrictStr] = Field(default=None, description="Organization id.", alias="organizationId")
    __properties: ClassVar[List[str]] = ["address", "agreementType", "billingProfiles", "customerType", "departments", "displayName", "enrollmentAccounts", "enrollmentDetails", "organizationId"]

    @field_validator('agreement_type')
    def agreement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MicrosoftCustomerAgreement', 'EnterpriseAgreement', 'MicrosoftOnlineServicesProgram', 'MicrosoftPartnerAgreement']):
            raise ValueError("must be one of enum values ('MicrosoftCustomerAgreement', 'EnterpriseAgreement', 'MicrosoftOnlineServicesProgram', 'MicrosoftPartnerAgreement')")
        return value

    @field_validator('customer_type')
    def customer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enterprise', 'Individual', 'Partner']):
            raise ValueError("must be one of enum values ('Enterprise', 'Individual', 'Partner')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "agreement_type",
            "customer_type",
            "display_name",
            "organization_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in billing_profiles (list)
        _items = []
        if self.billing_profiles:
            for _item_billing_profiles in self.billing_profiles:
                if _item_billing_profiles:
                    _items.append(_item_billing_profiles.to_dict())
            _dict['billingProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in departments (list)
        _items = []
        if self.departments:
            for _item_departments in self.departments:
                if _item_departments:
                    _items.append(_item_departments.to_dict())
            _dict['departments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in enrollment_accounts (list)
        _items = []
        if self.enrollment_accounts:
            for _item_enrollment_accounts in self.enrollment_accounts:
                if _item_enrollment_accounts:
                    _items.append(_item_enrollment_accounts.to_dict())
            _dict['enrollmentAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of enrollment_details
        if self.enrollment_details:
            _dict['enrollmentDetails'] = self.enrollment_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": AddressDetails.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "agreementType": obj.get("agreementType"),
            "billingProfiles": [BillingProfile.from_dict(_item) for _item in obj["billingProfiles"]] if obj.get("billingProfiles") is not None else None,
            "customerType": obj.get("customerType"),
            "departments": [Department.from_dict(_item) for _item in obj["departments"]] if obj.get("departments") is not None else None,
            "displayName": obj.get("displayName"),
            "enrollmentAccounts": [EnrollmentAccount.from_dict(_item) for _item in obj["enrollmentAccounts"]] if obj.get("enrollmentAccounts") is not None else None,
            "enrollmentDetails": Enrollment.from_dict(obj["enrollmentDetails"]) if obj.get("enrollmentDetails") is not None else None,
            "organizationId": obj.get("organizationId")
        })
        return _obj



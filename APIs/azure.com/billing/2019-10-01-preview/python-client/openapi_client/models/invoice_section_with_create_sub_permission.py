# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2019-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_plan import AzurePlan
from typing import Optional, Set
from typing_extensions import Self

class InvoiceSectionWithCreateSubPermission(BaseModel):
    """
    Invoice section properties with create subscription permission.
    """ # noqa: E501
    billing_profile_display_name: Optional[StrictStr] = Field(default=None, description="Billing profile display name.", alias="billingProfileDisplayName")
    billing_profile_id: Optional[StrictStr] = Field(default=None, description="Billing profile Id.", alias="billingProfileId")
    enabled_azure_plans: Optional[List[AzurePlan]] = Field(default=None, description="Enabled azure plans for the associated billing profile.", alias="enabledAzurePlans")
    invoice_section_display_name: Optional[StrictStr] = Field(default=None, description="Invoice Section display name.", alias="invoiceSectionDisplayName")
    invoice_section_id: Optional[StrictStr] = Field(default=None, description="Invoice Section Id.", alias="invoiceSectionId")
    __properties: ClassVar[List[str]] = ["billingProfileDisplayName", "billingProfileId", "enabledAzurePlans", "invoiceSectionDisplayName", "invoiceSectionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceSectionWithCreateSubPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billing_profile_display_name",
            "billing_profile_id",
            "invoice_section_display_name",
            "invoice_section_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enabled_azure_plans (list)
        _items = []
        if self.enabled_azure_plans:
            for _item_enabled_azure_plans in self.enabled_azure_plans:
                if _item_enabled_azure_plans:
                    _items.append(_item_enabled_azure_plans.to_dict())
            _dict['enabledAzurePlans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceSectionWithCreateSubPermission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingProfileDisplayName": obj.get("billingProfileDisplayName"),
            "billingProfileId": obj.get("billingProfileId"),
            "enabledAzurePlans": [AzurePlan.from_dict(_item) for _item in obj["enabledAzurePlans"]] if obj.get("enabledAzurePlans") is not None else None,
            "invoiceSectionDisplayName": obj.get("invoiceSectionDisplayName"),
            "invoiceSectionId": obj.get("invoiceSectionId")
        })
        return _obj



# coding: utf-8

"""
    BillingManagementClient

    Billing client provides access to billing resources for Azure subscriptions.

    The version of the OpenAPI document: 2019-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BillingRoleAssignmentProperties(BaseModel):
    """
    The properties of the a role assignment.
    """ # noqa: E501
    created_by_principal_id: Optional[StrictStr] = Field(default=None, description="the creator's principal Id", alias="createdByPrincipalId")
    created_by_principal_tenant_id: Optional[StrictStr] = Field(default=None, description="the creator's tenant Id", alias="createdByPrincipalTenantId")
    created_on: Optional[StrictStr] = Field(default=None, description="the date the role assignment is created", alias="createdOn")
    name: Optional[StrictStr] = Field(default=None, description="the name of the role assignment")
    principal_id: Optional[StrictStr] = Field(default=None, description="The user's principal id that the role gets assigned to", alias="principalId")
    role_definition_name: Optional[StrictStr] = Field(default=None, description="The role definition id", alias="roleDefinitionName")
    scope: Optional[StrictStr] = Field(default=None, description="The scope the role get assigned to")
    __properties: ClassVar[List[str]] = ["createdByPrincipalId", "createdByPrincipalTenantId", "createdOn", "name", "principalId", "roleDefinitionName", "scope"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingRoleAssignmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_by_principal_id",
            "created_by_principal_tenant_id",
            "created_on",
            "name",
            "principal_id",
            "role_definition_name",
            "scope",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingRoleAssignmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdByPrincipalId": obj.get("createdByPrincipalId"),
            "createdByPrincipalTenantId": obj.get("createdByPrincipalTenantId"),
            "createdOn": obj.get("createdOn"),
            "name": obj.get("name"),
            "principalId": obj.get("principalId"),
            "roleDefinitionName": obj.get("roleDefinitionName"),
            "scope": obj.get("scope")
        })
        return _obj



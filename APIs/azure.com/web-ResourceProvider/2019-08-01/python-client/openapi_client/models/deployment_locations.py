# coding: utf-8

"""
     API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployment_locations_hosting_environments_inner import DeploymentLocationsHostingEnvironmentsInner
from openapi_client.models.geo_region import GeoRegion
from openapi_client.models.hosting_environment_deployment_info import HostingEnvironmentDeploymentInfo
from typing import Optional, Set
from typing_extensions import Self

class DeploymentLocations(BaseModel):
    """
    List of available locations (regions or App Service Environments) for deployment of App Service resources.
    """ # noqa: E501
    hosting_environment_deployment_infos: Optional[List[HostingEnvironmentDeploymentInfo]] = Field(default=None, description="Available App Service Environments with basic information.", alias="hostingEnvironmentDeploymentInfos")
    hosting_environments: Optional[List[DeploymentLocationsHostingEnvironmentsInner]] = Field(default=None, description="Available App Service Environments with full descriptions of the environments.", alias="hostingEnvironments")
    locations: Optional[List[GeoRegion]] = Field(default=None, description="Available regions.")
    __properties: ClassVar[List[str]] = ["hostingEnvironmentDeploymentInfos", "hostingEnvironments", "locations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentLocations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hosting_environment_deployment_infos (list)
        _items = []
        if self.hosting_environment_deployment_infos:
            for _item_hosting_environment_deployment_infos in self.hosting_environment_deployment_infos:
                if _item_hosting_environment_deployment_infos:
                    _items.append(_item_hosting_environment_deployment_infos.to_dict())
            _dict['hostingEnvironmentDeploymentInfos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hosting_environments (list)
        _items = []
        if self.hosting_environments:
            for _item_hosting_environments in self.hosting_environments:
                if _item_hosting_environments:
                    _items.append(_item_hosting_environments.to_dict())
            _dict['hostingEnvironments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentLocations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostingEnvironmentDeploymentInfos": [HostingEnvironmentDeploymentInfo.from_dict(_item) for _item in obj["hostingEnvironmentDeploymentInfos"]] if obj.get("hostingEnvironmentDeploymentInfos") is not None else None,
            "hostingEnvironments": [DeploymentLocationsHostingEnvironmentsInner.from_dict(_item) for _item in obj["hostingEnvironments"]] if obj.get("hostingEnvironments") is not None else None,
            "locations": [GeoRegion.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None
        })
        return _obj



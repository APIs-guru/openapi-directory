# coding: utf-8

"""
     API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployment_locations_hosting_environments_inner_cluster_settings_inner import DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner
from openapi_client.models.deployment_locations_hosting_environments_inner_environment_capacities_inner import DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner
from openapi_client.models.deployment_locations_hosting_environments_inner_network_access_control_list_inner import DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner
from openapi_client.models.deployment_locations_hosting_environments_inner_vip_mappings_inner import DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner
from openapi_client.models.deployment_locations_hosting_environments_inner_virtual_network import DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork
from openapi_client.models.deployment_locations_hosting_environments_inner_worker_pools_inner import DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner
from typing import Optional, Set
from typing_extensions import Self

class DeploymentLocationsHostingEnvironmentsInner(BaseModel):
    """
    Description of an App Service Environment.
    """ # noqa: E501
    allowed_multi_sizes: Optional[StrictStr] = Field(default=None, description="List of comma separated strings describing which VM sizes are allowed for front-ends.", alias="allowedMultiSizes")
    allowed_worker_sizes: Optional[StrictStr] = Field(default=None, description="List of comma separated strings describing which VM sizes are allowed for workers.", alias="allowedWorkerSizes")
    api_management_account_id: Optional[StrictStr] = Field(default=None, description="API Management Account associated with the App Service Environment.", alias="apiManagementAccountId")
    cluster_settings: Optional[List[DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner]] = Field(default=None, description="Custom settings for changing the behavior of the App Service Environment.", alias="clusterSettings")
    database_edition: Optional[StrictStr] = Field(default=None, description="Edition of the metadata database for the App Service Environment, e.g. \"Standard\".", alias="databaseEdition")
    database_service_objective: Optional[StrictStr] = Field(default=None, description="Service objective of the metadata database for the App Service Environment, e.g. \"S0\".", alias="databaseServiceObjective")
    default_front_end_scale_factor: Optional[StrictInt] = Field(default=None, description="Default Scale Factor for FrontEnds.", alias="defaultFrontEndScaleFactor")
    dns_suffix: Optional[StrictStr] = Field(default=None, description="DNS suffix of the App Service Environment.", alias="dnsSuffix")
    dynamic_cache_enabled: Optional[StrictBool] = Field(default=None, description="True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available (most likely because NSG blocked the incoming traffic).", alias="dynamicCacheEnabled")
    environment_capacities: Optional[List[DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner]] = Field(default=None, description="Current total, used, and available worker capacities.", alias="environmentCapacities")
    environment_is_healthy: Optional[StrictBool] = Field(default=None, description="True/false indicating whether the App Service Environment is healthy.", alias="environmentIsHealthy")
    environment_status: Optional[StrictStr] = Field(default=None, description="Detailed message about with results of the last check of the App Service Environment.", alias="environmentStatus")
    front_end_scale_factor: Optional[StrictInt] = Field(default=None, description="Scale factor for front-ends.", alias="frontEndScaleFactor")
    has_linux_workers: Optional[StrictBool] = Field(default=None, description="Flag that displays whether an ASE has linux workers or not", alias="hasLinuxWorkers")
    internal_load_balancing_mode: Optional[StrictStr] = Field(default=None, description="Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.", alias="internalLoadBalancingMode")
    ipssl_address_count: Optional[StrictInt] = Field(default=None, description="Number of IP SSL addresses reserved for the App Service Environment.", alias="ipsslAddressCount")
    last_action: Optional[StrictStr] = Field(default=None, description="Last deployment action on the App Service Environment.", alias="lastAction")
    last_action_result: Optional[StrictStr] = Field(default=None, description="Result of the last deployment action on the App Service Environment.", alias="lastActionResult")
    location: StrictStr = Field(description="Location of the App Service Environment, e.g. \"West US\".")
    maximum_number_of_machines: Optional[StrictInt] = Field(default=None, description="Maximum number of VMs in the App Service Environment.", alias="maximumNumberOfMachines")
    multi_role_count: Optional[StrictInt] = Field(default=None, description="Number of front-end instances.", alias="multiRoleCount")
    multi_size: Optional[StrictStr] = Field(default=None, description="Front-end VM size, e.g. \"Medium\", \"Large\".", alias="multiSize")
    name: StrictStr = Field(description="Name of the App Service Environment.")
    network_access_control_list: Optional[List[DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner]] = Field(default=None, description="Access control list for controlling traffic to the App Service Environment.", alias="networkAccessControlList")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the App Service Environment.", alias="provisioningState")
    resource_group: Optional[StrictStr] = Field(default=None, description="Resource group of the App Service Environment.", alias="resourceGroup")
    ssl_cert_key_vault_id: Optional[StrictStr] = Field(default=None, description="Key Vault ID for ILB App Service Environment default SSL certificate", alias="sslCertKeyVaultId")
    ssl_cert_key_vault_secret_name: Optional[StrictStr] = Field(default=None, description="Key Vault Secret Name for ILB App Service Environment default SSL certificate", alias="sslCertKeyVaultSecretName")
    status: Optional[StrictStr] = Field(default=None, description="Current status of the App Service Environment.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription of the App Service Environment.", alias="subscriptionId")
    suspended: Optional[StrictBool] = Field(default=None, description="<code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available  (most likely because NSG blocked the incoming traffic).")
    upgrade_domains: Optional[StrictInt] = Field(default=None, description="Number of upgrade domains of the App Service Environment.", alias="upgradeDomains")
    user_whitelisted_ip_ranges: Optional[List[StrictStr]] = Field(default=None, description="User added ip ranges to whitelist on ASE db", alias="userWhitelistedIpRanges")
    vip_mappings: Optional[List[DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner]] = Field(default=None, description="Description of IP SSL mapping for the App Service Environment.", alias="vipMappings")
    virtual_network: DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork = Field(alias="virtualNetwork")
    vnet_name: Optional[StrictStr] = Field(default=None, description="Name of the Virtual Network for the App Service Environment.", alias="vnetName")
    vnet_resource_group_name: Optional[StrictStr] = Field(default=None, description="Resource group of the Virtual Network.", alias="vnetResourceGroupName")
    vnet_subnet_name: Optional[StrictStr] = Field(default=None, description="Subnet of the Virtual Network.", alias="vnetSubnetName")
    worker_pools: List[DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner] = Field(description="Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.", alias="workerPools")
    __properties: ClassVar[List[str]] = ["allowedMultiSizes", "allowedWorkerSizes", "apiManagementAccountId", "clusterSettings", "databaseEdition", "databaseServiceObjective", "defaultFrontEndScaleFactor", "dnsSuffix", "dynamicCacheEnabled", "environmentCapacities", "environmentIsHealthy", "environmentStatus", "frontEndScaleFactor", "hasLinuxWorkers", "internalLoadBalancingMode", "ipsslAddressCount", "lastAction", "lastActionResult", "location", "maximumNumberOfMachines", "multiRoleCount", "multiSize", "name", "networkAccessControlList", "provisioningState", "resourceGroup", "sslCertKeyVaultId", "sslCertKeyVaultSecretName", "status", "subscriptionId", "suspended", "upgradeDomains", "userWhitelistedIpRanges", "vipMappings", "virtualNetwork", "vnetName", "vnetResourceGroupName", "vnetSubnetName", "workerPools"]

    @field_validator('internal_load_balancing_mode')
    def internal_load_balancing_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Web', 'Publishing']):
            raise ValueError("must be one of enum values ('None', 'Web', 'Publishing')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting']):
            raise ValueError("must be one of enum values ('Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Preparing', 'Ready', 'Scaling', 'Deleting']):
            raise ValueError("must be one of enum values ('Preparing', 'Ready', 'Scaling', 'Deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentLocationsHostingEnvironmentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "allowed_multi_sizes",
            "allowed_worker_sizes",
            "database_edition",
            "database_service_objective",
            "default_front_end_scale_factor",
            "environment_capacities",
            "environment_is_healthy",
            "environment_status",
            "last_action",
            "last_action_result",
            "maximum_number_of_machines",
            "provisioning_state",
            "resource_group",
            "status",
            "subscription_id",
            "upgrade_domains",
            "vip_mappings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_settings (list)
        _items = []
        if self.cluster_settings:
            for _item_cluster_settings in self.cluster_settings:
                if _item_cluster_settings:
                    _items.append(_item_cluster_settings.to_dict())
            _dict['clusterSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in environment_capacities (list)
        _items = []
        if self.environment_capacities:
            for _item_environment_capacities in self.environment_capacities:
                if _item_environment_capacities:
                    _items.append(_item_environment_capacities.to_dict())
            _dict['environmentCapacities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_access_control_list (list)
        _items = []
        if self.network_access_control_list:
            for _item_network_access_control_list in self.network_access_control_list:
                if _item_network_access_control_list:
                    _items.append(_item_network_access_control_list.to_dict())
            _dict['networkAccessControlList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vip_mappings (list)
        _items = []
        if self.vip_mappings:
            for _item_vip_mappings in self.vip_mappings:
                if _item_vip_mappings:
                    _items.append(_item_vip_mappings.to_dict())
            _dict['vipMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_network
        if self.virtual_network:
            _dict['virtualNetwork'] = self.virtual_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in worker_pools (list)
        _items = []
        if self.worker_pools:
            for _item_worker_pools in self.worker_pools:
                if _item_worker_pools:
                    _items.append(_item_worker_pools.to_dict())
            _dict['workerPools'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentLocationsHostingEnvironmentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedMultiSizes": obj.get("allowedMultiSizes"),
            "allowedWorkerSizes": obj.get("allowedWorkerSizes"),
            "apiManagementAccountId": obj.get("apiManagementAccountId"),
            "clusterSettings": [DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner.from_dict(_item) for _item in obj["clusterSettings"]] if obj.get("clusterSettings") is not None else None,
            "databaseEdition": obj.get("databaseEdition"),
            "databaseServiceObjective": obj.get("databaseServiceObjective"),
            "defaultFrontEndScaleFactor": obj.get("defaultFrontEndScaleFactor"),
            "dnsSuffix": obj.get("dnsSuffix"),
            "dynamicCacheEnabled": obj.get("dynamicCacheEnabled"),
            "environmentCapacities": [DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner.from_dict(_item) for _item in obj["environmentCapacities"]] if obj.get("environmentCapacities") is not None else None,
            "environmentIsHealthy": obj.get("environmentIsHealthy"),
            "environmentStatus": obj.get("environmentStatus"),
            "frontEndScaleFactor": obj.get("frontEndScaleFactor"),
            "hasLinuxWorkers": obj.get("hasLinuxWorkers"),
            "internalLoadBalancingMode": obj.get("internalLoadBalancingMode"),
            "ipsslAddressCount": obj.get("ipsslAddressCount"),
            "lastAction": obj.get("lastAction"),
            "lastActionResult": obj.get("lastActionResult"),
            "location": obj.get("location"),
            "maximumNumberOfMachines": obj.get("maximumNumberOfMachines"),
            "multiRoleCount": obj.get("multiRoleCount"),
            "multiSize": obj.get("multiSize"),
            "name": obj.get("name"),
            "networkAccessControlList": [DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner.from_dict(_item) for _item in obj["networkAccessControlList"]] if obj.get("networkAccessControlList") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceGroup": obj.get("resourceGroup"),
            "sslCertKeyVaultId": obj.get("sslCertKeyVaultId"),
            "sslCertKeyVaultSecretName": obj.get("sslCertKeyVaultSecretName"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "suspended": obj.get("suspended"),
            "upgradeDomains": obj.get("upgradeDomains"),
            "userWhitelistedIpRanges": obj.get("userWhitelistedIpRanges"),
            "vipMappings": [DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner.from_dict(_item) for _item in obj["vipMappings"]] if obj.get("vipMappings") is not None else None,
            "virtualNetwork": DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork.from_dict(obj["virtualNetwork"]) if obj.get("virtualNetwork") is not None else None,
            "vnetName": obj.get("vnetName"),
            "vnetResourceGroupName": obj.get("vnetResourceGroupName"),
            "vnetSubnetName": obj.get("vnetSubnetName"),
            "workerPools": [DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.from_dict(_item) for _item in obj["workerPools"]] if obj.get("workerPools") is not None else None
        })
        return _obj



# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.file_server import FileServer

class TestFileServer(unittest.TestCase):
    """FileServer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FileServer:
        """Test FileServer
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FileServer`
        """
        model = FileServer()
        if include_optional:
            return FileServer(
                properties = openapi_client.models.file_server_properties.FileServerProperties(
                    creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    data_disks = openapi_client.models.data_disks.DataDisks(
                        caching_type = 'none', 
                        disk_count = 56, 
                        disk_size_in_gb = 56, 
                        storage_account_type = 'Standard_LRS', ), 
                    mount_settings = openapi_client.models.mount_settings.MountSettings(
                        file_server_internal_ip = '', 
                        file_server_public_ip = '', 
                        file_server_type = 'nfs', 
                        mount_point = '', ), 
                    provisioning_state = 'creating', 
                    provisioning_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    ssh_configuration = openapi_client.models.ssh_configuration.SshConfiguration(
                        public_ips_to_allow = [
                            ''
                            ], 
                        user_account_settings = openapi_client.models.user_account_settings.UserAccountSettings(
                            admin_user_name = '', 
                            admin_user_password = '', 
                            admin_user_ssh_public_key = '', ), ), 
                    subnet = openapi_client.models.resource_id.ResourceId(
                        id = '', ), 
                    vm_size = '', ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return FileServer(
        )
        """

    def testFileServer(self):
        """Test FileServer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_base_properties import JobBaseProperties

class TestJobBaseProperties(unittest.TestCase):
    """JobBaseProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobBaseProperties:
        """Test JobBaseProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobBaseProperties`
        """
        model = JobBaseProperties()
        if include_optional:
            return JobBaseProperties(
                caffe2_settings = openapi_client.models.caffe2_settings.Caffe2Settings(
                    command_line_args = '', 
                    python_interpreter_path = '', 
                    python_script_file_path = '', ),
                caffe_settings = openapi_client.models.caffe_settings.CaffeSettings(
                    command_line_args = '', 
                    config_file_path = '', 
                    process_count = 56, 
                    python_interpreter_path = '', 
                    python_script_file_path = '', ),
                chainer_settings = openapi_client.models.chainer_settings.ChainerSettings(
                    command_line_args = '', 
                    process_count = 56, 
                    python_interpreter_path = '', 
                    python_script_file_path = '', ),
                cluster = openapi_client.models.resource_id.ResourceId(
                    id = '', ),
                cntk_settings = openapi_client.models.cnt_ksettings.CNTKsettings(
                    command_line_args = '', 
                    config_file_path = '', 
                    language_type = '', 
                    process_count = 56, 
                    python_interpreter_path = '', 
                    python_script_file_path = '', ),
                constraints = openapi_client.models.job_base_properties_constraints.JobBaseProperties_constraints(
                    max_wall_clock_time = '7.00:00:00', ),
                container_settings = openapi_client.models.container_settings.ContainerSettings(
                    image_source_registry = openapi_client.models.image_source_registry.ImageSourceRegistry(
                        credentials = openapi_client.models.private_registry_credentials.PrivateRegistryCredentials(
                            password = '', 
                            password_secret_reference = openapi_client.models.key_vault_secret_reference.KeyVaultSecretReference(
                                secret_url = '', 
                                source_vault = openapi_client.models.resource_id.ResourceId(
                                    id = '', ), ), 
                            username = '', ), 
                        image = '', 
                        server_url = '', ), ),
                custom_toolkit_settings = openapi_client.models.custom_toolkit_settings.CustomToolkitSettings(
                    command_line = '', ),
                environment_variables = [
                    openapi_client.models.environment_variable.EnvironmentVariable(
                        name = '', 
                        value = '', )
                    ],
                experiment_name = '',
                input_directories = [
                    openapi_client.models.input_directory.InputDirectory(
                        id = '', 
                        path = '', )
                    ],
                job_preparation = openapi_client.models.job_preparation.JobPreparation(
                    command_line = '', ),
                mount_volumes = openapi_client.models.mount_volumes.MountVolumes(
                    azure_blob_file_systems = [
                        openapi_client.models.azure_blob_file_system_reference.AzureBlobFileSystemReference(
                            account_name = '', 
                            container_name = '', 
                            credentials = openapi_client.models.azure_storage_credentials_info.AzureStorageCredentialsInfo(
                                account_key = '', 
                                account_key_secret_reference = openapi_client.models.key_vault_secret_reference.KeyVaultSecretReference(
                                    secret_url = '', 
                                    source_vault = openapi_client.models.resource_id.ResourceId(
                                        id = '', ), ), ), 
                            mount_options = '', 
                            relative_mount_path = '', )
                        ], 
                    azure_file_shares = [
                        openapi_client.models.azure_file_share_reference.AzureFileShareReference(
                            account_name = '', 
                            azure_file_url = '', 
                            credentials = openapi_client.models.azure_storage_credentials_info.AzureStorageCredentialsInfo(
                                account_key = '', ), 
                            directory_mode = '0777', 
                            file_mode = '0777', 
                            relative_mount_path = '', )
                        ], 
                    file_servers = [
                        openapi_client.models.file_server_reference.FileServerReference(
                            file_server = openapi_client.models.resource_id.ResourceId(
                                id = '', ), 
                            mount_options = '', 
                            relative_mount_path = '', 
                            source_directory = '', )
                        ], 
                    unmanaged_file_systems = [
                        openapi_client.models.unmanaged_file_system_reference.UnmanagedFileSystemReference(
                            mount_command = '', 
                            relative_mount_path = '', )
                        ], ),
                node_count = 56,
                output_directories = [
                    openapi_client.models.output_directory.OutputDirectory(
                        create_new = True, 
                        id = '', 
                        path_prefix = '', 
                        path_suffix = '', 
                        type = 'custom', )
                    ],
                priority = 56,
                py_torch_settings = openapi_client.models.py_torch_settings.PyTorchSettings(
                    command_line_args = '', 
                    communication_backend = '', 
                    process_count = 56, 
                    python_interpreter_path = '', 
                    python_script_file_path = '', ),
                secrets = [
                    openapi_client.models.environment_variable_with_secret_value.EnvironmentVariableWithSecretValue(
                        name = '', 
                        value = '', 
                        value_secret_reference = openapi_client.models.key_vault_secret_reference.KeyVaultSecretReference(
                            secret_url = '', 
                            source_vault = openapi_client.models.resource_id.ResourceId(
                                id = '', ), ), )
                    ],
                std_out_err_path_prefix = '',
                tensor_flow_settings = openapi_client.models.tensor_flow_settings.TensorFlowSettings(
                    master_command_line_args = '', 
                    parameter_server_command_line_args = '', 
                    parameter_server_count = 56, 
                    python_interpreter_path = '', 
                    python_script_file_path = '', 
                    worker_command_line_args = '', 
                    worker_count = 56, )
            )
        else:
            return JobBaseProperties(
                cluster = openapi_client.models.resource_id.ResourceId(
                    id = '', ),
                node_count = 56,
                std_out_err_path_prefix = '',
        )
        """

    def testJobBaseProperties(self):
        """Test JobBaseProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

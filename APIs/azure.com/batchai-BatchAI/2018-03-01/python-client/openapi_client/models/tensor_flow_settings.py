# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TensorFlowSettings(BaseModel):
    """
    Specifies the settings for TensorFlow job.
    """ # noqa: E501
    master_command_line_args: Optional[StrictStr] = Field(default=None, alias="masterCommandLineArgs")
    parameter_server_command_line_args: Optional[StrictStr] = Field(default=None, description="This property is optional for single machine training.", alias="parameterServerCommandLineArgs")
    parameter_server_count: Optional[StrictInt] = Field(default=None, description="If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training (This property is not applicable for single machine training). This property can be specified only for distributed TensorFlow training.", alias="parameterServerCount")
    python_interpreter_path: Optional[StrictStr] = Field(default=None, alias="pythonInterpreterPath")
    python_script_file_path: StrictStr = Field(alias="pythonScriptFilePath")
    worker_command_line_args: Optional[StrictStr] = Field(default=None, description="This property is optional for single machine training.", alias="workerCommandLineArgs")
    worker_count: Optional[StrictInt] = Field(default=None, description="If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training", alias="workerCount")
    __properties: ClassVar[List[str]] = ["masterCommandLineArgs", "parameterServerCommandLineArgs", "parameterServerCount", "pythonInterpreterPath", "pythonScriptFilePath", "workerCommandLineArgs", "workerCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TensorFlowSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TensorFlowSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "masterCommandLineArgs": obj.get("masterCommandLineArgs"),
            "parameterServerCommandLineArgs": obj.get("parameterServerCommandLineArgs"),
            "parameterServerCount": obj.get("parameterServerCount"),
            "pythonInterpreterPath": obj.get("pythonInterpreterPath"),
            "pythonScriptFilePath": obj.get("pythonScriptFilePath"),
            "workerCommandLineArgs": obj.get("workerCommandLineArgs"),
            "workerCount": obj.get("workerCount")
        })
        return _obj



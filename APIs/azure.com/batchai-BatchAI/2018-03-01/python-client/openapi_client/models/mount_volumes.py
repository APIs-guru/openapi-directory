# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_blob_file_system_reference import AzureBlobFileSystemReference
from openapi_client.models.azure_file_share_reference import AzureFileShareReference
from openapi_client.models.file_server_reference import FileServerReference
from openapi_client.models.unmanaged_file_system_reference import UnmanagedFileSystemReference
from typing import Optional, Set
from typing_extensions import Self

class MountVolumes(BaseModel):
    """
    Details of volumes to mount on the cluster.
    """ # noqa: E501
    azure_blob_file_systems: Optional[List[AzureBlobFileSystemReference]] = Field(default=None, description="References to Azure Blob FUSE that are to be mounted to the cluster nodes.", alias="azureBlobFileSystems")
    azure_file_shares: Optional[List[AzureFileShareReference]] = Field(default=None, description="References to Azure File Shares that are to be mounted to the cluster nodes.", alias="azureFileShares")
    file_servers: Optional[List[FileServerReference]] = Field(default=None, alias="fileServers")
    unmanaged_file_systems: Optional[List[UnmanagedFileSystemReference]] = Field(default=None, alias="unmanagedFileSystems")
    __properties: ClassVar[List[str]] = ["azureBlobFileSystems", "azureFileShares", "fileServers", "unmanagedFileSystems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MountVolumes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in azure_blob_file_systems (list)
        _items = []
        if self.azure_blob_file_systems:
            for _item_azure_blob_file_systems in self.azure_blob_file_systems:
                if _item_azure_blob_file_systems:
                    _items.append(_item_azure_blob_file_systems.to_dict())
            _dict['azureBlobFileSystems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in azure_file_shares (list)
        _items = []
        if self.azure_file_shares:
            for _item_azure_file_shares in self.azure_file_shares:
                if _item_azure_file_shares:
                    _items.append(_item_azure_file_shares.to_dict())
            _dict['azureFileShares'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in file_servers (list)
        _items = []
        if self.file_servers:
            for _item_file_servers in self.file_servers:
                if _item_file_servers:
                    _items.append(_item_file_servers.to_dict())
            _dict['fileServers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unmanaged_file_systems (list)
        _items = []
        if self.unmanaged_file_systems:
            for _item_unmanaged_file_systems in self.unmanaged_file_systems:
                if _item_unmanaged_file_systems:
                    _items.append(_item_unmanaged_file_systems.to_dict())
            _dict['unmanagedFileSystems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MountVolumes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureBlobFileSystems": [AzureBlobFileSystemReference.from_dict(_item) for _item in obj["azureBlobFileSystems"]] if obj.get("azureBlobFileSystems") is not None else None,
            "azureFileShares": [AzureFileShareReference.from_dict(_item) for _item in obj["azureFileShares"]] if obj.get("azureFileShares") is not None else None,
            "fileServers": [FileServerReference.from_dict(_item) for _item in obj["fileServers"]] if obj.get("fileServers") is not None else None,
            "unmanagedFileSystems": [UnmanagedFileSystemReference.from_dict(_item) for _item in obj["unmanagedFileSystems"]] if obj.get("unmanagedFileSystems") is not None else None
        })
        return _obj



# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_disks import DataDisks
from openapi_client.models.mount_settings import MountSettings
from openapi_client.models.resource_id import ResourceId
from openapi_client.models.ssh_configuration import SshConfiguration
from typing import Optional, Set
from typing_extensions import Self

class FileServerProperties(BaseModel):
    """
    File server specific properties.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime")
    data_disks: Optional[DataDisks] = Field(default=None, alias="dataDisks")
    mount_settings: Optional[MountSettings] = Field(default=None, alias="mountSettings")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Possible values: creating - The File Server is getting created. updating - The File Server creation has been accepted and it is getting updated. deleting - The user has requested that the File Server be deleted, and it is in the process of being deleted. failed - The File Server creation has failed with the specified errorCode. Details about the error code are specified in the message field. succeeded - The File Server creation has succeeded.", alias="provisioningState")
    provisioning_state_transition_time: Optional[datetime] = Field(default=None, alias="provisioningStateTransitionTime")
    ssh_configuration: Optional[SshConfiguration] = Field(default=None, alias="sshConfiguration")
    subnet: Optional[ResourceId] = None
    vm_size: Optional[StrictStr] = Field(default=None, description="For information about available VM sizes for File Server from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).", alias="vmSize")
    __properties: ClassVar[List[str]] = ["creationTime", "dataDisks", "mountSettings", "provisioningState", "provisioningStateTransitionTime", "sshConfiguration", "subnet", "vmSize"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['creating', 'updating', 'deleting', 'succeeded', 'failed']):
            raise ValueError("must be one of enum values ('creating', 'updating', 'deleting', 'succeeded', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileServerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "provisioning_state",
            "provisioning_state_transition_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_disks
        if self.data_disks:
            _dict['dataDisks'] = self.data_disks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mount_settings
        if self.mount_settings:
            _dict['mountSettings'] = self.mount_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_configuration
        if self.ssh_configuration:
            _dict['sshConfiguration'] = self.ssh_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileServerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "dataDisks": DataDisks.from_dict(obj["dataDisks"]) if obj.get("dataDisks") is not None else None,
            "mountSettings": MountSettings.from_dict(obj["mountSettings"]) if obj.get("mountSettings") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "provisioningStateTransitionTime": obj.get("provisioningStateTransitionTime"),
            "sshConfiguration": SshConfiguration.from_dict(obj["sshConfiguration"]) if obj.get("sshConfiguration") is not None else None,
            "subnet": ResourceId.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None,
            "vmSize": obj.get("vmSize")
        })
        return _obj



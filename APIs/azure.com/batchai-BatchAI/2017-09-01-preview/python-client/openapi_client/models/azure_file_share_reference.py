# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_storage_credentials_info import AzureStorageCredentialsInfo
from typing import Optional, Set
from typing_extensions import Self

class AzureFileShareReference(BaseModel):
    """
    Details of the Azure File Share to mount on the cluster.
    """ # noqa: E501
    account_name: StrictStr = Field(alias="accountName")
    azure_file_url: StrictStr = Field(alias="azureFileUrl")
    credentials: AzureStorageCredentialsInfo
    directory_mode: Optional[StrictStr] = Field(default='0777', description="Default value is 0777. Valid only if OS is linux.", alias="directoryMode")
    file_mode: Optional[StrictStr] = Field(default='0777', description="Default value is 0777. Valid only if OS is linux.", alias="fileMode")
    relative_mount_path: StrictStr = Field(description="Note that all file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location.", alias="relativeMountPath")
    __properties: ClassVar[List[str]] = ["accountName", "azureFileUrl", "credentials", "directoryMode", "fileMode", "relativeMountPath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureFileShareReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credentials
        if self.credentials:
            _dict['credentials'] = self.credentials.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureFileShareReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName": obj.get("accountName"),
            "azureFileUrl": obj.get("azureFileUrl"),
            "credentials": AzureStorageCredentialsInfo.from_dict(obj["credentials"]) if obj.get("credentials") is not None else None,
            "directoryMode": obj.get("directoryMode") if obj.get("directoryMode") is not None else '0777',
            "fileMode": obj.get("fileMode") if obj.get("fileMode") is not None else '0777',
            "relativeMountPath": obj.get("relativeMountPath")
        })
        return _obj



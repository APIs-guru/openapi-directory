# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OutputDirectory(BaseModel):
    """
    Output directory for the job.
    """ # noqa: E501
    create_new: Optional[StrictBool] = Field(default=True, description="Default is true. If false, then the directory is not created and can be any directory path that the user specifies.", alias="createNew")
    id: StrictStr = Field(description="It will be available for the job as an environment variable under AZ_BATCHAI_OUTPUT_id.")
    path_prefix: StrictStr = Field(description="NOTE: This is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs.", alias="pathPrefix")
    path_suffix: Optional[StrictStr] = Field(default=None, description="The suffix path where the output directory will be created.", alias="pathSuffix")
    type: Optional[StrictStr] = Field(default='custom', description="Default value is Custom. The possible values are Model, Logs, Summary, and Custom. Users can use multiple enums for a single directory. Eg. outPutType='Model,Logs, Summary'")
    __properties: ClassVar[List[str]] = ["createNew", "id", "pathPrefix", "pathSuffix", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['model', 'logs', 'summary', 'custom']):
            raise ValueError("must be one of enum values ('model', 'logs', 'summary', 'custom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutputDirectory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutputDirectory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createNew": obj.get("createNew") if obj.get("createNew") is not None else True,
            "id": obj.get("id"),
            "pathPrefix": obj.get("pathPrefix"),
            "pathSuffix": obj.get("pathSuffix"),
            "type": obj.get("type") if obj.get("type") is not None else 'custom'
        })
        return _obj



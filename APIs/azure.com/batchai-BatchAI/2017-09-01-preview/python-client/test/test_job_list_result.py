# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_list_result import JobListResult

class TestJobListResult(unittest.TestCase):
    """JobListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobListResult:
        """Test JobListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobListResult`
        """
        model = JobListResult()
        if include_optional:
            return JobListResult(
                next_link = '',
                value = [
                    openapi_client.models.job.Job(
                        properties = openapi_client.models.job_properties.JobProperties(
                            caffe_settings = openapi_client.models.caffe_settings.CaffeSettings(
                                command_line_args = '', 
                                config_file_path = '', 
                                process_count = 56, 
                                python_interpreter_path = '', 
                                python_script_file_path = '', ), 
                            chainer_settings = openapi_client.models.chainer_settings.ChainerSettings(
                                command_line_args = '', 
                                process_count = 56, 
                                python_interpreter_path = '', 
                                python_script_file_path = '', ), 
                            cluster = openapi_client.models.resource_id.ResourceId(
                                id = '', ), 
                            cntk_settings = openapi_client.models.cnt_ksettings.CNTKsettings(
                                command_line_args = '', 
                                config_file_path = '', 
                                language_type = '', 
                                process_count = 56, 
                                python_interpreter_path = '', 
                                python_script_file_path = '', ), 
                            constraints = openapi_client.models.job_base_properties_constraints.JobBaseProperties_constraints(
                                max_wall_clock_time = '7.00:00:00', ), 
                            container_settings = openapi_client.models.container_settings.ContainerSettings(
                                image_source_registry = openapi_client.models.image_source_registry.ImageSourceRegistry(
                                    credentials = openapi_client.models.private_registry_credentials.PrivateRegistryCredentials(
                                        password = '', 
                                        password_secret_reference = openapi_client.models.key_vault_secret_reference.KeyVaultSecretReference(
                                            secret_url = '', 
                                            source_vault = openapi_client.models.resource_id.ResourceId(
                                                id = '', ), ), 
                                        username = '', ), 
                                    image = '', 
                                    server_url = '', ), ), 
                            creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            custom_toolkit_settings = openapi_client.models.custom_toolkit_settings.CustomToolkitSettings(
                                command_line = '', ), 
                            environment_variables = [
                                openapi_client.models.environment_setting.EnvironmentSetting(
                                    name = '', 
                                    value = '', )
                                ], 
                            execution_info = openapi_client.models.job_properties_execution_info.JobProperties_executionInfo(
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                errors = [
                                    openapi_client.models.batch_ai_error.BatchAIError(
                                        code = '', 
                                        details = [
                                            openapi_client.models.name_value_pair.NameValuePair(
                                                name = '', 
                                                value = '', )
                                            ], 
                                        message = '', )
                                    ], 
                                exit_code = 56, 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            execution_state = 'queued', 
                            execution_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            experiment_name = '', 
                            input_directories = [
                                openapi_client.models.input_directory.InputDirectory(
                                    id = '', 
                                    path = '', )
                                ], 
                            job_preparation = openapi_client.models.job_preparation.JobPreparation(
                                command_line = '', ), 
                            node_count = 56, 
                            output_directories = [
                                openapi_client.models.output_directory.OutputDirectory(
                                    create_new = True, 
                                    id = '', 
                                    path_prefix = '', 
                                    path_suffix = '', 
                                    type = 'custom', )
                                ], 
                            priority = 56, 
                            provisioning_state = 'creating', 
                            provisioning_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            std_out_err_path_prefix = '', 
                            tensor_flow_settings = openapi_client.models.tensor_flow_settings.TensorFlowSettings(
                                master_command_line_args = '', 
                                parameter_server_command_line_args = '', 
                                parameter_server_count = 56, 
                                python_interpreter_path = '', 
                                python_script_file_path = '', 
                                worker_command_line_args = '', 
                                worker_count = 56, ), 
                            tool_type = 'cntk', ), )
                    ]
            )
        else:
            return JobListResult(
        )
        """

    def testJobListResult(self):
        """Test JobListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

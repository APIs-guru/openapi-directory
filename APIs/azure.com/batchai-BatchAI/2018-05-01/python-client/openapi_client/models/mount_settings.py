# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MountSettings(BaseModel):
    """
    File Server mount Information.
    """ # noqa: E501
    file_server_internal_ip: Optional[StrictStr] = Field(default=None, description="Internal IP address of the File Server which can be used to access the File Server from within the subnet.", alias="fileServerInternalIP")
    file_server_public_ip: Optional[StrictStr] = Field(default=None, description="Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.", alias="fileServerPublicIP")
    mount_point: Optional[StrictStr] = Field(default=None, description="Path where the data disks are mounted on the File Server.", alias="mountPoint")
    __properties: ClassVar[List[str]] = ["fileServerInternalIP", "fileServerPublicIP", "mountPoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MountSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MountSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileServerInternalIP": obj.get("fileServerInternalIP"),
            "fileServerPublicIP": obj.get("fileServerPublicIP"),
            "mountPoint": obj.get("mountPoint")
        })
        return _obj



# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment_variable import EnvironmentVariable
from openapi_client.models.environment_variable_with_secret_value import EnvironmentVariableWithSecretValue
from typing import Optional, Set
from typing_extensions import Self

class SetupTask(BaseModel):
    """
    Specifies a setup task which can be used to customize the compute nodes of the cluster.
    """ # noqa: E501
    command_line: StrictStr = Field(description="The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.", alias="commandLine")
    environment_variables: Optional[List[EnvironmentVariable]] = Field(default=None, description="A collection of user defined environment variables to be set for setup task.", alias="environmentVariables")
    secrets: Optional[List[EnvironmentVariableWithSecretValue]] = Field(default=None, description="A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.")
    std_out_err_path_prefix: StrictStr = Field(description="The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.", alias="stdOutErrPathPrefix")
    std_out_err_path_suffix: Optional[StrictStr] = Field(default=None, description="A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.", alias="stdOutErrPathSuffix")
    __properties: ClassVar[List[str]] = ["commandLine", "environmentVariables", "secrets", "stdOutErrPathPrefix", "stdOutErrPathSuffix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SetupTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "std_out_err_path_suffix",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in environment_variables (list)
        _items = []
        if self.environment_variables:
            for _item_environment_variables in self.environment_variables:
                if _item_environment_variables:
                    _items.append(_item_environment_variables.to_dict())
            _dict['environmentVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secrets (list)
        _items = []
        if self.secrets:
            for _item_secrets in self.secrets:
                if _item_secrets:
                    _items.append(_item_secrets.to_dict())
            _dict['secrets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SetupTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commandLine": obj.get("commandLine"),
            "environmentVariables": [EnvironmentVariable.from_dict(_item) for _item in obj["environmentVariables"]] if obj.get("environmentVariables") is not None else None,
            "secrets": [EnvironmentVariableWithSecretValue.from_dict(_item) for _item in obj["secrets"]] if obj.get("secrets") is not None else None,
            "stdOutErrPathPrefix": obj.get("stdOutErrPathPrefix"),
            "stdOutErrPathSuffix": obj.get("stdOutErrPathSuffix")
        })
        return _obj



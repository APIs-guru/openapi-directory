# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.node_setup import NodeSetup
from openapi_client.models.resource_id import ResourceId
from openapi_client.models.scale_settings import ScaleSettings
from openapi_client.models.user_account_settings import UserAccountSettings
from openapi_client.models.virtual_machine_configuration import VirtualMachineConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ClusterBaseProperties(BaseModel):
    """
    The properties of a Cluster.
    """ # noqa: E501
    node_setup: Optional[NodeSetup] = Field(default=None, alias="nodeSetup")
    scale_settings: Optional[ScaleSettings] = Field(default=None, alias="scaleSettings")
    subnet: Optional[ResourceId] = None
    user_account_settings: UserAccountSettings = Field(alias="userAccountSettings")
    virtual_machine_configuration: Optional[VirtualMachineConfiguration] = Field(default=None, alias="virtualMachineConfiguration")
    vm_priority: Optional[StrictStr] = Field(default='dedicated', description="VM priority. Allowed values are: dedicated (default) and lowpriority.", alias="vmPriority")
    vm_size: StrictStr = Field(description="The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size. For information about available VM sizes for clusters using images from the Virtual Machines Marketplace see Sizes for Virtual Machines (Linux). Batch AI service supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).", alias="vmSize")
    __properties: ClassVar[List[str]] = ["nodeSetup", "scaleSettings", "subnet", "userAccountSettings", "virtualMachineConfiguration", "vmPriority", "vmSize"]

    @field_validator('vm_priority')
    def vm_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dedicated', 'lowpriority']):
            raise ValueError("must be one of enum values ('dedicated', 'lowpriority')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterBaseProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of node_setup
        if self.node_setup:
            _dict['nodeSetup'] = self.node_setup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_settings
        if self.scale_settings:
            _dict['scaleSettings'] = self.scale_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_account_settings
        if self.user_account_settings:
            _dict['userAccountSettings'] = self.user_account_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_machine_configuration
        if self.virtual_machine_configuration:
            _dict['virtualMachineConfiguration'] = self.virtual_machine_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterBaseProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nodeSetup": NodeSetup.from_dict(obj["nodeSetup"]) if obj.get("nodeSetup") is not None else None,
            "scaleSettings": ScaleSettings.from_dict(obj["scaleSettings"]) if obj.get("scaleSettings") is not None else None,
            "subnet": ResourceId.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None,
            "userAccountSettings": UserAccountSettings.from_dict(obj["userAccountSettings"]) if obj.get("userAccountSettings") is not None else None,
            "virtualMachineConfiguration": VirtualMachineConfiguration.from_dict(obj["virtualMachineConfiguration"]) if obj.get("virtualMachineConfiguration") is not None else None,
            "vmPriority": obj.get("vmPriority") if obj.get("vmPriority") is not None else 'dedicated',
            "vmSize": obj.get("vmSize")
        })
        return _obj



# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.batch_ai_error import BatchAIError
from openapi_client.models.node_setup import NodeSetup
from openapi_client.models.node_state_counts import NodeStateCounts
from openapi_client.models.resource_id import ResourceId
from openapi_client.models.scale_settings import ScaleSettings
from openapi_client.models.user_account_settings import UserAccountSettings
from openapi_client.models.virtual_machine_configuration import VirtualMachineConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ClusterProperties(BaseModel):
    """
    Cluster properties.
    """ # noqa: E501
    allocation_state: Optional[StrictStr] = Field(default=None, description="Allocation state of the cluster. Possible values are: steady - Indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing - Indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.", alias="allocationState")
    allocation_state_transition_time: Optional[datetime] = Field(default=None, description="The time at which the cluster entered its current allocation state.", alias="allocationStateTransitionTime")
    creation_time: Optional[datetime] = Field(default=None, description="The time when the cluster was created.", alias="creationTime")
    current_node_count: Optional[StrictInt] = Field(default=None, description="The number of compute nodes currently assigned to the cluster.", alias="currentNodeCount")
    errors: Optional[List[BatchAIError]] = Field(default=None, description="Collection of errors encountered by various compute nodes during node setup.")
    node_setup: Optional[NodeSetup] = Field(default=None, alias="nodeSetup")
    node_state_counts: Optional[NodeStateCounts] = Field(default=None, alias="nodeStateCounts")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the cluster. Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.", alias="provisioningState")
    provisioning_state_transition_time: Optional[datetime] = Field(default=None, description="Time when the provisioning state was changed.", alias="provisioningStateTransitionTime")
    scale_settings: Optional[ScaleSettings] = Field(default=None, alias="scaleSettings")
    subnet: Optional[ResourceId] = None
    user_account_settings: Optional[UserAccountSettings] = Field(default=None, alias="userAccountSettings")
    virtual_machine_configuration: Optional[VirtualMachineConfiguration] = Field(default=None, alias="virtualMachineConfiguration")
    vm_priority: Optional[StrictStr] = Field(default='dedicated', description="VM priority of cluster nodes.", alias="vmPriority")
    vm_size: Optional[StrictStr] = Field(default=None, description="The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size.", alias="vmSize")
    __properties: ClassVar[List[str]] = ["allocationState", "allocationStateTransitionTime", "creationTime", "currentNodeCount", "errors", "nodeSetup", "nodeStateCounts", "provisioningState", "provisioningStateTransitionTime", "scaleSettings", "subnet", "userAccountSettings", "virtualMachineConfiguration", "vmPriority", "vmSize"]

    @field_validator('allocation_state')
    def allocation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['steady', 'resizing']):
            raise ValueError("must be one of enum values ('steady', 'resizing')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['creating', 'succeeded', 'failed', 'deleting']):
            raise ValueError("must be one of enum values ('creating', 'succeeded', 'failed', 'deleting')")
        return value

    @field_validator('vm_priority')
    def vm_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dedicated', 'lowpriority']):
            raise ValueError("must be one of enum values ('dedicated', 'lowpriority')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "allocation_state",
            "allocation_state_transition_time",
            "creation_time",
            "current_node_count",
            "errors",
            "provisioning_state",
            "provisioning_state_transition_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of node_setup
        if self.node_setup:
            _dict['nodeSetup'] = self.node_setup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_state_counts
        if self.node_state_counts:
            _dict['nodeStateCounts'] = self.node_state_counts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_settings
        if self.scale_settings:
            _dict['scaleSettings'] = self.scale_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_account_settings
        if self.user_account_settings:
            _dict['userAccountSettings'] = self.user_account_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_machine_configuration
        if self.virtual_machine_configuration:
            _dict['virtualMachineConfiguration'] = self.virtual_machine_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocationState": obj.get("allocationState"),
            "allocationStateTransitionTime": obj.get("allocationStateTransitionTime"),
            "creationTime": obj.get("creationTime"),
            "currentNodeCount": obj.get("currentNodeCount"),
            "errors": [BatchAIError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "nodeSetup": NodeSetup.from_dict(obj["nodeSetup"]) if obj.get("nodeSetup") is not None else None,
            "nodeStateCounts": NodeStateCounts.from_dict(obj["nodeStateCounts"]) if obj.get("nodeStateCounts") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "provisioningStateTransitionTime": obj.get("provisioningStateTransitionTime"),
            "scaleSettings": ScaleSettings.from_dict(obj["scaleSettings"]) if obj.get("scaleSettings") is not None else None,
            "subnet": ResourceId.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None,
            "userAccountSettings": UserAccountSettings.from_dict(obj["userAccountSettings"]) if obj.get("userAccountSettings") is not None else None,
            "virtualMachineConfiguration": VirtualMachineConfiguration.from_dict(obj["virtualMachineConfiguration"]) if obj.get("virtualMachineConfiguration") is not None else None,
            "vmPriority": obj.get("vmPriority") if obj.get("vmPriority") is not None else 'dedicated',
            "vmSize": obj.get("vmSize")
        })
        return _obj



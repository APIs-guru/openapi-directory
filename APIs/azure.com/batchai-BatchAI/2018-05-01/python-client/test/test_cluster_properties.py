# coding: utf-8

"""
    BatchAI

    The Azure BatchAI Management API.

    The version of the OpenAPI document: 2018-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cluster_properties import ClusterProperties

class TestClusterProperties(unittest.TestCase):
    """ClusterProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClusterProperties:
        """Test ClusterProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClusterProperties`
        """
        model = ClusterProperties()
        if include_optional:
            return ClusterProperties(
                allocation_state = 'steady',
                allocation_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                current_node_count = 56,
                errors = [
                    openapi_client.models.batch_ai_error.BatchAIError(
                        code = '', 
                        details = [
                            openapi_client.models.name_value_pair.NameValuePair(
                                name = '', 
                                value = '', )
                            ], 
                        message = '', )
                    ],
                node_setup = openapi_client.models.node_setup.NodeSetup(
                    mount_volumes = openapi_client.models.mount_volumes.MountVolumes(
                        azure_blob_file_systems = [
                            openapi_client.models.azure_blob_file_system_reference.AzureBlobFileSystemReference(
                                account_name = '', 
                                container_name = '', 
                                credentials = openapi_client.models.azure_storage_credentials_info.AzureStorageCredentialsInfo(
                                    account_key = '', 
                                    account_key_secret_reference = openapi_client.models.key_vault_secret_reference.KeyVaultSecretReference(
                                        secret_url = '', 
                                        source_vault = openapi_client.models.resource_id.ResourceId(
                                            id = '', ), ), ), 
                                mount_options = '', 
                                relative_mount_path = '', )
                            ], 
                        azure_file_shares = [
                            openapi_client.models.azure_file_share_reference.AzureFileShareReference(
                                account_name = '', 
                                azure_file_url = '', 
                                credentials = openapi_client.models.azure_storage_credentials_info.AzureStorageCredentialsInfo(
                                    account_key = '', ), 
                                directory_mode = '0777', 
                                file_mode = '0777', 
                                relative_mount_path = '', )
                            ], 
                        file_servers = [
                            openapi_client.models.file_server_reference.FileServerReference(
                                file_server = openapi_client.models.resource_id.ResourceId(
                                    id = '', ), 
                                mount_options = '', 
                                relative_mount_path = '', 
                                source_directory = '', )
                            ], 
                        unmanaged_file_systems = [
                            openapi_client.models.unmanaged_file_system_reference.UnmanagedFileSystemReference(
                                mount_command = '', 
                                relative_mount_path = '', )
                            ], ), 
                    performance_counters_settings = openapi_client.models.performance_counters_settings.PerformanceCountersSettings(
                        app_insights_reference = openapi_client.models.app_insights_reference.AppInsightsReference(
                            component = , 
                            instrumentation_key = '', 
                            instrumentation_key_secret_reference = openapi_client.models.key_vault_secret_reference.KeyVaultSecretReference(
                                secret_url = '', 
                                source_vault = , ), ), ), 
                    setup_task = openapi_client.models.setup_task.SetupTask(
                        command_line = '', 
                        environment_variables = [
                            openapi_client.models.environment_variable.EnvironmentVariable(
                                name = '', 
                                value = '', )
                            ], 
                        secrets = [
                            openapi_client.models.environment_variable_with_secret_value.EnvironmentVariableWithSecretValue(
                                name = '', 
                                value = '', 
                                value_secret_reference = , )
                            ], 
                        std_out_err_path_prefix = '', 
                        std_out_err_path_suffix = '', ), ),
                node_state_counts = openapi_client.models.node_state_counts.NodeStateCounts(
                    idle_node_count = 56, 
                    leaving_node_count = 56, 
                    preparing_node_count = 56, 
                    running_node_count = 56, 
                    unusable_node_count = 56, ),
                provisioning_state = 'creating',
                provisioning_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                scale_settings = openapi_client.models.scale_settings.ScaleSettings(
                    auto_scale = openapi_client.models.auto_scale_settings.AutoScaleSettings(
                        initial_node_count = 56, 
                        maximum_node_count = 56, 
                        minimum_node_count = 56, ), 
                    manual = openapi_client.models.manual_scale_settings.ManualScaleSettings(
                        node_deallocation_option = 'requeue', 
                        target_node_count = 56, ), ),
                subnet = openapi_client.models.resource_id.ResourceId(
                    id = '', ),
                user_account_settings = openapi_client.models.user_account_settings.UserAccountSettings(
                    admin_user_name = '', 
                    admin_user_password = '', 
                    admin_user_ssh_public_key = '', ),
                virtual_machine_configuration = openapi_client.models.virtual_machine_configuration.VirtualMachineConfiguration(
                    image_reference = openapi_client.models.image_reference.ImageReference(
                        offer = '', 
                        publisher = '', 
                        sku = '', 
                        version = '', 
                        virtual_machine_image_id = '', ), ),
                vm_priority = 'dedicated',
                vm_size = ''
            )
        else:
            return ClusterProperties(
        )
        """

    def testClusterProperties(self):
        """Test ClusterProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

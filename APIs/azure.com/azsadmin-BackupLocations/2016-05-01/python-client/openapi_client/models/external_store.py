# coding: utf-8

"""
    BackupManagementClient

    The Admin Backup Management Client.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExternalStore(BaseModel):
    """
    Information about an external storage location.
    """ # noqa: E501
    available_capacity: Optional[StrictStr] = Field(default=None, description="Free space at the backup location.", alias="availableCapacity")
    backup_frequency_in_hours: Optional[StrictInt] = Field(default=None, description="The interval, in hours, for the frequency that the scheduler takes a backup.", alias="backupFrequencyInHours")
    backup_retention_period_in_days: Optional[StrictInt] = Field(default=None, description="The retention period, in days, for backs in the storage location.", alias="backupRetentionPeriodInDays")
    encryption_key_base64: Optional[StrictStr] = Field(default=None, description="Encryption key.", alias="encryptionKeyBase64")
    is_backup_scheduler_enabled: Optional[StrictBool] = Field(default=None, description="True if the backup scheduler is enabled.", alias="isBackupSchedulerEnabled")
    last_backup_time: Optional[datetime] = Field(default=None, description="Time of backup.", alias="lastBackupTime")
    next_backup_time: Optional[datetime] = Field(default=None, description="The scheduled time of the next backup.", alias="nextBackupTime")
    password: Optional[StrictStr] = Field(default=None, description="Password to access the location.")
    path: Optional[StrictStr] = Field(default=None, description="Path to the update location")
    user_name: Optional[StrictStr] = Field(default=None, description="Username to access the location.", alias="userName")
    __properties: ClassVar[List[str]] = ["availableCapacity", "backupFrequencyInHours", "backupRetentionPeriodInDays", "encryptionKeyBase64", "isBackupSchedulerEnabled", "lastBackupTime", "nextBackupTime", "password", "path", "userName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalStore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalStore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableCapacity": obj.get("availableCapacity"),
            "backupFrequencyInHours": obj.get("backupFrequencyInHours"),
            "backupRetentionPeriodInDays": obj.get("backupRetentionPeriodInDays"),
            "encryptionKeyBase64": obj.get("encryptionKeyBase64"),
            "isBackupSchedulerEnabled": obj.get("isBackupSchedulerEnabled"),
            "lastBackupTime": obj.get("lastBackupTime"),
            "nextBackupTime": obj.get("nextBackupTime"),
            "password": obj.get("password"),
            "path": obj.get("path"),
            "userName": obj.get("userName")
        })
        return _obj



# coding: utf-8

"""
    BackupManagementClient

    The Admin Backup Management Client.

    The version of the OpenAPI document: 2018-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_locations_create_backup200_response_properties_backup_info_role_status_inner import BackupLocationsCreateBackup200ResponsePropertiesBackupInfoRoleStatusInner
from typing import Optional, Set
from typing_extensions import Self

class BackupLocationsCreateBackup200ResponsePropertiesBackupInfo(BaseModel):
    """
    Holds information for a backup.
    """ # noqa: E501
    backup_data_version: Optional[StrictStr] = Field(default=None, description="Version of the backup data.", alias="backupDataVersion")
    created_date_time: Optional[datetime] = Field(default=None, description="Creation time of the backup.", alias="createdDateTime")
    deployment_id: Optional[StrictStr] = Field(default=None, description="Deployment Id of the stamp.", alias="deploymentID")
    encryption_cert_thumbprint: Optional[StrictStr] = Field(default=None, description="The thumbprint of the certificate used to encrypt the backup encryption key.", alias="encryptionCertThumbprint")
    is_cloud_recovery_ready: Optional[StrictBool] = Field(default=None, description="True if the backup can be used for cloud recovery scenario.", alias="isCloudRecoveryReady")
    oem_version: Optional[StrictStr] = Field(default=None, description="OEM version.", alias="oemVersion")
    role_status: Optional[List[BackupLocationsCreateBackup200ResponsePropertiesBackupInfoRoleStatusInner]] = Field(default=None, description="object", alias="roleStatus")
    stamp_version: Optional[StrictStr] = Field(default=None, description="Azure Stack stamp version of the backup.", alias="stampVersion")
    status: Optional[StrictStr] = Field(default=None, description="Status of an operation.")
    time_taken_to_create: Optional[StrictStr] = Field(default=None, description="Duration to create the backup.", alias="timeTakenToCreate")
    __properties: ClassVar[List[str]] = ["backupDataVersion", "createdDateTime", "deploymentID", "encryptionCertThumbprint", "isCloudRecoveryReady", "oemVersion", "roleStatus", "stampVersion", "status", "timeTakenToCreate"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Queued', 'Running', 'Deleted', 'Failed', 'PartialSucceeded', 'Succeeded']):
            raise ValueError("must be one of enum values ('Creating', 'Queued', 'Running', 'Deleted', 'Failed', 'PartialSucceeded', 'Succeeded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupLocationsCreateBackup200ResponsePropertiesBackupInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "backup_data_version",
            "created_date_time",
            "deployment_id",
            "encryption_cert_thumbprint",
            "is_cloud_recovery_ready",
            "oem_version",
            "stamp_version",
            "time_taken_to_create",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in role_status (list)
        _items = []
        if self.role_status:
            for _item_role_status in self.role_status:
                if _item_role_status:
                    _items.append(_item_role_status.to_dict())
            _dict['roleStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupLocationsCreateBackup200ResponsePropertiesBackupInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupDataVersion": obj.get("backupDataVersion"),
            "createdDateTime": obj.get("createdDateTime"),
            "deploymentID": obj.get("deploymentID"),
            "encryptionCertThumbprint": obj.get("encryptionCertThumbprint"),
            "isCloudRecoveryReady": obj.get("isCloudRecoveryReady"),
            "oemVersion": obj.get("oemVersion"),
            "roleStatus": [BackupLocationsCreateBackup200ResponsePropertiesBackupInfoRoleStatusInner.from_dict(_item) for _item in obj["roleStatus"]] if obj.get("roleStatus") is not None else None,
            "stampVersion": obj.get("stampVersion"),
            "status": obj.get("status"),
            "timeTakenToCreate": obj.get("timeTakenToCreate")
        })
        return _obj



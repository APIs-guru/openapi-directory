# coding: utf-8

"""
    ApplicationClient

    ARM applications

    The version of the OpenAPI document: 2017-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.application_patchable import ApplicationPatchable

class TestApplicationPatchable(unittest.TestCase):
    """ApplicationPatchable unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationPatchable:
        """Test ApplicationPatchable
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationPatchable`
        """
        model = ApplicationPatchable()
        if include_optional:
            return ApplicationPatchable(
                kind = 'g',
                plan = openapi_client.models.plan_patchable.PlanPatchable(
                    name = '', 
                    product = '', 
                    promotion_code = '', 
                    publisher = '', 
                    version = '', ),
                properties = openapi_client.models.application_properties_patchable.ApplicationPropertiesPatchable(
                    application_definition_id = '', 
                    managed_resource_group_id = '', 
                    outputs = openapi_client.models.outputs.outputs(), 
                    parameters = openapi_client.models.parameters.parameters(), 
                    provisioning_state = 'Accepted', 
                    ui_definition_uri = '', ),
                identity = openapi_client.models.identity.Identity(
                    principal_id = '', 
                    tenant_id = '', 
                    type = 'SystemAssigned', ),
                managed_by = '',
                sku = openapi_client.models.sku.Sku(
                    capacity = 56, 
                    family = '', 
                    model = '', 
                    name = '', 
                    size = '', 
                    tier = '', ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return ApplicationPatchable(
        )
        """

    def testApplicationPatchable(self):
        """Test ApplicationPatchable"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

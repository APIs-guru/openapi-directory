# coding: utf-8

"""
    ManagedApplicationClient

    ARM managed applications (appliances)

    The version of the OpenAPI document: 2016-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.appliance_artifact import ApplianceArtifact
from openapi_client.models.appliance_lock_level import ApplianceLockLevel
from openapi_client.models.appliance_provider_authorization import ApplianceProviderAuthorization
from typing import Optional, Set
from typing_extensions import Self

class ApplianceDefinitionProperties(BaseModel):
    """
    The appliance definition properties.
    """ # noqa: E501
    artifacts: Optional[List[ApplianceArtifact]] = Field(default=None, description="The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.")
    authorizations: List[ApplianceProviderAuthorization] = Field(description="The appliance provider authorizations.")
    description: Optional[StrictStr] = Field(default=None, description="The appliance definition description.")
    display_name: Optional[StrictStr] = Field(default=None, description="The appliance definition display name.", alias="displayName")
    lock_level: ApplianceLockLevel = Field(alias="lockLevel")
    package_file_uri: StrictStr = Field(description="The appliance definition package file Uri.", alias="packageFileUri")
    __properties: ClassVar[List[str]] = ["artifacts", "authorizations", "description", "displayName", "lockLevel", "packageFileUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplianceDefinitionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item_artifacts in self.artifacts:
                if _item_artifacts:
                    _items.append(_item_artifacts.to_dict())
            _dict['artifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item_authorizations in self.authorizations:
                if _item_authorizations:
                    _items.append(_item_authorizations.to_dict())
            _dict['authorizations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplianceDefinitionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifacts": [ApplianceArtifact.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None,
            "authorizations": [ApplianceProviderAuthorization.from_dict(_item) for _item in obj["authorizations"]] if obj.get("authorizations") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "lockLevel": obj.get("lockLevel"),
            "packageFileUri": obj.get("packageFileUri")
        })
        return _obj



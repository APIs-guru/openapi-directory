# coding: utf-8

"""
    ManagedApplicationClient

    ARM managed applications (appliances)

    The version of the OpenAPI document: 2016-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.appliance_list_result import ApplianceListResult

class TestApplianceListResult(unittest.TestCase):
    """ApplianceListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplianceListResult:
        """Test ApplianceListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplianceListResult`
        """
        model = ApplianceListResult()
        if include_optional:
            return ApplianceListResult(
                next_link = '',
                value = [
                    openapi_client.models.appliance.Appliance(
                        kind = 'g', 
                        plan = openapi_client.models.plan.Plan(
                            name = '', 
                            product = '', 
                            promotion_code = '', 
                            publisher = '', 
                            version = '', ), 
                        properties = openapi_client.models.appliance_properties.ApplianceProperties(
                            appliance_definition_id = '', 
                            managed_resource_group_id = '', 
                            outputs = openapi_client.models.outputs.outputs(), 
                            parameters = openapi_client.models.parameters.parameters(), 
                            provisioning_state = 'Accepted', 
                            ui_definition_uri = '', ), )
                    ]
            )
        else:
            return ApplianceListResult(
        )
        """

    def testApplianceListResult(self):
        """Test ApplianceListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

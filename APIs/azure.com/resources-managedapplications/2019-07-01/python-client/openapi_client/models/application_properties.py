# coding: utf-8

"""
    ApplicationClient

    ARM applications

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_artifact import ApplicationArtifact
from openapi_client.models.application_authorization import ApplicationAuthorization
from openapi_client.models.application_billing_details_definition import ApplicationBillingDetailsDefinition
from openapi_client.models.application_client_details import ApplicationClientDetails
from openapi_client.models.application_jit_access_policy import ApplicationJitAccessPolicy
from openapi_client.models.application_management_mode import ApplicationManagementMode
from openapi_client.models.application_package_contact import ApplicationPackageContact
from openapi_client.models.application_package_support_urls import ApplicationPackageSupportUrls
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class ApplicationProperties(BaseModel):
    """
    The managed application properties.
    """ # noqa: E501
    application_definition_id: Optional[StrictStr] = Field(default=None, description="The fully qualified path of managed application definition Id.", alias="applicationDefinitionId")
    artifacts: Optional[List[ApplicationArtifact]] = Field(default=None, description="The collection of managed application artifacts.")
    authorizations: Optional[List[ApplicationAuthorization]] = Field(default=None, description="The  read-only authorizations property that is retrieved from the application package.")
    billing_details: Optional[ApplicationBillingDetailsDefinition] = Field(default=None, alias="billingDetails")
    created_by: Optional[ApplicationClientDetails] = Field(default=None, alias="createdBy")
    customer_support: Optional[ApplicationPackageContact] = Field(default=None, alias="customerSupport")
    jit_access_policy: Optional[ApplicationJitAccessPolicy] = Field(default=None, alias="jitAccessPolicy")
    managed_resource_group_id: Optional[StrictStr] = Field(default=None, description="The managed resource group Id.", alias="managedResourceGroupId")
    management_mode: Optional[ApplicationManagementMode] = Field(default=None, alias="managementMode")
    outputs: Optional[Dict[str, Any]] = Field(default=None, description="Name and value pairs that define the managed application outputs.")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    publisher_tenant_id: Optional[StrictStr] = Field(default=None, description="The publisher tenant Id.", alias="publisherTenantId")
    support_urls: Optional[ApplicationPackageSupportUrls] = Field(default=None, alias="supportUrls")
    updated_by: Optional[ApplicationClientDetails] = Field(default=None, alias="updatedBy")
    __properties: ClassVar[List[str]] = ["applicationDefinitionId", "artifacts", "authorizations", "billingDetails", "createdBy", "customerSupport", "jitAccessPolicy", "managedResourceGroupId", "managementMode", "outputs", "parameters", "provisioningState", "publisherTenantId", "supportUrls", "updatedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "artifacts",
            "authorizations",
            "outputs",
            "publisher_tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item_artifacts in self.artifacts:
                if _item_artifacts:
                    _items.append(_item_artifacts.to_dict())
            _dict['artifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item_authorizations in self.authorizations:
                if _item_authorizations:
                    _items.append(_item_authorizations.to_dict())
            _dict['authorizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_details
        if self.billing_details:
            _dict['billingDetails'] = self.billing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_support
        if self.customer_support:
            _dict['customerSupport'] = self.customer_support.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jit_access_policy
        if self.jit_access_policy:
            _dict['jitAccessPolicy'] = self.jit_access_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support_urls
        if self.support_urls:
            _dict['supportUrls'] = self.support_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationDefinitionId": obj.get("applicationDefinitionId"),
            "artifacts": [ApplicationArtifact.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None,
            "authorizations": [ApplicationAuthorization.from_dict(_item) for _item in obj["authorizations"]] if obj.get("authorizations") is not None else None,
            "billingDetails": ApplicationBillingDetailsDefinition.from_dict(obj["billingDetails"]) if obj.get("billingDetails") is not None else None,
            "createdBy": ApplicationClientDetails.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "customerSupport": ApplicationPackageContact.from_dict(obj["customerSupport"]) if obj.get("customerSupport") is not None else None,
            "jitAccessPolicy": ApplicationJitAccessPolicy.from_dict(obj["jitAccessPolicy"]) if obj.get("jitAccessPolicy") is not None else None,
            "managedResourceGroupId": obj.get("managedResourceGroupId"),
            "managementMode": obj.get("managementMode"),
            "outputs": obj.get("outputs"),
            "parameters": obj.get("parameters"),
            "provisioningState": obj.get("provisioningState"),
            "publisherTenantId": obj.get("publisherTenantId"),
            "supportUrls": ApplicationPackageSupportUrls.from_dict(obj["supportUrls"]) if obj.get("supportUrls") is not None else None,
            "updatedBy": ApplicationClientDetails.from_dict(obj["updatedBy"]) if obj.get("updatedBy") is not None else None
        })
        return _obj



# coding: utf-8

"""
    ApplicationClient

    ARM applications

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.jit_approval_mode import JitApprovalMode
from openapi_client.models.jit_approver_definition import JitApproverDefinition
from typing import Optional, Set
from typing_extensions import Self

class ApplicationJitAccessPolicy(BaseModel):
    """
    Managed application Jit access policy.
    """ # noqa: E501
    jit_access_enabled: StrictBool = Field(description="Whether the JIT access is enabled.", alias="jitAccessEnabled")
    jit_approval_mode: Optional[JitApprovalMode] = Field(default=None, alias="jitApprovalMode")
    jit_approvers: Optional[List[JitApproverDefinition]] = Field(default=None, description="The JIT approvers", alias="jitApprovers")
    maximum_jit_access_duration: Optional[StrictStr] = Field(default=None, description="The maximum duration JIT access is granted. This is an ISO8601 time period value.", alias="maximumJitAccessDuration")
    __properties: ClassVar[List[str]] = ["jitAccessEnabled", "jitApprovalMode", "jitApprovers", "maximumJitAccessDuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationJitAccessPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in jit_approvers (list)
        _items = []
        if self.jit_approvers:
            for _item_jit_approvers in self.jit_approvers:
                if _item_jit_approvers:
                    _items.append(_item_jit_approvers.to_dict())
            _dict['jitApprovers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationJitAccessPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jitAccessEnabled": obj.get("jitAccessEnabled"),
            "jitApprovalMode": obj.get("jitApprovalMode"),
            "jitApprovers": [JitApproverDefinition.from_dict(_item) for _item in obj["jitApprovers"]] if obj.get("jitApprovers") is not None else None,
            "maximumJitAccessDuration": obj.get("maximumJitAccessDuration")
        })
        return _obj



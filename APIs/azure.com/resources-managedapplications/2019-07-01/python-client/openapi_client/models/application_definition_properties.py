# coding: utf-8

"""
    ApplicationClient

    ARM applications

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_authorization import ApplicationAuthorization
from openapi_client.models.application_definition_artifact import ApplicationDefinitionArtifact
from openapi_client.models.application_deployment_policy import ApplicationDeploymentPolicy
from openapi_client.models.application_lock_level import ApplicationLockLevel
from openapi_client.models.application_management_policy import ApplicationManagementPolicy
from openapi_client.models.application_notification_policy import ApplicationNotificationPolicy
from openapi_client.models.application_package_locking_policy_definition import ApplicationPackageLockingPolicyDefinition
from openapi_client.models.application_policy import ApplicationPolicy
from typing import Optional, Set
from typing_extensions import Self

class ApplicationDefinitionProperties(BaseModel):
    """
    The managed application definition properties.
    """ # noqa: E501
    artifacts: Optional[List[ApplicationDefinitionArtifact]] = Field(default=None, description="The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.")
    authorizations: Optional[List[ApplicationAuthorization]] = Field(default=None, description="The managed application provider authorizations.")
    create_ui_definition: Optional[Dict[str, Any]] = Field(default=None, description="The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.", alias="createUiDefinition")
    deployment_policy: Optional[ApplicationDeploymentPolicy] = Field(default=None, alias="deploymentPolicy")
    description: Optional[StrictStr] = Field(default=None, description="The managed application definition description.")
    display_name: Optional[StrictStr] = Field(default=None, description="The managed application definition display name.", alias="displayName")
    is_enabled: Optional[StrictBool] = Field(default=None, description="A value indicating whether the package is enabled or not.", alias="isEnabled")
    lock_level: ApplicationLockLevel = Field(alias="lockLevel")
    locking_policy: Optional[ApplicationPackageLockingPolicyDefinition] = Field(default=None, alias="lockingPolicy")
    main_template: Optional[Dict[str, Any]] = Field(default=None, description="The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.", alias="mainTemplate")
    management_policy: Optional[ApplicationManagementPolicy] = Field(default=None, alias="managementPolicy")
    notification_policy: Optional[ApplicationNotificationPolicy] = Field(default=None, alias="notificationPolicy")
    package_file_uri: Optional[StrictStr] = Field(default=None, description="The managed application definition package file Uri. Use this element", alias="packageFileUri")
    policies: Optional[List[ApplicationPolicy]] = Field(default=None, description="The managed application provider policies.")
    __properties: ClassVar[List[str]] = ["artifacts", "authorizations", "createUiDefinition", "deploymentPolicy", "description", "displayName", "isEnabled", "lockLevel", "lockingPolicy", "mainTemplate", "managementPolicy", "notificationPolicy", "packageFileUri", "policies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationDefinitionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item_artifacts in self.artifacts:
                if _item_artifacts:
                    _items.append(_item_artifacts.to_dict())
            _dict['artifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item_authorizations in self.authorizations:
                if _item_authorizations:
                    _items.append(_item_authorizations.to_dict())
            _dict['authorizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of deployment_policy
        if self.deployment_policy:
            _dict['deploymentPolicy'] = self.deployment_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locking_policy
        if self.locking_policy:
            _dict['lockingPolicy'] = self.locking_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of management_policy
        if self.management_policy:
            _dict['managementPolicy'] = self.management_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_policy
        if self.notification_policy:
            _dict['notificationPolicy'] = self.notification_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item_policies in self.policies:
                if _item_policies:
                    _items.append(_item_policies.to_dict())
            _dict['policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationDefinitionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifacts": [ApplicationDefinitionArtifact.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None,
            "authorizations": [ApplicationAuthorization.from_dict(_item) for _item in obj["authorizations"]] if obj.get("authorizations") is not None else None,
            "createUiDefinition": obj.get("createUiDefinition"),
            "deploymentPolicy": ApplicationDeploymentPolicy.from_dict(obj["deploymentPolicy"]) if obj.get("deploymentPolicy") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "isEnabled": obj.get("isEnabled"),
            "lockLevel": obj.get("lockLevel"),
            "lockingPolicy": ApplicationPackageLockingPolicyDefinition.from_dict(obj["lockingPolicy"]) if obj.get("lockingPolicy") is not None else None,
            "mainTemplate": obj.get("mainTemplate"),
            "managementPolicy": ApplicationManagementPolicy.from_dict(obj["managementPolicy"]) if obj.get("managementPolicy") is not None else None,
            "notificationPolicy": ApplicationNotificationPolicy.from_dict(obj["notificationPolicy"]) if obj.get("notificationPolicy") is not None else None,
            "packageFileUri": obj.get("packageFileUri"),
            "policies": [ApplicationPolicy.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None
        })
        return _obj



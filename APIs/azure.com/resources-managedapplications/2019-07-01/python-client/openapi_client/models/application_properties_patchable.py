# coding: utf-8

"""
    ApplicationClient

    ARM applications

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class ApplicationPropertiesPatchable(BaseModel):
    """
    The managed application properties.
    """ # noqa: E501
    application_definition_id: Optional[StrictStr] = Field(default=None, description="The fully qualified path of managed application definition Id.", alias="applicationDefinitionId")
    managed_resource_group_id: Optional[StrictStr] = Field(default=None, description="The managed resource group Id.", alias="managedResourceGroupId")
    outputs: Optional[Dict[str, Any]] = Field(default=None, description="Name and value pairs that define the managed application outputs.")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    __properties: ClassVar[List[str]] = ["applicationDefinitionId", "managedResourceGroupId", "outputs", "parameters", "provisioningState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationPropertiesPatchable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "outputs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationPropertiesPatchable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationDefinitionId": obj.get("applicationDefinitionId"),
            "managedResourceGroupId": obj.get("managedResourceGroupId"),
            "outputs": obj.get("outputs"),
            "parameters": obj.get("parameters"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



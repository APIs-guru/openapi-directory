# coding: utf-8

"""
    ApplicationClient

    ARM applications

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_client_details import ApplicationClientDetails
from openapi_client.models.jit_authorization_policies import JitAuthorizationPolicies
from openapi_client.models.jit_request_state import JitRequestState
from openapi_client.models.jit_scheduling_policy import JitSchedulingPolicy
from openapi_client.models.provisioning_state import ProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class JitRequestProperties(BaseModel):
    """
    Information about JIT request properties
    """ # noqa: E501
    application_resource_id: StrictStr = Field(description="The parent application id.", alias="applicationResourceId")
    created_by: Optional[ApplicationClientDetails] = Field(default=None, alias="createdBy")
    jit_authorization_policies: List[JitAuthorizationPolicies] = Field(description="The JIT authorization policies.", alias="jitAuthorizationPolicies")
    jit_request_state: Optional[JitRequestState] = Field(default=None, alias="jitRequestState")
    jit_scheduling_policy: JitSchedulingPolicy = Field(alias="jitSchedulingPolicy")
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    publisher_tenant_id: Optional[StrictStr] = Field(default=None, description="The publisher tenant id.", alias="publisherTenantId")
    updated_by: Optional[ApplicationClientDetails] = Field(default=None, alias="updatedBy")
    __properties: ClassVar[List[str]] = ["applicationResourceId", "createdBy", "jitAuthorizationPolicies", "jitRequestState", "jitSchedulingPolicy", "provisioningState", "publisherTenantId", "updatedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JitRequestProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "publisher_tenant_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in jit_authorization_policies (list)
        _items = []
        if self.jit_authorization_policies:
            for _item_jit_authorization_policies in self.jit_authorization_policies:
                if _item_jit_authorization_policies:
                    _items.append(_item_jit_authorization_policies.to_dict())
            _dict['jitAuthorizationPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of jit_scheduling_policy
        if self.jit_scheduling_policy:
            _dict['jitSchedulingPolicy'] = self.jit_scheduling_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JitRequestProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationResourceId": obj.get("applicationResourceId"),
            "createdBy": ApplicationClientDetails.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "jitAuthorizationPolicies": [JitAuthorizationPolicies.from_dict(_item) for _item in obj["jitAuthorizationPolicies"]] if obj.get("jitAuthorizationPolicies") is not None else None,
            "jitRequestState": obj.get("jitRequestState"),
            "jitSchedulingPolicy": JitSchedulingPolicy.from_dict(obj["jitSchedulingPolicy"]) if obj.get("jitSchedulingPolicy") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "publisherTenantId": obj.get("publisherTenantId"),
            "updatedBy": ApplicationClientDetails.from_dict(obj["updatedBy"]) if obj.get("updatedBy") is not None else None
        })
        return _obj



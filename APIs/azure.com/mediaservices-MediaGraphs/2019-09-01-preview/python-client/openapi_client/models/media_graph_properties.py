# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2019-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.media_graph_sink import MediaGraphSink
from openapi_client.models.media_graph_source import MediaGraphSource
from typing import Optional, Set
from typing_extensions import Self

class MediaGraphProperties(BaseModel):
    """
    Class for Media Graph properties
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="Date the Media Graph was created")
    description: Optional[StrictStr] = Field(default=None, description="Media Graph  description")
    last_modified: Optional[datetime] = Field(default=None, description="Date the Media Graph was last modified", alias="lastModified")
    sinks: List[MediaGraphSink] = Field(description="Media Graph sinks")
    sources: List[MediaGraphSource] = Field(description="Media Graph sources")
    state: Optional[StrictStr] = Field(default=None, description="Media Graph state")
    __properties: ClassVar[List[str]] = ["created", "description", "lastModified", "sinks", "sources", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Running', 'Starting', 'Stopped', 'Stopping']):
            raise ValueError("must be one of enum values ('Running', 'Starting', 'Stopped', 'Stopping')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediaGraphProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "last_modified",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sinks (list)
        _items = []
        if self.sinks:
            for _item_sinks in self.sinks:
                if _item_sinks:
                    _items.append(_item_sinks.to_dict())
            _dict['sinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediaGraphProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "description": obj.get("description"),
            "lastModified": obj.get("lastModified"),
            "sinks": [MediaGraphSink.from_dict(_item) for _item in obj["sinks"]] if obj.get("sinks") is not None else None,
            "sources": [MediaGraphSource.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None,
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    StreamAnalyticsManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.storage_account import StorageAccount
from typing import Optional, Set
from typing_extensions import Self

class BlobReferenceInputDataSourceProperties(BaseModel):
    """
    The properties that are associated with a blob input containing reference data.
    """ # noqa: E501
    container: Optional[StrictStr] = Field(default=None, description="The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.")
    date_format: Optional[StrictStr] = Field(default=None, description="The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.", alias="dateFormat")
    path_pattern: Optional[StrictStr] = Field(default=None, description="The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.", alias="pathPattern")
    storage_accounts: Optional[List[StorageAccount]] = Field(default=None, description="A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.", alias="storageAccounts")
    time_format: Optional[StrictStr] = Field(default=None, description="The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.", alias="timeFormat")
    __properties: ClassVar[List[str]] = ["container", "dateFormat", "pathPattern", "storageAccounts", "timeFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlobReferenceInputDataSourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in storage_accounts (list)
        _items = []
        if self.storage_accounts:
            for _item_storage_accounts in self.storage_accounts:
                if _item_storage_accounts:
                    _items.append(_item_storage_accounts.to_dict())
            _dict['storageAccounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlobReferenceInputDataSourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "container": obj.get("container"),
            "dateFormat": obj.get("dateFormat"),
            "pathPattern": obj.get("pathPattern"),
            "storageAccounts": [StorageAccount.from_dict(_item) for _item in obj["storageAccounts"]] if obj.get("storageAccounts") is not None else None,
            "timeFormat": obj.get("timeFormat")
        })
        return _obj



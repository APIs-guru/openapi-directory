# coding: utf-8

"""
    Azure Log Analytics - Operations Management

    Azure Log Analytics API reference for Solution.

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SolutionProperties(BaseModel):
    """
    Solution properties supported by the OperationsManagement resource provider.
    """ # noqa: E501
    contained_resources: Optional[List[StrictStr]] = Field(default=None, description="The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.", alias="containedResources")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state for the solution.", alias="provisioningState")
    referenced_resources: Optional[List[StrictStr]] = Field(default=None, description="The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.", alias="referencedResources")
    workspace_resource_id: StrictStr = Field(description="The azure resourceId for the workspace where the solution will be deployed/enabled.", alias="workspaceResourceId")
    __properties: ClassVar[List[str]] = ["containedResources", "provisioningState", "referencedResources", "workspaceResourceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SolutionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SolutionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containedResources": obj.get("containedResources"),
            "provisioningState": obj.get("provisioningState"),
            "referencedResources": obj.get("referencedResources"),
            "workspaceResourceId": obj.get("workspaceResourceId")
        })
        return _obj



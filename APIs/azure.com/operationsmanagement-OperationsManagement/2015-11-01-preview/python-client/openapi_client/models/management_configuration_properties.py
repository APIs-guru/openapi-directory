# coding: utf-8

"""
    Azure Log Analytics - Operations Management

    Azure Log Analytics API reference for Solution.

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.arm_template_parameter import ArmTemplateParameter
from typing import Optional, Set
from typing_extensions import Self

class ManagementConfigurationProperties(BaseModel):
    """
    ManagementConfiguration properties supported by the OperationsManagement resource provider.
    """ # noqa: E501
    application_id: Optional[StrictStr] = Field(default=None, description="The applicationId of the appliance for this Management.", alias="applicationId")
    parameters: List[ArmTemplateParameter] = Field(description="Parameters to run the ARM template")
    parent_resource_type: StrictStr = Field(description="The type of the parent resource.", alias="parentResourceType")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state for the ManagementConfiguration.", alias="provisioningState")
    template: Dict[str, Any] = Field(description="The Json object containing the ARM template to deploy")
    __properties: ClassVar[List[str]] = ["applicationId", "parameters", "parentResourceType", "provisioningState", "template"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagementConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagementConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationId": obj.get("applicationId"),
            "parameters": [ArmTemplateParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "parentResourceType": obj.get("parentResourceType"),
            "provisioningState": obj.get("provisioningState"),
            "template": obj.get("template")
        })
        return _obj



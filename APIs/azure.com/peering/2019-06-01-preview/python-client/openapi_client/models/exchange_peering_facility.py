# coding: utf-8

"""
    PeeringManagementClient

    APIs to manage Peering resources through the Azure Resource Manager.

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExchangePeeringFacility(BaseModel):
    """
    The properties that define an exchange peering facility.
    """ # noqa: E501
    bandwidth_in_mbps: Optional[StrictInt] = Field(default=None, description="The bandwidth of the connection between Microsoft and the exchange peering facility.", alias="bandwidthInMbps")
    exchange_name: Optional[StrictStr] = Field(default=None, description="The name of the exchange peering facility.", alias="exchangeName")
    facility_ipv4_prefix: Optional[StrictStr] = Field(default=None, description="The IPv4 prefixes associated with the exchange peering facility.", alias="facilityIPv4Prefix")
    facility_ipv6_prefix: Optional[StrictStr] = Field(default=None, description="The IPv6 prefixes associated with the exchange peering facility.", alias="facilityIPv6Prefix")
    microsoft_ipv4_address: Optional[StrictStr] = Field(default=None, description="The IPv4 address of Microsoft at the exchange peering facility.", alias="microsoftIPv4Address")
    microsoft_ipv6_address: Optional[StrictStr] = Field(default=None, description="The IPv6 address of Microsoft at the exchange peering facility.", alias="microsoftIPv6Address")
    peering_db_facility_id: Optional[StrictInt] = Field(default=None, description="The PeeringDB.com ID of the facility.", alias="peeringDBFacilityId")
    peering_db_facility_link: Optional[StrictStr] = Field(default=None, description="The PeeringDB.com URL of the facility.", alias="peeringDBFacilityLink")
    __properties: ClassVar[List[str]] = ["bandwidthInMbps", "exchangeName", "facilityIPv4Prefix", "facilityIPv6Prefix", "microsoftIPv4Address", "microsoftIPv6Address", "peeringDBFacilityId", "peeringDBFacilityLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangePeeringFacility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangePeeringFacility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidthInMbps": obj.get("bandwidthInMbps"),
            "exchangeName": obj.get("exchangeName"),
            "facilityIPv4Prefix": obj.get("facilityIPv4Prefix"),
            "facilityIPv6Prefix": obj.get("facilityIPv6Prefix"),
            "microsoftIPv4Address": obj.get("microsoftIPv4Address"),
            "microsoftIPv6Address": obj.get("microsoftIPv6Address"),
            "peeringDBFacilityId": obj.get("peeringDBFacilityId"),
            "peeringDBFacilityLink": obj.get("peeringDBFacilityLink")
        })
        return _obj



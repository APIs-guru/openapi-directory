# coding: utf-8

"""
    PeeringManagementClient

    APIs to manage Peering resources through the Azure Resource Manager.

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BgpSession(BaseModel):
    """
    The properties that define a BGP session.
    """ # noqa: E501
    max_prefixes_advertised_v4: Optional[StrictInt] = Field(default=None, description="The maximum number of prefixes advertised over the IPv4 session.", alias="maxPrefixesAdvertisedV4")
    max_prefixes_advertised_v6: Optional[StrictInt] = Field(default=None, description="The maximum number of prefixes advertised over the IPv6 session.", alias="maxPrefixesAdvertisedV6")
    md5_authentication_key: Optional[StrictStr] = Field(default=None, description="The MD5 authentication key of the session.", alias="md5AuthenticationKey")
    microsoft_session_ipv4_address: Optional[StrictStr] = Field(default=None, description="The IPv4 session address on Microsoft's end.", alias="microsoftSessionIPv4Address")
    microsoft_session_ipv6_address: Optional[StrictStr] = Field(default=None, description="The IPv6 session address on Microsoft's end.", alias="microsoftSessionIPv6Address")
    peer_session_ipv4_address: Optional[StrictStr] = Field(default=None, description="The IPv4 session address on peer's end.", alias="peerSessionIPv4Address")
    peer_session_ipv6_address: Optional[StrictStr] = Field(default=None, description="The IPv6 session address on peer's end.", alias="peerSessionIPv6Address")
    session_prefix_v4: Optional[StrictStr] = Field(default=None, description="The IPv4 prefix that contains both ends' IPv4 addresses.", alias="sessionPrefixV4")
    session_prefix_v6: Optional[StrictStr] = Field(default=None, description="The IPv6 prefix that contains both ends' IPv6 addresses.", alias="sessionPrefixV6")
    session_state_v4: Optional[StrictStr] = Field(default=None, description="The state of the IPv4 session.", alias="sessionStateV4")
    session_state_v6: Optional[StrictStr] = Field(default=None, description="The state of the IPv6 session.", alias="sessionStateV6")
    __properties: ClassVar[List[str]] = ["maxPrefixesAdvertisedV4", "maxPrefixesAdvertisedV6", "md5AuthenticationKey", "microsoftSessionIPv4Address", "microsoftSessionIPv6Address", "peerSessionIPv4Address", "peerSessionIPv6Address", "sessionPrefixV4", "sessionPrefixV6", "sessionStateV4", "sessionStateV6"]

    @field_validator('session_state_v4')
    def session_state_v4_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm', 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove']):
            raise ValueError("must be one of enum values ('None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm', 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove')")
        return value

    @field_validator('session_state_v6')
    def session_state_v6_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm', 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove']):
            raise ValueError("must be one of enum values ('None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm', 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BgpSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "microsoft_session_ipv4_address",
            "microsoft_session_ipv6_address",
            "session_state_v4",
            "session_state_v6",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BgpSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxPrefixesAdvertisedV4": obj.get("maxPrefixesAdvertisedV4"),
            "maxPrefixesAdvertisedV6": obj.get("maxPrefixesAdvertisedV6"),
            "md5AuthenticationKey": obj.get("md5AuthenticationKey"),
            "microsoftSessionIPv4Address": obj.get("microsoftSessionIPv4Address"),
            "microsoftSessionIPv6Address": obj.get("microsoftSessionIPv6Address"),
            "peerSessionIPv4Address": obj.get("peerSessionIPv4Address"),
            "peerSessionIPv6Address": obj.get("peerSessionIPv6Address"),
            "sessionPrefixV4": obj.get("sessionPrefixV4"),
            "sessionPrefixV6": obj.get("sessionPrefixV6"),
            "sessionStateV4": obj.get("sessionStateV4"),
            "sessionStateV6": obj.get("sessionStateV6")
        })
        return _obj



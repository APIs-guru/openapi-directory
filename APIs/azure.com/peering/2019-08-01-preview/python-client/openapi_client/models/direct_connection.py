# coding: utf-8

"""
    PeeringManagementClient

    APIs to manage Peering resources through the Azure Resource Manager.

    The version of the OpenAPI document: 2019-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bgp_session import BgpSession
from typing import Optional, Set
from typing_extensions import Self

class DirectConnection(BaseModel):
    """
    The properties that define a direct connection.
    """ # noqa: E501
    bandwidth_in_mbps: Optional[StrictInt] = Field(default=None, description="The bandwidth of the connection.", alias="bandwidthInMbps")
    bgp_session: Optional[BgpSession] = Field(default=None, alias="bgpSession")
    connection_identifier: Optional[StrictStr] = Field(default=None, description="The unique identifier (GUID) for the connection.", alias="connectionIdentifier")
    connection_state: Optional[StrictStr] = Field(default=None, description="The state of the connection.", alias="connectionState")
    peering_db_facility_id: Optional[StrictInt] = Field(default=None, description="The PeeringDB.com ID of the facility at which the connection has to be set up.", alias="peeringDBFacilityId")
    provisioned_bandwidth_in_mbps: Optional[StrictInt] = Field(default=None, description="The bandwidth that is actually provisioned.", alias="provisionedBandwidthInMbps")
    session_address_provider: Optional[StrictStr] = Field(default=None, description="The field indicating if Microsoft provides session ip addresses.", alias="sessionAddressProvider")
    use_for_peering_service: Optional[StrictBool] = Field(default=None, description="The flag that indicates whether or not the connection is used for peering service.", alias="useForPeeringService")
    __properties: ClassVar[List[str]] = ["bandwidthInMbps", "bgpSession", "connectionIdentifier", "connectionState", "peeringDBFacilityId", "provisionedBandwidthInMbps", "sessionAddressProvider", "useForPeeringService"]

    @field_validator('connection_state')
    def connection_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'PendingApproval', 'Approved', 'ProvisioningStarted', 'ProvisioningFailed', 'ProvisioningCompleted', 'Validating', 'Active']):
            raise ValueError("must be one of enum values ('None', 'PendingApproval', 'Approved', 'ProvisioningStarted', 'ProvisioningFailed', 'ProvisioningCompleted', 'Validating', 'Active')")
        return value

    @field_validator('session_address_provider')
    def session_address_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Microsoft', 'Peer']):
            raise ValueError("must be one of enum values ('Microsoft', 'Peer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connection_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bgp_session
        if self.bgp_session:
            _dict['bgpSession'] = self.bgp_session.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidthInMbps": obj.get("bandwidthInMbps"),
            "bgpSession": BgpSession.from_dict(obj["bgpSession"]) if obj.get("bgpSession") is not None else None,
            "connectionIdentifier": obj.get("connectionIdentifier"),
            "connectionState": obj.get("connectionState"),
            "peeringDBFacilityId": obj.get("peeringDBFacilityId"),
            "provisionedBandwidthInMbps": obj.get("provisionedBandwidthInMbps"),
            "sessionAddressProvider": obj.get("sessionAddressProvider"),
            "useForPeeringService": obj.get("useForPeeringService")
        })
        return _obj



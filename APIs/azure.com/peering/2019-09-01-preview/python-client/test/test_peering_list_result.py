# coding: utf-8

"""
    PeeringManagementClient

    APIs to manage Peering resources through the Azure Resource Manager.

    The version of the OpenAPI document: 2019-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.peering_list_result import PeeringListResult

class TestPeeringListResult(unittest.TestCase):
    """PeeringListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PeeringListResult:
        """Test PeeringListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PeeringListResult`
        """
        model = PeeringListResult()
        if include_optional:
            return PeeringListResult(
                next_link = '',
                value = [
                    openapi_client.models.peering.Peering(
                        kind = 'Direct', 
                        location = '', 
                        properties = openapi_client.models.peering_properties.PeeringProperties(
                            direct = openapi_client.models.peering_properties_direct.PeeringPropertiesDirect(
                                connections = [
                                    openapi_client.models.direct_connection.DirectConnection(
                                        bandwidth_in_mbps = 56, 
                                        bgp_session = openapi_client.models.bgp_session.BgpSession(
                                            max_prefixes_advertised_v4 = 56, 
                                            max_prefixes_advertised_v6 = 56, 
                                            md5_authentication_key = '', 
                                            microsoft_session_ipv4_address = '', 
                                            microsoft_session_ipv6_address = '', 
                                            peer_session_ipv4_address = '', 
                                            peer_session_ipv6_address = '', 
                                            session_prefix_v4 = '', 
                                            session_prefix_v6 = '', 
                                            session_state_v4 = 'None', 
                                            session_state_v6 = 'None', ), 
                                        connection_identifier = '', 
                                        connection_state = 'None', 
                                        error_message = '', 
                                        peering_db_facility_id = 56, 
                                        provisioned_bandwidth_in_mbps = 56, 
                                        session_address_provider = 'Microsoft', 
                                        use_for_peering_service = True, )
                                    ], 
                                direct_peering_type = 'Edge', 
                                peer_asn = openapi_client.models.sub_resource.SubResource(
                                    id = '', ), 
                                use_for_peering_service = True, ), 
                            exchange = openapi_client.models.peering_properties_exchange.PeeringPropertiesExchange(), 
                            peering_location = '', 
                            provisioning_state = 'Succeeded', ), 
                        sku = openapi_client.models.peering_sku.PeeringSku(
                            family = 'Direct', 
                            name = 'Basic_Exchange_Free', 
                            size = 'Free', 
                            tier = 'Basic', ), 
                        tags = {
                            'key' : ''
                            }, )
                    ]
            )
        else:
            return PeeringListResult(
        )
        """

    def testPeeringListResult(self):
        """Test PeeringListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

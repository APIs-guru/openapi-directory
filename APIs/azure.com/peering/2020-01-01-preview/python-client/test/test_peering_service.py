# coding: utf-8

"""
    PeeringManagementClient

    APIs to manage Peering resources through the Azure Resource Manager.

    The version of the OpenAPI document: 2020-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.peering_service import PeeringService

class TestPeeringService(unittest.TestCase):
    """PeeringService unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PeeringService:
        """Test PeeringService
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PeeringService`
        """
        model = PeeringService()
        if include_optional:
            return PeeringService(
                location = '',
                properties = openapi_client.models.peering_service_properties.PeeringServiceProperties(
                    peering_service_location = '', 
                    peering_service_provider = '', 
                    provisioning_state = 'Succeeded', ),
                sku = openapi_client.models.peering_service_sku.PeeringServiceSku(
                    name = '', ),
                tags = {
                    'key' : ''
                    },
                id = '',
                name = '',
                type = ''
            )
        else:
            return PeeringService(
                location = '',
        )
        """

    def testPeeringService(self):
        """Test PeeringService"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

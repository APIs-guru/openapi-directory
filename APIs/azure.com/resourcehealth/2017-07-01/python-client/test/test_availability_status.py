# coding: utf-8

"""
    Microsoft.ResourceHealth

    The Resource Health Client.

    The version of the OpenAPI document: 2017-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.availability_status import AvailabilityStatus

class TestAvailabilityStatus(unittest.TestCase):
    """AvailabilityStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AvailabilityStatus:
        """Test AvailabilityStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AvailabilityStatus`
        """
        model = AvailabilityStatus()
        if include_optional:
            return AvailabilityStatus(
                id = '',
                location = '',
                name = '',
                properties = openapi_client.models.availability_status_properties.availabilityStatus_properties(
                    availability_state = 'Available', 
                    detailed_status = '', 
                    health_event_category = '', 
                    health_event_cause = '', 
                    health_event_id = '', 
                    health_event_type = '', 
                    occured_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    reason_chronicity = 'Transient', 
                    reason_type = '', 
                    recently_resolved_state = openapi_client.models.availability_status_properties_recently_resolved_state.availabilityStatus_properties_recentlyResolvedState(
                        resolved_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        unavailability_summary = '', 
                        unavailable_occurred_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    recommended_actions = [
                        openapi_client.models.recommended_action.recommendedAction(
                            action = '', 
                            action_url = '', 
                            action_url_text = '', )
                        ], 
                    reported_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    resolution_eta = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    root_cause_attribution_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    service_impacting_events = [
                        openapi_client.models.service_impacting_event.serviceImpactingEvent(
                            correlation_id = '', 
                            event_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            event_status_last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            incident_properties = openapi_client.models.service_impacting_event_incident_properties.serviceImpactingEvent_incidentProperties(
                                incident_type = '', 
                                region = '', 
                                service = '', 
                                title = '', ), 
                            status = openapi_client.models.service_impacting_event_status.serviceImpactingEvent_status(
                                value = '', ), )
                        ], 
                    summary = '', ),
                type = ''
            )
        else:
            return AvailabilityStatus(
        )
        """

    def testAvailabilityStatus(self):
        """Test AvailabilityStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

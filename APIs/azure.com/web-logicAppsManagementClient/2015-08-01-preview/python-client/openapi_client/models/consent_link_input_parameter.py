# coding: utf-8

"""
    LogicAppsManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConsentLinkInputParameter(BaseModel):
    """
    
    """ # noqa: E501
    object_id: Optional[StrictStr] = Field(default=None, description="AAD OID (user or group) if the principal type is ActiveDirectory.              MSA PUID if the principal type is MicrosoftAccount.", alias="objectId")
    parameter_name: Optional[StrictStr] = Field(default=None, description="Name of the parameter in the connection provider's oauthSettings", alias="parameterName")
    principal_type: Optional[StrictStr] = Field(default=None, description="Principal type", alias="principalType")
    redirect_url: Optional[StrictStr] = Field(default=None, description="Name of the parameter in the connection provider's oauthSettings", alias="redirectUrl")
    tenant_id: Optional[StrictStr] = Field(default=None, description="Tenant Id", alias="tenantId")
    __properties: ClassVar[List[str]] = ["objectId", "parameterName", "principalType", "redirectUrl", "tenantId"]

    @field_validator('principal_type')
    def principal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ActiveDirectory', 'Connection', 'MicrosoftAccount']):
            raise ValueError("must be one of enum values ('ActiveDirectory', 'Connection', 'MicrosoftAccount')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsentLinkInputParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsentLinkInputParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objectId": obj.get("objectId"),
            "parameterName": obj.get("parameterName"),
            "principalType": obj.get("principalType"),
            "redirectUrl": obj.get("redirectUrl"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



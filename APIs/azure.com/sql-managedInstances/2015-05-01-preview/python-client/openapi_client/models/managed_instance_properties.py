# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManagedInstanceProperties(BaseModel):
    """
    The properties of a managed instance.
    """ # noqa: E501
    administrator_login: Optional[StrictStr] = Field(default=None, description="Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).", alias="administratorLogin")
    administrator_login_password: Optional[StrictStr] = Field(default=None, description="The administrator login password (required for managed instance creation).", alias="administratorLoginPassword")
    collation: Optional[StrictStr] = Field(default=None, description="Collation of the managed instance.")
    dns_zone: Optional[StrictStr] = Field(default=None, description="The Dns Zone that the managed instance is in.", alias="dnsZone")
    dns_zone_partner: Optional[StrictStr] = Field(default=None, description="The resource id of another managed instance whose DNS zone this managed instance will share after creation.", alias="dnsZonePartner")
    fully_qualified_domain_name: Optional[StrictStr] = Field(default=None, description="The fully qualified domain name of the managed instance.", alias="fullyQualifiedDomainName")
    instance_pool_id: Optional[StrictStr] = Field(default=None, description="The Id of the instance pool this managed server belongs to.", alias="instancePoolId")
    license_type: Optional[StrictStr] = Field(default=None, description="The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).", alias="licenseType")
    managed_instance_create_mode: Optional[StrictStr] = Field(default=None, description="Specifies the mode of database creation.    Default: Regular instance creation.    Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.", alias="managedInstanceCreateMode")
    proxy_override: Optional[StrictStr] = Field(default=None, description="Connection type used for connecting to the instance.", alias="proxyOverride")
    public_data_endpoint_enabled: Optional[StrictBool] = Field(default=None, description="Whether or not the public data endpoint is enabled.", alias="publicDataEndpointEnabled")
    restore_point_in_time: Optional[datetime] = Field(default=None, description="Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.", alias="restorePointInTime")
    source_managed_instance_id: Optional[StrictStr] = Field(default=None, description="The resource identifier of the source managed instance associated with create operation of this instance.", alias="sourceManagedInstanceId")
    state: Optional[StrictStr] = Field(default=None, description="The state of the managed instance.")
    storage_size_in_gb: Optional[StrictInt] = Field(default=None, description="Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB allowed only.", alias="storageSizeInGB")
    subnet_id: Optional[StrictStr] = Field(default=None, description="Subnet resource ID for the managed instance.", alias="subnetId")
    timezone_id: Optional[StrictStr] = Field(default=None, description="Id of the timezone. Allowed values are timezones supported by Windows.  Windows keeps details on supported timezones, including the id, in registry under  KEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones.  You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.  List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.  An example of valid timezone id is \"Pacific Standard Time\" or \"W. Europe Standard Time\".", alias="timezoneId")
    v_cores: Optional[StrictInt] = Field(default=None, description="The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.", alias="vCores")
    __properties: ClassVar[List[str]] = ["administratorLogin", "administratorLoginPassword", "collation", "dnsZone", "dnsZonePartner", "fullyQualifiedDomainName", "instancePoolId", "licenseType", "managedInstanceCreateMode", "proxyOverride", "publicDataEndpointEnabled", "restorePointInTime", "sourceManagedInstanceId", "state", "storageSizeInGB", "subnetId", "timezoneId", "vCores"]

    @field_validator('license_type')
    def license_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LicenseIncluded', 'BasePrice']):
            raise ValueError("must be one of enum values ('LicenseIncluded', 'BasePrice')")
        return value

    @field_validator('managed_instance_create_mode')
    def managed_instance_create_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'PointInTimeRestore']):
            raise ValueError("must be one of enum values ('Default', 'PointInTimeRestore')")
        return value

    @field_validator('proxy_override')
    def proxy_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Proxy', 'Redirect', 'Default']):
            raise ValueError("must be one of enum values ('Proxy', 'Redirect', 'Default')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedInstanceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "dns_zone",
            "fully_qualified_domain_name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedInstanceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administratorLogin": obj.get("administratorLogin"),
            "administratorLoginPassword": obj.get("administratorLoginPassword"),
            "collation": obj.get("collation"),
            "dnsZone": obj.get("dnsZone"),
            "dnsZonePartner": obj.get("dnsZonePartner"),
            "fullyQualifiedDomainName": obj.get("fullyQualifiedDomainName"),
            "instancePoolId": obj.get("instancePoolId"),
            "licenseType": obj.get("licenseType"),
            "managedInstanceCreateMode": obj.get("managedInstanceCreateMode"),
            "proxyOverride": obj.get("proxyOverride"),
            "publicDataEndpointEnabled": obj.get("publicDataEndpointEnabled"),
            "restorePointInTime": obj.get("restorePointInTime"),
            "sourceManagedInstanceId": obj.get("sourceManagedInstanceId"),
            "state": obj.get("state"),
            "storageSizeInGB": obj.get("storageSizeInGB"),
            "subnetId": obj.get("subnetId"),
            "timezoneId": obj.get("timezoneId"),
            "vCores": obj.get("vCores")
        })
        return _obj



# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2017-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vulnerability_assessment_scan_error import VulnerabilityAssessmentScanError
from typing import Optional, Set
from typing_extensions import Self

class VulnerabilityAssessmentScanRecordProperties(BaseModel):
    """
    Properties of a vulnerability assessment scan record.
    """ # noqa: E501
    end_time: Optional[datetime] = Field(default=None, description="The scan end time (UTC).", alias="endTime")
    errors: Optional[List[VulnerabilityAssessmentScanError]] = Field(default=None, description="The scan errors.")
    number_of_failed_security_checks: Optional[StrictInt] = Field(default=None, description="The number of failed security checks.", alias="numberOfFailedSecurityChecks")
    scan_id: Optional[StrictStr] = Field(default=None, description="The scan ID.", alias="scanId")
    start_time: Optional[datetime] = Field(default=None, description="The scan start time (UTC).", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="The scan status.")
    storage_container_path: Optional[StrictStr] = Field(default=None, description="The scan results storage container path.", alias="storageContainerPath")
    trigger_type: Optional[StrictStr] = Field(default=None, description="The scan trigger type.", alias="triggerType")
    __properties: ClassVar[List[str]] = ["endTime", "errors", "numberOfFailedSecurityChecks", "scanId", "startTime", "state", "storageContainerPath", "triggerType"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Passed', 'Failed', 'FailedToRun', 'InProgress']):
            raise ValueError("must be one of enum values ('Passed', 'Failed', 'FailedToRun', 'InProgress')")
        return value

    @field_validator('trigger_type')
    def trigger_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OnDemand', 'Recurring']):
            raise ValueError("must be one of enum values ('OnDemand', 'Recurring')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulnerabilityAssessmentScanRecordProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "errors",
            "number_of_failed_security_checks",
            "scan_id",
            "start_time",
            "state",
            "storage_container_path",
            "trigger_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulnerabilityAssessmentScanRecordProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "errors": [VulnerabilityAssessmentScanError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "numberOfFailedSecurityChecks": obj.get("numberOfFailedSecurityChecks"),
            "scanId": obj.get("scanId"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "storageContainerPath": obj.get("storageContainerPath"),
            "triggerType": obj.get("triggerType")
        })
        return _obj



# coding: utf-8

"""
    BlueprintClient

    Azure Blueprint Client.

    The version of the OpenAPI document: 2017-11-11-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.assignment_lock_settings import AssignmentLockSettings
from openapi_client.models.assignment_status import AssignmentStatus
from openapi_client.models.parameter_value_base import ParameterValueBase
from openapi_client.models.resource_group_value import ResourceGroupValue
from typing import Optional, Set
from typing_extensions import Self

class AssignmentProperties(BaseModel):
    """
    Detailed properties for Assignment.
    """ # noqa: E501
    blueprint_id: Optional[StrictStr] = Field(default=None, description="ID of the Blueprint definition resource.", alias="blueprintId")
    locks: Optional[AssignmentLockSettings] = None
    parameters: Dict[str, ParameterValueBase] = Field(description="A dictionary for parameters and their corresponding values.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="State of the assignment.", alias="provisioningState")
    resource_groups: Dict[str, ResourceGroupValue] = Field(description="A dictionary which maps resource group placeholders to the resource groups which will be created.", alias="resourceGroups")
    status: Optional[AssignmentStatus] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Multi-line explain this resource.")
    display_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="One-liner string explain this resource.", alias="displayName")
    __properties: ClassVar[List[str]] = ["description", "displayName"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['creating', 'validating', 'waiting', 'deploying', 'cancelling', 'locking', 'succeeded', 'failed', 'canceled', 'deleting']):
            raise ValueError("must be one of enum values ('creating', 'validating', 'waiting', 'deploying', 'cancelling', 'locking', 'succeeded', 'failed', 'canceled', 'deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssignmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssignmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName")
        })
        return _obj



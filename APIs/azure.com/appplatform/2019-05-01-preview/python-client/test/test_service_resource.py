# coding: utf-8

"""
    AppPlatformManagementClient

    REST API for Azure Spring Cloud

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.service_resource import ServiceResource

class TestServiceResource(unittest.TestCase):
    """ServiceResource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceResource:
        """Test ServiceResource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceResource`
        """
        model = ServiceResource()
        if include_optional:
            return ServiceResource(
                properties = openapi_client.models.cluster_resource_properties.ClusterResourceProperties(
                    config_server_properties = openapi_client.models.config_server_properties.ConfigServerProperties(
                        config_server = openapi_client.models.config_server_settings.ConfigServerSettings(
                            git_property = openapi_client.models.config_server_git_property.ConfigServerGitProperty(
                                host_key = '', 
                                host_key_algorithm = '', 
                                label = '', 
                                password = '', 
                                private_key = '', 
                                repositories = [
                                    openapi_client.models.git_pattern_repository.GitPatternRepository(
                                        host_key = '', 
                                        host_key_algorithm = '', 
                                        label = '', 
                                        name = '', 
                                        password = '', 
                                        pattern = [
                                            ''
                                            ], 
                                        private_key = '', 
                                        search_paths = [
                                            ''
                                            ], 
                                        strict_host_key_checking = True, 
                                        uri = '', 
                                        username = '', )
                                    ], 
                                search_paths = [
                                    ''
                                    ], 
                                strict_host_key_checking = True, 
                                uri = '', 
                                username = '', ), ), 
                        error = openapi_client.models.error.Error(
                            code = '', 
                            message = '', ), 
                        state = 'NotAvailable', ), 
                    provisioning_state = 'Creating', 
                    service_id = '', 
                    trace = openapi_client.models.trace_properties.TraceProperties(
                        app_insight_instrumentation_key = '', 
                        enabled = True, 
                        state = 'NotAvailable', ), 
                    version = 56, ),
                location = '',
                tags = {
                    'key' : ''
                    },
                id = '',
                name = '',
                type = ''
            )
        else:
            return ServiceResource(
        )
        """

    def testServiceResource(self):
        """Test ServiceResource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

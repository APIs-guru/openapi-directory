# coding: utf-8

"""
    AppPlatformManagementClient

    REST API for Azure Spring Cloud

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.persistent_disk import PersistentDisk
from openapi_client.models.temporary_disk import TemporaryDisk
from typing import Optional, Set
from typing_extensions import Self

class AppResourceProperties(BaseModel):
    """
    App resource properties payload
    """ # noqa: E501
    active_deployment_name: Optional[StrictStr] = Field(default=None, description="Name of the active deployment of the App", alias="activeDeploymentName")
    created_time: Optional[datetime] = Field(default=None, description="Date time when the resource is created", alias="createdTime")
    persistent_disk: Optional[PersistentDisk] = Field(default=None, alias="persistentDisk")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the App", alias="provisioningState")
    public: Optional[StrictBool] = Field(default=None, description="Indicates whether the App exposes public endpoint")
    temporary_disk: Optional[TemporaryDisk] = Field(default=None, alias="temporaryDisk")
    url: Optional[StrictStr] = Field(default=None, description="URL of the App")
    __properties: ClassVar[List[str]] = ["activeDeploymentName", "createdTime", "persistentDisk", "provisioningState", "public", "temporaryDisk", "url"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Failed', 'Creating', 'Updating']):
            raise ValueError("must be one of enum values ('Succeeded', 'Failed', 'Creating', 'Updating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_time",
            "provisioning_state",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of persistent_disk
        if self.persistent_disk:
            _dict['persistentDisk'] = self.persistent_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temporary_disk
        if self.temporary_disk:
            _dict['temporaryDisk'] = self.temporary_disk.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeDeploymentName": obj.get("activeDeploymentName"),
            "createdTime": obj.get("createdTime"),
            "persistentDisk": PersistentDisk.from_dict(obj["persistentDisk"]) if obj.get("persistentDisk") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "public": obj.get("public"),
            "temporaryDisk": TemporaryDisk.from_dict(obj["temporaryDisk"]) if obj.get("temporaryDisk") is not None else None,
            "url": obj.get("url")
        })
        return _obj



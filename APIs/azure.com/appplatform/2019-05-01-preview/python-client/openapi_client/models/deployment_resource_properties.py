# coding: utf-8

"""
    AppPlatformManagementClient

    REST API for Azure Spring Cloud

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployment_instance import DeploymentInstance
from openapi_client.models.deployment_settings import DeploymentSettings
from openapi_client.models.user_source_info import UserSourceInfo
from typing import Optional, Set
from typing_extensions import Self

class DeploymentResourceProperties(BaseModel):
    """
    Deployment resource properties payload
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Indicates whether the Deployment is active")
    app_name: Optional[StrictStr] = Field(default=None, description="App name of the deployment", alias="appName")
    created_time: Optional[datetime] = Field(default=None, description="Date time when the resource is created", alias="createdTime")
    deployment_settings: Optional[DeploymentSettings] = Field(default=None, alias="deploymentSettings")
    instances: Optional[List[DeploymentInstance]] = Field(default=None, description="Collection of instances belong to the Deployment")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the Deployment", alias="provisioningState")
    source: Optional[UserSourceInfo] = None
    status: Optional[StrictStr] = Field(default=None, description="Status of the Deployment")
    __properties: ClassVar[List[str]] = ["active", "appName", "createdTime", "deploymentSettings", "instances", "provisioningState", "source", "status"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Updating', 'Succeeded', 'Failed']):
            raise ValueError("must be one of enum values ('Creating', 'Updating', 'Succeeded', 'Failed')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Stopped', 'Running', 'Failed', 'Allocating', 'Upgrading', 'Compiling']):
            raise ValueError("must be one of enum values ('Unknown', 'Stopped', 'Running', 'Failed', 'Allocating', 'Upgrading', 'Compiling')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active",
            "app_name",
            "created_time",
            "instances",
            "provisioning_state",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deployment_settings
        if self.deployment_settings:
            _dict['deploymentSettings'] = self.deployment_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "appName": obj.get("appName"),
            "createdTime": obj.get("createdTime"),
            "deploymentSettings": DeploymentSettings.from_dict(obj["deploymentSettings"]) if obj.get("deploymentSettings") is not None else None,
            "instances": [DeploymentInstance.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "source": UserSourceInfo.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    AppPlatformManagementClient

    REST API for Azure Spring Cloud

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_dimension import MetricDimension
from typing import Optional, Set
from typing_extensions import Self

class MetricSpecification(BaseModel):
    """
    Specifications of the Metrics for Azure Monitoring
    """ # noqa: E501
    aggregation_type: Optional[StrictStr] = Field(default=None, description="Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.", alias="aggregationType")
    category: Optional[StrictStr] = Field(default=None, description="Name of the metric category that the metric belongs to. A metric can only belong to a single category.")
    dimensions: Optional[List[MetricDimension]] = Field(default=None, description="Dimensions of the metric")
    display_description: Optional[StrictStr] = Field(default=None, description="Localized friendly description of the metric", alias="displayDescription")
    display_name: Optional[StrictStr] = Field(default=None, description="Localized friendly display name of the metric", alias="displayName")
    fill_gap_with_zero: Optional[StrictBool] = Field(default=None, description="Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published.", alias="fillGapWithZero")
    name: Optional[StrictStr] = Field(default=None, description="Name of the metric")
    supported_aggregation_types: Optional[List[StrictStr]] = Field(default=None, description="Supported aggregation types", alias="supportedAggregationTypes")
    supported_time_grain_types: Optional[List[StrictStr]] = Field(default=None, description="Supported time grain types", alias="supportedTimeGrainTypes")
    unit: Optional[StrictStr] = Field(default=None, description="Unit that makes sense for the metric")
    __properties: ClassVar[List[str]] = ["aggregationType", "category", "dimensions", "displayDescription", "displayName", "fillGapWithZero", "name", "supportedAggregationTypes", "supportedTimeGrainTypes", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationType": obj.get("aggregationType"),
            "category": obj.get("category"),
            "dimensions": [MetricDimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "displayDescription": obj.get("displayDescription"),
            "displayName": obj.get("displayName"),
            "fillGapWithZero": obj.get("fillGapWithZero"),
            "name": obj.get("name"),
            "supportedAggregationTypes": obj.get("supportedAggregationTypes"),
            "supportedTimeGrainTypes": obj.get("supportedTimeGrainTypes"),
            "unit": obj.get("unit")
        })
        return _obj



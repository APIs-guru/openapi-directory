# coding: utf-8

"""
    AppPlatformManagementClient

    REST API for Azure Spring Cloud

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_server_properties import ConfigServerProperties
from openapi_client.models.trace_properties import TraceProperties
from typing import Optional, Set
from typing_extensions import Self

class ClusterResourceProperties(BaseModel):
    """
    Service properties payload
    """ # noqa: E501
    config_server_properties: Optional[ConfigServerProperties] = Field(default=None, alias="configServerProperties")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the Service", alias="provisioningState")
    service_id: Optional[StrictStr] = Field(default=None, description="ServiceInstanceEntity GUID which uniquely identifies a created resource", alias="serviceId")
    trace: Optional[TraceProperties] = None
    version: Optional[StrictInt] = Field(default=None, description="Version of the Service")
    __properties: ClassVar[List[str]] = ["configServerProperties", "provisioningState", "serviceId", "trace", "version"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Updating', 'Deleting', 'Deleted', 'Succeeded', 'Failed', 'Moving', 'Moved', 'MoveFailed']):
            raise ValueError("must be one of enum values ('Creating', 'Updating', 'Deleting', 'Deleted', 'Succeeded', 'Failed', 'Moving', 'Moved', 'MoveFailed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "service_id",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config_server_properties
        if self.config_server_properties:
            _dict['configServerProperties'] = self.config_server_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trace
        if self.trace:
            _dict['trace'] = self.trace.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configServerProperties": ConfigServerProperties.from_dict(obj["configServerProperties"]) if obj.get("configServerProperties") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "serviceId": obj.get("serviceId"),
            "trace": TraceProperties.from_dict(obj["trace"]) if obj.get("trace") is not None else None,
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    AppPlatformManagementClient

    REST API for Azure Spring Cloud

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.git_pattern_repository import GitPatternRepository
from typing import Optional, Set
from typing_extensions import Self

class ConfigServerGitProperty(BaseModel):
    """
    Property of git.
    """ # noqa: E501
    host_key: Optional[StrictStr] = Field(default=None, description="Public sshKey of git repository.", alias="hostKey")
    host_key_algorithm: Optional[StrictStr] = Field(default=None, description="SshKey algorithm of git repository.", alias="hostKeyAlgorithm")
    label: Optional[StrictStr] = Field(default=None, description="Label of the repository")
    password: Optional[StrictStr] = Field(default=None, description="Password of git repository basic auth.")
    private_key: Optional[StrictStr] = Field(default=None, description="Private sshKey algorithm of git repository.", alias="privateKey")
    repositories: Optional[List[GitPatternRepository]] = Field(default=None, description="Repositories of git.")
    search_paths: Optional[List[StrictStr]] = Field(default=None, description="Searching path of the repository", alias="searchPaths")
    strict_host_key_checking: Optional[StrictBool] = Field(default=None, description="Strict host key checking or not.", alias="strictHostKeyChecking")
    uri: StrictStr = Field(description="URI of the repository")
    username: Optional[StrictStr] = Field(default=None, description="Username of git repository basic auth.")
    __properties: ClassVar[List[str]] = ["hostKey", "hostKeyAlgorithm", "label", "password", "privateKey", "repositories", "searchPaths", "strictHostKeyChecking", "uri", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigServerGitProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in repositories (list)
        _items = []
        if self.repositories:
            for _item_repositories in self.repositories:
                if _item_repositories:
                    _items.append(_item_repositories.to_dict())
            _dict['repositories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigServerGitProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostKey": obj.get("hostKey"),
            "hostKeyAlgorithm": obj.get("hostKeyAlgorithm"),
            "label": obj.get("label"),
            "password": obj.get("password"),
            "privateKey": obj.get("privateKey"),
            "repositories": [GitPatternRepository.from_dict(_item) for _item in obj["repositories"]] if obj.get("repositories") is not None else None,
            "searchPaths": obj.get("searchPaths"),
            "strictHostKeyChecking": obj.get("strictHostKeyChecking"),
            "uri": obj.get("uri"),
            "username": obj.get("username")
        })
        return _obj



# coding: utf-8

"""
    DataLakeStoreFileSystemManagementClient

    Creates an Azure Data Lake Store filesystem client.

    The version of the OpenAPI document: 2015-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FileStatusProperties(BaseModel):
    """
    Data Lake Store file or directory information.
    """ # noqa: E501
    access_time: Optional[StrictInt] = Field(default=None, description="the last access time as ticks since the epoch.", alias="accessTime")
    block_size: Optional[StrictInt] = Field(default=None, description="the block size for the file.", alias="blockSize")
    children_num: Optional[StrictInt] = Field(default=None, description="the number of children in the directory.", alias="childrenNum")
    expiration_time: Optional[StrictInt] = Field(default=None, description="Gets the expiration time, if any, as ticks since the epoch. If this is set to 0 or DateTime.MaxValue there is no expiration.", alias="expirationTime")
    group: Optional[StrictStr] = Field(default=None, description="the group owner.")
    length: Optional[StrictInt] = Field(default=None, description="the number of bytes in a file.")
    modification_time: Optional[StrictInt] = Field(default=None, description="the modification time as ticks since the epoch.", alias="modificationTime")
    owner: Optional[StrictStr] = Field(default=None, description="the user who is the owner.")
    path_suffix: Optional[StrictStr] = Field(default=None, description="the path suffix.", alias="pathSuffix")
    permission: Optional[StrictStr] = Field(default=None, description="the permission represented as an string.")
    type: Optional[StrictStr] = Field(default=None, description="the type of the path object.")
    __properties: ClassVar[List[str]] = ["accessTime", "blockSize", "childrenNum", "expirationTime", "group", "length", "modificationTime", "owner", "pathSuffix", "permission", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FILE', 'DIRECTORY']):
            raise ValueError("must be one of enum values ('FILE', 'DIRECTORY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileStatusProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "access_time",
            "block_size",
            "children_num",
            "expiration_time",
            "group",
            "length",
            "modification_time",
            "owner",
            "path_suffix",
            "permission",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileStatusProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessTime": obj.get("accessTime"),
            "blockSize": obj.get("blockSize"),
            "childrenNum": obj.get("childrenNum"),
            "expirationTime": obj.get("expirationTime"),
            "group": obj.get("group"),
            "length": obj.get("length"),
            "modificationTime": obj.get("modificationTime"),
            "owner": obj.get("owner"),
            "pathSuffix": obj.get("pathSuffix"),
            "permission": obj.get("permission"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    DataLakeStoreFileSystemManagementClient

    Creates an Azure Data Lake Store filesystem client.

    The version of the OpenAPI document: 2015-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.file_statuses_result import FileStatusesResult

class TestFileStatusesResult(unittest.TestCase):
    """FileStatusesResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FileStatusesResult:
        """Test FileStatusesResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FileStatusesResult`
        """
        model = FileStatusesResult()
        if include_optional:
            return FileStatusesResult(
                file_statuses = openapi_client.models.file_statuses.FileStatuses(
                    file_status = [
                        openapi_client.models.file_status_properties.FileStatusProperties(
                            access_time = 56, 
                            block_size = 56, 
                            children_num = 56, 
                            expiration_time = 56, 
                            group = '', 
                            length = 56, 
                            modification_time = 56, 
                            owner = '', 
                            path_suffix = '', 
                            permission = '', 
                            type = 'FILE', )
                        ], )
            )
        else:
            return FileStatusesResult(
        )
        """

    def testFileStatusesResult(self):
        """Test FileStatusesResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    SubscriptionsManagementClient

    The Admin Subscriptions Management Client.

    The version of the OpenAPI document: 2015-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.plans_list_metrics200_response import PlansListMetrics200Response

class TestPlansListMetrics200Response(unittest.TestCase):
    """PlansListMetrics200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlansListMetrics200Response:
        """Test PlansListMetrics200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlansListMetrics200Response`
        """
        model = PlansListMetrics200Response()
        if include_optional:
            return PlansListMetrics200Response(
                next_link = '',
                value = [
                    openapi_client.models.plans_list_metrics_200_response_value_inner.Plans_ListMetrics_200_response_value_inner(
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        metric_unit = 'Count', 
                        metric_values = [
                            openapi_client.models.plans_list_metrics_200_response_value_inner_metric_values_inner.Plans_ListMetrics_200_response_value_inner_metricValues_inner(
                                average = 1.337, 
                                count = 56, 
                                maximum = 1.337, 
                                minimum = 1.337, 
                                properties = {
                                    'key' : ''
                                    }, 
                                time_stamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                total = 1.337, )
                            ], 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        time_grain = '', )
                    ]
            )
        else:
            return PlansListMetrics200Response(
        )
        """

    def testPlansListMetrics200Response(self):
        """Test PlansListMetrics200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BlockchainManagementClient

    REST API for Azure Blockchain Service

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.firewall_rule import FirewallRule
from typing import Optional, Set
from typing_extensions import Self

class TransactionNodeProperties(BaseModel):
    """
    Payload of transaction node properties payload in the transaction node payload.
    """ # noqa: E501
    dns: Optional[StrictStr] = Field(default=None, description="Gets or sets the transaction node dns endpoint.")
    firewall_rules: Optional[List[FirewallRule]] = Field(default=None, description="Gets or sets the firewall rules.", alias="firewallRules")
    password: Optional[StrictStr] = Field(default=None, description="Sets the transaction node dns endpoint basic auth password.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets the blockchain member provision state.", alias="provisioningState")
    public_key: Optional[StrictStr] = Field(default=None, description="Gets or sets the transaction node public key.", alias="publicKey")
    user_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the transaction node dns endpoint basic auth user name.", alias="userName")
    __properties: ClassVar[List[str]] = ["dns", "firewallRules", "password", "provisioningState", "publicKey", "userName"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSpecified', 'Updating', 'Deleting', 'Succeeded', 'Failed']):
            raise ValueError("must be one of enum values ('NotSpecified', 'Updating', 'Deleting', 'Succeeded', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionNodeProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "dns",
            "provisioning_state",
            "public_key",
            "user_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in firewall_rules (list)
        _items = []
        if self.firewall_rules:
            for _item_firewall_rules in self.firewall_rules:
                if _item_firewall_rules:
                    _items.append(_item_firewall_rules.to_dict())
            _dict['firewallRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionNodeProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dns": obj.get("dns"),
            "firewallRules": [FirewallRule.from_dict(_item) for _item in obj["firewallRules"]] if obj.get("firewallRules") is not None else None,
            "password": obj.get("password"),
            "provisioningState": obj.get("provisioningState"),
            "publicKey": obj.get("publicKey"),
            "userName": obj.get("userName")
        })
        return _obj



# coding: utf-8

"""
    SubscriptionClient

    Subscription client provides an interface to create and manage Azure subscriptions programmatically.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_principal import AdPrincipal
from typing import Optional, Set
from typing_extensions import Self

class ModernSubscriptionCreationParameters(BaseModel):
    """
    The parameters required to create a new subscription.
    """ # noqa: E501
    cost_center: Optional[StrictStr] = Field(default=None, description="If set, the cost center will show up on the Azure usage and charges file.", alias="costCenter")
    display_name: Optional[StrictStr] = Field(default=None, description="The friendly name of the subscription.", alias="displayName")
    management_group_id: Optional[StrictStr] = Field(default=None, description="The identifier of the management group to which this subscription will be associated.", alias="managementGroupId")
    owner: Optional[AdPrincipal] = None
    sku_id: Optional[StrictStr] = Field(default=None, description="The SKU ID of the Azure plan. Azure plan determines the pricing and service-level agreement of the subscription.  Use 001 for Microsoft Azure Plan and 002 for Microsoft Azure Plan for DevTest.", alias="skuId")
    __properties: ClassVar[List[str]] = ["costCenter", "displayName", "managementGroupId", "owner", "skuId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModernSubscriptionCreationParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModernSubscriptionCreationParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "costCenter": obj.get("costCenter"),
            "displayName": obj.get("displayName"),
            "managementGroupId": obj.get("managementGroupId"),
            "owner": AdPrincipal.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "skuId": obj.get("skuId")
        })
        return _obj



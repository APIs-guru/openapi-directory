# coding: utf-8

"""
    Update Management

    APIs for managing software update configurations.

    The version of the OpenAPI document: 2017-05-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.schedule_properties import ScheduleProperties
from openapi_client.models.software_update_configuration_tasks import SoftwareUpdateConfigurationTasks
from openapi_client.models.software_update_configurations_list_default_response import SoftwareUpdateConfigurationsListDefaultResponse
from openapi_client.models.update_configuration import UpdateConfiguration
from typing import Optional, Set
from typing_extensions import Self

class SoftwareUpdateConfigurationProperties(BaseModel):
    """
    Software update configuration properties.
    """ # noqa: E501
    created_by: Optional[StrictStr] = Field(default=None, description="CreatedBy property, which only appears in the response.", alias="createdBy")
    creation_time: Optional[datetime] = Field(default=None, description="Creation time of the resource, which only appears in the response.", alias="creationTime")
    error: Optional[SoftwareUpdateConfigurationsListDefaultResponse] = None
    last_modified_by: Optional[StrictStr] = Field(default=None, description="LastModifiedBy property, which only appears in the response.", alias="lastModifiedBy")
    last_modified_time: Optional[datetime] = Field(default=None, description="Last time resource was modified, which only appears in the response.", alias="lastModifiedTime")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state for the software update configuration, which only appears in the response.", alias="provisioningState")
    schedule_info: ScheduleProperties = Field(alias="scheduleInfo")
    tasks: Optional[SoftwareUpdateConfigurationTasks] = None
    update_configuration: UpdateConfiguration = Field(alias="updateConfiguration")
    __properties: ClassVar[List[str]] = ["createdBy", "creationTime", "error", "lastModifiedBy", "lastModifiedTime", "provisioningState", "scheduleInfo", "tasks", "updateConfiguration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareUpdateConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_by",
            "creation_time",
            "last_modified_by",
            "last_modified_time",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_info
        if self.schedule_info:
            _dict['scheduleInfo'] = self.schedule_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tasks
        if self.tasks:
            _dict['tasks'] = self.tasks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_configuration
        if self.update_configuration:
            _dict['updateConfiguration'] = self.update_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareUpdateConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdBy": obj.get("createdBy"),
            "creationTime": obj.get("creationTime"),
            "error": SoftwareUpdateConfigurationsListDefaultResponse.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "provisioningState": obj.get("provisioningState"),
            "scheduleInfo": ScheduleProperties.from_dict(obj["scheduleInfo"]) if obj.get("scheduleInfo") is not None else None,
            "tasks": SoftwareUpdateConfigurationTasks.from_dict(obj["tasks"]) if obj.get("tasks") is not None else None,
            "updateConfiguration": UpdateConfiguration.from_dict(obj["updateConfiguration"]) if obj.get("updateConfiguration") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Update Management

    APIs for managing software update configurations.

    The version of the OpenAPI document: 2017-05-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.collection_item_update_configuration import CollectionItemUpdateConfiguration
from typing import Optional, Set
from typing_extensions import Self

class SoftwareUpdateConfigurationCollectionItemProperties(BaseModel):
    """
    Software update configuration collection item properties.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="Creation time of the software update configuration, which only appears in the response.", alias="creationTime")
    frequency: Optional[StrictStr] = Field(default=None, description="Gets or sets the frequency of the schedule.")
    last_modified_time: Optional[datetime] = Field(default=None, description="Last time software update configuration was modified, which only appears in the response.", alias="lastModifiedTime")
    next_run: Optional[datetime] = Field(default=None, description="ext run time of the update.", alias="nextRun")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state for the software update configuration, which only appears in the response.", alias="provisioningState")
    start_time: Optional[datetime] = Field(default=None, description="the start time of the update.", alias="startTime")
    update_configuration: Optional[CollectionItemUpdateConfiguration] = Field(default=None, alias="updateConfiguration")
    __properties: ClassVar[List[str]] = ["creationTime", "frequency", "lastModifiedTime", "nextRun", "provisioningState", "startTime", "updateConfiguration"]

    @field_validator('frequency')
    def frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OneTime', 'Day', 'Hour', 'Week', 'Month', 'Minute']):
            raise ValueError("must be one of enum values ('OneTime', 'Day', 'Hour', 'Week', 'Month', 'Minute')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareUpdateConfigurationCollectionItemProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "last_modified_time",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of update_configuration
        if self.update_configuration:
            _dict['updateConfiguration'] = self.update_configuration.to_dict()
        # set to None if next_run (nullable) is None
        # and model_fields_set contains the field
        if self.next_run is None and "next_run" in self.model_fields_set:
            _dict['nextRun'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareUpdateConfigurationCollectionItemProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "frequency": obj.get("frequency"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "nextRun": obj.get("nextRun"),
            "provisioningState": obj.get("provisioningState"),
            "startTime": obj.get("startTime"),
            "updateConfiguration": CollectionItemUpdateConfiguration.from_dict(obj["updateConfiguration"]) if obj.get("updateConfiguration") is not None else None
        })
        return _obj



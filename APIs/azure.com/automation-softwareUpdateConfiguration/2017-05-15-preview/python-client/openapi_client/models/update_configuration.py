# coding: utf-8

"""
    Update Management

    APIs for managing software update configurations.

    The version of the OpenAPI document: 2017-05-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.linux_properties import LinuxProperties
from openapi_client.models.operating_system_type import OperatingSystemType
from openapi_client.models.target_properties import TargetProperties
from openapi_client.models.windows_properties import WindowsProperties
from typing import Optional, Set
from typing_extensions import Self

class UpdateConfiguration(BaseModel):
    """
    Update specific properties of the software update configuration.
    """ # noqa: E501
    azure_virtual_machines: Optional[List[StrictStr]] = Field(default=None, description="List of azure resource Ids for azure virtual machines targeted by the software update configuration.", alias="azureVirtualMachines")
    duration: Optional[StrictStr] = Field(default=None, description="Maximum time allowed for the software update configuration run. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601")
    linux: Optional[LinuxProperties] = None
    non_azure_computer_names: Optional[List[StrictStr]] = Field(default=None, description="List of names of non-azure machines targeted by the software update configuration.", alias="nonAzureComputerNames")
    operating_system: OperatingSystemType = Field(alias="operatingSystem")
    targets: Optional[TargetProperties] = None
    windows: Optional[WindowsProperties] = None
    __properties: ClassVar[List[str]] = ["azureVirtualMachines", "duration", "linux", "nonAzureComputerNames", "operatingSystem", "targets", "windows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of linux
        if self.linux:
            _dict['linux'] = self.linux.to_dict()
        # override the default output from pydantic by calling `to_dict()` of targets
        if self.targets:
            _dict['targets'] = self.targets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows
        if self.windows:
            _dict['windows'] = self.windows.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureVirtualMachines": obj.get("azureVirtualMachines"),
            "duration": obj.get("duration"),
            "linux": LinuxProperties.from_dict(obj["linux"]) if obj.get("linux") is not None else None,
            "nonAzureComputerNames": obj.get("nonAzureComputerNames"),
            "operatingSystem": obj.get("operatingSystem"),
            "targets": TargetProperties.from_dict(obj["targets"]) if obj.get("targets") is not None else None,
            "windows": WindowsProperties.from_dict(obj["windows"]) if obj.get("windows") is not None else None
        })
        return _obj



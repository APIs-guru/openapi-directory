# coding: utf-8

"""
    Update Management

    APIs for managing software update configurations.

    The version of the OpenAPI document: 2017-05-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.software_update_configuration import SoftwareUpdateConfiguration

class TestSoftwareUpdateConfiguration(unittest.TestCase):
    """SoftwareUpdateConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SoftwareUpdateConfiguration:
        """Test SoftwareUpdateConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SoftwareUpdateConfiguration`
        """
        model = SoftwareUpdateConfiguration()
        if include_optional:
            return SoftwareUpdateConfiguration(
                id = '',
                name = '',
                properties = openapi_client.models.software_update_configuration_properties.softwareUpdateConfigurationProperties(
                    created_by = '', 
                    creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error = openapi_client.models.software_update_configurations_list_default_response.SoftwareUpdateConfigurations_List_default_response(
                        code = '', 
                        message = '', ), 
                    last_modified_by = '', 
                    last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    provisioning_state = '', 
                    schedule_info = openapi_client.models.schedule_properties.ScheduleProperties(
                        advanced_schedule = openapi_client.models.advanced_schedule.AdvancedSchedule(
                            month_days = [
                                56
                                ], 
                            monthly_occurrences = [
                                openapi_client.models.advanced_schedule_monthly_occurrence.AdvancedScheduleMonthlyOccurrence(
                                    day = 'Monday', 
                                    occurrence = 56, )
                                ], 
                            week_days = [
                                ''
                                ], ), 
                        creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        description = '', 
                        expiry_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiry_time_offset_minutes = 1.337, 
                        frequency = 'OneTime', 
                        interval = 56, 
                        is_enabled = True, 
                        last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        next_run = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        next_run_offset_minutes = 1.337, 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_time_offset_minutes = 1.337, 
                        time_zone = '', ), 
                    tasks = openapi_client.models.software_update_configuration_tasks.softwareUpdateConfigurationTasks(
                        post_task = openapi_client.models.task_properties.taskProperties(
                            parameters = {
                                'key' : ''
                                }, 
                            source = '', ), 
                        pre_task = openapi_client.models.task_properties.taskProperties(
                            source = '', ), ), 
                    update_configuration = openapi_client.models.update_configuration.updateConfiguration(
                        azure_virtual_machines = [
                            ''
                            ], 
                        duration = '', 
                        linux = openapi_client.models.linux_properties.LinuxProperties(
                            excluded_package_name_masks = [
                                ''
                                ], 
                            included_package_classifications = 'Unclassified', 
                            included_package_name_masks = [
                                ''
                                ], 
                            reboot_setting = '', ), 
                        non_azure_computer_names = [
                            ''
                            ], 
                        operating_system = 'Windows', 
                        targets = openapi_client.models.target_properties.TargetProperties(
                            azure_queries = [
                                openapi_client.models.azure_query_properties.AzureQueryProperties(
                                    locations = [
                                        ''
                                        ], 
                                    scope = [
                                        ''
                                        ], 
                                    tag_settings = openapi_client.models.tag_settings_properties.TagSettingsProperties(
                                        filter_operator = 'All', 
                                        tags = {
                                            'key' : [
                                                ''
                                                ]
                                            }, ), )
                                ], 
                            non_azure_queries = [
                                openapi_client.models.non_azure_query_properties.NonAzureQueryProperties(
                                    function_alias = '', 
                                    workspace_id = '', )
                                ], ), 
                        windows = openapi_client.models.windows_properties.WindowsProperties(
                            excluded_kb_numbers = [
                                ''
                                ], 
                            included_kb_numbers = [
                                ''
                                ], 
                            included_update_classifications = 'Unclassified', 
                            reboot_setting = '', ), ), ),
                type = ''
            )
        else:
            return SoftwareUpdateConfiguration(
                properties = openapi_client.models.software_update_configuration_properties.softwareUpdateConfigurationProperties(
                    created_by = '', 
                    creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error = openapi_client.models.software_update_configurations_list_default_response.SoftwareUpdateConfigurations_List_default_response(
                        code = '', 
                        message = '', ), 
                    last_modified_by = '', 
                    last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    provisioning_state = '', 
                    schedule_info = openapi_client.models.schedule_properties.ScheduleProperties(
                        advanced_schedule = openapi_client.models.advanced_schedule.AdvancedSchedule(
                            month_days = [
                                56
                                ], 
                            monthly_occurrences = [
                                openapi_client.models.advanced_schedule_monthly_occurrence.AdvancedScheduleMonthlyOccurrence(
                                    day = 'Monday', 
                                    occurrence = 56, )
                                ], 
                            week_days = [
                                ''
                                ], ), 
                        creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        description = '', 
                        expiry_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiry_time_offset_minutes = 1.337, 
                        frequency = 'OneTime', 
                        interval = 56, 
                        is_enabled = True, 
                        last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        next_run = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        next_run_offset_minutes = 1.337, 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_time_offset_minutes = 1.337, 
                        time_zone = '', ), 
                    tasks = openapi_client.models.software_update_configuration_tasks.softwareUpdateConfigurationTasks(
                        post_task = openapi_client.models.task_properties.taskProperties(
                            parameters = {
                                'key' : ''
                                }, 
                            source = '', ), 
                        pre_task = openapi_client.models.task_properties.taskProperties(
                            source = '', ), ), 
                    update_configuration = openapi_client.models.update_configuration.updateConfiguration(
                        azure_virtual_machines = [
                            ''
                            ], 
                        duration = '', 
                        linux = openapi_client.models.linux_properties.LinuxProperties(
                            excluded_package_name_masks = [
                                ''
                                ], 
                            included_package_classifications = 'Unclassified', 
                            included_package_name_masks = [
                                ''
                                ], 
                            reboot_setting = '', ), 
                        non_azure_computer_names = [
                            ''
                            ], 
                        operating_system = 'Windows', 
                        targets = openapi_client.models.target_properties.TargetProperties(
                            azure_queries = [
                                openapi_client.models.azure_query_properties.AzureQueryProperties(
                                    locations = [
                                        ''
                                        ], 
                                    scope = [
                                        ''
                                        ], 
                                    tag_settings = openapi_client.models.tag_settings_properties.TagSettingsProperties(
                                        filter_operator = 'All', 
                                        tags = {
                                            'key' : [
                                                ''
                                                ]
                                            }, ), )
                                ], 
                            non_azure_queries = [
                                openapi_client.models.non_azure_query_properties.NonAzureQueryProperties(
                                    function_alias = '', 
                                    workspace_id = '', )
                                ], ), 
                        windows = openapi_client.models.windows_properties.WindowsProperties(
                            excluded_kb_numbers = [
                                ''
                                ], 
                            included_kb_numbers = [
                                ''
                                ], 
                            included_update_classifications = 'Unclassified', 
                            reboot_setting = '', ), ), ),
        )
        """

    def testSoftwareUpdateConfiguration(self):
        """Test SoftwareUpdateConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

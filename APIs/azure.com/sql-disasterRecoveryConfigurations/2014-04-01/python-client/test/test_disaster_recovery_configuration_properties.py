# coding: utf-8

"""
    Azure SQL Database disaster recovery configurations

    Provides create, read, update, delete, and failover functionality for Azure SQL Database disaster recovery configurations.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.disaster_recovery_configuration_properties import DisasterRecoveryConfigurationProperties

class TestDisasterRecoveryConfigurationProperties(unittest.TestCase):
    """DisasterRecoveryConfigurationProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DisasterRecoveryConfigurationProperties:
        """Test DisasterRecoveryConfigurationProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DisasterRecoveryConfigurationProperties`
        """
        model = DisasterRecoveryConfigurationProperties()
        if include_optional:
            return DisasterRecoveryConfigurationProperties(
                auto_failover = 'Off',
                failover_policy = 'Manual',
                logical_server_name = '',
                partner_logical_server_name = '',
                partner_server_id = '',
                role = 'None',
                status = 'Creating'
            )
        else:
            return DisasterRecoveryConfigurationProperties(
                auto_failover = 'Off',
                failover_policy = 'Manual',
                partner_server_id = '',
        )
        """

    def testDisasterRecoveryConfigurationProperties(self):
        """Test DisasterRecoveryConfigurationProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

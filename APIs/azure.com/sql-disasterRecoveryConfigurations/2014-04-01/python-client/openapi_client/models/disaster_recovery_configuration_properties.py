# coding: utf-8

"""
    Azure SQL Database disaster recovery configurations

    Provides create, read, update, delete, and failover functionality for Azure SQL Database disaster recovery configurations.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DisasterRecoveryConfigurationProperties(BaseModel):
    """
    Represents the properties of a disaster recovery configuration.
    """ # noqa: E501
    auto_failover: StrictStr = Field(description="Whether or not failover can be done automatically.", alias="autoFailover")
    failover_policy: StrictStr = Field(description="How aggressive the automatic failover should be.", alias="failoverPolicy")
    logical_server_name: Optional[StrictStr] = Field(default=None, description="Logical name of the server.", alias="logicalServerName")
    partner_logical_server_name: Optional[StrictStr] = Field(default=None, description="Logical name of the partner server.", alias="partnerLogicalServerName")
    partner_server_id: StrictStr = Field(description="Id of the partner server.", alias="partnerServerId")
    role: Optional[StrictStr] = Field(default=None, description="The role of the current server in the disaster recovery configuration.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the disaster recovery configuration.")
    __properties: ClassVar[List[str]] = ["autoFailover", "failoverPolicy", "logicalServerName", "partnerLogicalServerName", "partnerServerId", "role", "status"]

    @field_validator('auto_failover')
    def auto_failover_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Off', 'On']):
            raise ValueError("must be one of enum values ('Off', 'On')")
        return value

    @field_validator('failover_policy')
    def failover_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Manual', 'Automatic']):
            raise ValueError("must be one of enum values ('Manual', 'Automatic')")
        return value

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Primary', 'Secondary']):
            raise ValueError("must be one of enum values ('None', 'Primary', 'Secondary')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Ready', 'FailingOver', 'Dropping']):
            raise ValueError("must be one of enum values ('Creating', 'Ready', 'FailingOver', 'Dropping')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DisasterRecoveryConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "logical_server_name",
            "partner_logical_server_name",
            "role",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DisasterRecoveryConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoFailover": obj.get("autoFailover"),
            "failoverPolicy": obj.get("failoverPolicy"),
            "logicalServerName": obj.get("logicalServerName"),
            "partnerLogicalServerName": obj.get("partnerLogicalServerName"),
            "partnerServerId": obj.get("partnerServerId"),
            "role": obj.get("role"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Storage Cache Mgmt Client

    A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.

    The version of the OpenAPI document: 2019-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.clfs_target import ClfsTarget
from openapi_client.models.namespace_junction import NamespaceJunction
from openapi_client.models.nfs3_target import Nfs3Target
from openapi_client.models.unknown_target import UnknownTarget
from typing import Optional, Set
from typing_extensions import Self

class StorageTargetProperties(BaseModel):
    """
    Properties of the storage target.
    """ # noqa: E501
    clfs: Optional[ClfsTarget] = None
    junctions: Optional[List[NamespaceJunction]] = Field(default=None, description="List of cache namespace to target namespace associations.")
    nfs3: Optional[Nfs3Target] = None
    provisioning_state: Optional[StrictStr] = Field(default=None, description="ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property", alias="provisioningState")
    target_type: Optional[StrictStr] = Field(default=None, description="Type for storage target.", alias="targetType")
    unknown: Optional[UnknownTarget] = None
    __properties: ClassVar[List[str]] = ["clfs", "junctions", "nfs3", "provisioningState", "targetType", "unknown"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating']):
            raise ValueError("must be one of enum values ('Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating')")
        return value

    @field_validator('target_type')
    def target_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['nfs3', 'clfs', 'unknown']):
            raise ValueError("must be one of enum values ('nfs3', 'clfs', 'unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageTargetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clfs
        if self.clfs:
            _dict['clfs'] = self.clfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in junctions (list)
        _items = []
        if self.junctions:
            for _item_junctions in self.junctions:
                if _item_junctions:
                    _items.append(_item_junctions.to_dict())
            _dict['junctions'] = _items
        # override the default output from pydantic by calling `to_dict()` of nfs3
        if self.nfs3:
            _dict['nfs3'] = self.nfs3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unknown
        if self.unknown:
            _dict['unknown'] = self.unknown.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageTargetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clfs": ClfsTarget.from_dict(obj["clfs"]) if obj.get("clfs") is not None else None,
            "junctions": [NamespaceJunction.from_dict(_item) for _item in obj["junctions"]] if obj.get("junctions") is not None else None,
            "nfs3": Nfs3Target.from_dict(obj["nfs3"]) if obj.get("nfs3") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "targetType": obj.get("targetType"),
            "unknown": UnknownTarget.from_dict(obj["unknown"]) if obj.get("unknown") is not None else None
        })
        return _obj



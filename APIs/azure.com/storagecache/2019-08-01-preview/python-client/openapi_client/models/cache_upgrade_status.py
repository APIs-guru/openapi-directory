# coding: utf-8

"""
    Storage Cache Mgmt Client

    A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.

    The version of the OpenAPI document: 2019-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CacheUpgradeStatus(BaseModel):
    """
    Properties describing the software upgrade state of the cache
    """ # noqa: E501
    current_firmware_version: Optional[StrictStr] = Field(default=None, description="Version string of the firmware currently installed on this cache.", alias="currentFirmwareVersion")
    firmware_update_deadline: Optional[datetime] = Field(default=None, description="Time at which the pending firmware update will automatically be installed on the cache.", alias="firmwareUpdateDeadline")
    firmware_update_status: Optional[StrictStr] = Field(default=None, description="True if there is a firmware update ready to install on this cache.  The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.", alias="firmwareUpdateStatus")
    last_firmware_update: Optional[datetime] = Field(default=None, description="Time of the last successful firmware update.", alias="lastFirmwareUpdate")
    pending_firmware_version: Optional[StrictStr] = Field(default=None, description="When firmwareUpdateAvailable is true, this field holds the version string for the update.", alias="pendingFirmwareVersion")
    __properties: ClassVar[List[str]] = ["currentFirmwareVersion", "firmwareUpdateDeadline", "firmwareUpdateStatus", "lastFirmwareUpdate", "pendingFirmwareVersion"]

    @field_validator('firmware_update_status')
    def firmware_update_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['available', 'unavailable']):
            raise ValueError("must be one of enum values ('available', 'unavailable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CacheUpgradeStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "current_firmware_version",
            "firmware_update_deadline",
            "firmware_update_status",
            "last_firmware_update",
            "pending_firmware_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CacheUpgradeStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentFirmwareVersion": obj.get("currentFirmwareVersion"),
            "firmwareUpdateDeadline": obj.get("firmwareUpdateDeadline"),
            "firmwareUpdateStatus": obj.get("firmwareUpdateStatus"),
            "lastFirmwareUpdate": obj.get("lastFirmwareUpdate"),
            "pendingFirmwareVersion": obj.get("pendingFirmwareVersion")
        })
        return _obj



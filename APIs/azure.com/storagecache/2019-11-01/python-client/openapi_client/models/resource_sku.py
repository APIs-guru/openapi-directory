# coding: utf-8

"""
    Storage Cache Mgmt Client

    A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_sku_capabilities import ResourceSkuCapabilities
from openapi_client.models.resource_sku_location_info import ResourceSkuLocationInfo
from openapi_client.models.restriction import Restriction
from typing import Optional, Set
from typing_extensions import Self

class ResourceSku(BaseModel):
    """
    A resource SKU.
    """ # noqa: E501
    capabilities: Optional[List[ResourceSkuCapabilities]] = Field(default=None, description="A list of capabilities of this SKU, such as throughput or ops/sec.")
    location_info: Optional[List[ResourceSkuLocationInfo]] = Field(default=None, description="The set of locations that the SKU is available.", alias="locationInfo")
    locations: Optional[List[StrictStr]] = Field(default=None, description="The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g., West US, East US, Southeast Asia, etc.).")
    name: Optional[StrictStr] = Field(default=None, description="The name of this SKU.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The type of resource the SKU applies to.", alias="resourceType")
    restrictions: Optional[List[Restriction]] = Field(default=None, description="The restrictions preventing this SKU from being used. This is empty if there are no restrictions.")
    __properties: ClassVar[List[str]] = ["capabilities", "locationInfo", "locations", "name", "resourceType", "restrictions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceSku from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "locations",
            "resource_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in capabilities (list)
        _items = []
        if self.capabilities:
            for _item_capabilities in self.capabilities:
                if _item_capabilities:
                    _items.append(_item_capabilities.to_dict())
            _dict['capabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in location_info (list)
        _items = []
        if self.location_info:
            for _item_location_info in self.location_info:
                if _item_location_info:
                    _items.append(_item_location_info.to_dict())
            _dict['locationInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item_restrictions in self.restrictions:
                if _item_restrictions:
                    _items.append(_item_restrictions.to_dict())
            _dict['restrictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceSku from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": [ResourceSkuCapabilities.from_dict(_item) for _item in obj["capabilities"]] if obj.get("capabilities") is not None else None,
            "locationInfo": [ResourceSkuLocationInfo.from_dict(_item) for _item in obj["locationInfo"]] if obj.get("locationInfo") is not None else None,
            "locations": obj.get("locations"),
            "name": obj.get("name"),
            "resourceType": obj.get("resourceType"),
            "restrictions": [Restriction.from_dict(_item) for _item in obj["restrictions"]] if obj.get("restrictions") is not None else None
        })
        return _obj



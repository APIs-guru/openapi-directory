# coding: utf-8

"""
    Storage Cache Mgmt Client

    A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cache_health import CacheHealth
from openapi_client.models.cache_upgrade_status import CacheUpgradeStatus
from typing import Optional, Set
from typing_extensions import Self

class CacheProperties(BaseModel):
    """
    Properties of the Cache.
    """ # noqa: E501
    cache_size_gb: Optional[StrictInt] = Field(default=None, description="The size of this Cache, in GB.", alias="cacheSizeGB")
    health: Optional[CacheHealth] = None
    mount_addresses: Optional[List[StrictStr]] = Field(default=None, description="Array of IP addresses that can be used by clients mounting this Cache.", alias="mountAddresses")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property", alias="provisioningState")
    subnet: Optional[StrictStr] = Field(default=None, description="A fully qualified URL.")
    upgrade_status: Optional[CacheUpgradeStatus] = Field(default=None, alias="upgradeStatus")
    __properties: ClassVar[List[str]] = ["cacheSizeGB", "health", "mountAddresses", "provisioningState", "subnet", "upgradeStatus"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating']):
            raise ValueError("must be one of enum values ('Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CacheProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "mount_addresses",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of health
        if self.health:
            _dict['health'] = self.health.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_status
        if self.upgrade_status:
            _dict['upgradeStatus'] = self.upgrade_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CacheProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacheSizeGB": obj.get("cacheSizeGB"),
            "health": CacheHealth.from_dict(obj["health"]) if obj.get("health") is not None else None,
            "mountAddresses": obj.get("mountAddresses"),
            "provisioningState": obj.get("provisioningState"),
            "subnet": obj.get("subnet"),
            "upgradeStatus": CacheUpgradeStatus.from_dict(obj["upgradeStatus"]) if obj.get("upgradeStatus") is not None else None
        })
        return _obj



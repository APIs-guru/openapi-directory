# coding: utf-8

"""
    Storage Cache Mgmt Client

    A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cache import Cache

class TestCache(unittest.TestCase):
    """Cache unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Cache:
        """Test Cache
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Cache`
        """
        model = Cache()
        if include_optional:
            return Cache(
                id = '',
                location = '',
                name = 'zBAMDTMv2D2y',
                properties = openapi_client.models.cache_properties.Cache_properties(
                    cache_size_gb = 56, 
                    health = openapi_client.models.cache_health.CacheHealth(
                        state = 'Unknown', 
                        status_description = '', ), 
                    mount_addresses = [
                        ''
                        ], 
                    provisioning_state = 'Succeeded', 
                    subnet = '', 
                    upgrade_status = openapi_client.models.cache_upgrade_status.CacheUpgradeStatus(
                        current_firmware_version = '', 
                        firmware_update_deadline = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        firmware_update_status = 'available', 
                        last_firmware_update = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        pending_firmware_version = '', ), ),
                sku = openapi_client.models.cache_sku.Cache_sku(
                    name = '', ),
                tags = None,
                type = ''
            )
        else:
            return Cache(
        )
        """

    def testCache(self):
        """Test Cache"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Storage Cache Mgmt Client

    A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.storage_target import StorageTarget

class TestStorageTarget(unittest.TestCase):
    """StorageTarget unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StorageTarget:
        """Test StorageTarget
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StorageTarget`
        """
        model = StorageTarget()
        if include_optional:
            return StorageTarget(
                id = '',
                name = 'zBAMDTMv2D2y',
                properties = openapi_client.models.storage_target_properties.StorageTarget_properties(
                    clfs = openapi_client.models.clfs_target.ClfsTarget(
                        target = '', ), 
                    junctions = [
                        openapi_client.models.namespace_junction.NamespaceJunction(
                            namespace_path = '', 
                            nfs_export = '', 
                            target_path = '', )
                        ], 
                    nfs3 = openapi_client.models.nfs3_target.Nfs3Target(
                        target = 'z', 
                        usage_model = '', ), 
                    provisioning_state = 'Succeeded', 
                    target_type = 'nfs3', 
                    unknown = openapi_client.models.unknown_target.UnknownTarget(
                        unknown_map = {
                            'key' : ''
                            }, ), ),
                type = ''
            )
        else:
            return StorageTarget(
        )
        """

    def testStorageTarget(self):
        """Test StorageTarget"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

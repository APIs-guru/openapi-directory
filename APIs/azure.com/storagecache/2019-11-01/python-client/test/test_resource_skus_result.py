# coding: utf-8

"""
    Storage Cache Mgmt Client

    A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.resource_skus_result import ResourceSkusResult

class TestResourceSkusResult(unittest.TestCase):
    """ResourceSkusResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResourceSkusResult:
        """Test ResourceSkusResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResourceSkusResult`
        """
        model = ResourceSkusResult()
        if include_optional:
            return ResourceSkusResult(
                next_link = '',
                value = [
                    openapi_client.models.resource_sku.ResourceSku(
                        capabilities = [
                            openapi_client.models.resource_sku_capabilities.ResourceSkuCapabilities(
                                name = '', 
                                value = '', )
                            ], 
                        location_info = [
                            openapi_client.models.resource_sku_location_info.ResourceSkuLocationInfo(
                                location = '', 
                                zones = [
                                    ''
                                    ], )
                            ], 
                        locations = [
                            ''
                            ], 
                        name = '', 
                        resource_type = '', 
                        restrictions = [
                            openapi_client.models.restriction.Restriction(
                                reason_code = 'QuotaId', 
                                type = '', 
                                values = [
                                    ''
                                    ], )
                            ], )
                    ]
            )
        else:
            return ResourceSkusResult(
        )
        """

    def testResourceSkusResult(self):
        """Test ResourceSkusResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

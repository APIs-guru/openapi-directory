# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2015-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_get_endpoint import ApplicationGetEndpoint
from openapi_client.models.application_get_https_endpoint import ApplicationGetHttpsEndpoint
from openapi_client.models.application_properties_compute_profile import ApplicationPropertiesComputeProfile
from openapi_client.models.application_properties_errors_inner import ApplicationPropertiesErrorsInner
from openapi_client.models.application_properties_install_script_actions_inner import ApplicationPropertiesInstallScriptActionsInner
from typing import Optional, Set
from typing_extensions import Self

class ApplicationProperties(BaseModel):
    """
    The HDInsight cluster application GET response.
    """ # noqa: E501
    application_state: Optional[StrictStr] = Field(default=None, description="The application state.", alias="applicationState")
    application_type: Optional[StrictStr] = Field(default=None, description="The application type.", alias="applicationType")
    compute_profile: Optional[ApplicationPropertiesComputeProfile] = Field(default=None, alias="computeProfile")
    created_date: Optional[StrictStr] = Field(default=None, description="The application create date time.", alias="createdDate")
    errors: Optional[List[ApplicationPropertiesErrorsInner]] = Field(default=None, description="The list of errors.")
    https_endpoints: Optional[List[ApplicationGetHttpsEndpoint]] = Field(default=None, description="The list of application HTTPS endpoints.", alias="httpsEndpoints")
    install_script_actions: Optional[List[ApplicationPropertiesInstallScriptActionsInner]] = Field(default=None, description="The list of install script actions.", alias="installScriptActions")
    marketplace_identifier: Optional[StrictStr] = Field(default=None, description="The marketplace identifier.", alias="marketplaceIdentifier")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the application.", alias="provisioningState")
    ssh_endpoints: Optional[List[ApplicationGetEndpoint]] = Field(default=None, description="The list of application SSH endpoints.", alias="sshEndpoints")
    uninstall_script_actions: Optional[List[ApplicationPropertiesInstallScriptActionsInner]] = Field(default=None, description="The list of uninstall script actions.", alias="uninstallScriptActions")
    __properties: ClassVar[List[str]] = ["applicationState", "applicationType", "computeProfile", "createdDate", "errors", "httpsEndpoints", "installScriptActions", "marketplaceIdentifier", "provisioningState", "sshEndpoints", "uninstallScriptActions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "application_state",
            "created_date",
            "marketplace_identifier",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compute_profile
        if self.compute_profile:
            _dict['computeProfile'] = self.compute_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in https_endpoints (list)
        _items = []
        if self.https_endpoints:
            for _item_https_endpoints in self.https_endpoints:
                if _item_https_endpoints:
                    _items.append(_item_https_endpoints.to_dict())
            _dict['httpsEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in install_script_actions (list)
        _items = []
        if self.install_script_actions:
            for _item_install_script_actions in self.install_script_actions:
                if _item_install_script_actions:
                    _items.append(_item_install_script_actions.to_dict())
            _dict['installScriptActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ssh_endpoints (list)
        _items = []
        if self.ssh_endpoints:
            for _item_ssh_endpoints in self.ssh_endpoints:
                if _item_ssh_endpoints:
                    _items.append(_item_ssh_endpoints.to_dict())
            _dict['sshEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in uninstall_script_actions (list)
        _items = []
        if self.uninstall_script_actions:
            for _item_uninstall_script_actions in self.uninstall_script_actions:
                if _item_uninstall_script_actions:
                    _items.append(_item_uninstall_script_actions.to_dict())
            _dict['uninstallScriptActions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationState": obj.get("applicationState"),
            "applicationType": obj.get("applicationType"),
            "computeProfile": ApplicationPropertiesComputeProfile.from_dict(obj["computeProfile"]) if obj.get("computeProfile") is not None else None,
            "createdDate": obj.get("createdDate"),
            "errors": [ApplicationPropertiesErrorsInner.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "httpsEndpoints": [ApplicationGetHttpsEndpoint.from_dict(_item) for _item in obj["httpsEndpoints"]] if obj.get("httpsEndpoints") is not None else None,
            "installScriptActions": [ApplicationPropertiesInstallScriptActionsInner.from_dict(_item) for _item in obj["installScriptActions"]] if obj.get("installScriptActions") is not None else None,
            "marketplaceIdentifier": obj.get("marketplaceIdentifier"),
            "provisioningState": obj.get("provisioningState"),
            "sshEndpoints": [ApplicationGetEndpoint.from_dict(_item) for _item in obj["sshEndpoints"]] if obj.get("sshEndpoints") is not None else None,
            "uninstallScriptActions": [ApplicationPropertiesInstallScriptActionsInner.from_dict(_item) for _item in obj["uninstallScriptActions"]] if obj.get("uninstallScriptActions") is not None else None
        })
        return _obj



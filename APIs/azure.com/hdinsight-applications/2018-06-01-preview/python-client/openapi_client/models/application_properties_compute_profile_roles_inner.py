# coding: utf-8

"""
    HDInsightManagementClient

    The HDInsight Management Client.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_properties_compute_profile_roles_inner_autoscale import ApplicationPropertiesComputeProfileRolesInnerAutoscale
from openapi_client.models.application_properties_compute_profile_roles_inner_data_disks_groups_inner import ApplicationPropertiesComputeProfileRolesInnerDataDisksGroupsInner
from openapi_client.models.application_properties_compute_profile_roles_inner_hardware_profile import ApplicationPropertiesComputeProfileRolesInnerHardwareProfile
from openapi_client.models.application_properties_compute_profile_roles_inner_os_profile import ApplicationPropertiesComputeProfileRolesInnerOsProfile
from openapi_client.models.application_properties_compute_profile_roles_inner_script_actions_inner import ApplicationPropertiesComputeProfileRolesInnerScriptActionsInner
from openapi_client.models.application_properties_compute_profile_roles_inner_virtual_network_profile import ApplicationPropertiesComputeProfileRolesInnerVirtualNetworkProfile
from typing import Optional, Set
from typing_extensions import Self

class ApplicationPropertiesComputeProfileRolesInner(BaseModel):
    """
    Describes a role on the cluster.
    """ # noqa: E501
    autoscale: Optional[ApplicationPropertiesComputeProfileRolesInnerAutoscale] = None
    data_disks_groups: Optional[List[ApplicationPropertiesComputeProfileRolesInnerDataDisksGroupsInner]] = Field(default=None, description="The data disks groups for the role.", alias="dataDisksGroups")
    hardware_profile: Optional[ApplicationPropertiesComputeProfileRolesInnerHardwareProfile] = Field(default=None, alias="hardwareProfile")
    min_instance_count: Optional[StrictInt] = Field(default=None, description="The minimum instance count of the cluster.", alias="minInstanceCount")
    name: Optional[StrictStr] = Field(default=None, description="The name of the role.")
    os_profile: Optional[ApplicationPropertiesComputeProfileRolesInnerOsProfile] = Field(default=None, alias="osProfile")
    script_actions: Optional[List[ApplicationPropertiesComputeProfileRolesInnerScriptActionsInner]] = Field(default=None, description="The list of script actions on the role.", alias="scriptActions")
    target_instance_count: Optional[StrictInt] = Field(default=None, description="The instance count of the cluster.", alias="targetInstanceCount")
    virtual_network_profile: Optional[ApplicationPropertiesComputeProfileRolesInnerVirtualNetworkProfile] = Field(default=None, alias="virtualNetworkProfile")
    __properties: ClassVar[List[str]] = ["autoscale", "dataDisksGroups", "hardwareProfile", "minInstanceCount", "name", "osProfile", "scriptActions", "targetInstanceCount", "virtualNetworkProfile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationPropertiesComputeProfileRolesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscale
        if self.autoscale:
            _dict['autoscale'] = self.autoscale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_disks_groups (list)
        _items = []
        if self.data_disks_groups:
            for _item_data_disks_groups in self.data_disks_groups:
                if _item_data_disks_groups:
                    _items.append(_item_data_disks_groups.to_dict())
            _dict['dataDisksGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of hardware_profile
        if self.hardware_profile:
            _dict['hardwareProfile'] = self.hardware_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_profile
        if self.os_profile:
            _dict['osProfile'] = self.os_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in script_actions (list)
        _items = []
        if self.script_actions:
            for _item_script_actions in self.script_actions:
                if _item_script_actions:
                    _items.append(_item_script_actions.to_dict())
            _dict['scriptActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_network_profile
        if self.virtual_network_profile:
            _dict['virtualNetworkProfile'] = self.virtual_network_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationPropertiesComputeProfileRolesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscale": ApplicationPropertiesComputeProfileRolesInnerAutoscale.from_dict(obj["autoscale"]) if obj.get("autoscale") is not None else None,
            "dataDisksGroups": [ApplicationPropertiesComputeProfileRolesInnerDataDisksGroupsInner.from_dict(_item) for _item in obj["dataDisksGroups"]] if obj.get("dataDisksGroups") is not None else None,
            "hardwareProfile": ApplicationPropertiesComputeProfileRolesInnerHardwareProfile.from_dict(obj["hardwareProfile"]) if obj.get("hardwareProfile") is not None else None,
            "minInstanceCount": obj.get("minInstanceCount"),
            "name": obj.get("name"),
            "osProfile": ApplicationPropertiesComputeProfileRolesInnerOsProfile.from_dict(obj["osProfile"]) if obj.get("osProfile") is not None else None,
            "scriptActions": [ApplicationPropertiesComputeProfileRolesInnerScriptActionsInner.from_dict(_item) for _item in obj["scriptActions"]] if obj.get("scriptActions") is not None else None,
            "targetInstanceCount": obj.get("targetInstanceCount"),
            "virtualNetworkProfile": ApplicationPropertiesComputeProfileRolesInnerVirtualNetworkProfile.from_dict(obj["virtualNetworkProfile"]) if obj.get("virtualNetworkProfile") is not None else None
        })
        return _obj



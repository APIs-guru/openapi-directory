# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cache_configuration import CacheConfiguration
from openapi_client.models.route_configuration import RouteConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ForwardingConfiguration(RouteConfiguration):
    """
    Describes Forwarding Route.
    """ # noqa: E501
    backend_pool: Optional[object] = Field(default=None, description="Reference to another subresource.", alias="backendPool")
    cache_configuration: Optional[CacheConfiguration] = Field(default=None, alias="cacheConfiguration")
    custom_forwarding_path: Optional[StrictStr] = Field(default=None, description="A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.", alias="customForwardingPath")
    forwarding_protocol: Optional[StrictStr] = Field(default=None, description="Protocol this rule will use when forwarding traffic to backends.", alias="forwardingProtocol")
    __properties: ClassVar[List[str]] = ["@odata.type"]

    @field_validator('forwarding_protocol')
    def forwarding_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HttpOnly', 'HttpsOnly', 'MatchRequest']):
            raise ValueError("must be one of enum values ('HttpOnly', 'HttpsOnly', 'MatchRequest')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ForwardingConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ForwardingConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@odata.type": obj.get("@odata.type")
        })
        return _obj



# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.header_action import HeaderAction
from openapi_client.models.route_configuration import RouteConfiguration
from typing import Optional, Set
from typing_extensions import Self

class RulesEngineAction(BaseModel):
    """
    One or more actions that will execute, modifying the request and/or response.
    """ # noqa: E501
    request_header_actions: Optional[List[HeaderAction]] = Field(default=None, description="A list of header actions to apply from the request from AFD to the origin.", alias="requestHeaderActions")
    response_header_actions: Optional[List[HeaderAction]] = Field(default=None, description="A list of header actions to apply from the response from AFD to the client.", alias="responseHeaderActions")
    route_configuration_override: Optional[RouteConfiguration] = Field(default=None, alias="routeConfigurationOverride")
    __properties: ClassVar[List[str]] = ["requestHeaderActions", "responseHeaderActions", "routeConfigurationOverride"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RulesEngineAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in request_header_actions (list)
        _items = []
        if self.request_header_actions:
            for _item_request_header_actions in self.request_header_actions:
                if _item_request_header_actions:
                    _items.append(_item_request_header_actions.to_dict())
            _dict['requestHeaderActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in response_header_actions (list)
        _items = []
        if self.response_header_actions:
            for _item_response_header_actions in self.response_header_actions:
                if _item_response_header_actions:
                    _items.append(_item_response_header_actions.to_dict())
            _dict['responseHeaderActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of route_configuration_override
        if self.route_configuration_override:
            _dict['routeConfigurationOverride'] = self.route_configuration_override.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RulesEngineAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestHeaderActions": [HeaderAction.from_dict(_item) for _item in obj["requestHeaderActions"]] if obj.get("requestHeaderActions") is not None else None,
            "responseHeaderActions": [HeaderAction.from_dict(_item) for _item in obj["responseHeaderActions"]] if obj.get("responseHeaderActions") is not None else None,
            "routeConfigurationOverride": RouteConfiguration.from_dict(obj["routeConfigurationOverride"]) if obj.get("routeConfigurationOverride") is not None else None
        })
        return _obj



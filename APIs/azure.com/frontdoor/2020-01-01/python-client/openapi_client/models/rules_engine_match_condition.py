# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.transform import Transform
from typing import Optional, Set
from typing_extensions import Self

class RulesEngineMatchCondition(BaseModel):
    """
    Define a match condition
    """ # noqa: E501
    negate_condition: Optional[StrictBool] = Field(default=None, description="Describes if this is negate condition or not", alias="negateCondition")
    rules_engine_match_value: List[StrictStr] = Field(description="Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.", alias="rulesEngineMatchValue")
    rules_engine_match_variable: StrictStr = Field(description="Match Variable", alias="rulesEngineMatchVariable")
    rules_engine_operator: StrictStr = Field(description="Describes operator to apply to the match condition.", alias="rulesEngineOperator")
    selector: Optional[StrictStr] = Field(default=None, description="Name of selector in RequestHeader or RequestBody to be matched")
    transforms: Optional[List[Transform]] = Field(default=None, description="List of transforms")
    __properties: ClassVar[List[str]] = ["negateCondition", "rulesEngineMatchValue", "rulesEngineMatchVariable", "rulesEngineOperator", "selector", "transforms"]

    @field_validator('rules_engine_match_variable')
    def rules_engine_match_variable_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['IsMobile', 'RemoteAddr', 'RequestMethod', 'QueryString', 'PostArgs', 'RequestUri', 'RequestPath', 'RequestFilename', 'RequestFilenameExtension', 'RequestHeader', 'RequestBody', 'RequestScheme']):
            raise ValueError("must be one of enum values ('IsMobile', 'RemoteAddr', 'RequestMethod', 'QueryString', 'PostArgs', 'RequestUri', 'RequestPath', 'RequestFilename', 'RequestFilenameExtension', 'RequestHeader', 'RequestBody', 'RequestScheme')")
        return value

    @field_validator('rules_engine_operator')
    def rules_engine_operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Any', 'IPMatch', 'GeoMatch', 'Equal', 'Contains', 'LessThan', 'GreaterThan', 'LessThanOrEqual', 'GreaterThanOrEqual', 'BeginsWith', 'EndsWith']):
            raise ValueError("must be one of enum values ('Any', 'IPMatch', 'GeoMatch', 'Equal', 'Contains', 'LessThan', 'GreaterThan', 'LessThanOrEqual', 'GreaterThanOrEqual', 'BeginsWith', 'EndsWith')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RulesEngineMatchCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RulesEngineMatchCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "negateCondition": obj.get("negateCondition"),
            "rulesEngineMatchValue": obj.get("rulesEngineMatchValue"),
            "rulesEngineMatchVariable": obj.get("rulesEngineMatchVariable"),
            "rulesEngineOperator": obj.get("rulesEngineOperator"),
            "selector": obj.get("selector"),
            "transforms": obj.get("transforms")
        })
        return _obj



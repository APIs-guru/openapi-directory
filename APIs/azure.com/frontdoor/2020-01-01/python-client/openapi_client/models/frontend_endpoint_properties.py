# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_https_configuration import CustomHttpsConfiguration
from openapi_client.models.frontend_endpoint_update_parameters_web_application_firewall_policy_link import FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink
from openapi_client.models.resource_state import ResourceState
from typing import Optional, Set
from typing_extensions import Self

class FrontendEndpointProperties(BaseModel):
    """
    The JSON object that contains the properties required to create a frontend endpoint.
    """ # noqa: E501
    custom_https_configuration: Optional[CustomHttpsConfiguration] = Field(default=None, alias="customHttpsConfiguration")
    custom_https_provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning status of Custom Https of the frontendEndpoint.", alias="customHttpsProvisioningState")
    custom_https_provisioning_substate: Optional[StrictStr] = Field(default=None, description="Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.", alias="customHttpsProvisioningSubstate")
    resource_state: Optional[ResourceState] = Field(default=None, alias="resourceState")
    host_name: Optional[StrictStr] = Field(default=None, description="The host name of the frontendEndpoint. Must be a domain name.", alias="hostName")
    session_affinity_enabled_state: Optional[StrictStr] = Field(default=None, description="Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'", alias="sessionAffinityEnabledState")
    session_affinity_ttl_seconds: Optional[StrictInt] = Field(default=None, description="UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.", alias="sessionAffinityTtlSeconds")
    web_application_firewall_policy_link: Optional[FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink] = Field(default=None, alias="webApplicationFirewallPolicyLink")
    __properties: ClassVar[List[str]] = ["hostName", "sessionAffinityEnabledState", "sessionAffinityTtlSeconds", "webApplicationFirewallPolicyLink"]

    @field_validator('custom_https_provisioning_state')
    def custom_https_provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabling', 'Enabled', 'Disabling', 'Disabled', 'Failed']):
            raise ValueError("must be one of enum values ('Enabling', 'Enabled', 'Disabling', 'Disabled', 'Failed')")
        return value

    @field_validator('custom_https_provisioning_substate')
    def custom_https_provisioning_substate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SubmittingDomainControlValidationRequest', 'PendingDomainControlValidationREquestApproval', 'DomainControlValidationRequestApproved', 'DomainControlValidationRequestRejected', 'DomainControlValidationRequestTimedOut', 'IssuingCertificate', 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate', 'CertificateDeleted']):
            raise ValueError("must be one of enum values ('SubmittingDomainControlValidationRequest', 'PendingDomainControlValidationREquestApproval', 'DomainControlValidationRequestApproved', 'DomainControlValidationRequestRejected', 'DomainControlValidationRequestTimedOut', 'IssuingCertificate', 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate', 'CertificateDeleted')")
        return value

    @field_validator('session_affinity_enabled_state')
    def session_affinity_enabled_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FrontendEndpointProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "custom_https_provisioning_state",
            "custom_https_provisioning_substate",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of web_application_firewall_policy_link
        if self.web_application_firewall_policy_link:
            _dict['webApplicationFirewallPolicyLink'] = self.web_application_firewall_policy_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FrontendEndpointProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostName": obj.get("hostName"),
            "sessionAffinityEnabledState": obj.get("sessionAffinityEnabledState"),
            "sessionAffinityTtlSeconds": obj.get("sessionAffinityTtlSeconds"),
            "webApplicationFirewallPolicyLink": FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink.from_dict(obj["webApplicationFirewallPolicyLink"]) if obj.get("webApplicationFirewallPolicyLink") is not None else None
        })
        return _obj



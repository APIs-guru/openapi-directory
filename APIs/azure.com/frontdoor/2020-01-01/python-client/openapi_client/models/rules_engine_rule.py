# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rules_engine_action import RulesEngineAction
from openapi_client.models.rules_engine_match_condition import RulesEngineMatchCondition
from typing import Optional, Set
from typing_extensions import Self

class RulesEngineRule(BaseModel):
    """
    Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
    """ # noqa: E501
    action: RulesEngineAction
    match_conditions: Optional[List[RulesEngineMatchCondition]] = Field(default=None, description="A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.", alias="matchConditions")
    match_processing_behavior: Optional[StrictStr] = Field(default=None, description="If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.", alias="matchProcessingBehavior")
    name: StrictStr = Field(description="A name to refer to this specific rule.")
    priority: StrictInt = Field(description="A priority assigned to this rule. ")
    __properties: ClassVar[List[str]] = ["action", "matchConditions", "matchProcessingBehavior", "name", "priority"]

    @field_validator('match_processing_behavior')
    def match_processing_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Continue', 'Stop']):
            raise ValueError("must be one of enum values ('Continue', 'Stop')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RulesEngineRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in match_conditions (list)
        _items = []
        if self.match_conditions:
            for _item_match_conditions in self.match_conditions:
                if _item_match_conditions:
                    _items.append(_item_match_conditions.to_dict())
            _dict['matchConditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RulesEngineRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": RulesEngineAction.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "matchConditions": [RulesEngineMatchCondition.from_dict(_item) for _item in obj["matchConditions"]] if obj.get("matchConditions") is not None else None,
            "matchProcessingBehavior": obj.get("matchProcessingBehavior"),
            "name": obj.get("name"),
            "priority": obj.get("priority")
        })
        return _obj



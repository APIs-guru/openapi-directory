# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoadBalancingSettingsUpdateParameters(BaseModel):
    """
    Round-Robin load balancing settings for a backend pool
    """ # noqa: E501
    additional_latency_milliseconds: Optional[StrictInt] = Field(default=None, description="The additional latency in milliseconds for probes to fall into the lowest latency bucket", alias="additionalLatencyMilliseconds")
    sample_size: Optional[StrictInt] = Field(default=None, description="The number of samples to consider for load balancing decisions", alias="sampleSize")
    successful_samples_required: Optional[StrictInt] = Field(default=None, description="The number of samples within the sample period that must succeed", alias="successfulSamplesRequired")
    __properties: ClassVar[List[str]] = ["additionalLatencyMilliseconds", "sampleSize", "successfulSamplesRequired"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoadBalancingSettingsUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoadBalancingSettingsUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalLatencyMilliseconds": obj.get("additionalLatencyMilliseconds"),
            "sampleSize": obj.get("sampleSize"),
            "successfulSamplesRequired": obj.get("successfulSamplesRequired")
        })
        return _obj



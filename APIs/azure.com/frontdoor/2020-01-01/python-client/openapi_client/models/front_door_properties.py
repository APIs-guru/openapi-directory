# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backend_pool import BackendPool
from openapi_client.models.backend_pools_settings import BackendPoolsSettings
from openapi_client.models.frontend_endpoint import FrontendEndpoint
from openapi_client.models.health_probe_settings_model import HealthProbeSettingsModel
from openapi_client.models.load_balancing_settings_model import LoadBalancingSettingsModel
from openapi_client.models.resource_state import ResourceState
from openapi_client.models.routing_rule import RoutingRule
from openapi_client.models.rules_engine import RulesEngine
from typing import Optional, Set
from typing_extensions import Self

class FrontDoorProperties(BaseModel):
    """
    The JSON object that contains the properties required to create an endpoint.
    """ # noqa: E501
    cname: Optional[StrictStr] = Field(default=None, description="The host that each frontendEndpoint must CNAME to.")
    frontdoor_id: Optional[StrictStr] = Field(default=None, description="The Id of the frontdoor.", alias="frontdoorId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the Front Door.", alias="provisioningState")
    resource_state: Optional[ResourceState] = Field(default=None, alias="resourceState")
    rules_engines: Optional[List[RulesEngine]] = Field(default=None, description="Rules Engine Configurations available to routing rules.", alias="rulesEngines")
    backend_pools: Optional[List[BackendPool]] = Field(default=None, description="Backend pools available to routing rules.", alias="backendPools")
    backend_pools_settings: Optional[BackendPoolsSettings] = Field(default=None, alias="backendPoolsSettings")
    enabled_state: Optional[StrictStr] = Field(default=None, description="Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'", alias="enabledState")
    friendly_name: Optional[StrictStr] = Field(default=None, description="A friendly name for the frontDoor", alias="friendlyName")
    frontend_endpoints: Optional[List[FrontendEndpoint]] = Field(default=None, description="Frontend endpoints available to routing rules.", alias="frontendEndpoints")
    health_probe_settings: Optional[List[HealthProbeSettingsModel]] = Field(default=None, description="Health probe settings associated with this Front Door instance.", alias="healthProbeSettings")
    load_balancing_settings: Optional[List[LoadBalancingSettingsModel]] = Field(default=None, description="Load balancing settings associated with this Front Door instance.", alias="loadBalancingSettings")
    routing_rules: Optional[List[RoutingRule]] = Field(default=None, description="Routing rules associated with this Front Door.", alias="routingRules")
    __properties: ClassVar[List[str]] = ["backendPools", "backendPoolsSettings", "enabledState", "friendlyName", "frontendEndpoints", "healthProbeSettings", "loadBalancingSettings", "routingRules"]

    @field_validator('enabled_state')
    def enabled_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FrontDoorProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cname",
            "frontdoor_id",
            "provisioning_state",
            "rules_engines",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backend_pools (list)
        _items = []
        if self.backend_pools:
            for _item_backend_pools in self.backend_pools:
                if _item_backend_pools:
                    _items.append(_item_backend_pools.to_dict())
            _dict['backendPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of backend_pools_settings
        if self.backend_pools_settings:
            _dict['backendPoolsSettings'] = self.backend_pools_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in frontend_endpoints (list)
        _items = []
        if self.frontend_endpoints:
            for _item_frontend_endpoints in self.frontend_endpoints:
                if _item_frontend_endpoints:
                    _items.append(_item_frontend_endpoints.to_dict())
            _dict['frontendEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in health_probe_settings (list)
        _items = []
        if self.health_probe_settings:
            for _item_health_probe_settings in self.health_probe_settings:
                if _item_health_probe_settings:
                    _items.append(_item_health_probe_settings.to_dict())
            _dict['healthProbeSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancing_settings (list)
        _items = []
        if self.load_balancing_settings:
            for _item_load_balancing_settings in self.load_balancing_settings:
                if _item_load_balancing_settings:
                    _items.append(_item_load_balancing_settings.to_dict())
            _dict['loadBalancingSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in routing_rules (list)
        _items = []
        if self.routing_rules:
            for _item_routing_rules in self.routing_rules:
                if _item_routing_rules:
                    _items.append(_item_routing_rules.to_dict())
            _dict['routingRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FrontDoorProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendPools": [BackendPool.from_dict(_item) for _item in obj["backendPools"]] if obj.get("backendPools") is not None else None,
            "backendPoolsSettings": BackendPoolsSettings.from_dict(obj["backendPoolsSettings"]) if obj.get("backendPoolsSettings") is not None else None,
            "enabledState": obj.get("enabledState"),
            "friendlyName": obj.get("friendlyName"),
            "frontendEndpoints": [FrontendEndpoint.from_dict(_item) for _item in obj["frontendEndpoints"]] if obj.get("frontendEndpoints") is not None else None,
            "healthProbeSettings": [HealthProbeSettingsModel.from_dict(_item) for _item in obj["healthProbeSettings"]] if obj.get("healthProbeSettings") is not None else None,
            "loadBalancingSettings": [LoadBalancingSettingsModel.from_dict(_item) for _item in obj["loadBalancingSettings"]] if obj.get("loadBalancingSettings") is not None else None,
            "routingRules": [RoutingRule.from_dict(_item) for _item in obj["routingRules"]] if obj.get("routingRules") is not None else None
        })
        return _obj



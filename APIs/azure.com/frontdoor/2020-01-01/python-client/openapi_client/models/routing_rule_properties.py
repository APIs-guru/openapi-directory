# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backend_pool_update_parameters_health_probe_settings import BackendPoolUpdateParametersHealthProbeSettings
from openapi_client.models.resource_state import ResourceState
from openapi_client.models.route_configuration import RouteConfiguration
from typing import Optional, Set
from typing_extensions import Self

class RoutingRuleProperties(BaseModel):
    """
    The JSON object that contains the properties required to create a routing rule.
    """ # noqa: E501
    resource_state: Optional[ResourceState] = Field(default=None, alias="resourceState")
    accepted_protocols: Optional[List[StrictStr]] = Field(default=None, description="Protocol schemes to match for this rule", alias="acceptedProtocols")
    enabled_state: Optional[StrictStr] = Field(default=None, description="Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'", alias="enabledState")
    frontend_endpoints: Optional[List[BackendPoolUpdateParametersHealthProbeSettings]] = Field(default=None, description="Frontend endpoints associated with this rule", alias="frontendEndpoints")
    patterns_to_match: Optional[List[StrictStr]] = Field(default=None, description="The route patterns of the rule.", alias="patternsToMatch")
    route_configuration: Optional[RouteConfiguration] = Field(default=None, alias="routeConfiguration")
    rules_engine: Optional[BackendPoolUpdateParametersHealthProbeSettings] = Field(default=None, alias="rulesEngine")
    __properties: ClassVar[List[str]] = ["acceptedProtocols", "enabledState", "frontendEndpoints", "patternsToMatch", "routeConfiguration", "rulesEngine"]

    @field_validator('accepted_protocols')
    def accepted_protocols_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Http', 'Https']):
                raise ValueError("each list item must be one of ('Http', 'Https')")
        return value

    @field_validator('enabled_state')
    def enabled_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutingRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in frontend_endpoints (list)
        _items = []
        if self.frontend_endpoints:
            for _item_frontend_endpoints in self.frontend_endpoints:
                if _item_frontend_endpoints:
                    _items.append(_item_frontend_endpoints.to_dict())
            _dict['frontendEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of route_configuration
        if self.route_configuration:
            _dict['routeConfiguration'] = self.route_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rules_engine
        if self.rules_engine:
            _dict['rulesEngine'] = self.rules_engine.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutingRuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceptedProtocols": obj.get("acceptedProtocols"),
            "enabledState": obj.get("enabledState"),
            "frontendEndpoints": [BackendPoolUpdateParametersHealthProbeSettings.from_dict(_item) for _item in obj["frontendEndpoints"]] if obj.get("frontendEndpoints") is not None else None,
            "patternsToMatch": obj.get("patternsToMatch"),
            "routeConfiguration": RouteConfiguration.from_dict(obj["routeConfiguration"]) if obj.get("routeConfiguration") is not None else None,
            "rulesEngine": BackendPoolUpdateParametersHealthProbeSettings.from_dict(obj["rulesEngine"]) if obj.get("rulesEngine") is not None else None
        })
        return _obj



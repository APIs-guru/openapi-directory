# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.route_configuration import RouteConfiguration
from typing import Optional, Set
from typing_extensions import Self

class RedirectConfiguration(RouteConfiguration):
    """
    Describes Redirect Route.
    """ # noqa: E501
    custom_fragment: Optional[StrictStr] = Field(default=None, description="Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.", alias="customFragment")
    custom_host: Optional[StrictStr] = Field(default=None, description="Host to redirect. Leave empty to use the incoming host as the destination host.", alias="customHost")
    custom_path: Optional[StrictStr] = Field(default=None, description="The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.", alias="customPath")
    custom_query_string: Optional[StrictStr] = Field(default=None, description="The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.", alias="customQueryString")
    redirect_protocol: Optional[StrictStr] = Field(default=None, description="The protocol of the destination to where the traffic is redirected", alias="redirectProtocol")
    redirect_type: Optional[StrictStr] = Field(default=None, description="The redirect type the rule will use when redirecting traffic.", alias="redirectType")
    __properties: ClassVar[List[str]] = ["@odata.type"]

    @field_validator('redirect_protocol')
    def redirect_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HttpOnly', 'HttpsOnly', 'MatchRequest']):
            raise ValueError("must be one of enum values ('HttpOnly', 'HttpsOnly', 'MatchRequest')")
        return value

    @field_validator('redirect_type')
    def redirect_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Moved', 'Found', 'TemporaryRedirect', 'PermanentRedirect']):
            raise ValueError("must be one of enum values ('Moved', 'Found', 'TemporaryRedirect', 'PermanentRedirect')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RedirectConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RedirectConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@odata.type": obj.get("@odata.type")
        })
        return _obj



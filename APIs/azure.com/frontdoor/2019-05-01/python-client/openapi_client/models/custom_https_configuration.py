# coding: utf-8

"""
    FrontDoorManagementClient

    Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.front_door_certificate_source_parameters import FrontDoorCertificateSourceParameters
from openapi_client.models.key_vault_certificate_source_parameters import KeyVaultCertificateSourceParameters
from typing import Optional, Set
from typing_extensions import Self

class CustomHttpsConfiguration(BaseModel):
    """
    Https settings for a domain
    """ # noqa: E501
    certificate_source: StrictStr = Field(description="Defines the source of the SSL certificate", alias="certificateSource")
    front_door_certificate_source_parameters: Optional[FrontDoorCertificateSourceParameters] = Field(default=None, alias="frontDoorCertificateSourceParameters")
    key_vault_certificate_source_parameters: Optional[KeyVaultCertificateSourceParameters] = Field(default=None, alias="keyVaultCertificateSourceParameters")
    minimum_tls_version: StrictStr = Field(description="The minimum TLS version required from the clients to establish an SSL handshake with Front Door.", alias="minimumTlsVersion")
    protocol_type: StrictStr = Field(description="Defines the TLS extension protocol that is used for secure delivery", alias="protocolType")
    __properties: ClassVar[List[str]] = ["certificateSource", "frontDoorCertificateSourceParameters", "keyVaultCertificateSourceParameters", "minimumTlsVersion", "protocolType"]

    @field_validator('certificate_source')
    def certificate_source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AzureKeyVault', 'FrontDoor']):
            raise ValueError("must be one of enum values ('AzureKeyVault', 'FrontDoor')")
        return value

    @field_validator('minimum_tls_version')
    def minimum_tls_version_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['1.0', '1.2']):
            raise ValueError("must be one of enum values ('1.0', '1.2')")
        return value

    @field_validator('protocol_type')
    def protocol_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ServerNameIndication']):
            raise ValueError("must be one of enum values ('ServerNameIndication')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomHttpsConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of front_door_certificate_source_parameters
        if self.front_door_certificate_source_parameters:
            _dict['frontDoorCertificateSourceParameters'] = self.front_door_certificate_source_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_vault_certificate_source_parameters
        if self.key_vault_certificate_source_parameters:
            _dict['keyVaultCertificateSourceParameters'] = self.key_vault_certificate_source_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomHttpsConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateSource": obj.get("certificateSource"),
            "frontDoorCertificateSourceParameters": FrontDoorCertificateSourceParameters.from_dict(obj["frontDoorCertificateSourceParameters"]) if obj.get("frontDoorCertificateSourceParameters") is not None else None,
            "keyVaultCertificateSourceParameters": KeyVaultCertificateSourceParameters.from_dict(obj["keyVaultCertificateSourceParameters"]) if obj.get("keyVaultCertificateSourceParameters") is not None else None,
            "minimumTlsVersion": obj.get("minimumTlsVersion"),
            "protocolType": obj.get("protocolType")
        })
        return _obj



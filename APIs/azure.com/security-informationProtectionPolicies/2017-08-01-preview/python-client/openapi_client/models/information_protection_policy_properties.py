# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2017-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.information_type import InformationType
from openapi_client.models.sensitivity_label import SensitivityLabel
from typing import Optional, Set
from typing_extensions import Self

class InformationProtectionPolicyProperties(BaseModel):
    """
    describes properties of an information protection policy.
    """ # noqa: E501
    information_types: Optional[Dict[str, InformationType]] = Field(default=None, description="The sensitivity information types.", alias="informationTypes")
    labels: Optional[Dict[str, SensitivityLabel]] = Field(default=None, description="Dictionary of sensitivity labels.")
    last_modified_utc: Optional[datetime] = Field(default=None, description="Describes the last UTC time the policy was modified.", alias="lastModifiedUtc")
    __properties: ClassVar[List[str]] = ["informationTypes", "labels", "lastModifiedUtc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InformationProtectionPolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_modified_utc",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in information_types (dict)
        _field_dict = {}
        if self.information_types:
            for _key_information_types in self.information_types:
                if self.information_types[_key_information_types]:
                    _field_dict[_key_information_types] = self.information_types[_key_information_types].to_dict()
            _dict['informationTypes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in labels (dict)
        _field_dict = {}
        if self.labels:
            for _key_labels in self.labels:
                if self.labels[_key_labels]:
                    _field_dict[_key_labels] = self.labels[_key_labels].to_dict()
            _dict['labels'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InformationProtectionPolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "informationTypes": dict(
                (_k, InformationType.from_dict(_v))
                for _k, _v in obj["informationTypes"].items()
            )
            if obj.get("informationTypes") is not None
            else None,
            "labels": dict(
                (_k, SensitivityLabel.from_dict(_v))
                for _k, _v in obj["labels"].items()
            )
            if obj.get("labels") is not None
            else None,
            "lastModifiedUtc": obj.get("lastModifiedUtc")
        })
        return _obj



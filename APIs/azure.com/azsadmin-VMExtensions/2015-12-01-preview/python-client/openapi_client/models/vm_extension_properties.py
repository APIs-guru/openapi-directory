# coding: utf-8

"""
    Compute Admin Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_blob import AzureBlob
from typing import Optional, Set
from typing_extensions import Self

class VMExtensionProperties(BaseModel):
    """
    Properties of a Virtual Machine Extension Image.
    """ # noqa: E501
    compute_role: Optional[StrictStr] = Field(default=None, description="Compute role", alias="computeRole")
    is_system_extension: Optional[StrictBool] = Field(default=None, description="Indicates if the extension is for the system.", alias="isSystemExtension")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the resource.", alias="provisioningState")
    source_blob: Optional[AzureBlob] = Field(default=None, alias="sourceBlob")
    support_multiple_extensions: Optional[StrictBool] = Field(default=None, description="True if supports multiple extensions.", alias="supportMultipleExtensions")
    vm_os_type: Optional[StrictStr] = Field(default=None, description="Operating system type.", alias="vmOsType")
    vm_scale_set_enabled: Optional[StrictBool] = Field(default=None, description="Value indicating whether the extension is enabled for virtual machine scale set support.", alias="vmScaleSetEnabled")
    __properties: ClassVar[List[str]] = ["computeRole", "isSystemExtension", "provisioningState", "sourceBlob", "supportMultipleExtensions", "vmOsType", "vmScaleSetEnabled"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Failed', 'Succeeded', 'Canceled']):
            raise ValueError("must be one of enum values ('Creating', 'Failed', 'Succeeded', 'Canceled')")
        return value

    @field_validator('vm_os_type')
    def vm_os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Unknown', 'Windows', 'Linux')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VMExtensionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_blob
        if self.source_blob:
            _dict['sourceBlob'] = self.source_blob.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VMExtensionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeRole": obj.get("computeRole"),
            "isSystemExtension": obj.get("isSystemExtension"),
            "provisioningState": obj.get("provisioningState"),
            "sourceBlob": AzureBlob.from_dict(obj["sourceBlob"]) if obj.get("sourceBlob") is not None else None,
            "supportMultipleExtensions": obj.get("supportMultipleExtensions"),
            "vmOsType": obj.get("vmOsType"),
            "vmScaleSetEnabled": obj.get("vmScaleSetEnabled")
        })
        return _obj



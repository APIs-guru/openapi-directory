# coding: utf-8

"""
    DeploymentAdminClient

    Deployment Admin Client.

    The version of the OpenAPI document: 2019-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SecretDescriptor(BaseModel):
    """
    The secret type-specific descriptor.
    """ # noqa: E501
    allowed_characters: Optional[StrictStr] = Field(default=None, description="The allowed characters in the password", alias="allowedCharacters")
    alternative_dns_names: Optional[List[StrictStr]] = Field(default=None, description="Alternative DNS Names.", alias="alternativeDnsNames")
    alternative_ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="The list of alternative IP addresses.", alias="alternativeIpAddresses")
    key_length: Optional[StrictInt] = Field(default=None, description="The key length.", alias="keyLength")
    password_length: Optional[StrictInt] = Field(default=None, description="The minimum password length is 8 characters, and the maximum password length is 128 characters.", alias="passwordLength")
    password_validation_regex: Optional[StrictStr] = Field(default=None, description="Password validation regular expression.", alias="passwordValidationRegex")
    rotation_status: Optional[StrictStr] = Field(default=None, description="The storage account key secret rotation status.", alias="rotationStatus")
    secondary_key_is_active: Optional[StrictBool] = Field(default=None, description="A value indicating whether the secondary or primary storage account key is active as a secret.", alias="secondaryKeyIsActive")
    subject: Optional[StrictStr] = Field(default=None, description="Certificate's subject")
    __properties: ClassVar[List[str]] = ["allowedCharacters", "alternativeDnsNames", "alternativeIpAddresses", "keyLength", "passwordLength", "passwordValidationRegex", "rotationStatus", "secondaryKeyIsActive", "subject"]

    @field_validator('rotation_status')
    def rotation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'PlantNewSak', 'RotateInactiveSak', 'Complete']):
            raise ValueError("must be one of enum values ('None', 'PlantNewSak', 'RotateInactiveSak', 'Complete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecretDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecretDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedCharacters": obj.get("allowedCharacters"),
            "alternativeDnsNames": obj.get("alternativeDnsNames"),
            "alternativeIpAddresses": obj.get("alternativeIpAddresses"),
            "keyLength": obj.get("keyLength"),
            "passwordLength": obj.get("passwordLength"),
            "passwordValidationRegex": obj.get("passwordValidationRegex"),
            "rotationStatus": obj.get("rotationStatus"),
            "secondaryKeyIsActive": obj.get("secondaryKeyIsActive"),
            "subject": obj.get("subject")
        })
        return _obj



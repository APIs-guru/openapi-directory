# coding: utf-8

"""
    DeploymentAdminClient

    Deployment Admin Client.

    The version of the OpenAPI document: 2019-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.secret_descriptor import SecretDescriptor
from openapi_client.models.secret_state import SecretState
from typing import Optional, Set
from typing_extensions import Self

class ProductSecretProperties(BaseModel):
    """
    Properties of product secret.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The secret description.")
    expires_after: Optional[StrictStr] = Field(default=None, description="The expiration period of the secret (in ISO8601 format).", alias="expiresAfter")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the resource.", alias="provisioningState")
    secret_descriptor: Optional[SecretDescriptor] = Field(default=None, alias="secretDescriptor")
    secret_kind: Optional[StrictStr] = Field(default=None, description="Specifies the secret kind.", alias="secretKind")
    secret_state: Optional[SecretState] = Field(default=None, alias="secretState")
    __properties: ClassVar[List[str]] = ["description", "expiresAfter", "provisioningState", "secretDescriptor", "secretKind", "secretState"]

    @field_validator('secret_kind')
    def secret_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AdHoc', 'Certificate', 'Password', 'StorageAccount', 'SymmetricKey']):
            raise ValueError("must be one of enum values ('AdHoc', 'Certificate', 'Password', 'StorageAccount', 'SymmetricKey')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductSecretProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of secret_descriptor
        if self.secret_descriptor:
            _dict['secretDescriptor'] = self.secret_descriptor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_state
        if self.secret_state:
            _dict['secretState'] = self.secret_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductSecretProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "expiresAfter": obj.get("expiresAfter"),
            "provisioningState": obj.get("provisioningState"),
            "secretDescriptor": SecretDescriptor.from_dict(obj["secretDescriptor"]) if obj.get("secretDescriptor") is not None else None,
            "secretKind": obj.get("secretKind"),
            "secretState": SecretState.from_dict(obj["secretState"]) if obj.get("secretState") is not None else None
        })
        return _obj



# coding: utf-8

"""
    MonitorClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localizable_string import LocalizableString
from openapi_client.models.metric_availability import MetricAvailability
from openapi_client.models.unit import Unit
from typing import Optional, Set
from typing_extensions import Self

class MetricDefinition(BaseModel):
    """
    Metric definition class specifies the metadata for a metric.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="the resource identifier of the metric definition.")
    metric_availabilities: Optional[List[MetricAvailability]] = Field(default=None, description="the collection of what aggregation intervals are available to be queried.", alias="metricAvailabilities")
    name: Optional[LocalizableString] = None
    primary_aggregation_type: Optional[StrictStr] = Field(default=None, description="the primary aggregation type value defining how to use the values for display.", alias="primaryAggregationType")
    resource_id: Optional[StrictStr] = Field(default=None, description="the resource identifier of the resource that emitted the metric.", alias="resourceId")
    unit: Optional[Unit] = None
    __properties: ClassVar[List[str]] = ["id", "metricAvailabilities", "name", "primaryAggregationType", "resourceId", "unit"]

    @field_validator('primary_aggregation_type')
    def primary_aggregation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Average', 'Count', 'Minimum', 'Maximum', 'Total']):
            raise ValueError("must be one of enum values ('None', 'Average', 'Count', 'Minimum', 'Maximum', 'Total')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metric_availabilities (list)
        _items = []
        if self.metric_availabilities:
            for _item_metric_availabilities in self.metric_availabilities:
                if _item_metric_availabilities:
                    _items.append(_item_metric_availabilities.to_dict())
            _dict['metricAvailabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "metricAvailabilities": [MetricAvailability.from_dict(_item) for _item in obj["metricAvailabilities"]] if obj.get("metricAvailabilities") is not None else None,
            "name": LocalizableString.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "primaryAggregationType": obj.get("primaryAggregationType"),
            "resourceId": obj.get("resourceId"),
            "unit": obj.get("unit")
        })
        return _obj



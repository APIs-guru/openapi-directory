# coding: utf-8

"""
    Management Groups

    The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.

    The version of the OpenAPI document: 2018-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_parent_group_info import EntityParentGroupInfo
from openapi_client.models.permissions import Permissions
from typing import Optional, Set
from typing_extensions import Self

class EntityInfoProperties(BaseModel):
    """
    The generic properties of an entity.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The friendly name of the management group.", alias="displayName")
    inherited_permissions: Optional[Permissions] = Field(default=None, alias="inheritedPermissions")
    number_of_child_groups: Optional[StrictInt] = Field(default=None, description="Number of child groups is the number of Groups that are exactly one level underneath the current Group.", alias="numberOfChildGroups")
    number_of_children: Optional[StrictInt] = Field(default=None, description="Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.", alias="numberOfChildren")
    number_of_descendants: Optional[StrictInt] = Field(default=None, alias="numberOfDescendants")
    parent: Optional[EntityParentGroupInfo] = None
    parent_display_name_chain: Optional[List[StrictStr]] = Field(default=None, description="The parent display name chain from the root group to the immediate parent", alias="parentDisplayNameChain")
    parent_name_chain: Optional[List[StrictStr]] = Field(default=None, description="The parent name chain from the root group to the immediate parent", alias="parentNameChain")
    permissions: Optional[Permissions] = None
    tenant_id: Optional[StrictStr] = Field(default=None, description="The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000", alias="tenantId")
    __properties: ClassVar[List[str]] = ["displayName", "inheritedPermissions", "numberOfChildGroups", "numberOfChildren", "numberOfDescendants", "parent", "parentDisplayNameChain", "parentNameChain", "permissions", "tenantId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityInfoProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if number_of_child_groups (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_child_groups is None and "number_of_child_groups" in self.model_fields_set:
            _dict['numberOfChildGroups'] = None

        # set to None if number_of_children (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_children is None and "number_of_children" in self.model_fields_set:
            _dict['numberOfChildren'] = None

        # set to None if number_of_descendants (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_descendants is None and "number_of_descendants" in self.model_fields_set:
            _dict['numberOfDescendants'] = None

        # set to None if parent_display_name_chain (nullable) is None
        # and model_fields_set contains the field
        if self.parent_display_name_chain is None and "parent_display_name_chain" in self.model_fields_set:
            _dict['parentDisplayNameChain'] = None

        # set to None if parent_name_chain (nullable) is None
        # and model_fields_set contains the field
        if self.parent_name_chain is None and "parent_name_chain" in self.model_fields_set:
            _dict['parentNameChain'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityInfoProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "inheritedPermissions": obj.get("inheritedPermissions"),
            "numberOfChildGroups": obj.get("numberOfChildGroups"),
            "numberOfChildren": obj.get("numberOfChildren"),
            "numberOfDescendants": obj.get("numberOfDescendants"),
            "parent": EntityParentGroupInfo.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "parentDisplayNameChain": obj.get("parentDisplayNameChain"),
            "parentNameChain": obj.get("parentNameChain"),
            "permissions": obj.get("permissions"),
            "tenantId": obj.get("tenantId")
        })
        return _obj



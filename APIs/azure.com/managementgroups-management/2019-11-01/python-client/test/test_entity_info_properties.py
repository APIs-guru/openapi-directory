# coding: utf-8

"""
    Management Groups

    The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.entity_info_properties import EntityInfoProperties

class TestEntityInfoProperties(unittest.TestCase):
    """EntityInfoProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EntityInfoProperties:
        """Test EntityInfoProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EntityInfoProperties`
        """
        model = EntityInfoProperties()
        if include_optional:
            return EntityInfoProperties(
                display_name = '',
                inherited_permissions = 'noaccess',
                number_of_child_groups = 56,
                number_of_children = 56,
                number_of_descendants = 56,
                parent = openapi_client.models.entity_parent_group_info.EntityParentGroupInfo(
                    id = '', ),
                parent_display_name_chain = [
                    ''
                    ],
                parent_name_chain = [
                    ''
                    ],
                permissions = 'noaccess',
                tenant_id = ''
            )
        else:
            return EntityInfoProperties(
        )
        """

    def testEntityInfoProperties(self):
        """Test EntityInfoProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

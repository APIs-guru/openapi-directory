# coding: utf-8

"""
    Management Groups

    The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.create_management_group_request import CreateManagementGroupRequest
from openapi_client.models.management_group import ManagementGroup
from openapi_client.models.management_group_list_result import ManagementGroupListResult
from openapi_client.models.operation_results import OperationResults
from openapi_client.models.patch_management_group_request import PatchManagementGroupRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ManagementGroupsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def management_group_subscriptions_create(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """management_group_subscriptions_create

        Associates existing subscription with the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param subscription_id: Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_group_subscriptions_create_serialize(
            group_id=group_id,
            subscription_id=subscription_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def management_group_subscriptions_create_with_http_info(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """management_group_subscriptions_create

        Associates existing subscription with the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param subscription_id: Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_group_subscriptions_create_serialize(
            group_id=group_id,
            subscription_id=subscription_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def management_group_subscriptions_create_without_preload_content(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """management_group_subscriptions_create

        Associates existing subscription with the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param subscription_id: Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_group_subscriptions_create_serialize(
            group_id=group_id,
            subscription_id=subscription_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _management_group_subscriptions_create_serialize(
        self,
        group_id,
        subscription_id,
        api_version,
        cache_control,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if group_id is not None:
            _path_params['groupId'] = group_id
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if cache_control is not None:
            _header_params['Cache-Control'] = cache_control
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def management_group_subscriptions_delete(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """management_group_subscriptions_delete

        De-associates subscription from the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param subscription_id: Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_group_subscriptions_delete_serialize(
            group_id=group_id,
            subscription_id=subscription_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def management_group_subscriptions_delete_with_http_info(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """management_group_subscriptions_delete

        De-associates subscription from the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param subscription_id: Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_group_subscriptions_delete_serialize(
            group_id=group_id,
            subscription_id=subscription_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def management_group_subscriptions_delete_without_preload_content(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        subscription_id: Annotated[StrictStr, Field(description="Subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """management_group_subscriptions_delete

        De-associates subscription from the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param subscription_id: Subscription ID. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_group_subscriptions_delete_serialize(
            group_id=group_id,
            subscription_id=subscription_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _management_group_subscriptions_delete_serialize(
        self,
        group_id,
        subscription_id,
        api_version,
        cache_control,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if group_id is not None:
            _path_params['groupId'] = group_id
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if cache_control is not None:
            _header_params['Cache-Control'] = cache_control
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def management_groups_create_or_update(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        create_management_group_request: Annotated[CreateManagementGroupRequest, Field(description="Management group creation parameters.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagementGroup:
        """management_groups_create_or_update

        Create or update a management group. If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param create_management_group_request: Management group creation parameters. (required)
        :type create_management_group_request: CreateManagementGroupRequest
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_create_or_update_serialize(
            group_id=group_id,
            api_version=api_version,
            create_management_group_request=create_management_group_request,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
            '202': "OperationResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def management_groups_create_or_update_with_http_info(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        create_management_group_request: Annotated[CreateManagementGroupRequest, Field(description="Management group creation parameters.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagementGroup]:
        """management_groups_create_or_update

        Create or update a management group. If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param create_management_group_request: Management group creation parameters. (required)
        :type create_management_group_request: CreateManagementGroupRequest
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_create_or_update_serialize(
            group_id=group_id,
            api_version=api_version,
            create_management_group_request=create_management_group_request,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
            '202': "OperationResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def management_groups_create_or_update_without_preload_content(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        create_management_group_request: Annotated[CreateManagementGroupRequest, Field(description="Management group creation parameters.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """management_groups_create_or_update

        Create or update a management group. If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param create_management_group_request: Management group creation parameters. (required)
        :type create_management_group_request: CreateManagementGroupRequest
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_create_or_update_serialize(
            group_id=group_id,
            api_version=api_version,
            create_management_group_request=create_management_group_request,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
            '202': "OperationResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _management_groups_create_or_update_serialize(
        self,
        group_id,
        api_version,
        create_management_group_request,
        cache_control,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if group_id is not None:
            _path_params['groupId'] = group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if cache_control is not None:
            _header_params['Cache-Control'] = cache_control
        # process the form parameters
        # process the body parameter
        if create_management_group_request is not None:
            _body_params = create_management_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/providers/Microsoft.Management/managementGroups/{groupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def management_groups_delete(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OperationResults:
        """management_groups_delete

        Delete management group. If a management group contains child resources, the request will fail.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_delete_serialize(
            group_id=group_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "OperationResults",
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def management_groups_delete_with_http_info(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OperationResults]:
        """management_groups_delete

        Delete management group. If a management group contains child resources, the request will fail.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_delete_serialize(
            group_id=group_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "OperationResults",
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def management_groups_delete_without_preload_content(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """management_groups_delete

        Delete management group. If a management group contains child resources, the request will fail.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_delete_serialize(
            group_id=group_id,
            api_version=api_version,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "OperationResults",
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _management_groups_delete_serialize(
        self,
        group_id,
        api_version,
        cache_control,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if group_id is not None:
            _path_params['groupId'] = group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if cache_control is not None:
            _header_params['Cache-Control'] = cache_control
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/providers/Microsoft.Management/managementGroups/{groupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def management_groups_get(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        expand: Annotated[Optional[StrictStr], Field(description="The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.")] = None,
        recurse: Annotated[Optional[StrictBool], Field(description="The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')")] = None,
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagementGroup:
        """management_groups_get

        Get the details of the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param expand: The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.
        :type expand: str
        :param recurse: The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.
        :type recurse: bool
        :param filter: A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')
        :type filter: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_get_serialize(
            group_id=group_id,
            api_version=api_version,
            expand=expand,
            recurse=recurse,
            filter=filter,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def management_groups_get_with_http_info(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        expand: Annotated[Optional[StrictStr], Field(description="The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.")] = None,
        recurse: Annotated[Optional[StrictBool], Field(description="The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')")] = None,
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagementGroup]:
        """management_groups_get

        Get the details of the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param expand: The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.
        :type expand: str
        :param recurse: The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.
        :type recurse: bool
        :param filter: A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')
        :type filter: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_get_serialize(
            group_id=group_id,
            api_version=api_version,
            expand=expand,
            recurse=recurse,
            filter=filter,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def management_groups_get_without_preload_content(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        expand: Annotated[Optional[StrictStr], Field(description="The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.")] = None,
        recurse: Annotated[Optional[StrictBool], Field(description="The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')")] = None,
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """management_groups_get

        Get the details of the management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param expand: The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.
        :type expand: str
        :param recurse: The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.
        :type recurse: bool
        :param filter: A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')
        :type filter: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_get_serialize(
            group_id=group_id,
            api_version=api_version,
            expand=expand,
            recurse=recurse,
            filter=filter,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _management_groups_get_serialize(
        self,
        group_id,
        api_version,
        expand,
        recurse,
        filter,
        cache_control,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if group_id is not None:
            _path_params['groupId'] = group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if recurse is not None:
            
            _query_params.append(('$recurse', recurse))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        if cache_control is not None:
            _header_params['Cache-Control'] = cache_control
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Management/managementGroups/{groupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def management_groups_list(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagementGroupListResult:
        """management_groups_list

        List management groups for the authenticated user.

        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param skiptoken: Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_list_serialize(
            api_version=api_version,
            cache_control=cache_control,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def management_groups_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagementGroupListResult]:
        """management_groups_list

        List management groups for the authenticated user.

        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param skiptoken: Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_list_serialize(
            api_version=api_version,
            cache_control=cache_control,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def management_groups_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """management_groups_list

        List management groups for the authenticated user.

        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param skiptoken: Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_list_serialize(
            api_version=api_version,
            cache_control=cache_control,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroupListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _management_groups_list_serialize(
        self,
        api_version,
        cache_control,
        skiptoken,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        # process the header parameters
        if cache_control is not None:
            _header_params['Cache-Control'] = cache_control
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Management/managementGroups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def management_groups_update(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        patch_group_request: Annotated[PatchManagementGroupRequest, Field(description="Management group patch parameters.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagementGroup:
        """management_groups_update

        Update a management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param patch_group_request: Management group patch parameters. (required)
        :type patch_group_request: PatchManagementGroupRequest
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_update_serialize(
            group_id=group_id,
            api_version=api_version,
            patch_group_request=patch_group_request,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def management_groups_update_with_http_info(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        patch_group_request: Annotated[PatchManagementGroupRequest, Field(description="Management group patch parameters.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagementGroup]:
        """management_groups_update

        Update a management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param patch_group_request: Management group patch parameters. (required)
        :type patch_group_request: PatchManagementGroupRequest
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_update_serialize(
            group_id=group_id,
            api_version=api_version,
            patch_group_request=patch_group_request,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def management_groups_update_without_preload_content(
        self,
        group_id: Annotated[StrictStr, Field(description="Management Group ID.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2018-01-01-preview.")],
        patch_group_request: Annotated[PatchManagementGroupRequest, Field(description="Management group patch parameters.")],
        cache_control: Annotated[Optional[StrictStr], Field(description="Indicates that the request shouldn't utilize any caches.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """management_groups_update

        Update a management group.

        :param group_id: Management Group ID. (required)
        :type group_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2018-01-01-preview. (required)
        :type api_version: str
        :param patch_group_request: Management group patch parameters. (required)
        :type patch_group_request: PatchManagementGroupRequest
        :param cache_control: Indicates that the request shouldn't utilize any caches.
        :type cache_control: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._management_groups_update_serialize(
            group_id=group_id,
            api_version=api_version,
            patch_group_request=patch_group_request,
            cache_control=cache_control,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagementGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _management_groups_update_serialize(
        self,
        group_id,
        api_version,
        patch_group_request,
        cache_control,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if group_id is not None:
            _path_params['groupId'] = group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if cache_control is not None:
            _header_params['Cache-Control'] = cache_control
        # process the form parameters
        # process the body parameter
        if patch_group_request is not None:
            _body_params = patch_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/providers/Microsoft.Management/managementGroups/{groupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



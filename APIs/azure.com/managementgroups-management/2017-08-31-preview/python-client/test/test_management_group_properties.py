# coding: utf-8

"""
    Management Groups

    The Azure Management Groups API enables consolidation of multiple  subscriptions/resources into an organizational hierarchy and centrally  manage access control, policies, alerting and reporting for those resources. 

    The version of the OpenAPI document: 2017-08-31-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.management_group_properties import ManagementGroupProperties

class TestManagementGroupProperties(unittest.TestCase):
    """ManagementGroupProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ManagementGroupProperties:
        """Test ManagementGroupProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ManagementGroupProperties`
        """
        model = ManagementGroupProperties()
        if include_optional:
            return ManagementGroupProperties(
                details = openapi_client.models.management_group_details_properties.ManagementGroupDetailsProperties(
                    management_group_type = 'Enrollment', 
                    parent = openapi_client.models.parent_group_info.ParentGroupInfo(
                        display_name = '', 
                        parent_id = '', ), 
                    updated_by = '', 
                    updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    version = 1.337, ),
                display_name = '',
                tenant_id = ''
            )
        else:
            return ManagementGroupProperties(
        )
        """

    def testManagementGroupProperties(self):
        """Test ManagementGroupProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

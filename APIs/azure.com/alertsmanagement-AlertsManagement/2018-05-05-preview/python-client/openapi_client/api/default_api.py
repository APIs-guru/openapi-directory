# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    REST APIs for Azure Alerts Management Service.

    The version of the OpenAPI document: 2018-05-05-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.alert import Alert
from openapi_client.models.alert_modification import AlertModification
from openapi_client.models.alerts_list import AlertsList
from openapi_client.models.alerts_summary import AlertsSummary
from openapi_client.models.operations_list import OperationsList
from openapi_client.models.smart_group import SmartGroup
from openapi_client.models.smart_group_modification import SmartGroupModification
from openapi_client.models.smart_groups_list import SmartGroupsList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def alerts_change_state(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        new_state: Annotated[StrictStr, Field(description="filter by state")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Alert:
        """alerts_change_state

        Change the state of the alert.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param new_state: filter by state (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_change_state_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_change_state_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        new_state: Annotated[StrictStr, Field(description="filter by state")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Alert]:
        """alerts_change_state

        Change the state of the alert.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param new_state: filter by state (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_change_state_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_change_state_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        new_state: Annotated[StrictStr, Field(description="filter by state")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_change_state

        Change the state of the alert.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param new_state: filter by state (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_change_state_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_change_state_serialize(
        self,
        subscription_id,
        alert_id,
        api_version,
        new_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if alert_id is not None:
            _path_params['alertId'] = alert_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if new_state is not None:
            
            _query_params.append(('newState', new_state))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_all(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource: Annotated[Optional[StrictStr], Field(description="filter by target resource")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="filter by target resource type")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="filter by monitor service which is the source of the alert object.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="filter by monitor condition which is the state of the alert at monitor service")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="filter by severity")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="filter by state")] = None,
        smart_group_id: Annotated[Optional[StrictStr], Field(description="filter by smart Group Id")] = None,
        include_payload: Annotated[Optional[StrictBool], Field(description="include payload field content, default value is 'false'.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="number of items per page, default value is '25'.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="sort the query results by input field, default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsList:
        """alerts_get_all

        List all the existing alerts, where the results can be selective by passing multiple filter parameters including time range and sorted on specific fields. 

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource: filter by target resource
        :type target_resource: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param target_resource_type: filter by target resource type
        :type target_resource_type: str
        :param monitor_service: filter by monitor service which is the source of the alert object.
        :type monitor_service: str
        :param monitor_condition: filter by monitor condition which is the state of the alert at monitor service
        :type monitor_condition: str
        :param severity: filter by severity
        :type severity: str
        :param alert_state: filter by state
        :type alert_state: str
        :param smart_group_id: filter by smart Group Id
        :type smart_group_id: str
        :param include_payload: include payload field content, default value is 'false'.
        :type include_payload: bool
        :param page_count: number of items per page, default value is '25'.
        :type page_count: int
        :param sort_by: sort the query results by input field, default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            smart_group_id=smart_group_id,
            include_payload=include_payload,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            time_range=time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_all_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource: Annotated[Optional[StrictStr], Field(description="filter by target resource")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="filter by target resource type")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="filter by monitor service which is the source of the alert object.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="filter by monitor condition which is the state of the alert at monitor service")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="filter by severity")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="filter by state")] = None,
        smart_group_id: Annotated[Optional[StrictStr], Field(description="filter by smart Group Id")] = None,
        include_payload: Annotated[Optional[StrictBool], Field(description="include payload field content, default value is 'false'.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="number of items per page, default value is '25'.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="sort the query results by input field, default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsList]:
        """alerts_get_all

        List all the existing alerts, where the results can be selective by passing multiple filter parameters including time range and sorted on specific fields. 

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource: filter by target resource
        :type target_resource: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param target_resource_type: filter by target resource type
        :type target_resource_type: str
        :param monitor_service: filter by monitor service which is the source of the alert object.
        :type monitor_service: str
        :param monitor_condition: filter by monitor condition which is the state of the alert at monitor service
        :type monitor_condition: str
        :param severity: filter by severity
        :type severity: str
        :param alert_state: filter by state
        :type alert_state: str
        :param smart_group_id: filter by smart Group Id
        :type smart_group_id: str
        :param include_payload: include payload field content, default value is 'false'.
        :type include_payload: bool
        :param page_count: number of items per page, default value is '25'.
        :type page_count: int
        :param sort_by: sort the query results by input field, default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            smart_group_id=smart_group_id,
            include_payload=include_payload,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            time_range=time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_all_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource: Annotated[Optional[StrictStr], Field(description="filter by target resource")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="filter by target resource type")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="filter by monitor service which is the source of the alert object.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="filter by monitor condition which is the state of the alert at monitor service")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="filter by severity")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="filter by state")] = None,
        smart_group_id: Annotated[Optional[StrictStr], Field(description="filter by smart Group Id")] = None,
        include_payload: Annotated[Optional[StrictBool], Field(description="include payload field content, default value is 'false'.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="number of items per page, default value is '25'.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="sort the query results by input field, default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_get_all

        List all the existing alerts, where the results can be selective by passing multiple filter parameters including time range and sorted on specific fields. 

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource: filter by target resource
        :type target_resource: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param target_resource_type: filter by target resource type
        :type target_resource_type: str
        :param monitor_service: filter by monitor service which is the source of the alert object.
        :type monitor_service: str
        :param monitor_condition: filter by monitor condition which is the state of the alert at monitor service
        :type monitor_condition: str
        :param severity: filter by severity
        :type severity: str
        :param alert_state: filter by state
        :type alert_state: str
        :param smart_group_id: filter by smart Group Id
        :type smart_group_id: str
        :param include_payload: include payload field content, default value is 'false'.
        :type include_payload: bool
        :param page_count: number of items per page, default value is '25'.
        :type page_count: int
        :param sort_by: sort the query results by input field, default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            smart_group_id=smart_group_id,
            include_payload=include_payload,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            time_range=time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_all_serialize(
        self,
        subscription_id,
        api_version,
        target_resource,
        target_resource_group,
        target_resource_type,
        monitor_service,
        monitor_condition,
        severity,
        alert_state,
        smart_group_id,
        include_payload,
        page_count,
        sort_by,
        sort_order,
        time_range,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if target_resource is not None:
            
            _query_params.append(('targetResource', target_resource))
            
        if target_resource_group is not None:
            
            _query_params.append(('targetResourceGroup', target_resource_group))
            
        if target_resource_type is not None:
            
            _query_params.append(('targetResourceType', target_resource_type))
            
        if monitor_service is not None:
            
            _query_params.append(('monitorService', monitor_service))
            
        if monitor_condition is not None:
            
            _query_params.append(('monitorCondition', monitor_condition))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if alert_state is not None:
            
            _query_params.append(('alertState', alert_state))
            
        if smart_group_id is not None:
            
            _query_params.append(('smartGroupId', smart_group_id))
            
        if include_payload is not None:
            
            _query_params.append(('includePayload', include_payload))
            
        if page_count is not None:
            
            _query_params.append(('pageCount', page_count))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if time_range is not None:
            
            _query_params.append(('timeRange', time_range))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_by_id(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Alert:
        """Get a specific alert.

        Get information related to a specific alert

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_by_id_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_by_id_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Alert]:
        """Get a specific alert.

        Get information related to a specific alert

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_by_id_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_by_id_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a specific alert.

        Get information related to a specific alert

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_by_id_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_by_id_serialize(
        self,
        subscription_id,
        alert_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if alert_id is not None:
            _path_params['alertId'] = alert_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_history(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertModification:
        """alerts_get_history

        Get the history of the changes of an alert.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_history_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_history_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertModification]:
        """alerts_get_history

        Get the history of the changes of an alert.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_history_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_history_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert object.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_get_history

        Get the history of the changes of an alert.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert object. (required)
        :type alert_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_history_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_history_serialize(
        self,
        subscription_id,
        alert_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if alert_id is not None:
            _path_params['alertId'] = alert_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_summary(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsSummary:
        """alerts_get_summary

        Summary of alerts with the count each severity.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_summary_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource_group=target_resource_group,
            time_range=time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummary",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_summary_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsSummary]:
        """alerts_get_summary

        Summary of alerts with the count each severity.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_summary_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource_group=target_resource_group,
            time_range=time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummary",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_summary_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_get_summary

        Summary of alerts with the count each severity.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_summary_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource_group=target_resource_group,
            time_range=time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummary",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_summary_serialize(
        self,
        subscription_id,
        api_version,
        target_resource_group,
        time_range,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if target_resource_group is not None:
            
            _query_params.append(('targetResourceGroup', target_resource_group))
            
        if time_range is not None:
            
            _query_params.append(('timeRange', time_range))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def operations_list(
        self,
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OperationsList:
        """operations_list

        List all operations available through Azure Alerts Management Resource Provider.

        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OperationsList]:
        """operations_list

        List all operations available through Azure Alerts Management Resource Provider.

        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """operations_list

        List all operations available through Azure Alerts Management Resource Provider.

        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_list_serialize(
        self,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.AlertsManagement/operations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def smart_groups_change_state(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        new_state: Annotated[StrictStr, Field(description="filter by state")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SmartGroup:
        """smart_groups_change_state

        Change the state from unresolved to resolved and all the alerts within the smart group will also be resolved.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param new_state: filter by state (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_change_state_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def smart_groups_change_state_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        new_state: Annotated[StrictStr, Field(description="filter by state")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SmartGroup]:
        """smart_groups_change_state

        Change the state from unresolved to resolved and all the alerts within the smart group will also be resolved.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param new_state: filter by state (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_change_state_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def smart_groups_change_state_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        new_state: Annotated[StrictStr, Field(description="filter by state")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """smart_groups_change_state

        Change the state from unresolved to resolved and all the alerts within the smart group will also be resolved.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param new_state: filter by state (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_change_state_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _smart_groups_change_state_serialize(
        self,
        subscription_id,
        smart_group_id,
        api_version,
        new_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if smart_group_id is not None:
            _path_params['smartGroupId'] = smart_group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if new_state is not None:
            
            _query_params.append(('newState', new_state))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def smart_groups_get_all(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource: Annotated[Optional[StrictStr], Field(description="filter by target resource")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="filter by target resource type")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="filter by monitor service which is the source of the alert object.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="filter by monitor condition which is the state of the alert at monitor service")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="filter by severity")] = None,
        smart_group_state: Annotated[Optional[StrictStr], Field(description="filter by state")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="number of items per page, default value is '25'.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="sort the query results by input field, default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SmartGroupsList:
        """Get all smartGroups within the subscription

        List all the smartGroups within the specified subscription. 

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource: filter by target resource
        :type target_resource: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param target_resource_type: filter by target resource type
        :type target_resource_type: str
        :param monitor_service: filter by monitor service which is the source of the alert object.
        :type monitor_service: str
        :param monitor_condition: filter by monitor condition which is the state of the alert at monitor service
        :type monitor_condition: str
        :param severity: filter by severity
        :type severity: str
        :param smart_group_state: filter by state
        :type smart_group_state: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param page_count: number of items per page, default value is '25'.
        :type page_count: int
        :param sort_by: sort the query results by input field, default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            smart_group_state=smart_group_state,
            time_range=time_range,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def smart_groups_get_all_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource: Annotated[Optional[StrictStr], Field(description="filter by target resource")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="filter by target resource type")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="filter by monitor service which is the source of the alert object.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="filter by monitor condition which is the state of the alert at monitor service")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="filter by severity")] = None,
        smart_group_state: Annotated[Optional[StrictStr], Field(description="filter by state")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="number of items per page, default value is '25'.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="sort the query results by input field, default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SmartGroupsList]:
        """Get all smartGroups within the subscription

        List all the smartGroups within the specified subscription. 

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource: filter by target resource
        :type target_resource: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param target_resource_type: filter by target resource type
        :type target_resource_type: str
        :param monitor_service: filter by monitor service which is the source of the alert object.
        :type monitor_service: str
        :param monitor_condition: filter by monitor condition which is the state of the alert at monitor service
        :type monitor_condition: str
        :param severity: filter by severity
        :type severity: str
        :param smart_group_state: filter by state
        :type smart_group_state: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param page_count: number of items per page, default value is '25'.
        :type page_count: int
        :param sort_by: sort the query results by input field, default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            smart_group_state=smart_group_state,
            time_range=time_range,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def smart_groups_get_all_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        target_resource: Annotated[Optional[StrictStr], Field(description="filter by target resource")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="filter by target resource group name")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="filter by target resource type")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="filter by monitor service which is the source of the alert object.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="filter by monitor condition which is the state of the alert at monitor service")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="filter by severity")] = None,
        smart_group_state: Annotated[Optional[StrictStr], Field(description="filter by state")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="filter by time range, default value is 1 day")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="number of items per page, default value is '25'.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="sort the query results by input field, default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all smartGroups within the subscription

        List all the smartGroups within the specified subscription. 

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param target_resource: filter by target resource
        :type target_resource: str
        :param target_resource_group: filter by target resource group name
        :type target_resource_group: str
        :param target_resource_type: filter by target resource type
        :type target_resource_type: str
        :param monitor_service: filter by monitor service which is the source of the alert object.
        :type monitor_service: str
        :param monitor_condition: filter by monitor condition which is the state of the alert at monitor service
        :type monitor_condition: str
        :param severity: filter by severity
        :type severity: str
        :param smart_group_state: filter by state
        :type smart_group_state: str
        :param time_range: filter by time range, default value is 1 day
        :type time_range: str
        :param page_count: number of items per page, default value is '25'.
        :type page_count: int
        :param sort_by: sort the query results by input field, default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            smart_group_state=smart_group_state,
            time_range=time_range,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _smart_groups_get_all_serialize(
        self,
        subscription_id,
        api_version,
        target_resource,
        target_resource_group,
        target_resource_type,
        monitor_service,
        monitor_condition,
        severity,
        smart_group_state,
        time_range,
        page_count,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if target_resource is not None:
            
            _query_params.append(('targetResource', target_resource))
            
        if target_resource_group is not None:
            
            _query_params.append(('targetResourceGroup', target_resource_group))
            
        if target_resource_type is not None:
            
            _query_params.append(('targetResourceType', target_resource_type))
            
        if monitor_service is not None:
            
            _query_params.append(('monitorService', monitor_service))
            
        if monitor_condition is not None:
            
            _query_params.append(('monitorCondition', monitor_condition))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if smart_group_state is not None:
            
            _query_params.append(('smartGroupState', smart_group_state))
            
        if time_range is not None:
            
            _query_params.append(('timeRange', time_range))
            
        if page_count is not None:
            
            _query_params.append(('pageCount', page_count))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def smart_groups_get_by_id(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SmartGroup:
        """Get information of smart alerts group.

        Get details of smart group.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_by_id_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def smart_groups_get_by_id_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SmartGroup]:
        """Get information of smart alerts group.

        Get details of smart group.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_by_id_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def smart_groups_get_by_id_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get information of smart alerts group.

        Get details of smart group.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_by_id_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _smart_groups_get_by_id_serialize(
        self,
        subscription_id,
        smart_group_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if smart_group_id is not None:
            _path_params['smartGroupId'] = smart_group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def smart_groups_get_history(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SmartGroupModification:
        """smart_groups_get_history

        Get the history of the changes of smart group.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_history_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def smart_groups_get_history_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SmartGroupModification]:
        """smart_groups_get_history

        Get the history of the changes of smart group.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_history_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def smart_groups_get_history_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart Group Id")],
        api_version: Annotated[StrictStr, Field(description="client API version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """smart_groups_get_history

        Get the history of the changes of smart group.

        :param subscription_id: subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart Group Id (required)
        :type smart_group_id: str
        :param api_version: client API version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_history_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _smart_groups_get_history_serialize(
        self,
        subscription_id,
        smart_group_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if smart_group_id is not None:
            _path_params['smartGroupId'] = smart_group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    REST APIs for Azure Alerts Management Service.

    The version of the OpenAPI document: 2018-05-05-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AlertProperties(BaseModel):
    """
    An alert created in alert management service.
    """ # noqa: E501
    alert_state: Optional[StrictStr] = Field(default=None, description="Alert object state", alias="alertState")
    last_modified_date_time: Optional[datetime] = Field(default=None, description="Last modification time(ISO-8601 format).", alias="lastModifiedDateTime")
    last_modified_user_name: Optional[StrictStr] = Field(default=None, description="User who last modified the alert.", alias="lastModifiedUserName")
    monitor_condition: Optional[StrictStr] = Field(default=None, description="Condition of the rule at the monitor service", alias="monitorCondition")
    monitor_service: Optional[StrictStr] = Field(default=None, description="Monitor service which is the source of the alert object.", alias="monitorService")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="More details which are contextual to the monitor service.")
    severity: Optional[StrictStr] = Field(default=None, description="Severity of alert Sev1 being highest and Sev3 being lowest.")
    signal_type: Optional[StrictStr] = Field(default=None, description="Log based alert or metric based alert", alias="signalType")
    smart_group_id: Optional[StrictStr] = Field(default=None, description="Unique Id of the smart group", alias="smartGroupId")
    smart_grouping_reason: Optional[StrictStr] = Field(default=None, description="Reason for addition to a smart group", alias="smartGroupingReason")
    source_created_id: Optional[StrictStr] = Field(default=None, description="Unique Id created by monitor service", alias="sourceCreatedId")
    start_date_time: Optional[datetime] = Field(default=None, description="Creation time(ISO-8601 format).", alias="startDateTime")
    target_resource: Optional[StrictStr] = Field(default=None, description="Target ARM resource, on which alert got created.", alias="targetResource")
    target_resource_group: Optional[StrictStr] = Field(default=None, description="Resource group of target ARM resource.", alias="targetResourceGroup")
    target_resource_name: Optional[StrictStr] = Field(default=None, description="Target ARM resource name, on which alert got created.", alias="targetResourceName")
    target_resource_type: Optional[StrictStr] = Field(default=None, description="Resource type of target ARM resource", alias="targetResourceType")
    __properties: ClassVar[List[str]] = ["alertState", "lastModifiedDateTime", "lastModifiedUserName", "monitorCondition", "monitorService", "payload", "severity", "signalType", "smartGroupId", "smartGroupingReason", "sourceCreatedId", "startDateTime", "targetResource", "targetResourceGroup", "targetResourceName", "targetResourceType"]

    @field_validator('alert_state')
    def alert_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['New', 'Acknowledged', 'Closed']):
            raise ValueError("must be one of enum values ('New', 'Acknowledged', 'Closed')")
        return value

    @field_validator('monitor_condition')
    def monitor_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Fired', 'Resolved']):
            raise ValueError("must be one of enum values ('Fired', 'Resolved')")
        return value

    @field_validator('monitor_service')
    def monitor_service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Platform', 'Application Insights', 'Log Analytics', 'Infrastructure Insights', 'ActivityLog Administrative', 'ActivityLog Security', 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale', 'ServiceHealth', 'SmartDetector', 'Zabbix', 'SCOM', 'Nagios']):
            raise ValueError("must be one of enum values ('Platform', 'Application Insights', 'Log Analytics', 'Infrastructure Insights', 'ActivityLog Administrative', 'ActivityLog Security', 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale', 'ServiceHealth', 'SmartDetector', 'Zabbix', 'SCOM', 'Nagios')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4']):
            raise ValueError("must be one of enum values ('Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4')")
        return value

    @field_validator('signal_type')
    def signal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Metric', 'Log', 'Unknown']):
            raise ValueError("must be one of enum values ('Metric', 'Log', 'Unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "alert_state",
            "last_modified_date_time",
            "last_modified_user_name",
            "monitor_condition",
            "monitor_service",
            "payload",
            "severity",
            "signal_type",
            "smart_group_id",
            "smart_grouping_reason",
            "source_created_id",
            "start_date_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertState": obj.get("alertState"),
            "lastModifiedDateTime": obj.get("lastModifiedDateTime"),
            "lastModifiedUserName": obj.get("lastModifiedUserName"),
            "monitorCondition": obj.get("monitorCondition"),
            "monitorService": obj.get("monitorService"),
            "payload": obj.get("payload"),
            "severity": obj.get("severity"),
            "signalType": obj.get("signalType"),
            "smartGroupId": obj.get("smartGroupId"),
            "smartGroupingReason": obj.get("smartGroupingReason"),
            "sourceCreatedId": obj.get("sourceCreatedId"),
            "startDateTime": obj.get("startDateTime"),
            "targetResource": obj.get("targetResource"),
            "targetResourceGroup": obj.get("targetResourceGroup"),
            "targetResourceName": obj.get("targetResourceName"),
            "targetResourceType": obj.get("targetResourceType")
        })
        return _obj



# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    REST APIs for Azure Alerts Management Service.

    The version of the OpenAPI document: 2018-05-05-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alerts_summary_by_state import AlertsSummaryByState
from typing import Optional, Set
from typing_extensions import Self

class AlertsSummaryPropertiesSummaryBySeverity(BaseModel):
    """
    Summary of alerts by severity
    """ # noqa: E501
    sev0: Optional[AlertsSummaryByState] = Field(default=None, description="Summary of alerts by severity 'Sev0'")
    sev1: Optional[AlertsSummaryByState] = Field(default=None, description="Summary of alerts by severity 'Sev1'")
    sev2: Optional[AlertsSummaryByState] = Field(default=None, description="Summary of alerts by severity 'Sev2'")
    sev3: Optional[AlertsSummaryByState] = Field(default=None, description="Summary of alerts by severity 'Sev3'")
    sev4: Optional[AlertsSummaryByState] = Field(default=None, description="Summary of alerts by severity 'Sev4'")
    __properties: ClassVar[List[str]] = ["sev0", "sev1", "sev2", "sev3", "sev4"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertsSummaryPropertiesSummaryBySeverity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sev0
        if self.sev0:
            _dict['sev0'] = self.sev0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sev1
        if self.sev1:
            _dict['sev1'] = self.sev1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sev2
        if self.sev2:
            _dict['sev2'] = self.sev2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sev3
        if self.sev3:
            _dict['sev3'] = self.sev3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sev4
        if self.sev4:
            _dict['sev4'] = self.sev4.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertsSummaryPropertiesSummaryBySeverity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sev0": AlertsSummaryByState.from_dict(obj["sev0"]) if obj.get("sev0") is not None else None,
            "sev1": AlertsSummaryByState.from_dict(obj["sev1"]) if obj.get("sev1") is not None else None,
            "sev2": AlertsSummaryByState.from_dict(obj["sev2"]) if obj.get("sev2") is not None else None,
            "sev3": AlertsSummaryByState.from_dict(obj["sev3"]) if obj.get("sev3") is not None else None,
            "sev4": AlertsSummaryByState.from_dict(obj["sev4"]) if obj.get("sev4") is not None else None
        })
        return _obj



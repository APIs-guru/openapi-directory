# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    REST APIs for Azure Alerts Management Service.

    The version of the OpenAPI document: 2018-11-02-privatepreview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.conditions import Conditions

class TestConditions(unittest.TestCase):
    """Conditions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Conditions:
        """Test Conditions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Conditions`
        """
        model = Conditions()
        if include_optional:
            return Conditions(
                alert_rule_id = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                application_insights_search_results = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                description = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                log_analytics_search_results = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                monitor_condition = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                monitor_service = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                severity = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                signal_type = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                target_resource = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                target_resource_group = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], ),
                target_resource_type = openapi_client.models.condition.condition(
                    operator = 'Equals', 
                    values = [
                        ''
                        ], )
            )
        else:
            return Conditions(
        )
        """

    def testConditions(self):
        """Test Conditions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

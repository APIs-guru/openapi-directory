# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    REST APIs for Azure Alerts Management Service.

    The version of the OpenAPI document: 2018-11-02-privatepreview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.condition import Condition
from typing import Optional, Set
from typing_extensions import Self

class Conditions(BaseModel):
    """
    Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
    """ # noqa: E501
    alert_rule_id: Optional[Condition] = Field(default=None, alias="alertRuleId")
    application_insights_search_results: Optional[Condition] = Field(default=None, alias="applicationInsightsSearchResults")
    description: Optional[Condition] = None
    log_analytics_search_results: Optional[Condition] = Field(default=None, alias="logAnalyticsSearchResults")
    monitor_condition: Optional[Condition] = Field(default=None, alias="monitorCondition")
    monitor_service: Optional[Condition] = Field(default=None, alias="monitorService")
    severity: Optional[Condition] = None
    signal_type: Optional[Condition] = Field(default=None, alias="signalType")
    target_resource: Optional[Condition] = Field(default=None, alias="targetResource")
    target_resource_group: Optional[Condition] = Field(default=None, alias="targetResourceGroup")
    target_resource_type: Optional[Condition] = Field(default=None, alias="targetResourceType")
    __properties: ClassVar[List[str]] = ["alertRuleId", "applicationInsightsSearchResults", "description", "logAnalyticsSearchResults", "monitorCondition", "monitorService", "severity", "signalType", "targetResource", "targetResourceGroup", "targetResourceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Conditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alert_rule_id
        if self.alert_rule_id:
            _dict['alertRuleId'] = self.alert_rule_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of application_insights_search_results
        if self.application_insights_search_results:
            _dict['applicationInsightsSearchResults'] = self.application_insights_search_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log_analytics_search_results
        if self.log_analytics_search_results:
            _dict['logAnalyticsSearchResults'] = self.log_analytics_search_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitor_condition
        if self.monitor_condition:
            _dict['monitorCondition'] = self.monitor_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitor_service
        if self.monitor_service:
            _dict['monitorService'] = self.monitor_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of severity
        if self.severity:
            _dict['severity'] = self.severity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signal_type
        if self.signal_type:
            _dict['signalType'] = self.signal_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_resource
        if self.target_resource:
            _dict['targetResource'] = self.target_resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_resource_group
        if self.target_resource_group:
            _dict['targetResourceGroup'] = self.target_resource_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_resource_type
        if self.target_resource_type:
            _dict['targetResourceType'] = self.target_resource_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Conditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertRuleId": Condition.from_dict(obj["alertRuleId"]) if obj.get("alertRuleId") is not None else None,
            "applicationInsightsSearchResults": Condition.from_dict(obj["applicationInsightsSearchResults"]) if obj.get("applicationInsightsSearchResults") is not None else None,
            "description": Condition.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "logAnalyticsSearchResults": Condition.from_dict(obj["logAnalyticsSearchResults"]) if obj.get("logAnalyticsSearchResults") is not None else None,
            "monitorCondition": Condition.from_dict(obj["monitorCondition"]) if obj.get("monitorCondition") is not None else None,
            "monitorService": Condition.from_dict(obj["monitorService"]) if obj.get("monitorService") is not None else None,
            "severity": Condition.from_dict(obj["severity"]) if obj.get("severity") is not None else None,
            "signalType": Condition.from_dict(obj["signalType"]) if obj.get("signalType") is not None else None,
            "targetResource": Condition.from_dict(obj["targetResource"]) if obj.get("targetResource") is not None else None,
            "targetResourceGroup": Condition.from_dict(obj["targetResourceGroup"]) if obj.get("targetResourceGroup") is not None else None,
            "targetResourceType": Condition.from_dict(obj["targetResourceType"]) if obj.get("targetResourceType") is not None else None
        })
        return _obj



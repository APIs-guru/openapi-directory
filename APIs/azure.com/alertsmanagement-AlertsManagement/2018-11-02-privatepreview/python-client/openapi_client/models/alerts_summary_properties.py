# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    REST APIs for Azure Alerts Management Service.

    The version of the OpenAPI document: 2018-11-02-privatepreview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alerts_summary_by_monitor_service import AlertsSummaryByMonitorService
from openapi_client.models.alerts_summary_by_severity_and_monitor_condition import AlertsSummaryBySeverityAndMonitorCondition
from openapi_client.models.alerts_summary_by_state import AlertsSummaryByState
from openapi_client.models.alerts_summary_properties_summary_by_severity import AlertsSummaryPropertiesSummaryBySeverity
from typing import Optional, Set
from typing_extensions import Self

class AlertsSummaryProperties(BaseModel):
    """
    Summary of the alerts
    """ # noqa: E501
    next_link: Optional[StrictStr] = Field(default=None, description="URL to fetch the next set of results.", alias="nextLink")
    smart_groups_count: Optional[StrictInt] = Field(default=None, description="Total number of smart groups.", alias="smartGroupsCount")
    summary_by_monitor_service: Optional[AlertsSummaryByMonitorService] = Field(default=None, description="Summary of alerts by severity", alias="summaryByMonitorService")
    summary_by_severity: Optional[AlertsSummaryPropertiesSummaryBySeverity] = Field(default=None, alias="summaryBySeverity")
    summary_by_severity_and_monitor_condition: Optional[AlertsSummaryBySeverityAndMonitorCondition] = Field(default=None, description="Summary of alerts by severity and monitor condition", alias="summaryBySeverityAndMonitorCondition")
    summary_by_state: Optional[AlertsSummaryByState] = Field(default=None, description="Summary of alerts by state", alias="summaryByState")
    total: Optional[StrictInt] = Field(default=None, description="Total number of alerts.")
    __properties: ClassVar[List[str]] = ["nextLink", "smartGroupsCount", "summaryByMonitorService", "summaryBySeverity", "summaryBySeverityAndMonitorCondition", "summaryByState", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertsSummaryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of summary_by_monitor_service
        if self.summary_by_monitor_service:
            _dict['summaryByMonitorService'] = self.summary_by_monitor_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary_by_severity
        if self.summary_by_severity:
            _dict['summaryBySeverity'] = self.summary_by_severity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary_by_severity_and_monitor_condition
        if self.summary_by_severity_and_monitor_condition:
            _dict['summaryBySeverityAndMonitorCondition'] = self.summary_by_severity_and_monitor_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary_by_state
        if self.summary_by_state:
            _dict['summaryByState'] = self.summary_by_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertsSummaryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextLink": obj.get("nextLink"),
            "smartGroupsCount": obj.get("smartGroupsCount"),
            "summaryByMonitorService": AlertsSummaryByMonitorService.from_dict(obj["summaryByMonitorService"]) if obj.get("summaryByMonitorService") is not None else None,
            "summaryBySeverity": AlertsSummaryPropertiesSummaryBySeverity.from_dict(obj["summaryBySeverity"]) if obj.get("summaryBySeverity") is not None else None,
            "summaryBySeverityAndMonitorCondition": AlertsSummaryBySeverityAndMonitorCondition.from_dict(obj["summaryBySeverityAndMonitorCondition"]) if obj.get("summaryBySeverityAndMonitorCondition") is not None else None,
            "summaryByState": AlertsSummaryByState.from_dict(obj["summaryByState"]) if obj.get("summaryByState") is not None else None,
            "total": obj.get("total")
        })
        return _obj



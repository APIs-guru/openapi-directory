# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    REST APIs for Azure Alerts Management Service.

    The version of the OpenAPI document: 2018-11-02-privatepreview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AlertsSummaryByMonitorService(BaseModel):
    """
    Summary of the alerts by monitor service
    """ # noqa: E501
    activity_log_administrative: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"ActivityLog Administrative\"", alias="activityLog Administrative")
    activity_log_autoscale: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"ActivityLog Autoscale\"", alias="activityLog Autoscale")
    activity_log_policy: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"ActivityLog Policy\"", alias="activityLog Policy")
    activity_log_recommendation: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"ActivityLog Recommendation\"", alias="activityLog Recommendation")
    activity_log_security: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"ActivityLog Security\"", alias="activityLog Security")
    application_insights: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"Application Insights\"", alias="application Insights")
    infrastructure_insights: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"Infrastructure Insights\"", alias="infrastructure Insights")
    log_analytics: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"Log Analytics\"", alias="log Analytics")
    nagios: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"Nagios\"")
    platform: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"Platform\"")
    scom: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"SCOM\"")
    service_health: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"ServiceHealth\"", alias="serviceHealth")
    smart_detector: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"Smart Detector\"", alias="smartDetector")
    zabbix: Optional[StrictInt] = Field(default=None, description="Count of alerts of \"Zabbix\"")
    __properties: ClassVar[List[str]] = ["activityLog Administrative", "activityLog Autoscale", "activityLog Policy", "activityLog Recommendation", "activityLog Security", "application Insights", "infrastructure Insights", "log Analytics", "nagios", "platform", "scom", "serviceHealth", "smartDetector", "zabbix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertsSummaryByMonitorService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertsSummaryByMonitorService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityLog Administrative": obj.get("activityLog Administrative"),
            "activityLog Autoscale": obj.get("activityLog Autoscale"),
            "activityLog Policy": obj.get("activityLog Policy"),
            "activityLog Recommendation": obj.get("activityLog Recommendation"),
            "activityLog Security": obj.get("activityLog Security"),
            "application Insights": obj.get("application Insights"),
            "infrastructure Insights": obj.get("infrastructure Insights"),
            "log Analytics": obj.get("log Analytics"),
            "nagios": obj.get("nagios"),
            "platform": obj.get("platform"),
            "scom": obj.get("scom"),
            "serviceHealth": obj.get("serviceHealth"),
            "smartDetector": obj.get("smartDetector"),
            "zabbix": obj.get("zabbix")
        })
        return _obj



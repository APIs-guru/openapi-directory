# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    REST APIs for Azure Alerts Management Service.

    The version of the OpenAPI document: 2018-11-02-privatepreview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.conditions import Conditions
from openapi_client.models.scope import Scope
from openapi_client.models.suppression_config import SuppressionConfig
from typing import Optional, Set
from typing_extensions import Self

class ActionRuleProperties(BaseModel):
    """
    Action rule properties defining scope, conditions, suppression logic for action rule
    """ # noqa: E501
    conditions: Optional[Conditions] = None
    created_at: Optional[datetime] = Field(default=None, description="Creation time of action rule. Date-Time in ISO-8601 format.", alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, description="Created by user name.", alias="createdBy")
    description: Optional[StrictStr] = Field(default=None, description="Description of action rule")
    last_modified_at: Optional[datetime] = Field(default=None, description="Last updated time of action rule. Date-Time in ISO-8601 format.", alias="lastModifiedAt")
    last_modified_by: Optional[StrictStr] = Field(default=None, description="Last modified by user name.", alias="lastModifiedBy")
    resource_group: Optional[StrictStr] = Field(default=None, description="Resource group where action rule is stored", alias="resourceGroup")
    scope: Optional[Scope] = None
    status: Optional[StrictStr] = Field(default=None, description="Indicates if the given action rule is enabled or disabled")
    suppression_config: Optional[SuppressionConfig] = Field(default=None, alias="suppressionConfig")
    __properties: ClassVar[List[str]] = ["conditions", "createdAt", "createdBy", "description", "lastModifiedAt", "lastModifiedBy", "resourceGroup", "scope", "status", "suppressionConfig"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'disabled']):
            raise ValueError("must be one of enum values ('enabled', 'disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "created_by",
            "last_modified_at",
            "last_modified_by",
            "resource_group",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suppression_config
        if self.suppression_config:
            _dict['suppressionConfig'] = self.suppression_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionRuleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditions": Conditions.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None,
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "description": obj.get("description"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "resourceGroup": obj.get("resourceGroup"),
            "scope": Scope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "status": obj.get("status"),
            "suppressionConfig": SuppressionConfig.from_dict(obj["suppressionConfig"]) if obj.get("suppressionConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.

    The version of the OpenAPI document: 2018-05-05
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.alert import Alert
from openapi_client.models.alert_modification import AlertModification
from openapi_client.models.alerts_list import AlertsList
from openapi_client.models.alerts_summary import AlertsSummary
from openapi_client.models.operations_list import OperationsList
from openapi_client.models.smart_group import SmartGroup
from openapi_client.models.smart_group_modification import SmartGroupModification
from openapi_client.models.smart_groups_list import SmartGroupsList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def alerts_change_state(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        new_state: Annotated[StrictStr, Field(description="New state of the alert.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Alert:
        """alerts_change_state

        Change the state of an alert.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param new_state: New state of the alert. (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_change_state_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_change_state_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        new_state: Annotated[StrictStr, Field(description="New state of the alert.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Alert]:
        """alerts_change_state

        Change the state of an alert.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param new_state: New state of the alert. (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_change_state_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_change_state_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        new_state: Annotated[StrictStr, Field(description="New state of the alert.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_change_state

        Change the state of an alert.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param new_state: New state of the alert. (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_change_state_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_change_state_serialize(
        self,
        subscription_id,
        alert_id,
        api_version,
        new_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if alert_id is not None:
            _path_params['alertId'] = alert_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if new_state is not None:
            
            _query_params.append(('newState', new_state))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_all(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the alert instance. Default value is to select all.")] = None,
        alert_rule: Annotated[Optional[StrictStr], Field(description="Filter by specific alert rule.  Default value is to select all.")] = None,
        smart_group_id: Annotated[Optional[StrictStr], Field(description="Filter the alerts list by the Smart Group Id. Default value is none.")] = None,
        include_context: Annotated[Optional[StrictBool], Field(description="Include context which has contextual data specific to the monitor service. Default value is false'")] = None,
        include_egress_config: Annotated[Optional[StrictBool], Field(description="Include egress config which would be used for displaying the content in portal.  Default value is 'false'.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the query results by input field,  Default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        custom_time_range: Annotated[Optional[StrictStr], Field(description="Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsList:
        """alerts_get_all

        List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param alert_state: Filter by state of the alert instance. Default value is to select all.
        :type alert_state: str
        :param alert_rule: Filter by specific alert rule.  Default value is to select all.
        :type alert_rule: str
        :param smart_group_id: Filter the alerts list by the Smart Group Id. Default value is none.
        :type smart_group_id: str
        :param include_context: Include context which has contextual data specific to the monitor service. Default value is false'
        :type include_context: bool
        :param include_egress_config: Include egress config which would be used for displaying the content in portal.  Default value is 'false'.
        :type include_egress_config: bool
        :param page_count: Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
        :type page_count: int
        :param sort_by: Sort the query results by input field,  Default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param select: This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.
        :type select: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param custom_time_range: Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
        :type custom_time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_type=target_resource_type,
            target_resource_group=target_resource_group,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            alert_rule=alert_rule,
            smart_group_id=smart_group_id,
            include_context=include_context,
            include_egress_config=include_egress_config,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            select=select,
            time_range=time_range,
            custom_time_range=custom_time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_all_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the alert instance. Default value is to select all.")] = None,
        alert_rule: Annotated[Optional[StrictStr], Field(description="Filter by specific alert rule.  Default value is to select all.")] = None,
        smart_group_id: Annotated[Optional[StrictStr], Field(description="Filter the alerts list by the Smart Group Id. Default value is none.")] = None,
        include_context: Annotated[Optional[StrictBool], Field(description="Include context which has contextual data specific to the monitor service. Default value is false'")] = None,
        include_egress_config: Annotated[Optional[StrictBool], Field(description="Include egress config which would be used for displaying the content in portal.  Default value is 'false'.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the query results by input field,  Default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        custom_time_range: Annotated[Optional[StrictStr], Field(description="Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsList]:
        """alerts_get_all

        List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param alert_state: Filter by state of the alert instance. Default value is to select all.
        :type alert_state: str
        :param alert_rule: Filter by specific alert rule.  Default value is to select all.
        :type alert_rule: str
        :param smart_group_id: Filter the alerts list by the Smart Group Id. Default value is none.
        :type smart_group_id: str
        :param include_context: Include context which has contextual data specific to the monitor service. Default value is false'
        :type include_context: bool
        :param include_egress_config: Include egress config which would be used for displaying the content in portal.  Default value is 'false'.
        :type include_egress_config: bool
        :param page_count: Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
        :type page_count: int
        :param sort_by: Sort the query results by input field,  Default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param select: This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.
        :type select: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param custom_time_range: Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
        :type custom_time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_type=target_resource_type,
            target_resource_group=target_resource_group,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            alert_rule=alert_rule,
            smart_group_id=smart_group_id,
            include_context=include_context,
            include_egress_config=include_egress_config,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            select=select,
            time_range=time_range,
            custom_time_range=custom_time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_all_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the alert instance. Default value is to select all.")] = None,
        alert_rule: Annotated[Optional[StrictStr], Field(description="Filter by specific alert rule.  Default value is to select all.")] = None,
        smart_group_id: Annotated[Optional[StrictStr], Field(description="Filter the alerts list by the Smart Group Id. Default value is none.")] = None,
        include_context: Annotated[Optional[StrictBool], Field(description="Include context which has contextual data specific to the monitor service. Default value is false'")] = None,
        include_egress_config: Annotated[Optional[StrictBool], Field(description="Include egress config which would be used for displaying the content in portal.  Default value is 'false'.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the query results by input field,  Default value is 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        custom_time_range: Annotated[Optional[StrictStr], Field(description="Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_get_all

        List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param alert_state: Filter by state of the alert instance. Default value is to select all.
        :type alert_state: str
        :param alert_rule: Filter by specific alert rule.  Default value is to select all.
        :type alert_rule: str
        :param smart_group_id: Filter the alerts list by the Smart Group Id. Default value is none.
        :type smart_group_id: str
        :param include_context: Include context which has contextual data specific to the monitor service. Default value is false'
        :type include_context: bool
        :param include_egress_config: Include egress config which would be used for displaying the content in portal.  Default value is 'false'.
        :type include_egress_config: bool
        :param page_count: Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
        :type page_count: int
        :param sort_by: Sort the query results by input field,  Default value is 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param select: This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.
        :type select: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param custom_time_range: Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
        :type custom_time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_type=target_resource_type,
            target_resource_group=target_resource_group,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            alert_rule=alert_rule,
            smart_group_id=smart_group_id,
            include_context=include_context,
            include_egress_config=include_egress_config,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            select=select,
            time_range=time_range,
            custom_time_range=custom_time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_all_serialize(
        self,
        subscription_id,
        api_version,
        target_resource,
        target_resource_type,
        target_resource_group,
        monitor_service,
        monitor_condition,
        severity,
        alert_state,
        alert_rule,
        smart_group_id,
        include_context,
        include_egress_config,
        page_count,
        sort_by,
        sort_order,
        select,
        time_range,
        custom_time_range,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if target_resource is not None:
            
            _query_params.append(('targetResource', target_resource))
            
        if target_resource_type is not None:
            
            _query_params.append(('targetResourceType', target_resource_type))
            
        if target_resource_group is not None:
            
            _query_params.append(('targetResourceGroup', target_resource_group))
            
        if monitor_service is not None:
            
            _query_params.append(('monitorService', monitor_service))
            
        if monitor_condition is not None:
            
            _query_params.append(('monitorCondition', monitor_condition))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if alert_state is not None:
            
            _query_params.append(('alertState', alert_state))
            
        if alert_rule is not None:
            
            _query_params.append(('alertRule', alert_rule))
            
        if smart_group_id is not None:
            
            _query_params.append(('smartGroupId', smart_group_id))
            
        if include_context is not None:
            
            _query_params.append(('includeContext', include_context))
            
        if include_egress_config is not None:
            
            _query_params.append(('includeEgressConfig', include_egress_config))
            
        if page_count is not None:
            
            _query_params.append(('pageCount', page_count))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if select is not None:
            
            _query_params.append(('select', select))
            
        if time_range is not None:
            
            _query_params.append(('timeRange', time_range))
            
        if custom_time_range is not None:
            
            _query_params.append(('customTimeRange', custom_time_range))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_by_id(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Alert:
        """Get a specific alert.

        Get information related to a specific alert

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_by_id_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_by_id_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Alert]:
        """Get a specific alert.

        Get information related to a specific alert

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_by_id_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_by_id_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a specific alert.

        Get information related to a specific alert

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_by_id_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Alert",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_by_id_serialize(
        self,
        subscription_id,
        alert_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if alert_id is not None:
            _path_params['alertId'] = alert_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_history(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertModification:
        """alerts_get_history

        Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_history_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_history_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertModification]:
        """alerts_get_history

        Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_history_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_history_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        alert_id: Annotated[StrictStr, Field(description="Unique ID of an alert instance.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_get_history

        Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param alert_id: Unique ID of an alert instance. (required)
        :type alert_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_history_serialize(
            subscription_id=subscription_id,
            alert_id=alert_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_history_serialize(
        self,
        subscription_id,
        alert_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if alert_id is not None:
            _path_params['alertId'] = alert_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alerts_get_summary(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        groupby: Annotated[StrictStr, Field(description="This parameter allows the result set to be grouped by input fields. For example, groupby=severity,alertstate.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        include_smart_groups_count: Annotated[Optional[StrictBool], Field(description="Include count of the SmartGroups as part of the summary. Default value is 'false'.")] = None,
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the alert instance. Default value is to select all.")] = None,
        alert_rule: Annotated[Optional[StrictStr], Field(description="Filter by specific alert rule.  Default value is to select all.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        custom_time_range: Annotated[Optional[StrictStr], Field(description="Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsSummary:
        """alerts_get_summary

        Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param groupby: This parameter allows the result set to be grouped by input fields. For example, groupby=severity,alertstate. (required)
        :type groupby: str
        :param api_version: API version. (required)
        :type api_version: str
        :param include_smart_groups_count: Include count of the SmartGroups as part of the summary. Default value is 'false'.
        :type include_smart_groups_count: bool
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param alert_state: Filter by state of the alert instance. Default value is to select all.
        :type alert_state: str
        :param alert_rule: Filter by specific alert rule.  Default value is to select all.
        :type alert_rule: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param custom_time_range: Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
        :type custom_time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_summary_serialize(
            subscription_id=subscription_id,
            groupby=groupby,
            api_version=api_version,
            include_smart_groups_count=include_smart_groups_count,
            target_resource=target_resource,
            target_resource_type=target_resource_type,
            target_resource_group=target_resource_group,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            alert_rule=alert_rule,
            time_range=time_range,
            custom_time_range=custom_time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummary",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alerts_get_summary_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        groupby: Annotated[StrictStr, Field(description="This parameter allows the result set to be grouped by input fields. For example, groupby=severity,alertstate.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        include_smart_groups_count: Annotated[Optional[StrictBool], Field(description="Include count of the SmartGroups as part of the summary. Default value is 'false'.")] = None,
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the alert instance. Default value is to select all.")] = None,
        alert_rule: Annotated[Optional[StrictStr], Field(description="Filter by specific alert rule.  Default value is to select all.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        custom_time_range: Annotated[Optional[StrictStr], Field(description="Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsSummary]:
        """alerts_get_summary

        Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param groupby: This parameter allows the result set to be grouped by input fields. For example, groupby=severity,alertstate. (required)
        :type groupby: str
        :param api_version: API version. (required)
        :type api_version: str
        :param include_smart_groups_count: Include count of the SmartGroups as part of the summary. Default value is 'false'.
        :type include_smart_groups_count: bool
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param alert_state: Filter by state of the alert instance. Default value is to select all.
        :type alert_state: str
        :param alert_rule: Filter by specific alert rule.  Default value is to select all.
        :type alert_rule: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param custom_time_range: Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
        :type custom_time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_summary_serialize(
            subscription_id=subscription_id,
            groupby=groupby,
            api_version=api_version,
            include_smart_groups_count=include_smart_groups_count,
            target_resource=target_resource,
            target_resource_type=target_resource_type,
            target_resource_group=target_resource_group,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            alert_rule=alert_rule,
            time_range=time_range,
            custom_time_range=custom_time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummary",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alerts_get_summary_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        groupby: Annotated[StrictStr, Field(description="This parameter allows the result set to be grouped by input fields. For example, groupby=severity,alertstate.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        include_smart_groups_count: Annotated[Optional[StrictBool], Field(description="Include count of the SmartGroups as part of the summary. Default value is 'false'.")] = None,
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        alert_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the alert instance. Default value is to select all.")] = None,
        alert_rule: Annotated[Optional[StrictStr], Field(description="Filter by specific alert rule.  Default value is to select all.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        custom_time_range: Annotated[Optional[StrictStr], Field(description="Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """alerts_get_summary

        Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param groupby: This parameter allows the result set to be grouped by input fields. For example, groupby=severity,alertstate. (required)
        :type groupby: str
        :param api_version: API version. (required)
        :type api_version: str
        :param include_smart_groups_count: Include count of the SmartGroups as part of the summary. Default value is 'false'.
        :type include_smart_groups_count: bool
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param alert_state: Filter by state of the alert instance. Default value is to select all.
        :type alert_state: str
        :param alert_rule: Filter by specific alert rule.  Default value is to select all.
        :type alert_rule: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param custom_time_range: Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
        :type custom_time_range: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alerts_get_summary_serialize(
            subscription_id=subscription_id,
            groupby=groupby,
            api_version=api_version,
            include_smart_groups_count=include_smart_groups_count,
            target_resource=target_resource,
            target_resource_type=target_resource_type,
            target_resource_group=target_resource_group,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            alert_state=alert_state,
            alert_rule=alert_rule,
            time_range=time_range,
            custom_time_range=custom_time_range,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsSummary",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alerts_get_summary_serialize(
        self,
        subscription_id,
        groupby,
        api_version,
        include_smart_groups_count,
        target_resource,
        target_resource_type,
        target_resource_group,
        monitor_service,
        monitor_condition,
        severity,
        alert_state,
        alert_rule,
        time_range,
        custom_time_range,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if groupby is not None:
            
            _query_params.append(('groupby', groupby))
            
        if include_smart_groups_count is not None:
            
            _query_params.append(('includeSmartGroupsCount', include_smart_groups_count))
            
        if target_resource is not None:
            
            _query_params.append(('targetResource', target_resource))
            
        if target_resource_type is not None:
            
            _query_params.append(('targetResourceType', target_resource_type))
            
        if target_resource_group is not None:
            
            _query_params.append(('targetResourceGroup', target_resource_group))
            
        if monitor_service is not None:
            
            _query_params.append(('monitorService', monitor_service))
            
        if monitor_condition is not None:
            
            _query_params.append(('monitorCondition', monitor_condition))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if alert_state is not None:
            
            _query_params.append(('alertState', alert_state))
            
        if alert_rule is not None:
            
            _query_params.append(('alertRule', alert_rule))
            
        if time_range is not None:
            
            _query_params.append(('timeRange', time_range))
            
        if custom_time_range is not None:
            
            _query_params.append(('customTimeRange', custom_time_range))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def operations_list(
        self,
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OperationsList:
        """operations_list

        List all operations available through Azure Alerts Management Resource Provider.

        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OperationsList]:
        """operations_list

        List all operations available through Azure Alerts Management Resource Provider.

        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """operations_list

        List all operations available through Azure Alerts Management Resource Provider.

        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_list_serialize(
        self,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.AlertsManagement/operations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def smart_groups_change_state(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        new_state: Annotated[StrictStr, Field(description="New state of the alert.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SmartGroup:
        """smart_groups_change_state

        Change the state of a Smart Group.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param new_state: New state of the alert. (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_change_state_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def smart_groups_change_state_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        new_state: Annotated[StrictStr, Field(description="New state of the alert.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SmartGroup]:
        """smart_groups_change_state

        Change the state of a Smart Group.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param new_state: New state of the alert. (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_change_state_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def smart_groups_change_state_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        new_state: Annotated[StrictStr, Field(description="New state of the alert.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """smart_groups_change_state

        Change the state of a Smart Group.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param new_state: New state of the alert. (required)
        :type new_state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_change_state_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            new_state=new_state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _smart_groups_change_state_serialize(
        self,
        subscription_id,
        smart_group_id,
        api_version,
        new_state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if smart_group_id is not None:
            _path_params['smartGroupId'] = smart_group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if new_state is not None:
            
            _query_params.append(('newState', new_state))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def smart_groups_get_all(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        smart_group_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the smart group. Default value is to select all.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SmartGroupsList:
        """Get all Smart Groups within a specified subscription

        List all the Smart Groups within a specified subscription. 

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param smart_group_state: Filter by state of the smart group. Default value is to select all.
        :type smart_group_state: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param page_count: Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
        :type page_count: int
        :param sort_by: Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            smart_group_state=smart_group_state,
            time_range=time_range,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def smart_groups_get_all_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        smart_group_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the smart group. Default value is to select all.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SmartGroupsList]:
        """Get all Smart Groups within a specified subscription

        List all the Smart Groups within a specified subscription. 

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param smart_group_state: Filter by state of the smart group. Default value is to select all.
        :type smart_group_state: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param page_count: Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
        :type page_count: int
        :param sort_by: Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            smart_group_state=smart_group_state,
            time_range=time_range,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def smart_groups_get_all_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        target_resource: Annotated[Optional[StrictStr], Field(description="Filter by target resource( which is full ARM ID) Default value is select all.")] = None,
        target_resource_group: Annotated[Optional[StrictStr], Field(description="Filter by target resource group name. Default value is select all.")] = None,
        target_resource_type: Annotated[Optional[StrictStr], Field(description="Filter by target resource type. Default value is select all.")] = None,
        monitor_service: Annotated[Optional[StrictStr], Field(description="Filter by monitor service which generates the alert instance. Default value is select all.")] = None,
        monitor_condition: Annotated[Optional[StrictStr], Field(description="Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Filter by severity.  Default value is select all.")] = None,
        smart_group_state: Annotated[Optional[StrictStr], Field(description="Filter by state of the smart group. Default value is to select all.")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Filter by time range by below listed values. Default value is 1 day.")] = None,
        page_count: Annotated[Optional[StrictInt], Field(description="Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all Smart Groups within a specified subscription

        List all the Smart Groups within a specified subscription. 

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param target_resource: Filter by target resource( which is full ARM ID) Default value is select all.
        :type target_resource: str
        :param target_resource_group: Filter by target resource group name. Default value is select all.
        :type target_resource_group: str
        :param target_resource_type: Filter by target resource type. Default value is select all.
        :type target_resource_type: str
        :param monitor_service: Filter by monitor service which generates the alert instance. Default value is select all.
        :type monitor_service: str
        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
        :type monitor_condition: str
        :param severity: Filter by severity.  Default value is select all.
        :type severity: str
        :param smart_group_state: Filter by state of the smart group. Default value is to select all.
        :type smart_group_state: str
        :param time_range: Filter by time range by below listed values. Default value is 1 day.
        :type time_range: str
        :param page_count: Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
        :type page_count: int
        :param sort_by: Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.
        :type sort_by: str
        :param sort_order: Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_all_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            target_resource=target_resource,
            target_resource_group=target_resource_group,
            target_resource_type=target_resource_type,
            monitor_service=monitor_service,
            monitor_condition=monitor_condition,
            severity=severity,
            smart_group_state=smart_group_state,
            time_range=time_range,
            page_count=page_count,
            sort_by=sort_by,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupsList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _smart_groups_get_all_serialize(
        self,
        subscription_id,
        api_version,
        target_resource,
        target_resource_group,
        target_resource_type,
        monitor_service,
        monitor_condition,
        severity,
        smart_group_state,
        time_range,
        page_count,
        sort_by,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if target_resource is not None:
            
            _query_params.append(('targetResource', target_resource))
            
        if target_resource_group is not None:
            
            _query_params.append(('targetResourceGroup', target_resource_group))
            
        if target_resource_type is not None:
            
            _query_params.append(('targetResourceType', target_resource_type))
            
        if monitor_service is not None:
            
            _query_params.append(('monitorService', monitor_service))
            
        if monitor_condition is not None:
            
            _query_params.append(('monitorCondition', monitor_condition))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if smart_group_state is not None:
            
            _query_params.append(('smartGroupState', smart_group_state))
            
        if time_range is not None:
            
            _query_params.append(('timeRange', time_range))
            
        if page_count is not None:
            
            _query_params.append(('pageCount', page_count))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def smart_groups_get_by_id(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SmartGroup:
        """Get information related to a specific Smart Group.

        Get information related to a specific Smart Group.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_by_id_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def smart_groups_get_by_id_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SmartGroup]:
        """Get information related to a specific Smart Group.

        Get information related to a specific Smart Group.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_by_id_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def smart_groups_get_by_id_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get information related to a specific Smart Group.

        Get information related to a specific Smart Group.

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_by_id_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _smart_groups_get_by_id_serialize(
        self,
        subscription_id,
        smart_group_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if smart_group_id is not None:
            _path_params['smartGroupId'] = smart_group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def smart_groups_get_history(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SmartGroupModification:
        """smart_groups_get_history

        Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_history_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def smart_groups_get_history_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SmartGroupModification]:
        """smart_groups_get_history

        Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_history_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def smart_groups_get_history_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.")],
        smart_group_id: Annotated[StrictStr, Field(description="Smart group unique id. ")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """smart_groups_get_history

        Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .

        :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
        :type subscription_id: str
        :param smart_group_id: Smart group unique id.  (required)
        :type smart_group_id: str
        :param api_version: API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._smart_groups_get_history_serialize(
            subscription_id=subscription_id,
            smart_group_id=smart_group_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SmartGroupModification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _smart_groups_get_history_serialize(
        self,
        subscription_id,
        smart_group_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if smart_group_id is not None:
            _path_params['smartGroupId'] = smart_group_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



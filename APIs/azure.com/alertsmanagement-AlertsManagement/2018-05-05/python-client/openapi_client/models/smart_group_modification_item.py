# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.

    The version of the OpenAPI document: 2018-05-05
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SmartGroupModificationItem(BaseModel):
    """
    smartGroup modification item.
    """ # noqa: E501
    comments: Optional[StrictStr] = Field(default=None, description="Modification comments")
    description: Optional[StrictStr] = Field(default=None, description="Description of the modification")
    modification_event: Optional[StrictStr] = Field(default=None, description="Reason for the modification", alias="modificationEvent")
    modified_at: Optional[StrictStr] = Field(default=None, description="Modified date and time", alias="modifiedAt")
    modified_by: Optional[StrictStr] = Field(default=None, description="Modified user details (Principal client name)", alias="modifiedBy")
    new_value: Optional[StrictStr] = Field(default=None, description="New value", alias="newValue")
    old_value: Optional[StrictStr] = Field(default=None, description="Old value", alias="oldValue")
    __properties: ClassVar[List[str]] = ["comments", "description", "modificationEvent", "modifiedAt", "modifiedBy", "newValue", "oldValue"]

    @field_validator('modification_event')
    def modification_event_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SmartGroupCreated', 'StateChange', 'AlertAdded', 'AlertRemoved']):
            raise ValueError("must be one of enum values ('SmartGroupCreated', 'StateChange', 'AlertAdded', 'AlertRemoved')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmartGroupModificationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmartGroupModificationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "description": obj.get("description"),
            "modificationEvent": obj.get("modificationEvent"),
            "modifiedAt": obj.get("modifiedAt"),
            "modifiedBy": obj.get("modifiedBy"),
            "newValue": obj.get("newValue"),
            "oldValue": obj.get("oldValue")
        })
        return _obj



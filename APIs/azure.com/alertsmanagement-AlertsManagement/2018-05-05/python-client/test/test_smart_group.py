# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.

    The version of the OpenAPI document: 2018-05-05
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.smart_group import SmartGroup

class TestSmartGroup(unittest.TestCase):
    """SmartGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SmartGroup:
        """Test SmartGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SmartGroup`
        """
        model = SmartGroup()
        if include_optional:
            return SmartGroup(
                properties = openapi_client.models.smart_group_properties.smartGroupProperties(
                    alert_severities = [
                        openapi_client.models.smart_group_aggregated_property.smartGroupAggregatedProperty(
                            count = 56, 
                            name = '', )
                        ], 
                    alert_states = [
                        openapi_client.models.smart_group_aggregated_property.smartGroupAggregatedProperty(
                            count = 56, 
                            name = '', )
                        ], 
                    alerts_count = 56, 
                    last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_modified_user_name = '', 
                    monitor_conditions = [
                        
                        ], 
                    monitor_services = [
                        
                        ], 
                    next_link = '', 
                    resource_groups = [
                        
                        ], 
                    resource_types = [
                        
                        ], 
                    resources = [
                        
                        ], 
                    severity = 'Sev0', 
                    smart_group_state = 'New', 
                    start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                id = '',
                name = '',
                type = ''
            )
        else:
            return SmartGroup(
        )
        """

    def testSmartGroup(self):
        """Test SmartGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

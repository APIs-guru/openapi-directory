# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.

    The version of the OpenAPI document: 2018-05-05
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.essentials import Essentials

class TestEssentials(unittest.TestCase):
    """Essentials unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Essentials:
        """Test Essentials
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Essentials`
        """
        model = Essentials()
        if include_optional:
            return Essentials(
                alert_rule = '',
                alert_state = 'New',
                last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_modified_user_name = '',
                monitor_condition = 'Fired',
                monitor_condition_resolved_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                monitor_service = 'Application Insights',
                severity = 'Sev0',
                signal_type = 'Metric',
                smart_group_id = '',
                smart_grouping_reason = '',
                source_created_id = '',
                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                target_resource = '',
                target_resource_group = '',
                target_resource_name = '',
                target_resource_type = ''
            )
        else:
            return Essentials(
        )
        """

    def testEssentials(self):
        """Test Essentials"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

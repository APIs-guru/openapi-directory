# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.

    The version of the OpenAPI document: 2019-05-05-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.conditions import Conditions
from openapi_client.models.scope import Scope
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.action_group import ActionGroup
    from openapi_client.models.diagnostics import Diagnostics
    from openapi_client.models.suppression import Suppression

class ActionRuleProperties(BaseModel):
    """
    Action rule properties defining scope, conditions, suppression logic for action rule
    """ # noqa: E501
    conditions: Optional[Conditions] = None
    created_at: Optional[datetime] = Field(default=None, description="Creation time of action rule. Date-Time in ISO-8601 format.", alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, description="Created by user name.", alias="createdBy")
    description: Optional[StrictStr] = Field(default=None, description="Description of action rule")
    last_modified_at: Optional[datetime] = Field(default=None, description="Last updated time of action rule. Date-Time in ISO-8601 format.", alias="lastModifiedAt")
    last_modified_by: Optional[StrictStr] = Field(default=None, description="Last modified by user name.", alias="lastModifiedBy")
    scope: Optional[Scope] = None
    status: Optional[StrictStr] = Field(default=None, description="Indicates if the given action rule is enabled or disabled")
    type: StrictStr = Field(description="Indicates type of action rule")
    __properties: ClassVar[List[str]] = ["conditions", "createdAt", "createdBy", "description", "lastModifiedAt", "lastModifiedBy", "scope", "status", "type"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Suppression', 'ActionGroup', 'Diagnostics']):
            raise ValueError("must be one of enum values ('Suppression', 'ActionGroup', 'Diagnostics')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ActionGroup': 'ActionGroup','Diagnostics': 'Diagnostics','Suppression': 'Suppression'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ActionGroup, Diagnostics, Suppression]]:
        """Create an instance of ActionRuleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "created_by",
            "last_modified_at",
            "last_modified_by",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ActionGroup, Diagnostics, Suppression]]:
        """Create an instance of ActionRuleProperties from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ActionGroup':
            return import_module("openapi_client.models.action_group").ActionGroup.from_dict(obj)
        if object_type ==  'Diagnostics':
            return import_module("openapi_client.models.diagnostics").Diagnostics.from_dict(obj)
        if object_type ==  'Suppression':
            return import_module("openapi_client.models.suppression").Suppression.from_dict(obj)

        raise ValueError("ActionRuleProperties failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



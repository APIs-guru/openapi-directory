# coding: utf-8

"""
    Azure Alerts Management Service Resource Provider

    Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.

    The version of the OpenAPI document: 2019-05-05-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Essentials(BaseModel):
    """
    This object contains consistent fields across different monitor services.
    """ # noqa: E501
    alert_rule: Optional[StrictStr] = Field(default=None, description="Rule(monitor) which fired alert instance. Depending on the monitor service,  this would be ARM id or name of the rule.", alias="alertRule")
    alert_state: Optional[StrictStr] = Field(default=None, description="Alert object state, which can be modified by the user.", alias="alertState")
    last_modified_date_time: Optional[datetime] = Field(default=None, description="Last modification time(ISO-8601 format) of alert instance.", alias="lastModifiedDateTime")
    last_modified_user_name: Optional[StrictStr] = Field(default=None, description="User who last modified the alert, in case of monitor service updates user would be 'system', otherwise name of the user.", alias="lastModifiedUserName")
    monitor_condition: Optional[StrictStr] = Field(default=None, description="Condition of the rule at the monitor service. It represents whether the underlying conditions have crossed the defined alert rule thresholds.", alias="monitorCondition")
    monitor_condition_resolved_date_time: Optional[datetime] = Field(default=None, description="Resolved time(ISO-8601 format) of alert instance. This will be updated when monitor service resolves the alert instance because the rule condition is no longer met.", alias="monitorConditionResolvedDateTime")
    monitor_service: Optional[StrictStr] = Field(default=None, description="Monitor service on which the rule(monitor) is set.", alias="monitorService")
    severity: Optional[StrictStr] = Field(default=None, description="Severity of alert Sev0 being highest and Sev4 being lowest.")
    signal_type: Optional[StrictStr] = Field(default=None, description="The type of signal the alert is based on, which could be metrics, logs or activity logs.", alias="signalType")
    smart_group_id: Optional[StrictStr] = Field(default=None, description="Unique Id of the smart group", alias="smartGroupId")
    smart_grouping_reason: Optional[StrictStr] = Field(default=None, description="Verbose reason describing the reason why this alert instance is added to a smart group", alias="smartGroupingReason")
    source_created_id: Optional[StrictStr] = Field(default=None, description="Unique Id created by monitor service for each alert instance. This could be used to track the issue at the monitor service, in case of Nagios, Zabbix, SCOM etc.", alias="sourceCreatedId")
    start_date_time: Optional[datetime] = Field(default=None, description="Creation time(ISO-8601 format) of alert instance.", alias="startDateTime")
    target_resource: Optional[StrictStr] = Field(default=None, description="Target ARM resource, on which alert got created.", alias="targetResource")
    target_resource_group: Optional[StrictStr] = Field(default=None, description="Resource group of target ARM resource, on which alert got created.", alias="targetResourceGroup")
    target_resource_name: Optional[StrictStr] = Field(default=None, description="Name of the target ARM resource name, on which alert got created.", alias="targetResourceName")
    target_resource_type: Optional[StrictStr] = Field(default=None, description="Resource type of target ARM resource, on which alert got created.", alias="targetResourceType")
    __properties: ClassVar[List[str]] = ["alertRule", "alertState", "lastModifiedDateTime", "lastModifiedUserName", "monitorCondition", "monitorConditionResolvedDateTime", "monitorService", "severity", "signalType", "smartGroupId", "smartGroupingReason", "sourceCreatedId", "startDateTime", "targetResource", "targetResourceGroup", "targetResourceName", "targetResourceType"]

    @field_validator('alert_state')
    def alert_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['New', 'Acknowledged', 'Closed']):
            raise ValueError("must be one of enum values ('New', 'Acknowledged', 'Closed')")
        return value

    @field_validator('monitor_condition')
    def monitor_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Fired', 'Resolved']):
            raise ValueError("must be one of enum values ('Fired', 'Resolved')")
        return value

    @field_validator('monitor_service')
    def monitor_service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Application Insights', 'ActivityLog Administrative', 'ActivityLog Security', 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale', 'Log Analytics', 'Nagios', 'Platform', 'SCOM', 'ServiceHealth', 'SmartDetector', 'VM Insights', 'Zabbix']):
            raise ValueError("must be one of enum values ('Application Insights', 'ActivityLog Administrative', 'ActivityLog Security', 'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale', 'Log Analytics', 'Nagios', 'Platform', 'SCOM', 'ServiceHealth', 'SmartDetector', 'VM Insights', 'Zabbix')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4']):
            raise ValueError("must be one of enum values ('Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4')")
        return value

    @field_validator('signal_type')
    def signal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Metric', 'Log', 'Unknown']):
            raise ValueError("must be one of enum values ('Metric', 'Log', 'Unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Essentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "alert_rule",
            "alert_state",
            "last_modified_date_time",
            "last_modified_user_name",
            "monitor_condition",
            "monitor_condition_resolved_date_time",
            "monitor_service",
            "severity",
            "signal_type",
            "smart_group_id",
            "smart_grouping_reason",
            "source_created_id",
            "start_date_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Essentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertRule": obj.get("alertRule"),
            "alertState": obj.get("alertState"),
            "lastModifiedDateTime": obj.get("lastModifiedDateTime"),
            "lastModifiedUserName": obj.get("lastModifiedUserName"),
            "monitorCondition": obj.get("monitorCondition"),
            "monitorConditionResolvedDateTime": obj.get("monitorConditionResolvedDateTime"),
            "monitorService": obj.get("monitorService"),
            "severity": obj.get("severity"),
            "signalType": obj.get("signalType"),
            "smartGroupId": obj.get("smartGroupId"),
            "smartGroupingReason": obj.get("smartGroupingReason"),
            "sourceCreatedId": obj.get("sourceCreatedId"),
            "startDateTime": obj.get("startDateTime"),
            "targetResource": obj.get("targetResource"),
            "targetResourceGroup": obj.get("targetResourceGroup"),
            "targetResourceName": obj.get("targetResourceName"),
            "targetResourceType": obj.get("targetResourceType")
        })
        return _obj



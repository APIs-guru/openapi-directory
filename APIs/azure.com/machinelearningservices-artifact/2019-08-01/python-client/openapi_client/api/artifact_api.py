# coding: utf-8

"""
    Artifact

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from openapi_client.models.artifact import Artifact
from openapi_client.models.artifact_container_sas import ArtifactContainerSas
from openapi_client.models.artifact_content_information import ArtifactContentInformation
from openapi_client.models.artifact_id_list import ArtifactIdList
from openapi_client.models.artifact_path_list import ArtifactPathList
from openapi_client.models.batch_artifact_content_information_result import BatchArtifactContentInformationResult
from openapi_client.models.paginated_artifact_content_information_list import PaginatedArtifactContentInformationList
from openapi_client.models.paginated_artifact_list import PaginatedArtifactList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ArtifactApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def artifacts_batch_create_empty_artifacts(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_paths: Annotated[ArtifactPathList, Field(description="The list of Artifact paths to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BatchArtifactContentInformationResult:
        """Create a batch of empty Artifacts.

        Create a Batch of empty Artifacts from the supplied paths.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_paths: The list of Artifact paths to create. (required)
        :type artifact_paths: ArtifactPathList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_create_empty_artifacts_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_paths=artifact_paths,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_batch_create_empty_artifacts_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_paths: Annotated[ArtifactPathList, Field(description="The list of Artifact paths to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BatchArtifactContentInformationResult]:
        """Create a batch of empty Artifacts.

        Create a Batch of empty Artifacts from the supplied paths.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_paths: The list of Artifact paths to create. (required)
        :type artifact_paths: ArtifactPathList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_create_empty_artifacts_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_paths=artifact_paths,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_batch_create_empty_artifacts_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_paths: Annotated[ArtifactPathList, Field(description="The list of Artifact paths to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a batch of empty Artifacts.

        Create a Batch of empty Artifacts from the supplied paths.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_paths: The list of Artifact paths to create. (required)
        :type artifact_paths: ArtifactPathList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_create_empty_artifacts_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_paths=artifact_paths,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_batch_create_empty_artifacts_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        artifact_paths,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if artifact_paths is not None:
            _body_params = artifact_paths


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_batch_get_by_id(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact_ids: Annotated[ArtifactIdList, Field(description="The command for Batch Artifact get request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BatchArtifactContentInformationResult:
        """Get Batch Artifacts by Ids.

        Get Batch Artifacts by the specific Ids.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact_ids: The command for Batch Artifact get request. (required)
        :type artifact_ids: ArtifactIdList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_get_by_id_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact_ids=artifact_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_batch_get_by_id_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact_ids: Annotated[ArtifactIdList, Field(description="The command for Batch Artifact get request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BatchArtifactContentInformationResult]:
        """Get Batch Artifacts by Ids.

        Get Batch Artifacts by the specific Ids.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact_ids: The command for Batch Artifact get request. (required)
        :type artifact_ids: ArtifactIdList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_get_by_id_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact_ids=artifact_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_batch_get_by_id_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact_ids: Annotated[ArtifactIdList, Field(description="The command for Batch Artifact get request.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Batch Artifacts by Ids.

        Get Batch Artifacts by the specific Ids.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact_ids: The command for Batch Artifact get request. (required)
        :type artifact_ids: ArtifactIdList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_get_by_id_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact_ids=artifact_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_batch_get_by_id_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        artifact_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if artifact_ids is not None:
            _body_params = artifact_ids


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/batch/metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_batch_get_storage_by_id(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact_ids: Annotated[ArtifactIdList, Field(description="The list of artifactIds to get.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BatchArtifactContentInformationResult:
        """Get Batch Artifacts storage by Ids.

        Get Batch Artifacts storage by specific Ids.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact_ids: The list of artifactIds to get. (required)
        :type artifact_ids: ArtifactIdList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_get_storage_by_id_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact_ids=artifact_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_batch_get_storage_by_id_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact_ids: Annotated[ArtifactIdList, Field(description="The list of artifactIds to get.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BatchArtifactContentInformationResult]:
        """Get Batch Artifacts storage by Ids.

        Get Batch Artifacts storage by specific Ids.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact_ids: The list of artifactIds to get. (required)
        :type artifact_ids: ArtifactIdList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_get_storage_by_id_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact_ids=artifact_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_batch_get_storage_by_id_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact_ids: Annotated[ArtifactIdList, Field(description="The list of artifactIds to get.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Batch Artifacts storage by Ids.

        Get Batch Artifacts storage by specific Ids.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact_ids: The list of artifactIds to get. (required)
        :type artifact_ids: ArtifactIdList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_get_storage_by_id_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact_ids=artifact_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchArtifactContentInformationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_batch_get_storage_by_id_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        artifact_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if artifact_ids is not None:
            _body_params = artifact_ids


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/storageuri/batch/metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_batch_ingest_from_sas(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_container_sas: Annotated[ArtifactContainerSas, Field(description="The artifact container shared access signature to use for batch ingest.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedArtifactList:
        """Batch ingest using shared access signature.

        Ingest Batch Artifacts using shared access signature.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_container_sas: The artifact container shared access signature to use for batch ingest. (required)
        :type artifact_container_sas: ArtifactContainerSas
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_ingest_from_sas_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_container_sas=artifact_container_sas,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_batch_ingest_from_sas_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_container_sas: Annotated[ArtifactContainerSas, Field(description="The artifact container shared access signature to use for batch ingest.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedArtifactList]:
        """Batch ingest using shared access signature.

        Ingest Batch Artifacts using shared access signature.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_container_sas: The artifact container shared access signature to use for batch ingest. (required)
        :type artifact_container_sas: ArtifactContainerSas
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_ingest_from_sas_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_container_sas=artifact_container_sas,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_batch_ingest_from_sas_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_container_sas: Annotated[ArtifactContainerSas, Field(description="The artifact container shared access signature to use for batch ingest.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Batch ingest using shared access signature.

        Ingest Batch Artifacts using shared access signature.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_container_sas: The artifact container shared access signature to use for batch ingest. (required)
        :type artifact_container_sas: ArtifactContainerSas
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_batch_ingest_from_sas_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_container_sas=artifact_container_sas,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_batch_ingest_from_sas_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        artifact_container_sas,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if artifact_container_sas is not None:
            _body_params = artifact_container_sas


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/ingest/containersas',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_create(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact: Annotated[Artifact, Field(description="The Artifact details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Artifact:
        """Create Artifact.

        Create an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact: The Artifact details. (required)
        :type artifact: Artifact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_create_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact=artifact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_create_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact: Annotated[Artifact, Field(description="The Artifact details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Artifact]:
        """Create Artifact.

        Create an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact: The Artifact details. (required)
        :type artifact: Artifact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_create_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact=artifact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_create_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact: Annotated[Artifact, Field(description="The Artifact details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Artifact.

        Create an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact: The Artifact details. (required)
        :type artifact: Artifact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_create_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact=artifact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_create_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        artifact,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if artifact is not None:
            _body_params = artifact


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_delete_batch_meta_data(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_paths: Annotated[ArtifactPathList, Field(description="The list of Artifact paths to delete.")],
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true, the delete cannot be reverted at a later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Batch of Artifact Metadata.

        Delete a Batch of Artifact Metadata.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_paths: The list of Artifact paths to delete. (required)
        :type artifact_paths: ArtifactPathList
        :param hard_delete: If set to true, the delete cannot be reverted at a later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_batch_meta_data_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_paths=artifact_paths,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_delete_batch_meta_data_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_paths: Annotated[ArtifactPathList, Field(description="The list of Artifact paths to delete.")],
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true, the delete cannot be reverted at a later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Batch of Artifact Metadata.

        Delete a Batch of Artifact Metadata.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_paths: The list of Artifact paths to delete. (required)
        :type artifact_paths: ArtifactPathList
        :param hard_delete: If set to true, the delete cannot be reverted at a later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_batch_meta_data_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_paths=artifact_paths,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_delete_batch_meta_data_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        artifact_paths: Annotated[ArtifactPathList, Field(description="The list of Artifact paths to delete.")],
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true, the delete cannot be reverted at a later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Batch of Artifact Metadata.

        Delete a Batch of Artifact Metadata.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param artifact_paths: The list of Artifact paths to delete. (required)
        :type artifact_paths: ArtifactPathList
        :param hard_delete: If set to true, the delete cannot be reverted at a later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_batch_meta_data_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            artifact_paths=artifact_paths,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_delete_batch_meta_data_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        artifact_paths,
        hard_delete,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if hard_delete is not None:
            
            _query_params.append(('hardDelete', hard_delete))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if artifact_paths is not None:
            _body_params = artifact_paths


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/metadata:delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_delete_meta_data(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true. The delete cannot be revert at later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Artifact Metadata.

        Delete an Artifact Metadata.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param hard_delete: If set to true. The delete cannot be revert at later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_meta_data_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_delete_meta_data_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true. The delete cannot be revert at later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Artifact Metadata.

        Delete an Artifact Metadata.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param hard_delete: If set to true. The delete cannot be revert at later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_meta_data_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_delete_meta_data_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true. The delete cannot be revert at later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Artifact Metadata.

        Delete an Artifact Metadata.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param hard_delete: If set to true. The delete cannot be revert at later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_meta_data_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_delete_meta_data_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        hard_delete,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if hard_delete is not None:
            
            _query_params.append(('hardDelete', hard_delete))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_delete_meta_data_in_container(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true. The delete cannot be revert at later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Artifact Metadata.

        Delete Artifact Metadata in a specific container.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param hard_delete: If set to true. The delete cannot be revert at later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_meta_data_in_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_delete_meta_data_in_container_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true. The delete cannot be revert at later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Artifact Metadata.

        Delete Artifact Metadata in a specific container.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param hard_delete: If set to true. The delete cannot be revert at later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_meta_data_in_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_delete_meta_data_in_container_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        hard_delete: Annotated[Optional[StrictBool], Field(description="If set to true. The delete cannot be revert at later time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Artifact Metadata.

        Delete Artifact Metadata in a specific container.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param hard_delete: If set to true. The delete cannot be revert at later time.
        :type hard_delete: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_delete_meta_data_in_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            hard_delete=hard_delete,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_delete_meta_data_in_container_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        hard_delete,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if hard_delete is not None:
            
            _query_params.append(('hardDelete', hard_delete))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_download(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Get Artifact content by Id.

        Get Artifact content of a specific Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_download_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_download_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Get Artifact content by Id.

        Get Artifact content of a specific Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_download_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_download_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Artifact content by Id.

        Get Artifact content of a specific Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_download_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_download_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/octet-stream'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/content',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[StrictStr, Field(description="The Artifact Path.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Artifact:
        """Get Artifact metadata by Id.

        Get Artifact metadata for a specific Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path. (required)
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[StrictStr, Field(description="The Artifact Path.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Artifact]:
        """Get Artifact metadata by Id.

        Get Artifact metadata for a specific Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path. (required)
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[StrictStr, Field(description="The Artifact Path.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Artifact metadata by Id.

        Get Artifact metadata for a specific Id.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path. (required)
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_get_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_get_content_information(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ArtifactContentInformation:
        """Get Artifact content information.

        Get content information of an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_content_information_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_get_content_information_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ArtifactContentInformation]:
        """Get Artifact content information.

        Get content information of an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_content_information_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_get_content_information_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Artifact content information.

        Get content information of an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_content_information_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_get_content_information_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/contentinfo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_get_sas(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ArtifactContentInformation:
        """Get writable shared access signature for Artifact.

        Get writable shared access signature for a specific Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_sas_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_get_sas_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ArtifactContentInformation]:
        """Get writable shared access signature for Artifact.

        Get writable shared access signature for a specific Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_sas_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_get_sas_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get writable shared access signature for Artifact.

        Get writable shared access signature for a specific Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_sas_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_get_sas_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/write',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_get_storage_content_information(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ArtifactContentInformation:
        """Get Artifact storage content information.

        Get storage content information of an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_storage_content_information_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_get_storage_content_information_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ArtifactContentInformation]:
        """Get Artifact storage content information.

        Get storage content information of an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_storage_content_information_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_get_storage_content_information_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Artifact storage content information.

        Get storage content information of an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_get_storage_content_information_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ArtifactContentInformation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_get_storage_content_information_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/contentinfo/storageuri',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_list_in_container(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedArtifactList:
        """Get Artifacts metadata in a container or path.

        Get Artifacts metadata in a specific container or path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_in_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_list_in_container_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedArtifactList]:
        """Get Artifacts metadata in a container or path.

        Get Artifacts metadata in a specific container or path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_in_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_list_in_container_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Artifacts metadata in a container or path.

        Get Artifacts metadata in a specific container or path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_in_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_list_in_container_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        continuation_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if continuation_token is not None:
            
            _query_params.append(('continuationToken', continuation_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_list_sas_by_prefix(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedArtifactContentInformationList:
        """Get shared access signature for an Artifact

        Get shared access signature for an Artifact in specific path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_sas_by_prefix_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactContentInformationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_list_sas_by_prefix_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedArtifactContentInformationList]:
        """Get shared access signature for an Artifact

        Get shared access signature for an Artifact in specific path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_sas_by_prefix_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactContentInformationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_list_sas_by_prefix_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get shared access signature for an Artifact

        Get shared access signature for an Artifact in specific path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_sas_by_prefix_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactContentInformationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_list_sas_by_prefix_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        continuation_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if continuation_token is not None:
            
            _query_params.append(('continuationToken', continuation_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/prefix/contentinfo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_list_storage_uri_by_prefix(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedArtifactContentInformationList:
        """Get storage Uri for Artifacts in a path.

        Get storage Uri for Artifacts in a specific path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_storage_uri_by_prefix_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactContentInformationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_list_storage_uri_by_prefix_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedArtifactContentInformationList]:
        """Get storage Uri for Artifacts in a path.

        Get storage Uri for Artifacts in a specific path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_storage_uri_by_prefix_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactContentInformationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_list_storage_uri_by_prefix_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="The continuation token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get storage Uri for Artifacts in a path.

        Get storage Uri for Artifacts in a specific path.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param path: The Artifact Path.
        :type path: str
        :param continuation_token: The continuation token.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_list_storage_uri_by_prefix_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            path=path,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedArtifactContentInformationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_list_storage_uri_by_prefix_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        path,
        continuation_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if continuation_token is not None:
            
            _query_params.append(('continuationToken', continuation_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/prefix/contentinfo/storageuri',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_register(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact: Annotated[Artifact, Field(description="The Artifact creation details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Artifact:
        """Create an Artifact for an existing data location.

        Create an Artifact for an existing dataPath.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact: The Artifact creation details. (required)
        :type artifact: Artifact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_register_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact=artifact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_register_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact: Annotated[Artifact, Field(description="The Artifact creation details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Artifact]:
        """Create an Artifact for an existing data location.

        Create an Artifact for an existing dataPath.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact: The Artifact creation details. (required)
        :type artifact: Artifact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_register_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact=artifact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_register_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        artifact: Annotated[Artifact, Field(description="The Artifact creation details.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an Artifact for an existing data location.

        Create an Artifact for an existing dataPath.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param artifact: The Artifact creation details. (required)
        :type artifact: Artifact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_register_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            artifact=artifact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_register_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        artifact,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if artifact is not None:
            _body_params = artifact


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/register',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def artifacts_upload(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        content: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The file upload.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        index: Annotated[Optional[StrictInt], Field(description="The index.")] = None,
        append: Annotated[Optional[StrictBool], Field(description="Whether or not to append the content or replace it.")] = None,
        allow_overwrite: Annotated[Optional[StrictBool], Field(description="whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Artifact:
        """Upload Artifact content.

        Upload content to an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param content: The file upload. (required)
        :type content: bytearray
        :param path: The Artifact Path.
        :type path: str
        :param index: The index.
        :type index: int
        :param append: Whether or not to append the content or replace it.
        :type append: bool
        :param allow_overwrite: whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists
        :type allow_overwrite: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_upload_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            content=content,
            path=path,
            index=index,
            append=append,
            allow_overwrite=allow_overwrite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def artifacts_upload_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        content: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The file upload.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        index: Annotated[Optional[StrictInt], Field(description="The index.")] = None,
        append: Annotated[Optional[StrictBool], Field(description="Whether or not to append the content or replace it.")] = None,
        allow_overwrite: Annotated[Optional[StrictBool], Field(description="whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Artifact]:
        """Upload Artifact content.

        Upload content to an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param content: The file upload. (required)
        :type content: bytearray
        :param path: The Artifact Path.
        :type path: str
        :param index: The index.
        :type index: int
        :param append: Whether or not to append the content or replace it.
        :type append: bool
        :param allow_overwrite: whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists
        :type allow_overwrite: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_upload_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            content=content,
            path=path,
            index=index,
            append=append,
            allow_overwrite=allow_overwrite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def artifacts_upload_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Azure Subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The Name of the resource group in which the workspace is located.")],
        workspace_name: Annotated[StrictStr, Field(description="The name of the workspace.")],
        origin: Annotated[StrictStr, Field(description="The origin of the Artifact.")],
        container: Annotated[StrictStr, Field(description="The container name.")],
        content: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The file upload.")],
        path: Annotated[Optional[StrictStr], Field(description="The Artifact Path.")] = None,
        index: Annotated[Optional[StrictInt], Field(description="The index.")] = None,
        append: Annotated[Optional[StrictBool], Field(description="Whether or not to append the content or replace it.")] = None,
        allow_overwrite: Annotated[Optional[StrictBool], Field(description="whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload Artifact content.

        Upload content to an Artifact.

        :param subscription_id: The Azure Subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located. (required)
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. (required)
        :type workspace_name: str
        :param origin: The origin of the Artifact. (required)
        :type origin: str
        :param container: The container name. (required)
        :type container: str
        :param content: The file upload. (required)
        :type content: bytearray
        :param path: The Artifact Path.
        :type path: str
        :param index: The index.
        :type index: int
        :param append: Whether or not to append the content or replace it.
        :type append: bool
        :param allow_overwrite: whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists
        :type allow_overwrite: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._artifacts_upload_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            origin=origin,
            container=container,
            content=content,
            path=path,
            index=index,
            append=append,
            allow_overwrite=allow_overwrite,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Artifact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _artifacts_upload_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        origin,
        container,
        content,
        path,
        index,
        append,
        allow_overwrite,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if origin is not None:
            _path_params['origin'] = origin
        if container is not None:
            _path_params['container'] = container
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if index is not None:
            
            _query_params.append(('index', index))
            
        if append is not None:
            
            _query_params.append(('append', append))
            
        if allow_overwrite is not None:
            
            _query_params.append(('allowOverwrite', allow_overwrite))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if content is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(content, str):
                with open(content, "rb") as _fp:
                    _body_params = _fp.read()
            elif isinstance(content, tuple):
                # drop the filename from the tuple
                _body_params = content[1]
            else:
                _body_params = content


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/octet-stream'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/content',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



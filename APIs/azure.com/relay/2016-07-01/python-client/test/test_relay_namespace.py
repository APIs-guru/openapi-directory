# coding: utf-8

"""
    Relay

    Use these API to manage Azure Relay resources through Azure Resources Manager.

    The version of the OpenAPI document: 2016-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.relay_namespace import RelayNamespace

class TestRelayNamespace(unittest.TestCase):
    """RelayNamespace unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RelayNamespace:
        """Test RelayNamespace
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RelayNamespace`
        """
        model = RelayNamespace()
        if include_optional:
            return RelayNamespace(
                properties = openapi_client.models.relay_namespace_properties.RelayNamespaceProperties(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    metric_id = '', 
                    provisioning_state = '', 
                    service_bus_endpoint = '', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                sku = openapi_client.models.sku.Sku(
                    name = 'Standard', 
                    tier = 'Standard', ),
                location = '',
                tags = {
                    'key' : ''
                    },
                id = '',
                name = '',
                type = ''
            )
        else:
            return RelayNamespace(
                location = '',
        )
        """

    def testRelayNamespace(self):
        """Test RelayNamespace"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

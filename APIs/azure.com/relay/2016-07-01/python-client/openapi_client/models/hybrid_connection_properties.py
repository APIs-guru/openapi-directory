# coding: utf-8

"""
    Relay

    Use these API to manage Azure Relay resources through Azure Resources Manager.

    The version of the OpenAPI document: 2016-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HybridConnectionProperties(BaseModel):
    """
    Properties of the HybridConnection.
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="The time the HybridConnection was created.", alias="createdAt")
    listener_count: Optional[Annotated[int, Field(le=25, strict=True, ge=1)]] = Field(default=None, description="The number of listeners for this HybridConnection. min : 1 and max:25 supported", alias="listenerCount")
    requires_client_authorization: Optional[StrictBool] = Field(default=None, description="true if client authorization is needed for this HybridConnection; otherwise, false.", alias="requiresClientAuthorization")
    updated_at: Optional[datetime] = Field(default=None, description="The time the namespace was updated.", alias="updatedAt")
    user_metadata: Optional[StrictStr] = Field(default=None, description="usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.", alias="userMetadata")
    __properties: ClassVar[List[str]] = ["createdAt", "listenerCount", "requiresClientAuthorization", "updatedAt", "userMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HybridConnectionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "listener_count",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HybridConnectionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "listenerCount": obj.get("listenerCount"),
            "requiresClientAuthorization": obj.get("requiresClientAuthorization"),
            "updatedAt": obj.get("updatedAt"),
            "userMetadata": obj.get("userMetadata")
        })
        return _obj



# coding: utf-8

"""
    ManagedLabsClient

    The Managed Labs Client.

    The version of the OpenAPI document: 2018-10-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.latest_operation_result import LatestOperationResult
from openapi_client.models.virtual_machine_details import VirtualMachineDetails
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentDetails(BaseModel):
    """
    This represents the details about a User's environment and its state.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the Environment")
    environment_state: Optional[StrictStr] = Field(default=None, description="Publishing state of the environment setting Possible values are Creating, Created, Failed", alias="environmentState")
    id: Optional[StrictStr] = Field(default=None, description="Resource Id of the environment")
    latest_operation_result: Optional[LatestOperationResult] = Field(default=None, alias="latestOperationResult")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Environment")
    password_last_reset: Optional[datetime] = Field(default=None, description="When the password was last reset on the environment.", alias="passwordLastReset")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the environment. This also includes LabIsFull and NotYetProvisioned status.", alias="provisioningState")
    total_usage: Optional[StrictStr] = Field(default=None, description="How long the environment has been used by a lab user", alias="totalUsage")
    virtual_machine_details: Optional[VirtualMachineDetails] = Field(default=None, alias="virtualMachineDetails")
    __properties: ClassVar[List[str]] = ["description", "environmentState", "id", "latestOperationResult", "name", "passwordLastReset", "provisioningState", "totalUsage", "virtualMachineDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "environment_state",
            "id",
            "name",
            "password_last_reset",
            "provisioning_state",
            "total_usage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latest_operation_result
        if self.latest_operation_result:
            _dict['latestOperationResult'] = self.latest_operation_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_machine_details
        if self.virtual_machine_details:
            _dict['virtualMachineDetails'] = self.virtual_machine_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "environmentState": obj.get("environmentState"),
            "id": obj.get("id"),
            "latestOperationResult": LatestOperationResult.from_dict(obj["latestOperationResult"]) if obj.get("latestOperationResult") is not None else None,
            "name": obj.get("name"),
            "passwordLastReset": obj.get("passwordLastReset"),
            "provisioningState": obj.get("provisioningState"),
            "totalUsage": obj.get("totalUsage"),
            "virtualMachineDetails": VirtualMachineDetails.from_dict(obj["virtualMachineDetails"]) if obj.get("virtualMachineDetails") is not None else None
        })
        return _obj



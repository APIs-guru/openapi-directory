# coding: utf-8

"""
    ManagedLabsClient

    The Managed Labs Client.

    The version of the OpenAPI document: 2018-10-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reference_vm_creation_parameters import ReferenceVmCreationParameters
from typing import Optional, Set
from typing_extensions import Self

class ResourceSettingCreationParameters(BaseModel):
    """
    Represents resource specific settings
    """ # noqa: E501
    gallery_image_resource_id: StrictStr = Field(description="The resource id of the gallery image used for creating the virtual machine", alias="galleryImageResourceId")
    location: Optional[StrictStr] = Field(default=None, description="The location where the virtual machine will live")
    name: Optional[StrictStr] = Field(default=None, description="The name of the resource setting")
    reference_vm_creation_parameters: ReferenceVmCreationParameters = Field(alias="referenceVmCreationParameters")
    size: Optional[StrictStr] = Field(default=None, description="The size of the virtual machine")
    __properties: ClassVar[List[str]] = ["galleryImageResourceId", "location", "name", "referenceVmCreationParameters", "size"]

    @field_validator('size')
    def size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Basic', 'Standard', 'Performance']):
            raise ValueError("must be one of enum values ('Basic', 'Standard', 'Performance')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceSettingCreationParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reference_vm_creation_parameters
        if self.reference_vm_creation_parameters:
            _dict['referenceVmCreationParameters'] = self.reference_vm_creation_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceSettingCreationParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "galleryImageResourceId": obj.get("galleryImageResourceId"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "referenceVmCreationParameters": ReferenceVmCreationParameters.from_dict(obj["referenceVmCreationParameters"]) if obj.get("referenceVmCreationParameters") is not None else None,
            "size": obj.get("size")
        })
        return _obj



# coding: utf-8

"""
    ManagedLabsClient

    The Managed Labs Client.

    The version of the OpenAPI document: 2018-10-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.latest_operation_result import LatestOperationResult
from typing import Optional, Set
from typing_extensions import Self

class UserProperties(BaseModel):
    """
    Lab User properties
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="The user email address, as it was specified during registration.")
    family_name: Optional[StrictStr] = Field(default=None, description="The user family name, as it was specified during registration.", alias="familyName")
    given_name: Optional[StrictStr] = Field(default=None, description="The user given name, as it was specified during registration.", alias="givenName")
    latest_operation_result: Optional[LatestOperationResult] = Field(default=None, alias="latestOperationResult")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The user tenant ID, as it was specified during registration.", alias="tenantId")
    total_usage: Optional[StrictStr] = Field(default=None, description="How long the user has used his VMs in this lab", alias="totalUsage")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="The unique immutable identifier of a resource (Guid).", alias="uniqueIdentifier")
    __properties: ClassVar[List[str]] = ["email", "familyName", "givenName", "latestOperationResult", "provisioningState", "tenantId", "totalUsage", "uniqueIdentifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "email",
            "family_name",
            "given_name",
            "tenant_id",
            "total_usage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latest_operation_result
        if self.latest_operation_result:
            _dict['latestOperationResult'] = self.latest_operation_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "familyName": obj.get("familyName"),
            "givenName": obj.get("givenName"),
            "latestOperationResult": LatestOperationResult.from_dict(obj["latestOperationResult"]) if obj.get("latestOperationResult") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "tenantId": obj.get("tenantId"),
            "totalUsage": obj.get("totalUsage"),
            "uniqueIdentifier": obj.get("uniqueIdentifier")
        })
        return _obj



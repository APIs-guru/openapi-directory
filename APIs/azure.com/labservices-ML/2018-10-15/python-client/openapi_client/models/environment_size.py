# coding: utf-8

"""
    ManagedLabsClient

    The Managed Labs Client.

    The version of the OpenAPI document: 2018-10-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.size_info import SizeInfo
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentSize(BaseModel):
    """
    Represents a size category supported by this Lab Account (small, medium or large)
    """ # noqa: E501
    max_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.", alias="maxPrice")
    min_memory: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of memory available (in GB). This is the minimum amount of memory within this tier.", alias="minMemory")
    min_number_of_cores: Optional[StrictInt] = Field(default=None, description="The number of cores a VM of this size has. This is the minimum number of cores within this tier.", alias="minNumberOfCores")
    name: Optional[StrictStr] = Field(default=None, description="The size category")
    vm_sizes: Optional[List[SizeInfo]] = Field(default=None, description="Represents a set of compute sizes that can serve this given size type", alias="vmSizes")
    __properties: ClassVar[List[str]] = ["maxPrice", "minMemory", "minNumberOfCores", "name", "vmSizes"]

    @field_validator('name')
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Basic', 'Standard', 'Performance']):
            raise ValueError("must be one of enum values ('Basic', 'Standard', 'Performance')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentSize from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "max_price",
            "min_memory",
            "min_number_of_cores",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vm_sizes (list)
        _items = []
        if self.vm_sizes:
            for _item_vm_sizes in self.vm_sizes:
                if _item_vm_sizes:
                    _items.append(_item_vm_sizes.to_dict())
            _dict['vmSizes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentSize from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxPrice": obj.get("maxPrice"),
            "minMemory": obj.get("minMemory"),
            "minNumberOfCores": obj.get("minNumberOfCores"),
            "name": obj.get("name"),
            "vmSizes": [SizeInfo.from_dict(_item) for _item in obj["vmSizes"]] if obj.get("vmSizes") is not None else None
        })
        return _obj



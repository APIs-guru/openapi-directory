# coding: utf-8

"""
    ManagedLabsClient

    The Managed Labs Client.

    The version of the OpenAPI document: 2018-10-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.latest_operation_result import LatestOperationResult
from typing import Optional, Set
from typing_extensions import Self

class LabProperties(BaseModel):
    """
    Properties of a Lab.
    """ # noqa: E501
    created_by_object_id: Optional[StrictStr] = Field(default=None, description="Object id of the user that created the lab.", alias="createdByObjectId")
    created_by_user_principal_name: Optional[StrictStr] = Field(default=None, description="Lab creator name", alias="createdByUserPrincipalName")
    created_date: Optional[datetime] = Field(default=None, description="Creation date for the lab", alias="createdDate")
    invitation_code: Optional[StrictStr] = Field(default=None, description="Invitation code that users can use to join a lab.", alias="invitationCode")
    latest_operation_result: Optional[LatestOperationResult] = Field(default=None, alias="latestOperationResult")
    max_users_in_lab: Optional[StrictInt] = Field(default=None, description="Maximum number of users allowed in the lab.", alias="maxUsersInLab")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="The unique immutable identifier of a resource (Guid).", alias="uniqueIdentifier")
    usage_quota: Optional[StrictStr] = Field(default=None, description="Maximum duration a user can use an environment for in the lab.", alias="usageQuota")
    user_access_mode: Optional[StrictStr] = Field(default=None, description="Lab user access mode (open to all vs. restricted to those listed on the lab).", alias="userAccessMode")
    user_quota: Optional[StrictInt] = Field(default=None, description="Maximum value MaxUsersInLab can be set to, as specified by the service", alias="userQuota")
    __properties: ClassVar[List[str]] = ["createdByObjectId", "createdByUserPrincipalName", "createdDate", "invitationCode", "latestOperationResult", "maxUsersInLab", "provisioningState", "uniqueIdentifier", "usageQuota", "userAccessMode", "userQuota"]

    @field_validator('user_access_mode')
    def user_access_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Restricted', 'Open']):
            raise ValueError("must be one of enum values ('Restricted', 'Open')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_by_object_id",
            "created_by_user_principal_name",
            "created_date",
            "invitation_code",
            "user_quota",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latest_operation_result
        if self.latest_operation_result:
            _dict['latestOperationResult'] = self.latest_operation_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdByObjectId": obj.get("createdByObjectId"),
            "createdByUserPrincipalName": obj.get("createdByUserPrincipalName"),
            "createdDate": obj.get("createdDate"),
            "invitationCode": obj.get("invitationCode"),
            "latestOperationResult": LatestOperationResult.from_dict(obj["latestOperationResult"]) if obj.get("latestOperationResult") is not None else None,
            "maxUsersInLab": obj.get("maxUsersInLab"),
            "provisioningState": obj.get("provisioningState"),
            "uniqueIdentifier": obj.get("uniqueIdentifier"),
            "usageQuota": obj.get("usageQuota"),
            "userAccessMode": obj.get("userAccessMode"),
            "userQuota": obj.get("userQuota")
        })
        return _obj



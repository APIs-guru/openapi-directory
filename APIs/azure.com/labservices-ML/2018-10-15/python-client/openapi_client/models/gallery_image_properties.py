# coding: utf-8

"""
    ManagedLabsClient

    The Managed Labs Client.

    The version of the OpenAPI document: 2018-10-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gallery_image_reference import GalleryImageReference
from openapi_client.models.latest_operation_result import LatestOperationResult
from typing import Optional, Set
from typing_extensions import Self

class GalleryImageProperties(BaseModel):
    """
    The gallery image properties
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default=None, description="The author of the gallery image.")
    created_date: Optional[datetime] = Field(default=None, description="The creation date of the gallery image.", alias="createdDate")
    description: Optional[StrictStr] = Field(default=None, description="The description of the gallery image.")
    icon: Optional[StrictStr] = Field(default=None, description="The icon of the gallery image.")
    image_reference: Optional[GalleryImageReference] = Field(default=None, alias="imageReference")
    is_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether this gallery image is enabled.", alias="isEnabled")
    is_override: Optional[StrictBool] = Field(default=None, description="Indicates whether this gallery has been overridden for this lab account", alias="isOverride")
    is_plan_authorized: Optional[StrictBool] = Field(default=None, description="Indicates if the plan has been authorized for programmatic deployment.", alias="isPlanAuthorized")
    latest_operation_result: Optional[LatestOperationResult] = Field(default=None, alias="latestOperationResult")
    plan_id: Optional[StrictStr] = Field(default=None, description="The third party plan that applies to this image", alias="planId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="The unique immutable identifier of a resource (Guid).", alias="uniqueIdentifier")
    __properties: ClassVar[List[str]] = ["author", "createdDate", "description", "icon", "imageReference", "isEnabled", "isOverride", "isPlanAuthorized", "latestOperationResult", "planId", "provisioningState", "uniqueIdentifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GalleryImageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "author",
            "created_date",
            "description",
            "icon",
            "plan_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_reference
        if self.image_reference:
            _dict['imageReference'] = self.image_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_operation_result
        if self.latest_operation_result:
            _dict['latestOperationResult'] = self.latest_operation_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GalleryImageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "createdDate": obj.get("createdDate"),
            "description": obj.get("description"),
            "icon": obj.get("icon"),
            "imageReference": GalleryImageReference.from_dict(obj["imageReference"]) if obj.get("imageReference") is not None else None,
            "isEnabled": obj.get("isEnabled"),
            "isOverride": obj.get("isOverride"),
            "isPlanAuthorized": obj.get("isPlanAuthorized"),
            "latestOperationResult": LatestOperationResult.from_dict(obj["latestOperationResult"]) if obj.get("latestOperationResult") is not None else None,
            "planId": obj.get("planId"),
            "provisioningState": obj.get("provisioningState"),
            "uniqueIdentifier": obj.get("uniqueIdentifier")
        })
        return _obj



# coding: utf-8

"""
    ManagedLabsClient

    The Managed Labs Client.

    The version of the OpenAPI document: 2018-10-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineDetails(BaseModel):
    """
    Details of the backing virtual machine.
    """ # noqa: E501
    last_known_power_state: Optional[StrictStr] = Field(default=None, description="Last known compute power state captured in DTL", alias="lastKnownPowerState")
    private_ip_address: Optional[StrictStr] = Field(default=None, description="PrivateIp address of the compute VM", alias="privateIpAddress")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the Dtl VM", alias="provisioningState")
    rdp_authority: Optional[StrictStr] = Field(default=None, description="Connection information for Windows", alias="rdpAuthority")
    ssh_authority: Optional[StrictStr] = Field(default=None, description="Connection information for Linux", alias="sshAuthority")
    user_name: Optional[StrictStr] = Field(default=None, description="Compute VM login user name", alias="userName")
    __properties: ClassVar[List[str]] = ["lastKnownPowerState", "privateIpAddress", "provisioningState", "rdpAuthority", "sshAuthority", "userName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_known_power_state",
            "private_ip_address",
            "provisioning_state",
            "rdp_authority",
            "ssh_authority",
            "user_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lastKnownPowerState": obj.get("lastKnownPowerState"),
            "privateIpAddress": obj.get("privateIpAddress"),
            "provisioningState": obj.get("provisioningState"),
            "rdpAuthority": obj.get("rdpAuthority"),
            "sshAuthority": obj.get("sshAuthority"),
            "userName": obj.get("userName")
        })
        return _obj



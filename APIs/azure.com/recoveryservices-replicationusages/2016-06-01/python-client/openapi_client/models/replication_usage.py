# coding: utf-8

"""
    RecoveryServicesClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.jobs_summary import JobsSummary
from openapi_client.models.monitoring_summary import MonitoringSummary
from typing import Optional, Set
from typing_extensions import Self

class ReplicationUsage(BaseModel):
    """
    Replication usages of a vault.
    """ # noqa: E501
    jobs_summary: Optional[JobsSummary] = Field(default=None, alias="jobsSummary")
    monitoring_summary: Optional[MonitoringSummary] = Field(default=None, alias="monitoringSummary")
    protected_item_count: Optional[StrictInt] = Field(default=None, description="Number of replication protected items for this vault.", alias="protectedItemCount")
    recovery_plan_count: Optional[StrictInt] = Field(default=None, description="Number of replication recovery plans for this vault.", alias="recoveryPlanCount")
    recovery_services_provider_auth_type: Optional[StrictInt] = Field(default=None, description="The authentication type of recovery service providers in the vault.", alias="recoveryServicesProviderAuthType")
    registered_servers_count: Optional[StrictInt] = Field(default=None, description="Number of servers registered to this vault.", alias="registeredServersCount")
    __properties: ClassVar[List[str]] = ["jobsSummary", "monitoringSummary", "protectedItemCount", "recoveryPlanCount", "recoveryServicesProviderAuthType", "registeredServersCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of jobs_summary
        if self.jobs_summary:
            _dict['jobsSummary'] = self.jobs_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring_summary
        if self.monitoring_summary:
            _dict['monitoringSummary'] = self.monitoring_summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobsSummary": JobsSummary.from_dict(obj["jobsSummary"]) if obj.get("jobsSummary") is not None else None,
            "monitoringSummary": MonitoringSummary.from_dict(obj["monitoringSummary"]) if obj.get("monitoringSummary") is not None else None,
            "protectedItemCount": obj.get("protectedItemCount"),
            "recoveryPlanCount": obj.get("recoveryPlanCount"),
            "recoveryServicesProviderAuthType": obj.get("recoveryServicesProviderAuthType"),
            "registeredServersCount": obj.get("registeredServersCount")
        })
        return _obj



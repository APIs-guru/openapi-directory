# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dsc_node_report import DscNodeReport

class TestDscNodeReport(unittest.TestCase):
    """DscNodeReport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DscNodeReport:
        """Test DscNodeReport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DscNodeReport`
        """
        model = DscNodeReport()
        if include_optional:
            return DscNodeReport(
                configuration_version = '',
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                errors = [
                    openapi_client.models.dsc_report_error.DscReportError(
                        error_code = '', 
                        error_details = '', 
                        error_message = '', 
                        error_source = '', 
                        locale = '', 
                        resource_id = '', )
                    ],
                host_name = '',
                i_pv4_addresses = [
                    ''
                    ],
                i_pv6_addresses = [
                    ''
                    ],
                id = '',
                last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                meta_configuration = openapi_client.models.dsc_meta_configuration.DscMetaConfiguration(
                    action_after_reboot = '', 
                    allow_module_overwrite = True, 
                    certificate_id = '', 
                    configuration_mode = '', 
                    configuration_mode_frequency_mins = 56, 
                    reboot_node_if_needed = True, 
                    refresh_frequency_mins = 56, ),
                number_of_resources = 56,
                raw_errors = '',
                reboot_requested = '',
                refresh_mode = '',
                report_format_version = '',
                report_id = '',
                resources = [
                    openapi_client.models.dsc_report_resource.DscReportResource(
                        depends_on = [
                            openapi_client.models.dsc_report_resource_navigation.DscReportResourceNavigation(
                                resource_id = '', )
                            ], 
                        duration_in_seconds = 1.337, 
                        error = '', 
                        module_name = '', 
                        module_version = '', 
                        resource_id = '', 
                        resource_name = '', 
                        source_info = '', 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = '', )
                    ],
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = '',
                type = ''
            )
        else:
            return DscNodeReport(
        )
        """

    def testDscNodeReport(self):
        """Test DscNodeReport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dsc_meta_configuration import DscMetaConfiguration
from openapi_client.models.dsc_report_error import DscReportError
from openapi_client.models.dsc_report_resource import DscReportResource
from typing import Optional, Set
from typing_extensions import Self

class DscNodeReport(BaseModel):
    """
    Definition of the dsc node report type.
    """ # noqa: E501
    configuration_version: Optional[StrictStr] = Field(default=None, description="Gets or sets the configurationVersion of the node report.", alias="configurationVersion")
    end_time: Optional[datetime] = Field(default=None, description="Gets or sets the end time of the node report.", alias="endTime")
    errors: Optional[List[DscReportError]] = Field(default=None, description="Gets or sets the errors for the node report.")
    host_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the hostname of the node that sent the report.", alias="hostName")
    i_pv4_addresses: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the IPv4 address of the node that sent the report.", alias="iPV4Addresses")
    i_pv6_addresses: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the IPv6 address of the node that sent the report.", alias="iPV6Addresses")
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the id.")
    last_modified_time: Optional[datetime] = Field(default=None, description="Gets or sets the lastModifiedTime of the node report.", alias="lastModifiedTime")
    meta_configuration: Optional[DscMetaConfiguration] = Field(default=None, alias="metaConfiguration")
    number_of_resources: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of resource in the node report.", alias="numberOfResources")
    raw_errors: Optional[StrictStr] = Field(default=None, description="Gets or sets the unparsed errors for the node report.", alias="rawErrors")
    reboot_requested: Optional[StrictStr] = Field(default=None, description="Gets or sets the rebootRequested of the node report.", alias="rebootRequested")
    refresh_mode: Optional[StrictStr] = Field(default=None, description="Gets or sets the refreshMode of the node report.", alias="refreshMode")
    report_format_version: Optional[StrictStr] = Field(default=None, description="Gets or sets the reportFormatVersion of the node report.", alias="reportFormatVersion")
    report_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the id of the node report.", alias="reportId")
    resources: Optional[List[DscReportResource]] = Field(default=None, description="Gets or sets the resource for the node report.")
    start_time: Optional[datetime] = Field(default=None, description="Gets or sets the start time of the node report.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Gets or sets the status of the node report.")
    type: Optional[StrictStr] = Field(default=None, description="Gets or sets the type of the node report.")
    __properties: ClassVar[List[str]] = ["configurationVersion", "endTime", "errors", "hostName", "iPV4Addresses", "iPV6Addresses", "id", "lastModifiedTime", "metaConfiguration", "numberOfResources", "rawErrors", "rebootRequested", "refreshMode", "reportFormatVersion", "reportId", "resources", "startTime", "status", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DscNodeReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of meta_configuration
        if self.meta_configuration:
            _dict['metaConfiguration'] = self.meta_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['endTime'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['startTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DscNodeReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configurationVersion": obj.get("configurationVersion"),
            "endTime": obj.get("endTime"),
            "errors": [DscReportError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "hostName": obj.get("hostName"),
            "iPV4Addresses": obj.get("iPV4Addresses"),
            "iPV6Addresses": obj.get("iPV6Addresses"),
            "id": obj.get("id"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "metaConfiguration": DscMetaConfiguration.from_dict(obj["metaConfiguration"]) if obj.get("metaConfiguration") is not None else None,
            "numberOfResources": obj.get("numberOfResources"),
            "rawErrors": obj.get("rawErrors"),
            "rebootRequested": obj.get("rebootRequested"),
            "refreshMode": obj.get("refreshMode"),
            "reportFormatVersion": obj.get("reportFormatVersion"),
            "reportId": obj.get("reportId"),
            "resources": [DscReportResource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj



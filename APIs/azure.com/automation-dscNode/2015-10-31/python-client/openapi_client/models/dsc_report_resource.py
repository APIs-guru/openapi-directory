# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-10-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.dsc_report_resource_navigation import DscReportResourceNavigation
from typing import Optional, Set
from typing_extensions import Self

class DscReportResource(BaseModel):
    """
    Definition of the DSC Report Resource.
    """ # noqa: E501
    depends_on: Optional[List[DscReportResourceNavigation]] = Field(default=None, description="Gets or sets the Resource Navigation values for resources the resource depends on.", alias="dependsOn")
    duration_in_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the duration in seconds for the resource.", alias="durationInSeconds")
    error: Optional[StrictStr] = Field(default=None, description="Gets or sets the error of the resource.")
    module_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the module name of the resource.", alias="moduleName")
    module_version: Optional[StrictStr] = Field(default=None, description="Gets or sets the module version of the resource.", alias="moduleVersion")
    resource_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the ID of the resource.", alias="resourceId")
    resource_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the resource.", alias="resourceName")
    source_info: Optional[StrictStr] = Field(default=None, description="Gets or sets the source info of the resource.", alias="sourceInfo")
    start_date: Optional[datetime] = Field(default=None, description="Gets or sets the start date of the resource.", alias="startDate")
    status: Optional[StrictStr] = Field(default=None, description="Gets or sets the status of the resource.")
    __properties: ClassVar[List[str]] = ["dependsOn", "durationInSeconds", "error", "moduleName", "moduleVersion", "resourceId", "resourceName", "sourceInfo", "startDate", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DscReportResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in depends_on (list)
        _items = []
        if self.depends_on:
            for _item_depends_on in self.depends_on:
                if _item_depends_on:
                    _items.append(_item_depends_on.to_dict())
            _dict['dependsOn'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DscReportResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dependsOn": [DscReportResourceNavigation.from_dict(_item) for _item in obj["dependsOn"]] if obj.get("dependsOn") is not None else None,
            "durationInSeconds": obj.get("durationInSeconds"),
            "error": obj.get("error"),
            "moduleName": obj.get("moduleName"),
            "moduleVersion": obj.get("moduleVersion"),
            "resourceId": obj.get("resourceId"),
            "resourceName": obj.get("resourceName"),
            "sourceInfo": obj.get("sourceInfo"),
            "startDate": obj.get("startDate"),
            "status": obj.get("status")
        })
        return _obj



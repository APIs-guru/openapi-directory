# coding: utf-8

"""
    Service Map

    Service Map API Reference

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.map import Map

class TestMap(unittest.TestCase):
    """Map unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Map:
        """Test Map
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Map`
        """
        model = Map()
        if include_optional:
            return Map(
                edges = openapi_client.models.map_edges.MapEdges(
                    acceptors = [
                        openapi_client.models.acceptor.Acceptor(
                            properties = openapi_client.models.acceptor_properties.AcceptorProperties(
                                destination = openapi_client.models.process_reference.ProcessReference(), 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                source = openapi_client.models.port_reference.PortReference(), 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                        ], 
                    connections = [
                        openapi_client.models.connection.Connection()
                        ], ),
                nodes = openapi_client.models.map_nodes.MapNodes(
                    client_groups = [
                        openapi_client.models.client_group.ClientGroup(
                            properties = openapi_client.models.properties.properties(
                                clients_of = openapi_client.models.resource_reference.ResourceReference(
                                    id = '', 
                                    kind = 'ref:machine', 
                                    name = '', 
                                    type = '', ), ), )
                        ], 
                    machines = [
                        openapi_client.models.machine.Machine()
                        ], 
                    ports = [
                        openapi_client.models.port.Port()
                        ], 
                    processes = [
                        openapi_client.models.process.Process()
                        ], )
            )
        else:
            return Map(
                edges = openapi_client.models.map_edges.MapEdges(
                    acceptors = [
                        openapi_client.models.acceptor.Acceptor(
                            properties = openapi_client.models.acceptor_properties.AcceptorProperties(
                                destination = openapi_client.models.process_reference.ProcessReference(), 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                source = openapi_client.models.port_reference.PortReference(), 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                        ], 
                    connections = [
                        openapi_client.models.connection.Connection()
                        ], ),
                nodes = openapi_client.models.map_nodes.MapNodes(
                    client_groups = [
                        openapi_client.models.client_group.ClientGroup(
                            properties = openapi_client.models.properties.properties(
                                clients_of = openapi_client.models.resource_reference.ResourceReference(
                                    id = '', 
                                    kind = 'ref:machine', 
                                    name = '', 
                                    type = '', ), ), )
                        ], 
                    machines = [
                        openapi_client.models.machine.Machine()
                        ], 
                    ports = [
                        openapi_client.models.port.Port()
                        ], 
                    processes = [
                        openapi_client.models.process.Process()
                        ], ),
        )
        """

    def testMap(self):
        """Test Map"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

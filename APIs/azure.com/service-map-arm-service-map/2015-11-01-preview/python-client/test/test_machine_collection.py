# coding: utf-8

"""
    Service Map

    Service Map API Reference

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.machine_collection import MachineCollection

class TestMachineCollection(unittest.TestCase):
    """MachineCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MachineCollection:
        """Test MachineCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MachineCollection`
        """
        model = MachineCollection()
        if include_optional:
            return MachineCollection(
                next_link = '',
                value = [
                    openapi_client.models.machine.Machine(
                        properties = openapi_client.models.properties.properties(
                            agent = openapi_client.models.agent_configuration.AgentConfiguration(
                                agent_id = '', 
                                clock_granularity = 56, 
                                dependency_agent_id = '', 
                                dependency_agent_revision = '', 
                                dependency_agent_version = '', 
                                reboot_status = 'unknown', ), 
                            boot_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            computer_name = '', 
                            display_name = '', 
                            fully_qualified_domain_name = '', 
                            hosting = openapi_client.models.hosting_configuration.HostingConfiguration(
                                kind = 'provider:azure', 
                                provider = 'azure', ), 
                            hypervisor = openapi_client.models.hypervisor_configuration.HypervisorConfiguration(
                                hypervisor_type = 'unknown', 
                                native_host_machine_id = '', ), 
                            monitoring_state = 'monitored', 
                            networking = openapi_client.models.network_configuration.NetworkConfiguration(
                                default_ipv4_gateways = [
                                    ''
                                    ], 
                                dns_names = [
                                    ''
                                    ], 
                                ipv4_interfaces = [
                                    openapi_client.models.ipv4_network_interface.Ipv4NetworkInterface(
                                        ip_address = '', 
                                        subnet_mask = '255.255.255.255', )
                                    ], 
                                ipv6_interfaces = [
                                    openapi_client.models.ipv6_network_interface.Ipv6NetworkInterface(
                                        ip_address = '', )
                                    ], 
                                mac_addresses = [
                                    ''
                                    ], ), 
                            operating_system = openapi_client.models.operating_system_configuration.OperatingSystemConfiguration(
                                bitness = '32bit', 
                                family = 'unknown', 
                                full_name = '', ), 
                            resources = openapi_client.models.machine_resources_configuration.MachineResourcesConfiguration(
                                cpu_speed = 56, 
                                cpu_speed_accuracy = 'actual', 
                                cpus = 56, 
                                physical_memory = 56, ), 
                            timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            timezone = openapi_client.models.timezone.Timezone(
                                full_name = '', ), 
                            virtual_machine = openapi_client.models.virtual_machine_configuration.VirtualMachineConfiguration(
                                native_host_machine_id = '', 
                                native_machine_id = '', 
                                virtual_machine_name = '', 
                                virtual_machine_type = 'unknown', ), 
                            virtualization_state = 'unknown', ), )
                    ]
            )
        else:
            return MachineCollection(
        )
        """

    def testMachineCollection(self):
        """Test MachineCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Service Map

    Service Map API Reference

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.connection_collection import ConnectionCollection
from openapi_client.models.liveness import Liveness
from openapi_client.models.port import Port
from openapi_client.models.port_collection import PortCollection
from openapi_client.models.process_collection import ProcessCollection

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PortsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def machines_list_ports_0(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PortCollection:
        """machines_list_ports_0

        Returns a collection of live ports on the specified machine during the specified time interval.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._machines_list_ports_0_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PortCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def machines_list_ports_0_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PortCollection]:
        """machines_list_ports_0

        Returns a collection of live ports on the specified machine during the specified time interval.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._machines_list_ports_0_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PortCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def machines_list_ports_0_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """machines_list_ports_0

        Returns a collection of live ports on the specified machine during the specified time interval.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._machines_list_ports_0_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PortCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _machines_list_ports_0_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        api_version,
        machine_name,
        start_time,
        end_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if machine_name is not None:
            _path_params['machineName'] = machine_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'startTime',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'endTime',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endTime', end_time))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ports_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Port:
        """ports_get

        Returns the specified port. The port must be live during the specified time interval. If the port is not live during the interval, status 404 (Not Found) is returned.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Port",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ports_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Port]:
        """ports_get

        Returns the specified port. The port must be live during the specified time interval. If the port is not live during the interval, status 404 (Not Found) is returned.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Port",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ports_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ports_get

        Returns the specified port. The port must be live during the specified time interval. If the port is not live during the interval, status 404 (Not Found) is returned.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Port",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ports_get_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        api_version,
        machine_name,
        port_name,
        start_time,
        end_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if machine_name is not None:
            _path_params['machineName'] = machine_name
        if port_name is not None:
            _path_params['portName'] = port_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'startTime',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'endTime',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endTime', end_time))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ports_get_liveness(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Liveness:
        """ports_get_liveness

        Obtains the liveness status of the port during the specified time interval.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_get_liveness_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Liveness",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ports_get_liveness_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Liveness]:
        """ports_get_liveness

        Obtains the liveness status of the port during the specified time interval.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_get_liveness_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Liveness",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ports_get_liveness_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ports_get_liveness

        Obtains the liveness status of the port during the specified time interval.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_get_liveness_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Liveness",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ports_get_liveness_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        api_version,
        machine_name,
        port_name,
        start_time,
        end_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if machine_name is not None:
            _path_params['machineName'] = machine_name
        if port_name is not None:
            _path_params['portName'] = port_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'startTime',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'endTime',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endTime', end_time))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/liveness',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ports_list_accepting_processes(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProcessCollection:
        """ports_list_accepting_processes

        Returns a collection of processes accepting on the specified port

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_list_accepting_processes_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProcessCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ports_list_accepting_processes_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProcessCollection]:
        """ports_list_accepting_processes

        Returns a collection of processes accepting on the specified port

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_list_accepting_processes_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProcessCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ports_list_accepting_processes_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ports_list_accepting_processes

        Returns a collection of processes accepting on the specified port

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_list_accepting_processes_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProcessCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ports_list_accepting_processes_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        api_version,
        machine_name,
        port_name,
        start_time,
        end_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if machine_name is not None:
            _path_params['machineName'] = machine_name
        if port_name is not None:
            _path_params['portName'] = port_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'startTime',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'endTime',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endTime', end_time))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/acceptingProcesses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ports_list_connections(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConnectionCollection:
        """ports_list_connections

        Returns a collection of connections established via the specified port.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_list_connections_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConnectionCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ports_list_connections_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConnectionCollection]:
        """ports_list_connections

        Returns a collection of connections established via the specified port.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_list_connections_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConnectionCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ports_list_connections_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription identifier.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=64, description="Resource group name within the specified subscriptionId.")],
        workspace_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="OMS workspace containing the resources of interest.")],
        api_version: Annotated[StrictStr, Field(description="API version.")],
        machine_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Machine resource name.")],
        port_name: Annotated[str, Field(min_length=3, strict=True, max_length=64, description="Port resource name.")],
        start_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m")] = None,
        end_time: Annotated[Optional[datetime], Field(description="UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ports_list_connections

        Returns a collection of connections established via the specified port.

        :param subscription_id: Azure subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name within the specified subscriptionId. (required)
        :type resource_group_name: str
        :param workspace_name: OMS workspace containing the resources of interest. (required)
        :type workspace_name: str
        :param api_version: API version. (required)
        :type api_version: str
        :param machine_name: Machine resource name. (required)
        :type machine_name: str
        :param port_name: Port resource name. (required)
        :type port_name: str
        :param start_time: UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
        :type start_time: datetime
        :param end_time: UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
        :type end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ports_list_connections_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            api_version=api_version,
            machine_name=machine_name,
            port_name=port_name,
            start_time=start_time,
            end_time=end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConnectionCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ports_list_connections_serialize(
        self,
        subscription_id,
        resource_group_name,
        workspace_name,
        api_version,
        machine_name,
        port_name,
        start_time,
        end_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        if machine_name is not None:
            _path_params['machineName'] = machine_name
        if port_name is not None:
            _path_params['portName'] = port_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'startTime',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'endTime',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endTime', end_time))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/connections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



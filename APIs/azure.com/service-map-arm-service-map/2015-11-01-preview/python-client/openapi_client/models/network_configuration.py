# coding: utf-8

"""
    Service Map

    Service Map API Reference

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ipv4_network_interface import Ipv4NetworkInterface
from openapi_client.models.ipv6_network_interface import Ipv6NetworkInterface
from typing import Optional, Set
from typing_extensions import Self

class NetworkConfiguration(BaseModel):
    """
    Describes the network configuration of a machine.
    """ # noqa: E501
    default_ipv4_gateways: Optional[List[StrictStr]] = Field(default=None, description="Default IPv4 gateways.", alias="defaultIpv4Gateways")
    dns_names: Optional[List[StrictStr]] = Field(default=None, description="DNS names associated with the machine.", alias="dnsNames")
    ipv4_interfaces: Optional[List[Ipv4NetworkInterface]] = Field(default=None, description="IPv4 interfaces.", alias="ipv4Interfaces")
    ipv6_interfaces: Optional[List[Ipv6NetworkInterface]] = Field(default=None, description="IPv6 interfaces.", alias="ipv6Interfaces")
    mac_addresses: Optional[List[StrictStr]] = Field(default=None, description="MAC addresses of all active network interfaces.", alias="macAddresses")
    __properties: ClassVar[List[str]] = ["defaultIpv4Gateways", "dnsNames", "ipv4Interfaces", "ipv6Interfaces", "macAddresses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ipv4_interfaces (list)
        _items = []
        if self.ipv4_interfaces:
            for _item_ipv4_interfaces in self.ipv4_interfaces:
                if _item_ipv4_interfaces:
                    _items.append(_item_ipv4_interfaces.to_dict())
            _dict['ipv4Interfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ipv6_interfaces (list)
        _items = []
        if self.ipv6_interfaces:
            for _item_ipv6_interfaces in self.ipv6_interfaces:
                if _item_ipv6_interfaces:
                    _items.append(_item_ipv6_interfaces.to_dict())
            _dict['ipv6Interfaces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultIpv4Gateways": obj.get("defaultIpv4Gateways"),
            "dnsNames": obj.get("dnsNames"),
            "ipv4Interfaces": [Ipv4NetworkInterface.from_dict(_item) for _item in obj["ipv4Interfaces"]] if obj.get("ipv4Interfaces") is not None else None,
            "ipv6Interfaces": [Ipv6NetworkInterface.from_dict(_item) for _item in obj["ipv6Interfaces"]] if obj.get("ipv6Interfaces") is not None else None,
            "macAddresses": obj.get("macAddresses")
        })
        return _obj



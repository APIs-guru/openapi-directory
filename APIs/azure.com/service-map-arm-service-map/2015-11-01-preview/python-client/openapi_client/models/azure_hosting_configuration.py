# coding: utf-8

"""
    Service Map

    Service Map API Reference

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_cloud_service_configuration import AzureCloudServiceConfiguration
from openapi_client.models.azure_service_fabric_cluster_configuration import AzureServiceFabricClusterConfiguration
from openapi_client.models.azure_vm_scale_set_configuration import AzureVmScaleSetConfiguration
from openapi_client.models.hosting_configuration import HostingConfiguration
from openapi_client.models.image_configuration import ImageConfiguration
from typing import Optional, Set
from typing_extensions import Self

class AzureHostingConfiguration(HostingConfiguration):
    """
    Provides information about how a machine is hosted in Azure
    """ # noqa: E501
    cloud_service: Optional[AzureCloudServiceConfiguration] = Field(default=None, alias="cloudService")
    fault_domain: Optional[StrictStr] = Field(default=None, description="Fault domain of the VM.", alias="faultDomain")
    image: Optional[ImageConfiguration] = None
    location: Optional[StrictStr] = Field(default=None, description="Geographical location of the VM.")
    name: Optional[StrictStr] = Field(default=None, description="Machine name according to the hosting provider.")
    resource_group: Optional[StrictStr] = Field(default=None, description="Resource group name within the specified subscription.", alias="resourceGroup")
    resource_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the resource.", alias="resourceId")
    service_fabric_cluster: Optional[AzureServiceFabricClusterConfiguration] = Field(default=None, alias="serviceFabricCluster")
    size: Optional[StrictStr] = Field(default=None, description="Size of the VM.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription ID.", alias="subscriptionId")
    update_domain: Optional[StrictStr] = Field(default=None, description="Update domain of the VM.", alias="updateDomain")
    vm_id: Optional[StrictStr] = Field(default=None, description="Virtual Machine ID (unique identifier).", alias="vmId")
    vm_scale_set: Optional[AzureVmScaleSetConfiguration] = Field(default=None, alias="vmScaleSet")
    __properties: ClassVar[List[str]] = ["kind", "provider"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureHostingConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureHostingConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kind": obj.get("kind"),
            "provider": obj.get("provider")
        })
        return _obj



# coding: utf-8

"""
    Service Map

    Service Map API Reference

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.process_hosted_service import ProcessHostedService
from typing import Optional, Set
from typing_extensions import Self

class ProcessDetails(BaseModel):
    """
    Describes process metadata.
    """ # noqa: E501
    command_line: Optional[StrictStr] = Field(default=None, description="Process command line.", alias="commandLine")
    company_name: Optional[StrictStr] = Field(default=None, description="Name of company that created the process executable.", alias="companyName")
    description: Optional[StrictStr] = Field(default=None, description="Process description.")
    executable_path: Optional[StrictStr] = Field(default=None, description="Process executable path.", alias="executablePath")
    file_version: Optional[StrictStr] = Field(default=None, description="File version.", alias="fileVersion")
    first_pid: Optional[StrictInt] = Field(default=None, description="The Operating System Process Identifier (PID) of the first process in this process pool.", alias="firstPid")
    internal_name: Optional[StrictStr] = Field(default=None, description="Internal process name.", alias="internalName")
    persistent_key: Optional[StrictStr] = Field(default=None, description="A unique identifier for a process, generally resilient to process restart, computed by Service Map.", alias="persistentKey")
    pool_id: Optional[StrictInt] = Field(default=None, description="Represents the identity of the process pool assigned to the process by Dependency Agent.", alias="poolId")
    product_name: Optional[StrictStr] = Field(default=None, description="Product name.", alias="productName")
    product_version: Optional[StrictStr] = Field(default=None, description="Product version.", alias="productVersion")
    services: Optional[List[ProcessHostedService]] = Field(default=None, description="Collection of services hosted by this Process (Windows only).")
    working_directory: Optional[StrictStr] = Field(default=None, description="Process workingDirectory.", alias="workingDirectory")
    zone_name: Optional[StrictStr] = Field(default=None, description="Process zone name (Linux only).", alias="zoneName")
    __properties: ClassVar[List[str]] = ["commandLine", "companyName", "description", "executablePath", "fileVersion", "firstPid", "internalName", "persistentKey", "poolId", "productName", "productVersion", "services", "workingDirectory", "zoneName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commandLine": obj.get("commandLine"),
            "companyName": obj.get("companyName"),
            "description": obj.get("description"),
            "executablePath": obj.get("executablePath"),
            "fileVersion": obj.get("fileVersion"),
            "firstPid": obj.get("firstPid"),
            "internalName": obj.get("internalName"),
            "persistentKey": obj.get("persistentKey"),
            "poolId": obj.get("poolId"),
            "productName": obj.get("productName"),
            "productVersion": obj.get("productVersion"),
            "services": [ProcessHostedService.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "workingDirectory": obj.get("workingDirectory"),
            "zoneName": obj.get("zoneName")
        })
        return _obj



# coding: utf-8

"""
    StorageManagementClient

    The Admin Storage Management Client.

    The version of the OpenAPI document: 2015-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class WritableSettings(BaseModel):
    """
    Storage service settings.
    """ # noqa: E501
    front_end_callback_threads_count: Optional[StrictInt] = Field(default=None, description="Front end callback threads count.", alias="frontEndCallbackThreadsCount")
    front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds: Optional[StrictInt] = Field(default=None, description="Interval (in second) of CPU monitor for front end CPU based keep-alive throttling.", alias="frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds")
    front_end_cpu_based_keep_alive_throttling_enabled: Optional[StrictBool] = Field(default=None, description="Switch of front end CPU based keep-alive throttling.", alias="frontEndCpuBasedKeepAliveThrottlingEnabled")
    front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Threshold (% percentage) of front end CPU based keep-alive throttling.", alias="frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold")
    front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Threshold (% percentage) of requests to throttle in front end CPU based keep-alive throttling.", alias="frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle")
    front_end_max_milliseconds_between_memory_samples: Optional[StrictInt] = Field(default=None, description="Maximum interval (in millisecond) between memory samples of front end.", alias="frontEndMaxMillisecondsBetweenMemorySamples")
    front_end_memory_throttle_threshold_settings: Optional[StrictStr] = Field(default=None, description="Front end memory throttle threshold settings.", alias="frontEndMemoryThrottleThresholdSettings")
    front_end_memory_throttling_enabled: Optional[StrictBool] = Field(default=None, description="Switch of front end memory throttling.", alias="frontEndMemoryThrottlingEnabled")
    front_end_min_thread_pool_threads: Optional[StrictInt] = Field(default=None, description="Front end minimum number of threads in thread pool.", alias="frontEndMinThreadPoolThreads")
    front_end_thread_pool_based_keep_alive_io_completion_threshold: Optional[StrictInt] = Field(default=None, description="Threshold of front end thread pool based keep-alive IO completion.", alias="frontEndThreadPoolBasedKeepAliveIOCompletionThreshold")
    front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds: Optional[StrictInt] = Field(default=None, description="Monitor interval (in seconds) of front end thread pool based keep-alive monitor.", alias="frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds")
    front_end_thread_pool_based_keep_alive_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage (%) of front end thread pool based keep-alive.", alias="frontEndThreadPoolBasedKeepAlivePercentage")
    front_end_thread_pool_based_keep_alive_worker_thread_threshold: Optional[StrictInt] = Field(default=None, description="Threshold of front end thread pool based keep-alive worker thread.", alias="frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold")
    front_end_use_sla_time_in_availability: Optional[StrictBool] = Field(default=None, description="Switch of whether front end uses SLA time in availability.", alias="frontEndUseSlaTimeInAvailability")
    __properties: ClassVar[List[str]] = ["frontEndCallbackThreadsCount", "frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds", "frontEndCpuBasedKeepAliveThrottlingEnabled", "frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold", "frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle", "frontEndMaxMillisecondsBetweenMemorySamples", "frontEndMemoryThrottleThresholdSettings", "frontEndMemoryThrottlingEnabled", "frontEndMinThreadPoolThreads", "frontEndThreadPoolBasedKeepAliveIOCompletionThreshold", "frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds", "frontEndThreadPoolBasedKeepAlivePercentage", "frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold", "frontEndUseSlaTimeInAvailability"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WritableSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WritableSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frontEndCallbackThreadsCount": obj.get("frontEndCallbackThreadsCount"),
            "frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds": obj.get("frontEndCpuBasedKeepAliveThrottlingCpuMonitorIntervalInSeconds"),
            "frontEndCpuBasedKeepAliveThrottlingEnabled": obj.get("frontEndCpuBasedKeepAliveThrottlingEnabled"),
            "frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold": obj.get("frontEndCpuBasedKeepAliveThrottlingPercentCpuThreshold"),
            "frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle": obj.get("frontEndCpuBasedKeepAliveThrottlingPercentRequestsToThrottle"),
            "frontEndMaxMillisecondsBetweenMemorySamples": obj.get("frontEndMaxMillisecondsBetweenMemorySamples"),
            "frontEndMemoryThrottleThresholdSettings": obj.get("frontEndMemoryThrottleThresholdSettings"),
            "frontEndMemoryThrottlingEnabled": obj.get("frontEndMemoryThrottlingEnabled"),
            "frontEndMinThreadPoolThreads": obj.get("frontEndMinThreadPoolThreads"),
            "frontEndThreadPoolBasedKeepAliveIOCompletionThreshold": obj.get("frontEndThreadPoolBasedKeepAliveIOCompletionThreshold"),
            "frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds": obj.get("frontEndThreadPoolBasedKeepAliveMonitorIntervalInSeconds"),
            "frontEndThreadPoolBasedKeepAlivePercentage": obj.get("frontEndThreadPoolBasedKeepAlivePercentage"),
            "frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold": obj.get("frontEndThreadPoolBasedKeepAliveWorkerThreadThreshold"),
            "frontEndUseSlaTimeInAvailability": obj.get("frontEndUseSlaTimeInAvailability")
        })
        return _obj



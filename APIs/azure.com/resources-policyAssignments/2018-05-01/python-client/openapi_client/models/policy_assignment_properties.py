# coding: utf-8

"""
    PolicyClient

    To manage and control access to your resources, you can define customized policies and assign them at a scope.

    The version of the OpenAPI document: 2018-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PolicyAssignmentProperties(BaseModel):
    """
    The policy assignment properties.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="This message will be part of response in case of policy violation.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the policy assignment.", alias="displayName")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The policy assignment metadata.")
    not_scopes: Optional[List[StrictStr]] = Field(default=None, description="The policy's excluded scopes.", alias="notScopes")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Required if a parameter is used in policy rule.")
    policy_definition_id: Optional[StrictStr] = Field(default=None, description="The ID of the policy definition or policy set definition being assigned.", alias="policyDefinitionId")
    scope: Optional[StrictStr] = Field(default=None, description="The scope for the policy assignment.")
    __properties: ClassVar[List[str]] = ["description", "displayName", "metadata", "notScopes", "parameters", "policyDefinitionId", "scope"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyAssignmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyAssignmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "metadata": obj.get("metadata"),
            "notScopes": obj.get("notScopes"),
            "parameters": obj.get("parameters"),
            "policyDefinitionId": obj.get("policyDefinitionId"),
            "scope": obj.get("scope")
        })
        return _obj



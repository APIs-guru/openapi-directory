# coding: utf-8

"""
    BatchManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_storage_properties import AutoStorageProperties
from openapi_client.models.key_vault_reference import KeyVaultReference
from openapi_client.models.pool_allocation_mode import PoolAllocationMode
from typing import Optional, Set
from typing_extensions import Self

class BatchAccountProperties(BaseModel):
    """
    Account specific properties.
    """ # noqa: E501
    account_endpoint: Optional[StrictStr] = Field(default=None, description="The account endpoint used to interact with the Batch service.", alias="accountEndpoint")
    active_job_and_job_schedule_quota: Optional[StrictInt] = Field(default=None, alias="activeJobAndJobScheduleQuota")
    auto_storage: Optional[AutoStorageProperties] = Field(default=None, alias="autoStorage")
    dedicated_core_quota: Optional[StrictInt] = Field(default=None, alias="dedicatedCoreQuota")
    key_vault_reference: Optional[KeyVaultReference] = Field(default=None, alias="keyVaultReference")
    low_priority_core_quota: Optional[StrictInt] = Field(default=None, alias="lowPriorityCoreQuota")
    pool_allocation_mode: Optional[PoolAllocationMode] = Field(default=None, alias="poolAllocationMode")
    pool_quota: Optional[StrictInt] = Field(default=None, alias="poolQuota")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioned state of the resource", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["accountEndpoint", "activeJobAndJobScheduleQuota", "autoStorage", "dedicatedCoreQuota", "keyVaultReference", "lowPriorityCoreQuota", "poolAllocationMode", "poolQuota", "provisioningState"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Cancelled']):
            raise ValueError("must be one of enum values ('Invalid', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Cancelled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_endpoint",
            "active_job_and_job_schedule_quota",
            "dedicated_core_quota",
            "low_priority_core_quota",
            "pool_quota",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_storage
        if self.auto_storage:
            _dict['autoStorage'] = self.auto_storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_vault_reference
        if self.key_vault_reference:
            _dict['keyVaultReference'] = self.key_vault_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountEndpoint": obj.get("accountEndpoint"),
            "activeJobAndJobScheduleQuota": obj.get("activeJobAndJobScheduleQuota"),
            "autoStorage": AutoStorageProperties.from_dict(obj["autoStorage"]) if obj.get("autoStorage") is not None else None,
            "dedicatedCoreQuota": obj.get("dedicatedCoreQuota"),
            "keyVaultReference": KeyVaultReference.from_dict(obj["keyVaultReference"]) if obj.get("keyVaultReference") is not None else None,
            "lowPriorityCoreQuota": obj.get("lowPriorityCoreQuota"),
            "poolAllocationMode": obj.get("poolAllocationMode"),
            "poolQuota": obj.get("poolQuota"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



# coding: utf-8

"""
    BatchManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.batch_account import BatchAccount

class TestBatchAccount(unittest.TestCase):
    """BatchAccount unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BatchAccount:
        """Test BatchAccount
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BatchAccount`
        """
        model = BatchAccount()
        if include_optional:
            return BatchAccount(
                properties = openapi_client.models.batch_account_properties.BatchAccountProperties(
                    account_endpoint = '', 
                    active_job_and_job_schedule_quota = 56, 
                    auto_storage = openapi_client.models.auto_storage_properties.AutoStorageProperties(
                        last_key_sync = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    dedicated_core_quota = 56, 
                    key_vault_reference = openapi_client.models.key_vault_reference.KeyVaultReference(
                        id = '', 
                        url = '', ), 
                    low_priority_core_quota = 56, 
                    pool_allocation_mode = 'BatchService', 
                    pool_quota = 56, 
                    provisioning_state = 'Invalid', ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return BatchAccount(
        )
        """

    def testBatchAccount(self):
        """Test BatchAccount"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

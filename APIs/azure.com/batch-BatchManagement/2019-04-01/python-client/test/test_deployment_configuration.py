# coding: utf-8

"""
    BatchManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deployment_configuration import DeploymentConfiguration

class TestDeploymentConfiguration(unittest.TestCase):
    """DeploymentConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeploymentConfiguration:
        """Test DeploymentConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeploymentConfiguration`
        """
        model = DeploymentConfiguration()
        if include_optional:
            return DeploymentConfiguration(
                cloud_service_configuration = openapi_client.models.the_configuration_for_nodes_in_a_pool_based_on_the_azure_cloud_services_platform/.The configuration for nodes in a pool based on the Azure Cloud Services platform.(
                    os_family = '', 
                    os_version = '', ),
                virtual_machine_configuration = openapi_client.models.the_configuration_for_compute_nodes_in_a_pool_based_on_the_azure_virtual_machines_infrastructure/.The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.(
                    container_configuration = openapi_client.models.the_configuration_for_container_enabled_pools/.The configuration for container-enabled pools.(
                        container_image_names = [
                            ''
                            ], 
                        container_registries = [
                            openapi_client.models.a_private_container_registry/.A private container registry.(
                                password = '', 
                                registry_server = '', 
                                username = '', )
                            ], 
                        type = 'DockerCompatible', ), 
                    data_disks = [
                        openapi_client.models.data_disk.DataDisk(
                            caching = 'None', 
                            disk_size_gb = 56, 
                            lun = 56, 
                            storage_account_type = 'Standard_LRS', )
                        ], 
                    image_reference = openapi_client.models.a_reference_to_an_azure_virtual_machines_marketplace_image_or_the_azure_image_resource_of_a_custom_virtual_machine/_to_get_the_list_of_all_image_references_verified_by_azure_batch,_see_the_'list_supported_node_agent_skus'_operation/.A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the 'List supported node agent SKUs' operation.(
                        id = '', 
                        offer = '', 
                        publisher = '', 
                        sku = '', 
                        version = '', ), 
                    license_type = '', 
                    node_agent_sku_id = '', 
                    windows_configuration = openapi_client.models.windows_operating_system_settings_to_apply_to_the_virtual_machine/.Windows operating system settings to apply to the virtual machine.(
                        enable_automatic_updates = True, ), )
            )
        else:
            return DeploymentConfiguration(
        )
        """

    def testDeploymentConfiguration(self):
        """Test DeploymentConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

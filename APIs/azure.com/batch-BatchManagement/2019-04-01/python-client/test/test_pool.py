# coding: utf-8

"""
    BatchManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pool import Pool

class TestPool(unittest.TestCase):
    """Pool unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Pool:
        """Test Pool
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Pool`
        """
        model = Pool()
        if include_optional:
            return Pool(
                properties = openapi_client.models.pool_properties.PoolProperties(
                    allocation_state = 'Steady', 
                    allocation_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    application_licenses = [
                        ''
                        ], 
                    application_packages = [
                        openapi_client.models.link_to_an_application_package_inside_the_batch_account.Link to an application package inside the batch account(
                            id = '', 
                            version = '', )
                        ], 
                    auto_scale_run = openapi_client.models.the_results_and_errors_from_an_execution_of_a_pool_autoscale_formula/.The results and errors from an execution of a pool autoscale formula.(
                        error = openapi_client.models.an_error_that_occurred_when_autoscaling_a_pool/.An error that occurred when autoscaling a pool.(
                            code = '', 
                            details = [
                                openapi_client.models.an_error_that_occurred_when_autoscaling_a_pool/.An error that occurred when autoscaling a pool.(
                                    code = '', 
                                    details = [
                                        
                                        ], 
                                    message = '', )
                                ], 
                            message = '', ), 
                        evaluation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        results = '', ), 
                    certificates = [
                        openapi_client.models.a_reference_to_a_certificate_to_be_installed_on_compute_nodes_in_a_pool/_this_must_exist_inside_the_same_account_as_the_pool/.A reference to a certificate to be installed on compute nodes in a pool. This must exist inside the same account as the pool.(
                            id = '', 
                            store_location = 'CurrentUser', 
                            store_name = '', 
                            visibility = [
                                'StartTask'
                                ], )
                        ], 
                    creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    current_dedicated_nodes = 56, 
                    current_low_priority_nodes = 56, 
                    deployment_configuration = openapi_client.models.deployment_configuration_properties/.Deployment configuration properties.(
                        cloud_service_configuration = openapi_client.models.the_configuration_for_nodes_in_a_pool_based_on_the_azure_cloud_services_platform/.The configuration for nodes in a pool based on the Azure Cloud Services platform.(
                            os_family = '', 
                            os_version = '', ), 
                        virtual_machine_configuration = openapi_client.models.the_configuration_for_compute_nodes_in_a_pool_based_on_the_azure_virtual_machines_infrastructure/.The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.(
                            container_configuration = openapi_client.models.the_configuration_for_container_enabled_pools/.The configuration for container-enabled pools.(
                                container_image_names = [
                                    ''
                                    ], 
                                container_registries = [
                                    openapi_client.models.a_private_container_registry/.A private container registry.(
                                        password = '', 
                                        registry_server = '', 
                                        username = '', )
                                    ], 
                                type = 'DockerCompatible', ), 
                            data_disks = [
                                openapi_client.models.data_disk.DataDisk(
                                    caching = 'None', 
                                    disk_size_gb = 56, 
                                    lun = 56, 
                                    storage_account_type = 'Standard_LRS', )
                                ], 
                            image_reference = openapi_client.models.a_reference_to_an_azure_virtual_machines_marketplace_image_or_the_azure_image_resource_of_a_custom_virtual_machine/_to_get_the_list_of_all_image_references_verified_by_azure_batch,_see_the_'list_supported_node_agent_skus'_operation/.A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the 'List supported node agent SKUs' operation.(
                                id = '', 
                                offer = '', 
                                publisher = '', 
                                sku = '', 
                                version = '', ), 
                            license_type = '', 
                            node_agent_sku_id = '', 
                            windows_configuration = openapi_client.models.windows_operating_system_settings_to_apply_to_the_virtual_machine/.Windows operating system settings to apply to the virtual machine.(
                                enable_automatic_updates = True, ), ), ), 
                    display_name = '', 
                    inter_node_communication = 'Enabled', 
                    last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    max_tasks_per_node = 56, 
                    metadata = [
                        openapi_client.models.a_name_value_pair_associated_with_a_batch_service_resource/.A name-value pair associated with a Batch service resource.(
                            name = '', 
                            value = '', )
                        ], 
                    network_configuration = openapi_client.models.network_configuration.NetworkConfiguration(
                        endpoint_configuration = openapi_client.models.the_endpoint_configuration_for_a_pool/.The endpoint configuration for a pool.(
                            inbound_nat_pools = [
                                openapi_client.models.a_inbound_nat_pool_that_can_be_used_to_address_specific_ports_on_compute_nodes_in_a_batch_pool_externally/.A inbound NAT pool that can be used to address specific ports on compute nodes in a Batch pool externally.(
                                    backend_port = 56, 
                                    frontend_port_range_end = 56, 
                                    frontend_port_range_start = 56, 
                                    name = '', 
                                    network_security_group_rules = [
                                        openapi_client.models.a_network_security_group_rule_to_apply_to_an_inbound_endpoint/.A network security group rule to apply to an inbound endpoint.(
                                            access = 'Allow', 
                                            priority = 56, 
                                            source_address_prefix = '', )
                                        ], 
                                    protocol = 'TCP', )
                                ], ), 
                        subnet_id = '', ), 
                    provisioning_state = 'Succeeded', 
                    provisioning_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    resize_operation_status = openapi_client.models.details_about_the_current_or_last_completed_resize_operation/.Details about the current or last completed resize operation.(
                        errors = [
                            openapi_client.models.an_error_that_occurred_when_resizing_a_pool/.An error that occurred when resizing a pool.(
                                code = '', 
                                details = [
                                    openapi_client.models.an_error_that_occurred_when_resizing_a_pool/.An error that occurred when resizing a pool.(
                                        code = '', 
                                        details = [
                                            
                                            ], 
                                        message = '', )
                                    ], 
                                message = '', )
                            ], 
                        node_deallocation_option = 'Requeue', 
                        resize_timeout = '', 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        target_dedicated_nodes = 56, 
                        target_low_priority_nodes = 56, ), 
                    scale_settings = openapi_client.models.scale_settings_for_the_pool.Scale settings for the pool(
                        auto_scale = openapi_client.models.auto_scale_settings_for_the_pool/.AutoScale settings for the pool.(
                            evaluation_interval = '', 
                            formula = '', ), 
                        fixed_scale = openapi_client.models.fixed_scale_settings_for_the_pool/.Fixed scale settings for the pool.(
                            resize_timeout = '', 
                            target_dedicated_nodes = 56, 
                            target_low_priority_nodes = 56, ), ), 
                    start_task = openapi_client.models.a_task_which_is_run_when_a_compute_node_joins_a_pool_in_the_azure_batch_service,_or_when_the_compute_node_is_rebooted_or_reimaged/.A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.(
                        command_line = '', 
                        container_settings = openapi_client.models.the_container_settings_for_a_task/.The container settings for a task.(
                            container_run_options = '', 
                            image_name = '', 
                            registry = openapi_client.models.a_private_container_registry/.A private container registry.(
                                password = '', 
                                registry_server = '', 
                                username = '', ), ), 
                        environment_settings = [
                            openapi_client.models.an_environment_variable_to_be_set_on_a_task_process/.An environment variable to be set on a task process.(
                                name = '', 
                                value = '', )
                            ], 
                        max_task_retry_count = 56, 
                        resource_files = [
                            openapi_client.models.a_single_file_or_multiple_files_to_be_downloaded_to_a_compute_node/.A single file or multiple files to be downloaded to a compute node.(
                                auto_storage_container_name = '', 
                                blob_prefix = '', 
                                file_mode = '', 
                                file_path = '', 
                                http_url = '', 
                                storage_container_url = '', )
                            ], 
                        user_identity = openapi_client.models.the_definition_of_the_user_identity_under_which_the_task_is_run/.The definition of the user identity under which the task is run.(
                            auto_user = openapi_client.models.specifies_the_parameters_for_the_auto_user_that_runs_a_task_on_the_batch_service/.Specifies the parameters for the auto user that runs a task on the Batch service.(
                                elevation_level = 'NonAdmin', 
                                scope = 'Task', ), 
                            user_name = '', ), 
                        wait_for_success = True, ), 
                    task_scheduling_policy = openapi_client.models.specifies_how_tasks_should_be_distributed_across_compute_nodes/.Specifies how tasks should be distributed across compute nodes.(
                        node_fill_type = 'Spread', ), 
                    user_accounts = [
                        openapi_client.models.properties_used_to_create_a_user_on_an_azure_batch_node/.Properties used to create a user on an Azure Batch node.(
                            linux_user_configuration = openapi_client.models.properties_used_to_create_a_user_account_on_a_linux_node/.Properties used to create a user account on a Linux node.(
                                gid = 56, 
                                ssh_private_key = '', 
                                uid = 56, ), 
                            name = '', 
                            password = '', 
                            windows_user_configuration = openapi_client.models.properties_used_to_create_a_user_account_on_a_windows_node/.Properties used to create a user account on a Windows node.(
                                login_mode = 'Batch', ), )
                        ], 
                    vm_size = '', ),
                etag = '',
                id = '',
                name = '',
                type = ''
            )
        else:
            return Pool(
        )
        """

    def testPool(self):
        """Test Pool"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

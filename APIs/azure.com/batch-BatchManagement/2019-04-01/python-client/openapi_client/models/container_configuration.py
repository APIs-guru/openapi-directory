# coding: utf-8

"""
    BatchManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_registry import ContainerRegistry
from typing import Optional, Set
from typing_extensions import Self

class ContainerConfiguration(BaseModel):
    """
    ContainerConfiguration
    """ # noqa: E501
    container_image_names: Optional[List[StrictStr]] = Field(default=None, description="This is the full image reference, as would be specified to \"docker pull\". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.", alias="containerImageNames")
    container_registries: Optional[List[ContainerRegistry]] = Field(default=None, description="If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.", alias="containerRegistries")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["containerImageNames", "containerRegistries", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DockerCompatible']):
            raise ValueError("must be one of enum values ('DockerCompatible')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in container_registries (list)
        _items = []
        if self.container_registries:
            for _item_container_registries in self.container_registries:
                if _item_container_registries:
                    _items.append(_item_container_registries.to_dict())
            _dict['containerRegistries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerImageNames": obj.get("containerImageNames"),
            "containerRegistries": [ContainerRegistry.from_dict(_item) for _item in obj["containerRegistries"]] if obj.get("containerRegistries") is not None else None,
            "type": obj.get("type")
        })
        return _obj



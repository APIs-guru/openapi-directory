# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2018-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LeaseContainerRequest(BaseModel):
    """
    Lease Container request schema.
    """ # noqa: E501
    action: StrictStr = Field(description="Specifies the lease action. Can be one of the available actions.")
    break_period: Optional[StrictInt] = Field(default=None, description="Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.", alias="breakPeriod")
    lease_duration: Optional[StrictInt] = Field(default=None, description="Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires.", alias="leaseDuration")
    lease_id: Optional[StrictStr] = Field(default=None, description="Identifies the lease. Can be specified in any valid GUID string format.", alias="leaseId")
    proposed_lease_id: Optional[StrictStr] = Field(default=None, description="Optional for acquire, required for change. Proposed lease ID, in a GUID string format.", alias="proposedLeaseId")
    __properties: ClassVar[List[str]] = ["action", "breakPeriod", "leaseDuration", "leaseId", "proposedLeaseId"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Acquire', 'Renew', 'Change', 'Release', 'Break']):
            raise ValueError("must be one of enum values ('Acquire', 'Renew', 'Change', 'Release', 'Break')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaseContainerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaseContainerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "breakPeriod": obj.get("breakPeriod"),
            "leaseDuration": obj.get("leaseDuration"),
            "leaseId": obj.get("leaseId"),
            "proposedLeaseId": obj.get("proposedLeaseId")
        })
        return _obj



# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2018-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.immutability_policy_properties import ImmutabilityPolicyProperties
from openapi_client.models.legal_hold_properties import LegalHoldProperties
from typing import Optional, Set
from typing_extensions import Self

class ContainerProperties(BaseModel):
    """
    The properties of a container.
    """ # noqa: E501
    has_immutability_policy: Optional[StrictBool] = Field(default=None, description="The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.", alias="hasImmutabilityPolicy")
    has_legal_hold: Optional[StrictBool] = Field(default=None, description="The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.", alias="hasLegalHold")
    immutability_policy: Optional[ImmutabilityPolicyProperties] = Field(default=None, alias="immutabilityPolicy")
    last_modified_time: Optional[datetime] = Field(default=None, description="Returns the date and time the container was last modified.", alias="lastModifiedTime")
    lease_duration: Optional[StrictStr] = Field(default=None, description="Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.", alias="leaseDuration")
    lease_state: Optional[StrictStr] = Field(default=None, description="Lease state of the container.", alias="leaseState")
    lease_status: Optional[StrictStr] = Field(default=None, description="The lease status of the container.", alias="leaseStatus")
    legal_hold: Optional[LegalHoldProperties] = Field(default=None, alias="legalHold")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="A name-value pair to associate with the container as metadata.")
    public_access: Optional[StrictStr] = Field(default=None, description="Specifies whether data in the container may be accessed publicly and the level of access.", alias="publicAccess")
    __properties: ClassVar[List[str]] = ["hasImmutabilityPolicy", "hasLegalHold", "immutabilityPolicy", "lastModifiedTime", "leaseDuration", "leaseState", "leaseStatus", "legalHold", "metadata", "publicAccess"]

    @field_validator('lease_duration')
    def lease_duration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Infinite', 'Fixed']):
            raise ValueError("must be one of enum values ('Infinite', 'Fixed')")
        return value

    @field_validator('lease_state')
    def lease_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Available', 'Leased', 'Expired', 'Breaking', 'Broken']):
            raise ValueError("must be one of enum values ('Available', 'Leased', 'Expired', 'Breaking', 'Broken')")
        return value

    @field_validator('lease_status')
    def lease_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Locked', 'Unlocked']):
            raise ValueError("must be one of enum values ('Locked', 'Unlocked')")
        return value

    @field_validator('public_access')
    def public_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Container', 'Blob', 'None']):
            raise ValueError("must be one of enum values ('Container', 'Blob', 'None')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "has_immutability_policy",
            "has_legal_hold",
            "last_modified_time",
            "lease_duration",
            "lease_state",
            "lease_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of immutability_policy
        if self.immutability_policy:
            _dict['immutabilityPolicy'] = self.immutability_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_hold
        if self.legal_hold:
            _dict['legalHold'] = self.legal_hold.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hasImmutabilityPolicy": obj.get("hasImmutabilityPolicy"),
            "hasLegalHold": obj.get("hasLegalHold"),
            "immutabilityPolicy": ImmutabilityPolicyProperties.from_dict(obj["immutabilityPolicy"]) if obj.get("immutabilityPolicy") is not None else None,
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "leaseDuration": obj.get("leaseDuration"),
            "leaseState": obj.get("leaseState"),
            "leaseStatus": obj.get("leaseStatus"),
            "legalHold": LegalHoldProperties.from_dict(obj["legalHold"]) if obj.get("legalHold") is not None else None,
            "metadata": obj.get("metadata"),
            "publicAccess": obj.get("publicAccess")
        })
        return _obj



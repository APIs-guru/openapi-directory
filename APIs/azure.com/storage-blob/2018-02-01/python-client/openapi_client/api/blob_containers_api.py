# coding: utf-8

"""
    StorageManagementClient

    The Azure Storage Management API.

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.blob_container import BlobContainer
from openapi_client.models.immutability_policy import ImmutabilityPolicy
from openapi_client.models.lease_container_request import LeaseContainerRequest
from openapi_client.models.lease_container_response import LeaseContainerResponse
from openapi_client.models.legal_hold import LegalHold
from openapi_client.models.list_container_items import ListContainerItems

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BlobContainersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def blob_containers_clear_legal_hold(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        legal_hold: Annotated[LegalHold, Field(description="The LegalHold property that will be clear from a blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LegalHold:
        """blob_containers_clear_legal_hold

        Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param legal_hold: The LegalHold property that will be clear from a blob container. (required)
        :type legal_hold: LegalHold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_clear_legal_hold_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            legal_hold=legal_hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LegalHold",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_clear_legal_hold_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        legal_hold: Annotated[LegalHold, Field(description="The LegalHold property that will be clear from a blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LegalHold]:
        """blob_containers_clear_legal_hold

        Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param legal_hold: The LegalHold property that will be clear from a blob container. (required)
        :type legal_hold: LegalHold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_clear_legal_hold_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            legal_hold=legal_hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LegalHold",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_clear_legal_hold_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        legal_hold: Annotated[LegalHold, Field(description="The LegalHold property that will be clear from a blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_clear_legal_hold

        Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param legal_hold: The LegalHold property that will be clear from a blob container. (required)
        :type legal_hold: LegalHold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_clear_legal_hold_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            legal_hold=legal_hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LegalHold",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_clear_legal_hold_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        legal_hold,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if legal_hold is not None:
            _body_params = legal_hold


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_create(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        blob_container: Annotated[BlobContainer, Field(description="Properties of the blob container to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BlobContainer:
        """blob_containers_create

        Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param blob_container: Properties of the blob container to create. (required)
        :type blob_container: BlobContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_create_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            blob_container=blob_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_create_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        blob_container: Annotated[BlobContainer, Field(description="Properties of the blob container to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BlobContainer]:
        """blob_containers_create

        Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param blob_container: Properties of the blob container to create. (required)
        :type blob_container: BlobContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_create_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            blob_container=blob_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_create_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        blob_container: Annotated[BlobContainer, Field(description="Properties of the blob container to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_create

        Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param blob_container: Properties of the blob container to create. (required)
        :type blob_container: BlobContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_create_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            blob_container=blob_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_create_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        blob_container,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if blob_container is not None:
            _body_params = blob_container


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_create_or_update_immutability_policy(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")] = None,
        parameters: Annotated[Optional[ImmutabilityPolicy], Field(description="The ImmutabilityPolicy Properties that will be created or updated to a blob container.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImmutabilityPolicy:
        """blob_containers_create_or_update_immutability_policy

        Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
        :type if_match: str
        :param parameters: The ImmutabilityPolicy Properties that will be created or updated to a blob container.
        :type parameters: ImmutabilityPolicy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_create_or_update_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_create_or_update_immutability_policy_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")] = None,
        parameters: Annotated[Optional[ImmutabilityPolicy], Field(description="The ImmutabilityPolicy Properties that will be created or updated to a blob container.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImmutabilityPolicy]:
        """blob_containers_create_or_update_immutability_policy

        Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
        :type if_match: str
        :param parameters: The ImmutabilityPolicy Properties that will be created or updated to a blob container.
        :type parameters: ImmutabilityPolicy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_create_or_update_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_create_or_update_immutability_policy_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")] = None,
        parameters: Annotated[Optional[ImmutabilityPolicy], Field(description="The ImmutabilityPolicy Properties that will be created or updated to a blob container.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_create_or_update_immutability_policy

        Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
        :type if_match: str
        :param parameters: The ImmutabilityPolicy Properties that will be created or updated to a blob container.
        :type parameters: ImmutabilityPolicy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_create_or_update_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_create_or_update_immutability_policy_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        immutability_policy_name,
        api_version,
        subscription_id,
        if_match,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if immutability_policy_name is not None:
            _path_params['immutabilityPolicyName'] = immutability_policy_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_delete(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """blob_containers_delete

        Deletes specified container under its account.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_delete_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_delete_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """blob_containers_delete

        Deletes specified container under its account.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_delete_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_delete_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_delete

        Deletes specified container under its account.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_delete_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_delete_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_delete_immutability_policy(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImmutabilityPolicy:
        """blob_containers_delete_immutability_policy

        Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_delete_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_delete_immutability_policy_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImmutabilityPolicy]:
        """blob_containers_delete_immutability_policy

        Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_delete_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_delete_immutability_policy_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_delete_immutability_policy

        Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_delete_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_delete_immutability_policy_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        immutability_policy_name,
        api_version,
        subscription_id,
        if_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if immutability_policy_name is not None:
            _path_params['immutabilityPolicyName'] = immutability_policy_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_extend_immutability_policy(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        parameters: Annotated[Optional[ImmutabilityPolicy], Field(description="The ImmutabilityPolicy Properties that will be extended for a blob container.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImmutabilityPolicy:
        """blob_containers_extend_immutability_policy

        Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param parameters: The ImmutabilityPolicy Properties that will be extended for a blob container.
        :type parameters: ImmutabilityPolicy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_extend_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_extend_immutability_policy_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        parameters: Annotated[Optional[ImmutabilityPolicy], Field(description="The ImmutabilityPolicy Properties that will be extended for a blob container.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImmutabilityPolicy]:
        """blob_containers_extend_immutability_policy

        Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param parameters: The ImmutabilityPolicy Properties that will be extended for a blob container.
        :type parameters: ImmutabilityPolicy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_extend_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_extend_immutability_policy_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        parameters: Annotated[Optional[ImmutabilityPolicy], Field(description="The ImmutabilityPolicy Properties that will be extended for a blob container.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_extend_immutability_policy

        Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param parameters: The ImmutabilityPolicy Properties that will be extended for a blob container.
        :type parameters: ImmutabilityPolicy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_extend_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_extend_immutability_policy_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        if_match,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_get(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BlobContainer:
        """blob_containers_get

        Gets properties of a specified container. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_get_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_get_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BlobContainer]:
        """blob_containers_get

        Gets properties of a specified container. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_get_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_get_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_get

        Gets properties of a specified container. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_get_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_get_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_get_immutability_policy(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImmutabilityPolicy:
        """blob_containers_get_immutability_policy

        Gets the existing immutability policy along with the corresponding ETag in response headers and body.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_get_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_get_immutability_policy_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImmutabilityPolicy]:
        """blob_containers_get_immutability_policy

        Gets the existing immutability policy along with the corresponding ETag in response headers and body.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_get_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_get_immutability_policy_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        immutability_policy_name: Annotated[StrictStr, Field(description="The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_get_immutability_policy

        Gets the existing immutability policy along with the corresponding ETag in response headers and body.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param immutability_policy_name: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default' (required)
        :type immutability_policy_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_get_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            immutability_policy_name=immutability_policy_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_get_immutability_policy_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        immutability_policy_name,
        api_version,
        subscription_id,
        if_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if immutability_policy_name is not None:
            _path_params['immutabilityPolicyName'] = immutability_policy_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_lease(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[Optional[LeaseContainerRequest], Field(description="Lease Container request body.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LeaseContainerResponse:
        """blob_containers_lease

        The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Lease Container request body.
        :type parameters: LeaseContainerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_lease_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LeaseContainerResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_lease_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[Optional[LeaseContainerRequest], Field(description="Lease Container request body.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LeaseContainerResponse]:
        """blob_containers_lease

        The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Lease Container request body.
        :type parameters: LeaseContainerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_lease_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LeaseContainerResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_lease_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[Optional[LeaseContainerRequest], Field(description="Lease Container request body.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_lease

        The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Lease Container request body.
        :type parameters: LeaseContainerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_lease_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LeaseContainerResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_lease_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_list(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListContainerItems:
        """blob_containers_list

        Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_list_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListContainerItems",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_list_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListContainerItems]:
        """blob_containers_list

        Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_list_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListContainerItems",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_list_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_list

        Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_list_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListContainerItems",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_list_serialize(
        self,
        resource_group_name,
        account_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_lock_immutability_policy(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImmutabilityPolicy:
        """blob_containers_lock_immutability_policy

        Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_lock_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_lock_immutability_policy_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImmutabilityPolicy]:
        """blob_containers_lock_immutability_policy

        Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_lock_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_lock_immutability_policy_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[StrictStr, Field(description="The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_lock_immutability_policy

        Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_lock_immutability_policy_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImmutabilityPolicy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_lock_immutability_policy_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        if_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_set_legal_hold(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        legal_hold: Annotated[LegalHold, Field(description="The LegalHold property that will be set to a blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LegalHold:
        """blob_containers_set_legal_hold

        Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param legal_hold: The LegalHold property that will be set to a blob container. (required)
        :type legal_hold: LegalHold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_set_legal_hold_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            legal_hold=legal_hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LegalHold",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_set_legal_hold_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        legal_hold: Annotated[LegalHold, Field(description="The LegalHold property that will be set to a blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LegalHold]:
        """blob_containers_set_legal_hold

        Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param legal_hold: The LegalHold property that will be set to a blob container. (required)
        :type legal_hold: LegalHold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_set_legal_hold_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            legal_hold=legal_hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LegalHold",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_set_legal_hold_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        legal_hold: Annotated[LegalHold, Field(description="The LegalHold property that will be set to a blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_set_legal_hold

        Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param legal_hold: The LegalHold property that will be set to a blob container. (required)
        :type legal_hold: LegalHold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_set_legal_hold_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            legal_hold=legal_hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LegalHold",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_set_legal_hold_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        legal_hold,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if legal_hold is not None:
            _body_params = legal_hold


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def blob_containers_update(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        blob_container: Annotated[BlobContainer, Field(description="Properties to update for the blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BlobContainer:
        """blob_containers_update

        Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param blob_container: Properties to update for the blob container. (required)
        :type blob_container: BlobContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_update_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            blob_container=blob_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def blob_containers_update_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        blob_container: Annotated[BlobContainer, Field(description="Properties to update for the blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BlobContainer]:
        """blob_containers_update

        Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param blob_container: Properties to update for the blob container. (required)
        :type blob_container: BlobContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_update_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            blob_container=blob_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def blob_containers_update_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group within the user's subscription. The name is case insensitive.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.")],
        container_name: Annotated[str, Field(min_length=3, strict=True, max_length=63, description="The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        blob_container: Annotated[BlobContainer, Field(description="Properties to update for the blob container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """blob_containers_update

        Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. 

        :param resource_group_name: The name of the resource group within the user's subscription. The name is case insensitive. (required)
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
        :type account_name: str
        :param container_name: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
        :type container_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param blob_container: Properties to update for the blob container. (required)
        :type blob_container: BlobContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._blob_containers_update_serialize(
            resource_group_name=resource_group_name,
            account_name=account_name,
            container_name=container_name,
            api_version=api_version,
            subscription_id=subscription_id,
            blob_container=blob_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BlobContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _blob_containers_update_serialize(
        self,
        resource_group_name,
        account_name,
        container_name,
        api_version,
        subscription_id,
        blob_container,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if blob_container is not None:
            _body_params = blob_container


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



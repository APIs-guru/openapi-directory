# coding: utf-8

"""
    ServiceBusManagementClient

    Azure Service Bus client for managing Namespace, IPFilter Rules, VirtualNetworkRules and Zone Redundant

    The version of the OpenAPI document: 2018-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption import Encryption
from openapi_client.models.identity import Identity
from typing import Optional, Set
from typing_extensions import Self

class SBNamespaceProperties(BaseModel):
    """
    Properties of the namespace.
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="The time the namespace was created.", alias="createdAt")
    encryption: Optional[Encryption] = None
    identity: Optional[Identity] = None
    metric_id: Optional[StrictStr] = Field(default=None, description="Identifier for Azure Insights metrics", alias="metricId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the namespace.", alias="provisioningState")
    service_bus_endpoint: Optional[StrictStr] = Field(default=None, description="Endpoint you can use to perform Service Bus operations.", alias="serviceBusEndpoint")
    updated_at: Optional[datetime] = Field(default=None, description="The time the namespace was updated.", alias="updatedAt")
    zone_redundant: Optional[StrictBool] = Field(default=None, description="Enabling this property creates a Premium Service Bus Namespace in regions supported availability zones.", alias="zoneRedundant")
    __properties: ClassVar[List[str]] = ["createdAt", "encryption", "identity", "metricId", "provisioningState", "serviceBusEndpoint", "updatedAt", "zoneRedundant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SBNamespaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "metric_id",
            "provisioning_state",
            "service_bus_endpoint",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SBNamespaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "identity": Identity.from_dict(obj["identity"]) if obj.get("identity") is not None else None,
            "metricId": obj.get("metricId"),
            "provisioningState": obj.get("provisioningState"),
            "serviceBusEndpoint": obj.get("serviceBusEndpoint"),
            "updatedAt": obj.get("updatedAt"),
            "zoneRedundant": obj.get("zoneRedundant")
        })
        return _obj



# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.security_sub_assessment import SecuritySubAssessment

class TestSecuritySubAssessment(unittest.TestCase):
    """SecuritySubAssessment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecuritySubAssessment:
        """Test SecuritySubAssessment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecuritySubAssessment`
        """
        model = SecuritySubAssessment()
        if include_optional:
            return SecuritySubAssessment(
                properties = openapi_client.models.security_sub_assessment_properties.SecuritySubAssessmentProperties(
                    additional_data = openapi_client.models.additional_data.AdditionalData(
                        assessed_resource_type = 'SqlServerVulnerability', ), 
                    category = '', 
                    description = '', 
                    display_name = '', 
                    id = '', 
                    impact = '', 
                    remediation = '', 
                    resource_details = openapi_client.models.security_sub_assessment_properties_resource_details.SecuritySubAssessmentProperties_resourceDetails(
                        source = 'Azure', ), 
                    status = openapi_client.models.sub_assessment_status.SubAssessmentStatus(
                        cause = '', 
                        code = 'Healthy', 
                        description = '', 
                        severity = 'Low', ), 
                    time_generated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                id = '',
                name = '',
                type = ''
            )
        else:
            return SecuritySubAssessment(
        )
        """

    def testSecuritySubAssessment(self):
        """Test SecuritySubAssessment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

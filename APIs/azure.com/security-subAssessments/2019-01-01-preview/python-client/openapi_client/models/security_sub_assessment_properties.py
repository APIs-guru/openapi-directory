# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_data import AdditionalData
from openapi_client.models.security_sub_assessment_properties_resource_details import SecuritySubAssessmentPropertiesResourceDetails
from openapi_client.models.sub_assessment_status import SubAssessmentStatus
from typing import Optional, Set
from typing_extensions import Self

class SecuritySubAssessmentProperties(BaseModel):
    """
    Describes properties of an sub-assessment.
    """ # noqa: E501
    additional_data: Optional[AdditionalData] = Field(default=None, alias="additionalData")
    category: Optional[StrictStr] = Field(default=None, description="Category of the sub-assessment")
    description: Optional[StrictStr] = Field(default=None, description="Human readable description of the assessment status")
    display_name: Optional[StrictStr] = Field(default=None, description="User friendly display name of the sub-assessment", alias="displayName")
    id: Optional[StrictStr] = Field(default=None, description="Vulnerability ID")
    impact: Optional[StrictStr] = Field(default=None, description="Description of the impact of this sub-assessment")
    remediation: Optional[StrictStr] = Field(default=None, description="Information on how to remediate this sub-assessment")
    resource_details: Optional[SecuritySubAssessmentPropertiesResourceDetails] = Field(default=None, alias="resourceDetails")
    status: Optional[SubAssessmentStatus] = None
    time_generated: Optional[datetime] = Field(default=None, description="The date and time the sub-assessment was generated", alias="timeGenerated")
    __properties: ClassVar[List[str]] = ["additionalData", "category", "description", "displayName", "id", "impact", "remediation", "resourceDetails", "status", "timeGenerated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecuritySubAssessmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "category",
            "description",
            "display_name",
            "id",
            "impact",
            "remediation",
            "time_generated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_data
        if self.additional_data:
            _dict['additionalData'] = self.additional_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_details
        if self.resource_details:
            _dict['resourceDetails'] = self.resource_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecuritySubAssessmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalData": AdditionalData.from_dict(obj["additionalData"]) if obj.get("additionalData") is not None else None,
            "category": obj.get("category"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "impact": obj.get("impact"),
            "remediation": obj.get("remediation"),
            "resourceDetails": SecuritySubAssessmentPropertiesResourceDetails.from_dict(obj["resourceDetails"]) if obj.get("resourceDetails") is not None else None,
            "status": SubAssessmentStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "timeGenerated": obj.get("timeGenerated")
        })
        return _obj



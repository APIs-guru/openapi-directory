# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_data import AdditionalData
from openapi_client.models.cve import CVE
from openapi_client.models.cvss import CVSS
from openapi_client.models.vendor_reference import VendorReference
from typing import Optional, Set
from typing_extensions import Self

class ContainerRegistryVulnerabilityProperties(AdditionalData):
    """
    Additional context fields for container registry Vulnerability assessment
    """ # noqa: E501
    cve: Optional[List[CVE]] = Field(default=None, description="List of CVEs")
    cvss: Optional[Dict[str, CVSS]] = Field(default=None, description="Dictionary from cvss version to cvss details object")
    image_digest: Optional[StrictStr] = Field(default=None, description="Digest of the vulnerable image", alias="imageDigest")
    patchable: Optional[StrictBool] = Field(default=None, description="Indicates whether a patch is available or not")
    published_time: Optional[datetime] = Field(default=None, description="Published time", alias="publishedTime")
    repository_name: Optional[StrictStr] = Field(default=None, description="Name of the repository which the vulnerable image belongs to", alias="repositoryName")
    type: Optional[StrictStr] = Field(default=None, description="Vulnerability Type. e.g: Vulnerability, Potential Vulnerability, Information Gathered, Vulnerability")
    vendor_references: Optional[List[VendorReference]] = Field(default=None, alias="vendorReferences")
    __properties: ClassVar[List[str]] = ["assessedResourceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerRegistryVulnerabilityProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cve",
            "cvss",
            "image_digest",
            "patchable",
            "published_time",
            "repository_name",
            "type",
            "vendor_references",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerRegistryVulnerabilityProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assessedResourceType": obj.get("assessedResourceType")
        })
        return _obj



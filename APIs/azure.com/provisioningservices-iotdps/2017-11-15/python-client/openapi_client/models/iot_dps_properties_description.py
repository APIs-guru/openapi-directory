# coding: utf-8

"""
    iotDpsClient

    API for using the Azure IoT Hub Device Provisioning Service features.

    The version of the OpenAPI document: 2017-11-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.iot_hub_definition_description import IotHubDefinitionDescription
from openapi_client.models.shared_access_signature_authorization_rule_access_rights_description import SharedAccessSignatureAuthorizationRuleAccessRightsDescription
from typing import Optional, Set
from typing_extensions import Self

class IotDpsPropertiesDescription(BaseModel):
    """
    the service specific properties of a provisoning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope
    """ # noqa: E501
    allocation_policy: Optional[StrictStr] = Field(default=None, description="Allocation policy to be used by this provisioning service.", alias="allocationPolicy")
    authorization_policies: Optional[List[SharedAccessSignatureAuthorizationRuleAccessRightsDescription]] = Field(default=None, description="List of authorization keys for a provisioning service.", alias="authorizationPolicies")
    device_provisioning_host_name: Optional[StrictStr] = Field(default=None, description="Device endpoint for this provisioning service.", alias="deviceProvisioningHostName")
    id_scope: Optional[StrictStr] = Field(default=None, description="Unique identifier of this provisioning service.", alias="idScope")
    iot_hubs: Optional[List[IotHubDefinitionDescription]] = Field(default=None, description="List of IoT hubs assosciated with this provisioning service.", alias="iotHubs")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The ARM provisioning state of the provisioning service.", alias="provisioningState")
    service_operations_host_name: Optional[StrictStr] = Field(default=None, description="Service endpoint for provisioning service.", alias="serviceOperationsHostName")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the provisioning service.")
    __properties: ClassVar[List[str]] = ["allocationPolicy", "authorizationPolicies", "deviceProvisioningHostName", "idScope", "iotHubs", "provisioningState", "serviceOperationsHostName", "state"]

    @field_validator('allocation_policy')
    def allocation_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Hashed', 'GeoLatency', 'Static']):
            raise ValueError("must be one of enum values ('Hashed', 'GeoLatency', 'Static')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Activating', 'Active', 'Deleting', 'Deleted', 'ActivationFailed', 'DeletionFailed', 'Transitioning', 'Suspending', 'Suspended', 'Resuming', 'FailingOver', 'FailoverFailed']):
            raise ValueError("must be one of enum values ('Activating', 'Active', 'Deleting', 'Deleted', 'ActivationFailed', 'DeletionFailed', 'Transitioning', 'Suspending', 'Suspended', 'Resuming', 'FailingOver', 'FailoverFailed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IotDpsPropertiesDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "device_provisioning_host_name",
            "id_scope",
            "service_operations_host_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorization_policies (list)
        _items = []
        if self.authorization_policies:
            for _item_authorization_policies in self.authorization_policies:
                if _item_authorization_policies:
                    _items.append(_item_authorization_policies.to_dict())
            _dict['authorizationPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in iot_hubs (list)
        _items = []
        if self.iot_hubs:
            for _item_iot_hubs in self.iot_hubs:
                if _item_iot_hubs:
                    _items.append(_item_iot_hubs.to_dict())
            _dict['iotHubs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IotDpsPropertiesDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocationPolicy": obj.get("allocationPolicy"),
            "authorizationPolicies": [SharedAccessSignatureAuthorizationRuleAccessRightsDescription.from_dict(_item) for _item in obj["authorizationPolicies"]] if obj.get("authorizationPolicies") is not None else None,
            "deviceProvisioningHostName": obj.get("deviceProvisioningHostName"),
            "idScope": obj.get("idScope"),
            "iotHubs": [IotHubDefinitionDescription.from_dict(_item) for _item in obj["iotHubs"]] if obj.get("iotHubs") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "serviceOperationsHostName": obj.get("serviceOperationsHostName"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    StorageManagementClient

    The Admin Storage Management Client.

    The version of the OpenAPI document: 2015-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.container import Container
from openapi_client.models.containers_list_destination_shares200_response_inner import ContainersListDestinationShares200ResponseInner
from openapi_client.models.migration_parameters import MigrationParameters
from openapi_client.models.migration_result import MigrationResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ContainersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def containers_cancel_migration(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        operation_id: Annotated[StrictStr, Field(description="Operation Id.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MigrationResult:
        """containers_cancel_migration

        Cancel a container migration job.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param operation_id: Operation Id. (required)
        :type operation_id: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_cancel_migration_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            operation_id=operation_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
            '202': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def containers_cancel_migration_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        operation_id: Annotated[StrictStr, Field(description="Operation Id.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MigrationResult]:
        """containers_cancel_migration

        Cancel a container migration job.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param operation_id: Operation Id. (required)
        :type operation_id: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_cancel_migration_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            operation_id=operation_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
            '202': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def containers_cancel_migration_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        operation_id: Annotated[StrictStr, Field(description="Operation Id.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """containers_cancel_migration

        Cancel a container migration job.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param operation_id: Operation Id. (required)
        :type operation_id: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_cancel_migration_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            operation_id=operation_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
            '202': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _containers_cancel_migration_serialize(
        self,
        subscription_id,
        resource_group_name,
        farm_id,
        operation_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if farm_id is not None:
            _path_params['farmId'] = farm_id
        if operation_id is not None:
            _path_params['operationId'] = operation_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/operationresults/{operationId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def containers_list(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        intent: Annotated[StrictStr, Field(description="The container migration intent.")],
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of containers.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index the resource provider uses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Container]:
        """containers_list

        Returns the list of containers which can be migrated in the specified share.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param intent: The container migration intent. (required)
        :type intent: str
        :param max_count: The maximum number of containers.
        :type max_count: int
        :param start_index: The starting index the resource provider uses.
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            intent=intent,
            max_count=max_count,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Container]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def containers_list_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        intent: Annotated[StrictStr, Field(description="The container migration intent.")],
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of containers.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index the resource provider uses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Container]]:
        """containers_list

        Returns the list of containers which can be migrated in the specified share.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param intent: The container migration intent. (required)
        :type intent: str
        :param max_count: The maximum number of containers.
        :type max_count: int
        :param start_index: The starting index the resource provider uses.
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            intent=intent,
            max_count=max_count,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Container]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def containers_list_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        intent: Annotated[StrictStr, Field(description="The container migration intent.")],
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of containers.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index the resource provider uses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """containers_list

        Returns the list of containers which can be migrated in the specified share.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param intent: The container migration intent. (required)
        :type intent: str
        :param max_count: The maximum number of containers.
        :type max_count: int
        :param start_index: The starting index the resource provider uses.
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            intent=intent,
            max_count=max_count,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Container]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _containers_list_serialize(
        self,
        subscription_id,
        resource_group_name,
        farm_id,
        share_name,
        api_version,
        intent,
        max_count,
        start_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if farm_id is not None:
            _path_params['farmId'] = farm_id
        if share_name is not None:
            _path_params['shareName'] = share_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if intent is not None:
            
            _query_params.append(('Intent', intent))
            
        if max_count is not None:
            
            _query_params.append(('MaxCount', max_count))
            
        if start_index is not None:
            
            _query_params.append(('StartIndex', start_index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/containers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def containers_list_destination_shares(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ContainersListDestinationShares200ResponseInner]:
        """containers_list_destination_shares

        Returns a list of destination shares that the system considers as best candidates for migration.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_list_destination_shares_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ContainersListDestinationShares200ResponseInner]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def containers_list_destination_shares_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ContainersListDestinationShares200ResponseInner]]:
        """containers_list_destination_shares

        Returns a list of destination shares that the system considers as best candidates for migration.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_list_destination_shares_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ContainersListDestinationShares200ResponseInner]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def containers_list_destination_shares_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """containers_list_destination_shares

        Returns a list of destination shares that the system considers as best candidates for migration.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_list_destination_shares_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ContainersListDestinationShares200ResponseInner]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _containers_list_destination_shares_serialize(
        self,
        subscription_id,
        resource_group_name,
        farm_id,
        share_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if farm_id is not None:
            _path_params['farmId'] = farm_id
        if share_name is not None:
            _path_params['shareName'] = share_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/destinationshares',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def containers_migrate(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        migration_parameters: Annotated[MigrationParameters, Field(description="The parameters of container migration job.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MigrationResult:
        """containers_migrate

        Starts a container migration job to migrate containers to the specified destination share.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param migration_parameters: The parameters of container migration job. (required)
        :type migration_parameters: MigrationParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_migrate_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            migration_parameters=migration_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
            '202': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def containers_migrate_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        migration_parameters: Annotated[MigrationParameters, Field(description="The parameters of container migration job.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MigrationResult]:
        """containers_migrate

        Starts a container migration job to migrate containers to the specified destination share.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param migration_parameters: The parameters of container migration job. (required)
        :type migration_parameters: MigrationParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_migrate_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            migration_parameters=migration_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
            '202': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def containers_migrate_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        share_name: Annotated[StrictStr, Field(description="Share name.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        migration_parameters: Annotated[MigrationParameters, Field(description="The parameters of container migration job.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """containers_migrate

        Starts a container migration job to migrate containers to the specified destination share.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param share_name: Share name. (required)
        :type share_name: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param migration_parameters: The parameters of container migration job. (required)
        :type migration_parameters: MigrationParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_migrate_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            share_name=share_name,
            api_version=api_version,
            migration_parameters=migration_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
            '202': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _containers_migrate_serialize(
        self,
        subscription_id,
        resource_group_name,
        farm_id,
        share_name,
        api_version,
        migration_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if farm_id is not None:
            _path_params['farmId'] = farm_id
        if share_name is not None:
            _path_params['shareName'] = share_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if migration_parameters is not None:
            _body_params = migration_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/migrate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def containers_migration_status(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        operation_id: Annotated[StrictStr, Field(description="Operation Id.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MigrationResult:
        """containers_migration_status

        Returns the status of a container migration job.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param operation_id: Operation Id. (required)
        :type operation_id: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_migration_status_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            operation_id=operation_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def containers_migration_status_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        operation_id: Annotated[StrictStr, Field(description="Operation Id.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MigrationResult]:
        """containers_migration_status

        Returns the status of a container migration job.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param operation_id: Operation Id. (required)
        :type operation_id: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_migration_status_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            operation_id=operation_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def containers_migration_status_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Subscription Id.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        farm_id: Annotated[StrictStr, Field(description="Farm Id.")],
        operation_id: Annotated[StrictStr, Field(description="Operation Id.")],
        api_version: Annotated[StrictStr, Field(description="REST Api Version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """containers_migration_status

        Returns the status of a container migration job.

        :param subscription_id: Subscription Id. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param farm_id: Farm Id. (required)
        :type farm_id: str
        :param operation_id: Operation Id. (required)
        :type operation_id: str
        :param api_version: REST Api Version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._containers_migration_status_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            farm_id=farm_id,
            operation_id=operation_id,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MigrationResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _containers_migration_status_serialize(
        self,
        subscription_id,
        resource_group_name,
        farm_id,
        operation_id,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if farm_id is not None:
            _path_params['farmId'] = farm_id
        if operation_id is not None:
            _path_params['operationId'] = operation_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/operationresults/{operationId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



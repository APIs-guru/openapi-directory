# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.device import Device

class TestDevice(unittest.TestCase):
    """Device unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Device:
        """Test Device
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Device`
        """
        model = Device()
        if include_optional:
            return Device(
                properties = openapi_client.models.device_properties.DeviceProperties(
                    activation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    allowed_device_operations = [
                        'None'
                        ], 
                    culture = '', 
                    details = openapi_client.models.device_details.DeviceDetails(
                        available_local_storage_in_bytes = 56, 
                        available_storage_in_bytes = 56, 
                        endpoint_count = 56, 
                        provisioned_local_storage_in_bytes = 56, 
                        provisioned_storage_in_bytes = 56, 
                        total_backup_size_in_bytes = 56, 
                        total_local_storage_in_bytes = 56, 
                        total_storage_in_bytes = 56, 
                        using_local_storage_in_bytes = 56, 
                        using_storage_in_bytes = 56, ), 
                    device_capabilities = [
                        'Invalid'
                        ], 
                    device_configuration_status = 'Complete', 
                    device_description = '', 
                    device_software_version = '', 
                    domain_name = '', 
                    friendly_software_name = '', 
                    model_description = '', 
                    status = 'Unknown', 
                    type = 'Invalid', ),
                id = '',
                name = '',
                type = ''
            )
        else:
            return Device(
        )
        """

    def testDevice(self):
        """Test Device"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

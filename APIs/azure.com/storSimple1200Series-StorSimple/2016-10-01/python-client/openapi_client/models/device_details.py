# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceDetails(BaseModel):
    """
    Class containing more granular details about the device
    """ # noqa: E501
    available_local_storage_in_bytes: Optional[StrictInt] = Field(default=None, description="Local pending storage available on the device in bytes", alias="availableLocalStorageInBytes")
    available_storage_in_bytes: Optional[StrictInt] = Field(default=None, description="Total pending available storage on the device in bytes", alias="availableStorageInBytes")
    endpoint_count: Optional[StrictInt] = Field(default=None, description="Total number of endpoints that are currently on the device ( i.e. number of shares on FileServer or number of volumes on IscsiServer)", alias="endpointCount")
    provisioned_local_storage_in_bytes: Optional[StrictInt] = Field(default=None, description="Storage in bytes that has been provisioned locally on the device", alias="provisionedLocalStorageInBytes")
    provisioned_storage_in_bytes: Optional[StrictInt] = Field(default=None, description="Storage in bytes that has been provisioned on the device including both local and cloud", alias="provisionedStorageInBytes")
    total_backup_size_in_bytes: Optional[StrictInt] = Field(default=None, description="Total size taken up by backups in bytes", alias="totalBackupSizeInBytes")
    total_local_storage_in_bytes: Optional[StrictInt] = Field(default=None, description="Total local storage capacity in device in bytes.", alias="totalLocalStorageInBytes")
    total_storage_in_bytes: Optional[StrictInt] = Field(default=None, description="Total storage available on the device in bytes.", alias="totalStorageInBytes")
    using_local_storage_in_bytes: Optional[StrictInt] = Field(default=None, description="Local Storage that is being currently used in bytes", alias="usingLocalStorageInBytes")
    using_storage_in_bytes: Optional[StrictInt] = Field(default=None, description="Storage that is being currently used in bytes including both local and cloud", alias="usingStorageInBytes")
    __properties: ClassVar[List[str]] = ["availableLocalStorageInBytes", "availableStorageInBytes", "endpointCount", "provisionedLocalStorageInBytes", "provisionedStorageInBytes", "totalBackupSizeInBytes", "totalLocalStorageInBytes", "totalStorageInBytes", "usingLocalStorageInBytes", "usingStorageInBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableLocalStorageInBytes": obj.get("availableLocalStorageInBytes"),
            "availableStorageInBytes": obj.get("availableStorageInBytes"),
            "endpointCount": obj.get("endpointCount"),
            "provisionedLocalStorageInBytes": obj.get("provisionedLocalStorageInBytes"),
            "provisionedStorageInBytes": obj.get("provisionedStorageInBytes"),
            "totalBackupSizeInBytes": obj.get("totalBackupSizeInBytes"),
            "totalLocalStorageInBytes": obj.get("totalLocalStorageInBytes"),
            "totalStorageInBytes": obj.get("totalStorageInBytes"),
            "usingLocalStorageInBytes": obj.get("usingLocalStorageInBytes"),
            "usingStorageInBytes": obj.get("usingStorageInBytes")
        })
        return _obj



# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AlertSettingsProperties(BaseModel):
    """
    Class containing the properties of AlertSettings
    """ # noqa: E501
    additional_recipient_email_list: Optional[List[StrictStr]] = Field(default=None, description="List of email addresses (apart from admin/co-admin of subscription) to whom the alert emails need to be sent", alias="additionalRecipientEmailList")
    alert_notification_culture: StrictStr = Field(description="Culture setting to be used while building alert emails. For eg: \"en-US\"", alias="alertNotificationCulture")
    email_notification: StrictStr = Field(description="Value indicating whether user/admins will receive emails when an alert condition occurs on the system", alias="emailNotification")
    notification_to_service_owners: StrictStr = Field(description="Value indicating whether service owners will receive emails when an alert condition occurs on the system. Applicable only if emailNotification flag is Enabled.", alias="notificationToServiceOwners")
    __properties: ClassVar[List[str]] = ["additionalRecipientEmailList", "alertNotificationCulture", "emailNotification", "notificationToServiceOwners"]

    @field_validator('email_notification')
    def email_notification_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('notification_to_service_owners')
    def notification_to_service_owners_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertSettingsProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertSettingsProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalRecipientEmailList": obj.get("additionalRecipientEmailList"),
            "alertNotificationCulture": obj.get("alertNotificationCulture"),
            "emailNotification": obj.get("emailNotification"),
            "notificationToServiceOwners": obj.get("notificationToServiceOwners")
        })
        return _obj



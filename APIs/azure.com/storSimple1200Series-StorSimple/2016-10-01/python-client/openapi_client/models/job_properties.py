# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_stage import JobStage
from openapi_client.models.job_stats import JobStats
from openapi_client.models.update_download_progress import UpdateDownloadProgress
from openapi_client.models.update_install_progress import UpdateInstallProgress
from typing import Optional, Set
from typing_extensions import Self

class JobProperties(BaseModel):
    """
    properties for the job
    """ # noqa: E501
    backup_point_in_time: Optional[datetime] = Field(default=None, description="The time of the backup used for the failover.", alias="backupPointInTime")
    device_id: Optional[StrictStr] = Field(default=None, description="The device id in which the job is currently running", alias="deviceId")
    download_progress: Optional[UpdateDownloadProgress] = Field(default=None, alias="downloadProgress")
    entity_id: Optional[StrictStr] = Field(default=None, description="The entity identifier for which the job ran.", alias="entityId")
    entity_type: Optional[StrictStr] = Field(default=None, description="The entity type for which the job ran.", alias="entityType")
    install_progress: Optional[UpdateInstallProgress] = Field(default=None, alias="installProgress")
    is_cancellable: Optional[StrictBool] = Field(default=None, description="Represents whether the job is cancellable or not", alias="isCancellable")
    job_stages: Optional[List[JobStage]] = Field(default=None, description="The job stages.", alias="jobStages")
    job_type: StrictStr = Field(description="Type of the job", alias="jobType")
    source_device_id: Optional[StrictStr] = Field(default=None, description="The source device identifier of the failover job.", alias="sourceDeviceId")
    stats: Optional[JobStats] = None
    target_id: Optional[StrictStr] = Field(default=None, description="Id of the object that is created by the job", alias="targetId")
    target_type: Optional[StrictStr] = Field(default=None, description="The target type of the backup.", alias="targetType")
    __properties: ClassVar[List[str]] = ["backupPointInTime", "deviceId", "downloadProgress", "entityId", "entityType", "installProgress", "isCancellable", "jobStages", "jobType", "sourceDeviceId", "stats", "targetId", "targetType"]

    @field_validator('job_type')
    def job_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Backup', 'Clone', 'Failover', 'DownloadUpdates', 'InstallUpdates']):
            raise ValueError("must be one of enum values ('Backup', 'Clone', 'Failover', 'DownloadUpdates', 'InstallUpdates')")
        return value

    @field_validator('target_type')
    def target_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FileServer', 'DiskServer']):
            raise ValueError("must be one of enum values ('FileServer', 'DiskServer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of download_progress
        if self.download_progress:
            _dict['downloadProgress'] = self.download_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of install_progress
        if self.install_progress:
            _dict['installProgress'] = self.install_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in job_stages (list)
        _items = []
        if self.job_stages:
            for _item_job_stages in self.job_stages:
                if _item_job_stages:
                    _items.append(_item_job_stages.to_dict())
            _dict['jobStages'] = _items
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupPointInTime": obj.get("backupPointInTime"),
            "deviceId": obj.get("deviceId"),
            "downloadProgress": UpdateDownloadProgress.from_dict(obj["downloadProgress"]) if obj.get("downloadProgress") is not None else None,
            "entityId": obj.get("entityId"),
            "entityType": obj.get("entityType"),
            "installProgress": UpdateInstallProgress.from_dict(obj["installProgress"]) if obj.get("installProgress") is not None else None,
            "isCancellable": obj.get("isCancellable"),
            "jobStages": [JobStage.from_dict(_item) for _item in obj["jobStages"]] if obj.get("jobStages") is not None else None,
            "jobType": obj.get("jobType"),
            "sourceDeviceId": obj.get("sourceDeviceId"),
            "stats": JobStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "targetId": obj.get("targetId"),
            "targetType": obj.get("targetType")
        })
        return _obj



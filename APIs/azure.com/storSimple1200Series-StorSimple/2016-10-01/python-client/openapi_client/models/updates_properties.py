# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdatesProperties(BaseModel):
    """
    Properties of the update profile
    """ # noqa: E501
    device_last_scanned_time: Optional[datetime] = Field(default=None, description="The last time when the device did an update scan.", alias="deviceLastScannedTime")
    device_version: Optional[StrictStr] = Field(default=None, description="The current Device version.", alias="deviceVersion")
    in_progress_download_job_id: Optional[StrictStr] = Field(default=None, description="If a download is in progress, this field contains the JobId of that particular download job", alias="inProgressDownloadJobId")
    in_progress_download_job_started_time: Optional[datetime] = Field(default=None, description="The time when the currently running download (if any) started", alias="inProgressDownloadJobStartedTime")
    in_progress_install_job_id: Optional[StrictStr] = Field(default=None, description="If an install is in progress, this field contains the JobId of that particular install job", alias="inProgressInstallJobId")
    in_progress_install_job_started_time: Optional[datetime] = Field(default=None, description="The time when the currently running install (if any) started", alias="inProgressInstallJobStartedTime")
    in_progress_scan_started_time: Optional[datetime] = Field(default=None, description="The time when the currently running scan (if any) started", alias="inProgressScanStartedTime")
    last_completed_download_job_time: Optional[datetime] = Field(default=None, description="The time when the last Download job was completed (success|cancelled|failed) on the device.", alias="lastCompletedDownloadJobTime")
    last_completed_install_job_time: Optional[datetime] = Field(default=None, description="The time when the last Install job was completed (success|cancelled|failed) on the device.", alias="lastCompletedInstallJobTime")
    last_completed_scan_time: Optional[datetime] = Field(default=None, description="The time when the last scan job was completed (success|cancelled|failed) on the device.", alias="lastCompletedScanTime")
    reboot_required_for_install: Optional[StrictBool] = Field(default=None, description="Set to true if RegularUpdatesAvailable is true and if at least one of the updateItems detected has needs a reboot to install.", alias="rebootRequiredForInstall")
    regular_updates_available: Optional[StrictBool] = Field(default=None, description="Set to true if regular updates were detected for the current version of the device.", alias="regularUpdatesAvailable")
    status: Optional[StrictStr] = Field(default=None, description="The current update operation.")
    total_items_pending_for_download: Optional[StrictInt] = Field(default=None, description="The total number of items pending for download.", alias="totalItemsPendingForDownload")
    total_items_pending_for_install: Optional[StrictInt] = Field(default=None, description="The total number of items pending for install.", alias="totalItemsPendingForInstall")
    __properties: ClassVar[List[str]] = ["deviceLastScannedTime", "deviceVersion", "inProgressDownloadJobId", "inProgressDownloadJobStartedTime", "inProgressInstallJobId", "inProgressInstallJobStartedTime", "inProgressScanStartedTime", "lastCompletedDownloadJobTime", "lastCompletedInstallJobTime", "lastCompletedScanTime", "rebootRequiredForInstall", "regularUpdatesAvailable", "status", "totalItemsPendingForDownload", "totalItemsPendingForInstall"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Idle', 'Scanning', 'Downloading', 'Installing']):
            raise ValueError("must be one of enum values ('Idle', 'Scanning', 'Downloading', 'Installing')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatesProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatesProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceLastScannedTime": obj.get("deviceLastScannedTime"),
            "deviceVersion": obj.get("deviceVersion"),
            "inProgressDownloadJobId": obj.get("inProgressDownloadJobId"),
            "inProgressDownloadJobStartedTime": obj.get("inProgressDownloadJobStartedTime"),
            "inProgressInstallJobId": obj.get("inProgressInstallJobId"),
            "inProgressInstallJobStartedTime": obj.get("inProgressInstallJobStartedTime"),
            "inProgressScanStartedTime": obj.get("inProgressScanStartedTime"),
            "lastCompletedDownloadJobTime": obj.get("lastCompletedDownloadJobTime"),
            "lastCompletedInstallJobTime": obj.get("lastCompletedInstallJobTime"),
            "lastCompletedScanTime": obj.get("lastCompletedScanTime"),
            "rebootRequiredForInstall": obj.get("rebootRequiredForInstall"),
            "regularUpdatesAvailable": obj.get("regularUpdatesAvailable"),
            "status": obj.get("status"),
            "totalItemsPendingForDownload": obj.get("totalItemsPendingForDownload"),
            "totalItemsPendingForInstall": obj.get("totalItemsPendingForInstall")
        })
        return _obj



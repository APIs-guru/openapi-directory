# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_element import BackupElement
from typing import Optional, Set
from typing_extensions import Self

class BackupProperties(BaseModel):
    """
    Class represents Backup properties
    """ # noqa: E501
    created_time: Optional[datetime] = Field(default=None, description="The time when the backup was created.", alias="createdTime")
    device_id: StrictStr = Field(description="The Device Identifier.", alias="deviceId")
    elements: List[BackupElement] = Field(description="The backup elements.")
    expiration_time: Optional[datetime] = Field(default=None, description="The time when the backup will expire.", alias="expirationTime")
    initiated_by: StrictStr = Field(description="Indicates how the backup was initiated \"Manual | Scheduled\".", alias="initiatedBy")
    size_in_bytes: StrictInt = Field(description="The backup size in bytes.", alias="sizeInBytes")
    target_id: Optional[StrictStr] = Field(default=None, description="The path id of the target FileServer or IscsiServer for which the backup was taken.", alias="targetId")
    target_type: Optional[StrictStr] = Field(default=None, description="Type of target, FileServer or IscsiServer", alias="targetType")
    __properties: ClassVar[List[str]] = ["createdTime", "deviceId", "elements", "expirationTime", "initiatedBy", "sizeInBytes", "targetId", "targetType"]

    @field_validator('initiated_by')
    def initiated_by_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Manual', 'Scheduled']):
            raise ValueError("must be one of enum values ('Manual', 'Scheduled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in elements (list)
        _items = []
        if self.elements:
            for _item_elements in self.elements:
                if _item_elements:
                    _items.append(_item_elements.to_dict())
            _dict['elements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdTime": obj.get("createdTime"),
            "deviceId": obj.get("deviceId"),
            "elements": [BackupElement.from_dict(_item) for _item in obj["elements"]] if obj.get("elements") is not None else None,
            "expirationTime": obj.get("expirationTime"),
            "initiatedBy": obj.get("initiatedBy"),
            "sizeInBytes": obj.get("sizeInBytes"),
            "targetId": obj.get("targetId"),
            "targetType": obj.get("targetType")
        })
        return _obj



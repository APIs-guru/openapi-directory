# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ResourceCertificateAndAADDetails(BaseModel):
    """
    Resource Certificate And AAD Details from IDM
    """ # noqa: E501
    aad_authority: StrictStr = Field(description="AAD tenant authority", alias="aadAuthority")
    aad_tenant_id: StrictStr = Field(description="AAD tenant Id", alias="aadTenantId")
    auth_type: Optional[StrictStr] = Field(default=None, description="Specify the Authentication type", alias="authType")
    azure_management_endpoint_audience: StrictStr = Field(description="Azure Management Endpoint Audience", alias="azureManagementEndpointAudience")
    certificate: StrictStr = Field(description="Gets or sets the base64 encoded certificate raw data string")
    friendly_name: StrictStr = Field(description="Certificate friendly name", alias="friendlyName")
    issuer: StrictStr = Field(description="Certificate issuer")
    resource_id: StrictInt = Field(description="Gets or Sets the ResourceId", alias="resourceId")
    service_principal_client_id: StrictStr = Field(description="AAD service principal clientId", alias="servicePrincipalClientId")
    service_principal_object_id: StrictStr = Field(description="AAD service principal ObjectId", alias="servicePrincipalObjectId")
    subject: StrictStr = Field(description="Certificate Subject Name")
    thumbprint: StrictStr = Field(description="Certificate thumbprint")
    valid_from: datetime = Field(description="Certificate Validity start Date time", alias="validFrom")
    valid_to: datetime = Field(description="Certificate Validity End Date time", alias="validTo")
    __properties: ClassVar[List[str]] = ["aadAuthority", "aadTenantId", "authType", "azureManagementEndpointAudience", "certificate", "friendlyName", "issuer", "resourceId", "servicePrincipalClientId", "servicePrincipalObjectId", "subject", "thumbprint", "validFrom", "validTo"]

    @field_validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'AccessControlService', 'AzureActiveDirectory']):
            raise ValueError("must be one of enum values ('Invalid', 'AccessControlService', 'AzureActiveDirectory')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceCertificateAndAADDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceCertificateAndAADDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aadAuthority": obj.get("aadAuthority"),
            "aadTenantId": obj.get("aadTenantId"),
            "authType": obj.get("authType"),
            "azureManagementEndpointAudience": obj.get("azureManagementEndpointAudience"),
            "certificate": obj.get("certificate"),
            "friendlyName": obj.get("friendlyName"),
            "issuer": obj.get("issuer"),
            "resourceId": obj.get("resourceId"),
            "servicePrincipalClientId": obj.get("servicePrincipalClientId"),
            "servicePrincipalObjectId": obj.get("servicePrincipalObjectId"),
            "subject": obj.get("subject"),
            "thumbprint": obj.get("thumbprint"),
            "validFrom": obj.get("validFrom"),
            "validTo": obj.get("validTo")
        })
        return _obj



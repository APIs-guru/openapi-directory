# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from openapi_client.models.metric_data import MetricData
from openapi_client.models.metric_dimension import MetricDimension
from openapi_client.models.metric_name import MetricName
from typing import Optional, Set
from typing_extensions import Self

class Metrics(BaseModel):
    """
    Monitoring metric
    """ # noqa: E501
    dimensions: List[MetricDimension] = Field(description="The Metric dimension which indicates the source of the metric")
    end_time: datetime = Field(description="The metric end time", alias="endTime")
    name: MetricName
    primary_aggregation: StrictStr = Field(description="The metric aggregation type", alias="primaryAggregation")
    resource_id: StrictStr = Field(description="The id of metric source", alias="resourceId")
    start_time: datetime = Field(description="The metric start time", alias="startTime")
    time_grain: StrictStr = Field(description="The time grain, time grain indicates frequency of the metric data", alias="timeGrain")
    type: StrictStr = Field(description="The Type of the metric data")
    unit: StrictStr = Field(description="The unit of the metric data")
    values: List[MetricData] = Field(description="The metric data")
    __properties: ClassVar[List[str]] = ["dimensions", "endTime", "name", "primaryAggregation", "resourceId", "startTime", "timeGrain", "type", "unit", "values"]

    @field_validator('primary_aggregation')
    def primary_aggregation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Average', 'Last', 'Maximum', 'Minimum', 'None', 'Total']):
            raise ValueError("must be one of enum values ('Average', 'Last', 'Maximum', 'Minimum', 'None', 'Total')")
        return value

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Bytes', 'BytesPerSecond', 'Count', 'CountPerSecond', 'Percent', 'Seconds']):
            raise ValueError("must be one of enum values ('Bytes', 'BytesPerSecond', 'Count', 'CountPerSecond', 'Percent', 'Seconds')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensions": [MetricDimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "endTime": obj.get("endTime"),
            "name": MetricName.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "primaryAggregation": obj.get("primaryAggregation"),
            "resourceId": obj.get("resourceId"),
            "startTime": obj.get("startTime"),
            "timeGrain": obj.get("timeGrain"),
            "type": obj.get("type"),
            "unit": obj.get("unit"),
            "values": [MetricData.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None
        })
        return _obj



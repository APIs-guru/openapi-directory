# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ISCSIDiskProperties(BaseModel):
    """
    The iSCSI disk properties.
    """ # noqa: E501
    access_control_records: List[StrictStr] = Field(description="The access control records.", alias="accessControlRecords")
    data_policy: StrictStr = Field(description="The data policy.", alias="dataPolicy")
    description: Optional[StrictStr] = Field(default=None, description="The description.")
    disk_status: StrictStr = Field(description="The disk status.", alias="diskStatus")
    local_used_capacity_in_bytes: Optional[StrictInt] = Field(default=None, description="The local used capacity in bytes.", alias="localUsedCapacityInBytes")
    monitoring_status: StrictStr = Field(description="The monitoring.", alias="monitoringStatus")
    provisioned_capacity_in_bytes: StrictInt = Field(description="The provisioned capacity in bytes.", alias="provisionedCapacityInBytes")
    used_capacity_in_bytes: Optional[StrictInt] = Field(default=None, description="The used capacity in bytes.", alias="usedCapacityInBytes")
    __properties: ClassVar[List[str]] = ["accessControlRecords", "dataPolicy", "description", "diskStatus", "localUsedCapacityInBytes", "monitoringStatus", "provisionedCapacityInBytes", "usedCapacityInBytes"]

    @field_validator('data_policy')
    def data_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Invalid', 'Local', 'Tiered', 'Cloud']):
            raise ValueError("must be one of enum values ('Invalid', 'Local', 'Tiered', 'Cloud')")
        return value

    @field_validator('disk_status')
    def disk_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Online', 'Offline']):
            raise ValueError("must be one of enum values ('Online', 'Offline')")
        return value

    @field_validator('monitoring_status')
    def monitoring_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ISCSIDiskProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "local_used_capacity_in_bytes",
            "used_capacity_in_bytes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ISCSIDiskProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessControlRecords": obj.get("accessControlRecords"),
            "dataPolicy": obj.get("dataPolicy"),
            "description": obj.get("description"),
            "diskStatus": obj.get("diskStatus"),
            "localUsedCapacityInBytes": obj.get("localUsedCapacityInBytes"),
            "monitoringStatus": obj.get("monitoringStatus"),
            "provisionedCapacityInBytes": obj.get("provisionedCapacityInBytes"),
            "usedCapacityInBytes": obj.get("usedCapacityInBytes")
        })
        return _obj



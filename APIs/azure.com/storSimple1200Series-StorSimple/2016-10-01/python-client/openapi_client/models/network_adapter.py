# coding: utf-8

"""
    StorSimpleManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ip_config import IPConfig
from typing import Optional, Set
from typing_extensions import Self

class NetworkAdapter(BaseModel):
    """
    Represents a networkAdapter in a particular node.
    """ # noqa: E501
    dhcp_status: StrictStr = Field(description="Represents state of DHCP.", alias="dhcpStatus")
    i_pv4_info: Optional[IPConfig] = Field(default=None, alias="iPv4Info")
    i_pv6_info: Optional[IPConfig] = Field(default=None, alias="iPv6Info")
    link_speed: Optional[StrictInt] = Field(default=None, description="The speed of the network adapter.", alias="linkSpeed")
    network_adapter_name: StrictStr = Field(description="The name of the network adapter.", alias="networkAdapterName")
    __properties: ClassVar[List[str]] = ["dhcpStatus", "iPv4Info", "iPv6Info", "linkSpeed", "networkAdapterName"]

    @field_validator('dhcp_status')
    def dhcp_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkAdapter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of i_pv4_info
        if self.i_pv4_info:
            _dict['iPv4Info'] = self.i_pv4_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of i_pv6_info
        if self.i_pv6_info:
            _dict['iPv6Info'] = self.i_pv6_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkAdapter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dhcpStatus": obj.get("dhcpStatus"),
            "iPv4Info": IPConfig.from_dict(obj["iPv4Info"]) if obj.get("iPv4Info") is not None else None,
            "iPv6Info": IPConfig.from_dict(obj["iPv6Info"]) if obj.get("iPv6Info") is not None else None,
            "linkSpeed": obj.get("linkSpeed"),
            "networkAdapterName": obj.get("networkAdapterName")
        })
        return _obj



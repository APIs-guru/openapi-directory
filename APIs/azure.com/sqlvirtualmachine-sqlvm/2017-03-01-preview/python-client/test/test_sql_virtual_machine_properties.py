# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sql_virtual_machine_properties import SqlVirtualMachineProperties

class TestSqlVirtualMachineProperties(unittest.TestCase):
    """SqlVirtualMachineProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SqlVirtualMachineProperties:
        """Test SqlVirtualMachineProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SqlVirtualMachineProperties`
        """
        model = SqlVirtualMachineProperties()
        if include_optional:
            return SqlVirtualMachineProperties(
                auto_backup_settings = openapi_client.models.auto_backup_settings.AutoBackupSettings(
                    backup_schedule_type = 'Manual', 
                    backup_system_dbs = True, 
                    enable = True, 
                    enable_encryption = True, 
                    full_backup_frequency = 'Daily', 
                    full_backup_start_time = 56, 
                    full_backup_window_hours = 56, 
                    log_backup_frequency = 56, 
                    password = '', 
                    retention_period = 56, 
                    storage_access_key = '', 
                    storage_account_url = '', ),
                auto_patching_settings = openapi_client.models.auto_patching_settings.AutoPatchingSettings(
                    day_of_week = 'Monday', 
                    enable = True, 
                    maintenance_window_duration = 56, 
                    maintenance_window_starting_hour = 56, ),
                key_vault_credential_settings = openapi_client.models.key_vault_credential_settings.KeyVaultCredentialSettings(
                    azure_key_vault_url = '', 
                    credential_name = '', 
                    enable = True, 
                    service_principal_name = '', 
                    service_principal_secret = '', ),
                provisioning_state = '',
                server_configurations_management_settings = openapi_client.models.server_configurations_management_settings.ServerConfigurationsManagementSettings(
                    additional_features_server_configurations = openapi_client.models.additional_features_server_configurations.AdditionalFeaturesServerConfigurations(
                        is_r_services_enabled = True, ), 
                    sql_connectivity_update_settings = openapi_client.models.sql_connectivity_update_settings.SqlConnectivityUpdateSettings(
                        connectivity_type = 'LOCAL', 
                        port = 56, 
                        sql_auth_update_password = '', 
                        sql_auth_update_user_name = '', ), 
                    sql_storage_update_settings = openapi_client.models.sql_storage_update_settings.SqlStorageUpdateSettings(
                        disk_configuration_type = 'NEW', 
                        disk_count = 56, 
                        starting_device_id = 56, ), 
                    sql_workload_type_update_settings = openapi_client.models.sql_workload_type_update_settings.SqlWorkloadTypeUpdateSettings(
                        sql_workload_type = 'GENERAL', ), ),
                sql_image_offer = '',
                sql_image_sku = 'Developer',
                sql_management = 'Full',
                sql_server_license_type = 'PAYG',
                sql_virtual_machine_group_resource_id = '',
                storage_configuration_settings = openapi_client.models.storage_configuration_settings.StorageConfigurationSettings(
                    disk_configuration_type = 'NEW', 
                    sql_data_settings = openapi_client.models.sql_storage_settings.SQLStorageSettings(
                        default_file_path = '', 
                        luns = [
                            56
                            ], ), 
                    sql_log_settings = openapi_client.models.sql_storage_settings.SQLStorageSettings(
                        default_file_path = '', ), 
                    sql_temp_db_settings = , 
                    storage_workload_type = 'GENERAL', ),
                virtual_machine_resource_id = '',
                wsfc_domain_credentials = openapi_client.models.wsfc_domain_credentials.WsfcDomainCredentials(
                    cluster_bootstrap_account_password = '', 
                    cluster_operator_account_password = '', 
                    sql_service_account_password = '', )
            )
        else:
            return SqlVirtualMachineProperties(
        )
        """

    def testSqlVirtualMachineProperties(self):
        """Test SqlVirtualMachineProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

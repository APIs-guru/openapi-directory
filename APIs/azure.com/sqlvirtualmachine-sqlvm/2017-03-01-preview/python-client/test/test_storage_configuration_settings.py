# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.storage_configuration_settings import StorageConfigurationSettings

class TestStorageConfigurationSettings(unittest.TestCase):
    """StorageConfigurationSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StorageConfigurationSettings:
        """Test StorageConfigurationSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StorageConfigurationSettings`
        """
        model = StorageConfigurationSettings()
        if include_optional:
            return StorageConfigurationSettings(
                disk_configuration_type = 'NEW',
                sql_data_settings = openapi_client.models.sql_storage_settings.SQLStorageSettings(
                    default_file_path = '', 
                    luns = [
                        56
                        ], ),
                sql_log_settings = openapi_client.models.sql_storage_settings.SQLStorageSettings(
                    default_file_path = '', 
                    luns = [
                        56
                        ], ),
                sql_temp_db_settings = openapi_client.models.sql_storage_settings.SQLStorageSettings(
                    default_file_path = '', 
                    luns = [
                        56
                        ], ),
                storage_workload_type = 'GENERAL'
            )
        else:
            return StorageConfigurationSettings(
        )
        """

    def testStorageConfigurationSettings(self):
        """Test StorageConfigurationSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

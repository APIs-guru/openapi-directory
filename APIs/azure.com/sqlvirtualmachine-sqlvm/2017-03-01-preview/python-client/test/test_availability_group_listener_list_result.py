# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.availability_group_listener_list_result import AvailabilityGroupListenerListResult

class TestAvailabilityGroupListenerListResult(unittest.TestCase):
    """AvailabilityGroupListenerListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AvailabilityGroupListenerListResult:
        """Test AvailabilityGroupListenerListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AvailabilityGroupListenerListResult`
        """
        model = AvailabilityGroupListenerListResult()
        if include_optional:
            return AvailabilityGroupListenerListResult(
                next_link = '',
                value = [
                    openapi_client.models.availability_group_listener.AvailabilityGroupListener(
                        properties = openapi_client.models.availability_group_listener_properties.AvailabilityGroupListenerProperties(
                            availability_group_name = '', 
                            create_default_availability_group_if_not_exist = True, 
                            load_balancer_configurations = [
                                openapi_client.models.load_balancer_configuration.LoadBalancerConfiguration(
                                    load_balancer_resource_id = '', 
                                    private_ip_address = openapi_client.models.private_ip_address.PrivateIPAddress(
                                        ip_address = '', 
                                        subnet_resource_id = '', ), 
                                    probe_port = 56, 
                                    public_ip_address_resource_id = '', 
                                    sql_virtual_machine_instances = [
                                        ''
                                        ], )
                                ], 
                            port = 56, 
                            provisioning_state = '', ), )
                    ]
            )
        else:
            return AvailabilityGroupListenerListResult(
        )
        """

    def testAvailabilityGroupListenerListResult(self):
        """Test AvailabilityGroupListenerListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

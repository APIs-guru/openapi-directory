# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.server_configurations_management_settings import ServerConfigurationsManagementSettings

class TestServerConfigurationsManagementSettings(unittest.TestCase):
    """ServerConfigurationsManagementSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServerConfigurationsManagementSettings:
        """Test ServerConfigurationsManagementSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServerConfigurationsManagementSettings`
        """
        model = ServerConfigurationsManagementSettings()
        if include_optional:
            return ServerConfigurationsManagementSettings(
                additional_features_server_configurations = openapi_client.models.additional_features_server_configurations.AdditionalFeaturesServerConfigurations(
                    is_r_services_enabled = True, ),
                sql_connectivity_update_settings = openapi_client.models.sql_connectivity_update_settings.SqlConnectivityUpdateSettings(
                    connectivity_type = 'LOCAL', 
                    port = 56, 
                    sql_auth_update_password = '', 
                    sql_auth_update_user_name = '', ),
                sql_storage_update_settings = openapi_client.models.sql_storage_update_settings.SqlStorageUpdateSettings(
                    disk_configuration_type = 'NEW', 
                    disk_count = 56, 
                    starting_device_id = 56, ),
                sql_workload_type_update_settings = openapi_client.models.sql_workload_type_update_settings.SqlWorkloadTypeUpdateSettings(
                    sql_workload_type = 'GENERAL', )
            )
        else:
            return ServerConfigurationsManagementSettings(
        )
        """

    def testServerConfigurationsManagementSettings(self):
        """Test ServerConfigurationsManagementSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

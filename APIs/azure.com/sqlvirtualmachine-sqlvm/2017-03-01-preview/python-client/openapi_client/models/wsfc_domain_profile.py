# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WsfcDomainProfile(BaseModel):
    """
    Active Directory account details to operate Windows Server Failover Cluster.
    """ # noqa: E501
    cluster_bootstrap_account: Optional[StrictStr] = Field(default=None, description="Account name used for creating cluster (at minimum needs permissions to 'Create Computer Objects' in domain).", alias="clusterBootstrapAccount")
    cluster_operator_account: Optional[StrictStr] = Field(default=None, description="Account name used for operating cluster i.e. will be part of administrators group on all the participating virtual machines in the cluster.", alias="clusterOperatorAccount")
    domain_fqdn: Optional[StrictStr] = Field(default=None, description="Fully qualified name of the domain.", alias="domainFqdn")
    file_share_witness_path: Optional[StrictStr] = Field(default=None, description="Optional path for fileshare witness.", alias="fileShareWitnessPath")
    ou_path: Optional[StrictStr] = Field(default=None, description="Organizational Unit path in which the nodes and cluster will be present.", alias="ouPath")
    sql_service_account: Optional[StrictStr] = Field(default=None, description="Account name under which SQL service will run on all participating SQL virtual machines in the cluster.", alias="sqlServiceAccount")
    storage_account_primary_key: Optional[StrictStr] = Field(default=None, description="Primary key of the witness storage account.", alias="storageAccountPrimaryKey")
    storage_account_url: Optional[StrictStr] = Field(default=None, description="Fully qualified ARM resource id of the witness storage account.", alias="storageAccountUrl")
    __properties: ClassVar[List[str]] = ["clusterBootstrapAccount", "clusterOperatorAccount", "domainFqdn", "fileShareWitnessPath", "ouPath", "sqlServiceAccount", "storageAccountPrimaryKey", "storageAccountUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WsfcDomainProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WsfcDomainProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterBootstrapAccount": obj.get("clusterBootstrapAccount"),
            "clusterOperatorAccount": obj.get("clusterOperatorAccount"),
            "domainFqdn": obj.get("domainFqdn"),
            "fileShareWitnessPath": obj.get("fileShareWitnessPath"),
            "ouPath": obj.get("ouPath"),
            "sqlServiceAccount": obj.get("sqlServiceAccount"),
            "storageAccountPrimaryKey": obj.get("storageAccountPrimaryKey"),
            "storageAccountUrl": obj.get("storageAccountUrl")
        })
        return _obj



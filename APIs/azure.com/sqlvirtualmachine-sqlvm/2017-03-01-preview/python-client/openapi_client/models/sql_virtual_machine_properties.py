# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_backup_settings import AutoBackupSettings
from openapi_client.models.auto_patching_settings import AutoPatchingSettings
from openapi_client.models.key_vault_credential_settings import KeyVaultCredentialSettings
from openapi_client.models.server_configurations_management_settings import ServerConfigurationsManagementSettings
from openapi_client.models.storage_configuration_settings import StorageConfigurationSettings
from openapi_client.models.wsfc_domain_credentials import WsfcDomainCredentials
from typing import Optional, Set
from typing_extensions import Self

class SqlVirtualMachineProperties(BaseModel):
    """
    The SQL virtual machine properties.
    """ # noqa: E501
    auto_backup_settings: Optional[AutoBackupSettings] = Field(default=None, alias="autoBackupSettings")
    auto_patching_settings: Optional[AutoPatchingSettings] = Field(default=None, alias="autoPatchingSettings")
    key_vault_credential_settings: Optional[KeyVaultCredentialSettings] = Field(default=None, alias="keyVaultCredentialSettings")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state to track the async operation status.", alias="provisioningState")
    server_configurations_management_settings: Optional[ServerConfigurationsManagementSettings] = Field(default=None, alias="serverConfigurationsManagementSettings")
    sql_image_offer: Optional[StrictStr] = Field(default=None, description="SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.", alias="sqlImageOffer")
    sql_image_sku: Optional[StrictStr] = Field(default=None, description="SQL Server edition type.", alias="sqlImageSku")
    sql_management: Optional[StrictStr] = Field(default=None, description="SQL Server Management type.", alias="sqlManagement")
    sql_server_license_type: Optional[StrictStr] = Field(default=None, description="SQL Server license type.", alias="sqlServerLicenseType")
    sql_virtual_machine_group_resource_id: Optional[StrictStr] = Field(default=None, description="ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.", alias="sqlVirtualMachineGroupResourceId")
    storage_configuration_settings: Optional[StorageConfigurationSettings] = Field(default=None, alias="storageConfigurationSettings")
    virtual_machine_resource_id: Optional[StrictStr] = Field(default=None, description="ARM Resource id of underlying virtual machine created from SQL marketplace image.", alias="virtualMachineResourceId")
    wsfc_domain_credentials: Optional[WsfcDomainCredentials] = Field(default=None, alias="wsfcDomainCredentials")
    __properties: ClassVar[List[str]] = ["autoBackupSettings", "autoPatchingSettings", "keyVaultCredentialSettings", "provisioningState", "serverConfigurationsManagementSettings", "sqlImageOffer", "sqlImageSku", "sqlManagement", "sqlServerLicenseType", "sqlVirtualMachineGroupResourceId", "storageConfigurationSettings", "virtualMachineResourceId", "wsfcDomainCredentials"]

    @field_validator('sql_image_sku')
    def sql_image_sku_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Developer', 'Express', 'Standard', 'Enterprise', 'Web']):
            raise ValueError("must be one of enum values ('Developer', 'Express', 'Standard', 'Enterprise', 'Web')")
        return value

    @field_validator('sql_management')
    def sql_management_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Full', 'LightWeight', 'NoAgent']):
            raise ValueError("must be one of enum values ('Full', 'LightWeight', 'NoAgent')")
        return value

    @field_validator('sql_server_license_type')
    def sql_server_license_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PAYG', 'AHUB', 'DR']):
            raise ValueError("must be one of enum values ('PAYG', 'AHUB', 'DR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlVirtualMachineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_backup_settings
        if self.auto_backup_settings:
            _dict['autoBackupSettings'] = self.auto_backup_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_patching_settings
        if self.auto_patching_settings:
            _dict['autoPatchingSettings'] = self.auto_patching_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_vault_credential_settings
        if self.key_vault_credential_settings:
            _dict['keyVaultCredentialSettings'] = self.key_vault_credential_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server_configurations_management_settings
        if self.server_configurations_management_settings:
            _dict['serverConfigurationsManagementSettings'] = self.server_configurations_management_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_configuration_settings
        if self.storage_configuration_settings:
            _dict['storageConfigurationSettings'] = self.storage_configuration_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wsfc_domain_credentials
        if self.wsfc_domain_credentials:
            _dict['wsfcDomainCredentials'] = self.wsfc_domain_credentials.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlVirtualMachineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoBackupSettings": AutoBackupSettings.from_dict(obj["autoBackupSettings"]) if obj.get("autoBackupSettings") is not None else None,
            "autoPatchingSettings": AutoPatchingSettings.from_dict(obj["autoPatchingSettings"]) if obj.get("autoPatchingSettings") is not None else None,
            "keyVaultCredentialSettings": KeyVaultCredentialSettings.from_dict(obj["keyVaultCredentialSettings"]) if obj.get("keyVaultCredentialSettings") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "serverConfigurationsManagementSettings": ServerConfigurationsManagementSettings.from_dict(obj["serverConfigurationsManagementSettings"]) if obj.get("serverConfigurationsManagementSettings") is not None else None,
            "sqlImageOffer": obj.get("sqlImageOffer"),
            "sqlImageSku": obj.get("sqlImageSku"),
            "sqlManagement": obj.get("sqlManagement"),
            "sqlServerLicenseType": obj.get("sqlServerLicenseType"),
            "sqlVirtualMachineGroupResourceId": obj.get("sqlVirtualMachineGroupResourceId"),
            "storageConfigurationSettings": StorageConfigurationSettings.from_dict(obj["storageConfigurationSettings"]) if obj.get("storageConfigurationSettings") is not None else None,
            "virtualMachineResourceId": obj.get("virtualMachineResourceId"),
            "wsfcDomainCredentials": WsfcDomainCredentials.from_dict(obj["wsfcDomainCredentials"]) if obj.get("wsfcDomainCredentials") is not None else None
        })
        return _obj



# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.wsfc_domain_profile import WsfcDomainProfile
from typing import Optional, Set
from typing_extensions import Self

class SqlVirtualMachineGroupProperties(BaseModel):
    """
    The properties of a SQL virtual machine group.
    """ # noqa: E501
    cluster_configuration: Optional[StrictStr] = Field(default=None, description="Cluster type.", alias="clusterConfiguration")
    cluster_manager_type: Optional[StrictStr] = Field(default=None, description="Type of cluster manager: Windows Server Failover Cluster (WSFC), implied by the scale type of the group and the OS type.", alias="clusterManagerType")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state to track the async operation status.", alias="provisioningState")
    scale_type: Optional[StrictStr] = Field(default=None, description="Scale type.", alias="scaleType")
    sql_image_offer: Optional[StrictStr] = Field(default=None, description="SQL image offer. Examples may include SQL2016-WS2016, SQL2017-WS2016.", alias="sqlImageOffer")
    sql_image_sku: Optional[StrictStr] = Field(default=None, description="SQL image sku.", alias="sqlImageSku")
    wsfc_domain_profile: Optional[WsfcDomainProfile] = Field(default=None, alias="wsfcDomainProfile")
    __properties: ClassVar[List[str]] = ["clusterConfiguration", "clusterManagerType", "provisioningState", "scaleType", "sqlImageOffer", "sqlImageSku", "wsfcDomainProfile"]

    @field_validator('cluster_configuration')
    def cluster_configuration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Domainful']):
            raise ValueError("must be one of enum values ('Domainful')")
        return value

    @field_validator('cluster_manager_type')
    def cluster_manager_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WSFC']):
            raise ValueError("must be one of enum values ('WSFC')")
        return value

    @field_validator('scale_type')
    def scale_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HA']):
            raise ValueError("must be one of enum values ('HA')")
        return value

    @field_validator('sql_image_sku')
    def sql_image_sku_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Developer', 'Enterprise']):
            raise ValueError("must be one of enum values ('Developer', 'Enterprise')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlVirtualMachineGroupProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_configuration",
            "cluster_manager_type",
            "provisioning_state",
            "scale_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wsfc_domain_profile
        if self.wsfc_domain_profile:
            _dict['wsfcDomainProfile'] = self.wsfc_domain_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlVirtualMachineGroupProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterConfiguration": obj.get("clusterConfiguration"),
            "clusterManagerType": obj.get("clusterManagerType"),
            "provisioningState": obj.get("provisioningState"),
            "scaleType": obj.get("scaleType"),
            "sqlImageOffer": obj.get("sqlImageOffer"),
            "sqlImageSku": obj.get("sqlImageSku"),
            "wsfcDomainProfile": WsfcDomainProfile.from_dict(obj["wsfcDomainProfile"]) if obj.get("wsfcDomainProfile") is not None else None
        })
        return _obj



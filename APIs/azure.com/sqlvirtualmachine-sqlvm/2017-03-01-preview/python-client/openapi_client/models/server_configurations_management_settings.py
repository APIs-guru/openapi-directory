# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_features_server_configurations import AdditionalFeaturesServerConfigurations
from openapi_client.models.sql_connectivity_update_settings import SqlConnectivityUpdateSettings
from openapi_client.models.sql_storage_update_settings import SqlStorageUpdateSettings
from openapi_client.models.sql_workload_type_update_settings import SqlWorkloadTypeUpdateSettings
from typing import Optional, Set
from typing_extensions import Self

class ServerConfigurationsManagementSettings(BaseModel):
    """
    Set the connectivity, storage and workload settings.
    """ # noqa: E501
    additional_features_server_configurations: Optional[AdditionalFeaturesServerConfigurations] = Field(default=None, alias="additionalFeaturesServerConfigurations")
    sql_connectivity_update_settings: Optional[SqlConnectivityUpdateSettings] = Field(default=None, alias="sqlConnectivityUpdateSettings")
    sql_storage_update_settings: Optional[SqlStorageUpdateSettings] = Field(default=None, alias="sqlStorageUpdateSettings")
    sql_workload_type_update_settings: Optional[SqlWorkloadTypeUpdateSettings] = Field(default=None, alias="sqlWorkloadTypeUpdateSettings")
    __properties: ClassVar[List[str]] = ["additionalFeaturesServerConfigurations", "sqlConnectivityUpdateSettings", "sqlStorageUpdateSettings", "sqlWorkloadTypeUpdateSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerConfigurationsManagementSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_features_server_configurations
        if self.additional_features_server_configurations:
            _dict['additionalFeaturesServerConfigurations'] = self.additional_features_server_configurations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sql_connectivity_update_settings
        if self.sql_connectivity_update_settings:
            _dict['sqlConnectivityUpdateSettings'] = self.sql_connectivity_update_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sql_storage_update_settings
        if self.sql_storage_update_settings:
            _dict['sqlStorageUpdateSettings'] = self.sql_storage_update_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sql_workload_type_update_settings
        if self.sql_workload_type_update_settings:
            _dict['sqlWorkloadTypeUpdateSettings'] = self.sql_workload_type_update_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerConfigurationsManagementSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalFeaturesServerConfigurations": AdditionalFeaturesServerConfigurations.from_dict(obj["additionalFeaturesServerConfigurations"]) if obj.get("additionalFeaturesServerConfigurations") is not None else None,
            "sqlConnectivityUpdateSettings": SqlConnectivityUpdateSettings.from_dict(obj["sqlConnectivityUpdateSettings"]) if obj.get("sqlConnectivityUpdateSettings") is not None else None,
            "sqlStorageUpdateSettings": SqlStorageUpdateSettings.from_dict(obj["sqlStorageUpdateSettings"]) if obj.get("sqlStorageUpdateSettings") is not None else None,
            "sqlWorkloadTypeUpdateSettings": SqlWorkloadTypeUpdateSettings.from_dict(obj["sqlWorkloadTypeUpdateSettings"]) if obj.get("sqlWorkloadTypeUpdateSettings") is not None else None
        })
        return _obj



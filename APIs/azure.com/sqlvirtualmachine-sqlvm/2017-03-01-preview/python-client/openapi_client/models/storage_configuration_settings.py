# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sql_storage_settings import SQLStorageSettings
from typing import Optional, Set
from typing_extensions import Self

class StorageConfigurationSettings(BaseModel):
    """
    Storage Configurations for SQL Data, Log and TempDb.
    """ # noqa: E501
    disk_configuration_type: Optional[StrictStr] = Field(default=None, description="Disk configuration to apply to SQL Server.", alias="diskConfigurationType")
    sql_data_settings: Optional[SQLStorageSettings] = Field(default=None, alias="sqlDataSettings")
    sql_log_settings: Optional[SQLStorageSettings] = Field(default=None, alias="sqlLogSettings")
    sql_temp_db_settings: Optional[SQLStorageSettings] = Field(default=None, alias="sqlTempDbSettings")
    storage_workload_type: Optional[StrictStr] = Field(default=None, description="Storage workload type.", alias="storageWorkloadType")
    __properties: ClassVar[List[str]] = ["diskConfigurationType", "sqlDataSettings", "sqlLogSettings", "sqlTempDbSettings", "storageWorkloadType"]

    @field_validator('disk_configuration_type')
    def disk_configuration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEW', 'EXTEND', 'ADD']):
            raise ValueError("must be one of enum values ('NEW', 'EXTEND', 'ADD')")
        return value

    @field_validator('storage_workload_type')
    def storage_workload_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GENERAL', 'OLTP', 'DW']):
            raise ValueError("must be one of enum values ('GENERAL', 'OLTP', 'DW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageConfigurationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sql_data_settings
        if self.sql_data_settings:
            _dict['sqlDataSettings'] = self.sql_data_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sql_log_settings
        if self.sql_log_settings:
            _dict['sqlLogSettings'] = self.sql_log_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sql_temp_db_settings
        if self.sql_temp_db_settings:
            _dict['sqlTempDbSettings'] = self.sql_temp_db_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageConfigurationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskConfigurationType": obj.get("diskConfigurationType"),
            "sqlDataSettings": SQLStorageSettings.from_dict(obj["sqlDataSettings"]) if obj.get("sqlDataSettings") is not None else None,
            "sqlLogSettings": SQLStorageSettings.from_dict(obj["sqlLogSettings"]) if obj.get("sqlLogSettings") is not None else None,
            "sqlTempDbSettings": SQLStorageSettings.from_dict(obj["sqlTempDbSettings"]) if obj.get("sqlTempDbSettings") is not None else None,
            "storageWorkloadType": obj.get("storageWorkloadType")
        })
        return _obj



# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.private_ip_address import PrivateIPAddress
from typing import Optional, Set
from typing_extensions import Self

class LoadBalancerConfiguration(BaseModel):
    """
    A load balancer configuration for an availability group listener.
    """ # noqa: E501
    load_balancer_resource_id: Optional[StrictStr] = Field(default=None, description="Resource id of the load balancer.", alias="loadBalancerResourceId")
    private_ip_address: Optional[PrivateIPAddress] = Field(default=None, alias="privateIpAddress")
    probe_port: Optional[StrictInt] = Field(default=None, description="Probe port.", alias="probePort")
    public_ip_address_resource_id: Optional[StrictStr] = Field(default=None, description="Resource id of the public IP.", alias="publicIpAddressResourceId")
    sql_virtual_machine_instances: Optional[List[StrictStr]] = Field(default=None, description="List of the SQL virtual machine instance resource id's that are enrolled into the availability group listener.", alias="sqlVirtualMachineInstances")
    __properties: ClassVar[List[str]] = ["loadBalancerResourceId", "privateIpAddress", "probePort", "publicIpAddressResourceId", "sqlVirtualMachineInstances"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoadBalancerConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of private_ip_address
        if self.private_ip_address:
            _dict['privateIpAddress'] = self.private_ip_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoadBalancerConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "loadBalancerResourceId": obj.get("loadBalancerResourceId"),
            "privateIpAddress": PrivateIPAddress.from_dict(obj["privateIpAddress"]) if obj.get("privateIpAddress") is not None else None,
            "probePort": obj.get("probePort"),
            "publicIpAddressResourceId": obj.get("publicIpAddressResourceId"),
            "sqlVirtualMachineInstances": obj.get("sqlVirtualMachineInstances")
        })
        return _obj



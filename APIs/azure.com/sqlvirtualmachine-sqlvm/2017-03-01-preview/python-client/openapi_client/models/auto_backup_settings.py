# coding: utf-8

"""
    SqlVirtualMachineManagementClient

    The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AutoBackupSettings(BaseModel):
    """
    Configure backups for databases in your SQL virtual machine.
    """ # noqa: E501
    backup_schedule_type: Optional[StrictStr] = Field(default=None, description="Backup schedule type.", alias="backupScheduleType")
    backup_system_dbs: Optional[StrictBool] = Field(default=None, description="Include or exclude system databases from auto backup.", alias="backupSystemDbs")
    enable: Optional[StrictBool] = Field(default=None, description="Enable or disable autobackup on SQL virtual machine.")
    enable_encryption: Optional[StrictBool] = Field(default=None, description="Enable or disable encryption for backup on SQL virtual machine.", alias="enableEncryption")
    full_backup_frequency: Optional[StrictStr] = Field(default=None, description="Frequency of full backups. In both cases, full backups begin during the next scheduled time window.", alias="fullBackupFrequency")
    full_backup_start_time: Optional[StrictInt] = Field(default=None, description="Start time of a given day during which full backups can take place. 0-23 hours.", alias="fullBackupStartTime")
    full_backup_window_hours: Optional[StrictInt] = Field(default=None, description="Duration of the time window of a given day during which full backups can take place. 1-23 hours.", alias="fullBackupWindowHours")
    log_backup_frequency: Optional[StrictInt] = Field(default=None, description="Frequency of log backups. 5-60 minutes.", alias="logBackupFrequency")
    password: Optional[StrictStr] = Field(default=None, description="Password for encryption on backup.")
    retention_period: Optional[StrictInt] = Field(default=None, description="Retention period of backup: 1-30 days.", alias="retentionPeriod")
    storage_access_key: Optional[StrictStr] = Field(default=None, description="Storage account key where backup will be taken to.", alias="storageAccessKey")
    storage_account_url: Optional[StrictStr] = Field(default=None, description="Storage account url where backup will be taken to.", alias="storageAccountUrl")
    __properties: ClassVar[List[str]] = ["backupScheduleType", "backupSystemDbs", "enable", "enableEncryption", "fullBackupFrequency", "fullBackupStartTime", "fullBackupWindowHours", "logBackupFrequency", "password", "retentionPeriod", "storageAccessKey", "storageAccountUrl"]

    @field_validator('backup_schedule_type')
    def backup_schedule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Manual', 'Automated']):
            raise ValueError("must be one of enum values ('Manual', 'Automated')")
        return value

    @field_validator('full_backup_frequency')
    def full_backup_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Daily', 'Weekly']):
            raise ValueError("must be one of enum values ('Daily', 'Weekly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoBackupSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoBackupSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupScheduleType": obj.get("backupScheduleType"),
            "backupSystemDbs": obj.get("backupSystemDbs"),
            "enable": obj.get("enable"),
            "enableEncryption": obj.get("enableEncryption"),
            "fullBackupFrequency": obj.get("fullBackupFrequency"),
            "fullBackupStartTime": obj.get("fullBackupStartTime"),
            "fullBackupWindowHours": obj.get("fullBackupWindowHours"),
            "logBackupFrequency": obj.get("logBackupFrequency"),
            "password": obj.get("password"),
            "retentionPeriod": obj.get("retentionPeriod"),
            "storageAccessKey": obj.get("storageAccessKey"),
            "storageAccountUrl": obj.get("storageAccountUrl")
        })
        return _obj



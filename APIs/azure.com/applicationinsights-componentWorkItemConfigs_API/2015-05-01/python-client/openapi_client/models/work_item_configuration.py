# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for work item configurations for a component.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkItemConfiguration(BaseModel):
    """
    Work item configuration associated with an application insights resource.
    """ # noqa: E501
    config_display_name: Optional[StrictStr] = Field(default=None, description="Configuration friendly name", alias="ConfigDisplayName")
    config_properties: Optional[StrictStr] = Field(default=None, description="Serialized JSON object for detailed properties", alias="ConfigProperties")
    connector_id: Optional[StrictStr] = Field(default=None, description="Connector identifier where work item is created", alias="ConnectorId")
    id: Optional[StrictStr] = Field(default=None, description="Unique Id for work item", alias="Id")
    is_default: Optional[StrictBool] = Field(default=None, description="Boolean value indicating whether configuration is default", alias="IsDefault")
    __properties: ClassVar[List[str]] = ["ConfigDisplayName", "ConfigProperties", "ConnectorId", "Id", "IsDefault"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkItemConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkItemConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ConfigDisplayName": obj.get("ConfigDisplayName"),
            "ConfigProperties": obj.get("ConfigProperties"),
            "ConnectorId": obj.get("ConnectorId"),
            "Id": obj.get("Id"),
            "IsDefault": obj.get("IsDefault")
        })
        return _obj



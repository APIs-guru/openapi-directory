# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.hosting_environment_collection import HostingEnvironmentCollection

class TestHostingEnvironmentCollection(unittest.TestCase):
    """HostingEnvironmentCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HostingEnvironmentCollection:
        """Test HostingEnvironmentCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HostingEnvironmentCollection`
        """
        model = HostingEnvironmentCollection()
        if include_optional:
            return HostingEnvironmentCollection(
                next_link = '',
                value = [
                    openapi_client.models.hosting_environment.HostingEnvironment(
                        properties = openapi_client.models.properties.properties(
                            allowed_multi_sizes = '', 
                            allowed_worker_sizes = '', 
                            api_management_account_id = '', 
                            cluster_settings = [
                                openapi_client.models.name_value_pair.NameValuePair(
                                    name = '', 
                                    value = '', )
                                ], 
                            database_edition = '', 
                            database_service_objective = '', 
                            dns_suffix = '', 
                            environment_capacities = [
                                openapi_client.models.stamp_capacity.StampCapacity(
                                    available_capacity = 56, 
                                    compute_mode = 'Shared', 
                                    exclude_from_capacity_allocation = True, 
                                    is_applicable_for_all_compute_modes = True, 
                                    name = '', 
                                    site_mode = '', 
                                    total_capacity = 56, 
                                    unit = '', 
                                    worker_size = 'Default', 
                                    worker_size_id = 56, )
                                ], 
                            environment_is_healthy = True, 
                            environment_status = '', 
                            internal_load_balancing_mode = 'None', 
                            ipssl_address_count = 56, 
                            last_action = '', 
                            last_action_result = '', 
                            location = '', 
                            maximum_number_of_machines = 56, 
                            multi_role_count = 56, 
                            multi_size = '', 
                            name = '', 
                            network_access_control_list = [
                                openapi_client.models.network_access_control_entry.NetworkAccessControlEntry(
                                    action = 'Permit', 
                                    description = '', 
                                    order = 56, 
                                    remote_subnet = '', )
                                ], 
                            provisioning_state = 'Succeeded', 
                            resource_group = '', 
                            status = 'Preparing', 
                            subscription_id = '', 
                            suspended = True, 
                            upgrade_domains = 56, 
                            vip_mappings = [
                                openapi_client.models.virtual_ip_mapping.VirtualIPMapping(
                                    in_use = True, 
                                    internal_http_port = 56, 
                                    internal_https_port = 56, 
                                    virtual_ip = '', )
                                ], 
                            virtual_network = openapi_client.models.virtual_network_profile.VirtualNetworkProfile(
                                id = '', 
                                name = '', 
                                subnet = '', 
                                type = '', ), 
                            vnet_name = '', 
                            vnet_resource_group_name = '', 
                            vnet_subnet_name = '', 
                            worker_pools = [
                                openapi_client.models.worker_pool.WorkerPool(
                                    sku = openapi_client.models.sku_description.SkuDescription(
                                        capacity = 56, 
                                        family = '', 
                                        name = '', 
                                        size = '', 
                                        tier = '', ), )
                                ], ), )
                    ]
            )
        else:
            return HostingEnvironmentCollection(
        )
        """

    def testHostingEnvironmentCollection(self):
        """Test HostingEnvironmentCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

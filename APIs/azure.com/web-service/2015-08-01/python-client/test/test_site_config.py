# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.site_config import SiteConfig

class TestSiteConfig(unittest.TestCase):
    """SiteConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SiteConfig:
        """Test SiteConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SiteConfig`
        """
        model = SiteConfig()
        if include_optional:
            return SiteConfig(
                properties = openapi_client.models.properties.properties(
                    always_on = True, 
                    api_definition = openapi_client.models.api_definition_info.ApiDefinitionInfo(
                        url = '', ), 
                    app_command_line = '', 
                    app_settings = [
                        openapi_client.models.name_value_pair.NameValuePair(
                            name = '', 
                            value = '', )
                        ], 
                    auto_heal_enabled = True, 
                    auto_heal_rules = openapi_client.models.auto_heal_rules.AutoHealRules(
                        actions = openapi_client.models.auto_heal_actions.AutoHealActions(
                            action_type = 'Recycle', 
                            custom_action = openapi_client.models.auto_heal_custom_action.AutoHealCustomAction(
                                exe = '', 
                                parameters = '', ), 
                            min_process_execution_time = '', ), 
                        triggers = openapi_client.models.auto_heal_triggers.AutoHealTriggers(
                            private_bytes_in_kb = 56, 
                            requests = openapi_client.models.requests_based_trigger.RequestsBasedTrigger(
                                count = 56, 
                                time_interval = '', ), 
                            slow_requests = openapi_client.models.slow_requests_based_trigger.SlowRequestsBasedTrigger(
                                count = 56, 
                                time_interval = '', 
                                time_taken = '', ), 
                            status_codes = [
                                openapi_client.models.status_codes_based_trigger.StatusCodesBasedTrigger(
                                    count = 56, 
                                    status = 56, 
                                    sub_status = 56, 
                                    time_interval = '', 
                                    win32_status = 56, )
                                ], ), ), 
                    auto_swap_slot_name = '', 
                    connection_strings = [
                        openapi_client.models.conn_string_info.ConnStringInfo(
                            connection_string = '', 
                            name = '', 
                            type = 'MySql', )
                        ], 
                    cors = openapi_client.models.cors_settings.CorsSettings(
                        allowed_origins = [
                            ''
                            ], ), 
                    default_documents = [
                        ''
                        ], 
                    detailed_error_logging_enabled = True, 
                    document_root = '', 
                    experiments = openapi_client.models.experiments.Experiments(
                        ramp_up_rules = [
                            openapi_client.models.ramp_up_rule.RampUpRule(
                                action_host_name = '', 
                                change_decision_callback_url = '', 
                                change_interval_in_minutes = 56, 
                                change_step = 1.337, 
                                max_reroute_percentage = 1.337, 
                                min_reroute_percentage = 1.337, 
                                name = '', 
                                reroute_percentage = 1.337, )
                            ], ), 
                    handler_mappings = [
                        openapi_client.models.handler_mapping.HandlerMapping(
                            arguments = '', 
                            extension = '', 
                            script_processor = '', )
                        ], 
                    http_logging_enabled = True, 
                    ip_security_restrictions = [
                        openapi_client.models.ip_security_restriction.IpSecurityRestriction(
                            ip_address = '', 
                            subnet_mask = '', )
                        ], 
                    java_container = '', 
                    java_container_version = '', 
                    java_version = '', 
                    limits = openapi_client.models.site_limits.SiteLimits(
                        max_disk_size_in_mb = 56, 
                        max_memory_in_mb = 56, 
                        max_percentage_cpu = 1.337, ), 
                    load_balancing = 'WeightedRoundRobin', 
                    local_my_sql_enabled = True, 
                    logs_directory_size_limit = 56, 
                    managed_pipeline_mode = 'Integrated', 
                    metadata = [
                        openapi_client.models.name_value_pair.NameValuePair(
                            name = '', 
                            value = '', )
                        ], 
                    net_framework_version = '', 
                    node_version = '', 
                    number_of_workers = 56, 
                    php_version = '', 
                    publishing_password = '', 
                    publishing_username = '', 
                    python_version = '', 
                    remote_debugging_enabled = True, 
                    remote_debugging_version = '', 
                    request_tracing_enabled = True, 
                    request_tracing_expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    scm_type = '', 
                    tracing_options = '', 
                    use32_bit_worker_process = True, 
                    virtual_applications = [
                        openapi_client.models.virtual_application.VirtualApplication(
                            physical_path = '', 
                            preload_enabled = True, 
                            virtual_directories = [
                                openapi_client.models.virtual_directory.VirtualDirectory(
                                    physical_path = '', 
                                    virtual_path = '', )
                                ], 
                            virtual_path = '', )
                        ], 
                    vnet_name = '', 
                    web_sockets_enabled = True, ),
                id = '',
                kind = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return SiteConfig(
                location = '',
        )
        """

    def testSiteConfig(self):
        """Test SiteConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.key_value_pair_string_string import KeyValuePairStringString
from openapi_client.models.resource_metric_name import ResourceMetricName
from openapi_client.models.resource_metric_value import ResourceMetricValue
from typing import Optional, Set
from typing_extensions import Self

class ResourceMetric(BaseModel):
    """
    Object representing a metric for any resource
    """ # noqa: E501
    end_time: Optional[datetime] = Field(default=None, description="Metric end time", alias="endTime")
    metric_values: Optional[List[ResourceMetricValue]] = Field(default=None, description="Metric values", alias="metricValues")
    name: Optional[ResourceMetricName] = None
    properties: Optional[List[KeyValuePairStringString]] = Field(default=None, description="Properties")
    resource_id: Optional[StrictStr] = Field(default=None, description="Metric resource Id", alias="resourceId")
    start_time: Optional[datetime] = Field(default=None, description="Metric start time", alias="startTime")
    time_grain: Optional[StrictStr] = Field(default=None, description="Metric granularity. E.g PT1H, PT5M, P1D", alias="timeGrain")
    unit: Optional[StrictStr] = Field(default=None, description="Metric unit")
    __properties: ClassVar[List[str]] = ["endTime", "metricValues", "name", "properties", "resourceId", "startTime", "timeGrain", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metric_values (list)
        _items = []
        if self.metric_values:
            for _item_metric_values in self.metric_values:
                if _item_metric_values:
                    _items.append(_item_metric_values.to_dict())
            _dict['metricValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "metricValues": [ResourceMetricValue.from_dict(_item) for _item in obj["metricValues"]] if obj.get("metricValues") is not None else None,
            "name": ResourceMetricName.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "properties": [KeyValuePairStringString.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "resourceId": obj.get("resourceId"),
            "startTime": obj.get("startTime"),
            "timeGrain": obj.get("timeGrain"),
            "unit": obj.get("unit")
        })
        return _obj



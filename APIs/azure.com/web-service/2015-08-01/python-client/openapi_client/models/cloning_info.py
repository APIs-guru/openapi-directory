# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CloningInfo(BaseModel):
    """
    Represents information needed for cloning operation
    """ # noqa: E501
    app_settings_overrides: Optional[Dict[str, StrictStr]] = Field(default=None, description="Application settings overrides for cloned web app. If specified these settings will override the settings cloned               from source web app. If not specified, application settings from source web app are retained.", alias="appSettingsOverrides")
    clone_custom_host_names: Optional[StrictBool] = Field(default=None, description="If true, clone custom hostnames from source web app", alias="cloneCustomHostNames")
    clone_source_control: Optional[StrictBool] = Field(default=None, description="Clone source control from source web app", alias="cloneSourceControl")
    configure_load_balancing: Optional[StrictBool] = Field(default=None, description="If specified configure load balancing for source and clone site", alias="configureLoadBalancing")
    correlation_id: Optional[StrictStr] = Field(default=None, description="Correlation Id of cloning operation. This id ties multiple cloning operations              together to use the same snapshot", alias="correlationId")
    hosting_environment: Optional[StrictStr] = Field(default=None, description="Hosting environment", alias="hostingEnvironment")
    overwrite: Optional[StrictBool] = Field(default=None, description="Overwrite destination web app")
    source_web_app_id: Optional[StrictStr] = Field(default=None, description="ARM resource id of the source web app. Web app resource id is of the form               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots", alias="sourceWebAppId")
    traffic_manager_profile_id: Optional[StrictStr] = Field(default=None, description="ARM resource id of the traffic manager profile to use if it exists. Traffic manager resource id is of the form               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}", alias="trafficManagerProfileId")
    traffic_manager_profile_name: Optional[StrictStr] = Field(default=None, description="Name of traffic manager profile to create. This is only needed if traffic manager profile does not already exist", alias="trafficManagerProfileName")
    __properties: ClassVar[List[str]] = ["appSettingsOverrides", "cloneCustomHostNames", "cloneSourceControl", "configureLoadBalancing", "correlationId", "hostingEnvironment", "overwrite", "sourceWebAppId", "trafficManagerProfileId", "trafficManagerProfileName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloningInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloningInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appSettingsOverrides": obj.get("appSettingsOverrides"),
            "cloneCustomHostNames": obj.get("cloneCustomHostNames"),
            "cloneSourceControl": obj.get("cloneSourceControl"),
            "configureLoadBalancing": obj.get("configureLoadBalancing"),
            "correlationId": obj.get("correlationId"),
            "hostingEnvironment": obj.get("hostingEnvironment"),
            "overwrite": obj.get("overwrite"),
            "sourceWebAppId": obj.get("sourceWebAppId"),
            "trafficManagerProfileId": obj.get("trafficManagerProfileId"),
            "trafficManagerProfileName": obj.get("trafficManagerProfileName")
        })
        return _obj



# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.requests_based_trigger import RequestsBasedTrigger
from openapi_client.models.slow_requests_based_trigger import SlowRequestsBasedTrigger
from openapi_client.models.status_codes_based_trigger import StatusCodesBasedTrigger
from typing import Optional, Set
from typing_extensions import Self

class AutoHealTriggers(BaseModel):
    """
    AutoHealTriggers - describes the triggers for auto-heal.
    """ # noqa: E501
    private_bytes_in_kb: Optional[StrictInt] = Field(default=None, description="PrivateBytesInKB - Defines a rule based on private bytes", alias="privateBytesInKB")
    requests: Optional[RequestsBasedTrigger] = None
    slow_requests: Optional[SlowRequestsBasedTrigger] = Field(default=None, alias="slowRequests")
    status_codes: Optional[List[StatusCodesBasedTrigger]] = Field(default=None, description="StatusCodes - Defines a rule based on status codes", alias="statusCodes")
    __properties: ClassVar[List[str]] = ["privateBytesInKB", "requests", "slowRequests", "statusCodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoHealTriggers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of requests
        if self.requests:
            _dict['requests'] = self.requests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slow_requests
        if self.slow_requests:
            _dict['slowRequests'] = self.slow_requests.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in status_codes (list)
        _items = []
        if self.status_codes:
            for _item_status_codes in self.status_codes:
                if _item_status_codes:
                    _items.append(_item_status_codes.to_dict())
            _dict['statusCodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoHealTriggers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "privateBytesInKB": obj.get("privateBytesInKB"),
            "requests": RequestsBasedTrigger.from_dict(obj["requests"]) if obj.get("requests") is not None else None,
            "slowRequests": SlowRequestsBasedTrigger.from_dict(obj["slowRequests"]) if obj.get("slowRequests") is not None else None,
            "statusCodes": [StatusCodesBasedTrigger.from_dict(_item) for _item in obj["statusCodes"]] if obj.get("statusCodes") is not None else None
        })
        return _obj



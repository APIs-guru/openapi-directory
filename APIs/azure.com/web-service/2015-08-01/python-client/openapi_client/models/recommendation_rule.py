# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RecommendationRule(BaseModel):
    """
    Represents a recommendation rule that the recommendation engine can perform
    """ # noqa: E501
    action_name: Optional[StrictStr] = Field(default=None, description="Name of action that is recommended by this rule in string", alias="actionName")
    channels: StrictStr = Field(description="List of available channels that this rule applies.")
    description: Optional[StrictStr] = Field(default=None, description="Localized detailed description of the rule")
    display_name: Optional[StrictStr] = Field(default=None, description="UI friendly name of the rule", alias="displayName")
    enabled: Optional[StrictInt] = Field(default=None, description="On/off flag indicating the rule is currently enabled or disabled.")
    level: StrictStr = Field(description="Level of impact indicating how critical this rule is.")
    message: Optional[StrictStr] = Field(default=None, description="Localized name of the rule (Good for UI)")
    name: Optional[StrictStr] = Field(default=None, description="Unique name of the rule")
    recommendation_id: Optional[StrictStr] = Field(default=None, description="Recommendation ID of an associated recommendation object tied to the rule, if exists.              If such an object doesn't exist, it is set to null.", alias="recommendationId")
    tags: Optional[List[StrictStr]] = Field(default=None, description="An array of category tags that the rule contains.")
    __properties: ClassVar[List[str]] = ["actionName", "channels", "description", "displayName", "enabled", "level", "message", "name", "recommendationId", "tags"]

    @field_validator('channels')
    def channels_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Notification', 'Api', 'Email', 'All']):
            raise ValueError("must be one of enum values ('Notification', 'Api', 'Email', 'All')")
        return value

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Critical', 'Warning', 'Information', 'NonUrgentSuggestion']):
            raise ValueError("must be one of enum values ('Critical', 'Warning', 'Information', 'NonUrgentSuggestion')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendationRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendationRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionName": obj.get("actionName"),
            "channels": obj.get("channels"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "enabled": obj.get("enabled"),
            "level": obj.get("level"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "recommendationId": obj.get("recommendationId"),
            "tags": obj.get("tags")
        })
        return _obj



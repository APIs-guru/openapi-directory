# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HostNameSslState(BaseModel):
    """
    Object that represents a SSL-enabled host name.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Host name")
    ssl_state: StrictStr = Field(description="SSL type", alias="sslState")
    thumbprint: Optional[StrictStr] = Field(default=None, description="SSL cert thumbprint")
    to_update: Optional[StrictBool] = Field(default=None, description="Set this flag to update existing host name", alias="toUpdate")
    virtual_ip: Optional[StrictStr] = Field(default=None, description="Virtual IP address assigned to the host name if IP based SSL is enabled", alias="virtualIP")
    __properties: ClassVar[List[str]] = ["name", "sslState", "thumbprint", "toUpdate", "virtualIP"]

    @field_validator('ssl_state')
    def ssl_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Disabled', 'SniEnabled', 'IpBasedEnabled']):
            raise ValueError("must be one of enum values ('Disabled', 'SniEnabled', 'IpBasedEnabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HostNameSslState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HostNameSslState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "sslState": obj.get("sslState"),
            "thumbprint": obj.get("thumbprint"),
            "toUpdate": obj.get("toUpdate"),
            "virtualIP": obj.get("virtualIP")
        })
        return _obj



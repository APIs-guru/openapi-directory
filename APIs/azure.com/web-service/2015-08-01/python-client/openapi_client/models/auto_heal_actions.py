# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_heal_custom_action import AutoHealCustomAction
from typing import Optional, Set
from typing_extensions import Self

class AutoHealActions(BaseModel):
    """
    AutoHealActions - Describes the actions which can be              taken by the auto-heal module when a rule is triggered.
    """ # noqa: E501
    action_type: StrictStr = Field(description="ActionType - predefined action to be taken", alias="actionType")
    custom_action: Optional[AutoHealCustomAction] = Field(default=None, alias="customAction")
    min_process_execution_time: Optional[StrictStr] = Field(default=None, description="MinProcessExecutionTime - minimum time the process must execute              before taking the action", alias="minProcessExecutionTime")
    __properties: ClassVar[List[str]] = ["actionType", "customAction", "minProcessExecutionTime"]

    @field_validator('action_type')
    def action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Recycle', 'LogEvent', 'CustomAction']):
            raise ValueError("must be one of enum values ('Recycle', 'LogEvent', 'CustomAction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoHealActions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_action
        if self.custom_action:
            _dict['customAction'] = self.custom_action.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoHealActions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionType": obj.get("actionType"),
            "customAction": AutoHealCustomAction.from_dict(obj["customAction"]) if obj.get("customAction") is not None else None,
            "minProcessExecutionTime": obj.get("minProcessExecutionTime")
        })
        return _obj



# coding: utf-8

"""
    WebSite Management Client

    Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localizable_string import LocalizableString
from typing import Optional, Set
from typing_extensions import Self

class CsmUsageQuota(BaseModel):
    """
    Usage of the quota resource
    """ # noqa: E501
    current_value: Optional[StrictInt] = Field(default=None, description="The current value of the resource counter", alias="currentValue")
    limit: Optional[StrictInt] = Field(default=None, description="The resource limit")
    name: Optional[LocalizableString] = None
    next_reset_time: Optional[datetime] = Field(default=None, description="Next reset time for the resource counter", alias="nextResetTime")
    unit: Optional[StrictStr] = Field(default=None, description="Units of measurement for the quota resource")
    __properties: ClassVar[List[str]] = ["currentValue", "limit", "name", "nextResetTime", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CsmUsageQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CsmUsageQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentValue": obj.get("currentValue"),
            "limit": obj.get("limit"),
            "name": LocalizableString.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "nextResetTime": obj.get("nextResetTime"),
            "unit": obj.get("unit")
        })
        return _obj



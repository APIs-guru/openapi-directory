# coding: utf-8

"""
    NetworkAdminManagementClient

    Network admin operation endpoints and objects.

    The version of the OpenAPI document: 2015-06-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.admin_overview_resource_health import AdminOverviewResourceHealth
from openapi_client.models.admin_overview_resource_usage import AdminOverviewResourceUsage
from typing import Optional, Set
from typing_extensions import Self

class AdminOverviewProperties(BaseModel):
    """
    Admin overview properties.
    """ # noqa: E501
    backend_ip_usage: Optional[AdminOverviewResourceUsage] = Field(default=None, alias="backendIpUsage")
    load_balancer_mux_health: Optional[AdminOverviewResourceHealth] = Field(default=None, alias="loadBalancerMuxHealth")
    mac_address_usage: Optional[AdminOverviewResourceUsage] = Field(default=None, alias="macAddressUsage")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state.", alias="provisioningState")
    public_ip_address_usage: Optional[AdminOverviewResourceUsage] = Field(default=None, alias="publicIpAddressUsage")
    virtual_gateway_health: Optional[AdminOverviewResourceHealth] = Field(default=None, alias="virtualGatewayHealth")
    virtual_network_health: Optional[AdminOverviewResourceHealth] = Field(default=None, alias="virtualNetworkHealth")
    __properties: ClassVar[List[str]] = ["backendIpUsage", "loadBalancerMuxHealth", "macAddressUsage", "provisioningState", "publicIpAddressUsage", "virtualGatewayHealth", "virtualNetworkHealth"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminOverviewProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backend_ip_usage
        if self.backend_ip_usage:
            _dict['backendIpUsage'] = self.backend_ip_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_balancer_mux_health
        if self.load_balancer_mux_health:
            _dict['loadBalancerMuxHealth'] = self.load_balancer_mux_health.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mac_address_usage
        if self.mac_address_usage:
            _dict['macAddressUsage'] = self.mac_address_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_ip_address_usage
        if self.public_ip_address_usage:
            _dict['publicIpAddressUsage'] = self.public_ip_address_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_gateway_health
        if self.virtual_gateway_health:
            _dict['virtualGatewayHealth'] = self.virtual_gateway_health.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_network_health
        if self.virtual_network_health:
            _dict['virtualNetworkHealth'] = self.virtual_network_health.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminOverviewProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendIpUsage": AdminOverviewResourceUsage.from_dict(obj["backendIpUsage"]) if obj.get("backendIpUsage") is not None else None,
            "loadBalancerMuxHealth": AdminOverviewResourceHealth.from_dict(obj["loadBalancerMuxHealth"]) if obj.get("loadBalancerMuxHealth") is not None else None,
            "macAddressUsage": AdminOverviewResourceUsage.from_dict(obj["macAddressUsage"]) if obj.get("macAddressUsage") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "publicIpAddressUsage": AdminOverviewResourceUsage.from_dict(obj["publicIpAddressUsage"]) if obj.get("publicIpAddressUsage") is not None else None,
            "virtualGatewayHealth": AdminOverviewResourceHealth.from_dict(obj["virtualGatewayHealth"]) if obj.get("virtualGatewayHealth") is not None else None,
            "virtualNetworkHealth": AdminOverviewResourceHealth.from_dict(obj["virtualNetworkHealth"]) if obj.get("virtualNetworkHealth") is not None else None
        })
        return _obj



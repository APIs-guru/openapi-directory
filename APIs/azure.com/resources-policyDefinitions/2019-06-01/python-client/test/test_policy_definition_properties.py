# coding: utf-8

"""
    PolicyClient

    To manage and control access to your resources, you can define customized policies and assign them at a scope.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.policy_definition_properties import PolicyDefinitionProperties

class TestPolicyDefinitionProperties(unittest.TestCase):
    """PolicyDefinitionProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PolicyDefinitionProperties:
        """Test PolicyDefinitionProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PolicyDefinitionProperties`
        """
        model = PolicyDefinitionProperties()
        if include_optional:
            return PolicyDefinitionProperties(
                description = '',
                display_name = '',
                metadata = openapi_client.models.metadata.metadata(),
                mode = '',
                parameters = openapi_client.models.parameters.parameters(),
                policy_rule = openapi_client.models.policy_rule.policyRule(),
                policy_type = 'NotSpecified'
            )
        else:
            return PolicyDefinitionProperties(
        )
        """

    def testPolicyDefinitionProperties(self):
        """Test PolicyDefinitionProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

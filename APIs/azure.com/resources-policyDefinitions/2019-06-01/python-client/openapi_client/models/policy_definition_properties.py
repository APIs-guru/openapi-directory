# coding: utf-8

"""
    PolicyClient

    To manage and control access to your resources, you can define customized policies and assign them at a scope.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PolicyDefinitionProperties(BaseModel):
    """
    The policy definition properties.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The policy definition description.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the policy definition.", alias="displayName")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The policy definition metadata.")
    mode: Optional[StrictStr] = Field(default=None, description="The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Required if a parameter is used in policy rule.")
    policy_rule: Optional[Dict[str, Any]] = Field(default=None, description="The policy rule.", alias="policyRule")
    policy_type: Optional[StrictStr] = Field(default=None, description="The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.", alias="policyType")
    __properties: ClassVar[List[str]] = ["description", "displayName", "metadata", "mode", "parameters", "policyRule", "policyType"]

    @field_validator('policy_type')
    def policy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSpecified', 'BuiltIn', 'Custom']):
            raise ValueError("must be one of enum values ('NotSpecified', 'BuiltIn', 'Custom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyDefinitionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyDefinitionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "metadata": obj.get("metadata"),
            "mode": obj.get("mode"),
            "parameters": obj.get("parameters"),
            "policyRule": obj.get("policyRule"),
            "policyType": obj.get("policyType")
        })
        return _obj



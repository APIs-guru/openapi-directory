# coding: utf-8

"""
    MarketplaceOrdering.Agreements

    REST API for MarketplaceOrdering Agreements.

    The version of the OpenAPI document: 2015-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List
from typing_extensions import Annotated
from openapi_client.models.agreement_terms import AgreementTerms

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def marketplace_agreements_cancel(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AgreementTerms:
        """marketplace_agreements_cancel

        Cancel marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_cancel_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def marketplace_agreements_cancel_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AgreementTerms]:
        """marketplace_agreements_cancel

        Cancel marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_cancel_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def marketplace_agreements_cancel_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """marketplace_agreements_cancel

        Cancel marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_cancel_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _marketplace_agreements_cancel_serialize(
        self,
        api_version,
        subscription_id,
        publisher_id,
        offer_id,
        plan_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if publisher_id is not None:
            _path_params['publisherId'] = publisher_id
        if offer_id is not None:
            _path_params['offerId'] = offer_id
        if plan_id is not None:
            _path_params['planId'] = plan_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def marketplace_agreements_create(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        offer_type: Annotated[StrictStr, Field(description="Offer Type, currently only virtualmachine type is supported.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        parameters: Annotated[AgreementTerms, Field(description="Parameters supplied to the Create Marketplace Terms operation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AgreementTerms:
        """marketplace_agreements_create

        Save marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param offer_type: Offer Type, currently only virtualmachine type is supported. (required)
        :type offer_type: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param parameters: Parameters supplied to the Create Marketplace Terms operation. (required)
        :type parameters: AgreementTerms
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_create_serialize(
            api_version=api_version,
            offer_type=offer_type,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def marketplace_agreements_create_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        offer_type: Annotated[StrictStr, Field(description="Offer Type, currently only virtualmachine type is supported.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        parameters: Annotated[AgreementTerms, Field(description="Parameters supplied to the Create Marketplace Terms operation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AgreementTerms]:
        """marketplace_agreements_create

        Save marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param offer_type: Offer Type, currently only virtualmachine type is supported. (required)
        :type offer_type: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param parameters: Parameters supplied to the Create Marketplace Terms operation. (required)
        :type parameters: AgreementTerms
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_create_serialize(
            api_version=api_version,
            offer_type=offer_type,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def marketplace_agreements_create_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        offer_type: Annotated[StrictStr, Field(description="Offer Type, currently only virtualmachine type is supported.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        parameters: Annotated[AgreementTerms, Field(description="Parameters supplied to the Create Marketplace Terms operation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """marketplace_agreements_create

        Save marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param offer_type: Offer Type, currently only virtualmachine type is supported. (required)
        :type offer_type: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param parameters: Parameters supplied to the Create Marketplace Terms operation. (required)
        :type parameters: AgreementTerms
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_create_serialize(
            api_version=api_version,
            offer_type=offer_type,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _marketplace_agreements_create_serialize(
        self,
        api_version,
        offer_type,
        subscription_id,
        publisher_id,
        offer_id,
        plan_id,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if offer_type is not None:
            _path_params['offerType'] = offer_type
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if publisher_id is not None:
            _path_params['publisherId'] = publisher_id
        if offer_id is not None:
            _path_params['offerId'] = offer_id
        if plan_id is not None:
            _path_params['planId'] = plan_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def marketplace_agreements_get(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        offer_type: Annotated[StrictStr, Field(description="Offer Type, currently only virtualmachine type is supported.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AgreementTerms:
        """marketplace_agreements_get

        Get marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param offer_type: Offer Type, currently only virtualmachine type is supported. (required)
        :type offer_type: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            offer_type=offer_type,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def marketplace_agreements_get_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        offer_type: Annotated[StrictStr, Field(description="Offer Type, currently only virtualmachine type is supported.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AgreementTerms]:
        """marketplace_agreements_get

        Get marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param offer_type: Offer Type, currently only virtualmachine type is supported. (required)
        :type offer_type: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            offer_type=offer_type,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def marketplace_agreements_get_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        offer_type: Annotated[StrictStr, Field(description="Offer Type, currently only virtualmachine type is supported.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """marketplace_agreements_get

        Get marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param offer_type: Offer Type, currently only virtualmachine type is supported. (required)
        :type offer_type: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            offer_type=offer_type,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _marketplace_agreements_get_serialize(
        self,
        api_version,
        subscription_id,
        offer_type,
        publisher_id,
        offer_id,
        plan_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if offer_type is not None:
            _path_params['offerType'] = offer_type
        if publisher_id is not None:
            _path_params['publisherId'] = publisher_id
        if offer_id is not None:
            _path_params['offerId'] = offer_id
        if plan_id is not None:
            _path_params['planId'] = plan_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def marketplace_agreements_get_agreement(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AgreementTerms:
        """marketplace_agreements_get_agreement

        Get marketplace agreement.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_get_agreement_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def marketplace_agreements_get_agreement_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AgreementTerms]:
        """marketplace_agreements_get_agreement

        Get marketplace agreement.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_get_agreement_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def marketplace_agreements_get_agreement_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """marketplace_agreements_get_agreement

        Get marketplace agreement.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_get_agreement_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _marketplace_agreements_get_agreement_serialize(
        self,
        api_version,
        subscription_id,
        publisher_id,
        offer_id,
        plan_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if publisher_id is not None:
            _path_params['publisherId'] = publisher_id
        if offer_id is not None:
            _path_params['offerId'] = offer_id
        if plan_id is not None:
            _path_params['planId'] = plan_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def marketplace_agreements_list(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AgreementTerms]:
        """marketplace_agreements_list

        List marketplace agreements in the subscription.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AgreementTerms]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def marketplace_agreements_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AgreementTerms]]:
        """marketplace_agreements_list

        List marketplace agreements in the subscription.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AgreementTerms]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def marketplace_agreements_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """marketplace_agreements_list

        List marketplace agreements in the subscription.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AgreementTerms]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _marketplace_agreements_list_serialize(
        self,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def marketplace_agreements_sign(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AgreementTerms:
        """marketplace_agreements_sign

        Sign marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_sign_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def marketplace_agreements_sign_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AgreementTerms]:
        """marketplace_agreements_sign

        Sign marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_sign_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def marketplace_agreements_sign_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for the request.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID that identifies an Azure subscription.")],
        publisher_id: Annotated[StrictStr, Field(description="Publisher identifier string of image being deployed.")],
        offer_id: Annotated[StrictStr, Field(description="Offer identifier string of image being deployed.")],
        plan_id: Annotated[StrictStr, Field(description="Plan identifier string of image being deployed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """marketplace_agreements_sign

        Sign marketplace terms.

        :param api_version: The API version to use for the request. (required)
        :type api_version: str
        :param subscription_id: The subscription ID that identifies an Azure subscription. (required)
        :type subscription_id: str
        :param publisher_id: Publisher identifier string of image being deployed. (required)
        :type publisher_id: str
        :param offer_id: Offer identifier string of image being deployed. (required)
        :type offer_id: str
        :param plan_id: Plan identifier string of image being deployed. (required)
        :type plan_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._marketplace_agreements_sign_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            publisher_id=publisher_id,
            offer_id=offer_id,
            plan_id=plan_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgreementTerms",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _marketplace_agreements_sign_serialize(
        self,
        api_version,
        subscription_id,
        publisher_id,
        offer_id,
        plan_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if publisher_id is not None:
            _path_params['publisherId'] = publisher_id
        if offer_id is not None:
            _path_params['offerId'] = offer_id
        if plan_id is not None:
            _path_params['planId'] = plan_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    MarketplaceOrdering.Agreements

    REST API for MarketplaceOrdering Agreements.

    The version of the OpenAPI document: 2015-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AgreementProperties(BaseModel):
    """
    Agreement Terms definition
    """ # noqa: E501
    accepted: Optional[StrictBool] = Field(default=None, description="If any version of the terms have been accepted, otherwise false.")
    license_text_link: Optional[StrictStr] = Field(default=None, description="Link to HTML with Microsoft and Publisher terms.", alias="licenseTextLink")
    plan: Optional[StrictStr] = Field(default=None, description="Plan identifier string of image being deployed.")
    privacy_policy_link: Optional[StrictStr] = Field(default=None, description="Link to the privacy policy of the publisher.", alias="privacyPolicyLink")
    product: Optional[StrictStr] = Field(default=None, description="Offer identifier string of image being deployed.")
    publisher: Optional[StrictStr] = Field(default=None, description="Publisher identifier string of image being deployed.")
    retrieve_datetime: Optional[datetime] = Field(default=None, description="Date and time in UTC of when the terms were accepted. This is empty if Accepted is false.", alias="retrieveDatetime")
    signature: Optional[StrictStr] = Field(default=None, description="Terms signature.")
    __properties: ClassVar[List[str]] = ["accepted", "licenseTextLink", "plan", "privacyPolicyLink", "product", "publisher", "retrieveDatetime", "signature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgreementProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgreementProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accepted": obj.get("accepted"),
            "licenseTextLink": obj.get("licenseTextLink"),
            "plan": obj.get("plan"),
            "privacyPolicyLink": obj.get("privacyPolicyLink"),
            "product": obj.get("product"),
            "publisher": obj.get("publisher"),
            "retrieveDatetime": obj.get("retrieveDatetime"),
            "signature": obj.get("signature")
        })
        return _obj



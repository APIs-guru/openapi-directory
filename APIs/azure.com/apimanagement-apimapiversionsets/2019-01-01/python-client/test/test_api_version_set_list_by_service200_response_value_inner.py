# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on the ApiVersionSet entity associated with your Azure API Management deployment. Using this entity you create and manage API Version Sets that are used to group APIs for consistent versioning.

    The version of the OpenAPI document: 2019-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_version_set_list_by_service200_response_value_inner import ApiVersionSetListByService200ResponseValueInner

class TestApiVersionSetListByService200ResponseValueInner(unittest.TestCase):
    """ApiVersionSetListByService200ResponseValueInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiVersionSetListByService200ResponseValueInner:
        """Test ApiVersionSetListByService200ResponseValueInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiVersionSetListByService200ResponseValueInner`
        """
        model = ApiVersionSetListByService200ResponseValueInner()
        if include_optional:
            return ApiVersionSetListByService200ResponseValueInner(
                properties = openapi_client.models.api_version_set_list_by_service_200_response_value_inner_properties.ApiVersionSet_ListByService_200_response_value_inner_properties(
                    display_name = '0', 
                    versioning_scheme = 'Segment', )
            )
        else:
            return ApiVersionSetListByService200ResponseValueInner(
        )
        """

    def testApiVersionSetListByService200ResponseValueInner(self):
        """Test ApiVersionSetListByService200ResponseValueInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

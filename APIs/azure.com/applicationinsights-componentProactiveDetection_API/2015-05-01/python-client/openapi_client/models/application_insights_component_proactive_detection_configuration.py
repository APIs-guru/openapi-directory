# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for ProactiveDetection configurations of a component.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_insights_component_proactive_detection_configuration_rule_definitions import ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInsightsComponentProactiveDetectionConfiguration(BaseModel):
    """
    Properties that define a ProactiveDetection configuration.
    """ # noqa: E501
    custom_emails: Optional[List[StrictStr]] = Field(default=None, description="Custom email addresses for this rule notifications", alias="CustomEmails")
    enabled: Optional[StrictBool] = Field(default=None, description="A flag that indicates whether this rule is enabled by the user", alias="Enabled")
    last_updated_time: Optional[StrictStr] = Field(default=None, description="The last time this rule was updated", alias="LastUpdatedTime")
    name: Optional[StrictStr] = Field(default=None, description="The rule name", alias="Name")
    rule_definitions: Optional[ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions] = Field(default=None, alias="RuleDefinitions")
    send_emails_to_subscription_owners: Optional[StrictBool] = Field(default=None, description="A flag that indicated whether notifications on this rule should be sent to subscription owners", alias="SendEmailsToSubscriptionOwners")
    __properties: ClassVar[List[str]] = ["CustomEmails", "Enabled", "LastUpdatedTime", "Name", "RuleDefinitions", "SendEmailsToSubscriptionOwners"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentProactiveDetectionConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rule_definitions
        if self.rule_definitions:
            _dict['RuleDefinitions'] = self.rule_definitions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentProactiveDetectionConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CustomEmails": obj.get("CustomEmails"),
            "Enabled": obj.get("Enabled"),
            "LastUpdatedTime": obj.get("LastUpdatedTime"),
            "Name": obj.get("Name"),
            "RuleDefinitions": ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions.from_dict(obj["RuleDefinitions"]) if obj.get("RuleDefinitions") is not None else None,
            "SendEmailsToSubscriptionOwners": obj.get("SendEmailsToSubscriptionOwners")
        })
        return _obj



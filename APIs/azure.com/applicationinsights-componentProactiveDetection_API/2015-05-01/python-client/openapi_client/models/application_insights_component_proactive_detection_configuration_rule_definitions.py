# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for ProactiveDetection configurations of a component.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions(BaseModel):
    """
    Static definitions of the ProactiveDetection configuration rule (same values for all components).
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The rule description", alias="Description")
    display_name: Optional[StrictStr] = Field(default=None, description="The rule name as it is displayed in UI", alias="DisplayName")
    help_url: Optional[StrictStr] = Field(default=None, description="URL which displays additional info about the proactive detection rule", alias="HelpUrl")
    is_enabled_by_default: Optional[StrictBool] = Field(default=None, description="A flag indicating whether the rule is enabled by default", alias="IsEnabledByDefault")
    is_hidden: Optional[StrictBool] = Field(default=None, description="A flag indicating whether the rule is hidden (from the UI)", alias="IsHidden")
    is_in_preview: Optional[StrictBool] = Field(default=None, description="A flag indicating whether the rule is in preview", alias="IsInPreview")
    name: Optional[StrictStr] = Field(default=None, description="The rule name", alias="Name")
    supports_email_notifications: Optional[StrictBool] = Field(default=None, description="A flag indicating whether email notifications are supported for detections for this rule", alias="SupportsEmailNotifications")
    __properties: ClassVar[List[str]] = ["Description", "DisplayName", "HelpUrl", "IsEnabledByDefault", "IsHidden", "IsInPreview", "Name", "SupportsEmailNotifications"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "DisplayName": obj.get("DisplayName"),
            "HelpUrl": obj.get("HelpUrl"),
            "IsEnabledByDefault": obj.get("IsEnabledByDefault"),
            "IsHidden": obj.get("IsHidden"),
            "IsInPreview": obj.get("IsInPreview"),
            "Name": obj.get("Name"),
            "SupportsEmailNotifications": obj.get("SupportsEmailNotifications")
        })
        return _obj



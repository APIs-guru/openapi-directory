# coding: utf-8

"""
    StreamAnalyticsManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AzureTableOutputDataSourceProperties(BaseModel):
    """
    The properties that are associated with an Azure Table output.
    """ # noqa: E501
    account_key: Optional[StrictStr] = Field(default=None, description="The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.", alias="accountKey")
    account_name: Optional[StrictStr] = Field(default=None, description="The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.", alias="accountName")
    batch_size: Optional[StrictInt] = Field(default=None, description="The number of rows to write to the Azure Table at a time.", alias="batchSize")
    columns_to_remove: Optional[List[StrictStr]] = Field(default=None, description="If specified, each item in the array is the name of a column to remove (if present) from output event entities.", alias="columnsToRemove")
    partition_key: Optional[StrictStr] = Field(default=None, description="This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.", alias="partitionKey")
    row_key: Optional[StrictStr] = Field(default=None, description="This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.", alias="rowKey")
    table: Optional[StrictStr] = Field(default=None, description="The name of the Azure Table. Required on PUT (CreateOrReplace) requests.")
    __properties: ClassVar[List[str]] = ["accountKey", "accountName", "batchSize", "columnsToRemove", "partitionKey", "rowKey", "table"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureTableOutputDataSourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureTableOutputDataSourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountKey": obj.get("accountKey"),
            "accountName": obj.get("accountName"),
            "batchSize": obj.get("batchSize"),
            "columnsToRemove": obj.get("columnsToRemove"),
            "partitionKey": obj.get("partitionKey"),
            "rowKey": obj.get("rowKey"),
            "table": obj.get("table")
        })
        return _obj



# coding: utf-8

"""
    StreamAnalyticsManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventHubOutputDataSourceProperties(BaseModel):
    """
    The properties that are associated with an Event Hub output.
    """ # noqa: E501
    partition_key: Optional[StrictStr] = Field(default=None, description="The key/column that is used to determine to which partition to send event data.", alias="partitionKey")
    event_hub_name: Optional[StrictStr] = Field(default=None, description="The name of the Event Hub. Required on PUT (CreateOrReplace) requests.", alias="eventHubName")
    service_bus_namespace: Optional[StrictStr] = Field(default=None, description="The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.", alias="serviceBusNamespace")
    shared_access_policy_key: Optional[StrictStr] = Field(default=None, description="The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.", alias="sharedAccessPolicyKey")
    shared_access_policy_name: Optional[StrictStr] = Field(default=None, description="The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.", alias="sharedAccessPolicyName")
    __properties: ClassVar[List[str]] = ["eventHubName", "serviceBusNamespace", "sharedAccessPolicyKey", "sharedAccessPolicyName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventHubOutputDataSourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventHubOutputDataSourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventHubName": obj.get("eventHubName"),
            "serviceBusNamespace": obj.get("serviceBusNamespace"),
            "sharedAccessPolicyKey": obj.get("sharedAccessPolicyKey"),
            "sharedAccessPolicyName": obj.get("sharedAccessPolicyName")
        })
        return _obj



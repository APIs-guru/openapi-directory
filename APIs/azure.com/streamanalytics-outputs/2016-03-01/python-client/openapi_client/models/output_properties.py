# coding: utf-8

"""
    StreamAnalyticsManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.output_data_source import OutputDataSource
from openapi_client.models.output_properties_diagnostics import OutputPropertiesDiagnostics
from openapi_client.models.output_properties_serialization import OutputPropertiesSerialization
from typing import Optional, Set
from typing_extensions import Self

class OutputProperties(BaseModel):
    """
    The properties that are associated with an output.
    """ # noqa: E501
    datasource: Optional[OutputDataSource] = None
    diagnostics: Optional[OutputPropertiesDiagnostics] = None
    etag: Optional[StrictStr] = Field(default=None, description="The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.")
    serialization: Optional[OutputPropertiesSerialization] = None
    __properties: ClassVar[List[str]] = ["datasource", "diagnostics", "etag", "serialization"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutputProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "etag",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of datasource
        if self.datasource:
            _dict['datasource'] = self.datasource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diagnostics
        if self.diagnostics:
            _dict['diagnostics'] = self.diagnostics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of serialization
        if self.serialization:
            _dict['serialization'] = self.serialization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutputProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasource": OutputDataSource.from_dict(obj["datasource"]) if obj.get("datasource") is not None else None,
            "diagnostics": OutputPropertiesDiagnostics.from_dict(obj["diagnostics"]) if obj.get("diagnostics") is not None else None,
            "etag": obj.get("etag"),
            "serialization": OutputPropertiesSerialization.from_dict(obj["serialization"]) if obj.get("serialization") is not None else None
        })
        return _obj



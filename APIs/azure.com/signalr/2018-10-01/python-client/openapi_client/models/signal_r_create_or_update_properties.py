# coding: utf-8

"""
    SignalRManagementClient

    REST API for Azure SignalR Service

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.signal_r_cors_settings import SignalRCorsSettings
from openapi_client.models.signal_r_feature import SignalRFeature
from typing import Optional, Set
from typing_extensions import Self

class SignalRCreateOrUpdateProperties(BaseModel):
    """
    Settings used to provision or configure the resource.
    """ # noqa: E501
    cors: Optional[SignalRCorsSettings] = None
    features: Optional[List[SignalRFeature]] = Field(default=None, description="List of SignalR featureFlags. e.g. ServiceMode.    FeatureFlags that are not included in the parameters for the update operation will not be modified.  And the response will only include featureFlags that are explicitly set.   When a featureFlag is not explicitly set, SignalR service will use its globally default value.   But keep in mind, the default value doesn't mean \"false\". It varies in terms of different FeatureFlags.")
    host_name_prefix: Optional[StrictStr] = Field(default=None, description="Prefix for the hostName of the SignalR service. Retained for future use.  The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.", alias="hostNamePrefix")
    __properties: ClassVar[List[str]] = ["cors", "features", "hostNamePrefix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignalRCreateOrUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cors
        if self.cors:
            _dict['cors'] = self.cors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item_features in self.features:
                if _item_features:
                    _items.append(_item_features.to_dict())
            _dict['features'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignalRCreateOrUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cors": SignalRCorsSettings.from_dict(obj["cors"]) if obj.get("cors") is not None else None,
            "features": [SignalRFeature.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "hostNamePrefix": obj.get("hostNamePrefix")
        })
        return _obj



# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.

    The version of the OpenAPI document: 2017-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.diagnostic_logger_list_by_service200_response_value_inner_properties_sampling import DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling

class TestDiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling(unittest.TestCase):
    """DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling:
        """Test DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling`
        """
        model = DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling()
        if include_optional:
            return DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling(
                properties = openapi_client.models.diagnostic_logger_list_by_service_200_response_value_inner_properties_sampling_properties.DiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties(
                    evaluation_interval = '0', 
                    initial_percentage = 1.337, 
                    max_percentage = 1.337, 
                    max_telemetry_items_per_second = 56, 
                    min_percentage = 1.337, 
                    moving_average_ratio = 1.337, 
                    percentage = 1.337, 
                    percentage_decrease_timeout = '0', 
                    percentage_increase_timeout = '0', 
                    sampling_type = 'fixed', )
            )
        else:
            return DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling(
        )
        """

    def testDiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling(self):
        """Test DiagnosticLoggerListByService200ResponseValueInnerPropertiesSampling"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

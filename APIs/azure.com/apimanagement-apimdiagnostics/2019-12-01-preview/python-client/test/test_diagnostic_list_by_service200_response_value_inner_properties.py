# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.diagnostic_list_by_service200_response_value_inner_properties import DiagnosticListByService200ResponseValueInnerProperties

class TestDiagnosticListByService200ResponseValueInnerProperties(unittest.TestCase):
    """DiagnosticListByService200ResponseValueInnerProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiagnosticListByService200ResponseValueInnerProperties:
        """Test DiagnosticListByService200ResponseValueInnerProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiagnosticListByService200ResponseValueInnerProperties`
        """
        model = DiagnosticListByService200ResponseValueInnerProperties()
        if include_optional:
            return DiagnosticListByService200ResponseValueInnerProperties(
                always_log = 'allErrors',
                backend = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_backend.Diagnostic_ListByService_200_response_value_inner_properties_backend(
                    request = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_backend_request.Diagnostic_ListByService_200_response_value_inner_properties_backend_request(
                        body = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_backend_request_body.Diagnostic_ListByService_200_response_value_inner_properties_backend_request_body(
                            bytes = 56, ), 
                        headers = [
                            ''
                            ], ), 
                    response = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_backend_request.Diagnostic_ListByService_200_response_value_inner_properties_backend_request(), ),
                frontend = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_backend.Diagnostic_ListByService_200_response_value_inner_properties_backend(
                    request = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_backend_request.Diagnostic_ListByService_200_response_value_inner_properties_backend_request(
                        body = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_backend_request_body.Diagnostic_ListByService_200_response_value_inner_properties_backend_request_body(
                            bytes = 56, ), 
                        headers = [
                            ''
                            ], ), 
                    response = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_backend_request.Diagnostic_ListByService_200_response_value_inner_properties_backend_request(), ),
                http_correlation_protocol = 'None',
                log_client_ip = True,
                logger_id = '',
                sampling = openapi_client.models.diagnostic_list_by_service_200_response_value_inner_properties_sampling.Diagnostic_ListByService_200_response_value_inner_properties_sampling(
                    percentage = 0, 
                    sampling_type = 'fixed', ),
                verbosity = 'verbose'
            )
        else:
            return DiagnosticListByService200ResponseValueInnerProperties(
                logger_id = '',
        )
        """

    def testDiagnosticListByService200ResponseValueInnerProperties(self):
        """Test DiagnosticListByService200ResponseValueInnerProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

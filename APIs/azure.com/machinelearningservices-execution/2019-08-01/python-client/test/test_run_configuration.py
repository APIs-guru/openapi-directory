# coding: utf-8

"""
    Execution Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.run_configuration import RunConfiguration

class TestRunConfiguration(unittest.TestCase):
    """RunConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RunConfiguration:
        """Test RunConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RunConfiguration`
        """
        model = RunConfiguration()
        if include_optional:
            return RunConfiguration(
                arguments = ["234"],
                communicator = 'None',
                data_references = {
                    'key' : openapi_client.models.data_reference_configuration.DataReferenceConfiguration(
                        data_store_name = 'myblobstore', 
                        mode = 'Mount', 
                        overwrite = True, 
                        path_on_compute = '', 
                        path_on_data_store = '/images/validation', )
                    },
                environment = openapi_client.models.environment_definition.EnvironmentDefinition(
                    docker = openapi_client.models.docker_section.DockerSection(
                        arguments = [
                            ''
                            ], 
                        base_dockerfile = 'FROM ubuntu:latest
RUN echo "Hello world!"', 
                        base_image = 'ubuntu:latest', 
                        base_image_registry = openapi_client.models.container_registry.ContainerRegistry(
                            address = '', 
                            password = '', 
                            username = '', ), 
                        enabled = True, 
                        shared_volumes = True, ), 
                    environment_variables = {
                        'key' : ''
                        }, 
                    inferencing_stack_version = 'latest', 
                    name = 'mydevenvironment', 
                    python = openapi_client.models.python_section.PythonSection(
                        base_conda_environment = '', 
                        conda_dependencies = openapi_client.models.conda_dependencies.condaDependencies(), 
                        interpreter_path = '', 
                        user_managed_dependencies = True, ), 
                    spark = openapi_client.models.spark_section.SparkSection(
                        packages = [
                            openapi_client.models.spark_maven_package.SparkMavenPackage(
                                artifact = '', 
                                group = '', 
                                version = '', )
                            ], 
                        precache_packages = True, 
                        repositories = [
                            ''
                            ], ), 
                    version = '1', ),
                framework = 'Python',
                hdi = openapi_client.models.hdi_configuration.HdiConfiguration(
                    yarn_deploy_mode = 'None', ),
                history = openapi_client.models.history_configuration.HistoryConfiguration(
                    directories_to_watch = ["logs", "outputs"], 
                    output_collection = True, ),
                job_name = 'FindSquaresJob',
                max_run_duration_seconds = 84000,
                mpi = openapi_client.models.mpi_configuration.MpiConfiguration(
                    process_count_per_node = 2, ),
                node_count = 1,
                script = 'findsquare.py',
                spark = openapi_client.models.spark_configuration.SparkConfiguration(
                    configuration = {
                        'key' : ''
                        }, ),
                target = 'amlcompute',
                tensorflow = openapi_client.models.tensorflow_configuration.TensorflowConfiguration(
                    parameter_server_count = 1, 
                    worker_count = 2, )
            )
        else:
            return RunConfiguration(
        )
        """

    def testRunConfiguration(self):
        """Test RunConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

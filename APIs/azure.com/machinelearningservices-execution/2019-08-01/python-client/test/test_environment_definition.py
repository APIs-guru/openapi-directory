# coding: utf-8

"""
    Execution Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.environment_definition import EnvironmentDefinition

class TestEnvironmentDefinition(unittest.TestCase):
    """EnvironmentDefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnvironmentDefinition:
        """Test EnvironmentDefinition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnvironmentDefinition`
        """
        model = EnvironmentDefinition()
        if include_optional:
            return EnvironmentDefinition(
                docker = openapi_client.models.docker_section.DockerSection(
                    arguments = [
                        ''
                        ], 
                    base_dockerfile = 'FROM ubuntu:latest
RUN echo "Hello world!"', 
                    base_image = 'ubuntu:latest', 
                    base_image_registry = openapi_client.models.container_registry.ContainerRegistry(
                        address = '', 
                        password = '', 
                        username = '', ), 
                    enabled = True, 
                    shared_volumes = True, ),
                environment_variables = {
                    'key' : ''
                    },
                inferencing_stack_version = 'latest',
                name = 'mydevenvironment',
                python = openapi_client.models.python_section.PythonSection(
                    base_conda_environment = '', 
                    conda_dependencies = openapi_client.models.conda_dependencies.condaDependencies(), 
                    interpreter_path = '', 
                    user_managed_dependencies = True, ),
                spark = openapi_client.models.spark_section.SparkSection(
                    packages = [
                        openapi_client.models.spark_maven_package.SparkMavenPackage(
                            artifact = '', 
                            group = '', 
                            version = '', )
                        ], 
                    precache_packages = True, 
                    repositories = [
                        ''
                        ], ),
                version = '1'
            )
        else:
            return EnvironmentDefinition(
        )
        """

    def testEnvironmentDefinition(self):
        """Test EnvironmentDefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Management Groups

    The Azure Management Groups API enables consolidation of multiple  subscriptions/resources into an organizational hierarchy and centrally  manage access control, policies, alerting and reporting for those resources. 

    The version of the OpenAPI document: 2017-08-31-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.management_group_recursive_child_info import ManagementGroupRecursiveChildInfo

class TestManagementGroupRecursiveChildInfo(unittest.TestCase):
    """ManagementGroupRecursiveChildInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ManagementGroupRecursiveChildInfo:
        """Test ManagementGroupRecursiveChildInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ManagementGroupRecursiveChildInfo`
        """
        model = ManagementGroupRecursiveChildInfo()
        if include_optional:
            return ManagementGroupRecursiveChildInfo(
                child_id = '',
                child_type = 'Enrollment',
                children = [
                    openapi_client.models.management_group_recursive_child_info.ManagementGroupRecursiveChildInfo(
                        child_id = '', 
                        child_type = 'Enrollment', 
                        display_name = '', 
                        tenant_id = '', )
                    ],
                display_name = '',
                tenant_id = ''
            )
        else:
            return ManagementGroupRecursiveChildInfo(
        )
        """

    def testManagementGroupRecursiveChildInfo(self):
        """Test ManagementGroupRecursiveChildInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

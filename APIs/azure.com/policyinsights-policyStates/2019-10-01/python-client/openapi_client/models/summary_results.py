# coding: utf-8

"""
    PolicyStatesClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.compliance_detail import ComplianceDetail
from typing import Optional, Set
from typing_extensions import Self

class SummaryResults(BaseModel):
    """
    Compliance summary on a particular summary level.
    """ # noqa: E501
    non_compliant_policies: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of non-compliant policies.", alias="nonCompliantPolicies")
    non_compliant_resources: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of non-compliant resources.", alias="nonCompliantResources")
    policy_details: Optional[List[ComplianceDetail]] = Field(default=None, description="The policy artifact summary at this level. For query scope level, it represents policy assignment summary. For policy assignment level, it represents policy definitions summary.", alias="policyDetails")
    policy_group_details: Optional[List[ComplianceDetail]] = Field(default=None, description="The policy definition group summary at this level.", alias="policyGroupDetails")
    query_results_uri: Optional[StrictStr] = Field(default=None, description="HTTP POST URI for queryResults action on Microsoft.PolicyInsights to retrieve raw results for the compliance summary. This property will not be available by default in future API versions, but could be queried explicitly.", alias="queryResultsUri")
    resource_details: Optional[List[ComplianceDetail]] = Field(default=None, description="The resources summary at this level.", alias="resourceDetails")
    __properties: ClassVar[List[str]] = ["nonCompliantPolicies", "nonCompliantResources", "policyDetails", "policyGroupDetails", "queryResultsUri", "resourceDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SummaryResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in policy_details (list)
        _items = []
        if self.policy_details:
            for _item_policy_details in self.policy_details:
                if _item_policy_details:
                    _items.append(_item_policy_details.to_dict())
            _dict['policyDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policy_group_details (list)
        _items = []
        if self.policy_group_details:
            for _item_policy_group_details in self.policy_group_details:
                if _item_policy_group_details:
                    _items.append(_item_policy_group_details.to_dict())
            _dict['policyGroupDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resource_details (list)
        _items = []
        if self.resource_details:
            for _item_resource_details in self.resource_details:
                if _item_resource_details:
                    _items.append(_item_resource_details.to_dict())
            _dict['resourceDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SummaryResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nonCompliantPolicies": obj.get("nonCompliantPolicies"),
            "nonCompliantResources": obj.get("nonCompliantResources"),
            "policyDetails": [ComplianceDetail.from_dict(_item) for _item in obj["policyDetails"]] if obj.get("policyDetails") is not None else None,
            "policyGroupDetails": [ComplianceDetail.from_dict(_item) for _item in obj["policyGroupDetails"]] if obj.get("policyGroupDetails") is not None else None,
            "queryResultsUri": obj.get("queryResultsUri"),
            "resourceDetails": [ComplianceDetail.from_dict(_item) for _item in obj["resourceDetails"]] if obj.get("resourceDetails") is not None else None
        })
        return _obj


